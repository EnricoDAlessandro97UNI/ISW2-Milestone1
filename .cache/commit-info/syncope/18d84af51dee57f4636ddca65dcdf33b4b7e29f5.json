{"sha":"18d84af51dee57f4636ddca65dcdf33b4b7e29f5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE4ZDg0YWY1MWRlZTU3ZjQ2MzZkZGNhNjVkY2RmMzNiNGI3ZTI5ZjU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-01-08T16:17:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-01-09T10:45:53Z"},"message":"[SYNCOPE-1531] Improvements: Swagger docs + propagation actions for CSV export + result page in Admin Console for CSV import","tree":{"sha":"8279fa2f516f16f319fc66beee97a74b9dec9efe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8279fa2f516f16f319fc66beee97a74b9dec9efe"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/18d84af51dee57f4636ddca65dcdf33b4b7e29f5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/18d84af51dee57f4636ddca65dcdf33b4b7e29f5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/18d84af51dee57f4636ddca65dcdf33b4b7e29f5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7adde17fdc741a81a44506c08ffcd0274c5c3a23","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7adde17fdc741a81a44506c08ffcd0274c5c3a23","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7adde17fdc741a81a44506c08ffcd0274c5c3a23"}],"stats":{"total":952,"additions":685,"deletions":267},"files":[{"sha":"b091655db0649aaf68bff1f5d70f87b9b1a14717","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMAnyDirectoryPanelAdditionalActionsProvider.java","status":"modified","additions":35,"deletions":7,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMAnyDirectoryPanelAdditionalActionsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMAnyDirectoryPanelAdditionalActionsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMAnyDirectoryPanelAdditionalActionsProvider.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.client.console.commons;\n \n+import java.io.Serializable;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.PreferenceManager;\n@@ -29,8 +31,11 @@\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wizards.CSVPullWizardBuilder;\n import org.apache.syncope.client.console.wizards.CSVPushWizardBuilder;\n+import org.apache.syncope.client.console.wizards.any.ProvisioningReportsPanel;\n+import org.apache.syncope.client.console.wizards.any.ResultPage;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.CSVPullSpec;\n import org.apache.syncope.common.rest.api.beans.CSVPushSpec;\n@@ -39,6 +44,7 @@\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.event.IEvent;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.StringResourceModel;\n \n@@ -70,17 +76,39 @@ public void onEvent(final IEvent<?> event) {\n                     modal.close(target);\n                 } else if (event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {\n                     AjaxWizard.NewItemFinishEvent<?> payload = (AjaxWizard.NewItemFinishEvent) event.getPayload();\n-                    if (Constants.OPERATION_SUCCEEDED.equals(payload.getResult())) {\n-                        AjaxRequestTarget target = payload.getTarget();\n+                    AjaxRequestTarget target = payload.getTarget();\n \n+                    SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n+                    ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+\n+                    target.add(container);\n+\n+                    if (payload.getResult() instanceof ArrayList) {\n+                        modal.setContent(new ResultPage<Serializable>(\n+                                null,\n+                                payload.getResult()) {\n+\n+                            private static final long serialVersionUID = -2630573849050255233L;\n+\n+                            @Override\n+                            protected void closeAction(final AjaxRequestTarget target) {\n+                                modal.close(target);\n+                            }\n+\n+                            @Override\n+                            protected Panel customResultBody(\n+                                    final String id, final Serializable item, final Serializable result) {\n+\n+                                @SuppressWarnings(\"unchecked\")\n+                                ArrayList<ProvisioningReport> reports = (ArrayList<ProvisioningReport>) result;\n+                                return new ProvisioningReportsPanel(id, reports, pageRef);\n+                            }\n+                        });\n+                        target.add(modal.getForm());\n+                    } else if (Constants.OPERATION_SUCCEEDED.equals(payload.getResult())) {\n                         if (csvDownloadBehavior.hasResponse()) {\n                             csvDownloadBehavior.initiate(target);\n                         }\n-\n-                        SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n-                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n-\n-                        target.add(container);\n                         modal.close(target);\n                     }\n                 }"},{"sha":"4867673946d02aa799d8524faec3ccfc68da6d12","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/CSVConfPanel.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCSVConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCSVConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCSVConfPanel.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -43,21 +42,21 @@ public CSVConfPanel(final String id, final AbstractCSVSpec spec) {\n \n         AjaxCharacterFieldPanel columnSeparator = new AjaxCharacterFieldPanel(\n                 \"columnSeparator\", \"columnSeparator\", new PropertyModel<>(spec, \"columnSeparator\"));\n-        columnSeparator.setChoices(Arrays.asList(',', ';', ' '));\n+        columnSeparator.setChoices(List.of(',', ';', ' '));\n         columnSeparator.setRequired(true);\n         add(columnSeparator);\n \n         AjaxTextFieldPanel arrayElementSeparator = new AjaxTextFieldPanel(\n                 \"arrayElementSeparator\", \"arrayElementSeparator\",\n                 new PropertyModel<>(spec, \"arrayElementSeparator\"));\n-        arrayElementSeparator.setChoices(Arrays.asList(\";\"));\n+        arrayElementSeparator.setChoices(List.of(\";\"));\n         arrayElementSeparator.setRequired(true);\n         arrayElementSeparator.addValidator(new StringValidator(1, 1));\n         add(arrayElementSeparator);\n \n         AjaxCharacterFieldPanel quoteChar = new AjaxCharacterFieldPanel(\n                 \"quoteChar\", \"quoteChar\", new PropertyModel<>(spec, \"quoteChar\"));\n-        quoteChar.setChoices(Arrays.asList('\"'));\n+        quoteChar.setChoices(List.of('\"'));\n         quoteChar.setRequired(true);\n         add(quoteChar);\n "},{"sha":"a341569a5347af034627eef0079263975a65e2bd","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ReconciliationRestClient.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReconciliationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReconciliationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReconciliationRestClient.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -19,7 +19,8 @@\n package org.apache.syncope.client.console.rest;\n \n import java.io.InputStream;\n-import java.util.List;\n+import java.util.ArrayList;\n+import java.util.stream.Collectors;\n import javax.ws.rs.core.Response;\n import org.apache.cxf.jaxrs.client.Client;\n import org.apache.cxf.jaxrs.client.WebClient;\n@@ -63,12 +64,13 @@ public static Response push(final AnyQuery anyQuery, final CSVPushSpec spec) {\n         return response;\n     }\n \n-    public static List<ProvisioningReport> pull(final CSVPullSpec spec, final InputStream csv) {\n+    public static ArrayList<ProvisioningReport> pull(final CSVPullSpec spec, final InputStream csv) {\n         ReconciliationService service = getService(ReconciliationService.class);\n         Client client = WebClient.client(service);\n         client.type(RESTHeaders.TEXT_CSV);\n \n-        List<ProvisioningReport> result = service.pull(spec, csv);\n+        ArrayList<ProvisioningReport> result = service.pull(spec, csv).stream().\n+                collect(Collectors.toCollection(ArrayList::new));\n \n         SyncopeConsoleSession.get().resetClient(ReconciliationService.class);\n "},{"sha":"99fb6b1b64a3265064340eb399fd2f5ba5f3388f","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/CSVPullWizardBuilder.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -21,9 +21,7 @@\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.fileinput.BootstrapFileInputField;\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.fileinput.FileInputConfig;\n import java.io.ByteArrayInputStream;\n-import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -36,6 +34,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n@@ -102,9 +101,8 @@ public CSVPullWizardBuilder setEventSink(final IEventSink eventSink) {\n     }\n \n     @Override\n-    protected Serializable onApplyInternal(final CSVPullSpec modelObject) {\n-        ReconciliationRestClient.pull(modelObject, new ByteArrayInputStream(csv.getObject()));\n-        return Constants.OPERATION_SUCCEEDED;\n+    protected ArrayList<ProvisioningReport> onApplyInternal(final CSVPullSpec modelObject) {\n+        return ReconciliationRestClient.pull(modelObject, new ByteArrayInputStream(csv.getObject()));\n     }\n \n     @Override\n@@ -243,23 +241,24 @@ public PullTask(final CSVPullSpec spec) {\n \n             AjaxDropDownChoicePanel<MatchingRule> matchingRule = new AjaxDropDownChoicePanel<>(\n                     \"matchingRule\", \"matchingRule\", new PropertyModel<>(spec, \"matchingRule\"), false);\n-            matchingRule.setChoices(Arrays.asList(MatchingRule.values()));\n+            matchingRule.setChoices(List.of(MatchingRule.values()));\n             add(matchingRule);\n \n             AjaxDropDownChoicePanel<UnmatchingRule> unmatchingRule = new AjaxDropDownChoicePanel<>(\n                     \"unmatchingRule\", \"unmatchingRule\", new PropertyModel<>(spec, \"unmatchingRule\"),\n                     false);\n-            unmatchingRule.setChoices(Arrays.asList(UnmatchingRule.values()));\n+            unmatchingRule.setChoices(List.of(UnmatchingRule.values()));\n             add(unmatchingRule);\n \n-            AjaxPalettePanel<String> actions = new AjaxPalettePanel.Builder<String>().\n-                    build(\"actions\", new PropertyModel<>(spec, \"actions\"), new ListModel<>(pullActions.getObject()));\n-            add(actions);\n+            AjaxPalettePanel<String> provisioningActions =\n+                    new AjaxPalettePanel.Builder<String>().build(\"provisioningActions\",\n+                            new PropertyModel<>(spec, \"provisioningActions\"), new ListModel<>(pullActions.getObject()));\n+            add(provisioningActions);\n \n             AjaxDropDownChoicePanel<ConflictResolutionAction> conflictResolutionAction = new AjaxDropDownChoicePanel<>(\n                     \"conflictResolutionAction\", \"conflictResolutionAction\",\n                     new PropertyModel<>(spec, \"conflictResolutionAction\"), false);\n-            conflictResolutionAction.setChoices(Arrays.asList(ConflictResolutionAction.values()));\n+            conflictResolutionAction.setChoices(List.of(ConflictResolutionAction.values()));\n             conflictResolutionAction.setRequired(true);\n             add(conflictResolutionAction);\n "},{"sha":"ee2af97c37bfac56225d67dfe52e053101c5a1e0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/CSVPushWizardBuilder.java","status":"modified","additions":22,"deletions":6,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.wizards;\n \n import java.io.Serializable;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.panels.CSVConfPanel;\n@@ -98,6 +97,17 @@ public class PushTask extends WizardStep {\n \n         private final ImplementationRestClient implRestClient = new ImplementationRestClient();\n \n+        private final IModel<List<String>> propActions = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 4659376149825914247L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return implRestClient.list(IdMImplementationType.PROPAGATION_ACTIONS).stream().\n+                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+            }\n+        };\n+\n         private final IModel<List<String>> pushActions = new LoadableDetachableModel<List<String>>() {\n \n             private static final long serialVersionUID = 4659376149825914247L;\n@@ -114,20 +124,26 @@ public PushTask(final CSVPushSpec spec) {\n                     \"ignorePaging\", \"ignorePaging\", new PropertyModel<>(spec, \"ignorePaging\"), true);\n             add(ignorePaging);\n \n+            AjaxPalettePanel<String> propagationActions =\n+                    new AjaxPalettePanel.Builder<String>().build(\"propagationActions\",\n+                            new PropertyModel<>(spec, \"propagationActions\"), new ListModel<>(propActions.getObject()));\n+            add(propagationActions);\n+\n             AjaxDropDownChoicePanel<MatchingRule> matchingRule = new AjaxDropDownChoicePanel<>(\n                     \"matchingRule\", \"matchingRule\", new PropertyModel<>(spec, \"matchingRule\"), false);\n-            matchingRule.setChoices(Arrays.asList(MatchingRule.values()));\n+            matchingRule.setChoices(List.of(MatchingRule.values()));\n             add(matchingRule);\n \n             AjaxDropDownChoicePanel<UnmatchingRule> unmatchingRule = new AjaxDropDownChoicePanel<>(\n                     \"unmatchingRule\", \"unmatchingRule\", new PropertyModel<>(spec, \"unmatchingRule\"),\n                     false);\n-            unmatchingRule.setChoices(Arrays.asList(UnmatchingRule.values()));\n+            unmatchingRule.setChoices(List.of(UnmatchingRule.values()));\n             add(unmatchingRule);\n \n-            AjaxPalettePanel<String> actions = new AjaxPalettePanel.Builder<String>().\n-                    build(\"actions\", new PropertyModel<>(spec, \"actions\"), new ListModel<>(pushActions.getObject()));\n-            add(actions);\n+            AjaxPalettePanel<String> provisioningActions =\n+                    new AjaxPalettePanel.Builder<String>().build(\"provisioningActions\",\n+                            new PropertyModel<>(spec, \"provisioningActions\"), new ListModel<>(pushActions.getObject()));\n+            add(provisioningActions);\n         }\n     }\n }"},{"sha":"3346de8ab40af4d68464c582a2ecb3c0bfbf287a","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/LinkedAccountPlainAttrsPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountPlainAttrsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountPlainAttrsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountPlainAttrsPanel.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -22,7 +22,6 @@\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.checkbox.bootstraptoggle.BootstrapToggle;\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.checkbox.bootstraptoggle.BootstrapToggleConfig;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -80,7 +79,7 @@ public <T extends AnyTO> LinkedAccountPlainAttrsPanel(\n         super(userTO,\n                 AjaxWizard.Mode.EDIT,\n                 new AnyTypeRestClient().read(userTO.getType()).getClasses(),\n-                AnyLayoutUtils.fetch(Arrays.asList(userTO.getType())).getUser().getWhichPlainAttrs(),\n+                AnyLayoutUtils.fetch(List.of(userTO.getType())).getUser().getWhichPlainAttrs(),\n                 modelObject);\n \n         this.linkedAccountTO = modelObject.getInnerObject();"},{"sha":"264bb3ffe56bef929860bc793aa3a6a91744c5f1","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/ProvisioningReportsPanel.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards.any;\n+\n+import java.text.MessageFormat;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.client.console.panels.ListViewPanel;\n+import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.Model;\n+\n+public class ProvisioningReportsPanel extends Panel {\n+\n+    private static final long serialVersionUID = -1450755344104125918L;\n+\n+    public ProvisioningReportsPanel(\n+            final String id, final List<ProvisioningReport> results, final PageReference pageRef) {\n+        super(id);\n+\n+        List<ProvisioningReport> success = results.stream().\n+                filter(result -> result.getStatus() == ProvisioningReport.Status.SUCCESS).\n+                collect(Collectors.toList());\n+        add(new Accordion(\"success\", List.of(new AbstractTab(\n+                new Model<>(MessageFormat.format(getString(\"success\"), success.size()))) {\n+\n+            private static final long serialVersionUID = 1037272333056449378L;\n+\n+            @Override\n+            public WebMarkupContainer getPanel(final String panelId) {\n+                return new ListViewPanel.Builder<>(ProvisioningReport.class, pageRef).\n+                        setItems(success).\n+                        withChecks(ListViewPanel.CheckAvailability.NONE).\n+                        includes(\"name\", \"message\").\n+                        build(panelId);\n+            }\n+        }), Model.of(-1)).setOutputMarkupId(true));\n+\n+        List<ProvisioningReport> failure = results.stream().\n+                filter(result -> result.getStatus() == ProvisioningReport.Status.FAILURE).\n+                collect(Collectors.toList());\n+        add(new Accordion(\"failure\", List.of(new AbstractTab(\n+                new Model<>(MessageFormat.format(getString(\"failure\"), failure.size()))) {\n+\n+            private static final long serialVersionUID = 1037272333056449378L;\n+\n+            @Override\n+            public WebMarkupContainer getPanel(final String panelId) {\n+                return new ListViewPanel.Builder<>(ProvisioningReport.class, pageRef).\n+                        setItems(failure).\n+                        withChecks(ListViewPanel.CheckAvailability.NONE).\n+                        includes(\"name\", \"message\").\n+                        build(panelId);\n+            }\n+        }), Model.of(-1)).setOutputMarkupId(true));\n+\n+        List<ProvisioningReport> ignore = results.stream().\n+                filter(result -> result.getStatus() == ProvisioningReport.Status.IGNORE).\n+                collect(Collectors.toList());\n+        add(new Accordion(\"ignore\", List.of(new AbstractTab(\n+                new Model<>(MessageFormat.format(getString(\"ignore\"), ignore.size()))) {\n+\n+            private static final long serialVersionUID = 1037272333056449378L;\n+\n+            @Override\n+            public WebMarkupContainer getPanel(final String panelId) {\n+                return new ListViewPanel.Builder<>(ProvisioningReport.class, pageRef).\n+                        setItems(ignore).\n+                        withChecks(ListViewPanel.CheckAvailability.NONE).\n+                        includes(\"name\", \"message\").\n+                        build(panelId);\n+            }\n+        }), Model.of(-1)).setOutputMarkupId(true));\n+    }\n+}"},{"sha":"aab535eef656fac78b9e5661fb5f1746cf8b1b6e","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPullWizardBuilder$PullTask.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask.html?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -22,7 +22,7 @@\n       <div wicket:id=\"remediation\">[remediation]</div>\n       <div wicket:id=\"matchingRule\">[matchingRule]</div>\n       <div wicket:id=\"unmatchingRule\">[unmatchingRule]</div>\n-      <div wicket:id=\"actions\">[actions]</div>\n+      <div wicket:id=\"provisioningActions\">[provisioningActions]</div>\n     </div>\n     <div class=\"form-group\">\n       <div wicket:id=\"conflictResolutionAction\">[conflictResolutionAction]</div>"},{"sha":"eed190d2f8d9f6b47a04c4645933f7e4f9e2353e","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPullWizardBuilder$PullTask.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -17,6 +17,6 @@\n remediation=Remediation\n matchingRule=Matching rule\n unmatchingRule=Unmatching rule\n-actions=Actions\n+provisioningActions=Pull Actions\n conflictResolutionAction=Conflict resolution action\n pullCorrelationRule=Correlation rule"},{"sha":"fe255e28d592f76622f803884a20e1fe2fb5a737","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPullWizardBuilder$PullTask_fr_CA.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_fr_CA.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -17,6 +17,6 @@\n remediation=Remediation\n matchingRule=R\\u00e8gle de correspondance\n unmatchingRule=R\\u00e8gle in\\u00e9gal\\u00e9e\n-actions=Actions\n+provisioningActions=Actions de pull\n conflictResolutionAction=Action de r\\u00e9solution de conflits\n pullCorrelationRule=R\\u00e8gle de corr\\u00e9lation"},{"sha":"fddd717b91cb562d95a445a1d6f91904766408ca","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPullWizardBuilder$PullTask_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_it.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -17,6 +17,6 @@\n remediation=Bonifiche\n matchingRule=Regola di matrching\n unmatchingRule=Regola di unmatching\n-actions=Azioni\n+provisioningActions=Azioni di pull\n conflictResolutionAction=Azione di Risoluzione Conflitti\n pullCorrelationRule=Regola di Correlazione"},{"sha":"eed190d2f8d9f6b47a04c4645933f7e4f9e2353e","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPullWizardBuilder$PullTask_ja.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_ja.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -17,6 +17,6 @@\n remediation=Remediation\n matchingRule=Matching rule\n unmatchingRule=Unmatching rule\n-actions=Actions\n+provisioningActions=Pull Actions\n conflictResolutionAction=Conflict resolution action\n pullCorrelationRule=Correlation rule"},{"sha":"eed190d2f8d9f6b47a04c4645933f7e4f9e2353e","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPullWizardBuilder$PullTask_pt_BR.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_pt_BR.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -17,6 +17,6 @@\n remediation=Remediation\n matchingRule=Matching rule\n unmatchingRule=Unmatching rule\n-actions=Actions\n+provisioningActions=Pull Actions\n conflictResolutionAction=Conflict resolution action\n pullCorrelationRule=Correlation rule"},{"sha":"eed190d2f8d9f6b47a04c4645933f7e4f9e2353e","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPullWizardBuilder$PullTask_ru.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder%24PullTask_ru.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -17,6 +17,6 @@\n remediation=Remediation\n matchingRule=Matching rule\n unmatchingRule=Unmatching rule\n-actions=Actions\n+provisioningActions=Pull Actions\n conflictResolutionAction=Conflict resolution action\n pullCorrelationRule=Correlation rule"},{"sha":"13dab03808a5e25476944e87c728297138e6cd79","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPushWizardBuilder$PushTask.html","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask.html?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -20,11 +20,12 @@\n   <wicket:panel>\n     <div class=\"form-group\">\n       <div wicket:id=\"ignorePaging\">[ignorePaging]</div>\n+      <div wicket:id=\"propagationActions\">[propagationActions]</div>\n     </div>\n     <div class=\"form-group\">\n       <div wicket:id=\"matchingRule\">[matchingRule]</div>\n       <div wicket:id=\"unmatchingRule\">[unmatchingRule]</div>\n-      <div wicket:id=\"actions\">[actions]</div>\n+      <div wicket:id=\"provisioningActions\">[provisioningActions]</div>\n     </div>\n   </wicket:panel>\n </html>"},{"sha":"fa1b12b07f215cc0bfc5b1af7abec77081022186","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPushWizardBuilder$PushTask.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -16,5 +16,6 @@\n # under the License.\n matchingRule=Matching rule\n unmatchingRule=Unmatching rule\n-actions=Actions\n+provisioningActions=Push Actions\n ignorePaging=Include all pages?\n+propagationActions=Propagation Actions"},{"sha":"4ae6771692c686d8a945d06e997aec71b7ea6b1d","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPushWizardBuilder$PushTask_fr_CA.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_fr_CA.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -16,5 +16,6 @@\n # under the License.\n matchingRule=R\\u00e8gle de correspondance\n unmatchingRule=R\\u00e8gle in\\u00e9gal\\u00e9e\n-actions=Actions\n+provisioningActions=Actions de push\n ignorePaging=Inclure toutes les pages?\n+propagationActions=Actions de propagation"},{"sha":"c26816b2fd83758fb837266874ed6f9e3eb64b73","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPushWizardBuilder$PushTask_it.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_it.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -16,5 +16,6 @@\n # under the License.\n matchingRule=Regola di matrching\n unmatchingRule=Regola di unmatching\n-actions=Azioni\n+provisioningActions=Azioni di push\n ignorePaging=Includere tutte le pagine?\n+propagationActions=Azioni di propagazione"},{"sha":"fa1b12b07f215cc0bfc5b1af7abec77081022186","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPushWizardBuilder$PushTask_ja.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_ja.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -16,5 +16,6 @@\n # under the License.\n matchingRule=Matching rule\n unmatchingRule=Unmatching rule\n-actions=Actions\n+provisioningActions=Push Actions\n ignorePaging=Include all pages?\n+propagationActions=Propagation Actions"},{"sha":"fa1b12b07f215cc0bfc5b1af7abec77081022186","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPushWizardBuilder$PushTask_pt_BR.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_pt_BR.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -16,5 +16,6 @@\n # under the License.\n matchingRule=Matching rule\n unmatchingRule=Unmatching rule\n-actions=Actions\n+provisioningActions=Push Actions\n ignorePaging=Include all pages?\n+propagationActions=Propagation Actions"},{"sha":"fa1b12b07f215cc0bfc5b1af7abec77081022186","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/CSVPushWizardBuilder$PushTask_ru.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder%24PushTask_ru.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -16,5 +16,6 @@\n # under the License.\n matchingRule=Matching rule\n unmatchingRule=Unmatching rule\n-actions=Actions\n+provisioningActions=Push Actions\n ignorePaging=Include all pages?\n+propagationActions=Propagation Actions"},{"sha":"79d637391f25e32cc17eef4f6df61392fbead426","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/ProvisioningReportsPanel.html","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel.html?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -0,0 +1,25 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"success\"/>\n+    <div wicket:id=\"failure\"/>\n+    <div wicket:id=\"ignore\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"709310c350bacce932635e749c2ec7fd5efa0974","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/ProvisioningReportsPanel.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+success=Successfully imported: {0}\n+failure=Failed to import: {0}\n+ignore=Ignored during import: {0}\n+message=Message"},{"sha":"b1800a6876394fcf6277fe1a7516a9bc67bc64c0","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/ProvisioningReportsPanel_fr_CA.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_fr_CA.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+success=Import\\u00e9 avec succ\\u00e8s: {0}\n+failure=\\u00c9chec de l''importation: {0}\n+ignore=Ignor\\u00e9 lors de l''importationt: {0}\n+message=Message"},{"sha":"288872483b55047bbd1b87738546b367220876c3","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/ProvisioningReportsPanel_it.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_it.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+success=Importati con successo: {0}\n+failure=Errori nell''importazione: {0}\n+ignore=Ignorati dall''importazione: {0}\n+message=Messaggio"},{"sha":"709310c350bacce932635e749c2ec7fd5efa0974","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/ProvisioningReportsPanel_ja.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_ja.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+success=Successfully imported: {0}\n+failure=Failed to import: {0}\n+ignore=Ignored during import: {0}\n+message=Message"},{"sha":"709310c350bacce932635e749c2ec7fd5efa0974","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/ProvisioningReportsPanel_pt_BR.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_pt_BR.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+success=Successfully imported: {0}\n+failure=Failed to import: {0}\n+ignore=Ignored during import: {0}\n+message=Message"},{"sha":"709310c350bacce932635e749c2ec7fd5efa0974","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/ProvisioningReportsPanel_ru.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FProvisioningReportsPanel_ru.properties?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+success=Successfully imported: {0}\n+failure=Failed to import: {0}\n+ignore=Ignored during import: {0}\n+message=Message"},{"sha":"b177effcddcf96d4bb01af9bb352da89b991167a","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/BaseLogin.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseLogin.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -22,7 +22,6 @@\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.select.BootstrapSelect;\n import java.security.AccessControlException;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n import java.util.stream.Collectors;\n@@ -260,7 +259,7 @@ public void detach() {\n             });\n \n             // set default language selection\n-            List<Locale> filtered = Collections.emptyList();\n+            List<Locale> filtered = List.of();\n \n             String acceptLanguage = ((ServletWebRequest) RequestCycle.get().getRequest()).\n                     getHeader(HttpHeaders.ACCEPT_LANGUAGE);"},{"sha":"790f0b5eac0bc6118ef366e0b43313eff22051a9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/audit/AuditHistoryDirectoryPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDirectoryPanel.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.audit;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n@@ -54,7 +53,7 @@\n \n     private static final long serialVersionUID = -8248734710505211261L;\n \n-    private static final List<String> EVENTS = Arrays.asList(\"create\", \"update\");\n+    private static final List<String> EVENTS = List.of(\"create\", \"update\");\n \n     private static final SortParam<String> REST_SORT = new SortParam<>(\"event_date\", false);\n "},{"sha":"c662fb707145858266d517cf1281a626404462df","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -22,7 +22,6 @@\n import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n@@ -176,7 +175,7 @@ protected List<IColumn<A, String>> getColumns() {\n \n             PreferenceManager.setList(\n                     getRequest(), getResponse(), DisplayAttributesModalPanel.getPrefDetailView(type),\n-                    Arrays.asList(getDefaultAttributeSelection()));\n+                    List.of(getDefaultAttributeSelection()));\n         }\n \n         columns.addAll(prefcolumns);"},{"sha":"1c5c7034b02ab1ee9a6752ac599661fbfd88ce8d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ConsoleLogPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -34,8 +34,6 @@ public class ConsoleLogPanel extends AbstractLogsPanel<LoggerTO> {\n \n     private static final long serialVersionUID = -9165749229623482717L;\n \n-    private static final ConsoleLoggerController CONSOLE_LOGGER_CONTROLLER = new ConsoleLoggerController();\n-\n     public ConsoleLogPanel(final String id, final PageReference pageReference) {\n         super(id, pageReference, ConsoleLoggerController.getLoggers());\n     }\n@@ -69,8 +67,8 @@ public static List<LoggerTO> getLoggers() {\n         }\n \n         public static void setLogLevel(final String name, final LoggerLevel level) {\n-            final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n-            final LoggerConfig logConf = SyncopeConstants.ROOT_LOGGER.equals(name)\n+            LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+            LoggerConfig logConf = SyncopeConstants.ROOT_LOGGER.equals(name)\n                     ? ctx.getConfiguration().getLoggerConfig(LogManager.ROOT_LOGGER_NAME)\n                     : ctx.getConfiguration().getLoggerConfig(name);\n             logConf.setLevel(level.getLevel());"},{"sha":"8247a2a0ed8bbcc557d3ac673a5c50470be2c82a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxCharacterFieldPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCharacterFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCharacterFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCharacterFieldPanel.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.wicket.markup.html.form;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.components.TooltipConfig;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -42,7 +41,7 @@ public class AjaxCharacterFieldPanel extends FieldPanel<Character> implements Cl\n \n     private Component questionMarkJexlHelp;\n \n-    private List<Character> choices = Collections.emptyList();\n+    private List<Character> choices = List.of();\n \n     public AjaxCharacterFieldPanel(final String id, final String name, final IModel<Character> model) {\n         this(id, name, model, true);"},{"sha":"5cd5e696d9b9263ff10618e940a869a292489729","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrsWizardStep.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Comparator;\n import java.util.LinkedHashMap;\n import java.util.List;\n@@ -104,7 +103,7 @@ public AbstractAttrsWizardStep(\n \n         super();\n         this.anyTypeClasses = anyTypeClasses;\n-        this.attrs = new ListModel<>(Collections.emptyList());\n+        this.attrs = new ListModel<>(List.of());\n \n         this.setOutputMarkupId(true);\n \n@@ -134,7 +133,7 @@ protected void setSchemas(final List<String> anyTypeClasses) {\n \n     protected void setSchemas(final List<String> anyTypeClasses, final Map<String, S> scs) {\n         List<S> allSchemas = anyTypeClasses.isEmpty()\n-                ? Collections.emptyList()\n+                ? List.of()\n                 : SchemaRestClient.getSchemas(getSchemaType(), null, anyTypeClasses.toArray(new String[] {}));\n \n         scs.clear();"},{"sha":"a23745a1a27ae163e438023b3dd51cdf9a611094","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisioningReport.java","status":"renamed","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningReport.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -18,14 +18,23 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import java.io.Serializable;\n import java.util.Collection;\n+import javax.xml.bind.annotation.XmlEnum;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.TraceLevel;\n \n-public class ProvisioningReport {\n+@XmlRootElement(name = \"provisioningReport\")\n+@XmlType\n+public class ProvisioningReport implements Serializable {\n \n+    private static final long serialVersionUID = 9201119472070963385L;\n+\n+    @XmlEnum\n     public enum Status {\n \n         SUCCESS,\n@@ -135,9 +144,7 @@ public String getReportString(final TraceLevel level) {\n      */\n     public static String generate(final Collection<ProvisioningReport> results, final TraceLevel level) {\n         StringBuilder sb = new StringBuilder();\n-        results.forEach(result -> {\n-            sb.append(result.getReportString(level)).append('\\n');\n-        });\n+        results.forEach(result -> sb.append(result.getReportString(level)).append('\\n'));\n         return sb.toString();\n     }\n ","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisioningReport.java"},{"sha":"192ce44b878014fc418fc5bb245da88352254e6b","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AbstractCSVSpec.java","status":"modified","additions":54,"deletions":16,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractCSVSpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractCSVSpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractCSVSpec.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -18,18 +18,35 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public abstract class AbstractCSVSpec implements Serializable {\n \n     private static final long serialVersionUID = 2253975790270165334L;\n \n+    private static final String PARAM_COLUMNSEPARATOR = \"columnSeparator\";\n+\n+    private static final String PARAM_ARRAYELEMENTSEPARATOR = \"arrayElementSeparator\";\n+\n+    private static final String PARAM_QUOTECHAR = \"quoteChar\";\n+\n+    private static final String PARAM_ESCAPECHAR = \"escapeChar\";\n+\n+    private static final String PARAM_LINESEPARATOR = \"lineSeparator\";\n+\n+    private static final String PARAM_NULLVALUE = \"nullValue\";\n+\n+    private static final String PARAM_ALLOWCOMMENTS = \"allowComments\";\n+\n     protected abstract static class Builder<T extends AbstractCSVSpec, B extends Builder<T, B>> {\n \n         protected T instance;\n@@ -98,8 +115,8 @@ public B matchingRule(final MatchingRule matchingRule) {\n         }\n \n         @SuppressWarnings(\"unchecked\")\n-        public B action(final String action) {\n-            getInstance().getActions().add(action);\n+        public B provisioningAction(final String provisioningActions) {\n+            getInstance().getProvisioningActions().add(provisioningActions);\n             return (B) this;\n         }\n \n@@ -128,77 +145,98 @@ public T build() {\n \n     protected MatchingRule matchingRule = MatchingRule.UPDATE;\n \n-    protected List<String> actions = new ArrayList<>();\n+    protected List<String> provisioningActions = new ArrayList<>();\n \n+    @Parameter(name = JAXRSService.PARAM_ANYTYPEKEY, description = \"any object type\", schema =\n+            @Schema(implementation = String.class))\n     public String getAnyTypeKey() {\n         return anyTypeKey;\n     }\n \n     @NotNull\n-    @QueryParam(\"anyTypeKey\")\n+    @QueryParam(JAXRSService.PARAM_ANYTYPEKEY)\n     public void setAnyTypeKey(final String anyTypeKey) {\n         this.anyTypeKey = anyTypeKey;\n     }\n \n+    @Parameter(name = PARAM_COLUMNSEPARATOR, description = \"separator for column values\", schema =\n+            @Schema(implementation = char.class, defaultValue = \",\"))\n     public char getColumnSeparator() {\n         return columnSeparator;\n     }\n \n-    @QueryParam(\"columnSeparator\")\n+    @QueryParam(PARAM_COLUMNSEPARATOR)\n     public void setColumnSeparator(final char columnSeparator) {\n         this.columnSeparator = columnSeparator;\n     }\n \n+    @Parameter(name = PARAM_ARRAYELEMENTSEPARATOR, description = \"separator for array elements within a \"\n+            + \"column\", schema =\n+            @Schema(implementation = String.class, defaultValue = \";\"))\n     public String getArrayElementSeparator() {\n         return arrayElementSeparator;\n     }\n \n-    @QueryParam(\"arrayElementSeparator\")\n+    @QueryParam(PARAM_ARRAYELEMENTSEPARATOR)\n     public void setArrayElementSeparator(final String arrayElementSeparator) {\n         this.arrayElementSeparator = arrayElementSeparator;\n     }\n \n+    @Parameter(name = PARAM_QUOTECHAR, description = \"character used for quoting values \"\n+            + \"that contain quote characters or linefeeds\", schema =\n+            @Schema(implementation = char.class, defaultValue = \"\\\"\"))\n     public char getQuoteChar() {\n         return quoteChar;\n     }\n \n-    @QueryParam(\"quoteChar\")\n+    @QueryParam(PARAM_QUOTECHAR)\n     public void setQuoteChar(final char quoteChar) {\n         this.quoteChar = quoteChar;\n     }\n \n+    @Parameter(name = PARAM_ESCAPECHAR, description = \"if any, used to escape values; \"\n+            + \"most commonly defined as backslash\", schema =\n+            @Schema(implementation = Character.class))\n     public Character getEscapeChar() {\n         return escapeChar;\n     }\n \n-    @QueryParam(\"escapeChar\")\n+    @QueryParam(PARAM_ESCAPECHAR)\n     public void setEscapeChar(final Character escapeChar) {\n         this.escapeChar = escapeChar;\n     }\n \n+    @Parameter(name = PARAM_LINESEPARATOR, description = \"character used to separate data rows\", schema =\n+            @Schema(implementation = String.class, defaultValue = \"\\\\\\n\"))\n     public String getLineSeparator() {\n         return lineSeparator;\n     }\n \n-    @QueryParam(\"lineSeparator\")\n+    @QueryParam(PARAM_LINESEPARATOR)\n     public void setLineSeparator(final String lineSeparator) {\n         this.lineSeparator = lineSeparator;\n     }\n \n+    @Parameter(name = PARAM_NULLVALUE, description = \"when asked to write null, this string value will be used \"\n+            + \"instead\", schema =\n+            @Schema(implementation = String.class, defaultValue = \"\"))\n     public String getNullValue() {\n         return nullValue;\n     }\n \n-    @QueryParam(\"nullValue\")\n+    @QueryParam(PARAM_NULLVALUE)\n     public void setNullValue(final String nullValue) {\n         this.nullValue = nullValue;\n     }\n \n+    @Parameter(name = PARAM_ALLOWCOMMENTS, description = \"are hash comments, e.g. lines where the first non-whitespace \"\n+            + \"character is '#' allowed? if so, they will be skipped without processing\", schema =\n+            @Schema(implementation = boolean.class, defaultValue = \"false\"))\n     public boolean isAllowComments() {\n         return allowComments;\n     }\n \n-    @QueryParam(\"allowComments\")\n+    @QueryParam(PARAM_ALLOWCOMMENTS)\n     public void setAllowComments(final boolean allowComments) {\n         this.allowComments = allowComments;\n     }\n@@ -221,12 +259,12 @@ public void setMatchingRule(final MatchingRule matchingRule) {\n         this.matchingRule = matchingRule;\n     }\n \n-    public List<String> getActions() {\n-        return actions;\n+    public List<String> getProvisioningActions() {\n+        return provisioningActions;\n     }\n \n-    @QueryParam(\"actions\")\n-    public void setActions(final List<String> actions) {\n-        this.actions = actions;\n+    @QueryParam(\"provisioningActions\")\n+    public void setProvisioningActions(final List<String> provisioningActions) {\n+        this.provisioningActions = provisioningActions;\n     }\n }"},{"sha":"0a688108cab3847f1a1afbe5ca41d1c4adc32c59","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/CSVPushSpec.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCSVPushSpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCSVPushSpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCSVPushSpec.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -82,6 +82,11 @@ public Builder ignorePagination(final boolean ignorePagination) {\n             getInstance().setIgnorePaging(ignorePagination);\n             return this;\n         }\n+\n+        public Builder propagationAction(final String propagationAction) {\n+            getInstance().getPropagationActions().add(propagationAction);\n+            return this;\n+        }\n     }\n \n     private List<String> fields = new ArrayList<>();\n@@ -94,6 +99,8 @@ public Builder ignorePagination(final boolean ignorePagination) {\n \n     private boolean ignorePaging;\n \n+    protected List<String> propagationActions = new ArrayList<>();\n+\n     public List<String> getFields() {\n         return fields;\n     }\n@@ -138,4 +145,13 @@ public boolean isIgnorePaging() {\n     public void setIgnorePaging(final boolean ignorePaging) {\n         this.ignorePaging = ignorePaging;\n     }\n+\n+    public List<String> getPropagationActions() {\n+        return propagationActions;\n+    }\n+\n+    @QueryParam(\"propagationActions\")\n+    public void setPropagationActions(final List<String> propagationActions) {\n+        this.propagationActions = propagationActions;\n+    }\n }"},{"sha":"c4b91d525c244c6a836c5a0ec079d931b936048e","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ReconQuery.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FReconQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FReconQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FReconQuery.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -20,6 +20,7 @@\n \n import javax.validation.constraints.NotNull;\n import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public class ReconQuery {\n \n@@ -61,7 +62,7 @@ public String getAnyTypeKey() {\n     }\n \n     @NotNull\n-    @QueryParam(\"anyTypeKey\")\n+    @QueryParam(JAXRSService.PARAM_ANYTYPEKEY)\n     public void setAnyTypeKey(final String anyTypeKey) {\n         this.anyTypeKey = anyTypeKey;\n     }"},{"sha":"f4de2539a749707cd40a5d871eab649a8eb0909e","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecQuery.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecQuery.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -49,5 +49,4 @@ public String getKey() {\n     public void setKey(final String key) {\n         this.key = key;\n     }\n-\n }"},{"sha":"2a3ca7fc9702551665d5cc693f6194754b807515","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecuteQuery.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecuteQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecuteQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecuteQuery.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -96,5 +96,4 @@ public Boolean getDryRun() {\n     public void setDryRun(final Boolean dryRun) {\n         this.dryRun = dryRun;\n     }\n-\n }"},{"sha":"abcc0e254cd1af8714dcc7ac1b6f6cd032b6c984","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -46,4 +46,6 @@ public interface JAXRSService {\n \n     String PARAM_MAX = \"max\";\n \n+    String PARAM_ANYTYPEKEY = \"anyTypeKey\";\n+\n }"},{"sha":"ccb43803030a70b93b62f5cf498081004506157e","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":31,"deletions":38,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -18,16 +18,12 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import com.fasterxml.jackson.databind.MappingIterator;\n-import com.fasterxml.jackson.databind.SequenceWriter;\n-import com.fasterxml.jackson.dataformat.csv.CsvMapper;\n import com.fasterxml.jackson.dataformat.csv.CsvSchema;\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n@@ -73,7 +69,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.provisioning.api.pushpull.stream.StreamConnector;\n+import org.apache.syncope.core.provisioning.java.pushpull.stream.CSVStreamConnector;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePullExecutor;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePushExecutor;\n import org.apache.syncope.core.provisioning.api.pushpull.stream.SyncopeStreamPullExecutor;\n@@ -378,19 +374,18 @@ public void pull(final ReconQuery query, final PullTaskTO pullTask) {\n         }\n     }\n \n-    private CsvSchema csvSchema(final AbstractCSVSpec spec, final CsvSchema base) {\n-        CsvSchema schema = base.\n-                withColumnSeparator(spec.getColumnSeparator()).\n-                withArrayElementSeparator(spec.getArrayElementSeparator()).\n-                withQuoteChar(spec.getQuoteChar()).\n-                withLineSeparator(spec.getLineSeparator()).\n-                withNullValue(spec.getNullValue()).\n-                withAllowComments(spec.isAllowComments());\n+    private CsvSchema.Builder csvSchema(final AbstractCSVSpec spec) {\n+        CsvSchema.Builder schemaBuilder = new CsvSchema.Builder().setUseHeader(true).\n+                setColumnSeparator(spec.getColumnSeparator()).\n+                setArrayElementSeparator(spec.getArrayElementSeparator()).\n+                setQuoteChar(spec.getQuoteChar()).\n+                setLineSeparator(spec.getLineSeparator()).\n+                setNullValue(spec.getNullValue()).\n+                setAllowComments(spec.isAllowComments());\n         if (spec.getEscapeChar() != null) {\n-            schema = schema.withEscapeChar(spec.getEscapeChar());\n+            schemaBuilder.setEscapeChar(spec.getEscapeChar());\n         }\n-\n-        return schema;\n+        return schemaBuilder;\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n@@ -473,21 +468,24 @@ public List<ProvisioningReport> push(\n             }\n         });\n \n-        CsvSchema.Builder schemaBuilder = CsvSchema.builder().setUseHeader(true);\n-        columns.forEach(schemaBuilder::addColumn);\n-        CsvSchema schema = csvSchema(spec, schemaBuilder.build());\n-\n         PushTaskTO pushTask = new PushTaskTO();\n         pushTask.setMatchingRule(spec.getMatchingRule());\n         pushTask.setUnmatchingRule(spec.getUnmatchingRule());\n-        pushTask.getActions().addAll(spec.getActions());\n+        pushTask.getActions().addAll(spec.getProvisioningActions());\n+\n+        try (CSVStreamConnector connector = new CSVStreamConnector(\n+                null,\n+                spec.getArrayElementSeparator(),\n+                csvSchema(spec),\n+                null,\n+                os)) {\n \n-        try (SequenceWriter writer = new CsvMapper().writer(schema).forType(Map.class).writeValues(os)) {\n             return streamPushExecutor.push(\n                     anyType,\n                     matching,\n                     columns,\n-                    new StreamConnector(null, spec.getArrayElementSeparator(), null, writer),\n+                    connector,\n+                    spec.getPropagationActions(),\n                     pushTask,\n                     AuthContextUtils.getUsername());\n         } catch (Exception e) {\n@@ -514,31 +512,26 @@ public List<ProvisioningReport> pull(final CSVPullSpec spec, final InputStream c\n         pullTask.setRemediation(spec.isRemediation());\n         pullTask.setMatchingRule(spec.getMatchingRule());\n         pullTask.setUnmatchingRule(spec.getUnmatchingRule());\n-        pullTask.getActions().addAll(spec.getActions());\n+        pullTask.getActions().addAll(spec.getProvisioningActions());\n \n-        CsvSchema schema = csvSchema(spec, CsvSchema.emptySchema().withHeader());\n-        try {\n-            MappingIterator<Map<String, String>> reader =\n-                    new CsvMapper().readerFor(Map.class).with(schema).readValues(csv);\n-\n-            List<String> columns = new ArrayList<>();\n-            ((CsvSchema) reader.getParserSchema()).forEach(column -> {\n-                if (!spec.getIgnoreColumns().contains(column.getName())) {\n-                    columns.add(column.getName());\n-                }\n-            });\n+        try (CSVStreamConnector connector = new CSVStreamConnector(\n+                spec.getKeyColumn(),\n+                spec.getArrayElementSeparator(),\n+                csvSchema(spec),\n+                csv,\n+                null)) {\n \n+            List<String> columns = connector.getColumns(spec);\n             if (!columns.contains(spec.getKeyColumn())) {\n                 throw new NotFoundException(\"Key column '\" + spec.getKeyColumn() + \"'\");\n             }\n \n-            return streamPullExecutor.pull(\n-                    anyType,\n+            return streamPullExecutor.pull(anyType,\n                     spec.getKeyColumn(),\n                     columns,\n                     spec.getConflictResolutionAction(),\n                     spec.getPullCorrelationRule(),\n-                    new StreamConnector(spec.getKeyColumn(), spec.getArrayElementSeparator(), reader, null),\n+                    connector,\n                     pullTask);\n         } catch (NotFoundException e) {\n             throw e;"},{"sha":"73064c664b14f2e3846cecb4968c0433a6236369","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/ReconciliationLogicTest.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogicTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogicTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogicTest.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -110,16 +110,8 @@ public void pushToCSV() throws IOException {\n         });\n         assertEquals(search.getLeft(), results.size());\n \n-        CsvSchema.Builder builder = CsvSchema.builder().setUseHeader(true);\n-        builder.addColumn(\"username\");\n-        builder.addColumn(\"status\");\n-        builder.addColumn(\"firstname\");\n-        builder.addColumn(\"surname\");\n-        builder.addColumn(\"email\");\n-        builder.addColumn(\"loginDate\");\n-        CsvSchema schema = builder.build();\n-\n-        MappingIterator<Map<String, String>> reader = new CsvMapper().readerFor(Map.class).with(schema).readValues(in);\n+        MappingIterator<Map<String, String>> reader =\n+                new CsvMapper().readerFor(Map.class).with(CsvSchema.emptySchema().withHeader()).readValues(in);\n \n         for (int i = 0; i < results.size() && reader.hasNext(); i++) {\n             Map<String, String> row = reader.next();"},{"sha":"26d695a5fc6dfa959878f963b9b3e149c4328183","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/SyncopeJexlFunctions.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSyncopeJexlFunctions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSyncopeJexlFunctions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSyncopeJexlFunctions.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -65,5 +65,4 @@ public static String fullPath2Dn(final String fullPath, final String attr, final\n         Collections.reverse(headless);\n         return prefix + attr + '=' + StringUtils.join(headless, ',' + attr + '=');\n     }\n-\n }"},{"sha":"5215e6377ca9b626b1410bb35e20b1457ce4f24c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/stream/SyncopeStreamPullExecutor.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPullExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPullExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPullExecutor.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.provisioning.api.Connector;\n import org.quartz.JobExecutionException;\n \n public interface SyncopeStreamPullExecutor {\n@@ -33,7 +34,7 @@ List<ProvisioningReport> pull(\n             List<String> columns,\n             ConflictResolutionAction conflictResolutionAction,\n             String pullCorrelationRule,\n-            StreamConnector connector,\n+            Connector connector,\n             PullTaskTO pullTaskTO)\n             throws JobExecutionException;\n }"},{"sha":"c2b1e4497e78a1003d704064f9013f7229ee32dc","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/stream/SyncopeStreamPushExecutor.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPushExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPushExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPushExecutor.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.provisioning.api.Connector;\n import org.quartz.JobExecutionException;\n \n public interface SyncopeStreamPushExecutor {\n@@ -31,7 +32,8 @@ List<ProvisioningReport> push(\n             AnyType anyType,\n             List<? extends Any<?>> anys,\n             List<String> columns,\n-            StreamConnector connector,\n+            Connector connector,\n+            List<String> propagationActions,\n             PushTaskTO pushTaskTO,\n             String executor)\n             throws JobExecutionException;"},{"sha":"1e14e94aaad41133fe74aa3f8aa60ebd60e5796a","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/IntAttrNameParserTest.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParserTest.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -29,7 +29,6 @@\n import static org.mockito.Mockito.when;\n \n import java.text.ParseException;\n-import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -62,9 +61,9 @@ public class IntAttrNameParserTest {\n     private static final Map<AnyTypeKind, List<String>> FIELDS = new HashMap<>();\n \n     static {\n-        FIELDS.put(AnyTypeKind.USER, Arrays.asList(\"key\", \"username\"));\n-        FIELDS.put(AnyTypeKind.GROUP, Arrays.asList(\"key\", \"name\", \"userOwner\"));\n-        FIELDS.put(AnyTypeKind.ANY_OBJECT, Arrays.asList(\"key\", \"name\"));\n+        FIELDS.put(AnyTypeKind.USER, List.of(\"key\", \"username\"));\n+        FIELDS.put(AnyTypeKind.GROUP, List.of(\"key\", \"name\", \"userOwner\"));\n+        FIELDS.put(AnyTypeKind.ANY_OBJECT, List.of(\"key\", \"name\"));\n     }\n \n     @Mock"},{"sha":"a2c706761ef85520e86c719af8a66e1521d24fa7","filename":"core/provisioning-java/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fpom.xml?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -58,6 +58,11 @@ under the License.\n       <artifactId>geronimo-javamail_1.4_mail</artifactId>\n     </dependency>\n     \n+    <dependency>\n+      <groupId>com.fasterxml.jackson.dataformat</groupId>\n+      <artifactId>jackson-dataformat-csv</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.codehaus.groovy</groupId>\n       <artifactId>groovy</artifactId>"},{"sha":"e7a96d9b0aca9efbbaab6b205c7b80e281446650","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/OutboundMatcher.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n@@ -160,7 +159,7 @@ public List<ConnectorObject> match(\n                         rule.get().getFilter(any, provision),\n                         provision,\n                         ArrayUtils.isEmpty(linkingItems)\n-                        ? Optional.empty() : Optional.of(Arrays.asList(linkingItems)),\n+                        ? Optional.empty() : Optional.of(List.of(linkingItems)),\n                         Optional.empty()));\n             } else {\n                 Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n@@ -173,7 +172,7 @@ public List<ConnectorObject> match(\n                             connObjectKeyValue.get(),\n                             provision,\n                             ArrayUtils.isEmpty(linkingItems)\n-                            ? Optional.empty() : Optional.of(Arrays.asList(linkingItems)),\n+                            ? Optional.empty() : Optional.of(List.of(linkingItems)),\n                             Optional.empty()).\n                             ifPresent(result::add);\n                 }"},{"sha":"6b025aee346142999c4cef4b194fd204fb78e0fa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/CSVStreamConnector.java","status":"renamed","additions":99,"deletions":33,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FCSVStreamConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FCSVStreamConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FCSVStreamConnector.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -16,19 +16,27 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.api.pushpull.stream;\n+package org.apache.syncope.core.provisioning.java.pushpull.stream;\n \n import com.fasterxml.jackson.databind.MappingIterator;\n import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.dataformat.csv.CsvMapper;\n+import com.fasterxml.jackson.dataformat.csv.CsvSchema;\n import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.rest.api.beans.CSVPullSpec;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.provisioning.api.Connector;\n+import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n@@ -43,28 +51,78 @@\n import org.identityconnectors.framework.common.objects.Uid;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.spi.SearchResultsHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.util.CollectionUtils;\n \n-public class StreamConnector implements Connector {\n+public class CSVStreamConnector implements Connector, AutoCloseable {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CSVStreamConnector.class);\n \n     private final String keyColumn;\n \n     private final String arrayElementsSeparator;\n \n-    private final MappingIterator<Map<String, String>> reader;\n+    private final CsvSchema.Builder schemaBuilder;\n+\n+    private final InputStream in;\n+\n+    private final OutputStream out;\n+\n+    private MappingIterator<Map<String, String>> reader;\n \n-    private final SequenceWriter writer;\n+    private SequenceWriter writer;\n \n-    public StreamConnector(\n+    public CSVStreamConnector(\n             final String keyColumn,\n             final String arrayElementsSeparator,\n-            final MappingIterator<Map<String, String>> reader,\n-            final SequenceWriter writer) {\n+            final CsvSchema.Builder schemaBuilder,\n+            final InputStream in,\n+            final OutputStream out) {\n \n         this.keyColumn = keyColumn;\n         this.arrayElementsSeparator = arrayElementsSeparator;\n-        this.reader = reader;\n-        this.writer = writer;\n+        this.schemaBuilder = schemaBuilder;\n+        this.in = in;\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        if (reader != null) {\n+            reader.close();\n+        }\n+        if (writer != null) {\n+            writer.close();\n+        }\n+    }\n+\n+    public MappingIterator<Map<String, String>> reader() throws IOException {\n+        synchronized (this) {\n+            if (reader == null) {\n+                reader = new CsvMapper().readerFor(Map.class).with(schemaBuilder.build()).readValues(in);\n+            }\n+        }\n+        return reader;\n+    }\n+\n+    public List<String> getColumns(final CSVPullSpec spec) throws IOException {\n+        List<String> columns = new ArrayList<>();\n+        ((CsvSchema) reader().getParserSchema()).forEach(column -> {\n+            if (!spec.getIgnoreColumns().contains(column.getName())) {\n+                columns.add(column.getName());\n+            }\n+        });\n+        return columns;\n+    }\n+\n+    public SequenceWriter writer() throws IOException {\n+        synchronized (this) {\n+            if (writer == null) {\n+                writer = new CsvMapper().writerFor(Map.class).with(schemaBuilder.build()).writeValues(out);\n+            }\n+        }\n+        return writer;\n     }\n \n     @Override\n@@ -84,29 +142,34 @@ public Uid create(\n             final OperationOptions options,\n             final AtomicReference<Boolean> propagationAttempted) {\n \n-        if (writer != null) {\n-            Map<String, String> row = new HashMap<>();\n-            attrs.stream().filter(attr -> !AttributeUtil.isSpecial(attr)).forEach(attr -> {\n-                if (CollectionUtils.isEmpty(attr.getValue()) || attr.getValue().get(0) == null) {\n-                    row.put(attr.getName(), null);\n-                } else if (attr.getValue().size() == 1) {\n-                    row.put(attr.getName(), attr.getValue().get(0).toString());\n-                } else if (arrayElementsSeparator == null) {\n-                    row.put(attr.getName(), attr.getValue().toString());\n-                } else {\n-                    row.put(\n-                            attr.getName(),\n-                            attr.getValue().stream().map(Object::toString).\n-                                    collect(Collectors.joining(arrayElementsSeparator)));\n-                }\n-            });\n-            try {\n-                writer.write(row);\n-            } catch (IOException e) {\n-                throw new IllegalStateException(\"Could not object \" + row, e);\n+        synchronized (schemaBuilder) {\n+            if (schemaBuilder.size() == 0) {\n+                attrs.stream().filter(attr -> !AttributeUtil.isSpecial(attr)).map(Attribute::getName).\n+                        forEachOrdered(schemaBuilder::addColumn);\n+            }\n+        }\n+\n+        Map<String, String> row = new HashMap<>();\n+        attrs.stream().filter(attr -> !AttributeUtil.isSpecial(attr)).forEach(attr -> {\n+            if (CollectionUtils.isEmpty(attr.getValue()) || attr.getValue().get(0) == null) {\n+                row.put(attr.getName(), null);\n+            } else if (attr.getValue().size() == 1) {\n+                row.put(attr.getName(), attr.getValue().get(0).toString());\n+            } else if (arrayElementsSeparator == null) {\n+                row.put(attr.getName(), attr.getValue().toString());\n+            } else {\n+                row.put(\n+                        attr.getName(),\n+                        attr.getValue().stream().map(Object::toString).\n+                                collect(Collectors.joining(arrayElementsSeparator)));\n             }\n-            propagationAttempted.set(Boolean.TRUE);\n+        });\n+        try {\n+            writer().write(row);\n+        } catch (IOException e) {\n+            throw new ConnectorException(\"Could not write object \" + row, e);\n         }\n+        propagationAttempted.set(Boolean.TRUE);\n         return null;\n     }\n \n@@ -165,9 +228,9 @@ public SearchResult search(\n \n         SearchResult result = new SearchResult();\n \n-        if (reader != null) {\n-            while (reader.hasNext()) {\n-                Map<String, String> row = reader.next();\n+        try {\n+            while (reader().hasNext()) {\n+                Map<String, String> row = reader().next();\n \n                 ConnectorObjectBuilder builder = new ConnectorObjectBuilder();\n                 builder.setObjectClass(objectClass);\n@@ -181,6 +244,9 @@ public SearchResult search(\n \n                 handler.handle(builder.build());\n             }\n+        } catch (IOException e) {\n+            LOG.error(\"Could not read CSV from provided stream\", e);\n+            throw new ConnectorException(e);\n         }\n \n         return result;","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/stream/StreamConnector.java"},{"sha":"2ce44a0fc38e7b7276ae1f4709a7b3d6723af9e4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPullJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -47,8 +47,8 @@\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n-import org.apache.syncope.core.provisioning.api.pushpull.stream.StreamConnector;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullResultHandler;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.quartz.JobExecutionException;\n@@ -168,7 +168,7 @@ public List<ProvisioningReport> pull(\n             final List<String> columns,\n             final ConflictResolutionAction conflictResolutionAction,\n             final String pullCorrelationRule,\n-            final StreamConnector connector,\n+            final Connector connector,\n             final PullTaskTO pullTaskTO) throws JobExecutionException {\n \n         LOG.debug(\"Executing stream pull\");"},{"sha":"cf18b9f360cdc6926f0715a005a1aff7cd5459f7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPushJobDelegate.java","status":"modified","additions":21,"deletions":9,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -34,11 +34,11 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.AnyObjectPushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.GroupPushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n-import org.apache.syncope.core.provisioning.api.pushpull.stream.StreamConnector;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.stream.SyncopeStreamPushExecutor;\n import org.apache.syncope.core.provisioning.api.pushpull.UserPushResultHandler;\n@@ -88,7 +88,9 @@ protected GroupPushResultHandler buildGroupHandler() {\n     }\n \n     private ExternalResource externalResource(\n-            final AnyType anyType, final List<String> columns) throws JobExecutionException {\n+            final AnyType anyType,\n+            final List<String> columns,\n+            final List<String> propagationActions) throws JobExecutionException {\n \n         Provision provision = entityFactory.newEntity(Provision.class);\n         provision.setAnyType(anyType);\n@@ -118,6 +120,15 @@ private ExternalResource externalResource(\n         resource.add(provision);\n         provision.setResource(resource);\n \n+        propagationActions.forEach(key -> {\n+            Implementation impl = implementationDAO.find(key);\n+            if (impl == null || !IdMImplementationType.PROPAGATION_ACTIONS.equals(impl.getType())) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n+            } else {\n+                resource.add(impl);\n+            }\n+        });\n+\n         return resource;\n     }\n \n@@ -126,29 +137,30 @@ public List<ProvisioningReport> push(\n             final AnyType anyType,\n             final List<? extends Any<?>> anys,\n             final List<String> columns,\n-            final StreamConnector connector,\n+            final Connector connector,\n+            final List<String> propagationActions,\n             final PushTaskTO pushTaskTO,\n             final String executor) throws JobExecutionException {\n \n         LOG.debug(\"Executing stream push as {}\", executor);\n         this.executor = executor;\n \n-        List<PushActions> actions = new ArrayList<>();\n+        List<PushActions> pushActions = new ArrayList<>();\n         pushTaskTO.getActions().forEach(key -> {\n             Implementation impl = implementationDAO.find(key);\n             if (impl == null || !IdMImplementationType.PUSH_ACTIONS.equals(impl.getType())) {\n                 LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n             } else {\n                 try {\n-                    actions.add(ImplementationManager.build(impl));\n+                    pushActions.add(ImplementationManager.build(impl));\n                 } catch (Exception e) {\n                     LOG.warn(\"While building {}\", impl, e);\n                 }\n             }\n         });\n \n         try {\n-            ExternalResource resource = externalResource(anyType, columns);\n+            ExternalResource resource = externalResource(anyType, columns, propagationActions);\n             Provision provision = resource.getProvisions().get(0);\n \n             PushTask pushTask = entityFactory.newEntity(PushTask.class);\n@@ -161,10 +173,10 @@ public List<ProvisioningReport> push(\n             pushTask.setSyncStatus(false);\n \n             profile = new ProvisioningProfile<>(connector, pushTask);\n-            profile.getActions().addAll(actions);\n+            profile.getActions().addAll(pushActions);\n             profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n \n-            for (PushActions action : actions) {\n+            for (PushActions action : pushActions) {\n                 action.beforeAll(profile);\n             }\n \n@@ -186,7 +198,7 @@ public List<ProvisioningReport> push(\n \n             doHandle(anys, handler, provision.getResource());\n \n-            for (PushActions action : actions) {\n+            for (PushActions action : pushActions) {\n                 action.afterAll(profile);\n             }\n "},{"sha":"a08c99867f4611cd3fe1c6d425a75f68d8dc39b7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.utils;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n@@ -117,7 +116,7 @@ public static OperationOptions buildOperationOptions(\n         attrsToGet.add(Uid.NAME);\n         attrsToGet.add(OperationalAttributes.ENABLE_NAME);\n         if (!ArrayUtils.isEmpty(moreAttrsToGet)) {\n-            attrsToGet.addAll(Arrays.asList(moreAttrsToGet));\n+            attrsToGet.addAll(List.of(moreAttrsToGet));\n         }\n \n         items.filter(item -> item.getPurpose() != MappingPurpose.NONE)."},{"sha":"1b833eb8990e93e3fef207965bd42016af137a6c","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActionsTest.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActionsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActionsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActionsTest.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -25,9 +25,12 @@\n import static org.mockito.Mockito.when;\n import static org.mockito.Mockito.verify;\n \n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.AnyCR;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -52,9 +55,6 @@ public class LDAPPasswordPullActionsTest extends AbstractTest {\n     @Mock\n     private ProvisioningProfile<?, ?> profile;\n \n-    @Mock\n-    private AnyPatch anyPatch;\n-\n     @Mock\n     private UserDAO userDAO;\n \n@@ -64,6 +64,10 @@ public class LDAPPasswordPullActionsTest extends AbstractTest {\n     @InjectMocks\n     private LDAPPasswordPullActions ldapPasswordPullActions;\n \n+    private AnyCR anyCR;\n+\n+    private AnyUR anyUR;\n+\n     private EntityTO entity;\n \n     private String encodedPassword;\n@@ -84,24 +88,22 @@ public void initTest() {\n     public void beforeProvision() throws JobExecutionException {\n         String digest = \"SHA256\";\n         String password = \"t3stPassw0rd\";\n-        ReflectionTestUtils.setField(entity, \"password\", String.format(\"{%s}%s\", digest, password));\n+        anyCR = new UserCR.Builder(SyncopeConstants.ROOT_REALM, \"username\").\n+                password(String.format(\"{%s}%s\", digest, password)).build();\n \n-        ldapPasswordPullActions.beforeProvision(profile, syncDelta, entity);\n+        ldapPasswordPullActions.beforeProvision(profile, syncDelta, anyCR);\n \n         assertEquals(CipherAlgorithm.valueOf(digest), ReflectionTestUtils.getField(ldapPasswordPullActions, \"cipher\"));\n         assertEquals(password, ReflectionTestUtils.getField(ldapPasswordPullActions, \"encodedPassword\"));\n     }\n \n     @Test\n     public void beforeUpdate() throws JobExecutionException {\n-        anyPatch = new UserPatch();\n-        PasswordPatch passwordPatch = new PasswordPatch();\n-        String digest = \"MD5\";\n-        String password = \"an0therTestP4ss\";\n-        ReflectionTestUtils.setField(passwordPatch, \"value\", String.format(\"{%s}%s\", digest, password));\n-        ReflectionTestUtils.setField(anyPatch, \"password\", passwordPatch);\n+        anyUR = new UserUR.Builder(null).\n+                password(new PasswordPatch.Builder().value(\"{MD5}an0therTestP4ss\").build()).\n+                build();\n \n-        ldapPasswordPullActions.beforeUpdate(profile, syncDelta, entity, anyPatch);\n+        ldapPasswordPullActions.beforeUpdate(profile, syncDelta, entity, anyUR);\n \n         assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"encodedPassword\"));\n     }\n@@ -126,5 +128,4 @@ public void after(@Mock User user) throws JobExecutionException {\n         assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"encodedPassword\"));\n         assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"cipher\"));\n     }\n-\n }"},{"sha":"bb57c94dc859e076a4b119d872caf1db5e96e84c","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPullJobDelegateTest.java","status":"modified","additions":33,"deletions":25,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegateTest.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -20,15 +20,11 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n \n-import com.fasterxml.jackson.databind.MappingIterator;\n+import com.fasterxml.jackson.dataformat.csv.CsvSchema;\n+import java.io.ByteArrayInputStream;\n import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n@@ -41,7 +37,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n-import org.apache.syncope.core.provisioning.api.pushpull.stream.StreamConnector;\n+import org.apache.syncope.common.rest.api.beans.CSVPullSpec;\n import org.apache.syncope.core.provisioning.api.pushpull.stream.SyncopeStreamPullExecutor;\n import org.apache.syncope.core.provisioning.java.AbstractTest;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -64,39 +60,51 @@ public class StreamPullJobDelegateTest extends AbstractTest {\n \n     @Test\n     public void pull() throws JobExecutionException, IOException {\n+        List<String> columns = List.of(\n+                \"username\",\n+                \"email\",\n+                \"surname\",\n+                \"firstname\",\n+                \"fullname\",\n+                \"userId\");\n+\n+        StringBuilder csv = new StringBuilder();\n+        csv.append(columns.stream().collect(Collectors.joining(\",\")));\n+        csv.append('\\n');\n+        csv.append(\"donizetti,\");\n+        csv.append(\"donizetti@apache.org,\");\n+        csv.append(\"Donizetti,\");\n+        csv.append(\"Gaetano,\");\n+        csv.append(\"Gaetano Donizetti,\");\n+        csv.append(\"donizetti@apache.org\");\n+        csv.append('\\n');\n+\n         PullTaskTO pullTask = new PullTaskTO();\n         pullTask.setDestinationRealm(SyncopeConstants.ROOT_REALM);\n         pullTask.setRemediation(false);\n         pullTask.setMatchingRule(MatchingRule.UPDATE);\n         pullTask.setUnmatchingRule(UnmatchingRule.PROVISION);\n \n-        Map<String, String> user = new HashMap<>();\n-        user.put(\"username\", \"donizetti\");\n-        user.put(\"email\", \"donizetti@apache.org\");\n-        user.put(\"surname\", \"Donizetti\");\n-        user.put(\"firstname\", \"Gaetano\");\n-        user.put(\"fullname\", \"Gaetano Donizetti\");\n-        user.put(\"userId\", \"donizetti@apache.org\");\n-        Iterator<Map<String, String>> backing = List.of(user).iterator();\n-\n-        @SuppressWarnings(\"unchecked\")\n-        MappingIterator<Map<String, String>> itor = mock(MappingIterator.class);\n-        when(itor.hasNext()).thenAnswer(invocation -> backing.hasNext());\n-        when(itor.next()).thenAnswer(invocation -> backing.next());\n+        List<ProvisioningReport> results = AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN, () -> {\n+            try (CSVStreamConnector connector = new CSVStreamConnector(\n+                    \"username\",\n+                    \";\",\n+                    new CsvSchema.Builder().setUseHeader(true),\n+                    new ByteArrayInputStream(csv.toString().getBytes()),\n+                    null)) {\n \n-        List<String> columns = user.keySet().stream().collect(Collectors.toList());\n+                List<String> csvColumns = connector.getColumns(new CSVPullSpec());\n+                assertEquals(columns, csvColumns);\n \n-        List<ProvisioningReport> results = AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN, () -> {\n-            try {\n                 return streamPullExecutor.pull(\n                         anyTypeDAO.findUser(),\n                         \"username\",\n                         columns,\n                         ConflictResolutionAction.IGNORE,\n                         null,\n-                        new StreamConnector(\"username\", null, itor, null),\n+                        connector,\n                         pullTask);\n-            } catch (JobExecutionException e) {\n+            } catch (Exception e) {\n                 throw new RuntimeException(e);\n             }\n         });"},{"sha":"774276083205cfa3d003a8c6d0ee35f341cf1a07","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPushJobDelegateTest.java","status":"modified","additions":19,"deletions":17,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegateTest.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -20,26 +20,24 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import com.fasterxml.jackson.databind.MappingIterator;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.dataformat.csv.CsvMapper;\n+import com.fasterxml.jackson.dataformat.csv.CsvSchema;\n import java.io.IOException;\n import java.io.PipedInputStream;\n import java.io.PipedOutputStream;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.provisioning.api.pushpull.stream.StreamConnector;\n import org.apache.syncope.core.provisioning.api.pushpull.stream.SyncopeStreamPushExecutor;\n import org.apache.syncope.core.provisioning.java.AbstractTest;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -50,8 +48,6 @@\n @Transactional(\"Master\")\n public class StreamPushJobDelegateTest extends AbstractTest {\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n-\n     @Autowired\n     private SyncopeStreamPushExecutor streamPushExecutor;\n \n@@ -71,14 +67,19 @@ public void push() throws IOException {\n         pushTask.setUnmatchingRule(UnmatchingRule.PROVISION);\n \n         List<ProvisioningReport> results = AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN, () -> {\n-            try (SequenceWriter writer = MAPPER.writer().forType(Map.class).writeValues(os)) {\n-                writer.init(true);\n+            try (CSVStreamConnector connector = new CSVStreamConnector(\n+                    null,\n+                    \";\",\n+                    new CsvSchema.Builder().setUseHeader(true),\n+                    null,\n+                    os)) {\n \n                 return streamPushExecutor.push(\n                         anyTypeDAO.findUser(),\n                         userDAO.findAll(1, 100),\n-                        Arrays.asList(\"username\", \"firstname\", \"surname\", \"email\", \"status\", \"loginDate\"),\n-                        new StreamConnector(null, null, null, writer),\n+                        List.of(\"username\", \"firstname\", \"surname\", \"email\", \"status\", \"loginDate\"),\n+                        connector,\n+                        List.of(),\n                         pushTask,\n                         \"user\");\n             } catch (Exception e) {\n@@ -87,7 +88,8 @@ public void push() throws IOException {\n         });\n         assertEquals(userDAO.count(), results.size());\n \n-        MappingIterator<Map<String, String>> reader = MAPPER.readerFor(Map.class).readValues(in);\n+        MappingIterator<Map<String, String>> reader =\n+                new CsvMapper().readerFor(Map.class).with(CsvSchema.emptySchema().withHeader()).readValues(in);\n \n         for (int i = 0; i < results.size() && reader.hasNext(); i++) {\n             Map<String, String> row = reader.next();\n@@ -97,18 +99,18 @@ public void push() throws IOException {\n \n             switch (row.get(\"username\")) {\n                 case \"rossini\":\n-                    assertNull(row.get(\"email\"));\n-                    assertTrue(row.get(\"loginDate\").contains(\",\"));\n+                    assertEquals(StringUtils.EMPTY, row.get(\"email\"));\n+                    assertTrue(row.get(\"loginDate\").contains(\";\"));\n                     break;\n \n                 case \"verdi\":\n                     assertEquals(\"verdi@syncope.org\", row.get(\"email\"));\n-                    assertNull(row.get(\"loginDate\"));\n+                    assertEquals(StringUtils.EMPTY, row.get(\"loginDate\"));\n                     break;\n \n                 case \"bellini\":\n-                    assertNull(row.get(\"email\"));\n-                    assertFalse(row.get(\"loginDate\").contains(\",\"));\n+                    assertEquals(StringUtils.EMPTY, row.get(\"email\"));\n+                    assertFalse(row.get(\"loginDate\").contains(\";\"));\n                     break;\n \n                 default:"},{"sha":"b3013820d8b79f0f41f0b3177aa3b197b37fb2ed","filename":"core/spring/pom.xml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fspring%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/core%2Fspring%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fpom.xml?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -101,8 +101,13 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>        \n     <dependency>\n-      <groupId>org.apache.syncope.common.idrepo</groupId>\n-      <artifactId>syncope-common-idrepo-rest-api</artifactId>\n+      <groupId>org.apache.syncope.common.idm</groupId>\n+      <artifactId>syncope-common-idm-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.common.am</groupId>\n+      <artifactId>syncope-common-am-rest-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>"},{"sha":"49241634589f171126ef7c7e003544187f0dd56c","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/BpmnProcessRestClient.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBpmnProcessRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBpmnProcessRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBpmnProcessRestClient.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.rest;\n \n import java.io.InputStream;\n-import java.util.Collections;\n import java.util.List;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n@@ -44,8 +43,8 @@ private static BpmnProcessService getService(final MediaType mediaType) {\n         BpmnProcessService service = getService(BpmnProcessService.class);\n \n         MetadataMap<String, String> headers = new MetadataMap<>();\n-        headers.put(HttpHeaders.CONTENT_TYPE, Collections.singletonList(mediaType.toString()));\n-        headers.put(HttpHeaders.ACCEPT, Collections.singletonList(mediaType.toString()));\n+        headers.put(HttpHeaders.CONTENT_TYPE, List.of(mediaType.toString()));\n+        headers.put(HttpHeaders.ACCEPT, List.of(mediaType.toString()));\n         WebClient.client(service).headers(headers);\n \n         return service;"},{"sha":"c3c0a3e484c90a49d6df31c7576b90958d999062","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -20,7 +20,6 @@\n \n import java.text.ParseException;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -92,7 +91,7 @@ public List<String> findMatchingUser(final String connObjectKeyValue, final Stri\n         SAML2IdP idp = idpDAO.find(idpKey);\n         if (idp == null) {\n             LOG.warn(\"Invalid IdP: {}\", idpKey);\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         return inboundMatcher.matchByConnObjectKeyValue("},{"sha":"f0390751063ebac9224315d0b75c940a2c21e15b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/LogsITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -73,8 +73,7 @@ public void updateCoreLogs() {\n \n     @Test\n     public void readConsoleLogs() {\n-        TESTER.assertComponent(\"body:content:tabbedPanel:tabs-container:tabs:1:link\",\n-                AjaxFallbackLink.class);\n+        TESTER.assertComponent(\"body:content:tabbedPanel:tabs-container:tabs:1:link\", AjaxFallbackLink.class);\n         TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:1:link\");\n         TESTER.assertComponent(CONTAINER_PATH, WebMarkupContainer.class);\n \n@@ -91,6 +90,8 @@ public void updateConsoleLogs() {\n \n         TESTER.getRequest().addParameter(\n                 result.getPageRelativePath() + \":fields:1:field:dropDownChoiceField\", \"6\");\n+        TESTER.assertComponent(\n+                result.getPageRelativePath() + \":fields:1:field:dropDownChoiceField\", DropDownChoice.class);\n         TESTER.executeAjaxEvent(\n                 result.getPageRelativePath() + \":fields:1:field:dropDownChoiceField\", Constants.ON_CHANGE);\n "},{"sha":"5b2a20cd83d49aafa21c24df3dca3b582ce7ba6b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReconciliationITCase.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18d84af51dee57f4636ddca65dcdf33b4b7e29f5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java?ref=18d84af51dee57f4636ddca65dcdf33b4b7e29f5","patch":"@@ -251,17 +251,8 @@ public void exportCSV() throws IOException {\n         PagedResult<UserTO> users = userService.search(anyQuery);\n         assertNotNull(users);\n \n-        CsvSchema.Builder builder = CsvSchema.builder().setUseHeader(true);\n-        builder.addColumn(\"username\");\n-        builder.addColumn(\"status\");\n-        builder.addColumn(\"firstname\");\n-        builder.addColumn(\"surname\");\n-        builder.addColumn(\"email\");\n-        builder.addColumn(\"loginDate\");\n-        CsvSchema schema = builder.build();\n-\n-        MappingIterator<Map<String, String>> reader = new CsvMapper().readerFor(Map.class).with(schema).\n-                readValues((InputStream) response.getEntity());\n+        MappingIterator<Map<String, String>> reader = new CsvMapper().readerFor(Map.class).\n+                with(CsvSchema.emptySchema().withHeader()).readValues((InputStream) response.getEntity());\n \n         int rows = 0;\n         for (; reader.hasNext(); rows++) {"}]}