{"sha":"c8375acdcfd578c4fa00acbb8642db4d67e7047f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM4Mzc1YWNkY2ZkNTc4YzRmYTAwYWNiYjg2NDJkYjRkNjdlNzA0N2Y=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-05-03T16:00:11Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-05-03T16:00:11Z"},"message":"SYNCOPE-67 #provided descendig order\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1333517 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2025ef075cd78abfb8623d3db448c7e0c9df7e88","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2025ef075cd78abfb8623d3db448c7e0c9df7e88"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c8375acdcfd578c4fa00acbb8642db4d67e7047f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c8375acdcfd578c4fa00acbb8642db4d67e7047f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c8375acdcfd578c4fa00acbb8642db4d67e7047f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c8375acdcfd578c4fa00acbb8642db4d67e7047f/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"600969fce8379657234eca563bffa5e80637e303","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/600969fce8379657234eca563bffa5e80637e303","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/600969fce8379657234eca563bffa5e80637e303"}],"stats":{"total":164,"additions":106,"deletions":58},"files":[{"sha":"684b3d494ab2f43fde2682946fc4c666d3caf36b","filename":"console/src/main/java/org/apache/syncope/console/pages/Tasks.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c8375acdcfd578c4fa00acbb8642db4d67e7047f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c8375acdcfd578c4fa00acbb8642db4d67e7047f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=c8375acdcfd578c4fa00acbb8642db4d67e7047f","patch":"@@ -23,23 +23,23 @@\n import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n-import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n-import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.model.AbstractReadOnlyModel;\n-import org.apache.wicket.model.CompoundPropertyModel;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.syncope.client.to.SchedTaskTO;\n import org.apache.syncope.client.to.TaskExecTO;\n import org.apache.syncope.client.to.TaskTO;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.console.pages.panels.NotificationTasks;\n-import org.apache.syncope.console.pages.panels.SchedTasks;\n import org.apache.syncope.console.pages.panels.PropagationTasks;\n+import org.apache.syncope.console.pages.panels.SchedTasks;\n import org.apache.syncope.console.pages.panels.SyncTasks;\n import org.apache.syncope.console.rest.TaskRestClient;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.model.AbstractReadOnlyModel;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n public class Tasks extends BasePage {\n \n@@ -130,7 +130,7 @@ public TasksProvider(final TaskRestClient restClient, final int paginatorRows, f\n             super();\n \n             //Default sorting\n-            setSort(\"id\", SortOrder.ASCENDING);\n+            setSort(\"id\", SortOrder.DESCENDING);\n             comparator = new SortableDataProviderComparator<T>(this);\n             this.paginatorRows = paginatorRows;\n             this.restClient = restClient;"},{"sha":"a6511c5d743e987722bd34956f6f36a7ef48c12b","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c8375acdcfd578c4fa00acbb8642db4d67e7047f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c8375acdcfd578c4fa00acbb8642db4d67e7047f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=c8375acdcfd578c4fa00acbb8642db4d67e7047f","patch":"@@ -90,11 +90,11 @@ public <T extends TaskTO> List<T> listTasks(final Class<T> reference, final int\n             result = (List<T>) Arrays.asList(restTemplate.getForObject(baseURL\n                     + \"task/notification/list/{page}/{size}.json\", NotificationTaskTO[].class, page, size));\n         } else if (SchedTaskTO.class == reference) {\n-            result = (List<T>) Arrays.asList(restTemplate.getForObject(baseURL + \"task/sched/list/{page}/{size}.json\",\n-                    SchedTaskTO[].class, page, size));\n+            result = (List<T>) Arrays.asList(restTemplate.getForObject(baseURL\n+                    + \"task/sched/list/{page}/{size}.json\", SchedTaskTO[].class, page, size));\n         } else if (SyncTaskTO.class == reference) {\n-            result = (List<T>) Arrays.asList(restTemplate.getForObject(baseURL + \"task/sync/list/{page}/{size}.json\",\n-                    SyncTaskTO[].class, page, size));\n+            result = (List<T>) Arrays.asList(restTemplate.getForObject(baseURL\n+                    + \"task/sync/list/{page}/{size}.json\", SyncTaskTO[].class, page, size));\n         }\n \n         return result;\n@@ -146,8 +146,8 @@ public void startExecution(final Long taskId) {\n      * @param taskId task id\n      */\n     public void startExecution(final Long taskId, boolean dryRun) {\n-        restTemplate.postForObject(baseURL + \"task/execute/{taskId}?dryRun={dryRun}\", null, TaskExecTO.class, taskId,\n-                dryRun);\n+        restTemplate.postForObject(\n+                baseURL + \"task/execute/{taskId}?dryRun={dryRun}\", null, TaskExecTO.class, taskId, dryRun);\n     }\n \n     /**\n@@ -157,7 +157,7 @@ public void startExecution(final Long taskId, boolean dryRun) {\n      */\n     @Override\n     public void deleteExecution(final Long taskExecId) {\n-        restTemplate.delete(baseURL + \"task/execution/delete/{execId}\", taskExecId);\n+        restTemplate.getForObject(baseURL + \"task/execution/delete/{execId}\", TaskExecTO.class, taskExecId);\n     }\n \n     public SyncTaskTO createSyncTask(final SyncTaskTO taskTO) {"},{"sha":"4a4af7765fb61e3ded8c7893248a79f2ddef6a77","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/NotificationTask.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotificationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotificationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotificationTask.java?ref=c8375acdcfd578c4fa00acbb8642db4d67e7047f","patch":"@@ -29,6 +29,9 @@\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.types.TraceLevel;\n \n+/**\n+ * Encapsulate all information about a notification task.\n+ */\n @Entity\n public class NotificationTask extends Task {\n "},{"sha":"4e4e29dcddf26f6ad5c5343402f5b829597cde5b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/PropagationTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java?ref=c8375acdcfd578c4fa00acbb8642db4d67e7047f","patch":"@@ -24,12 +24,12 @@\n import javax.persistence.Enumerated;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n-import org.identityconnectors.framework.common.objects.Attribute;\n+import org.apache.syncope.client.util.XMLSerializer;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.validation.entity.PropagationTaskCheck;\n-import org.apache.syncope.client.util.XMLSerializer;\n import org.apache.syncope.types.PropagationMode;\n import org.apache.syncope.types.PropagationOperation;\n+import org.identityconnectors.framework.common.objects.Attribute;\n \n /**\n  * Encapsulate all information about a propagation task."},{"sha":"4f252c34de090a7db3ea641f988d72cf6f96520b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=c8375acdcfd578c4fa00acbb8642db4d67e7047f","patch":"@@ -25,9 +25,9 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.client.util.XMLSerializer;\n import org.apache.syncope.core.persistence.validation.entity.SyncTaskCheck;\n import org.apache.syncope.core.scheduling.SyncJob;\n-import org.apache.syncope.client.util.XMLSerializer;\n \n @Entity\n @SyncTaskCheck"},{"sha":"6bb05b7c1b8d429dae76fbf7ff85fc6b4d9289b0","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":30,"deletions":9,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=c8375acdcfd578c4fa00acbb8642db4d67e7047f","patch":"@@ -21,15 +21,15 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.Query;\n-import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.Task;\n-import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class TaskDAOImpl extends AbstractDAOImpl implements TaskDAO {\n@@ -53,7 +53,16 @@ private <T extends Task> StringBuilder buildfindAllQuery(final Class<T> referenc\n     @Override\n     public <T extends Task> List<T> findToExec(final Class<T> reference) {\n         StringBuilder queryString = buildfindAllQuery(reference);\n-        queryString.append(\"WHERE e.latestExecStatus IS NULL\");\n+        \n+        if (SchedTask.class.equals(reference)) {\n+            queryString.append(\"AND \");\n+        } else {\n+            queryString.append(\"WHERE \");\n+        }\n+        \n+        queryString.append(\"e.latestExecStatus IS NULL \");\n+        queryString.append(\"ORDER BY e.id DESC\");\n+\n         final Query query = entityManager.createQuery(queryString.toString());\n         return query.getResultList();\n     }\n@@ -62,12 +71,15 @@ public <T extends Task> List<T> findToExec(final Class<T> reference) {\n     public <T extends Task> List<T> findAll(final ExternalResource resource, final Class<T> reference) {\n \n         StringBuilder queryString = buildfindAllQuery(reference);\n+\n         if (SchedTask.class.equals(reference)) {\n             queryString.append(\"AND \");\n         } else {\n             queryString.append(\"WHERE \");\n         }\n-        queryString.append(\"e.resource=:resource\");\n+\n+        queryString.append(\"e.resource=:resource \");\n+        queryString.append(\"ORDER BY e.id DESC\");\n \n         final Query query = entityManager.createQuery(queryString.toString());\n         query.setParameter(\"resource\", resource);\n@@ -83,7 +95,10 @@ public <T extends Task> List<T> findAll(final Class<T> reference) {\n     @Override\n     public <T extends Task> List<T> findAll(final int page, final int itemsPerPage, final Class<T> reference) {\n \n-        final Query query = entityManager.createQuery(buildfindAllQuery(reference).toString());\n+        StringBuilder queryString = buildfindAllQuery(reference);\n+        queryString.append(\"ORDER BY e.id DESC\");\n+\n+        final Query query = entityManager.createQuery(queryString.toString());\n \n         query.setFirstResult(itemsPerPage * (page <= 0\n                 ? 0\n@@ -99,7 +114,10 @@ public <T extends Task> List<T> findAll(final int page, final int itemsPerPage,\n     @Override\n     public List<PropagationTask> findAll(final SyncopeUser user) {\n         StringBuilder queryString = buildfindAllQuery(PropagationTask.class);\n-        queryString.append(\"WHERE e.syncopeUser=:user\");\n+\n+        queryString.append(\"WHERE e.syncopeUser=:user \");\n+        queryString.append(\"ORDER BY e.id DESC\");\n+\n         final Query query = entityManager.createQuery(queryString.toString());\n         query.setParameter(\"user\", user);\n \n@@ -110,7 +128,10 @@ public List<PropagationTask> findAll(final SyncopeUser user) {\n     public List<PropagationTask> findAll(final ExternalResource resource, final SyncopeUser user) {\n \n         StringBuilder queryString = buildfindAllQuery(PropagationTask.class);\n-        queryString.append(\"WHERE e.syncopeUser=:user \").append(\"AND e.resource=:resource\");\n+        queryString.append(\"WHERE e.syncopeUser=:user \");\n+        queryString.append(\"AND e.resource=:resource \");\n+        queryString.append(\"ORDER BY e.id DESC\");\n+\n         final Query query = entityManager.createQuery(queryString.toString());\n         query.setParameter(\"user\", user);\n         query.setParameter(\"resource\", resource);"},{"sha":"f049e40911363a18e5d05e1a41c0d318e24cbd96","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SchedTaskValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java?ref=c8375acdcfd578c4fa00acbb8642db4d67e7047f","patch":"@@ -21,10 +21,10 @@\n import java.text.ParseException;\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-import org.quartz.CronExpression;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.scheduling.AbstractTaskJob;\n import org.apache.syncope.types.EntityViolationType;\n+import org.quartz.CronExpression;\n \n public class SchedTaskValidator extends AbstractValidator implements ConstraintValidator<SchedTaskCheck, SchedTask> {\n "},{"sha":"3d1cc38590f4e1f4c849b7013422d74fe6bce8b1","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationManager.java","status":"modified","additions":29,"deletions":21,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=c8375acdcfd578c4fa00acbb8642db4d67e7047f","patch":"@@ -79,7 +79,7 @@\n /**\n  * Manage the data propagation to external resources.\n  */\n-@Transactional(rollbackFor = { Throwable.class })\n+@Transactional(rollbackFor = {Throwable.class})\n public class PropagationManager {\n \n     /**\n@@ -135,7 +135,8 @@ public class PropagationManager {\n     @Autowired\n     private JexlUtil jexlUtil;\n \n-    private SyncopeUser getSyncopeUser(final Long userId) throws NotFoundException {\n+    private SyncopeUser getSyncopeUser(final Long userId)\n+            throws NotFoundException {\n \n         SyncopeUser user = userDAO.find(userId);\n         if (user == null) {\n@@ -155,7 +156,8 @@ private SyncopeUser getSyncopeUser(final Long userId) throws NotFoundException {\n      * @throws NotFoundException if userId is not found\n      */\n     public List<PropagationTask> getCreateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            final String password, final List<AttributeTO> vAttrs) throws NotFoundException {\n+            final String password, final List<AttributeTO> vAttrs)\n+            throws NotFoundException {\n \n         return getCreateTaskIds(wfResult, password, vAttrs, null);\n     }\n@@ -202,7 +204,8 @@ public List<PropagationTask> getCreateTaskIds(final WorkflowResult<Map.Entry<Lon\n      * @throws NotFoundException if userId is not found\n      */\n     public List<PropagationTask> getUpdateTaskIds(final SyncopeUser user, final Boolean enable,\n-            final Set<String> syncResourceNames) throws NotFoundException {\n+            final Set<String> syncResourceNames)\n+            throws NotFoundException {\n \n         return getUpdateTaskIds(user, // SyncopeUser to be updated on external resources\n                 null, // no propagation by resources\n@@ -257,17 +260,19 @@ public List<PropagationTask> getUpdateTaskIds(final WorkflowResult<Map.Entry<Lon\n      */\n     public List<PropagationTask> getUpdateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n             final String password, final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated,\n-            final Set<String> syncResourceNames) throws NotFoundException {\n+            final Set<String> syncResourceNames)\n+            throws NotFoundException {\n \n         SyncopeUser user = getSyncopeUser(wfResult.getResult().getKey());\n \n-        return getUpdateTaskIds(user, wfResult.getPropByRes(), password, vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult\n-                .getResult().getValue(), syncResourceNames);\n+        return getUpdateTaskIds(user, wfResult.getPropByRes(), password, vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult.\n+                getResult().getValue(), syncResourceNames);\n     }\n \n     private List<PropagationTask> getUpdateTaskIds(final SyncopeUser user, final PropagationByResource propByRes,\n             final String password, final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated,\n-            final Boolean enable, final Set<String> syncResourceNames) throws NotFoundException {\n+            final Boolean enable, final Set<String> syncResourceNames)\n+            throws NotFoundException {\n \n         PropagationByResource localPropByRes = userDataBinder.fillVirtual(user, vAttrsToBeRemoved == null\n                 ? Collections.EMPTY_SET\n@@ -299,7 +304,8 @@ private List<PropagationTask> getUpdateTaskIds(final SyncopeUser user, final Pro\n      * @return list of propagation tasks\n      * @throws NotFoundException if user is not found\n      */\n-    public List<PropagationTask> getDeleteTaskIds(final Long userId) throws NotFoundException {\n+    public List<PropagationTask> getDeleteTaskIds(final Long userId)\n+            throws NotFoundException {\n \n         return getDeleteTaskIds(userId, null);\n     }\n@@ -338,7 +344,8 @@ public List<PropagationTask> getDeleteTaskIds(final Long userId, final String sy\n      * @throws ClassNotFoundException if schema type for given mapping does not exists in current class loader\n      */\n     private Map.Entry<String, Attribute> prepareAttribute(final SchemaMapping mapping, final SyncopeUser user,\n-            final String password) throws ClassNotFoundException {\n+            final String password)\n+            throws ClassNotFoundException {\n \n         final List<AbstractAttributable> attributables = new ArrayList<AbstractAttributable>();\n \n@@ -394,8 +401,8 @@ private Map.Entry<String, Attribute> prepareAttribute(final SchemaMapping mappin\n \n         } else if (mapping.isPassword()) {\n \n-            res = new DefaultMapEntry(null, AttributeBuilder.buildPassword(objValues.iterator().next().toString()\n-                    .toCharArray()));\n+            res = new DefaultMapEntry(null, AttributeBuilder.buildPassword(objValues.iterator().next().toString().\n+                    toCharArray()));\n \n         } else {\n             if (schema != null && schema.isMultivalue()) {\n@@ -423,8 +430,8 @@ private Map.Entry<String, Attribute> prepareAttribute(final SchemaMapping mappin\n     private Map.Entry<String, Set<Attribute>> prepareAttributes(final SyncopeUser user, final String password,\n             final Boolean enable, final ExternalResource resource) {\n \n-        LOG.debug(\"Preparing resource attributes for {}\" + \" on resource {}\" + \" with attributes {}\", new Object[] {\n-                user, resource, user.getAttributes() });\n+        LOG.debug(\"Preparing resource attributes for {}\" + \" on resource {}\" + \" with attributes {}\", new Object[]{\n+                    user, resource, user.getAttributes()});\n \n         Set<Attribute> attributes = new HashSet<Attribute>();\n         String accountId = null;\n@@ -543,7 +550,8 @@ protected List<PropagationTask> provision(final SyncopeUser user, final String p\n         return tasks;\n     }\n \n-    public void execute(final List<PropagationTask> tasks) throws PropagationException {\n+    public void execute(final List<PropagationTask> tasks)\n+            throws PropagationException {\n         execute(tasks, null);\n     }\n \n@@ -767,12 +775,12 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n         } finally {\n             LOG.debug(\"Update execution for {}\", task);\n \n+            execution.setStartDate(startDate);\n+            execution.setMessage(taskExecutionMessage);\n+            execution.setEndDate(new Date());\n+\n             if (hasToBeregistered(task, execution)) {\n                 PropagationTask savedTask = taskDAO.save(task);\n-\n-                execution.setStartDate(startDate);\n-                execution.setMessage(taskExecutionMessage);\n-                execution.setEndDate(new Date());\n                 execution.setTask(savedTask);\n \n                 if (!propagationAttempted.isEmpty()) {\n@@ -807,8 +815,8 @@ private ConnectorObject getRemoteObject(final ConnectorFacadeProxy connector, fi\n \n             return connector.getObject(task.getPropagationMode(), task.getPropagationOperation(), ObjectClass.ACCOUNT,\n                     new Uid(latest || task.getOldAccountId() == null\n-                            ? task.getAccountId()\n-                            : task.getOldAccountId()), connector.getOperationOptions(task.getResource()));\n+                    ? task.getAccountId()\n+                    : task.getOldAccountId()), connector.getOperationOptions(task.getResource()));\n \n         } catch (RuntimeException ignore) {\n             LOG.debug(\"Resolving username\", ignore);"},{"sha":"7cb2cc43fea199eda15323d09753a1b94fbeb97f","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":23,"deletions":7,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c8375acdcfd578c4fa00acbb8642db4d67e7047f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=c8375acdcfd578c4fa00acbb8642db4d67e7047f","patch":"@@ -62,14 +62,20 @@ public class TaskDataBinder {\n      * Logger.\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n+\n     private static final String[] IGNORE_TASK_PROPERTIES = {\"executions\", \"resource\", \"user\"};\n+\n     private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\"id\", \"task\"};\n+\n     @Autowired\n     private TaskExecDAO taskExecDAO;\n+\n     @Autowired\n     private ResourceDAO resourceDAO;\n+\n     @Autowired\n     private SchedulerFactoryBean scheduler;\n+\n     @Autowired\n     private JexlUtil jexlUtil;\n \n@@ -131,7 +137,8 @@ private void fill(final SyncTask task, final SyncTaskTO taskTO) {\n         task.setJobActionsClassName(taskTO.getJobActionsClassName());\n     }\n \n-    public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUtil) throws NotFoundException {\n+    public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUtil)\n+            throws NotFoundException {\n \n         SchedTask task = taskUtil.newTask();\n         task.setCronExpression(taskTO.getCronExpression());\n@@ -143,7 +150,8 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUt\n \n             case SYNC:\n                 if (!(taskTO instanceof SyncTaskTO)) {\n-                    throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.getClass().getName());\n+                    throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.\n+                            getClass().getName());\n                 }\n                 SyncTaskTO syncTaskTO = (SyncTaskTO) taskTO;\n \n@@ -166,10 +174,12 @@ public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, fina\n \n         if (taskUtil == TaskUtil.SYNC) {\n             if (!(task instanceof SyncTask)) {\n-                throw new ClassCastException(\"taskUtil is type SyncTask but task is not SyncTask: \" + task.getClass().getName());\n+                throw new ClassCastException(\"taskUtil is type SyncTask but task is not SyncTask: \" + task.getClass().\n+                        getName());\n             }\n             if (!(taskTO instanceof SyncTaskTO)) {\n-                throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.getClass().getName());\n+                throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.\n+                        getClass().getName());\n             }\n \n             fill((SyncTask) task, (SyncTaskTO) taskTO);\n@@ -179,10 +189,14 @@ public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, fina\n     public TaskExecTO getTaskExecTO(final TaskExec execution) {\n         TaskExecTO executionTO = new TaskExecTO();\n         BeanUtils.copyProperties(execution, executionTO, IGNORE_TASK_EXECUTION_PROPERTIES);\n+\n         if (execution.getId() != null) {\n             executionTO.setId(execution.getId());\n         }\n-        executionTO.setTask(execution.getTask().getId());\n+\n+        if (execution.getTask() != null && execution.getTask().getId() != null) {\n+            executionTO.setTask(execution.getTask().getId());\n+        }\n \n         return executionTO;\n     }\n@@ -215,7 +229,8 @@ public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n         switch (taskUtil) {\n             case PROPAGATION:\n                 if (!(task instanceof PropagationTask)) {\n-                    throw new ClassCastException(\"taskUtil is type Propagation but task is not PropagationTask: \" + task.getClass().getName());\n+                    throw new ClassCastException(\"taskUtil is type Propagation but task is not PropagationTask: \" + task.\n+                            getClass().getName());\n                 }\n \n                 ((PropagationTaskTO) taskTO).setResource(((PropagationTask) task).getResource().getName());\n@@ -232,7 +247,8 @@ public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n                 setExecTime((SchedTaskTO) taskTO, task);\n \n                 if (!(task instanceof SyncTask)) {\n-                    throw new ClassCastException(\"taskUtil is type Sync but task is not SyncTask: \" + task.getClass().getName());\n+                    throw new ClassCastException(\"taskUtil is type Sync but task is not SyncTask: \" + task.getClass().\n+                            getName());\n                 }\n \n                 ((SyncTaskTO) taskTO).setResource(((SyncTask) task).getResource().getName());"}]}