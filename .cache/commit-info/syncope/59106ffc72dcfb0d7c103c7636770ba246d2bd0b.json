{"sha":"59106ffc72dcfb0d7c103c7636770ba246d2bd0b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU5MTA2ZmZjNzJkY2ZiMGQ3YzEwM2M3NjM2NzcwYmEyNDZkMmJkMGI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-25T15:00:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-25T15:00:44Z"},"message":"[SYNCOPE-119] Avoid duplicate realm specification in assignable queries","tree":{"sha":"15f74f9df8f14972e11fce762785eaea96df236b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/15f74f9df8f14972e11fce762785eaea96df236b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/59106ffc72dcfb0d7c103c7636770ba246d2bd0b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/59106ffc72dcfb0d7c103c7636770ba246d2bd0b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/59106ffc72dcfb0d7c103c7636770ba246d2bd0b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4fd76bf663666082150da4b79fd88f1c920d93ab","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4fd76bf663666082150da4b79fd88f1c920d93ab","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4fd76bf663666082150da4b79fd88f1c920d93ab"}],"stats":{"total":240,"additions":107,"deletions":133},"files":[{"sha":"80ae127aa3a2f8fec7dbb9dc9aa0170dd41294c7","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.cli.commands.user;\n \n-import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.client.cli.SyncopeServices;\n@@ -96,10 +95,7 @@ public Map<String, BulkActionResult.Status> deleteByAttribute(\n     }\n \n     public Map<String, BulkActionResult.Status> deleteAll(final String realm) {\n-        final AnyListQuery anyListQuery = new AnyListQuery();\n-        anyListQuery.setDetails(false);\n-        anyListQuery.setRealms(Arrays.asList(realm));\n-        return deleteBulk(userService.list(anyListQuery).getResult());\n+        return deleteBulk(userService.list(new AnyListQuery.Builder().realm(realm).details(false).build()).getResult());\n     }\n \n     private Map<String, BulkActionResult.Status> deleteBulk(final List<UserTO> users) {"},{"sha":"a84d9ad2f800bd93db768decdd11d0d114acee20","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/AnyObjectFiqlSearchConditionBuilder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -89,10 +89,10 @@ public CompleteCondition notInRelationshipTypes(final String type, final String.\n                 notInRelationshipTypes(type, moreTypes);\n     }\n \n-    public CompleteCondition isAssignable(final String realm, final String... moreRealms) {\n+    public CompleteCondition isAssignable() {\n         return newBuilderInstance().\n                 is(SpecialAttr.ASSIGNABLE.toString()).\n-                isAssignable(realm, moreRealms);\n+                isAssignable();\n     }\n \n     protected class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n@@ -156,9 +156,9 @@ public CompleteCondition notInRelationshipTypes(final String type, final String.\n         }\n \n         @Override\n-        public CompleteCondition isAssignable(final String realm, final String... moreRealms) {\n+        public CompleteCondition isAssignable() {\n             this.result = SpecialAttr.ASSIGNABLE.toString();\n-            return condition(FiqlParser.EQ, realm, (Object[]) moreRealms);\n+            return condition(FiqlParser.EQ, SpecialAttr.NULL);\n         }\n \n     }"},{"sha":"55815ea83bf6876bc8aed2239e480bd336b40d20","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/AnyObjectProperty.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectProperty.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -34,6 +34,6 @@ public interface AnyObjectProperty extends SyncopeProperty {\n \n     CompleteCondition notInRelationshipTypes(String type, String... moreTypes);\n \n-    CompleteCondition isAssignable(String realm, String... moreRealms);\n+    CompleteCondition isAssignable();\n \n }"},{"sha":"af0364b6bba8c78338f9235908ef729ca0417d2c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/GroupFiqlSearchConditionBuilder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -38,10 +38,10 @@ public GroupProperty is(final String property) {\n         return newBuilderInstance().is(property);\n     }\n \n-    public CompleteCondition isAssignable(final String realm, final String... moreRealms) {\n+    public CompleteCondition isAssignable() {\n         return newBuilderInstance().\n                 is(SpecialAttr.ASSIGNABLE.toString()).\n-                isAssignable(realm, moreRealms);\n+                isAssignable();\n     }\n \n     protected static class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n@@ -63,9 +63,9 @@ public GroupProperty is(final String property) {\n         }\n \n         @Override\n-        public CompleteCondition isAssignable(final String realm, final String... moreRealms) {\n+        public CompleteCondition isAssignable() {\n             this.result = SpecialAttr.ASSIGNABLE.toString();\n-            return condition(FiqlParser.EQ, realm, (Object[]) moreRealms);\n+            return condition(FiqlParser.EQ, SpecialAttr.NULL);\n         }\n \n     }"},{"sha":"672bac029d12f5b29ab0591568d218e60f88a69c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/GroupProperty.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -22,6 +22,6 @@\n \n public interface GroupProperty extends SyncopeProperty {\n \n-    CompleteCondition isAssignable(String realm, String... moreRealms);\n+    CompleteCondition isAssignable();\n \n }"},{"sha":"cc394c07ecd51459f7abc7966084d3c49e5cfb74","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyListQuery.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.MatrixParam;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -41,24 +39,20 @@ public Builder details(final boolean details) {\n         }\n \n         public Builder realm(final String realm) {\n-            if (getInstance().getRealms() == null) {\n-                getInstance().setRealms(new ArrayList<String>());\n-            }\n-            getInstance().getRealms().add(realm);\n-\n+            getInstance().setRealm(realm);\n             return this;\n         }\n     }\n \n-    private List<String> realms;\n+    private String realm;\n \n-    public List<String> getRealms() {\n-        return realms;\n+    public String getRealm() {\n+        return realm;\n     }\n \n     @DefaultValue(SyncopeConstants.ROOT_REALM)\n     @MatrixParam(\"realm\")\n-    public void setRealms(final List<String> realms) {\n-        this.realms = realms;\n+    public void setRealm(final String realm) {\n+        this.realm = realm;\n     }\n }"},{"sha":"ae38801d3b4030bb14d59b3ae7b08f69a49252ff","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnySearchQuery.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnySearchQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnySearchQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnySearchQuery.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n-import java.util.ArrayList;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n@@ -39,11 +38,7 @@ public Builder details(final boolean details) {\n         }\n \n         public Builder realm(final String realm) {\n-            if (getInstance().getRealms() == null) {\n-                getInstance().setRealms(new ArrayList<String>());\n-            }\n-            getInstance().getRealms().add(realm);\n-\n+            getInstance().setRealm(realm);\n             return this;\n         }\n "},{"sha":"18b94299a242170aca27049e00a431050a2dd6ad","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -191,10 +191,11 @@ public boolean evaluate(final String target) {\n     }\n \n     protected Set<String> getEffectiveRealms(\n-            final Set<String> allowedRealms, final Collection<String> requestedRealms) {\n+            final Set<String> allowedRealms, final String requestedRealm) {\n \n         Set<String> allowed = RealmUtils.normalize(allowedRealms);\n-        Set<String> requested = RealmUtils.normalize(requestedRealms);\n+        Set<String> requested = new HashSet<>();\n+        requested.add(requestedRealm);\n \n         Set<String> effective = new HashSet<>();\n         CollectionUtils.select(requested, new StartsWithPredicate(allowed), effective);\n@@ -224,7 +225,7 @@ public boolean evaluate(final String ownedRealm) {\n \n     public abstract TO read(Long key);\n \n-    public abstract int count(List<String> realms);\n+    public abstract int count(String realm);\n \n     public abstract ProvisioningResult<TO> create(TO anyTO, boolean nullPriorityAsync);\n \n@@ -234,14 +235,14 @@ public boolean evaluate(final String ownedRealm) {\n \n     public abstract List<TO> list(\n             int page, int size, List<OrderByClause> orderBy,\n-            List<String> realms,\n+            String realm,\n             boolean details);\n \n     public abstract List<TO> search(\n             SearchCond searchCondition,\n             int page, int size, List<OrderByClause> orderBy,\n-            List<String> realms,\n+            String realm,\n             boolean details);\n \n-    public abstract int searchCount(SearchCond searchCondition, List<String> realms);\n+    public abstract int searchCount(SearchCond searchCondition, String realm);\n }"},{"sha":"cca89c35a71d808bb161aea2690f71a598f0f644","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":15,"deletions":16,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -21,7 +21,6 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -80,38 +79,38 @@ public AnyObjectTO read(final Long key) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public int count(final List<String> realms) {\n+    public int count(final String realm) {\n         throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n     public List<AnyObjectTO> list(\n             final int page, final int size, final List<OrderByClause> orderBy,\n-            final List<String> realms, final boolean details) {\n+            final String realm, final boolean details) {\n \n         throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public int searchCount(final SearchCond searchCond, final List<String> realms) {\n+    public int searchCount(final SearchCond searchCond, final String realm) {\n         if (searchCond.hasAnyTypeCond() == null) {\n             throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n         }\n \n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n                         getFor(searchCond.hasAnyTypeCond(), EntitlementsHolder.AnyEntitlement.SEARCH)),\n-                realms);\n+                realm);\n \n         return searchDAO.count(effectiveRealms, searchCond, AnyTypeKind.ANY_OBJECT);\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n     public List<AnyObjectTO> search(final SearchCond searchCond, final int page, final int size,\n-            final List<OrderByClause> orderBy, final List<String> realms, final boolean details) {\n+            final List<OrderByClause> orderBy, final String realm, final boolean details) {\n \n         if (searchCond.hasAnyTypeCond() == null) {\n             throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n@@ -120,7 +119,7 @@ public List<AnyObjectTO> search(final SearchCond searchCond, final int page, fin\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n                         getFor(searchCond.hasAnyTypeCond(), EntitlementsHolder.AnyEntitlement.SEARCH)),\n-                realms);\n+                realm);\n \n         List<AnyObject> matchingAnyObjects = searchDAO.search(\n                 effectiveRealms, searchCond, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n@@ -147,7 +146,7 @@ public ProvisioningResult<AnyObjectTO> create(final AnyObjectTO anyObjectTO, fin\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n                         getFor(before.getLeft().getType(), EntitlementsHolder.AnyEntitlement.CREATE)),\n-                Collections.singleton(before.getLeft().getRealm()));\n+                before.getLeft().getRealm());\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n \n         Pair<Long, List<PropagationStatus>> created = provisioningManager.create(before.getLeft(), nullPriorityAsync);\n@@ -169,7 +168,7 @@ public ProvisioningResult<AnyObjectTO> update(\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n                         getFor(anyObjectTO.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n-                Collections.singleton(realm));\n+                realm);\n         securityChecks(effectiveRealms, realm, before.getLeft().getKey());\n \n         Pair<Long, List<PropagationStatus>> updated = provisioningManager.update(anyObjectPatch, nullPriorityAsync);\n@@ -185,7 +184,7 @@ public ProvisioningResult<AnyObjectTO> delete(final Long key, final boolean null\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n                         getFor(before.getLeft().getType(), EntitlementsHolder.AnyEntitlement.DELETE)),\n-                Collections.singleton(before.getLeft().getRealm()));\n+                before.getLeft().getRealm());\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n \n         List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey(), nullPriorityAsync);\n@@ -203,7 +202,7 @@ public AnyObjectTO unlink(final Long key, final Collection<String> resources) {\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n                         getFor(anyObject.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n-                Collections.singleton(anyObject.getRealm()));\n+                anyObject.getRealm());\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n         AnyObjectPatch patch = new AnyObjectPatch();\n@@ -226,7 +225,7 @@ public AnyObjectTO link(final Long key, final Collection<String> resources) {\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n                         getFor(anyObject.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n-                Collections.singleton(anyObject.getRealm()));\n+                anyObject.getRealm());\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n         AnyObjectPatch patch = new AnyObjectPatch();\n@@ -251,7 +250,7 @@ public ProvisioningResult<AnyObjectTO> unassign(\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n                         getFor(anyObject.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n-                Collections.singleton(anyObject.getRealm()));\n+                anyObject.getRealm());\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n         AnyObjectPatch patch = new AnyObjectPatch();\n@@ -280,7 +279,7 @@ public ProvisioningResult<AnyObjectTO> assign(\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n                         getFor(anyObject.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n-                Collections.singleton(anyObject.getRealm()));\n+                anyObject.getRealm());\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n         AnyObjectPatch patch = new AnyObjectPatch();\n@@ -305,7 +304,7 @@ public ProvisioningResult<AnyObjectTO> deprovision(\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n                         getFor(anyObject.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n-                Collections.singleton(anyObject.getRealm()));\n+                anyObject.getRealm());\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources, nullPriorityAsync);\n@@ -329,7 +328,7 @@ public ProvisioningResult<AnyObjectTO> provision(\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n                         getFor(anyObject.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n-                Collections.singleton(anyObject.getRealm()));\n+                anyObject.getRealm());\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n         List<PropagationStatus> statuses = provisioningManager.provision(key, resources, nullPriorityAsync);"},{"sha":"65b9a253cfb04d98f49ccea9cdf6c0bf967554c0","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":17,"deletions":21,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -21,8 +21,6 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -119,19 +117,19 @@ public GroupTO transform(final Group input) {\n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     @Override\n-    public int count(final List<String> realms) {\n-        return groupDAO.count(getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realms));\n+    public int count(final String realm) {\n+        return groupDAO.count(getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realm));\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     @Override\n     public List<GroupTO> list(\n             final int page, final int size, final List<OrderByClause> orderBy,\n-            final List<String> realms, final boolean details) {\n+            final String realm, final boolean details) {\n \n         return CollectionUtils.collect(groupDAO.findAll(\n-                getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realms),\n+                getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n                 page, size, orderBy),\n                 new Transformer<Group, GroupTO>() {\n \n@@ -145,20 +143,20 @@ public GroupTO transform(final Group input) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n-    public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n+    public int searchCount(final SearchCond searchCondition, final String realm) {\n         return searchDAO.count(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_SEARCH), realms),\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_SEARCH), realm),\n                 searchCondition, AnyTypeKind.GROUP);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public List<GroupTO> search(final SearchCond searchCondition, final int page, final int size,\n-            final List<OrderByClause> orderBy, final List<String> realms, final boolean details) {\n+            final List<OrderByClause> orderBy, final String realm, final boolean details) {\n \n         List<Group> matchingGroups = searchDAO.search(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_SEARCH), realms),\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_SEARCH), realm),\n                 searchCondition, page, size, orderBy, AnyTypeKind.GROUP);\n         return CollectionUtils.collect(matchingGroups, new Transformer<Group, GroupTO>() {\n \n@@ -180,7 +178,7 @@ public ProvisioningResult<GroupTO> create(final GroupTO groupTO, final boolean n\n \n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_CREATE),\n-                Collections.singleton(before.getLeft().getRealm()));\n+                before.getLeft().getRealm());\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n \n         Pair<Long, List<PropagationStatus>> created =\n@@ -196,11 +194,9 @@ public ProvisioningResult<GroupTO> update(final GroupPatch groupPatch, final boo\n         Pair<GroupPatch, List<LogicActions>> before = beforeUpdate(groupPatch, groupTO.getRealm());\n \n         if (before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())) {\n-            Set<String> requestedRealms = new HashSet<>();\n-            requestedRealms.add(before.getLeft().getRealm().getValue());\n             Set<String> effectiveRealms = getEffectiveRealms(\n                     AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n-                    requestedRealms);\n+                    before.getLeft().getRealm().getValue());\n             securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n         }\n \n@@ -217,7 +213,7 @@ public ProvisioningResult<GroupTO> delete(final Long key, final boolean nullPrio\n \n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_DELETE),\n-                Collections.singleton(before.getLeft().getRealm()));\n+                before.getLeft().getRealm());\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n \n         List<Group> ownedGroups = groupDAO.findOwnedByGroup(before.getLeft().getKey());\n@@ -248,7 +244,7 @@ public GroupTO unlink(final Long key, final Collection<String> resources) {\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n-                Collections.singleton(group.getRealm()));\n+                group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n         GroupPatch patch = new GroupPatch();\n@@ -271,7 +267,7 @@ public GroupTO link(final Long key, final Collection<String> resources) {\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n-                Collections.singleton(group.getRealm()));\n+                group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n         GroupPatch patch = new GroupPatch();\n@@ -296,7 +292,7 @@ public ProvisioningResult<GroupTO> unassign(\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n-                Collections.singleton(group.getRealm()));\n+                group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n         GroupPatch patch = new GroupPatch();\n@@ -325,7 +321,7 @@ public ProvisioningResult<GroupTO> assign(\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n-                Collections.singleton(group.getRealm()));\n+                group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n         GroupPatch patch = new GroupPatch();\n@@ -350,7 +346,7 @@ public ProvisioningResult<GroupTO> deprovision(\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n-                Collections.singleton(group.getRealm()));\n+                group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources, nullPriorityAsync);\n@@ -374,7 +370,7 @@ public ProvisioningResult<GroupTO> provision(\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n-                Collections.singleton(group.getRealm()));\n+                group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n         List<PropagationStatus> statuses = provisioningManager.provision(key, resources, nullPriorityAsync);"},{"sha":"63e7984cc479162f986c0be875b081421cd0a6ae","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":18,"deletions":21,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -22,7 +22,6 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -102,20 +101,20 @@ public Long getKey(final String username) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_LIST + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n-    public int count(final List<String> realms) {\n+    public int count(final String realm) {\n         return userDAO.count(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_LIST), realms));\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_LIST), realm));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_LIST + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public List<UserTO> list(\n             final int page, final int size, final List<OrderByClause> orderBy,\n-            final List<String> realms, final boolean details) {\n+            final String realm, final boolean details) {\n \n         return CollectionUtils.collect(userDAO.findAll(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_LIST), realms),\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_LIST), realm),\n                 page, size, orderBy),\n                 new Transformer<User, UserTO>() {\n \n@@ -144,20 +143,20 @@ public UserTO read(final Long key) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n-    public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n+    public int searchCount(final SearchCond searchCondition, final String realm) {\n         return searchDAO.count(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realms),\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n                 searchCondition, AnyTypeKind.USER);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public List<UserTO> search(final SearchCond searchCondition, final int page, final int size,\n-            final List<OrderByClause> orderBy, final List<String> realms, final boolean details) {\n+            final List<OrderByClause> orderBy, final String realm, final boolean details) {\n \n         List<User> matchingUsers = searchDAO.search(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realms),\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n                 searchCondition, page, size, orderBy, AnyTypeKind.USER);\n         return CollectionUtils.collect(matchingUsers, new Transformer<User, UserTO>() {\n \n@@ -203,7 +202,7 @@ protected ProvisioningResult<UserTO> doCreate(\n         if (!self) {\n             Set<String> effectiveRealms = getEffectiveRealms(\n                     AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_CREATE),\n-                    Collections.singleton(before.getLeft().getRealm()));\n+                    before.getLeft().getRealm());\n             securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n         }\n \n@@ -236,11 +235,9 @@ protected ProvisioningResult<UserTO> doUpdate(\n                 && before.getLeft().getRealm() != null\n                 && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())) {\n \n-            Set<String> requestedRealms = new HashSet<>();\n-            requestedRealms.add(before.getLeft().getRealm().getValue());\n             Set<String> effectiveRealms = getEffectiveRealms(\n                     AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n-                    requestedRealms);\n+                    before.getLeft().getRealm().getValue());\n             securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n         }\n \n@@ -279,7 +276,7 @@ public ProvisioningResult<UserTO> status(final StatusPatch statusPatch, final bo\n         UserTO toUpdate = binder.getUserTO(statusPatch.getKey());\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n-                Collections.singleton(toUpdate.getRealm()));\n+                toUpdate.getRealm());\n         securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n \n         Pair<Long, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusPatch, nullPriorityAsync);\n@@ -350,7 +347,7 @@ protected ProvisioningResult<UserTO> doDelete(\n         if (!self) {\n             Set<String> effectiveRealms = getEffectiveRealms(\n                     AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_DELETE),\n-                    Collections.singleton(before.getLeft().getRealm()));\n+                    before.getLeft().getRealm());\n             securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n         }\n \n@@ -387,7 +384,7 @@ public UserTO unlink(final Long key, final Collection<String> resources) {\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n-                Collections.singleton(user.getRealm()));\n+                user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n         UserPatch patch = new UserPatch();\n@@ -410,7 +407,7 @@ public UserTO link(final Long key, final Collection<String> resources) {\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n-                Collections.singleton(user.getRealm()));\n+                user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n         UserPatch patch = new UserPatch();\n@@ -435,7 +432,7 @@ public ProvisioningResult<UserTO> unassign(\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n-                Collections.singleton(user.getRealm()));\n+                user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n         UserPatch patch = new UserPatch();\n@@ -464,7 +461,7 @@ public ProvisioningResult<UserTO> assign(\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n-                Collections.singleton(user.getRealm()));\n+                user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n         UserPatch patch = new UserPatch();\n@@ -494,7 +491,7 @@ public ProvisioningResult<UserTO> deprovision(\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n-                Collections.singleton(user.getRealm()));\n+                user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources, nullPriorityAsync);\n@@ -518,7 +515,7 @@ public ProvisioningResult<UserTO> provision(\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n-                Collections.singleton(user.getRealm()));\n+                user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n         List<PropagationStatus> statuses ="},{"sha":"77b959bb29f64d0750d759911ef1868d29481482","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/search/SearchCondConverter.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverter.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -35,15 +35,19 @@ public final class SearchCondConverter {\n      * Parses a FIQL expression into Syncope's <tt>SearchCond</tt>, using CXF's <tt>FiqlParser</tt>.\n      *\n      * @param fiqlExpression FIQL string\n+     * @param realms optional realm to provide to {@link SearchCondVisitor}\n      * @return {@link SearchCond} instance for given FIQL expression\n      * @see FiqlParser\n      */\n-    public static SearchCond convert(final String fiqlExpression) {\n+    public static SearchCond convert(final String fiqlExpression, final String... realms) {\n         FiqlParser<SearchBean> fiqlParser = new FiqlParser<>(\n                 SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n \n         try {\n             SearchCondVisitor searchCondVisitor = new SearchCondVisitor();\n+            if (realms != null && realms.length > 0) {\n+                searchCondVisitor.setRealm(realms[0]);\n+            }\n             searchCondVisitor.visit(fiqlParser.parse(fiqlExpression));\n             return searchCondVisitor.getQuery();\n         } catch (Exception e) {"},{"sha":"402005bfc09126dd1ebb28bb5a4df6da910ba3d4","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/search/SearchCondVisitor.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n import org.apache.cxf.jaxrs.ext.search.ConditionType;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n@@ -56,14 +55,16 @@ public class SearchCondVisitor extends AbstractSearchConditionVisitor<SearchBean\n         ANY_FIELDS.addAll(SearchableFields.get(AnyObjectTO.class));\n     }\n \n+    private String realm;\n+\n     private SearchCond searchCond;\n \n     public SearchCondVisitor() {\n         super(null);\n     }\n \n-    public SearchCondVisitor(final Map<String, String> fieldMap) {\n-        super(fieldMap);\n+    public void setRealm(final String realm) {\n+        this.realm = realm;\n     }\n \n     private AttributeCond createAttributeCond(final String schema) {\n@@ -140,7 +141,7 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n \n                         case ASSIGNABLE:\n                             AssignableCond assignableCond = new AssignableCond();\n-                            assignableCond.setRealmFullPath(value);\n+                            assignableCond.setRealmFullPath(realm);\n                             leaf = SearchCond.getLeafCond(assignableCond);\n                             break;\n "},{"sha":"189b5750cd5ae8d2154e17ee9616086f990b7ebb","filename":"core/misc/src/test/java/org/apache/syncope/core/misc/search/SearchCondConverterTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -155,14 +155,14 @@ public void resources() {\n \n     @Test\n     public void assignable() {\n-        String fiqlExpression = new GroupFiqlSearchConditionBuilder().isAssignable(\"/even/two\").query();\n-        assertEquals(SpecialAttr.ASSIGNABLE + \"==/even/two\", fiqlExpression);\n+        String fiqlExpression = new GroupFiqlSearchConditionBuilder().isAssignable().query();\n+        assertEquals(SpecialAttr.ASSIGNABLE + \"==\" + SpecialAttr.NULL, fiqlExpression);\n \n         AssignableCond assignableCond = new AssignableCond();\n         assignableCond.setRealmFullPath(\"/even/two\");\n         SearchCond simpleCond = SearchCond.getLeafCond(assignableCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression, \"/even/two\"));\n     }\n \n     @Test"},{"sha":"609f1f81b14681f2468030b4f15581f14a2ff288","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":10,"deletions":20,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -20,8 +20,6 @@\n \n import java.util.Set;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -30,6 +28,7 @@\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n@@ -110,48 +109,39 @@ public TO read(final Long key) {\n     }\n \n     protected PagedResult<TO> list(final AnyListQuery listQuery) {\n-        CollectionUtils.transform(listQuery.getRealms(), new Transformer<String, String>() {\n-\n-            @Override\n-            public String transform(final String input) {\n-                return StringUtils.prependIfMissing(input, SyncopeConstants.ROOT_REALM);\n-            }\n-        });\n+        String realm = StringUtils.prependIfMissing(listQuery.getRealm(), SyncopeConstants.ROOT_REALM);\n \n         return buildPagedResult(\n                 getAnyLogic().list(\n                         listQuery.getPage(),\n                         listQuery.getSize(),\n                         getOrderByClauses(listQuery.getOrderBy()),\n-                        listQuery.getRealms(),\n+                        realm,\n                         listQuery.isDetails()),\n                 listQuery.getPage(),\n                 listQuery.getSize(),\n-                getAnyLogic().count(listQuery.getRealms()));\n+                getAnyLogic().count(realm));\n     }\n \n     @Override\n     public PagedResult<TO> search(final AnySearchQuery searchQuery) {\n-        CollectionUtils.transform(searchQuery.getRealms(), new Transformer<String, String>() {\n+        String realm = StringUtils.prependIfMissing(searchQuery.getRealm(), SyncopeConstants.ROOT_REALM);\n \n-            @Override\n-            public String transform(final String input) {\n-                return StringUtils.prependIfMissing(input, SyncopeConstants.ROOT_REALM);\n-            }\n-        });\n+        // if an assignable query is provided in the FIQL string, start anyway from root realm\n+        boolean isAssignableCond = -1 != searchQuery.getFiql().indexOf(SpecialAttr.ASSIGNABLE.toString());\n \n-        SearchCond cond = getSearchCond(searchQuery.getFiql());\n+        SearchCond cond = getSearchCond(searchQuery.getFiql(), realm);\n         return buildPagedResult(\n                 getAnyLogic().search(\n                         cond,\n                         searchQuery.getPage(),\n                         searchQuery.getSize(),\n                         getOrderByClauses(searchQuery.getOrderBy()),\n-                        searchQuery.getRealms(),\n+                        isAssignableCond ? SyncopeConstants.ROOT_REALM : realm,\n                         searchQuery.isDetails()),\n                 searchQuery.getPage(),\n                 searchQuery.getSize(),\n-                getAnyLogic().searchCount(cond, searchQuery.getRealms()));\n+                getAnyLogic().searchCount(cond, isAssignableCond ? SyncopeConstants.ROOT_REALM : realm));\n     }\n \n     @Override"},{"sha":"eec89272fbe3ae00c4e9c9a6aff1a2808d110daf","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -142,9 +142,10 @@ protected void checkETag(final String etag) {\n         }\n     }\n \n-    protected SearchCond getSearchCond(final String fiql) {\n+    protected SearchCond getSearchCond(final String fiql, final String realm) {\n         try {\n             SearchCondVisitor visitor = new SearchCondVisitor();\n+            visitor.setRealm(realm);\n             SearchCondition<SearchBean> sc = searchContext.getCondition(fiql, SearchBean.class);\n             sc.accept(visitor);\n "},{"sha":"10c46a88a5dcf01f9806646fba16b6c8c678b54b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -67,7 +67,7 @@ public PagedResult<AnyObjectTO> list(final String type, final AnyListQuery listQ\n         searchQuery.setOrderBy(listQuery.getOrderBy());\n         searchQuery.setPage(listQuery.getPage());\n         searchQuery.setSize(listQuery.getSize());\n-        searchQuery.setRealms(listQuery.getRealms());\n+        searchQuery.setRealm(listQuery.getRealm());\n \n         return search(searchQuery);\n     }"},{"sha":"7b077281fb9c45324a59ab7564b84a4192ceab5e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SearchITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/59106ffc72dcfb0d7c103c7636770ba246d2bd0b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java?ref=59106ffc72dcfb0d7c103c7636770ba246d2bd0b","patch":"@@ -345,9 +345,9 @@ public boolean evaluate(final UserTO user) {\n     @Test\n     public void assignable() {\n         PagedResult<GroupTO> groups = groupService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getGroupSearchConditionBuilder().\n-                        isAssignable(\"/even/two\").query()).\n+                new AnySearchQuery.Builder().realm(\"/even/two\").\n+                fiql(SyncopeClient.getGroupSearchConditionBuilder().isAssignable().\n+                        and(\"name\").equalTo(\"*\").query()).\n                 build());\n         assertNotNull(groups);\n         assertTrue(CollectionUtils.exists(groups.getResult(), new Predicate<GroupTO>() {\n@@ -366,9 +366,9 @@ public boolean evaluate(final GroupTO group) {\n         }));\n \n         PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n-                        isAssignable(\"/odd\").query()).\n+                new AnySearchQuery.Builder().realm(\"/odd\").\n+                fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").isAssignable().\n+                        and(\"name\").equalTo(\"*\").query()).\n                 build());\n         assertNotNull(anyObjects);\n         assertFalse(CollectionUtils.exists(anyObjects.getResult(), new Predicate<AnyObjectTO>() {"}]}