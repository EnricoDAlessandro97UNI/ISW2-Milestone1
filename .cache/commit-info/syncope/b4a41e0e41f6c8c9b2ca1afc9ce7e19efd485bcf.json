{"sha":"b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","node_id":"C_kwDOJfYA1toAKGI0YTQxZTBlNDFmNmM4YzliMmNhMWFmYzljZTdlMTllZmQ0ODViY2Y","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2022-03-04T17:00:12Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-03-04T17:00:12Z"},"message":"[SYNCOPE-1666] added security answer hashing (#319) (#321)\n\n* [SYNCOPE-1666] added security answer hashing (#321)","tree":{"sha":"7b45917c161f45d7de7ef7e169331df588027330","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7b45917c161f45d7de7ef7e169331df588027330"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIkWcCRBK7hj4Ov3rIwAAhuIIADI/7wxLkBqoeRo/RXiwpTyk\n32Xo8e5Uz0IFBcNB6+kBFipkYIgWAO/lg8eYGpq6ZzNCN4UEbxEKGqOcFdeV99Wy\nw7M2cs2dGA/ZvKPFsx8kJ+pBX2ULupGfIawOcpYdJjXPEkVL9cEDeLJXYsvKwlo2\n+H2T1lOi66MJY6MI0eTq+XOOKxGFlpdjOLoqHudFOzJFIdXUJq0f5/mHMGlhsXcT\nH3qUpSavYCzm0wLF7ku/1Pt7keCsgUj6I6RPWM7mTTkJM3+HEhzJLiLcjITBEcua\nyB6y2Z6SxdweOyXXub/6j35kxZ5OojBRbiTmcenWL57QfgA1SoItjFXABAmGVak=\n=G0Yh\n-----END PGP SIGNATURE-----\n","payload":"tree 7b45917c161f45d7de7ef7e169331df588027330\nparent 100af0b6fdafb48f5eeb21000302c24bb0918a70\nauthor Andrea Patricelli <andreapatricelli@apache.org> 1646413212 +0100\ncommitter GitHub <noreply@github.com> 1646413212 +0100\n\n[SYNCOPE-1666] added security answer hashing (#319) (#321)\n\n* [SYNCOPE-1666] added security answer hashing (#321)"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"100af0b6fdafb48f5eeb21000302c24bb0918a70","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/100af0b6fdafb48f5eeb21000302c24bb0918a70","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/100af0b6fdafb48f5eeb21000302c24bb0918a70"}],"stats":{"total":327,"additions":237,"deletions":90},"files":[{"sha":"58e79bda0a31571636cdecbc9d9ea58d0072e876","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.Encryptor;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -124,15 +125,14 @@ public Triple<String, String, UserTO> selfRead() {\n \n         return Triple.of(\n                 POJOHelper.serialize(AuthContextUtils.getAuthorizations()),\n-                POJOHelper.serialize(delegationDAO.findValidDelegating(authenticatedUser.getKey())),\n-                binder.returnUserTO(authenticatedUser));\n+                POJOHelper.serialize(delegationDAO.findValidDelegating(authenticatedUser.getKey())), authenticatedUser);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO read(final String key) {\n-        return binder.returnUserTO(binder.getUserTO(key));\n+        return binder.getUserTO(key);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_SEARCH + \"')\")\n@@ -153,7 +153,7 @@ public Pair<Integer, List<UserTO>> search(\n \n         List<User> matching = searchDAO.search(authRealms, effectiveCond, page, size, orderBy, AnyTypeKind.USER);\n         List<UserTO> result = matching.stream().\n-                map(user -> binder.returnUserTO(binder.getUserTO(user, details))).\n+                map(user -> binder.getUserTO(user, details)).\n                 collect(Collectors.toList());\n \n         return Pair.of(count, result);\n@@ -196,8 +196,7 @@ protected ProvisioningResult<UserTO> doCreate(\n         Pair<String, List<PropagationStatus>> created = provisioningManager.create(\n                 before.getLeft(), nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n \n-        return afterCreate(\n-                binder.returnUserTO(binder.getUserTO(created.getKey())), created.getRight(), before.getRight());\n+        return afterCreate(binder.getUserTO(created.getKey()), created.getRight(), before.getRight());\n     }\n \n     @PreAuthorize(\"isAuthenticated() \"\n@@ -261,7 +260,7 @@ protected ProvisioningResult<UserTO> doUpdate(\n                 before.getLeft(), nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n \n         ProvisioningResult<UserTO> result = afterUpdate(\n-                binder.returnUserTO(binder.getUserTO(after.getLeft().getKey())),\n+                binder.getUserTO(after.getLeft().getKey()),\n                 after.getRight(),\n                 before.getRight());\n \n@@ -315,7 +314,7 @@ public ProvisioningResult<UserTO> status(final StatusR statusR, final boolean nu\n         Pair<String, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusR, nullPriorityAsync);\n \n         return afterUpdate(\n-                binder.returnUserTO(binder.getUserTO(updated.getKey())),\n+                binder.getUserTO(updated.getKey()),\n                 updated.getRight(),\n                 List.of());\n     }\n@@ -326,7 +325,7 @@ public ProvisioningResult<UserTO> selfStatus(final StatusR statusR, final boolea\n         Pair<String, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusR, nullPriorityAsync);\n \n         return afterUpdate(\n-                binder.returnUserTO(binder.getUserTO(updated.getKey())),\n+                binder.getUserTO(updated.getKey()),\n                 updated.getRight(),\n                 List.of());\n     }\n@@ -352,7 +351,9 @@ public void requestPasswordReset(final String username, final String securityAns\n         }\n \n         if (syncopeLogic.isPwdResetRequiringSecurityQuestions()\n-                && (securityAnswer == null || !securityAnswer.equals(user.getSecurityAnswer()))) {\n+                && (securityAnswer == null\n+                || !Encryptor.getInstance().verify(securityAnswer, user.getCipherAlgorithm(),\n+                user.getSecurityAnswer()))) {\n \n             throw SyncopeClientException.build(ClientExceptionType.InvalidSecurityAnswer);\n         }\n@@ -419,7 +420,7 @@ protected ProvisioningResult<UserTO> doDelete(\n             deletedTO = binder.getUserTO(before.getLeft().getKey());\n         }\n \n-        return afterDelete(binder.returnUserTO(deletedTO), statuses, before.getRight());\n+        return afterDelete(deletedTO, statuses, before.getRight());\n     }\n \n     protected void updateChecks(final String key) {\n@@ -448,8 +449,7 @@ public UserTO unlink(final String key, final Collection<String> resources) {\n                 map(r -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(r).build()).\n                 collect(Collectors.toList()));\n \n-        return binder.returnUserTO(binder.getUserTO(\n-                provisioningManager.unlink(req, AuthContextUtils.getUsername(), REST_CONTEXT)));\n+        return binder.getUserTO(provisioningManager.unlink(req, AuthContextUtils.getUsername(), REST_CONTEXT));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n@@ -463,8 +463,7 @@ public UserTO link(final String key, final Collection<String> resources) {\n                 map(r -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(r).build()).\n                 collect(Collectors.toList()));\n \n-        return binder.returnUserTO(binder.getUserTO(\n-                provisioningManager.link(req, AuthContextUtils.getUsername(), REST_CONTEXT)));\n+        return binder.getUserTO(provisioningManager.link(req, AuthContextUtils.getUsername(), REST_CONTEXT));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n@@ -519,7 +518,7 @@ public ProvisioningResult<UserTO> deprovision(\n                 key, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n \n         ProvisioningResult<UserTO> result = new ProvisioningResult<>();\n-        result.setEntity(binder.returnUserTO(binder.getUserTO(key)));\n+        result.setEntity(binder.getUserTO(key));\n         result.getPropagationStatuses().addAll(statuses);\n         return result;\n     }\n@@ -539,7 +538,7 @@ public ProvisioningResult<UserTO> provision(\n                 key, changePwd, password, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n \n         ProvisioningResult<UserTO> result = new ProvisioningResult<>();\n-        result.setEntity(binder.returnUserTO(binder.getUserTO(key)));\n+        result.setEntity(binder.getUserTO(key));\n         result.getPropagationStatuses().addAll(statuses);\n         return result;\n     }"},{"sha":"dc34148856c60da13f03c219f437be07c7d55f66","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/Account.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FAccount.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -28,14 +28,16 @@ public interface Account {\n \n     CipherAlgorithm getCipherAlgorithm();\n \n-    boolean canDecodePassword();\n+    boolean canDecodeSecrets();\n \n     String getPassword();\n \n     void setEncodedPassword(String password, CipherAlgorithm cipherAlgoritm);\n \n-    void setPassword(String password, CipherAlgorithm cipherAlgoritm);\n+    void setPassword(String password);\n \n+    void setCipherAlgorithm(CipherAlgorithm cipherAlgorithm);\n+    \n     Boolean isSuspended();\n \n     void setSuspended(Boolean suspended);"},{"sha":"8406759ef58fa2d1c5fca0abeffd12fa692dabdb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -54,7 +54,11 @@ public interface User extends Account, GroupableRelatable<User, UMembership, UPl\n     void setSecurityQuestion(SecurityQuestion securityQuestion);\n \n     String getSecurityAnswer();\n+    \n+    String getClearSecurityAnswer();\n \n+    void setEncodedSecurityAnswer(String securityAnswer);\n+    \n     void setSecurityAnswer(String securityAnswer);\n \n     Integer getFailedLogins();"},{"sha":"cd5d8941e842d47be70ab21ef04966cff47a5df3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPALinkedAccount.java","status":"modified","additions":19,"deletions":4,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -38,6 +38,7 @@\n import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -47,6 +48,8 @@\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPrivilege;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.Encryptor;\n \n @Entity\n@@ -141,7 +144,16 @@ public CipherAlgorithm getCipherAlgorithm() {\n     }\n \n     @Override\n-    public boolean canDecodePassword() {\n+    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\n+        if (this.cipherAlgorithm == null || cipherAlgorithm == null) {\n+            this.cipherAlgorithm = cipherAlgorithm;\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot override existing cipher algorithm\");\n+        }\n+    }\n+    \n+    @Override\n+    public boolean canDecodeSecrets() {\n         return this.cipherAlgorithm != null && this.cipherAlgorithm.isInvertible();\n     }\n \n@@ -157,10 +169,13 @@ public void setEncodedPassword(final String password, final CipherAlgorithm ciph\n     }\n \n     @Override\n-    public void setPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n+    public void setPassword(final String password) {\n         try {\n-            this.password = ENCRYPTOR.encode(password, cipherAlgoritm);\n-            this.cipherAlgorithm = cipherAlgoritm;\n+            this.password = ENCRYPTOR.encode(password, cipherAlgorithm == null\n+                    ? CipherAlgorithm.valueOf(ApplicationContextProvider.getBeanFactory().getBean(ConfParamOps.class).\n+                    get(AuthContextUtils.getDomain(), \"password.cipher.algorithm\", CipherAlgorithm.AES.name(),\n+                            String.class))\n+                    : cipherAlgorithm);\n         } catch (Exception e) {\n             LOG.error(\"Could not encode password\", e);\n             this.password = null;"},{"sha":"655e64a510adb2e9f4fd8d2523c3c43c70cb2ad0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":46,"deletions":6,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -46,11 +46,13 @@\n import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n@@ -185,6 +187,9 @@\n     @Column(nullable = true)\n     private String securityAnswer;\n \n+    @Transient\n+    private String clearSecurityAnswer;\n+    \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"owner\")\n     @Valid\n     private List<JPALinkedAccount> linkedAccounts = new ArrayList<>();\n@@ -241,21 +246,24 @@ public void removeClearPassword() {\n     }\n \n     @Override\n-    public void setEncodedPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n+    public void setEncodedPassword(final String password, final CipherAlgorithm cipherAlgorithm) {\n         this.clearPassword = null;\n \n         this.password = password;\n-        this.cipherAlgorithm = cipherAlgoritm;\n+        this.cipherAlgorithm = cipherAlgorithm;\n         setMustChangePassword(false);\n     }\n \n     @Override\n-    public void setPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n+    public void setPassword(final String password) {\n         this.clearPassword = password;\n \n         try {\n-            this.password = ENCRYPTOR.encode(password, cipherAlgoritm);\n-            this.cipherAlgorithm = cipherAlgoritm;\n+            this.password = ENCRYPTOR.encode(password, cipherAlgorithm == null\n+                    ? CipherAlgorithm.valueOf(ApplicationContextProvider.getBeanFactory().getBean(ConfParamOps.class).\n+                    get(AuthContextUtils.getDomain(), \"password.cipher.algorithm\", CipherAlgorithm.AES.name(),\n+                            String.class))\n+                    : cipherAlgorithm);\n             setMustChangePassword(false);\n         } catch (Exception e) {\n             LOG.error(\"Could not encode password\", e);\n@@ -269,7 +277,16 @@ public CipherAlgorithm getCipherAlgorithm() {\n     }\n \n     @Override\n-    public boolean canDecodePassword() {\n+    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\n+        if (this.cipherAlgorithm == null || cipherAlgorithm == null) {\n+            this.cipherAlgorithm = cipherAlgorithm;\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot override existing cipher algorithm\");\n+        }\n+    }\n+    \n+    @Override\n+    public boolean canDecodeSecrets() {\n         return this.cipherAlgorithm != null && this.cipherAlgorithm.isInvertible();\n     }\n \n@@ -413,9 +430,32 @@ public String getSecurityAnswer() {\n         return securityAnswer;\n     }\n \n+    @Override\n+    public String getClearSecurityAnswer() {\n+        return clearSecurityAnswer;\n+    }\n+\n+    @Override\n+    public void setEncodedSecurityAnswer(final String securityAnswer) {\n+        this.clearSecurityAnswer = null;\n+\n+        this.securityAnswer = securityAnswer;\n+    }\n+\n     @Override\n     public void setSecurityAnswer(final String securityAnswer) {\n         this.securityAnswer = securityAnswer;\n+\n+        try {\n+            this.securityAnswer = ENCRYPTOR.encode(securityAnswer, cipherAlgorithm == null\n+                    ? CipherAlgorithm.valueOf(ApplicationContextProvider.getBeanFactory().getBean(ConfParamOps.class).\n+                    get(AuthContextUtils.getDomain(), \"password.cipher.algorithm\", CipherAlgorithm.AES.name(),\n+                            String.class))\n+                    : cipherAlgorithm);\n+        } catch (Exception e) {\n+            LOG.error(\"Could not encode security answer\", e);\n+            this.securityAnswer = null;\n+        }\n     }\n \n     @Override"},{"sha":"d214f6a970316db1c7df2e419828cc85cc22d013","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -94,7 +94,8 @@ public void createUser() {\n \n         User user = entityFactory.newEntity(User.class);\n         user.setRealm(realmDAO.getRoot());\n-        user.setPassword(\"password\", CipherAlgorithm.SHA256);\n+        user.setPassword(\"password\");\n+        user.setCipherAlgorithm(CipherAlgorithm.SHA256);\n         user.setUsername(\"username\");\n \n         User actual = userDAO.save(user);"},{"sha":"fa91f98b90d4767354e1f5a29fd43991f7d9f28e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":55,"deletions":6,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -22,6 +22,7 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n@@ -33,11 +34,13 @@\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.spring.policy.InvalidPasswordRuleConf;\n+import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -68,6 +71,9 @@ public class UserTest extends AbstractTest {\n     @Autowired\n     private DerSchemaDAO derSchemaDAO;\n \n+    @Autowired\n+    private SecurityQuestionDAO securityQuestionDAO;\n+\n     @Test\n     public void find() {\n         User user = userDAO.find(\"823074dc-d280-436d-a7dd-07399fae48ec\");\n@@ -202,7 +208,8 @@ public void saveInvalidPassword() {\n         user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n         user.setCreator(\"admin\");\n         user.setCreationDate(new Date());\n-        user.setPassword(\"pass\", CipherAlgorithm.SHA256);\n+        user.setCipherAlgorithm(CipherAlgorithm.SHA256);\n+        user.setPassword(\"pass\");\n \n         try {\n             userDAO.save(user);\n@@ -219,7 +226,8 @@ public void saveInvalidUsername() {\n         user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n         user.setCreator(\"admin\");\n         user.setCreationDate(new Date());\n-        user.setPassword(\"password123\", CipherAlgorithm.SHA256);\n+        user.setCipherAlgorithm(CipherAlgorithm.SHA256);\n+        user.setPassword(\"password123\");\n \n         try {\n             userDAO.save(user);\n@@ -236,7 +244,8 @@ public void save() {\n         user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n         user.setCreator(\"admin\");\n         user.setCreationDate(new Date());\n-        user.setPassword(\"password123\", CipherAlgorithm.SHA256);\n+        user.setCipherAlgorithm(CipherAlgorithm.SHA256);\n+        user.setPassword(\"password123\");\n \n         User actual = userDAO.save(user);\n         assertNotNull(actual);\n@@ -263,7 +272,8 @@ public void issue237() {\n         user.setCreator(\"admin\");\n         user.setCreationDate(new Date());\n \n-        user.setPassword(\"password123\", CipherAlgorithm.AES);\n+        user.setCipherAlgorithm(CipherAlgorithm.AES);\n+        user.setPassword(\"password123\");\n \n         User actual = userDAO.save(user);\n         assertNotNull(actual);\n@@ -273,7 +283,8 @@ public void issue237() {\n     public void issueSYNCOPE391() {\n         User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username\");\n-        user.setPassword(null, CipherAlgorithm.AES);\n+        user.setCipherAlgorithm(CipherAlgorithm.AES);\n+        user.setPassword(null);\n         user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n \n         User actual = userDAO.save(user);\n@@ -292,7 +303,45 @@ public void testPasswordGenerator() {\n         assertNotNull(password);\n \n         User user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n-        user.setPassword(password, CipherAlgorithm.SHA);\n+        user.setPassword(password);\n         userDAO.save(user);\n     }\n+\n+    @Test\n+    public void passwordGeneratorFailing() {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            String password = \"\";\n+            try {\n+                password = passwordGenerator.generate(resourceDAO.find(\"ws-target-resource-nopropagation\"));\n+            } catch (InvalidPasswordRuleConf e) {\n+                fail(e.getMessage());\n+            }\n+            assertNotNull(password);\n+\n+            User user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n+            // SYNCOPE-1666 fail because cipherAlgorithm is already set\n+            user.setCipherAlgorithm(CipherAlgorithm.SHA);\n+            user.setPassword(password);\n+            userDAO.save(user);\n+        });\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE1666() {\n+        User user = entityFactory.newEntity(User.class);\n+        user.setUsername(\"username\");\n+        user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n+        user.setCreator(\"admin\");\n+        user.setCreationDate(new Date());\n+        user.setCipherAlgorithm(CipherAlgorithm.SSHA256);\n+        user.setPassword(\"password123\");\n+        user.setSecurityQuestion(securityQuestionDAO.find(\"887028ea-66fc-41e7-b397-620d7ea6dfbb\"));\n+        String securityAnswer = \"my complex answer to @ $complex question è ? £12345\";\n+        user.setSecurityAnswer(securityAnswer);\n+\n+        User actual = userDAO.save(user);\n+        assertNotNull(actual);\n+        assertNotNull(actual.getSecurityAnswer());\n+        assertTrue(Encryptor.getInstance().verify(securityAnswer, CipherAlgorithm.SSHA256, actual.getSecurityAnswer()));\n+    }\n }"},{"sha":"c7721f9893e4c725f9df16773a46376153fb1522","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -255,7 +255,8 @@ private LinkedAccount newLinkedAccount(final String connObjectKeyValue) {\n         account.add(applicationDAO.findPrivilege(\"getMighty\"));\n \n         account.setUsername(UUID.randomUUID().toString());\n-        account.setPassword(\"Password123\", CipherAlgorithm.AES);\n+        account.setCipherAlgorithm(CipherAlgorithm.AES);\n+        account.setPassword(\"Password123\");\n \n         AnyUtils anyUtils = anyUtilsFactory.getLinkedAccountInstance();\n         LAPlainAttr attr = anyUtils.newPlainAttr();"},{"sha":"b364f74301d0210c4993033a5471ad263e54b5cc","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/UserDataBinder.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -29,8 +29,6 @@\n \n public interface UserDataBinder {\n \n-    UserTO returnUserTO(UserTO userTO);\n-\n     UserTO getAuthenticatedUserTO();\n \n     UserTO getUserTO(String key);"},{"sha":"e69fa4a96f02aaeab4ff89d3be105b24881d57bf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultMappingManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -509,7 +509,7 @@ protected String getPasswordAttrValue(final Provision provision, final Account a\n         } else {\n             if (StringUtils.isNotBlank(defaultValue)) {\n                 passwordAttrValue = defaultValue;\n-            } else if (account.canDecodePassword()) {\n+            } else if (account.canDecodeSecrets()) {\n                 passwordAttrValue = decodePassword(account);\n             } else {\n                 passwordAttrValue = null;"},{"sha":"d5a8b366228d074d3cb65992e1857e06094f736b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":71,"deletions":41,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -52,6 +52,7 @@\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.persistence.api.entity.user.Account;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -167,16 +168,6 @@ public UserDataBinderImpl(\n         this.securityProperties = securityProperties;\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public UserTO returnUserTO(final UserTO userTO) {\n-        if (!confParamOps.get(AuthContextUtils.getDomain(), \"return.password.value\", false, Boolean.class)) {\n-            userTO.setPassword(null);\n-            userTO.getLinkedAccounts().forEach(account -> account.setPassword(null));\n-        }\n-        return userTO;\n-    }\n-\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO getAuthenticatedUserTO() {\n@@ -201,18 +192,42 @@ public UserTO getAuthenticatedUserTO() {\n \n     private void setPassword(final User user, final String password, final SyncopeClientCompositeException scce) {\n         try {\n-            String algorithm = confParamOps.get(AuthContextUtils.getDomain(),\n-                    \"password.cipher.algorithm\", CipherAlgorithm.AES.name(), String.class);\n-            user.setPassword(password, CipherAlgorithm.valueOf(algorithm));\n+            setCipherAlgorithm(user);\n+            user.setPassword(password);\n         } catch (IllegalArgumentException e) {\n-            SyncopeClientException invalidCiperAlgorithm = SyncopeClientException.build(ClientExceptionType.NotFound);\n-            invalidCiperAlgorithm.getElements().add(e.getMessage());\n-            scce.addException(invalidCiperAlgorithm);\n+            throw aggregateException(scce, e, ClientExceptionType.NotFound);\n+        }\n+    }\n \n-            throw scce;\n+    private void setSecurityAnswer(\n+            final User user,\n+            final String securityAnswer,\n+            final SyncopeClientCompositeException scce) {\n+        try {\n+            setCipherAlgorithm(user);\n+            user.setSecurityAnswer(securityAnswer);\n+        } catch (IllegalArgumentException e) {\n+            throw aggregateException(scce, e, ClientExceptionType.NotFound);\n+        }\n+    }\n+\n+    private void setCipherAlgorithm(final Account account) {\n+        if (account.getCipherAlgorithm() == null) {\n+            account.setCipherAlgorithm(CipherAlgorithm.valueOf(confParamOps.get(AuthContextUtils.getDomain(),\n+                    \"password.cipher.algorithm\", CipherAlgorithm.AES.name(), String.class)));\n         }\n     }\n \n+    private RuntimeException aggregateException(\n+            final SyncopeClientCompositeException scce,\n+            final RuntimeException e,\n+            final ClientExceptionType clientExceptionType) {\n+        SyncopeClientException sce = SyncopeClientException.build(clientExceptionType);\n+        sce.getElements().add(e.getMessage());\n+        scce.addException(sce);\n+        return scce;\n+    }\n+\n     private void linkedAccount(\n             final User user,\n             final LinkedAccountTO accountTO,\n@@ -246,7 +261,8 @@ public LinkedAccount get() {\n             if (StringUtils.isBlank(accountTO.getPassword())) {\n                 account.setEncodedPassword(null, null);\n             } else if (!accountTO.getPassword().equals(account.getPassword())) {\n-                account.setPassword(accountTO.getPassword(), CipherAlgorithm.AES);\n+                setCipherAlgorithm(account);\n+                account.setPassword(accountTO.getPassword());\n             }\n             account.setSuspended(accountTO.isSuspended());\n \n@@ -283,6 +299,26 @@ public LinkedAccount get() {\n         }\n     }\n \n+    private LinkedAccountTO getLinkedAccountTO(final LinkedAccount account, final boolean returnPasswordValue) {\n+        LinkedAccountTO accountTO = new LinkedAccountTO.Builder(\n+                account.getKey(), account.getResource().getKey(), account.getConnObjectKeyValue()).\n+                username(account.getUsername()).\n+                password(account.getPassword()).\n+                suspended(BooleanUtils.isTrue(account.isSuspended())).\n+                build();\n+\n+        account.getPlainAttrs().forEach(plainAttr -> {\n+            accountTO.getPlainAttrs().add(\n+                    new Attr.Builder(plainAttr.getSchema().getKey()).\n+                            values(plainAttr.getValuesAsStrings()).build());\n+        });\n+\n+        accountTO.getPrivileges().addAll(account.getPrivileges().stream().\n+                map(Entity::getKey).collect(Collectors.toList()));\n+\n+        return accountTO;\n+    }\n+\n     @Override\n     public void create(final User user, final UserCR userCR) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n@@ -307,7 +343,7 @@ public void create(final User user, final UserCR userCR) {\n                 user.setSecurityQuestion(securityQuestion);\n             }\n         }\n-        user.setSecurityAnswer(userCR.getSecurityAnswer());\n+        setSecurityAnswer(user, userCR.getSecurityAnswer(), scce);\n \n         // roles\n         userCR.getRoles().forEach(roleKey -> {\n@@ -498,7 +534,7 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n                         securityQuestionDAO.find(userUR.getSecurityQuestion().getValue());\n                 if (securityQuestion != null) {\n                     user.setSecurityQuestion(securityQuestion);\n-                    user.setSecurityAnswer(userUR.getSecurityAnswer().getValue());\n+                    setSecurityAnswer(user, userUR.getSecurityAnswer().getValue(), scce);\n                 }\n             }\n         }\n@@ -652,7 +688,7 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n \n                     // SYNCOPE-686: if password is invertible and we are adding resources with password mapping,\n                     // ensure that they are counted for password propagation\n-                    if (toBeUpdated.canDecodePassword()) {\n+                    if (toBeUpdated.canDecodeSecrets()) {\n                         if (userUR.getPassword() == null) {\n                             userUR.setPassword(new PasswordPatch());\n                         }\n@@ -739,30 +775,24 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n     @Transactional(readOnly = true)\n     @Override\n     public LinkedAccountTO getLinkedAccountTO(final LinkedAccount account) {\n-        LinkedAccountTO accountTO = new LinkedAccountTO.Builder(\n-                account.getKey(), account.getResource().getKey(), account.getConnObjectKeyValue()).\n-                username(account.getUsername()).\n-                password(account.getPassword()).\n-                suspended(BooleanUtils.isTrue(account.isSuspended())).\n-                build();\n-\n-        account.getPlainAttrs().forEach(plainAttr -> {\n-            accountTO.getPlainAttrs().add(\n-                    new Attr.Builder(plainAttr.getSchema().getKey()).\n-                            values(plainAttr.getValuesAsStrings()).build());\n-        });\n-\n-        accountTO.getPrivileges().addAll(account.getPrivileges().stream().\n-                map(Entity::getKey).collect(Collectors.toList()));\n-\n-        return accountTO;\n+        return getLinkedAccountTO(account, true);\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n     public UserTO getUserTO(final User user, final boolean details) {\n-        UserTO userTO = new UserTO();\n+        Boolean returnPasswordValue = confParamOps.get(AuthContextUtils.getDomain(),\n+                \"return.password.value\", Boolean.FALSE, Boolean.class);\n \n+        UserTO userTO = new UserTO();\n+        userTO.setKey(user.getKey());\n+        userTO.setUsername(user.getUsername());\n+        if (returnPasswordValue) {\n+            userTO.setPassword(user.getPassword());\n+            userTO.setSecurityAnswer(user.getSecurityAnswer());\n+        }\n+        userTO.setType(user.getType().getKey());\n+        userTO.setCreationDate(user.getCreationDate());\n         userTO.setCreator(user.getCreator());\n         userTO.setCreationDate(user.getCreationDate());\n         userTO.setCreationContext(user.getCreationContext());\n@@ -778,7 +808,6 @@ public UserTO getUserTO(final User user, final boolean details) {\n \n         userTO.setKey(user.getKey());\n         userTO.setUsername(user.getUsername());\n-        userTO.setPassword(user.getPassword());\n         userTO.setType(user.getType().getKey());\n         userTO.setStatus(user.getStatus());\n         userTO.setSuspended(BooleanUtils.isTrue(user.isSuspended()));\n@@ -831,7 +860,8 @@ public UserTO getUserTO(final User user, final boolean details) {\n \n             // linked accounts\n             userTO.getLinkedAccounts().addAll(\n-                    user.getLinkedAccounts().stream().map(this::getLinkedAccountTO).collect(Collectors.toList()));\n+                    user.getLinkedAccounts().stream().map(a -> getLinkedAccountTO(a, returnPasswordValue))\n+                            .collect(Collectors.toList()));\n \n             // delegations\n             userTO.getDelegatingDelegations().addAll("},{"sha":"ebc7cbd7a367456de8b719b862dd8d0c50184146","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DeletingLinkedAccount.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDeletingLinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDeletingLinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDeletingLinkedAccount.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -107,7 +107,12 @@ public CipherAlgorithm getCipherAlgorithm() {\n     }\n \n     @Override\n-    public boolean canDecodePassword() {\n+    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\n+        // unsupported\n+    }\n+    \n+    @Override\n+    public boolean canDecodeSecrets() {\n         return false;\n     }\n \n@@ -122,7 +127,7 @@ public void setEncodedPassword(final String password, final CipherAlgorithm ciph\n     }\n \n     @Override\n-    public void setPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n+    public void setPassword(final String password) {\n         // unsupported\n     }\n "},{"sha":"920b4b13857179d34f470348cb96e8c9a65e5517","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DefaultMappingManagerTest.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -50,6 +50,7 @@\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.util.ReflectionTestUtils;\n import org.springframework.transaction.annotation.Transactional;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n \n@@ -141,7 +142,8 @@ public void prepareAttrsForUser() {\n         assertNull(AttributeUtil.getPasswordValue(attrs.getRight()));\n \n         // 5. with no clear-text password, random password generation disabled but AES\n-        bellini.setPassword(\"newPassword123\", CipherAlgorithm.AES);\n+        ReflectionTestUtils.setField(bellini, \"cipherAlgorithm\", CipherAlgorithm.AES);\n+        bellini.setPassword(\"newPassword123\");\n         userDAO.save(bellini);\n         entityManager().flush();\n \n@@ -167,7 +169,8 @@ public void prepareAttrsForLinkedAccount() {\n         account.setResource(ldap);\n         account.setOwner(vivaldi);\n         account.setSuspended(Boolean.FALSE);\n-        account.setPassword(\"Password321\", CipherAlgorithm.AES);\n+        account.setCipherAlgorithm(CipherAlgorithm.AES);\n+        account.setPassword(\"Password321\");\n         vivaldi.add(account);\n \n         vivaldi = userDAO.save(vivaldi);"},{"sha":"1bc5af62ba19b9d902f11701853e386688999aa1","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/DefaultPasswordRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -207,7 +207,7 @@ public void enforce(final LinkedAccount account) {\n \n         if (account.getPassword() != null) {\n             String clear = null;\n-            if (account.canDecodePassword()) {\n+            if (account.canDecodeSecrets()) {\n                 try {\n                     clear = ENCRYPTOR.decode(account.getPassword(), account.getCipherAlgorithm());\n                 } catch (Exception e) {"},{"sha":"a843b0cce5d47f885030e26607ba574b51ea3650","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/HaveIBeenPwnedPasswordRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FHaveIBeenPwnedPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FHaveIBeenPwnedPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FHaveIBeenPwnedPasswordRule.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -109,7 +109,7 @@ public void enforce(final User user) {\n     public void enforce(final LinkedAccount account) {\n         if (account.getPassword() != null) {\n             String clear = null;\n-            if (account.canDecodePassword()) {\n+            if (account.canDecodeSecrets()) {\n                 try {\n                     clear = ENCRYPTOR.decode(account.getPassword(), account.getCipherAlgorithm());\n                 } catch (Exception e) {"},{"sha":"bbe0ccb939aeb6d81e805484d7ab6fbef4841ed4","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -245,7 +245,7 @@ public ProvisioningResult<UserTO> submitForm(final UserRequestForm form, final b\n         } else {\n             userTO = binder.getUserTO(wfResult.getResult().getKey());\n         }\n-        result.setEntity(binder.returnUserTO(userTO));\n+        result.setEntity(userTO);\n \n         return result;\n     }"},{"sha":"2a3eb71df5011dff8ead8c30885d27aebed48c94","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -66,7 +66,7 @@ public void enforce(final User user) {\n     public void enforce(final LinkedAccount account) {\n         if (account.getPassword() != null) {\n             String clear = null;\n-            if (account.canDecodePassword()) {\n+            if (account.canDecodeSecrets()) {\n                 try {\n                     clear = ENCRYPTOR.decode(account.getPassword(), account.getCipherAlgorithm());\n                 } catch (Exception e) {"},{"sha":"474a17655ad8d28a7cb2261683a2d31e152bf344","filename":"src/main/asciidoc/reference-guide/configuration/configurationparameters.adoc","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Fconfigurationparameters.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Fconfigurationparameters.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Fconfigurationparameters.adoc?ref=b4a41e0e41f6c8c9b2ca1afc9ce7e19efd485bcf","patch":"@@ -55,7 +55,7 @@ mechanism to work properly;\n [WARNING]\n Suspended Users are anyway not allowed to authenticate.\n * `log.lastlogindate` - whether the system updates the `lastLoginDate` field of users upon authentication;\n-* `return.password.value` - whether the hashed password value shall be returned when reading users;\n+* `return.password.value` - whether the hashed password value and the hashed security answer (if any) value shall be \n * `connector.test.timeout` - timeout (in seconds) to check connector connection in <<Admin Console>>;\n `0` to skip any check;\n "}]}