{"sha":"39f7f7ebff132173d5ca6ff6ec5e7692327524dc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM5ZjdmN2ViZmYxMzIxNzNkNWNhNmZmNmVjNWU3NjkyMzI3NTI0ZGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-08-24T11:10:30Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-08-24T11:10:30Z"},"message":"[SYNCOPE-925] Extending CXF's Swagger2Feature on purpose","tree":{"sha":"88e6041b9668cea4f5fd79f0f1533cf7b9c1bea0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/88e6041b9668cea4f5fd79f0f1533cf7b9c1bea0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/39f7f7ebff132173d5ca6ff6ec5e7692327524dc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/39f7f7ebff132173d5ca6ff6ec5e7692327524dc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/39f7f7ebff132173d5ca6ff6ec5e7692327524dc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/39f7f7ebff132173d5ca6ff6ec5e7692327524dc/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5b8237e0bf4043fec917bfdaf1409fc0512b7808","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5b8237e0bf4043fec917bfdaf1409fc0512b7808","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5b8237e0bf4043fec917bfdaf1409fc0512b7808"}],"stats":{"total":429,"additions":275,"deletions":154},"files":[{"sha":"41710fbf1a720d01ad9765293888a8e7014eb006","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/ExtendedSwagger2Serializers.java","status":"added","additions":214,"deletions":0,"changes":214,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39f7f7ebff132173d5ca6ff6ec5e7692327524dc/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FExtendedSwagger2Serializers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39f7f7ebff132173d5ca6ff6ec5e7692327524dc/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FExtendedSwagger2Serializers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FExtendedSwagger2Serializers.java?ref=39f7f7ebff132173d5ca6ff6ec5e7692327524dc","patch":"@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf;\n+\n+import io.swagger.jaxrs.listing.SwaggerSerializers;\n+import io.swagger.models.HttpMethod;\n+import io.swagger.models.Operation;\n+import io.swagger.models.Path;\n+import io.swagger.models.Swagger;\n+import io.swagger.models.Tag;\n+import io.swagger.models.parameters.HeaderParameter;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import org.apache.commons.collections4.ComparatorUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n+import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n+import org.apache.cxf.jaxrs.model.doc.DocumentationProvider;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+\n+public class ExtendedSwagger2Serializers extends SwaggerSerializers implements Swagger2Serializers {\n+\n+    protected boolean dynamicBasePath;\n+\n+    protected boolean replaceTags;\n+\n+    protected DocumentationProvider javadocProvider;\n+\n+    protected List<ClassResourceInfo> cris;\n+\n+    protected final List<String> domains = new ArrayList<>();\n+\n+    public ExtendedSwagger2Serializers() {\n+        super();\n+\n+        domains.addAll(ApplicationContextProvider.getApplicationContext().\n+                getBean(DomainsHolder.class).getDomains().keySet());\n+    }\n+\n+    @Override\n+    public void setDynamicBasePath(final boolean dynamicBasePath) {\n+        this.dynamicBasePath = dynamicBasePath;\n+    }\n+\n+    @Override\n+    public void setReplaceTags(final boolean replaceTags) {\n+        this.replaceTags = replaceTags;\n+    }\n+\n+    @Override\n+    public void setJavadocProvider(final DocumentationProvider javadocProvider) {\n+        this.javadocProvider = javadocProvider;\n+    }\n+\n+    @Override\n+    public void setClassResourceInfos(final List<ClassResourceInfo> classResourceInfos) {\n+        this.cris = classResourceInfos;\n+    }\n+\n+    @Override\n+    public void writeTo(\n+            final Swagger data,\n+            final Class<?> type,\n+            final Type genericType,\n+            final Annotation[] annotations,\n+            final MediaType mediaType,\n+            final MultivaluedMap<String, Object> headers,\n+            final OutputStream out) throws IOException {\n+\n+        if (dynamicBasePath) {\n+            MessageContext ctx = JAXRSUtils.createContextValue(\n+                    JAXRSUtils.getCurrentMessage(), null, MessageContext.class);\n+            data.setBasePath(StringUtils.substringBeforeLast(ctx.getHttpServletRequest().\n+                    getRequestURI(), \"/\"));\n+        }\n+\n+        if (replaceTags || javadocProvider != null) {\n+            Map<String, ClassResourceInfo> operations = new HashMap<>();\n+            Map<Pair<String, String>, OperationResourceInfo> methods = new HashMap<>();\n+            for (ClassResourceInfo cri : cris) {\n+                for (OperationResourceInfo ori : cri.getMethodDispatcher().getOperationResourceInfos()) {\n+                    String normalizedPath = getNormalizedPath(\n+                            cri.getURITemplate().getValue(), ori.getURITemplate().getValue());\n+\n+                    operations.put(normalizedPath, cri);\n+                    methods.put(ImmutablePair.of(ori.getHttpMethod(), normalizedPath), ori);\n+                }\n+            }\n+\n+            if (replaceTags && data.getTags() != null) {\n+                data.getTags().clear();\n+            }\n+            for (final Map.Entry<String, Path> entry : data.getPaths().entrySet()) {\n+                Tag tag = null;\n+                if (replaceTags && operations.containsKey(entry.getKey())) {\n+                    ClassResourceInfo cri = operations.get(entry.getKey());\n+\n+                    tag = new Tag();\n+                    tag.setName(cri.getURITemplate().getValue());\n+                    if (javadocProvider != null) {\n+                        tag.setDescription(javadocProvider.getClassDoc(cri));\n+                    }\n+\n+                    data.addTag(tag);\n+                }\n+\n+                for (Map.Entry<HttpMethod, Operation> subentry : entry.getValue().getOperationMap().entrySet()) {\n+                    if (replaceTags && tag != null) {\n+                        subentry.getValue().setTags(Collections.singletonList(tag.getName()));\n+                    }\n+\n+                    Pair<String, String> key = ImmutablePair.of(subentry.getKey().name(), entry.getKey());\n+                    if (methods.containsKey(key) && javadocProvider != null) {\n+                        OperationResourceInfo ori = methods.get(key);\n+\n+                        subentry.getValue().setSummary(javadocProvider.getMethodDoc(ori));\n+\n+                        boolean domainHeaderParameterFound = false;\n+                        for (int i = 0; i < subentry.getValue().getParameters().size(); i++) {\n+                            subentry.getValue().getParameters().get(i).\n+                                    setDescription(javadocProvider.getMethodParameterDoc(ori, i));\n+\n+                            if (subentry.getValue().getParameters().get(i) instanceof HeaderParameter\n+                                    && RESTHeaders.DOMAIN.equals(\n+                                            subentry.getValue().getParameters().get(i).getName())) {\n+\n+                                domainHeaderParameterFound = true;\n+                            }\n+                        }\n+                        if (!domainHeaderParameterFound) {\n+                            HeaderParameter domainHeaderParameter = new HeaderParameter();\n+                            domainHeaderParameter.setName(RESTHeaders.DOMAIN);\n+                            domainHeaderParameter.setRequired(true);\n+                            domainHeaderParameter.setType(\"string\");\n+                            domainHeaderParameter.setEnum(domains);\n+                            domainHeaderParameter.setDefault(SyncopeConstants.MASTER_DOMAIN);\n+\n+                            subentry.getValue().getParameters().add(domainHeaderParameter);\n+                        }\n+\n+                        if (subentry.getValue().getResponses() != null\n+                                && !subentry.getValue().getResponses().isEmpty()) {\n+\n+                            subentry.getValue().getResponses().entrySet().iterator().next().getValue().\n+                                    setDescription(javadocProvider.getMethodResponseDoc(ori));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        if (replaceTags && data.getTags() != null) {\n+            Collections.sort(data.getTags(), new Comparator<Tag>() {\n+\n+                @Override\n+                public int compare(final Tag tag1, final Tag tag2) {\n+                    return ComparatorUtils.<String>naturalComparator().compare(tag1.getName(), tag2.getName());\n+                }\n+            });\n+        }\n+\n+        super.writeTo(data, type, genericType, annotations, mediaType, headers, out);\n+    }\n+\n+    protected String getNormalizedPath(final String classResourcePath, final String operationResourcePath) {\n+        StringBuilder normalizedPath = new StringBuilder();\n+\n+        String[] segments = org.apache.commons.lang3.StringUtils.split(classResourcePath + operationResourcePath,\n+                \"/\");\n+        for (String segment : segments) {\n+            if (!org.apache.commons.lang3.StringUtils.isEmpty(segment)) {\n+                normalizedPath.append(\"/\").append(segment);\n+            }\n+        }\n+        // Adapt to Swagger's path expression\n+        if (normalizedPath.toString().endsWith(\":.*}\")) {\n+            normalizedPath.setLength(normalizedPath.length() - 4);\n+            normalizedPath.append('}');\n+        }\n+        return StringUtils.EMPTY.equals(normalizedPath.toString()) ? \"/\" : normalizedPath.toString();\n+    }\n+}"},{"sha":"e01d7e26bb071ce254bd0c13f069c6aff60da32f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/Swagger2Feature.java","status":"modified","additions":14,"deletions":150,"changes":164,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39f7f7ebff132173d5ca6ff6ec5e7692327524dc/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSwagger2Feature.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39f7f7ebff132173d5ca6ff6ec5e7692327524dc/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSwagger2Feature.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSwagger2Feature.java?ref=39f7f7ebff132173d5ca6ff6ec5e7692327524dc","patch":"@@ -22,25 +22,13 @@\n import io.swagger.jaxrs.config.DefaultReaderConfig;\n import io.swagger.jaxrs.config.ReaderConfig;\n import io.swagger.jaxrs.listing.ApiListingResource;\n-import io.swagger.jaxrs.listing.SwaggerSerializers;\n-import io.swagger.models.Operation;\n-import io.swagger.models.Path;\n-import io.swagger.models.Swagger;\n-import io.swagger.models.Tag;\n import java.io.IOException;\n-import java.io.OutputStream;\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Type;\n import java.net.URI;\n import java.net.URL;\n import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n import java.util.LinkedHashSet;\n import java.util.LinkedList;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import java.util.regex.Pattern;\n import javax.servlet.ServletContext;\n@@ -49,23 +37,15 @@\n import javax.ws.rs.container.ContainerRequestFilter;\n import javax.ws.rs.container.PreMatching;\n import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.MultivaluedMap;\n import javax.ws.rs.core.UriInfo;\n-import org.apache.commons.collections4.ComparatorUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.Bus;\n import org.apache.cxf.endpoint.Server;\n import org.apache.cxf.jaxrs.JAXRSServiceFactoryBean;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n-import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n-import org.apache.cxf.jaxrs.model.doc.DocumentationProvider;\n import org.apache.cxf.jaxrs.provider.ServerProviderFactory;\n import org.apache.cxf.jaxrs.utils.InjectionUtils;\n-import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n \n /**\n  * Automatically loads available javadocs from class loader (when {@link java.net.URLClassLoader}).\n@@ -82,7 +62,13 @@ public void initialize(final Server server, final Bus bus) {\n         super.initialize(server, bus);\n     }\n \n-    // ------- Remove the code below this point when CXF-6990 is part of next CXF release (3.1.8?) -----\n+    // ------- Remove the code below this point when CXF 3.1.8 is available -----\n+    private Swagger2Serializers swagger2Serializers;\n+\n+    public void setSwagger2Serializers(final Swagger2Serializers swagger2Serializers) {\n+        this.swagger2Serializers = swagger2Serializers;\n+    }\n+\n     @Override\n     protected void addSwaggerResource(final Server server, final Bus bus) {\n         List<Object> swaggerResources = new LinkedList<>();\n@@ -107,7 +93,13 @@ protected void addSwaggerResource(final Server server, final Bus bus) {\n         if (SWAGGER_UI_RESOURCE_ROOT != null) {\n             providers.add(new SwaggerUIFilter());\n         }\n-        providers.add(new Swagger2Serializers(dynamicBasePath, replaceTags, javadocProvider, cris));\n+\n+        if (swagger2Serializers != null) {\n+            swagger2Serializers.setJavadocProvider(javadocProvider);\n+            swagger2Serializers.setClassResourceInfos(cris);\n+            providers.add(swagger2Serializers);\n+        }\n+\n         providers.add(new ReaderConfigFilter());\n         ((ServerProviderFactory) server.getEndpoint().get(\n                 ServerProviderFactory.class.getName())).setUserProviders(providers);\n@@ -180,132 +172,4 @@ public void filter(final ContainerRequestContext rc) throws IOException {\n         }\n     }\n \n-    protected static class Swagger2Serializers extends SwaggerSerializers {\n-\n-        protected final boolean dynamicBasePath;\n-\n-        protected final boolean replaceTags;\n-\n-        protected final DocumentationProvider javadocProvider;\n-\n-        protected final List<ClassResourceInfo> cris;\n-\n-        public Swagger2Serializers(\n-                final boolean dynamicBasePath,\n-                final boolean replaceTags,\n-                final DocumentationProvider javadocProvider,\n-                final List<ClassResourceInfo> cris) {\n-\n-            super();\n-\n-            this.dynamicBasePath = dynamicBasePath;\n-            this.replaceTags = replaceTags;\n-            this.javadocProvider = javadocProvider;\n-            this.cris = cris;\n-        }\n-\n-        @Override\n-        public void writeTo(\n-                final Swagger data,\n-                final Class<?> type,\n-                final Type genericType,\n-                final Annotation[] annotations,\n-                final MediaType mediaType,\n-                final MultivaluedMap<String, Object> headers,\n-                final OutputStream out) throws IOException {\n-\n-            if (dynamicBasePath) {\n-                MessageContext ctx = JAXRSUtils.createContextValue(\n-                        JAXRSUtils.getCurrentMessage(), null, MessageContext.class);\n-                data.setBasePath(StringUtils.substringBeforeLast(ctx.getHttpServletRequest().\n-                        getRequestURI(), \"/\"));\n-            }\n-\n-            if (replaceTags || javadocProvider != null) {\n-                Map<String, ClassResourceInfo> operations = new HashMap<>();\n-                Map<Pair<String, String>, OperationResourceInfo> methods = new HashMap<>();\n-                for (ClassResourceInfo cri : cris) {\n-                    for (OperationResourceInfo ori : cri.getMethodDispatcher().getOperationResourceInfos()) {\n-                        String normalizedPath = getNormalizedPath(\n-                                cri.getURITemplate().getValue(), ori.getURITemplate().getValue());\n-\n-                        operations.put(normalizedPath, cri);\n-                        methods.put(ImmutablePair.of(ori.getHttpMethod(), normalizedPath), ori);\n-                    }\n-                }\n-\n-                if (replaceTags && data.getTags() != null) {\n-                    data.getTags().clear();\n-                }\n-                for (final Map.Entry<String, Path> entry : data.getPaths().entrySet()) {\n-                    Tag tag = null;\n-                    if (replaceTags && operations.containsKey(entry.getKey())) {\n-                        ClassResourceInfo cri = operations.get(entry.getKey());\n-\n-                        tag = new Tag();\n-                        tag.setName(cri.getURITemplate().getValue());\n-                        if (javadocProvider != null) {\n-                            tag.setDescription(javadocProvider.getClassDoc(cri));\n-                        }\n-\n-                        data.addTag(tag);\n-                    }\n-\n-                    for (Map.Entry<io.swagger.models.HttpMethod, Operation> subentry : entry.getValue().\n-                            getOperationMap().entrySet()) {\n-                        if (replaceTags && tag != null) {\n-                            subentry.getValue().setTags(Collections.singletonList(tag.getName()));\n-                        }\n-\n-                        Pair<String, String> key = ImmutablePair.of(subentry.getKey().name(), entry.getKey());\n-                        if (methods.containsKey(key) && javadocProvider != null) {\n-                            OperationResourceInfo ori = methods.get(key);\n-\n-                            subentry.getValue().setSummary(javadocProvider.getMethodDoc(ori));\n-                            for (int i = 0; i < subentry.getValue().getParameters().size(); i++) {\n-                                subentry.getValue().getParameters().get(i).\n-                                        setDescription(javadocProvider.getMethodParameterDoc(ori, i));\n-                            }\n-\n-                            if (subentry.getValue().getResponses() != null\n-                                    && !subentry.getValue().getResponses().isEmpty()) {\n-\n-                                subentry.getValue().getResponses().entrySet().iterator().next().getValue().\n-                                        setDescription(javadocProvider.getMethodResponseDoc(ori));\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-            if (replaceTags && data.getTags() != null) {\n-                Collections.sort(data.getTags(), new Comparator<Tag>() {\n-\n-                    @Override\n-                    public int compare(final Tag tag1, final Tag tag2) {\n-                        return ComparatorUtils.<String>naturalComparator().compare(tag1.getName(), tag2.getName());\n-                    }\n-                });\n-            }\n-\n-            super.writeTo(data, type, genericType, annotations, mediaType, headers, out);\n-        }\n-\n-        protected String getNormalizedPath(final String classResourcePath, final String operationResourcePath) {\n-            StringBuilder normalizedPath = new StringBuilder();\n-\n-            String[] segments = org.apache.commons.lang3.StringUtils.split(classResourcePath + operationResourcePath,\n-                    \"/\");\n-            for (String segment : segments) {\n-                if (!org.apache.commons.lang3.StringUtils.isEmpty(segment)) {\n-                    normalizedPath.append(\"/\").append(segment);\n-                }\n-            }\n-            // Adapt to Swagger's path expression\n-            if (normalizedPath.toString().endsWith(\":.*}\")) {\n-                normalizedPath.setLength(normalizedPath.length() - 4);\n-                normalizedPath.append('}');\n-            }\n-            return StringUtils.EMPTY.equals(normalizedPath.toString()) ? \"/\" : normalizedPath.toString();\n-        }\n-    }\n }"},{"sha":"39abf7bea977a9fe63a92143f3226d800e29b541","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/Swagger2Serializers.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39f7f7ebff132173d5ca6ff6ec5e7692327524dc/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSwagger2Serializers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39f7f7ebff132173d5ca6ff6ec5e7692327524dc/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSwagger2Serializers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSwagger2Serializers.java?ref=39f7f7ebff132173d5ca6ff6ec5e7692327524dc","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf;\n+\n+import io.swagger.models.Swagger;\n+import java.util.List;\n+import javax.ws.rs.ext.MessageBodyWriter;\n+import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n+import org.apache.cxf.jaxrs.model.doc.DocumentationProvider;\n+\n+public interface Swagger2Serializers extends MessageBodyWriter<Swagger> {\n+\n+    void setDynamicBasePath(boolean dynamicBasePath);\n+\n+    void setReplaceTags(boolean replaceTags);\n+\n+    void setJavadocProvider(DocumentationProvider javadocProvider);\n+\n+    void setClassResourceInfos(List<ClassResourceInfo> classResourceInfos);\n+}"},{"sha":"4f4d12b398f72cb312e86c29dc8e690b6aa7afb4","filename":"core/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39f7f7ebff132173d5ca6ff6ec5e7692327524dc/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39f7f7ebff132173d5ca6ff6ec5e7692327524dc/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=39f7f7ebff132173d5ca6ff6ec5e7692327524dc","patch":"@@ -99,6 +99,10 @@ under the License.\n     <property name=\"usePathParamsToCompareOperations\" value=\"false\"/>\n   </bean>\n   \n+  <bean id=\"extendedSwagger2Serializers\" class=\"org.apache.syncope.core.rest.cxf.ExtendedSwagger2Serializers\">\n+    <property name=\"dynamicBasePath\" value=\"true\"/>\n+    <property name=\"replaceTags\" value=\"true\"/>\n+  </bean>\n   <bean id=\"swagger2Feature\" class=\"org.apache.syncope.core.rest.cxf.Swagger2Feature\">\n     <property name=\"title\" value=\"Apache Syncope\"/>\n     <property name=\"version\" value=\"${syncope.version}\"/>\n@@ -109,8 +113,7 @@ under the License.\n     <property name=\"scanAllResources\" value=\"true\"/>\n     <property name=\"activateOnlyIfJaxrsSupported\" value=\"true\"/>\n     \n-    <property name=\"dynamicBasePath\" value=\"true\"/>\n-    <property name=\"replaceTags\" value=\"true\"/>\n+    <property name=\"swagger2Serializers\" ref=\"extendedSwagger2Serializers\"/>\n   </bean>\n \n   <jaxrs:server id=\"restContainer\" address=\"/\""},{"sha":"1b709b153bc370d564e7d2dfbf111a5e1390b153","filename":"fit/core-reference/src/main/resources/jboss/restCXFContext.xml","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39f7f7ebff132173d5ca6ff6ec5e7692327524dc/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39f7f7ebff132173d5ca6ff6ec5e7692327524dc/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml?ref=39f7f7ebff132173d5ca6ff6ec5e7692327524dc","patch":"@@ -105,6 +105,10 @@ under the License.\n     </property>\n   </bean>\n   \n+  <bean id=\"extendedSwagger2Serializers\" class=\"org.apache.syncope.core.rest.cxf.ExtendedSwagger2Serializers\">\n+    <property name=\"dynamicBasePath\" value=\"true\"/>\n+    <property name=\"replaceTags\" value=\"true\"/>\n+  </bean>\n   <bean id=\"swagger2Feature\" class=\"org.apache.syncope.core.rest.cxf.Swagger2Feature\">\n     <property name=\"title\" value=\"Apache Syncope\"/>\n     <property name=\"version\" value=\"${syncope.version}\"/>\n@@ -115,14 +119,14 @@ under the License.\n     <property name=\"scanAllResources\" value=\"true\"/>\n     <property name=\"activateOnlyIfJaxrsSupported\" value=\"true\"/>\n     \n-    <property name=\"dynamicBasePath\" value=\"true\"/>\n-    <property name=\"replaceTags\" value=\"true\"/>\n     <property name=\"javaDocPaths\">\n       <list>\n         <value>/WEB-INF/lib/syncope-common-rest-api-${syncope.version}-javadoc.jar</value>\n         <value>/WEB-INF/lib/syncope-ext-camel-rest-api-${syncope.version}-javadoc.jar</value>\n       </list>\n     </property>\n+\n+    <property name=\"swagger2Serializers\" ref=\"extendedSwagger2Serializers\"/>\n   </bean>\n \n   <jaxrs:server id=\"restContainer\" address=\"/\""}]}