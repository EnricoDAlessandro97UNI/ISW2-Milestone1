{"sha":"04979883e34a962b8497cfecd5643d648043c27e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA0OTc5ODgzZTM0YTk2MmI4NDk3Y2ZlY2Q1NjQzZDY0ODA0M2MyN2U=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-23T14:35:31Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-23T14:35:31Z"},"message":"SYNCOPE-47 #user templated used to be not applied in case of update coming from synchronization\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1304375 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ae9f4aca332ceb989cddf6bde38ec76bf9fd7319","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ae9f4aca332ceb989cddf6bde38ec76bf9fd7319"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/04979883e34a962b8497cfecd5643d648043c27e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04979883e34a962b8497cfecd5643d648043c27e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/04979883e34a962b8497cfecd5643d648043c27e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04979883e34a962b8497cfecd5643d648043c27e/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"b2d885d6f0e75fbd5e7fdbb956a23a8c273214a1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b2d885d6f0e75fbd5e7fdbb956a23a8c273214a1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b2d885d6f0e75fbd5e7fdbb956a23a8c273214a1"}],"stats":{"total":190,"additions":78,"deletions":112},"files":[{"sha":"aa6dad6fd133c1623824a910dee613f3f53fbeab","filename":"core/src/main/java/org/syncope/core/init/ActivitiWorkflowLoader.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04979883e34a962b8497cfecd5643d648043c27e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FActivitiWorkflowLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04979883e34a962b8497cfecd5643d648043c27e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FActivitiWorkflowLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FActivitiWorkflowLoader.java?ref=04979883e34a962b8497cfecd5643d648043c27e","patch":"@@ -49,15 +49,15 @@ public void load() {\n                 wfDefinitionStream = getClass().getResourceAsStream(\n                         \"/\" + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE);\n \n-                repositoryService.createDeployment().addInputStream(ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE,\n-                        wfDefinitionStream).deploy();\n+                repositoryService.createDeployment().addInputStream(\n+                        ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, wfDefinitionStream).deploy();\n             } finally {\n                 if (wfDefinitionStream != null) {\n                     try {\n                         wfDefinitionStream.close();\n                     } catch (IOException e) {\n-                        LOG.error(\"While closing input stream for {}\", ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE,\n-                                e);\n+                        LOG.error(\"While closing input stream for {}\",\n+                                ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n                     }\n                 }\n             }"},{"sha":"f108938811133ebe402c7dff094e947254b071d7","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":29,"deletions":14,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04979883e34a962b8497cfecd5643d648043c27e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04979883e34a962b8497cfecd5643d648043c27e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=04979883e34a962b8497cfecd5643d648043c27e","patch":"@@ -59,17 +59,18 @@\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n-@Transactional(rollbackFor = { Throwable.class })\n+@Transactional(rollbackFor = {Throwable.class})\n public class UserDataBinder extends AbstractAttributableDataBinder {\n \n-    private static final String[] IGNORE_USER_PROPERTIES = { \"memberships\", \"attributes\", \"derivedAttributes\",\n-            \"virtualAttributes\", \"resources\" };\n+    private static final String[] IGNORE_USER_PROPERTIES = {\"memberships\", \"attributes\", \"derivedAttributes\",\n+        \"virtualAttributes\", \"resources\"};\n \n     @Autowired\n     private ConnObjectUtil connObjectUtil;\n \n     @Transactional(readOnly = true)\n-    public SyncopeUser getUserFromId(final Long userId) throws NotFoundException, UnauthorizedRoleException {\n+    public SyncopeUser getUserFromId(final Long userId)\n+            throws NotFoundException, UnauthorizedRoleException {\n \n         if (userId == null) {\n             throw new NotFoundException(\"Null user id\");\n@@ -103,7 +104,18 @@ public boolean verifyPassword(final Long userId, final String password)\n     }\n \n     @Transactional(readOnly = true)\n-    public SyncopeUser getUserFromUsername(final String username) throws NotFoundException, UnauthorizedRoleException {\n+    public boolean verifyPassword(final SyncopeUser user, final String password)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        SyncopeUser passwordUser = new SyncopeUser();\n+        passwordUser.setPassword(password, user.getCipherAlgoritm(), 0);\n+\n+        return user.getPassword().equalsIgnoreCase(passwordUser.getPassword());\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public SyncopeUser getUserFromUsername(final String username)\n+            throws NotFoundException, UnauthorizedRoleException {\n \n         if (username == null) {\n             throw new NotFoundException(\"Null username\");\n@@ -129,7 +141,8 @@ private CipherAlgorithm getCipherAlgoritm() {\n         return CipherAlgorithm.valueOf(confDAO.find(\"password.cipher.algorithm\", \"AES\").getValue());\n     }\n \n-    public void create(final SyncopeUser user, final UserTO userTO) throws SyncopeClientCompositeErrorException {\n+    public void create(final SyncopeUser user, final UserTO userTO)\n+            throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n@@ -332,8 +345,8 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n                     propByRes.addAll(PropagationOperation.UPDATE, role.getResourceNames());\n                 }\n \n-                propByRes.merge(fill(membership, membershipMod, AttributableUtil\n-                        .getInstance(AttributableType.MEMBERSHIP), scce));\n+                propByRes.merge(fill(membership, membershipMod,\n+                        AttributableUtil.getInstance(AttributableType.MEMBERSHIP), scce));\n             }\n         }\n \n@@ -363,8 +376,8 @@ public UserTO getUserTO(final SyncopeUser user) {\n         // retrieve virtual values\n         connObjectUtil.retrieveVirAttrValues(user);\n \n-        fillTO(userTO, user.getAttributes(), user.getDerivedAttributes(), user.getVirtualAttributes(), user\n-                .getResources());\n+        fillTO(userTO, user.getAttributes(), user.getDerivedAttributes(), user.getVirtualAttributes(),\n+                user.getResources());\n \n         MembershipTO membershipTO;\n         for (Membership membership : user.getMemberships()) {\n@@ -373,8 +386,8 @@ public UserTO getUserTO(final SyncopeUser user) {\n             membershipTO.setRoleId(membership.getSyncopeRole().getId());\n             membershipTO.setRoleName(membership.getSyncopeRole().getName());\n \n-            fillTO(membershipTO, membership.getAttributes(), membership.getDerivedAttributes(), membership\n-                    .getVirtualAttributes(), membership.getResources());\n+            fillTO(membershipTO, membership.getAttributes(), membership.getDerivedAttributes(), membership.\n+                    getVirtualAttributes(), membership.getResources());\n \n             userTO.addMembership(membershipTO);\n         }\n@@ -383,13 +396,15 @@ public UserTO getUserTO(final SyncopeUser user) {\n     }\n \n     @Transactional(readOnly = true)\n-    public UserTO getUserTO(final String username) throws NotFoundException, UnauthorizedRoleException {\n+    public UserTO getUserTO(final String username)\n+            throws NotFoundException, UnauthorizedRoleException {\n \n         return getUserTO(getUserFromUsername(username));\n     }\n \n     @Transactional(readOnly = true)\n-    public UserTO getUserTO(final Long userId) throws NotFoundException, UnauthorizedRoleException {\n+    public UserTO getUserTO(final Long userId)\n+            throws NotFoundException, UnauthorizedRoleException {\n \n         return getUserTO(getUserFromId(userId));\n     }"},{"sha":"718660f5ffab35cfc521c4220452edff306d444e","filename":"core/src/main/java/org/syncope/core/util/ConnObjectUtil.java","status":"modified","additions":44,"deletions":93,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04979883e34a962b8497cfecd5643d648043c27e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04979883e34a962b8497cfecd5643d648043c27e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java?ref=04979883e34a962b8497cfecd5643d648043c27e","patch":"@@ -22,7 +22,6 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import javassist.NotFoundException;\n@@ -34,26 +33,27 @@\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n-import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.stereotype.Component;\n-import org.syncope.client.mod.AttributeMod;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.AbstractAttributableTO;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.ConnObjectTO;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.UserTO;\n+import org.syncope.client.util.AttributableOperations;\n import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.SyncTask;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.propagation.ConnectorFacadeProxy;\n import org.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.syncope.core.rest.data.UserDataBinder;\n@@ -84,8 +84,47 @@ public class ConnObjectUtil {\n      * @param obj connector object\n      * @return UserTO for the user to be created\n      */\n+    @Transactional(readOnly = true)\n     public UserTO getUserTO(final ConnectorObject obj, final SyncTask syncTask) {\n \n+        UserTO userTO = getUserTOFromConnObject(obj, syncTask);\n+\n+        // 3. if password was not set above, generate a random string\n+        if (StringUtils.isBlank(userTO.getPassword())) {\n+            userTO.setPassword(RandomStringUtils.randomAlphanumeric(16));\n+        }\n+\n+        return userTO;\n+    }\n+\n+    /**\n+     * Build an UserMod out of connector object attributes and schema mapping.\n+     *\n+     * @param userId user to be updated\n+     * @param obj connector object\n+     * @return UserMod for the user to be updated\n+     */\n+    @Transactional(readOnly = true)\n+    public UserMod getUserMod(final Long userId, final ConnectorObject obj, final SyncTask syncTask)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        final SyncopeUser user = userDataBinder.getUserFromId(userId);\n+        final UserTO original = userDataBinder.getUserTO(user);\n+\n+        final UserTO updated = getUserTOFromConnObject(obj, syncTask);\n+        updated.setId(userId);\n+\n+        if (StringUtils.isNotBlank(updated.getPassword())) {\n+            // update password if and only if password has really changed\n+            if (userDataBinder.verifyPassword(user, updated.getPassword())) {\n+                updated.setPassword(null);\n+            }\n+        }\n+\n+        return AttributableOperations.diff(updated, original);\n+    }\n+\n+    private UserTO getUserTOFromConnObject(final ConnectorObject obj, final SyncTask syncTask) {\n         final UserTO userTO = new UserTO();\n \n         // 1. fill with data from connector object\n@@ -182,98 +221,9 @@ public UserTO getUserTO(final ConnectorObject obj, final SyncTask syncTask) {\n             }\n         }\n \n-        // 3. if password was not set above, generate a random string\n-        if (StringUtils.isBlank(userTO.getPassword())) {\n-            userTO.setPassword(RandomStringUtils.randomAlphanumeric(16));\n-        }\n-\n         return userTO;\n     }\n \n-    /**\n-     * Build an UserMod out of connector object attributes and schema mapping.\n-     *\n-     * @param userId user to be updated\n-     * @param obj connector object\n-     * @return UserMod for the user to be updated\n-     */\n-    public UserMod getUserMod(final Long userId, final ConnectorObject obj, final SyncTask syncTask) {\n-\n-        final UserMod userMod = new UserMod();\n-        userMod.setId(userId);\n-\n-        for (SchemaMapping mapping : syncTask.getResource().getMappings()) {\n-            Attribute attribute = obj.getAttributeByName(SchemaMappingUtil.getExtAttrName(mapping));\n-\n-            List<Object> values = attribute == null\n-                    ? Collections.EMPTY_LIST\n-                    : attribute.getValue();\n-\n-            AttributeMod attributeMod;\n-            switch (mapping.getIntMappingType()) {\n-                case SyncopeUserId:\n-                    break;\n-\n-                case Password:\n-                    attribute = obj.getAttributeByName(OperationalAttributes.PASSWORD_NAME);\n-\n-                    if (attribute != null && attribute.getValue() != null && !attribute.getValue().isEmpty()) {\n-\n-                        String password = getPassword(attribute.getValue().get(0));\n-                        // update password if and only if password has really \n-                        // changed\n-                        try {\n-                            if (!userDataBinder.verifyPassword(userId, password)) {\n-\n-                                userMod.setPassword(password);\n-                            }\n-                        } catch (NotFoundException e) {\n-                            LOG.error(\"Could not find user {}\", userId, e);\n-                        } catch (UnauthorizedRoleException e) {\n-                            LOG.error(\"Not allowed to read user {}\", userId, e);\n-                        }\n-                    }\n-                    break;\n-\n-                case Username:\n-                    if (values != null && !values.isEmpty()) {\n-                        userMod.setUsername(values.get(0).toString());\n-                    }\n-                    break;\n-\n-                case UserSchema:\n-                    userMod.addAttributeToBeRemoved(mapping.getIntAttrName());\n-\n-                    attributeMod = new AttributeMod();\n-                    attributeMod.setSchema(mapping.getIntAttrName());\n-                    for (Object value : values) {\n-                        attributeMod.addValueToBeAdded(value.toString());\n-                    }\n-                    userMod.addAttributeToBeUpdated(attributeMod);\n-                    break;\n-\n-                case UserDerivedSchema:\n-                    userMod.addDerivedAttributeToBeAdded(mapping.getIntAttrName());\n-                    break;\n-\n-                case UserVirtualSchema:\n-                    userMod.addVirtualAttributeToBeRemoved(mapping.getIntAttrName());\n-\n-                    attributeMod = new AttributeMod();\n-                    attributeMod.setSchema(mapping.getIntAttrName());\n-                    for (Object value : values) {\n-                        attributeMod.addValueToBeAdded(value.toString());\n-                    }\n-                    userMod.addVirtualAttributeToBeUpdated(attributeMod);\n-                    break;\n-\n-                default:\n-            }\n-        }\n-\n-        return userMod;\n-    }\n-\n     /**\n      * Extract password value from passed value (if instance of GuardedString or GuardedByteArray).\n      *\n@@ -339,7 +289,8 @@ public void retrieveVirAttrValues(final AbstractAttributable owner) {\n         final ConfigurableApplicationContext context = ApplicationContextManager.getApplicationContext();\n         final ConnInstanceLoader connInstanceLoader = context.getBean(ConnInstanceLoader.class);\n \n-        final Map<SchemaMappingUtil.SchemaMappingsWrapper, ConnectorObject> remoteObjects = new HashMap<SchemaMappingUtil.SchemaMappingsWrapper, ConnectorObject>();\n+        final Map<SchemaMappingUtil.SchemaMappingsWrapper, ConnectorObject> remoteObjects =\n+                new HashMap<SchemaMappingUtil.SchemaMappingsWrapper, ConnectorObject>();\n \n         for (ExternalResource resource : owner.getResources()) {\n             LOG.debug(\"Retrieve remote object from '{}'\", resource.getName());"},{"sha":"eaacb0d2d177b32935f4bdb98ebfb38dce49dd8a","filename":"core/src/test/resources/test.csv","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04979883e34a962b8497cfecd5643d648043c27e/core%2Fsrc%2Ftest%2Fresources%2Ftest.csv","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04979883e34a962b8497cfecd5643d648043c27e/core%2Fsrc%2Ftest%2Fresources%2Ftest.csv","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Ftest.csv?ref=04979883e34a962b8497cfecd5643d648043c27e","patch":"@@ -7,4 +7,4 @@ test5,nome5,cognome5,test5@syncope.org,password5,role1,membership1,true,false\n test6,nome6,cognome6,test6@syncope.org,password6,role1,membership1,true,false\n test7,nome7,cognome7,test7@syncope.org,password7,role1,membership1,true,false\n test8,nome8,cognome8,test8@syncope.org,password8,role1,membership1,true,false\n-test9,nome9,cognome9,test9@syncope.org,password9,role1,membership1,true,false\n+test9,nome9,cognome9,test9@syncope.org,password999,role1,membership1,true,false"}]}