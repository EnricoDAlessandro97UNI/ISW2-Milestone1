{"sha":"c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMwMTY0MjZiYzVmMjNiMGY1ZjM2OTg2NmIzYjdhYzc0NDlmMWQ2YTk=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-06-01T13:21:20Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-06-01T13:21:20Z"},"message":"SYNCOPE-1562: Manage tokens for WA GoogleAuth MFA (#189)","tree":{"sha":"8cfaaaac2bf177be669a1830771fd613ce05e912","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8cfaaaac2bf177be669a1830771fd613ce05e912"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe1QDQCRBK7hj4Ov3rIwAAdHIIAKfXeGToIbmFudasljBbRoRj\nznjykLuhlGPKuwaACpiSPs7pLJMJ7HpLY5xQSJJbTgkQYPSEJRhKk4GgvcYb69AP\n1D2rdsnfDyKWiczp2B0h81FzBOs6dwjj52I+o4+Lb/twojZf2ZAg+0EjkqvC1XNL\nP2otD20/jL+SAwuQPED2H+odK5KJmu3XhYBMSNKM1r997jmUFnDP++rK/e34VDwP\nROcBrpI3cB1aMLuMtnndlBt3I6CkXN1/nfXMVj1f5RqQiJvXDmyOh6F4GJ72HqkS\nY7e48eHRU0s9uRdKf0MloWcFymp9LNUDHeIM5RvWCM7VLlDVANtJCeKRprNZ5RY=\n=WRzo\n-----END PGP SIGNATURE-----\n","payload":"tree 8cfaaaac2bf177be669a1830771fd613ce05e912\nparent d288dc15768d8e39ada63eb8dfe91ebd52fd5771\nauthor Misagh Moayyed <mm1844@gmail.com> 1591017680 +0430\ncommitter GitHub <noreply@github.com> 1591017680 +0430\n\nSYNCOPE-1562: Manage tokens for WA GoogleAuth MFA (#189)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"d288dc15768d8e39ada63eb8dfe91ebd52fd5771","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d288dc15768d8e39ada63eb8dfe91ebd52fd5771","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d288dc15768d8e39ada63eb8dfe91ebd52fd5771"}],"stats":{"total":1867,"additions":1860,"deletions":7},"files":[{"sha":"4c355788f0bb4ab4a3a96914f36673a01487e27f","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AuthProfileTO.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthProfileTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthProfileTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthProfileTO.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@XmlRootElement(name = \"authProfile\")\n+@XmlType\n+public class AuthProfileTO extends BaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = -6543425997956703057L;\n+\n+    private final List<GoogleMfaAuthToken> googleMfaAuthTokens = new ArrayList<>();\n+\n+    private String key;\n+\n+    private String owner;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+    @XmlElementWrapper(name = \"googleMfaAuthTokens\")\n+    @XmlElement(name = \"googleMfaAuthTokens\")\n+    @JsonProperty(\"googleMfaAuthTokens\")\n+    public List<GoogleMfaAuthToken> getGoogleMfaAuthTokens() {\n+        return googleMfaAuthTokens;\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+            append(key).\n+            append(owner).\n+            append(googleMfaAuthTokens).\n+            build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        AuthProfileTO other = (AuthProfileTO) obj;\n+        return new EqualsBuilder().\n+            append(key, other.key).\n+            append(owner, other.owner).\n+            append(googleMfaAuthTokens, other.googleMfaAuthTokens).\n+            build();\n+    }\n+\n+    public static class Builder {\n+\n+        private final AuthProfileTO instance = new AuthProfileTO();\n+\n+        public AuthProfileTO.Builder owner(final String owner) {\n+            instance.setOwner(owner);\n+            return this;\n+        }\n+\n+        public AuthProfileTO.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public AuthProfileTO build() {\n+            return instance;\n+        }\n+    }\n+}"},{"sha":"73647c78d99936ee19602db0d64bbd154a28aa59","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -72,6 +72,20 @@ public final class AMEntitlement {\n \n     public static final String SAML2_SP_KEYSTORE_READ = \"SAML2_SP_KEYSTORE_READ\";\n \n+    public static final String GOOGLE_MFA_DELETE_TOKEN = \"GOOGLE_MFA_DELETE_TOKEN\";\n+\n+    public static final String GOOGLE_MFA_SAVE_TOKEN = \"GOOGLE_MFA_SAVE_TOKEN\";\n+\n+    public static final String GOOGLE_MFA_READ_TOKEN = \"GOOGLE_MFA_READ_TOKEN\";\n+\n+    public static final String GOOGLE_MFA_COUNT_TOKEN = \"GOOGLE_MFA_COUNT_TOKEN\";\n+\n+    public static final String AUTH_PROFILE_DELETE = \"AUTH_PROFILE_DELETE\";\n+    \n+    public static final String AUTH_PROFILE_READ = \"AUTH_PROFILE_READ\";\n+\n+    public static final String AUTH_PROFILE_LIST = \"AUTH_PROFILE_LIST\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"5812756fa0d3393cda85f5fc4baf180a70e908b6","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GoogleMfaAuthToken.java","status":"added","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGoogleMfaAuthToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGoogleMfaAuthToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGoogleMfaAuthToken.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.common.lib.types;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+import java.util.Optional;\n+\n+@XmlRootElement(name = \"googleMfaAuthToken\")\n+@XmlType\n+public class GoogleMfaAuthToken implements Serializable {\n+    private static final long serialVersionUID = 2185073386484048953L;\n+\n+    private String key;\n+\n+    private Integer token;\n+\n+    private String owner;\n+\n+    private Date issueDate;\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public Integer getToken() {\n+        return token;\n+    }\n+\n+    public void setToken(final Integer token) {\n+        this.token = token;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+    public Date getIssueDate() {\n+        return Optional.ofNullable(this.issueDate).\n+            map(date -> new Date(date.getTime())).orElse(null);\n+    }\n+\n+    public void setIssueDate(final Date issueDate) {\n+        this.issueDate = Optional.ofNullable(issueDate).\n+            map(date -> new Date(date.getTime())).orElse(null);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder()\n+            .appendSuper(super.hashCode())\n+            .append(key)\n+            .append(token)\n+            .append(owner)\n+            .append(issueDate)\n+            .toHashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        GoogleMfaAuthToken rhs = (GoogleMfaAuthToken) obj;\n+        return new EqualsBuilder()\n+            .appendSuper(super.equals(obj))\n+            .append(this.key, rhs.key)\n+            .append(this.token, rhs.token)\n+            .append(this.owner, rhs.owner)\n+            .append(this.issueDate, rhs.issueDate)\n+            .isEquals();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this)\n+            .append(\"key\", key)\n+            .append(\"token\", token)\n+            .append(\"owner\", owner)\n+            .append(\"issueDate\", issueDate)\n+            .toString();\n+    }\n+    \n+    public static class Builder {\n+\n+        private final GoogleMfaAuthToken instance = new GoogleMfaAuthToken();\n+\n+        public GoogleMfaAuthToken.Builder issueDate(final Date issued) {\n+            instance.setIssueDate(issued);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthToken.Builder token(final Integer token) {\n+            instance.setToken(token);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthToken.Builder owner(final String owner) {\n+            instance.setOwner(owner);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthToken.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthToken build() {\n+            return instance;\n+        }\n+    }\n+}"},{"sha":"a58a3adecb520c5eb7f3a38aeb9e38ca0a2a0b88","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuthProfileService.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import java.util.List;\n+\n+/**\n+ * REST operations for SAML 2.0 SP metadata.\n+ */\n+@Tag(name = \"Auth Profiles\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\")})\n+@Path(\"authProfiles\")\n+public interface AuthProfileService extends JAXRSService {\n+\n+    @GET\n+    @Produces({MediaType.APPLICATION_JSON})\n+    List<AuthProfileTO> list();\n+\n+    @GET\n+    @Path(\"owners/{owner}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    AuthProfileTO findByOwner(@NotNull @PathParam(\"owner\") String owner);\n+\n+    @GET\n+    @Path(\"{key}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    AuthProfileTO findByKey(@NotNull @PathParam(\"key\") String key);\n+\n+    @DELETE\n+    @Path(\"{key}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    Response deleteByKey(@NotNull @PathParam(\"key\") String key);\n+\n+    @DELETE\n+    @Path(\"owners/{owner}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    Response deleteByOwner(@NotNull @PathParam(\"owner\") String owner);\n+\n+}"},{"sha":"9d8525b2f77d8f614706e539dc0e75266a277188","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/GoogleMfaAuthTokenService.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.common.rest.api.service.wa;\n+\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+@Tag(name = \"Google MFA Tokens\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\")})\n+@Path(\"wa/gauth\")\n+public interface GoogleMfaAuthTokenService extends JAXRSService {\n+\n+    @DELETE\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"tokens\")\n+    Response deleteTokensByDate(@NotNull @QueryParam(\"expirationDate\") Date expirationDate);\n+\n+    @DELETE\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"tokens/${owner}/${token}\")\n+    Response deleteToken(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"token\") Integer token);\n+\n+    @DELETE\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"tokens/owners/${owner}\")\n+    Response deleteTokensFor(@NotNull @PathParam(\"owner\") String owner);\n+\n+    @DELETE\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"tokens/${token}\")\n+    Response deleteToken(@NotNull @PathParam(\"token\") Integer token);\n+\n+    @DELETE\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"tokens\")\n+    Response deleteTokens();\n+\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+            description = \"GoogleMfaAuthToken successfully created\", headers = {\n+            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+            @Schema(type = \"string\"),\n+                description = \"UUID generated for the entity created\")})})\n+    @POST\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"tokens\")\n+    Response save(@NotNull GoogleMfaAuthToken token);\n+\n+    @GET\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"tokens/${owner}/${token}\")\n+    GoogleMfaAuthToken findTokenFor(@NotNull @PathParam(\"owner\") String owner,\n+                                    @NotNull @PathParam(\"token\") Integer token);\n+\n+    @GET\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"tokens/owners/${owner}\")\n+    List<GoogleMfaAuthToken> findTokensFor(@NotNull @PathParam(\"owner\") String owner);\n+\n+    @GET\n+    @Path(\"tokens/{key}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    GoogleMfaAuthToken findTokenFor(@NotNull @PathParam(\"key\") String key);\n+\n+    @GET\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"tokens/${owner}/count\")\n+    long countTokensForOwner(@NotNull @PathParam(\"owner\") String owner);\n+\n+    @GET\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"tokens/count\")\n+    long countTokens();\n+}"},{"sha":"d66e6dc6cf6847999e0771b306b5081f8e7b201b","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AuthProfileLogic.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class AuthProfileLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n+    @Autowired\n+    private AuthProfileDAO authProfileDAO;\n+\n+    @Autowired\n+    private AuthProfileDataBinder authProfileDataBinder;\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_PROFILE_DELETE + \"') \")\n+    public void deleteByKey(final String key) {\n+        authProfileDAO.deleteByKey(key);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_PROFILE_DELETE + \"') \")\n+    public void deleteByOwner(final String owner) {\n+        authProfileDAO.deleteByOwner(owner);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_PROFILE_READ + \"') \")\n+    public AuthProfileTO findByOwner(final String owner) {\n+        AuthProfile authProfile = authProfileDAO.findByOwner(owner).orElse(null);\n+        if (authProfile == null) {\n+            throw new NotFoundException(owner + \" not found\");\n+        }\n+        return authProfileDataBinder.getAuthProfileTO(authProfile);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_PROFILE_READ + \"') \")\n+    public AuthProfileTO findByKey(final String key) {\n+        AuthProfile authProfile = authProfileDAO.findByKey(key).orElse(null);\n+        if (authProfile == null) {\n+            throw new NotFoundException(key + \" not found\");\n+        }\n+        return authProfileDataBinder.getAuthProfileTO(authProfile);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_PROFILE_LIST + \"')\")\n+    public List<AuthProfileTO> list() {\n+        return authProfileDAO.findAll().\n+            stream().\n+            map(authProfileDataBinder::getAuthProfileTO).\n+            collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    protected AuthProfileTO resolveReference(final Method method, final Object... args)\n+        throws UnresolvedReferenceException {\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof AuthProfileTO) {\n+                    key = ((AuthProfileTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return findByKey(key);\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"84b10b404a07abf27545d506b7eb10bb69ed0a02","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/GoogleMfaAuthTokenLogic.java","status":"added","additions":213,"deletions":0,"changes":213,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthTokenLogic.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.function.Predicate;\n+\n+@Component\n+public class GoogleMfaAuthTokenLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n+    @Autowired\n+    private AuthProfileDAO authProfileDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private AuthProfileDataBinder authProfileDataBinder;\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_TOKEN + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void delete(final Date expirationDate) {\n+        authProfileDAO.\n+            findAll().\n+            forEach(profile -> removeTokenAndSave(profile,\n+                token -> token.getIssueDate().compareTo(expirationDate) >= 0));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_TOKEN + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void delete(final String owner, final Integer otp) {\n+        authProfileDAO.findByOwner(owner).\n+            ifPresent(profile -> removeTokenAndSave(profile,\n+                token -> token.getToken().equals(otp)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_TOKEN + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void delete(final String owner) {\n+        authProfileDAO.findByOwner(owner).ifPresent(profile -> {\n+            profile.setGoogleMfaAuthTokens(List.of());\n+            authProfileDAO.save(profile);\n+        });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_TOKEN + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void delete(final Integer otp) {\n+        authProfileDAO.findAll().\n+            forEach(profile -> removeTokenAndSave(profile,\n+                token -> token.getToken().equals(otp)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_TOKEN + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void deleteAll() {\n+        authProfileDAO.findAll().\n+            forEach(profile -> {\n+                profile.setGoogleMfaAuthTokens(List.of());\n+                authProfileDAO.save(profile);\n+            });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_SAVE_TOKEN + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public GoogleMfaAuthToken save(final GoogleMfaAuthToken token) {\n+        AuthProfile profile = authProfileDAO.findByOwner(token.getOwner()).\n+            orElseGet(() -> {\n+                final AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n+                authProfile.setOwner(token.getOwner());\n+                return authProfile;\n+            });\n+\n+        if (token.getKey() == null) {\n+            token.setKey(UUID.randomUUID().toString());\n+        }\n+        profile.add(token);\n+        profile = authProfileDAO.save(profile);\n+        return profile.getGoogleMfaAuthTokens().\n+            stream().\n+            filter(t -> t.getToken().equals(token.getToken())).\n+            findFirst().\n+            orElse(null);\n+\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_TOKEN + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public GoogleMfaAuthToken read(final String owner, final Integer otp) {\n+        return authProfileDAO.findByOwner(owner).\n+            stream().\n+            map(AuthProfile::getGoogleMfaAuthTokens).\n+            flatMap(List::stream).\n+            filter(token -> token.getToken().equals(otp)).\n+            findFirst().\n+            orElseThrow(() -> new NotFoundException(\"Could not find token for Owner \" + owner + \" and otp \" + otp));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_TOKEN + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public GoogleMfaAuthToken read(final String key) {\n+        return authProfileDAO.findAll().\n+            stream().\n+            map(AuthProfile::getGoogleMfaAuthTokens).\n+            flatMap(List::stream).\n+            filter(token -> token.getKey().equals(key)).\n+            findFirst().\n+            orElse(null);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_COUNT_TOKEN + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public long countTokensFor(final String owner) {\n+        return authProfileDAO.findByOwner(owner).\n+            stream().\n+            mapToLong(profile -> profile.getGoogleMfaAuthTokens().size()).\n+            sum();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_COUNT_TOKEN + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public long countAll() {\n+        return authProfileDAO.findAll().\n+            stream().\n+            mapToLong(profile -> profile.getGoogleMfaAuthTokens().size()).\n+            sum();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_TOKEN + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<GoogleMfaAuthToken> findTokensFor(final String owner) {\n+        return authProfileDAO.findByOwner(owner).\n+            map(profile -> new ArrayList<>(profile.getGoogleMfaAuthTokens())).\n+            orElse(new ArrayList<>(0));\n+    }\n+\n+    private void removeTokenAndSave(final AuthProfile profile, final Predicate<GoogleMfaAuthToken> criteria) {\n+        List<GoogleMfaAuthToken> tokens = profile.getGoogleMfaAuthTokens();\n+        boolean removed = tokens.removeIf(criteria);\n+        if (removed) {\n+            profile.setGoogleMfaAuthTokens(tokens);\n+            authProfileDAO.save(profile);\n+        }\n+    }\n+\n+    @Override\n+    protected AuthProfileTO resolveReference(final Method method, final Object... args)\n+        throws UnresolvedReferenceException {\n+        String key = null;\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof AuthProfileTO) {\n+                    key = ((AuthProfileTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return authProfileDAO.findByKey(key).\n+                    map(authProfileDataBinder::getAuthProfileTO).\n+                    orElseThrow();\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"87a0461e7709e16d08624a12f752172f026dfa47","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPMetadataLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -101,7 +101,7 @@ protected SAML2IdPMetadataTO resolveReference(final Method method, final Object.\n                 if (args[i] instanceof String) {\n                     appliesTo = (String) args[i];\n                 } else if (args[i] instanceof SAML2IdPMetadataTO) {\n-                    appliesTo = ((SAML2IdPMetadataTO) args[i]).getKey();\n+                    appliesTo = ((SAML2IdPMetadataTO) args[i]).getAppliesTo();\n                 }\n             }\n         }"},{"sha":"48c9a366d7edaaa703dd25d647ea53e5524eb722","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPKeystoreLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPKeystoreLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPKeystoreLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPKeystoreLogic.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -95,7 +95,7 @@ protected SAML2SPKeystoreTO resolveReference(final Method method, final Object..\n                 if (args[i] instanceof String) {\n                     name = (String) args[i];\n                 } else if (args[i] instanceof SAML2SPKeystoreTO) {\n-                    name = ((SAML2SPKeystoreTO) args[i]).getKey();\n+                    name = ((SAML2SPKeystoreTO) args[i]).getOwner();\n                 }\n             }\n         }"},{"sha":"5894ae4104ec6b06fbb0863311e3ce6810ea92d0","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPMetadataLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPMetadataLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPMetadataLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPMetadataLogic.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -95,7 +95,7 @@ protected SAML2SPMetadataTO resolveReference(final Method method, final Object..\n                 if (args[i] instanceof String) {\n                     name = (String) args[i];\n                 } else if (args[i] instanceof SAML2SPMetadataTO) {\n-                    name = ((SAML2SPMetadataTO) args[i]).getKey();\n+                    name = ((SAML2SPMetadataTO) args[i]).getOwner();\n                 }\n             }\n         }"},{"sha":"180d600e62ec4f7dcaef16ca16cab6e3d5770300","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AuthProfileServiceImpl.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthProfileServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthProfileServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthProfileServiceImpl.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.common.rest.api.service.AuthProfileService;\n+import org.apache.syncope.core.logic.AuthProfileLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.util.List;\n+\n+@Service\n+public class AuthProfileServiceImpl extends AbstractServiceImpl implements AuthProfileService {\n+\n+    @Autowired\n+    private AuthProfileLogic logic;\n+\n+    @Override\n+    public Response deleteByKey(final String key) {\n+        logic.deleteByKey(key);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response deleteByOwner(final String owner) {\n+        logic.deleteByOwner(owner);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public AuthProfileTO findByOwner(final String owner) {\n+        return logic.findByOwner(owner);\n+    }\n+\n+    @Override\n+    public AuthProfileTO findByKey(final String key) {\n+        return logic.findByKey(key);\n+    }\n+\n+    @Override\n+    public List<AuthProfileTO> list() {\n+        return logic.list();\n+    }\n+}"},{"sha":"96a0411e9ab1a757dd8e4d017920df74433b24a4","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/GoogleMfaAuthTokenServiceImpl.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.rest.cxf.service.wa;\n+\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n+import org.apache.syncope.core.logic.GoogleMfaAuthTokenLogic;\n+import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.net.URI;\n+import java.util.Date;\n+import java.util.List;\n+\n+@Service\n+public class GoogleMfaAuthTokenServiceImpl extends AbstractServiceImpl implements GoogleMfaAuthTokenService {\n+    @Autowired\n+    private GoogleMfaAuthTokenLogic logic;\n+\n+    @Override\n+    public Response deleteTokensByDate(final Date expirationDate) {\n+        logic.delete(expirationDate);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response deleteToken(final String owner, final Integer otp) {\n+        logic.delete(owner, otp);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response deleteTokensFor(final String owner) {\n+        logic.delete(owner);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response deleteToken(final Integer otp) {\n+        logic.delete(otp);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response deleteTokens() {\n+        logic.deleteAll();\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response save(final GoogleMfaAuthToken tokenTO) {\n+        final GoogleMfaAuthToken token = logic.save(tokenTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(token.getKey()).build();\n+        return Response.created(location).\n+            header(RESTHeaders.RESOURCE_KEY, token.getKey()).\n+            build();\n+    }\n+\n+    @Override\n+    public GoogleMfaAuthToken findTokenFor(final String owner, final Integer otp) {\n+        return logic.read(owner, otp);\n+    }\n+\n+    @Override\n+    public List<GoogleMfaAuthToken> findTokensFor(final String owner) {\n+        return logic.findTokensFor(owner);\n+    }\n+\n+    @Override\n+    public GoogleMfaAuthToken findTokenFor(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public long countTokensForOwner(final String owner) {\n+        return logic.countTokensFor(owner);\n+    }\n+\n+    @Override\n+    public long countTokens() {\n+        return logic.countAll();\n+    }\n+}"},{"sha":"a464884117d4c3cdf6878f9e10687f6cd3f7eca1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/AuthProfileDAO.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthProfileDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthProfileDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthProfileDAO.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.persistence.api.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.DAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public interface AuthProfileDAO extends DAO<AuthProfile> {\n+\n+    List<AuthProfile> findAll();\n+\n+    Optional<AuthProfile> findByOwner(String owner);\n+\n+    Optional<AuthProfile> findByKey(String key);\n+\n+    AuthProfile save(AuthProfile profile);\n+\n+    void deleteByKey(String key);\n+\n+    void deleteByOwner(String owner);\n+\n+    void delete(AuthProfile authProfile);\n+}"},{"sha":"88613d9d0ab2424a2f0a3826396e6db57719d983","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthProfile.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+\n+import java.util.List;\n+\n+public interface AuthProfile extends Entity {\n+\n+    String getOwner();\n+\n+    void setOwner(String owner);\n+    \n+    List<GoogleMfaAuthToken> getGoogleMfaAuthTokens();\n+\n+    void setGoogleMfaAuthTokens(List<GoogleMfaAuthToken> tokens);\n+\n+    void add(GoogleMfaAuthToken token);\n+}"},{"sha":"d688a85cb3e5be6e5d3c6b829f7506b3aac278e8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAAuthProfileDAO.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthProfileDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthProfileDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthProfileDAO.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthProfile;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Repository\n+public class JPAAuthProfileDAO extends AbstractDAO<AuthProfile> implements AuthProfileDAO {\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<AuthProfile> findAll() {\n+        TypedQuery<AuthProfile> query = entityManager().createQuery(\n+            \"SELECT e FROM \" + JPAAuthProfile.class.getSimpleName() + \" e \",\n+            AuthProfile.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<AuthProfile> findByOwner(final String owner) {\n+        try {\n+            TypedQuery<AuthProfile> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAAuthProfile.class.getSimpleName()\n+                    + \" e WHERE e.owner=:owner\", AuthProfile.class);\n+            query.setParameter(\"owner\", owner);\n+            return Optional.ofNullable(query.getSingleResult());\n+        } catch (final NoResultException e) {\n+            LOG.debug(\"No auth profile could be found for owner {}\", owner);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<AuthProfile> findByKey(final String key) {\n+        try {\n+            return Optional.ofNullable(entityManager().find(JPAAuthProfile.class, key));\n+        } catch (final NoResultException e) {\n+            LOG.debug(\"No auth profile could be found for {}\", key);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public AuthProfile save(final AuthProfile profile) {\n+        return entityManager().merge(profile);\n+    }\n+\n+    @Override\n+    public void deleteByKey(final String key) {\n+        findByKey(key).ifPresent(this::delete);\n+    }\n+\n+    @Override\n+    public void deleteByOwner(final String owner) {\n+        findByOwner(owner).ifPresent(this::delete);\n+    }\n+\n+    @Override\n+    public void delete(final AuthProfile authProfile) {\n+        entityManager().remove(authProfile);\n+    }\n+}"},{"sha":"131709d076eabb674921f25041e699e6e869a1f6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -58,6 +58,7 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n@@ -112,6 +113,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthProfile;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRP;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SP;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPKeystore;\n@@ -333,6 +335,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPASAML2SPMetadata();\n         } else if (reference.equals(SAML2SPKeystore.class)) {\n             result = (E) new JPASAML2SPKeystore();\n+        } else if (reference.equals(AuthProfile.class)) {\n+            result = (E) new JPAAuthProfile();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"03e95867c88b3834e7d392035ed939e065643bfc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthProfile.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Entity\n+@Table(name = JPAAuthProfile.TABLE, uniqueConstraints =\n+    @UniqueConstraint(columnNames = { \"owner\" }))\n+public class JPAAuthProfile extends AbstractGeneratedKeyEntity implements AuthProfile {\n+\n+    public static final String TABLE = \"AuthProfile\";\n+\n+    private static final long serialVersionUID = 57352617217394093L;\n+\n+    @Lob\n+    private String googleMfaAuthTokens;\n+\n+    @Column(nullable = false)\n+    private String owner;\n+\n+    @Override\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+    @Override\n+    public List<GoogleMfaAuthToken> getGoogleMfaAuthTokens() {\n+        return googleMfaAuthTokens == null\n+            ? new ArrayList<>(0)\n+            : POJOHelper.deserialize(googleMfaAuthTokens, new TypeReference<List<GoogleMfaAuthToken>>() {\n+        });\n+    }\n+\n+    @Override\n+    public void setGoogleMfaAuthTokens(final List<GoogleMfaAuthToken> tokens) {\n+        this.googleMfaAuthTokens = POJOHelper.serialize(tokens);\n+    }\n+\n+    @Override\n+    public void add(final GoogleMfaAuthToken token) {\n+        checkType(token, GoogleMfaAuthToken.class);\n+        final List<GoogleMfaAuthToken> tokens = getGoogleMfaAuthTokens();\n+        tokens.add(token);\n+        setGoogleMfaAuthTokens(tokens);\n+    }\n+}"},{"sha":"ec30f2c23327ce225349f0dfc761f81b12252d4a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthProfileTest.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@Transactional(\"Master\")\n+public class AuthProfileTest extends AbstractTest {\n+\n+    @Autowired\n+    private AuthProfileDAO authProfileDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Test\n+    public void googleMfaToken() {\n+        String id = UUID.randomUUID().toString();\n+\n+        createAuthProfileWithToken(id, 123456);\n+\n+        Optional<AuthProfile> result = authProfileDAO.findByOwner(id);\n+        assertTrue(result.isPresent());\n+\n+        assertFalse(authProfileDAO.findAll().isEmpty());\n+\n+        AuthProfile authProfile = result.get();\n+        result = authProfileDAO.findByKey(authProfile.getKey());\n+        assertTrue(result.isPresent());\n+\n+        authProfile.setOwner(\"SyncopeCreate-New\");\n+        authProfile.getGoogleMfaAuthTokens().clear();\n+        authProfileDAO.save(authProfile);\n+\n+        assertFalse(authProfileDAO.findByOwner(id).isPresent());\n+    }\n+\n+    private AuthProfile createAuthProfileWithToken(final String owner, final Integer otp) {\n+        AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n+        profile.setOwner(owner);\n+        GoogleMfaAuthToken token = new GoogleMfaAuthToken.Builder()\n+            .issueDate(new Date())\n+            .token(otp)\n+            .owner(owner)\n+            .build();\n+        profile.add(token);\n+        return authProfileDAO.save(profile);\n+    }\n+}"},{"sha":"e102405cf11745b79af0a0ada52cfdddc7151793","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AuthProfileDataBinder.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuthProfileDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuthProfileDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuthProfileDataBinder.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+\n+public interface AuthProfileDataBinder {\n+\n+    AuthProfileTO getAuthProfileTO(AuthProfile authProfile);\n+\n+    AuthProfile create(AuthProfileTO authProfileTO);\n+}"},{"sha":"0a78d8653813d4b207d4821036ac9c33e6cf77ec","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuthProfileDataBinderImpl.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AuthProfileDataBinderImpl implements AuthProfileDataBinder {\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public AuthProfileTO getAuthProfileTO(final AuthProfile authProfile) {\n+        AuthProfileTO authProfileTO = new AuthProfileTO();\n+        authProfileTO.setKey(authProfile.getKey());\n+        authProfileTO.setOwner(authProfile.getOwner());\n+        authProfileTO.getGoogleMfaAuthTokens().addAll(authProfile.getGoogleMfaAuthTokens());\n+        return authProfileTO;\n+    }\n+\n+    @Override\n+    public AuthProfile create(final AuthProfileTO authProfileTO) {\n+        AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n+        authProfile.setOwner(authProfileTO.getOwner());\n+        authProfile.setGoogleMfaAuthTokens(authProfileTO.getGoogleMfaAuthTokens());\n+        return authProfile;\n+    }\n+}"},{"sha":"23c899a2df86a40c35c0fc5b60441a5f7e3a42f8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -105,13 +105,15 @@\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.syncope.common.rest.api.service.ApplicationService;\n import org.apache.syncope.common.rest.api.service.AuthModuleService;\n+import org.apache.syncope.common.rest.api.service.AuthProfileService;\n import org.apache.syncope.common.rest.api.service.CamelRouteService;\n import org.apache.syncope.common.rest.api.service.ClientAppService;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreConfService;\n+import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n import org.apache.syncope.common.rest.api.service.SAML2SPMetadataConfService;\n import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n@@ -331,6 +333,10 @@ public abstract class AbstractITCase {\n \n     protected static ClientAppService clientAppService;\n \n+    protected static GoogleMfaAuthTokenService googleMfaAuthTokenService;\n+\n+    protected static AuthProfileService authProfileService;\n+\n     @BeforeAll\n     public static void securitySetup() {\n         try (InputStream propStream = Encryptor.class.getResourceAsStream(\"/security.properties\")) {\n@@ -408,6 +414,8 @@ public static void restSetup() {\n         saml2IdPMetadataConfService = adminClient.getService(SAML2IdPMetadataConfService.class);\n         saml2SPKeystoreService = adminClient.getService(SAML2SPKeystoreService.class);\n         saml2SPKeystoreConfService = adminClient.getService(SAML2SPKeystoreConfService.class);\n+        googleMfaAuthTokenService = adminClient.getService(GoogleMfaAuthTokenService.class);\n+        authProfileService = adminClient.getService(AuthProfileService.class);\n     }\n \n     @Autowired"},{"sha":"fa20cac99b2dcb3ff842c977c30c8957862f8aaf","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GoogleMfaAuthTokenITCase.java","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthTokenITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthTokenITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthTokenITCase.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.fit.core;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.Executable;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.security.SecureRandom;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class GoogleMfaAuthTokenITCase extends AbstractITCase {\n+    private static final SecureRandom SECURE_RANDOM = new SecureRandom();\n+\n+    private static GoogleMfaAuthToken createGoogleMfaAuthToken() {\n+        Integer token = SECURE_RANDOM.ints(100_000, 999_999)\n+            .findFirst()\n+            .getAsInt();\n+        return new GoogleMfaAuthToken.Builder()\n+            .owner(UUID.randomUUID().toString())\n+            .token(token)\n+            .issueDate(new Date())\n+            .build();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+        googleMfaAuthTokenService.deleteTokens();\n+    }\n+\n+    @Test\n+    public void create() {\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        assertDoesNotThrow(new Executable() {\n+            @Override\n+            public void execute() throws Throwable {\n+                Response response = googleMfaAuthTokenService.save(token);\n+                if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                    Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+                    if (ex != null) {\n+                        throw ex;\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void count() {\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        googleMfaAuthTokenService.save(token);\n+        assertEquals(1, googleMfaAuthTokenService.countTokens());\n+        assertEquals(1, googleMfaAuthTokenService.countTokensForOwner(token.getOwner()));\n+    }\n+\n+    @Test\n+    public void verifyProfile() {\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        googleMfaAuthTokenService.save(token);\n+        final List<AuthProfileTO> results = authProfileService.list();\n+        assertFalse(results.isEmpty());\n+        AuthProfileTO profileTO = results.get(0);\n+        assertNotNull(authProfileService.findByKey(profileTO.getKey()));\n+        assertNotNull(authProfileService.findByOwner(profileTO.getOwner()));\n+        Response response = authProfileService.deleteByOwner(token.getOwner());\n+        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n+        assertThrows(SyncopeClientException.class, () -> authProfileService.findByOwner(token.getOwner()));\n+    }\n+\n+    @Test\n+    public void deleteByToken() {\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        Response response = googleMfaAuthTokenService.save(token);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        assertNotNull(key);\n+        response = googleMfaAuthTokenService.deleteToken(token.getToken());\n+        assertEquals(response.getStatusInfo().getStatusCode(), Response.Status.NO_CONTENT.getStatusCode());\n+        assertTrue(googleMfaAuthTokenService.findTokensFor(token.getOwner()).isEmpty());\n+    }\n+\n+    @Test\n+    public void deleteByOwner() {\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        Response response = googleMfaAuthTokenService.save(token);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        assertNotNull(key);\n+        response = googleMfaAuthTokenService.deleteTokensFor(token.getOwner());\n+        assertEquals(response.getStatusInfo().getStatusCode(), Response.Status.NO_CONTENT.getStatusCode());\n+        assertTrue(googleMfaAuthTokenService.findTokensFor(token.getOwner()).isEmpty());\n+    }\n+\n+    @Test\n+    public void deleteByOwnerAndToken() {\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        Response response = googleMfaAuthTokenService.save(token);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        assertNotNull(key);\n+        response = googleMfaAuthTokenService.deleteToken(token.getOwner(), token.getToken());\n+        assertEquals(response.getStatusInfo().getStatusCode(), Response.Status.NO_CONTENT.getStatusCode());\n+        assertTrue(googleMfaAuthTokenService.findTokensFor(token.getOwner()).isEmpty());\n+    }\n+\n+    @Test\n+    public void deleteByDate() {\n+        Date dateTime = Date.from(LocalDateTime.now().minusDays(1).atZone(ZoneId.systemDefault()).toInstant());\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        final Response response = googleMfaAuthTokenService.deleteTokensByDate(dateTime);\n+        assertEquals(response.getStatusInfo().getStatusCode(), Response.Status.NO_CONTENT.getStatusCode());\n+        assertTrue(googleMfaAuthTokenService.findTokensFor(token.getOwner()).isEmpty());\n+        assertEquals(0, googleMfaAuthTokenService.countTokensForOwner(token.getOwner()));\n+    }\n+}"},{"sha":"fd261505c72ffad48cb264fff7a190a3ce3563a6","filename":"pom.xml","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -1494,6 +1494,11 @@ under the License.\n         <artifactId>cas-server-core-services</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-core-authentication-api</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-core-services-registry</artifactId>\n@@ -1649,6 +1654,16 @@ under the License.\n         <artifactId>cas-server-support-gauth</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-gauth-core-mfa</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-otp-mfa-core</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-support-oidc-services</artifactId>"},{"sha":"16e71264133ac1d0ccb6779c8757a1a3482229c4","filename":"wa/starter/pom.xml","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -114,6 +114,10 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-core-web</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-core-authentication-api</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-core-webflow</artifactId>\n@@ -210,6 +214,14 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-gauth</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-gauth-core-mfa</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-otp-mfa-core</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-webapp-config</artifactId>"},{"sha":"b5c69949be79285eab068241cfe79a06170ee701","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAConfiguration.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -20,6 +20,7 @@\n \n import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.otp.repository.token.OneTimeTokenRepository;\n import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n import org.apereo.cas.services.ServiceRegistryListener;\n import org.apereo.cas.support.pac4j.authentication.DelegatedClientFactoryCustomizer;\n@@ -33,6 +34,7 @@\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apache.syncope.wa.starter.gauth.token.SyncopeWAGoogleMfaAuthTokenRepository;\n import org.apache.syncope.wa.starter.mapping.AccessMapFor;\n import org.apache.syncope.wa.starter.mapping.AccessMapper;\n import org.apache.syncope.wa.starter.mapping.AttrReleaseMapFor;\n@@ -167,6 +169,13 @@ public DelegatedClientFactoryCustomizer<Client> delegatedClientCustomizer(final\n         return new SyncopeWASAML2ClientCustomizer(restClient);\n     }\n \n+    @Bean\n+    @Autowired\n+    public OneTimeTokenRepository oneTimeTokenAuthenticatorTokenRepository(final WARestClient restClient) {\n+        return new SyncopeWAGoogleMfaAuthTokenRepository(restClient,\n+            casProperties.getAuthn().getMfa().getGauth().getTimeStepSize());\n+    }\n+\n     @Bean\n     public KeymasterStart keymasterStart() {\n         return new KeymasterStart(NetworkService.Type.WA);"},{"sha":"efd6be18b5bbf99a22e54c09573ecb1710f3c939","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/token/SyncopeWAGoogleMfaAuthTokenRepository.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepository.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.gauth.token;\n+\n+import org.apereo.cas.authentication.OneTimeToken;\n+import org.apereo.cas.gauth.token.GoogleAuthenticatorToken;\n+import org.apereo.cas.otp.repository.token.BaseOneTimeTokenRepository;\n+\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.util.Date;\n+\n+public class SyncopeWAGoogleMfaAuthTokenRepository extends BaseOneTimeTokenRepository {\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAGoogleMfaAuthTokenRepository.class);\n+\n+    private final WARestClient waRestClient;\n+\n+    private final long expireTokensInSeconds;\n+\n+    public SyncopeWAGoogleMfaAuthTokenRepository(final WARestClient waRestClient,\n+                                                 final long expireTokensInSeconds) {\n+        this.waRestClient = waRestClient;\n+        this.expireTokensInSeconds = expireTokensInSeconds;\n+    }\n+\n+    @Override\n+    protected void cleanInternal() {\n+        Date expirationDate = Date.from(LocalDateTime.\n+            now(ZoneOffset.UTC).\n+            minusSeconds(this.expireTokensInSeconds).\n+            toInstant(ZoneOffset.UTC));\n+        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthTokenService.class);\n+        tokenService.deleteTokensByDate(expirationDate);\n+    }\n+\n+    @Override\n+    public void store(final OneTimeToken token) {\n+        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthTokenService.class);\n+        GoogleMfaAuthToken tokenTO = new GoogleMfaAuthToken.Builder()\n+            .owner(token.getUserId())\n+            .token(token.getToken())\n+            .issueDate(Date.from(token.getIssuedDateTime().toInstant(ZoneOffset.UTC)))\n+            .build();\n+        tokenService.save(tokenTO);\n+    }\n+\n+    @Override\n+    public OneTimeToken get(final String username, final Integer otp) {\n+        try {\n+            GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n+                getService(GoogleMfaAuthTokenService.class);\n+            GoogleMfaAuthToken tokenTO = tokenService.findTokenFor(username, otp);\n+            GoogleAuthenticatorToken token = new GoogleAuthenticatorToken(tokenTO.getToken(), tokenTO.getOwner());\n+            LocalDateTime dateTime = tokenTO.getIssueDate().toInstant().atZone(ZoneOffset.UTC).toLocalDateTime();\n+            token.setIssuedDateTime(dateTime);\n+            return token;\n+        } catch (final Exception e) {\n+            LOG.debug(\"Unable to fetch token {} for user {}\", otp, username);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void remove(final String username, final Integer otp) {\n+        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthTokenService.class);\n+        Response response = tokenService.deleteToken(username, otp);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.NO_CONTENT.getStatusCode()) {\n+            throw new RuntimeException(\"Unable to remove token \" + otp + \" for user \" + username);\n+        }\n+    }\n+\n+    @Override\n+    public void remove(final String username) {\n+        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthTokenService.class);\n+        Response response = tokenService.deleteTokensFor(username);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.NO_CONTENT.getStatusCode()) {\n+            throw new RuntimeException(\"Unable to remove tokens for user \" + username);\n+        }\n+    }\n+\n+    @Override\n+    public void remove(final Integer otp) {\n+        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthTokenService.class);\n+        Response response = tokenService.deleteToken(otp);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.NO_CONTENT.getStatusCode()) {\n+            throw new RuntimeException(\"Unable to remove token \" + otp);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAll() {\n+        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthTokenService.class);\n+        Response response = tokenService.deleteTokens();\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.NO_CONTENT.getStatusCode()) {\n+            throw new RuntimeException(\"Unable to remove tokens\");\n+        }\n+    }\n+\n+    @Override\n+    public long count(final String username) {\n+        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthTokenService.class);\n+        return tokenService.countTokensForOwner(username);\n+    }\n+\n+    @Override\n+    public long count() {\n+        GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthTokenService.class);\n+        return tokenService.countTokens();\n+    }\n+}"},{"sha":"de35ba596940e22b7b0254865fe3903a8d7ea693","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeCoreTestingServer.java","status":"modified","additions":90,"deletions":4,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -20,15 +20,24 @@\n \n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.List;\n import java.util.Objects;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.validation.constraints.NotNull;\n import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.core.Response;\n+\n import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;\n import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationListener;\n@@ -52,10 +61,13 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n                 // 1. start (mocked) Core as embedded CXF\n                 JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();\n                 sf.setAddress(ADDRESS);\n-                sf.setResourceClasses(WAClientAppService.class);\n+                sf.setResourceClasses(WAClientAppService.class, GoogleMfaAuthTokenService.class);\n                 sf.setResourceProvider(\n                         WAClientAppService.class,\n                         new SingletonResourceProvider(new StubWAClientAppService(), true));\n+                sf.setResourceProvider(\n+                    GoogleMfaAuthTokenService.class,\n+                    new SingletonResourceProvider(new StubGoogleMfaAuthTokenService(), true));\n                 sf.setProviders(List.of(new JacksonJsonProvider()));\n                 sf.create();\n \n@@ -68,7 +80,81 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n         }\n     }\n \n-    public class StubWAClientAppService implements WAClientAppService {\n+    public static class StubGoogleMfaAuthTokenService implements GoogleMfaAuthTokenService {\n+        private final List<GoogleMfaAuthToken> tokens = new ArrayList<>();\n+\n+        @Override\n+        public Response deleteTokensByDate(@NotNull final Date expirationDate) {\n+            tokens.removeIf(token -> token.getIssueDate().compareTo(expirationDate) >= 0);\n+            return Response.noContent().build();\n+        }\n+\n+        @Override\n+        public Response deleteToken(@NotNull final String owner, @NotNull final Integer token) {\n+            tokens.removeIf(to -> to.getToken().equals(token) && to.getOwner().equalsIgnoreCase(owner));\n+            return Response.noContent().build();\n+        }\n+\n+        @Override\n+        public Response deleteTokensFor(@NotNull final String owner) {\n+            tokens.removeIf(to -> to.getOwner().equalsIgnoreCase(owner));\n+            return Response.noContent().build();\n+        }\n+\n+        @Override\n+        public Response deleteToken(@NotNull final Integer token) {\n+            tokens.removeIf(to -> to.getToken().equals(token));\n+            return Response.noContent().build();\n+        }\n+\n+        @Override\n+        public Response deleteTokens() {\n+            tokens.clear();\n+            return Response.noContent().build();\n+        }\n+\n+        @Override\n+        public Response save(@NotNull final GoogleMfaAuthToken tokenTO) {\n+            tokenTO.setKey(UUID.randomUUID().toString());\n+            tokens.add(tokenTO);\n+            return Response.ok().build();\n+        }\n+\n+        @Override\n+        public GoogleMfaAuthToken findTokenFor(@NotNull final String owner, @NotNull final Integer token) {\n+            return tokens.stream()\n+                .filter(to -> to.getToken().equals(token) && to.getOwner().equalsIgnoreCase(owner))\n+                .findFirst().get();\n+        }\n+\n+        @Override\n+        public List<GoogleMfaAuthToken> findTokensFor(@NotNull final String user) {\n+            return tokens.stream()\n+                .filter(to -> to.getOwner().equalsIgnoreCase(user))\n+                .collect(Collectors.toList());\n+        }\n+\n+        @Override\n+        public GoogleMfaAuthToken findTokenFor(@NotNull final String key) {\n+            return tokens.stream()\n+                .filter(to -> to.getKey().equalsIgnoreCase(key))\n+                .findFirst().get();\n+        }\n+\n+        @Override\n+        public long countTokensForOwner(@NotNull final String user) {\n+            return tokens.stream()\n+                .filter(to -> to.getOwner().equalsIgnoreCase(user))\n+                .count();\n+        }\n+\n+        @Override\n+        public long countTokens() {\n+            return tokens.size();\n+        }\n+    }\n+\n+    public static class StubWAClientAppService implements WAClientAppService {\n \n         @Override\n         public List<WAClientApp> list() {\n@@ -78,13 +164,13 @@ public List<WAClientApp> list() {\n         @Override\n         public WAClientApp read(final Long clientAppId, final ClientAppType type) {\n             return APPS.stream().filter(app -> Objects.equals(clientAppId, app.getClientAppTO().getClientAppId())).\n-                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n+                findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n         }\n \n         @Override\n         public WAClientApp read(final String name, final ClientAppType type) {\n             return APPS.stream().filter(app -> Objects.equals(name, app.getClientAppTO().getName())).\n-                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n+                findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n         }\n     }\n }"},{"sha":"0edb6fcd4d9a87d605ec09583121589050f8d128","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/gauth/token/SyncopeWAGoogleMfaAuthTokenRepositoryTest.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepositoryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c016426bc5f23b0f5f369866b3b7ac7449f1d6a9/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepositoryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepositoryTest.java?ref=c016426bc5f23b0f5f369866b3b7ac7449f1d6a9","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.gauth.token;\n+\n+import org.apereo.cas.gauth.token.GoogleAuthenticatorToken;\n+import org.apereo.cas.otp.repository.token.OneTimeTokenRepository;\n+\n+import org.apache.syncope.wa.starter.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class SyncopeWAGoogleMfaAuthTokenRepositoryTest extends AbstractTest {\n+    @Autowired\n+    private OneTimeTokenRepository tokenRepository;\n+\n+    @Test\n+    public void verifyOps() {\n+        tokenRepository.removeAll();\n+        GoogleAuthenticatorToken token = new GoogleAuthenticatorToken(123456, \"SyncopeWA\");\n+        tokenRepository.store(token);\n+        assertEquals(1, tokenRepository.count(token.getUserId()));\n+        assertEquals(1, tokenRepository.count());\n+    }\n+}"}]}