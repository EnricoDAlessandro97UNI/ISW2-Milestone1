{"sha":"80cbe283ebd5858a00a6d50ddd035f2ada72d415","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgwY2JlMjgzZWJkNTg1OGEwMGE2ZDUwZGRkMDM1ZjJhZGE3MmQ0MTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-11-22T12:05:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-11-22T12:09:37Z"},"message":"[SYNCOPE-1499] Support was missing for SAML2 IdP and OIDC extensions","tree":{"sha":"0ad38427ddc033ca0775a936439eef4a31a53220","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0ad38427ddc033ca0775a936439eef4a31a53220"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/80cbe283ebd5858a00a6d50ddd035f2ada72d415","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80cbe283ebd5858a00a6d50ddd035f2ada72d415","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/80cbe283ebd5858a00a6d50ddd035f2ada72d415","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80cbe283ebd5858a00a6d50ddd035f2ada72d415/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"dcf989528636f0adb0854355102fa85c10280118","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dcf989528636f0adb0854355102fa85c10280118","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dcf989528636f0adb0854355102fa85c10280118"}],"stats":{"total":243,"additions":55,"deletions":188},"files":[{"sha":"870f47de11d9d6b1b3d649ea15f0bace05581706","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/InboundMatcher.java","status":"modified","additions":33,"deletions":18,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cbe283ebd5858a00a6d50ddd035f2ada72d415/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cbe283ebd5858a00a6d50ddd035f2ada72d415/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java?ref=80cbe283ebd5858a00a6d50ddd035f2ada72d415","patch":"@@ -37,9 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n@@ -58,6 +56,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n@@ -125,7 +124,7 @@ public Optional<PullMatch> match(\n             return Optional.empty();\n         }\n \n-        Stream<MappingItem> mapItems = Stream.concat(\n+        Stream<Item> mapItems = Stream.concat(\n                 provision.get().getMapping().getItems().stream(),\n                 virSchemaDAO.findByProvision(provision.get()).stream().map(VirSchema::asLinkingMappingItem));\n \n@@ -189,10 +188,25 @@ public boolean handle(final ConnectorObject connectorObject) {\n     }\n \n     public List<PullMatch> matchByConnObjectKeyValue(\n-            final MappingItem connObjectKeyItem,\n+            final Item connObjectKeyItem,\n             final String connObjectKeyValue,\n             final Provision provision) {\n \n+        return matchByConnObjectKeyValue(\n+                connObjectKeyItem,\n+                connObjectKeyValue,\n+                provision.getAnyType().getKind(),\n+                provision.isIgnoreCaseMatch(),\n+                provision.getResource());\n+    }\n+\n+    public List<PullMatch> matchByConnObjectKeyValue(\n+            final Item connObjectKeyItem,\n+            final String connObjectKeyValue,\n+            final AnyTypeKind anyTypeKind,\n+            final boolean ignoreCaseMatch,\n+            final ExternalResource resource) {\n+\n         String finalConnObjectKeyValue = connObjectKeyValue;\n         for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem)) {\n             List<Object> output = transformer.beforePull(\n@@ -208,14 +222,13 @@ public List<PullMatch> matchByConnObjectKeyValue(\n \n         IntAttrName intAttrName;\n         try {\n-            intAttrName = intAttrNameParser.parse(\n-                    connObjectKeyItem.getIntAttrName(), provision.getAnyType().getKind());\n+            intAttrName = intAttrNameParser.parse(connObjectKeyItem.getIntAttrName(), anyTypeKind);\n         } catch (ParseException e) {\n             LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", connObjectKeyItem.getIntAttrName(), e);\n             return noMatchResult;\n         }\n \n-        AnyUtils anyUtils = anyUtilsFactory.getInstance(provision.getAnyType().getKind());\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n \n         List<Any<?>> anys = new ArrayList<>();\n \n@@ -226,7 +239,7 @@ public List<PullMatch> matchByConnObjectKeyValue(\n                     break;\n \n                 case \"username\":\n-                    if (provision.getAnyType().getKind() == AnyTypeKind.USER && provision.isIgnoreCaseMatch()) {\n+                    if (anyTypeKind == AnyTypeKind.USER && ignoreCaseMatch) {\n                         AnyCond cond = new AnyCond(AttributeCond.Type.IEQ);\n                         cond.setSchema(\"username\");\n                         cond.setExpression(connObjectKeyValue);\n@@ -237,7 +250,7 @@ public List<PullMatch> matchByConnObjectKeyValue(\n                     break;\n \n                 case \"name\":\n-                    if (provision.getAnyType().getKind() == AnyTypeKind.GROUP && provision.isIgnoreCaseMatch()) {\n+                    if (anyTypeKind == AnyTypeKind.GROUP && ignoreCaseMatch) {\n                         AnyCond cond = new AnyCond(AttributeCond.Type.IEQ);\n                         cond.setSchema(\"name\");\n                         cond.setExpression(connObjectKeyValue);\n@@ -246,7 +259,7 @@ public List<PullMatch> matchByConnObjectKeyValue(\n                         Optional.ofNullable(groupDAO.findByName(connObjectKeyValue)).ifPresent(anys::add);\n                     }\n \n-                    if (provision.getAnyType().getKind() == AnyTypeKind.ANY_OBJECT && provision.isIgnoreCaseMatch()) {\n+                    if (anyTypeKind == AnyTypeKind.ANY_OBJECT && ignoreCaseMatch) {\n                         AnyCond cond = new AnyCond(AttributeCond.Type.IEQ);\n                         cond.setSchema(\"name\");\n                         cond.setExpression(connObjectKeyValue);\n@@ -273,17 +286,17 @@ public List<PullMatch> matchByConnObjectKeyValue(\n \n                     if (intAttrName.getSchema().isUniqueConstraint()) {\n                         anyUtils.dao().findByPlainAttrUniqueValue((PlainSchema) intAttrName.getSchema(),\n-                                (PlainAttrUniqueValue) value, provision.isIgnoreCaseMatch()).\n+                                (PlainAttrUniqueValue) value, ignoreCaseMatch).\n                                 ifPresent(anys::add);\n                     } else {\n                         anys.addAll(anyUtils.dao().findByPlainAttrValue((PlainSchema) intAttrName.getSchema(),\n-                                value, provision.isIgnoreCaseMatch()));\n+                                value, ignoreCaseMatch));\n                     }\n                     break;\n \n                 case DERIVED:\n                     anys.addAll(anyUtils.dao().findByDerAttrValue((DerSchema) intAttrName.getSchema(),\n-                            connObjectKeyValue, provision.isIgnoreCaseMatch()));\n+                            connObjectKeyValue, ignoreCaseMatch));\n                     break;\n \n                 default:\n@@ -294,9 +307,11 @@ public List<PullMatch> matchByConnObjectKeyValue(\n                 map(any -> new PullMatch(MatchType.ANY, any)).\n                 collect(Collectors.toList());\n \n-        userDAO.findLinkedAccount(provision.getResource(), finalConnObjectKeyValue).\n-                map(account -> new PullMatch(MatchType.LINKED_ACCOUNT, account)).\n-                ifPresent(result::add);\n+        if (resource != null) {\n+            userDAO.findLinkedAccount(resource, finalConnObjectKeyValue).\n+                    map(account -> new PullMatch(MatchType.LINKED_ACCOUNT, account)).\n+                    ifPresent(result::add);\n+        }\n \n         return result.isEmpty() ? noMatchResult : result;\n     }\n@@ -348,7 +363,7 @@ public List<PullMatch> match(final SyncDelta syncDelta, final Provision provisio\n             } else {\n                 String connObjectKeyValue = null;\n \n-                Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n+                Optional<? extends Item> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n                 if (connObjectKeyItem.isPresent()) {\n                     Attribute connObjectKeyAttr = syncDelta.getObject().\n                             getAttributeByName(connObjectKeyItem.get().getExtAttrName());\n@@ -388,7 +403,7 @@ public List<PullMatch> match(final SyncDelta syncDelta, final Provision provisio\n     public List<Realm> match(final SyncDelta syncDelta, final OrgUnit orgUnit) {\n         String connObjectKey = null;\n \n-        Optional<? extends OrgUnitItem> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n+        Optional<? extends Item> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n         if (connObjectKeyItem.isPresent()) {\n             Attribute connObjectKeyAttr = syncDelta.getObject().\n                     getAttributeByName(connObjectKeyItem.get().getExtAttrName());"},{"sha":"0b88dacf0cc8e4b9d19031875abebb0f736e5127","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDCUserManager.java","status":"modified","additions":11,"deletions":85,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cbe283ebd5858a00a6d50ddd035f2ada72d415/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cbe283ebd5858a00a6d50ddd035f2ada72d415/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java?ref=80cbe283ebd5858a00a6d50ddd035f2ada72d415","patch":"@@ -20,7 +20,6 @@\n \n import java.text.ParseException;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -36,23 +35,16 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.OIDCProviderActions;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.java.pushpull.InboundMatcher;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n@@ -69,13 +61,13 @@ public class OIDCUserManager {\n     private static final Logger LOG = LoggerFactory.getLogger(OIDCUserManager.class);\n \n     @Autowired\n-    private UserDAO userDAO;\n+    private InboundMatcher inboundMatcher;\n \n     @Autowired\n-    private IntAttrNameParser intAttrNameParser;\n+    private UserDAO userDAO;\n \n     @Autowired\n-    private EntityFactory entityFactory;\n+    private IntAttrNameParser intAttrNameParser;\n \n     @Autowired\n     private TemplateUtils templateUtils;\n@@ -87,81 +79,15 @@ public class OIDCUserManager {\n     private UserDataBinder binder;\n \n     @Transactional(readOnly = true)\n-    public List<String> findMatchingUser(final String keyValue, final OIDCProviderItem connObjectKeyItem) {\n-        List<String> result = new ArrayList<>();\n-\n-        String transformed = keyValue;\n-        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem)) {\n-            List<Object> output = transformer.beforePull(\n-                    null,\n-                    null,\n-                    Collections.<Object>singletonList(transformed));\n-            if (output != null && !output.isEmpty()) {\n-                transformed = output.get(0).toString();\n-            }\n-        }\n-\n-        IntAttrName intAttrName;\n-        try {\n-            intAttrName = intAttrNameParser.parse(connObjectKeyItem.getIntAttrName(), AnyTypeKind.USER);\n-        } catch (ParseException e) {\n-            LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", connObjectKeyItem.getIntAttrName(), e);\n-            return result;\n-        }\n-\n-        if (intAttrName.getField() != null) {\n-            switch (intAttrName.getField()) {\n-                case \"key\":\n-                    User byKey = userDAO.find(transformed);\n-                    if (byKey != null) {\n-                        result.add(byKey.getUsername());\n-                    }\n-                    break;\n-\n-                case \"username\":\n-                    User byUsername = userDAO.findByUsername(transformed);\n-                    if (byUsername != null) {\n-                        result.add(byUsername.getUsername());\n-                    }\n-                    break;\n-\n-                default:\n-            }\n-        } else if (intAttrName.getSchemaType() != null) {\n-            switch (intAttrName.getSchemaType()) {\n-                case PLAIN:\n-                    PlainAttrValue value = entityFactory.newEntity(UPlainAttrValue.class);\n-\n-                    if (intAttrName.getSchemaType() == SchemaType.PLAIN) {\n-                        value.setStringValue(transformed);\n-                    } else {\n-                        try {\n-                            value.parseValue((PlainSchema) intAttrName.getSchema(), transformed);\n-                        } catch (ParsingValidationException e) {\n-                            LOG.error(\"While parsing provided key value {}\", transformed, e);\n-                            value.setStringValue(transformed);\n-                        }\n-                    }\n-\n-                    result.addAll(userDAO.findByPlainAttrValue(\n-                            (PlainSchema) intAttrName.getSchema(), value, false).stream().\n-                            map(User::getUsername).collect(Collectors.toList()));\n-                    break;\n-\n-                case DERIVED:\n-                    result.addAll(userDAO.findByDerAttrValue(\n-                            (DerSchema) intAttrName.getSchema(), transformed, false).stream().\n-                            map(User::getUsername).collect(Collectors.toList()));\n-                    break;\n-\n-                default:\n-            }\n-        }\n-\n-        return result;\n+    public List<String> findMatchingUser(final String connObjectKeyValue, final OIDCProviderItem connObjectKeyItem) {\n+        return inboundMatcher.matchByConnObjectKeyValue(\n+                connObjectKeyItem, connObjectKeyValue, AnyTypeKind.USER, false, null).stream().\n+                filter(match -> match.getAny() != null).\n+                map(match -> match.getAny().getKey()).\n+                collect(Collectors.toList());\n     }\n \n-    private static List<OIDCProviderActions> getActions(final OIDCProvider op) {\n+    private List<OIDCProviderActions> getActions(final OIDCProvider op) {\n         List<OIDCProviderActions> actions = new ArrayList<>();\n         op.getActions().forEach(impl -> {\n             try {"},{"sha":"8fe49c091617cafe6b58c8008e9d16f2ce3f8c8e","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"modified","additions":11,"deletions":85,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80cbe283ebd5858a00a6d50ddd035f2ada72d415/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80cbe283ebd5858a00a6d50ddd035f2ada72d415/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=80cbe283ebd5858a00a6d50ddd035f2ada72d415","patch":"@@ -36,24 +36,17 @@\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.SAML2IdPActions;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.java.pushpull.InboundMatcher;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n@@ -72,6 +65,9 @@ public class SAML2UserManager {\n     @Autowired\n     private SAML2IdPDAO idpDAO;\n \n+    @Autowired\n+    private InboundMatcher inboundMatcher;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -81,9 +77,6 @@ public class SAML2UserManager {\n     @Autowired\n     private IntAttrNameParser intAttrNameParser;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n     @Autowired\n     private TemplateUtils templateUtils;\n \n@@ -94,85 +87,18 @@ public class SAML2UserManager {\n     private UserDataBinder binder;\n \n     @Transactional(readOnly = true)\n-    public List<String> findMatchingUser(final String keyValue, final String idpKey) {\n-        List<String> result = new ArrayList<>();\n-\n+    public List<String> findMatchingUser(final String connObjectKeyValue, final String idpKey) {\n         SAML2IdP idp = idpDAO.find(idpKey);\n         if (idp == null) {\n             LOG.warn(\"Invalid IdP: {}\", idpKey);\n-            return result;\n-        }\n-\n-        String transformed = keyValue;\n-        for (ItemTransformer transformer : MappingUtils.getItemTransformers(idp.getConnObjectKeyItem().get())) {\n-            List<Object> output = transformer.beforePull(\n-                    null,\n-                    null,\n-                    Collections.<Object>singletonList(transformed));\n-            if (output != null && !output.isEmpty()) {\n-                transformed = output.get(0).toString();\n-            }\n-        }\n-\n-        IntAttrName intAttrName;\n-        try {\n-            intAttrName = intAttrNameParser.parse(idp.getConnObjectKeyItem().get().getIntAttrName(), AnyTypeKind.USER);\n-        } catch (ParseException e) {\n-            LOG.error(\"Invalid intAttrName '{}' specified, ignoring\",\n-                    idp.getConnObjectKeyItem().get().getIntAttrName(), e);\n-            return result;\n-        }\n-\n-        if (intAttrName.getField() != null) {\n-            switch (intAttrName.getField()) {\n-                case \"key\":\n-                    User byKey = userDAO.find(transformed);\n-                    if (byKey != null) {\n-                        result.add(byKey.getUsername());\n-                    }\n-                    break;\n-\n-                case \"username\":\n-                    User byUsername = userDAO.findByUsername(transformed);\n-                    if (byUsername != null) {\n-                        result.add(byUsername.getUsername());\n-                    }\n-                    break;\n-\n-                default:\n-            }\n-        } else if (intAttrName.getSchemaType() != null) {\n-            switch (intAttrName.getSchemaType()) {\n-                case PLAIN:\n-                    PlainAttrValue value = entityFactory.newEntity(UPlainAttrValue.class);\n-\n-                    if (intAttrName.getSchemaType() == SchemaType.PLAIN) {\n-                        value.setStringValue(transformed);\n-                    } else {\n-                        try {\n-                            value.parseValue((PlainSchema) intAttrName.getSchema(), transformed);\n-                        } catch (ParsingValidationException e) {\n-                            LOG.error(\"While parsing provided key value {}\", transformed, e);\n-                            value.setStringValue(transformed);\n-                        }\n-                    }\n-\n-                    result.addAll(userDAO.findByPlainAttrValue(\n-                            (PlainSchema) intAttrName.getSchema(), value, false).stream().\n-                            map(User::getUsername).collect(Collectors.toList()));\n-                    break;\n-\n-                case DERIVED:\n-                    result.addAll(userDAO.findByDerAttrValue(\n-                            (DerSchema) intAttrName.getSchema(), transformed, false).stream().\n-                            map(User::getUsername).collect(Collectors.toList()));\n-                    break;\n-\n-                default:\n-            }\n+            return Collections.emptyList();\n         }\n \n-        return result;\n+        return inboundMatcher.matchByConnObjectKeyValue(\n+                idp.getConnObjectKeyItem().get(), connObjectKeyValue, AnyTypeKind.USER, false, null).stream().\n+                filter(match -> match.getAny() != null).\n+                map(match -> match.getAny().getKey()).\n+                collect(Collectors.toList());\n     }\n \n     private List<SAML2IdPActions> getActions(final SAML2IdPEntity idp) {"}]}