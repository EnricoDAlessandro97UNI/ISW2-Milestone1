{"sha":"7771420d7dfa988a888e1dafb3bba69a49179c65","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc3NzE0MjBkN2RmYTk4OGE4ODhlMWRhZmIzYmJhNjlhNDkxNzljNjU=","commit":{"author":{"name":"Colm O Heigeartaigh","email":"coheigea@apache.org","date":"2014-07-02T16:50:43Z"},"committer":{"name":"Colm O Heigeartaigh","email":"coheigea@apache.org","date":"2014-07-02T16:50:43Z"},"message":"[SYNCOPE-313] - Added integration tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1607419 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e52a3f1973a2e6a370f2ca70079652a1e6101cec","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e52a3f1973a2e6a370f2ca70079652a1e6101cec"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7771420d7dfa988a888e1dafb3bba69a49179c65","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7771420d7dfa988a888e1dafb3bba69a49179c65","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7771420d7dfa988a888e1dafb3bba69a49179c65","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7771420d7dfa988a888e1dafb3bba69a49179c65/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"eed265e8c96836228c19247f2e8cbd918ec22dee","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eed265e8c96836228c19247f2e8cbd918ec22dee","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eed265e8c96836228c19247f2e8cbd918ec22dee"}],"stats":{"total":148,"additions":148,"deletions":0},"files":[{"sha":"3662aead4ce569b933aa39f344c4e194c085cdd4","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7771420d7dfa988a888e1dafb3bba69a49179c65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7771420d7dfa988a888e1dafb3bba69a49179c65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=7771420d7dfa988a888e1dafb3bba69a49179c65","patch":"@@ -36,20 +36,26 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+\n import javax.ws.rs.core.Response;\n+\n import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.mod.StatusMod;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.services.NotificationService;\n import org.apache.syncope.common.services.TaskService;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.reqres.BulkAction;\n import org.apache.syncope.common.wrap.JobClass;\n+import org.apache.syncope.common.to.ConnInstanceTO;\n+import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.NotificationTO;\n import org.apache.syncope.common.to.NotificationTaskTO;\n import org.apache.syncope.common.to.PropagationTaskTO;\n import org.apache.syncope.common.to.ReportExecTO;\n+import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.wrap.SyncActionClass;\n@@ -60,6 +66,8 @@\n import org.apache.syncope.common.reqres.PagedResult;\n import org.apache.syncope.common.to.PushTaskTO;\n import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.CipherAlgorithm;\n+import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.MatchingRule;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n@@ -69,8 +77,13 @@\n import org.apache.syncope.common.types.UnmatchingRule;\n import org.apache.syncope.common.wrap.PushActionClass;\n import org.apache.syncope.core.sync.TestSyncRule;\n+import org.apache.syncope.core.sync.impl.DBPasswordSyncActions;\n+import org.apache.syncope.core.sync.impl.LDAPPasswordSyncActions;\n import org.apache.syncope.core.sync.impl.SyncJob;\n+import org.apache.syncope.core.util.Encryptor;\n import org.apache.syncope.core.workflow.ActivitiDetector;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.Name;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -1084,4 +1097,139 @@ public TaskExecTO call() throws Exception {\n             return test.execSyncTask(taskId, maxWaitSeconds, dryRun);\n         }\n     }\n+    \n+    @Test\n+    public void issueSYNCOPE313DB() throws Exception {\n+        // 1. create user in DB\n+        UserTO user = UserTestITCase.getUniqueSampleTO(\"syncope313-db@syncope.apache.org\");\n+        user.setPassword(\"security\");\n+        user.getResources().add(RESOURCE_NAME_TESTDB);\n+        user = createUser(user);\n+        assertNotNull(user);\n+        assertFalse(user.getResources().isEmpty());\n+\n+        // 2. Check that the DB resource has the correct password\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        String value = jdbcTemplate.queryForObject(\n+                \"SELECT PASSWORD FROM test WHERE ID=?\", String.class, user.getUsername());\n+        assertEquals(Encryptor.getInstance().encode(\"security\", CipherAlgorithm.SHA1), value.toUpperCase());\n+\n+        // 3. Update the password in the DB\n+        String newPassword = Encryptor.getInstance().encode(\"new-security\", CipherAlgorithm.SHA1);\n+        jdbcTemplate.execute(\n+            \"UPDATE test set PASSWORD='\" + newPassword + \"' where ID='\" + user.getUsername() + \"'\");\n+\n+        // 4. Sync the user from the resource\n+        SyncTaskTO syncTask = new SyncTaskTO();\n+        syncTask.setName(\"DB Sync Task\");\n+        syncTask.setPerformCreate(true);\n+        syncTask.setPerformUpdate(true);\n+        syncTask.setFullReconciliation(true);\n+        syncTask.setResource(RESOURCE_NAME_TESTDB);\n+        syncTask.getActionsClassNames().add(DBPasswordSyncActions.class.getName());\n+        Response taskResponse = taskService.create(syncTask);\n+        \n+        SyncTaskTO actual = getObject(taskResponse.getLocation(), TaskService.class, SyncTaskTO.class);\n+        assertNotNull(actual);\n+        \n+        syncTask = taskService.read(actual.getId());\n+        assertNotNull(syncTask);\n+        assertEquals(actual.getId(), syncTask.getId());\n+        assertEquals(actual.getJobClassName(), syncTask.getJobClassName());\n+        \n+        TaskExecTO execution = execSyncTask(syncTask.getId(), 50, false);\n+        final String status = execution.getStatus();\n+        assertNotNull(status);\n+        assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n+\n+        // 5. Test the sync'd user\n+        UserTO updatedUser = userService.read(user.getId());\n+        assertEquals(newPassword, updatedUser.getPassword());\n+        \n+        // 6. Delete SyncTask + user\n+        taskService.delete(syncTask.getId());\n+        deleteUser(user.getId());\n+    }\n+    \n+    // @Ignore'd for now as it is causing a failure in the 'reconcileFromLDAP' test\n+    @Test\n+    @org.junit.Ignore\n+    public void issueSYNCOPE313LDAP() throws Exception {\n+        // 1. create user in LDAP\n+        UserTO user = UserTestITCase.getUniqueSampleTO(\"syncope313-ldap@syncope.apache.org\");\n+        user.setPassword(\"security\");\n+        user.getResources().add(RESOURCE_NAME_LDAP);\n+        user = createUser(user);\n+        assertNotNull(user);\n+        assertFalse(user.getResources().isEmpty());\n+        \n+        // 2. request to change password only on Syncope and not on LDAP\n+        UserMod userMod = new UserMod();\n+        userMod.setId(user.getId());\n+        userMod.setPassword(\"new-security\");\n+        StatusMod pwdPropRequest = new StatusMod();\n+        pwdPropRequest.setOnSyncope(true);\n+        pwdPropRequest.getResourceNames().clear();\n+        userMod.setPwdPropRequest(pwdPropRequest);\n+        updateUser(userMod);\n+        \n+        // 3. Check that the Syncope user now has the changed password\n+        UserTO updatedUser = userService.read(user.getId());\n+        String encodedNewPassword = \n+            Encryptor.getInstance().encode(\"new-security\", CipherAlgorithm.SHA1);\n+        assertEquals(encodedNewPassword, updatedUser.getPassword());\n+\n+        // 4. Check that the LDAP resource has the old password\n+        ConnObjectTO connObject = \n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, user.getId());\n+        \n+        assertNotNull(getLdapRemoteObject(\n+                connObject.getAttrMap().get(Name.NAME).getValues().get(0),\n+                \"security\",\n+                connObject.getAttrMap().get(Name.NAME).getValues().get(0)));\n+        \n+        // 5. Update the LDAP Connector to retrieve passwords\n+        ResourceTO ldapResource = resourceService.read(RESOURCE_NAME_LDAP);\n+        ConnInstanceTO resourceConnector = connectorService.read(ldapResource.getConnectorId());\n+        ConnConfProperty property = \n+            resourceConnector.getConfigurationMap().get(\"retrievePasswordsWithSearch\");\n+        property.getValues().clear();\n+        property.getValues().add(Boolean.TRUE);\n+        connectorService.update(ldapResource.getConnectorId(), resourceConnector);\n+        \n+        // 6. Sync the user from the resource\n+        SyncTaskTO syncTask = new SyncTaskTO();\n+        syncTask.setName(\"LDAP Sync Task\");\n+        syncTask.setPerformCreate(true);\n+        syncTask.setPerformUpdate(true);\n+        syncTask.setFullReconciliation(true);\n+        syncTask.setResource(RESOURCE_NAME_LDAP);\n+        syncTask.getActionsClassNames().add(LDAPPasswordSyncActions.class.getName());\n+        Response taskResponse = taskService.create(syncTask);\n+        \n+        SyncTaskTO actual = getObject(taskResponse.getLocation(), TaskService.class, SyncTaskTO.class);\n+        assertNotNull(actual);\n+        \n+        syncTask = taskService.read(actual.getId());\n+        assertNotNull(syncTask);\n+        assertEquals(actual.getId(), syncTask.getId());\n+        assertEquals(actual.getJobClassName(), syncTask.getJobClassName());\n+        \n+        TaskExecTO execution = execSyncTask(syncTask.getId(), 50, false);\n+        final String status = execution.getStatus();\n+        assertNotNull(status);\n+        assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n+\n+        // 7. Test the sync'd user\n+        String syncedPassword = Encryptor.getInstance().encode(\"security\", CipherAlgorithm.SHA1);\n+        updatedUser = userService.read(user.getId());\n+        assertEquals(syncedPassword, updatedUser.getPassword());\n+        \n+        // 8. Delete SyncTask + user + reset the connector\n+        taskService.delete(syncTask.getId());\n+        property.getValues().clear();\n+        property.getValues().add(Boolean.FALSE);\n+        connectorService.update(ldapResource.getConnectorId(), resourceConnector);\n+        deleteUser(updatedUser.getId());\n+    }\n }"}]}