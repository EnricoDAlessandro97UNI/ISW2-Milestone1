{"sha":"92b8519b44e7bf76ea69eb3b38b35b8c28c3b550","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkyYjg1MTliNDRlN2JmNzZlYTY5ZWIzYjM4YjM1YjhjMjhjM2I1NTA=","commit":{"author":{"name":"Dmitriy Brashevets","email":"dmitriy.brashevets@united-security-providers.ch","date":"2019-10-09T09:25:39Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2019-10-10T08:50:38Z"},"message":"[SYNCOPE-1502]: find anytos in single query\n\n- AnyTO objects are searched by keys retrieved from the search view using a single SQL query that contains IN condition\n- replacement of multiple OR-realm condition in the resulted SQL query that is executed to search entities in search views with IN clause.","tree":{"sha":"195caabe1e692c602c2785c3ca982f3a0139a865","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/195caabe1e692c602c2785c3ca982f3a0139a865"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550/comments","author":null,"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5d2e3e4b2b687fa6a7316ee5b7fddb57772fb251","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5d2e3e4b2b687fa6a7316ee5b7fddb57772fb251","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5d2e3e4b2b687fa6a7316ee5b7fddb57772fb251"}],"stats":{"total":85,"additions":52,"deletions":33},"files":[{"sha":"fb888eb2f277a82564309fc0b9ae03c5e7bb7e50","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=92b8519b44e7bf76ea69eb3b38b35b8c28c3b550","patch":"@@ -37,6 +37,8 @@\n \n     String findKey(String name);\n \n+    List<A> findByKeys(List<String> keys);\n+\n     Date findLastChange(String key);\n \n     A authFind(String key);"},{"sha":"fd3da0c9c96295d39bf0b5adf327a15a6fc1bbbd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=92b8519b44e7bf76ea69eb3b38b35b8c28c3b550","patch":"@@ -31,6 +31,8 @@\n import java.util.regex.Pattern;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n+import javax.persistence.TypedQuery;\n+\n import org.apache.commons.jexl3.parser.Parser;\n import org.apache.commons.jexl3.parser.ParserConstants;\n import org.apache.commons.jexl3.parser.Token;\n@@ -150,6 +152,16 @@ protected Date findLastChange(final String key, final String table) {\n \n     protected abstract void securityChecks(A any);\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<A> findByKeys(List<String> keys) {\n+        Class<A> entityClass = anyUtils().anyClass();\n+        TypedQuery<A> query = entityManager()\n+                .createQuery(\"SELECT e FROM \" + entityClass.getSimpleName() + \" e WHERE e.id IN (:keys)\", entityClass);\n+        query.setParameter(\"keys\", keys);\n+        return query.getResultList();\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public A authFind(final String key) {"},{"sha":"d1677e14734bb4d6e60a8c67c3f4cedb8f4bddef","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":26,"deletions":19,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=92b8519b44e7bf76ea69eb3b38b35b8c28c3b550","patch":"@@ -21,8 +21,10 @@\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n-import java.util.List;\n import java.util.Optional;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.validation.ValidationException;\n@@ -298,26 +300,31 @@ protected String check(final MemberCond cond) {\n     }\n \n     protected <T extends Any<?>> List<T> buildResult(final List<Object> raw, final AnyTypeKind kind) {\n-        List<T> result = new ArrayList<>();\n+        List<String> orderedAnyKeys = extractSortedAnyKeys(raw);\n+        return constructSortedAnyTOsBySortedKeys(findAnyTOs(kind, orderedAnyKeys), orderedAnyKeys, kind);\n+    }\n \n-        raw.stream().map(anyKey -> anyKey instanceof Object[]\n+    private List<String> extractSortedAnyKeys(List<Object> raw) {\n+        return raw.stream().map(anyKey -> anyKey instanceof Object[]\n                 ? (String) ((Object[]) anyKey)[0]\n-                : ((String) anyKey)).\n-                forEachOrdered(actualKey -> {\n-                    @SuppressWarnings(\"unchecked\")\n-                    T any = kind == AnyTypeKind.USER\n-                            ? (T) userDAO.find(actualKey)\n-                            : kind == AnyTypeKind.GROUP\n-                                    ? (T) groupDAO.find(actualKey)\n-                                    : (T) anyObjectDAO.find(actualKey);\n-                    if (any == null) {\n-                        LOG.error(\"Could not find {} with id {}, even if returned by native query\", kind, actualKey);\n-                    } else if (!result.contains(any)) {\n-                        result.add(any);\n-                    }\n-                });\n-\n-        return result;\n+                : ((String) anyKey))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <T extends Any<?>> List<T> findAnyTOs(AnyTypeKind kind, List<String> orderedAnyKeys) {\n+        return new ArrayList<>((List<T>) anyUtilsFactory.getInstance(kind).dao().findByKeys(orderedAnyKeys));\n+    }\n+\n+    private <T extends Any<?>> List<T> constructSortedAnyTOsBySortedKeys(List<T> anyTOs,\n+            List<String> sortedAnyKeys, AnyTypeKind kind) {\n+        Map<String, T> anyMap = anyTOs.stream().collect(Collectors.toMap(T::getKey, anyTO -> anyTO));\n+        return sortedAnyKeys.stream().map(key -> {\n+            if (anyMap.get(key) == null) {\n+                LOG.error(\"Could not find {} with id {}, even if returned by native query\", kind, key);\n+            }\n+            return anyMap.get(key);\n+        }).filter(Objects::nonNull).collect(Collectors.toList());\n     }\n \n     @Override"},{"sha":"e3644aa97fedc7ef5996daec2a01c828ec4f9551","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/92b8519b44e7bf76ea69eb3b38b35b8c28c3b550/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=92b8519b44e7bf76ea69eb3b38b35b8c28c3b550","patch":"@@ -96,24 +96,22 @@ private Pair<String, Set<String>> getAdminRealmsFilter(\n                     map(Entity::getKey).collect(Collectors.toSet()));\n         }\n \n+        List<String> realmKeyArgs = getRealmKeySqlArgsAndFillParameters(parameters, realmKeys);\n+\n         StringBuilder adminRealmFilter = new StringBuilder(\"u.any_id IN (\").\n-                append(\"SELECT any_id FROM \").append(svs.field().name).\n-                append(\" WHERE realm_id IN (SELECT id AS realm_id FROM Realm\");\n+                append(\"SELECT any_id FROM \").append(svs.field().name)\n+                .append(\" WHERE realm_id IN (\")\n+                .append(StringUtils.join(realmKeyArgs, \", \"))\n+                .append(\"))\");\n+        return Pair.of(adminRealmFilter.toString(), dynRealmKeys);\n+    }\n \n-        boolean firstRealm = true;\n+    private List<String> getRealmKeySqlArgsAndFillParameters(List<Object> parameters, Set<String> realmKeys) {\n+        List<String> realmKeyArgs = new ArrayList<>();\n         for (String realmKey : realmKeys) {\n-            if (firstRealm) {\n-                adminRealmFilter.append(\" WHERE\");\n-                firstRealm = false;\n-            } else {\n-                adminRealmFilter.append(\" OR\");\n-            }\n-            adminRealmFilter.append(\" id=?\").append(setParameter(parameters, realmKey));\n+            realmKeyArgs.add(\"?\" + setParameter(parameters, realmKey));\n         }\n-\n-        adminRealmFilter.append(\"))\");\n-\n-        return Pair.of(adminRealmFilter.toString(), dynRealmKeys);\n+        return realmKeyArgs;\n     }\n \n     SearchSupport buildSearchSupport(final AnyTypeKind kind) {"}]}