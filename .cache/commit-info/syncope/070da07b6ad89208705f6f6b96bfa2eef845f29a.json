{"sha":"070da07b6ad89208705f6f6b96bfa2eef845f29a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA3MGRhMDdiNmFkODkyMDg3MDVmNmY2Yjk2YmZhMmVlZjg0NWYyOWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-14T15:21:34Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-14T15:21:34Z"},"message":"Non-functional formatting commit\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1300589 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1cb90111c1f430b200a419143693cefe0350db3d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1cb90111c1f430b200a419143693cefe0350db3d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/070da07b6ad89208705f6f6b96bfa2eef845f29a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/070da07b6ad89208705f6f6b96bfa2eef845f29a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/070da07b6ad89208705f6f6b96bfa2eef845f29a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/070da07b6ad89208705f6f6b96bfa2eef845f29a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9"}],"stats":{"total":133,"additions":44,"deletions":89},"files":[{"sha":"49106250aa91531188f9543247ebec0399e59144","filename":"client/src/main/java/org/syncope/client/AbstractBaseBean.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/070da07b6ad89208705f6f6b96bfa2eef845f29a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/070da07b6ad89208705f6f6b96bfa2eef845f29a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FAbstractBaseBean.java?ref=070da07b6ad89208705f6f6b96bfa2eef845f29a","patch":"@@ -40,7 +40,6 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return ReflectionToStringBuilder.toString(this,\n-                ToStringStyle.MULTI_LINE_STYLE);\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n     }\n }"},{"sha":"93b09ea5cce2681fa58ba591fd73966aaa42325a","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/070da07b6ad89208705f6f6b96bfa2eef845f29a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/070da07b6ad89208705f6f6b96bfa2eef845f29a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=070da07b6ad89208705f6f6b96bfa2eef845f29a","patch":"@@ -26,6 +26,9 @@ public enum SyncopeClientExceptionType {\n     DataIntegrityViolation(\n     \"Syncope.DataIntegrityViolation\",\n     \"Syncope.DataIntegrityViolation.name\"),\n+    ExistingResource(\n+    \"Syncope.ExistingResource\",\n+    \"Syncope.ExistingResource.name\"),\n     GenericPersistence(\n     \"Syncope.GenericPersistence\",\n     \"Syncope.GenericPersistence.cause\"),\n@@ -125,9 +128,6 @@ public enum SyncopeClientExceptionType {\n     RequiredValuesMissing(\n     \"Syncope.RequiredValuesMissing\",\n     \"Syncope.RequiredValuesMissing.attributeName\"),\n-    ResourceExist(\n-    \"Syncope.ResourceExist\",\n-    \"Syncope.ResourceExist.name\"),\n     Scheduling(\n     \"Syncope.Scheduling\",\n     \"Syncope.Scheduling.message\"),"},{"sha":"c988a96a0560af8122ec640ee58043a266ce8250","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":40,"deletions":84,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/070da07b6ad89208705f6f6b96bfa2eef845f29a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/070da07b6ad89208705f6f6b96bfa2eef845f29a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=070da07b6ad89208705f6f6b96bfa2eef845f29a","patch":"@@ -81,28 +81,23 @@ public class ConnInstanceController extends AbstractController {\n     private ConnInstanceLoader connLoader;\n \n     @PreAuthorize(\"hasRole('CONNECTOR_CREATE')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/create\")\n-    public ConnInstanceTO create(\n-            final HttpServletResponse response,\n+    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n+    public ConnInstanceTO create(final HttpServletResponse response,\n             @RequestBody final ConnInstanceTO connectorTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n-        LOG.debug(\"ConnInstance create called with configuration {}\",\n-                connectorTO);\n+        LOG.debug(\"ConnInstance create called with configuration {}\", connectorTO);\n \n         ConnInstance connInstance = binder.getConnInstance(connectorTO);\n \n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n         } catch (Throwable t) {\n             SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n             SyncopeClientException invalidConnInstance =\n-                    new SyncopeClientException(\n-                    SyncopeClientExceptionType.InvalidConnInstance);\n+                    new SyncopeClientException(SyncopeClientExceptionType.InvalidConnInstance);\n             invalidConnInstance.addElement(t.getMessage());\n \n             scce.addException(invalidConnInstance);\n@@ -114,27 +109,22 @@ public ConnInstanceTO create(\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/update\")\n-    public ConnInstanceTO update(\n-            @RequestBody final ConnInstanceTO connectorTO)\n+    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n+    public ConnInstanceTO update(@RequestBody final ConnInstanceTO connectorTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n         LOG.debug(\"Connector update called with configuration {}\", connectorTO);\n \n-        ConnInstance connInstance =\n-                binder.updateConnInstance(connectorTO.getId(), connectorTO);\n+        ConnInstance connInstance = binder.updateConnInstance(connectorTO.getId(), connectorTO);\n \n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n         } catch (RuntimeException e) {\n             SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n             SyncopeClientException invalidConnInstance =\n-                    new SyncopeClientException(\n-                    SyncopeClientExceptionType.InvalidConnInstance);\n+                    new SyncopeClientException(SyncopeClientExceptionType.InvalidConnInstance);\n             invalidConnInstance.addElement(e.getMessage());\n \n             scce.addException(invalidConnInstance);\n@@ -145,26 +135,21 @@ public ConnInstanceTO update(\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE,\n-    value = \"/delete/{connectorId}\")\n+    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{connectorId}\")\n     public void delete(@PathVariable(\"connectorId\") Long connectorId)\n             throws NotFoundException {\n \n         ConnInstance connInstance = connInstanceDAO.find(connectorId);\n         if (connInstance == null) {\n-            LOG.error(\"Could not find connector '\" + connectorId + \"'\");\n-\n-            throw new NotFoundException(String.valueOf(connectorId));\n+            throw new NotFoundException(\"Connector '\" + connectorId + \"'\");\n         }\n \n         if (!connInstance.getResources().isEmpty()) {\n             SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n             SyncopeClientException invalidConnInstance =\n-                    new SyncopeClientException(\n-                    SyncopeClientExceptionType.ResourceExist);\n+                    new SyncopeClientException(SyncopeClientExceptionType.ExistingResource);\n             for (ExternalResource resource : connInstance.getResources()) {\n                 invalidConnInstance.addElement(resource.getName());\n             }\n@@ -177,12 +162,9 @@ public void delete(@PathVariable(\"connectorId\") Long connectorId)\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/list\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     @Transactional(readOnly = true)\n-    public List<ConnInstanceTO> list(\n-            @RequestParam(value = \"lang\", required = false) final String lang) {\n-\n+    public List<ConnInstanceTO> list(@RequestParam(value = \"lang\", required = false) final String lang) {\n         if (StringUtils.isBlank(lang)) {\n             CurrentLocale.set(Locale.ENGLISH);\n         } else {\n@@ -191,36 +173,29 @@ public List<ConnInstanceTO> list(\n \n         List<ConnInstance> connInstances = connInstanceDAO.findAll();\n \n-        final List<ConnInstanceTO> connInstanceTOs =\n-                new ArrayList<ConnInstanceTO>();\n+        final List<ConnInstanceTO> connInstanceTOs = new ArrayList<ConnInstanceTO>();\n \n         for (ConnInstance connector : connInstances) {\n             try {\n                 connInstanceTOs.add(binder.getConnInstanceTO(connector));\n             } catch (NotFoundException e) {\n-                LOG.error(\"Connector '{}#{}' not found\",\n-                        connector.getBundleName(),\n-                        connector.getVersion());\n+                LOG.error(\"Connector '{}#{}' not found\", connector.getBundleName(), connector.getVersion());\n             }\n         }\n \n         return connInstanceTOs;\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/read/{connectorId}\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/read/{connectorId}\")\n     @Transactional(readOnly = true)\n-    public ConnInstanceTO read(\n-            @PathVariable(\"connectorId\") Long connectorId)\n+    public ConnInstanceTO read(@PathVariable(\"connectorId\") Long connectorId)\n             throws NotFoundException {\n \n         ConnInstance connInstance = connInstanceDAO.find(connectorId);\n \n         if (connInstance == null) {\n-            LOG.error(\"Could not find connector '\" + connectorId + \"'\");\n-\n-            throw new NotFoundException(String.valueOf(connectorId));\n+            throw new NotFoundException(\"Connector '\" + connectorId + \"'\");\n         }\n \n         return binder.getConnInstanceTO(connInstance);\n@@ -229,8 +204,7 @@ public ConnInstanceTO read(\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/bundle/list\")\n     @Transactional(readOnly = true)\n-    public List<ConnBundleTO> getBundles(\n-            @RequestParam(value = \"lang\", required = false) final String lang)\n+    public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = false) final String lang)\n             throws NotFoundException, MissingConfKeyException {\n \n         if (StringUtils.isBlank(lang)) {\n@@ -251,17 +225,13 @@ public List<ConnBundleTO> getBundles(\n             }\n         }\n \n-        ConnBundleTO connectorBundleTO;\n-        ConnectorKey key;\n-        ConfigurationProperties properties;\n-\n         List<ConnBundleTO> connectorBundleTOs = new ArrayList<ConnBundleTO>();\n         if (bundles != null) {\n             for (ConnectorInfo bundle : bundles) {\n-                connectorBundleTO = new ConnBundleTO();\n+                ConnBundleTO connectorBundleTO = new ConnBundleTO();\n                 connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());\n \n-                key = bundle.getConnectorKey();\n+                ConnectorKey key = bundle.getConnectorKey();\n \n                 LOG.debug(\"\\nBundle name: {}\"\n                         + \"\\nBundle version: {}\"\n@@ -272,7 +242,7 @@ public List<ConnBundleTO> getBundles(\n                 connectorBundleTO.setConnectorName(key.getConnectorName());\n                 connectorBundleTO.setVersion(key.getBundleVersion());\n \n-                properties = bundleManager.getConfigurationProperties(bundle);\n+                ConfigurationProperties properties = bundleManager.getConfigurationProperties(bundle);\n \n                 ConnConfPropSchema connConfPropSchema;\n                 ConfigurationProperty configurationProperty;\n@@ -310,28 +280,22 @@ public List<ConnBundleTO> getBundles(\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/schema/list\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/schema/list\")\n     @Transactional(readOnly = true)\n-    public List<String> getSchemaNames(\n-            final HttpServletResponse response,\n+    public List<String> getSchemaNames(final HttpServletResponse response,\n             @RequestBody final ConnInstanceTO connectorTO,\n-            @RequestParam(required = false,\n-            value = \"showall\", defaultValue = \"false\") final boolean showall)\n+            @RequestParam(required = false, value = \"showall\", defaultValue = \"false\") final boolean showall)\n             throws NotFoundException {\n \n-        final ConnInstance connInstance =\n-                connInstanceDAO.find(connectorTO.getId());\n+        final ConnInstance connInstance = connInstanceDAO.find(connectorTO.getId());\n \n         if (connInstance == null) {\n-            LOG.error(\"Could not find connector '\" + connInstance + \"'\");\n-            throw new NotFoundException(\"Connector '\" + connInstance + \"'\");\n+            throw new NotFoundException(\"Connector '\" + connectorTO.getId() + \"'\");\n         }\n \n         // consider the possibility to receive overridden properties only\n-        final Set<ConnConfProperty> conf = mergeConnConfProperties(\n-                connectorTO.getConfiguration(),\n-                connInstance.getConfiguration());\n+        final Set<ConnConfProperty> conf =\n+                mergeConnConfProperties(connectorTO.getConfiguration(), connInstance.getConfiguration());\n \n         // We cannot use Spring bean because this method could be used during\n         // resource definition or modification: bean couldn't exist or bean\n@@ -340,40 +304,34 @@ public List<String> getSchemaNames(\n         // facade proxy to ask for schema names.\n \n         final List<String> result = new ArrayList<String>(\n-                connLoader.createConnectorBean(\n-                connInstance, conf).getSchema(showall));\n+                connLoader.createConnectorBean(connInstance, conf).getSchema(showall));\n \n         Collections.sort(result);\n \n         return result;\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/{connectorId}/configurationProperty/list\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{connectorId}/configurationProperty/list\")\n     @Transactional(readOnly = true)\n-    public List<ConnConfProperty> getConfigurationProperties(\n-            @PathVariable(\"connectorId\") final Long connectorId)\n+    public List<ConnConfProperty> getConfigurationProperties(@PathVariable(\"connectorId\") final Long connectorId)\n             throws NotFoundException {\n \n         final ConnInstance connector = connInstanceDAO.find(connectorId);\n         if (connector == null) {\n-            throw new NotFoundException(String.format(\n-                    \"Connector instance with id %d not found\", connectorId));\n+            throw new NotFoundException(\"Connector '\" + connectorId + \"'\");\n         }\n         return new ArrayList<ConnConfProperty>(connector.getConfiguration());\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/check\")\n     @Transactional(readOnly = true)\n-    public ModelAndView check(final HttpServletResponse response,\n-            @RequestBody final ConnInstanceTO connectorTO)\n+    public ModelAndView check(final HttpServletResponse response, @RequestBody final ConnInstanceTO connectorTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n         final ConnectorFacadeProxy connector =\n-                new ConnectorFacadeProxy(\n-                binder.getConnInstance(connectorTO), bundleManager);\n+                new ConnectorFacadeProxy(binder.getConnInstance(connectorTO), bundleManager);\n \n         try {\n             connector.test();\n@@ -420,11 +378,9 @@ private Set<ConnConfProperty> mergeConnConfProperties(\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/{resourceName}/connectorBean\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/connectorBean\")\n     @Transactional(readOnly = true)\n-    public ConnInstanceTO readConnectorBean(\n-            @PathVariable(\"resourceName\") String resourceName)\n+    public ConnInstanceTO readConnectorBean(@PathVariable(\"resourceName\") String resourceName)\n             throws NotFoundException {\n \n         ExternalResource resource = resourceDAO.find(resourceName);"}]}