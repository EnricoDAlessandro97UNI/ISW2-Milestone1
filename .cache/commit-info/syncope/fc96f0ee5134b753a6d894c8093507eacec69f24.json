{"sha":"fc96f0ee5134b753a6d894c8093507eacec69f24","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZjOTZmMGVlNTEzNGI3NTNhNmQ4OTRjODA5MzUwN2VhY2VjNjlmMjQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-11T09:47:19Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-11T09:47:19Z"},"message":"[SYNCOPE-231] Removing @deprecated - opening SYNCOPE-271 for this\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1431956 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cb8d85001339c6ae929f4da76a6b140cd5348e71","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cb8d85001339c6ae929f4da76a6b140cd5348e71"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fc96f0ee5134b753a6d894c8093507eacec69f24","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fc96f0ee5134b753a6d894c8093507eacec69f24","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fc96f0ee5134b753a6d894c8093507eacec69f24","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fc96f0ee5134b753a6d894c8093507eacec69f24/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f01769cc4f997bf6128aaba098b720c39de18a9e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f01769cc4f997bf6128aaba098b720c39de18a9e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f01769cc4f997bf6128aaba098b720c39de18a9e"}],"stats":{"total":604,"additions":256,"deletions":348},"files":[{"sha":"09a979fdd1c0158d49f7299195b123aeb8aec54c","filename":"client/src/main/java/org/apache/syncope/services/ConfigurationService.java","status":"modified","additions":23,"deletions":26,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -20,7 +20,6 @@\n \r\n import java.util.List;\r\n import java.util.Set;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.POST;\r\n@@ -30,40 +29,38 @@\n import javax.ws.rs.Produces;\r\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n-\r\n import org.apache.syncope.client.to.ConfigurationTO;\r\n \r\n @Path(\"configurations\")\r\n public interface ConfigurationService {\r\n \r\n-\t@POST\r\n-\tConfigurationTO create(final ConfigurationTO configurationTO);\r\n-\r\n-\t@GET\r\n-\t@Produces(MediaType.APPLICATION_OCTET_STREAM)\r\n-\tResponse dbExport();\r\n+    @POST\r\n+    ConfigurationTO create(ConfigurationTO configurationTO);\r\n \r\n-\t@DELETE\r\n-\t@Path(\"{key}\")\r\n-\tConfigurationTO delete(@PathParam(\"key\") final String key);\r\n+    @GET\r\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\r\n+    Response dbExport();\r\n \r\n-\t@GET\r\n-\t@Path(\"mailTemplates\")\r\n-\tSet<String> getMailTemplates();\r\n+    @DELETE\r\n+    @Path(\"{key}\")\r\n+    ConfigurationTO delete(@PathParam(\"key\") String key);\r\n \r\n-\t@GET\r\n-\t@Path(\"validators\")\r\n-\tSet<String> getValidators();\r\n+    @GET\r\n+    @Path(\"mailTemplates\")\r\n+    Set<String> getMailTemplates();\r\n \r\n-\t@GET\r\n-\tList<ConfigurationTO> list();\r\n+    @GET\r\n+    @Path(\"validators\")\r\n+    Set<String> getValidators();\r\n \r\n-\t@GET\r\n-\t@Path(\"{key}\")\r\n-\tConfigurationTO read(@PathParam(\"key\") final String key);\r\n+    @GET\r\n+    List<ConfigurationTO> list();\r\n \r\n-\t@PUT\r\n-\t@Path(\"{key}\")\r\n-\tConfigurationTO update(@PathParam(\"key\") final String key, final ConfigurationTO configurationTO);\r\n+    @GET\r\n+    @Path(\"{key}\")\r\n+    ConfigurationTO read(@PathParam(\"key\") String key);\r\n \r\n-}\n\\ No newline at end of file\n+    @PUT\r\n+    @Path(\"{key}\")\r\n+    ConfigurationTO update(@PathParam(\"key\") String key, ConfigurationTO configurationTO);\r\n+}\r"},{"sha":"ee6cda80b8ed646c2d1639ddb31dc6d44e29109d","filename":"client/src/main/java/org/apache/syncope/services/ConnectorService.java","status":"modified","additions":37,"deletions":39,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.services;\r\n \r\n import java.util.List;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.DefaultValue;\r\n import javax.ws.rs.GET;\r\n@@ -29,7 +28,6 @@\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.QueryParam;\r\n-\r\n import org.apache.syncope.client.to.ConnBundleTO;\r\n import org.apache.syncope.client.to.ConnInstanceTO;\r\n import org.apache.syncope.types.ConnConfProperty;\r\n@@ -39,49 +37,49 @@\n @Path(\"connectors\")\r\n public interface ConnectorService {\r\n \r\n-\t@POST\r\n-\tConnInstanceTO create(final ConnInstanceTO connectorTO);\r\n+    @POST\r\n+    ConnInstanceTO create(ConnInstanceTO connectorTO);\r\n \r\n-\t@DELETE\r\n-\t@Path(\"{connectorId}\")\r\n-\tConnInstanceTO delete(@PathParam(\"connectorId\") final Long connectorId);\r\n+    @DELETE\r\n+    @Path(\"{connectorId}\")\r\n+    ConnInstanceTO delete(@PathParam(\"connectorId\") Long connectorId);\r\n \r\n-\t@GET\r\n-\t@Path(\"bundles\")\r\n-\tList<ConnBundleTO> getBundles(@QueryParam(\"lang\") final String lang);\r\n+    @GET\r\n+    @Path(\"bundles\")\r\n+    List<ConnBundleTO> getBundles(@QueryParam(\"lang\") String lang);\r\n \r\n-\t@GET\r\n-\t@Path(\"{connectorId}/configuration\")\r\n-\tList<ConnConfProperty> getConfigurationProperties(\r\n-\t\t\t@PathParam(\"connectorId\") final Long connectorId);\r\n+    @GET\r\n+    @Path(\"{connectorId}/configuration\")\r\n+    List<ConnConfProperty> getConfigurationProperties(\r\n+            @PathParam(\"connectorId\") Long connectorId);\r\n \r\n-\t@GET\r\n-\t@POST\r\n-\t@Path(\"{connectorId}/schemas\")\r\n-\tList<String> getSchemaNames(\r\n-\t\t\t@PathParam(\"connectorId\") final Long connectorId,\r\n-\t\t\tConnInstanceTO connectorTO,\r\n-\t\t\t@QueryParam(\"showall\") @DefaultValue(\"false\") final boolean showall);\r\n+    @GET\r\n+    @POST\r\n+    @Path(\"{connectorId}/schemas\")\r\n+    List<String> getSchemaNames(\r\n+            @PathParam(\"connectorId\") Long connectorId,\r\n+            ConnInstanceTO connectorTO,\r\n+            @QueryParam(\"showall\") @DefaultValue(\"false\") boolean showall);\r\n \r\n-\t@GET\r\n-\tList<ConnInstanceTO> list(@QueryParam(\"lang\") final String lang);\r\n+    @GET\r\n+    List<ConnInstanceTO> list(@QueryParam(\"lang\") String lang);\r\n \r\n-\t@GET\r\n-\t@Path(\"{connectorId}\")\r\n-\tConnInstanceTO read(@PathParam(\"connectorId\") final Long connectorId);\r\n+    @GET\r\n+    @Path(\"{connectorId}\")\r\n+    ConnInstanceTO read(@PathParam(\"connectorId\") Long connectorId);\r\n \r\n-\t@GET\r\n-\t@RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/connectorBean\")\r\n-\tConnInstanceTO readConnectorBean(\r\n-\t\t\t@MatrixParam(\"resourceName\") String resourceName);\r\n+    @GET\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/connectorBean\")\r\n+    ConnInstanceTO readConnectorBean(\r\n+            @MatrixParam(\"resourceName\") String resourceName);\r\n \r\n-\t@PUT\r\n-\t@Path(\"{connectorId}\")\r\n-\tConnInstanceTO update(@PathParam(\"connectorId\") final Long connectorId,\r\n-\t\t\tfinal ConnInstanceTO connectorTO);\r\n+    @PUT\r\n+    @Path(\"{connectorId}\")\r\n+    ConnInstanceTO update(@PathParam(\"connectorId\") Long connectorId,\r\n+            ConnInstanceTO connectorTO);\r\n \r\n-\t@POST\r\n-\t@Path(\"validate\")\r\n-\t@RequestMapping(method = RequestMethod.POST, value = \"/check\")\r\n-\tboolean validate(final ConnInstanceTO connectorTO);\r\n-}\n\\ No newline at end of file\n+    @POST\r\n+    @Path(\"validate\")\r\n+    @RequestMapping(method = RequestMethod.POST, value = \"/check\")\r\n+    boolean validate(ConnInstanceTO connectorTO);\r\n+}\r"},{"sha":"79363b80a808061d1fc722b3cad02eebbb92be2c","filename":"client/src/main/java/org/apache/syncope/services/EntitlementService.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.services;\r\n \r\n import java.util.Set;\r\n-\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.Path;\r\n \r\n@@ -32,5 +31,4 @@ public interface EntitlementService {\n     @GET\r\n     @Path(\"own\")\r\n     Set<String> getMyEntitlements();\r\n-\r\n-}\n\\ No newline at end of file\n+}\r"},{"sha":"a33306871c0f81cc5c32a5d077265d1e0e55bfe4","filename":"client/src/main/java/org/apache/syncope/services/LoggerService.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FLoggerService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -18,21 +18,18 @@\n  */\r\n package org.apache.syncope.services;\r\n \r\n+import ch.qos.logback.classic.Level;\r\n import java.util.List;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-\r\n import org.apache.syncope.client.to.LoggerTO;\r\n import org.apache.syncope.types.AuditLoggerName;\r\n import org.springframework.web.bind.annotation.RequestMapping;\r\n import org.springframework.web.bind.annotation.RequestMethod;\r\n \r\n-import ch.qos.logback.classic.Level;\r\n-\r\n @Path(\"logger\")\r\n public interface LoggerService {\r\n \r\n@@ -49,17 +46,16 @@ public interface LoggerService {\n     @PUT\r\n     @Path(\"{name}/level\")\r\n     @RequestMapping(method = RequestMethod.POST, value = \"/log/{name}/{level}\")\r\n-    LoggerTO update(@PathParam(\"name\") final String name, final Level level);\r\n+    LoggerTO update(@PathParam(\"name\") String name, Level level);\r\n \r\n     @DELETE\r\n     @Path(\"{name}\")\r\n     @RequestMapping(method = RequestMethod.GET, value = \"/log/delete/{name}\")\r\n-    LoggerTO delete(@PathParam(\"name\") final String name);\r\n+    LoggerTO delete(@PathParam(\"name\") String name);\r\n \r\n     // TODO refactor this method to use update()\r\n     void enableAudit(AuditLoggerName auditLoggerName);\r\n \r\n     // TODO refactor this method to use delete()\r\n     void disableAudit(AuditLoggerName auditLoggerName);\r\n-\r\n-}\n\\ No newline at end of file\n+}\r"},{"sha":"ba4df83a9239ce0c800df54d6638408f689f8db8","filename":"client/src/main/java/org/apache/syncope/services/NotificationService.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FNotificationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FNotificationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FNotificationService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -19,35 +19,32 @@\n package org.apache.syncope.services;\r\n \r\n import java.util.List;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.POST;\r\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-\r\n import org.apache.syncope.client.to.NotificationTO;\r\n \r\n @Path(\"notifications\")\r\n public interface NotificationService {\r\n \r\n     @GET\r\n     @Path(\"{notificationId}\")\r\n-    NotificationTO read(@PathParam(\"notificationId\") final Long notificationId);\r\n+    NotificationTO read(@PathParam(\"notificationId\") Long notificationId);\r\n \r\n     @GET\r\n     List<NotificationTO> list();\r\n \r\n     @POST\r\n-    NotificationTO create(final NotificationTO notificationTO);\r\n+    NotificationTO create(NotificationTO notificationTO);\r\n \r\n     @PUT\r\n     @Path(\"{notificationId}\")\r\n-    NotificationTO update(@PathParam(\"notificationId\") final Long notificationId, final NotificationTO notificationTO);\r\n+    NotificationTO update(@PathParam(\"notificationId\") Long notificationId, NotificationTO notificationTO);\r\n \r\n     @DELETE\r\n     @Path(\"{notificationId}\")\r\n-    NotificationTO delete(@PathParam(\"notificationId\") final Long notificationId);\r\n-\r\n-}\n\\ No newline at end of file\n+    NotificationTO delete(@PathParam(\"notificationId\") Long notificationId);\r\n+}\r"},{"sha":"8ad7fc47ef9c742fd8875b07bf2bf8b25c5ec32d","filename":"client/src/main/java/org/apache/syncope/services/PolicyService.java","status":"modified","additions":21,"deletions":24,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -19,44 +19,41 @@\n package org.apache.syncope.services;\r\n \r\n import java.util.List;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.POST;\r\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-\r\n import org.apache.syncope.client.to.PolicyTO;\r\n import org.apache.syncope.types.PolicyType;\r\n \r\n @Path(\"policies\")\r\n public interface PolicyService {\r\n \r\n-\t@POST\r\n-    <T extends PolicyTO> T create(final T policyTO);\r\n-\r\n-\t// TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n-\t@DELETE\r\n-\t@Path(\"{policyId}\")\r\n-\t<T extends PolicyTO> T delete(@PathParam(\"policyId\") final Long policyId, Class<T> policyClass);\r\n+    @POST\r\n+    <T extends PolicyTO> T create(T policyTO);\r\n \r\n-\t@GET\r\n-\t@Path(\"{kind}\")\r\n-\t<T extends PolicyTO> List<T> listByType(@PathParam(\"kind\") final PolicyType type);\r\n+    // TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n+    @DELETE\r\n+    @Path(\"{policyId}\")\r\n+    <T extends PolicyTO> T delete(@PathParam(\"policyId\") Long policyId, Class<T> policyClass);\r\n \r\n-\t// TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n-\t@GET\r\n-\t@Path(\"{policyId}\")\r\n-\t<T extends PolicyTO> T read(@PathParam(\"policyId\") final Long policyId, Class<T> policyClass);\r\n+    @GET\r\n+    @Path(\"{kind}\")\r\n+    <T extends PolicyTO> List<T> listByType(@PathParam(\"kind\") PolicyType type);\r\n \r\n-\t// TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n-\t@GET\r\n-\t@Path(\"global/{kind}\")\r\n-\t<T extends PolicyTO> T readGlobal(@PathParam(\"kind\") final PolicyType type, Class<T> policyClass);\r\n+    // TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n+    @GET\r\n+    @Path(\"{policyId}\")\r\n+    <T extends PolicyTO> T read(@PathParam(\"policyId\") Long policyId, Class<T> policyClass);\r\n \r\n-\t@PUT\r\n-\t@Path(\"{policyId}\")\r\n-    <T extends PolicyTO> T update(@PathParam(\"policyId\") final Long policyId, final T policyTO);\r\n+    // TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n+    @GET\r\n+    @Path(\"global/{kind}\")\r\n+    <T extends PolicyTO> T readGlobal(@PathParam(\"kind\") PolicyType type, Class<T> policyClass);\r\n \r\n-}\n\\ No newline at end of file\n+    @PUT\r\n+    @Path(\"{policyId}\")\r\n+    <T extends PolicyTO> T update(@PathParam(\"policyId\") Long policyId, T policyTO);\r\n+}\r"},{"sha":"ee7a384f1c2e93e30f6362d9d7b3fc07c9051def","filename":"client/src/main/java/org/apache/syncope/services/ReportService.java","status":"modified","additions":12,"deletions":15,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FReportService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.services;\r\n \r\n import java.util.List;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.DefaultValue;\r\n import javax.ws.rs.GET;\r\n@@ -30,7 +29,6 @@\n import javax.ws.rs.Produces;\r\n import javax.ws.rs.QueryParam;\r\n import javax.ws.rs.core.MediaType;\r\n-\r\n import org.apache.syncope.client.to.ReportExecTO;\r\n import org.apache.syncope.client.to.ReportTO;\r\n import org.apache.syncope.types.ReportExecExportFormat;\r\n@@ -41,11 +39,11 @@\n public interface ReportService {\r\n \r\n     @POST\r\n-    ReportTO create(final ReportTO reportTO);\r\n+    ReportTO create(ReportTO reportTO);\r\n \r\n     @PUT\r\n     @Path(\"{reportId}\")\r\n-    ReportTO update(@PathParam(\"reportId\") final Long reportId, final ReportTO reportTO);\r\n+    ReportTO update(@PathParam(\"reportId\") Long reportId, ReportTO reportTO);\r\n \r\n     @GET\r\n     @Path(\"count\")\r\n@@ -55,8 +53,8 @@ public interface ReportService {\n     List<ReportTO> list();\r\n \r\n     @GET\r\n-    List<ReportTO> list(@QueryParam(\"page\") final int page,\r\n-            @QueryParam(\"size\") @DefaultValue(\"25\") final int size);\r\n+    List<ReportTO> list(@QueryParam(\"page\") int page,\r\n+            @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n \r\n     @GET\r\n     @Path(\"executions\")\r\n@@ -68,30 +66,29 @@ List<ReportTO> list(@QueryParam(\"page\") final int page,\n \r\n     @GET\r\n     @Path(\"{reportId}\")\r\n-    ReportTO read(@PathParam(\"reportId\") final Long reportId);\r\n+    ReportTO read(@PathParam(\"reportId\") Long reportId);\r\n \r\n     @GET\r\n     @Path(\"executions/{executionId}\")\r\n-    ReportExecTO readExecution(@PathParam(\"executionId\") final Long executionId);\r\n+    ReportExecTO readExecution(@PathParam(\"executionId\") Long executionId);\r\n \r\n     @GET\r\n     @Path(\"executions/{executionId}\")\r\n     @Produces(MediaType.APPLICATION_OCTET_STREAM)\r\n-    void exportExecutionResult(@PathParam(\"executionId\") final Long executionId,\r\n-            @QueryParam(\"format\") final ReportExecExportFormat fmt);\r\n+    void exportExecutionResult(@PathParam(\"executionId\") Long executionId,\r\n+            @QueryParam(\"format\") ReportExecExportFormat fmt);\r\n \r\n     @POST\r\n     @Path(\"{reportId}/execute\")\r\n-    ReportExecTO execute(@PathParam(\"reportId\") final Long reportId);\r\n+    ReportExecTO execute(@PathParam(\"reportId\") Long reportId);\r\n \r\n     @DELETE\r\n     @Path(\"{reportId}\")\r\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{reportId}\")\r\n-    ReportTO delete(@PathParam(\"reportId\") final Long reportId);\r\n+    ReportTO delete(@PathParam(\"reportId\") Long reportId);\r\n \r\n     @DELETE\r\n     @Path(\"executions/{executionId}\")\r\n     @RequestMapping(method = RequestMethod.GET, value = \"/execution/delete/{executionId}\")\r\n-    ReportExecTO deleteExecution(@PathParam(\"executionId\") final Long executionId);\r\n-\r\n-}\n\\ No newline at end of file\n+    ReportExecTO deleteExecution(@PathParam(\"executionId\") Long executionId);\r\n+}\r"},{"sha":"893c295e1ae479a8b0a5de1f353254b561c88243","filename":"client/src/main/java/org/apache/syncope/services/ResourceService.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FResourceService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -20,15 +20,13 @@\n \r\n import java.util.List;\r\n import java.util.Set;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.MatrixParam;\r\n import javax.ws.rs.POST;\r\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-\r\n import org.apache.syncope.client.to.ConnObjectTO;\r\n import org.apache.syncope.client.to.ResourceTO;\r\n import org.apache.syncope.types.AttributableType;\r\n@@ -37,34 +35,34 @@\n public interface ResourceService {\r\n \r\n     @POST\r\n-    ResourceTO create(final ResourceTO resourceTO);\r\n+    ResourceTO create(ResourceTO resourceTO);\r\n \r\n     @PUT\r\n     @Path(\"{resourceName}\")\r\n-    ResourceTO update(@PathParam(\"resourceName\") final String resourceName, final ResourceTO resourceTO);\r\n+    ResourceTO update(@PathParam(\"resourceName\") String resourceName, ResourceTO resourceTO);\r\n \r\n     @DELETE\r\n     @Path(\"{resourceName}\")\r\n-    ResourceTO delete(@PathParam(\"resourceName\") final String resourceName);\r\n+    ResourceTO delete(@PathParam(\"resourceName\") String resourceName);\r\n \r\n     @GET\r\n     @Path(\"{resourceName}\")\r\n-    ResourceTO read(@PathParam(\"resourceName\") final String resourceName);\r\n+    ResourceTO read(@PathParam(\"resourceName\") String resourceName);\r\n \r\n     // TODO: is it resource method?\r\n     @GET\r\n     @Path(\"propagationActionsClasses\")\r\n     Set<String> getPropagationActionsClasses();\r\n \r\n     @GET\r\n-    List<ResourceTO> list(@MatrixParam(\"connInstanceId\") final Long connInstanceId);\r\n+    List<ResourceTO> list(@MatrixParam(\"connInstanceId\") Long connInstanceId);\r\n \r\n     @GET\r\n     @Path(\"{resourceName}/{type}/{objectId}\")\r\n-    ConnObjectTO getConnector(@PathParam(\"resourceName\") final String resourceName,\r\n-            @PathParam(\"type\") final AttributableType type, @PathParam(\"objectId\") final String objectId);\r\n+    ConnObjectTO getConnector(@PathParam(\"resourceName\") String resourceName,\r\n+            @PathParam(\"type\") AttributableType type, @PathParam(\"objectId\") String objectId);\r\n \r\n     @POST\r\n     @Path(\"validate\")\r\n-    boolean check(final ResourceTO resourceTO);\r\n+    boolean check(ResourceTO resourceTO);\r\n }\r"},{"sha":"44c67852f88952099019297dcfacf79792f19b0e","filename":"client/src/main/java/org/apache/syncope/services/RoleService.java","status":"modified","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -19,15 +19,13 @@\n package org.apache.syncope.services;\r\n \r\n import java.util.List;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.DefaultValue;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.POST;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.QueryParam;\r\n-\r\n import org.apache.syncope.client.mod.RoleMod;\r\n import org.apache.syncope.client.search.NodeCond;\r\n import org.apache.syncope.client.to.RoleTO;\r\n@@ -37,46 +35,43 @@ public interface RoleService {\n \r\n     @GET\r\n     @Path(\"{roleId}/children\")\r\n-    List<RoleTO> children(@PathParam(\"roleId\") final Long roleId);\r\n+    List<RoleTO> children(@PathParam(\"roleId\") Long roleId);\r\n \r\n     @POST\r\n-    RoleTO create(final RoleTO roleTO);\r\n+    RoleTO create(RoleTO roleTO);\r\n \r\n     @DELETE\r\n     @Path(\"{roleId}\")\r\n-    RoleTO delete(@PathParam(\"roleId\") final Long roleId);\r\n+    RoleTO delete(@PathParam(\"roleId\") Long roleId);\r\n \r\n     @GET\r\n     List<RoleTO> list();\r\n \r\n     @GET\r\n     @Path(\"{roleId}/parent\")\r\n-    RoleTO parent(@PathParam(\"roleId\") final Long roleId);\r\n+    RoleTO parent(@PathParam(\"roleId\") Long roleId);\r\n \r\n     @GET\r\n     @Path(\"{roleId}\")\r\n-    RoleTO read(@PathParam(\"roleId\") final Long roleId);\r\n+    RoleTO read(@PathParam(\"roleId\") Long roleId);\r\n \r\n     @POST\r\n     @Path(\"search\")\r\n-    List<RoleTO> search(final NodeCond searchCondition);\r\n+    List<RoleTO> search(NodeCond searchCondition);\r\n \r\n     @POST\r\n     @Path(\"search\")\r\n-    List<RoleTO> search(final NodeCond searchCondition,\r\n-            @QueryParam(\"page\") final int page,\r\n-            @QueryParam(\"size\") @DefaultValue(\"25\") final int size);\r\n+    List<RoleTO> search(NodeCond searchCondition,\r\n+            @QueryParam(\"page\") int page,\r\n+            @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n \r\n     @POST\r\n     @Path(\"search/count\")\r\n-    int searchCount(final NodeCond searchCondition);\r\n+    int searchCount(NodeCond searchCondition);\r\n \r\n-    /**\r\n-     * deprecated Authentication checks should not depend on the method called\r\n-     */\r\n-    RoleTO selfRead(final Long roleId);\r\n+    RoleTO selfRead(Long roleId);\r\n \r\n     @POST\r\n     @Path(\"{roleId}\")\r\n-    RoleTO update(@PathParam(\"roleId\") final Long roleId, final RoleMod roleMod);\r\n+    RoleTO update(@PathParam(\"roleId\") Long roleId, RoleMod roleMod);\r\n }\n\\ No newline at end of file"},{"sha":"ae3bcc0cef77834356c5c76e0ff445ba73157205","filename":"client/src/main/java/org/apache/syncope/services/SchemaService.java","status":"modified","additions":23,"deletions":25,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSchemaService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -19,27 +19,26 @@\n package org.apache.syncope.services;\r\n \r\n import java.util.List;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.POST;\r\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-\r\n import org.apache.syncope.client.to.AbstractSchemaTO;\r\n \r\n @Path(\"schemas/{kind}/{type}\")\r\n public interface SchemaService {\r\n \r\n-    //TODO refactoring needed here. SchemaType exists already in org.apache.syncope.types.\r\n-    // Maybe that (other) type can be renamed to SchemaElementType ?\r\n-    enum SchemaType {\r\n-        NORMAL(\"schema\"), DERIVED(\"derivedSchema\"), VIRTUAL(\"virtualSchema\");\r\n+    enum SchemaKind {\r\n \r\n-        private final String name;\r\n+        NORMAL(\"schema\"),\r\n+        DERIVED(\"derivedSchema\"),\r\n+        VIRTUAL(\"virtualSchema\");\r\n \r\n-        private SchemaType(String name) {\r\n+        private String name;\r\n+\r\n+        private SchemaKind(String name) {\r\n             this.name = name;\r\n         }\r\n \r\n@@ -50,31 +49,30 @@ public String toString() {\n     }\r\n \r\n     @POST\r\n-    <T extends AbstractSchemaTO> T create(@PathParam(\"kind\") final String kind,\r\n-            @PathParam(\"type\") final SchemaType type,\r\n-            final T schemaTO);\r\n+    <T extends AbstractSchemaTO> T create(@PathParam(\"kind\") String kind,\r\n+            @PathParam(\"type\") SchemaKind type,\r\n+            T schemaTO);\r\n \r\n     @DELETE\r\n     @Path(\"{name}\")\r\n-    <T extends AbstractSchemaTO> T delete(@PathParam(\"kind\") final String kind,\r\n-            @PathParam(\"type\") final SchemaType type,\r\n-            @PathParam(\"name\") final String schemaName);\r\n+    <T extends AbstractSchemaTO> T delete(@PathParam(\"kind\") String kind,\r\n+            @PathParam(\"type\") SchemaKind type,\r\n+            @PathParam(\"name\") String schemaName);\r\n \r\n     @GET\r\n-    <T extends AbstractSchemaTO> List<T> list(@PathParam(\"kind\") final String kind,\r\n-            @PathParam(\"type\") final SchemaType type);\r\n+    <T extends AbstractSchemaTO> List<T> list(@PathParam(\"kind\") String kind,\r\n+            @PathParam(\"type\") SchemaKind type);\r\n \r\n     @GET\r\n     @Path(\"{name}\")\r\n-    <T extends AbstractSchemaTO> T read(@PathParam(\"kind\") final String kind,\r\n-            @PathParam(\"type\") final SchemaType type,\r\n-            @PathParam(\"name\") final String schemaName);\r\n+    <T extends AbstractSchemaTO> T read(@PathParam(\"kind\") String kind,\r\n+            @PathParam(\"type\") SchemaKind type,\r\n+            @PathParam(\"name\") String schemaName);\r\n \r\n     @PUT\r\n     @Path(\"{name}\")\r\n-    <T extends AbstractSchemaTO> T update(@PathParam(\"kind\") final String kind,\r\n-            @PathParam(\"type\") final SchemaType type,\r\n-            @PathParam(\"name\") final String schemaName,\r\n-            final T schemaTO);\r\n-\r\n-}\n\\ No newline at end of file\n+    <T extends AbstractSchemaTO> T update(@PathParam(\"kind\") String kind,\r\n+            @PathParam(\"type\") SchemaKind type,\r\n+            @PathParam(\"name\") String schemaName,\r\n+            T schemaTO);\r\n+}\r"},{"sha":"7c64e0cd0c9015e9dada4f2277212dd74110c4f0","filename":"client/src/main/java/org/apache/syncope/services/TaskService.java","status":"modified","additions":15,"deletions":17,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -20,7 +20,6 @@\n \r\n import java.util.List;\r\n import java.util.Set;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.DefaultValue;\r\n import javax.ws.rs.GET;\r\n@@ -30,7 +29,6 @@\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.QueryParam;\r\n-\r\n import org.apache.syncope.client.to.TaskExecTO;\r\n import org.apache.syncope.client.to.TaskTO;\r\n import org.apache.syncope.types.PropagationTaskExecStatus;\r\n@@ -40,23 +38,23 @@ public interface TaskService {\n \r\n     @GET\r\n     @Path(\"{kind}/count\")\r\n-    int count(@PathParam(\"kind\") final String kind);\r\n+    int count(@PathParam(\"kind\") String kind);\r\n \r\n     @POST\r\n     <T extends TaskTO> T create(T taskTO);\r\n \r\n     @DELETE\r\n     @Path(\"{taskId}\")\r\n-    <T extends TaskTO> T delete(@PathParam(\"taskId\") final Long taskId, Class<T> type);\r\n+    <T extends TaskTO> T delete(@PathParam(\"taskId\") Long taskId, Class<T> type);\r\n \r\n     @DELETE\r\n     @Path(\"executions/{executionId}\")\r\n-    TaskExecTO deleteExecution(@PathParam(\"executionId\") final Long executionId);\r\n+    TaskExecTO deleteExecution(@PathParam(\"executionId\") Long executionId);\r\n \r\n     @POST\r\n     @Path(\"{taskId}/execute\")\r\n-    TaskExecTO execute(@PathParam(\"taskId\") final Long taskId,\r\n-            @QueryParam(\"dryRun\") @DefaultValue(\"false\") final boolean dryRun);\r\n+    TaskExecTO execute(@PathParam(\"taskId\") Long taskId,\r\n+            @QueryParam(\"dryRun\") @DefaultValue(\"false\") boolean dryRun);\r\n \r\n     @GET\r\n     @Path(\"jobClasses\")\r\n@@ -68,32 +66,32 @@ TaskExecTO execute(@PathParam(\"taskId\") final Long taskId,\n \r\n     @GET\r\n     @Path(\"{kind}\")\r\n-    <T extends TaskTO> List<T> list(@PathParam(\"kind\") final String kind, Class<T[]> type);\r\n+    <T extends TaskTO> List<T> list(@PathParam(\"kind\") String kind, Class<T[]> type);\r\n \r\n     @GET\r\n     @Path(\"{kind}\")\r\n-    <T extends TaskTO> List<T> list(@PathParam(\"kind\") final String kind, @QueryParam(\"page\") final int page,\r\n-            @QueryParam(\"size\") @DefaultValue(\"25\") final int size, Class<T[]> type);\r\n+    <T extends TaskTO> List<T> list(@PathParam(\"kind\") String kind, @QueryParam(\"page\") int page,\r\n+            @QueryParam(\"size\") @DefaultValue(\"25\") int size, Class<T[]> type);\r\n \r\n     @GET\r\n     @Path(\"{kind}/executions\")\r\n-    List<TaskExecTO> listExecutions(@PathParam(\"kind\") final String kind);\r\n+    List<TaskExecTO> listExecutions(@PathParam(\"kind\") String kind);\r\n \r\n     @GET\r\n     @Path(\"{taskId}\")\r\n-    <T extends TaskTO> T read(@PathParam(\"taskId\") final Long taskId, Class<T> type);\r\n+    <T extends TaskTO> T read(@PathParam(\"taskId\") Long taskId, Class<T> type);\r\n \r\n     @GET\r\n     @Path(\"executions/{executionId}\")\r\n-    TaskExecTO readExecution(@PathParam(\"executionId\") final Long executionId);\r\n+    TaskExecTO readExecution(@PathParam(\"executionId\") Long executionId);\r\n \r\n     @POST\r\n     @Path(\"executions/{executionId}/report\")\r\n     //TODO create new TaskExecutionReportTO object which contains status and message\r\n-    TaskExecTO report(@PathParam(\"executionId\") final Long executionId,\r\n-            @HeaderParam(\"Execution-Status\") final PropagationTaskExecStatus status, final String message);\r\n+    TaskExecTO report(@PathParam(\"executionId\") Long executionId,\r\n+            @HeaderParam(\"Execution-Status\") PropagationTaskExecStatus status, String message);\r\n \r\n     @PUT\r\n     @Path(\"{taskId}\")\r\n-    <T extends TaskTO> T update(@PathParam(\"taskId\") final Long taskId, T taskTO);\r\n-}\n\\ No newline at end of file\n+    <T extends TaskTO> T update(@PathParam(\"taskId\") Long taskId, T taskTO);\r\n+}\r"},{"sha":"a97f505a8dc2c918ecb054de0fceeb5c1277e8a1","filename":"client/src/main/java/org/apache/syncope/services/UserRequestService.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserRequestService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -19,13 +19,11 @@\n package org.apache.syncope.services;\r\n \r\n import java.util.List;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.POST;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-\r\n import org.apache.syncope.client.mod.UserMod;\r\n import org.apache.syncope.client.to.UserRequestTO;\r\n import org.apache.syncope.client.to.UserTO;\r\n@@ -35,30 +33,29 @@ public interface UserRequestService {\n \r\n     @GET\r\n     @Path(\"create/allowed\")\r\n-    //    @RequestMapping(method = RequestMethod.GET, value = \"/create/allowed\")\r\n+    //@RequestMapping(method = RequestMethod.GET, value = \"/create/allowed\")\r\n     boolean isCreateAllowed();\r\n \r\n     @POST\r\n     @Path(\"create\")\r\n-    UserRequestTO create(final UserTO userTO);\r\n+    UserRequestTO create(UserTO userTO);\r\n \r\n     @POST\r\n     @Path(\"update\")\r\n-    UserRequestTO update(final UserMod userMod);\r\n+    UserRequestTO update(UserMod userMod);\r\n \r\n     @POST\r\n     @Path(\"delete\")\r\n-    UserRequestTO delete(final Long userId);\r\n+    UserRequestTO delete(Long userId);\r\n \r\n     @GET\r\n     List<UserRequestTO> list();\r\n \r\n     @GET\r\n     @Path(\"{requestId}\")\r\n-    UserRequestTO read(@PathParam(\"requestId\") final Long requestId);\r\n+    UserRequestTO read(@PathParam(\"requestId\") Long requestId);\r\n \r\n     @DELETE\r\n     @Path(\"{requestId}\")\r\n-    UserRequestTO deleteRequest(@PathParam(\"requestId\") final Long requestId);\r\n-\r\n-}\n\\ No newline at end of file\n+    UserRequestTO deleteRequest(@PathParam(\"requestId\") Long requestId);\r\n+}\r"},{"sha":"b7e29b6b2201d98a6b194e56fbfca8e257761fd0","filename":"client/src/main/java/org/apache/syncope/services/UserService.java","status":"modified","additions":18,"deletions":62,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.services;\n \n import java.util.List;\n-\n import javax.ws.rs.DELETE;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n@@ -28,7 +27,6 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.QueryParam;\n-\n import org.apache.syncope.client.mod.StatusMod;\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.search.NodeCond;\n@@ -38,50 +36,32 @@\n @Path(\"users\")\n public interface UserService {\n \n-    /**\n-     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-     */\n     UserTO activate(long userId, String token);\n \n-    /**\n-     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-     */\n     UserTO activateByUsername(String username, String token);\n \n-    /**\n-     * deprecated This method needs to be moved to a new workflow service.\n-     */\n     @POST\n     @Path(\"workflow/task/{taskId}/claim\")\n-    WorkflowFormTO claimForm(@PathParam(\"taskId\") final String taskId);\n+    WorkflowFormTO claimForm(@PathParam(\"taskId\") String taskId);\n \n     @GET\n     @Path(\"count\")\n     int count();\n \n     @POST\n-    UserTO create(final UserTO userTO);\n+    UserTO create(UserTO userTO);\n \n     @DELETE\n     @Path(\"{userId}\")\n-    UserTO delete(@PathParam(\"userId\") final Long userId);\n+    UserTO delete(@PathParam(\"userId\") Long userId);\n \n-    /**\n-     * deprecated This method needs to be moved to workflow service.\n-     */\n     @POST\n-    UserTO executeWorkflow(@PathParam(\"taskId\") final String taskId, final UserTO userTO);\n+    UserTO executeWorkflow(@PathParam(\"taskId\") String taskId, UserTO userTO);\n \n-    /**\n-     * deprecated This method needs to be moved to workflow service.\n-     */\n     @GET\n     @Path(\"{userId}/workflow/form\")\n-    WorkflowFormTO getFormForUser(@PathParam(\"userId\") final Long userId);\n+    WorkflowFormTO getFormForUser(@PathParam(\"userId\") Long userId);\n \n-    /**\n-     * deprecated This method needs to be moved to workflow service.\n-     */\n     @GET\n     @Path(\"workflow/form\")\n     List<WorkflowFormTO> getForms();\n@@ -90,79 +70,55 @@ public interface UserService {\n     List<UserTO> list();\n \n     @GET\n-    List<UserTO> list(@QueryParam(\"page\") final int page,\n-            @QueryParam(\"size\") @DefaultValue(\"25\") final int size);\n+    List<UserTO> list(@QueryParam(\"page\") int page,\n+            @QueryParam(\"size\") @DefaultValue(\"25\") int size);\n \n-    /**\n-     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-     */\n     UserTO reactivate(long userId);\n \n-    /**\n-     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-     */\n     UserTO reactivate(long userId, String query);\n \n-    /**\n-     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-     */\n     UserTO reactivateByUsername(String username);\n \n     @GET\n     @Path(\"{userId}\")\n-    UserTO read(@PathParam(\"userId\") final Long userId);\n+    UserTO read(@PathParam(\"userId\") Long userId);\n \n     @GET\n-    UserTO read(@MatrixParam(\"uname\") final String username);\n+    UserTO read(@MatrixParam(\"uname\") String username);\n \n-    /**\n-     * deprecated As of release 1.2.0, use {@link #read(Long)} or {@link #read(String)} instead.\n-     */\n     UserTO readSelf();\n \n     @POST\n     @Path(\"search\")\n-    List<UserTO> search(final NodeCond searchCondition);\n+    List<UserTO> search(NodeCond searchCondition);\n \n     @POST\n     @Path(\"search\")\n-    List<UserTO> search(final NodeCond searchCondition, @QueryParam(\"page\") final int page,\n-            @QueryParam(\"size\") @DefaultValue(\"25\") final int size);\n+    List<UserTO> search(NodeCond searchCondition, @QueryParam(\"page\") int page,\n+            @QueryParam(\"size\") @DefaultValue(\"25\") int size);\n \n     @POST\n     @Path(\"search/count\")\n-    int searchCount(final NodeCond searchCondition);\n+    int searchCount(NodeCond searchCondition);\n \n     @POST\n     @Path(\"user/{userId}/status\")\n-    public abstract UserTO setStatus(@PathParam(\"userId\") final Long userId, final StatusMod statusUpdate);\n+    public abstract UserTO setStatus(@PathParam(\"userId\") Long userId, StatusMod statusUpdate);\n \n-    /**\n-     * deprecated This method needs to be moved to a new workflow service.\n-     */\n     @POST\n     @Path(\"workflow/form\")\n-    UserTO submitForm(final WorkflowFormTO form);\n+    UserTO submitForm(WorkflowFormTO form);\n \n-    /**\n-     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-     */\n     UserTO suspend(long userId);\n \n-    /**\n-     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-     */\n     UserTO suspend(long userId, String query);\n \n-    /**\n-     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-     */\n     UserTO suspendByUsername(String username);\n \n     @POST\n     @Path(\"{userId}\")\n-    UserTO update(@PathParam(\"userId\") final Long userId, final UserMod userMod);\n+    UserTO update(@PathParam(\"userId\") Long userId, UserMod userMod);\n \n     @GET\n-    Boolean verifyPassword(@MatrixParam(\"uname\") String username, @MatrixParam(\"pwd\") final String password);\n-}\n\\ No newline at end of file\n+    Boolean verifyPassword(@MatrixParam(\"uname\") String username, @MatrixParam(\"pwd\") String password);\n+}"},{"sha":"bdabc6a96a89dfe045223d76c6779cc67d074cbc","filename":"client/src/main/java/org/apache/syncope/services/WorkflowService.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FWorkflowService.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -19,28 +19,24 @@\n package org.apache.syncope.services;\r\n \r\n import java.util.List;\r\n-\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-\r\n import org.apache.syncope.client.to.WorkflowDefinitionTO;\r\n \r\n @Path(\"workflows\")\r\n public interface WorkflowService {\r\n \r\n     @GET\r\n     @Path(\"{kind}\")\r\n-    WorkflowDefinitionTO getDefinition(@PathParam(\"kind\") final String kind);\r\n-\r\n-\r\n+    WorkflowDefinitionTO getDefinition(@PathParam(\"kind\") String kind);\r\n \r\n     @PUT\r\n     @Path(\"{kind}\")\r\n-    void updateDefinition(@PathParam(\"kind\") final String kind, final WorkflowDefinitionTO definition);\r\n+    void updateDefinition(@PathParam(\"kind\") String kind, WorkflowDefinitionTO definition);\r\n \r\n     @GET\r\n     @Path(\"{kind}/tasks\")\r\n-    List<String> getDefinedTasks(@PathParam(\"kind\") final String kind);\r\n-}\n\\ No newline at end of file\n+    List<String> getDefinedTasks(@PathParam(\"kind\") String kind);\r\n+}\r"},{"sha":"9cec9f22b5e6a4e3288001648676af6d91b638f4","filename":"client/src/main/java/org/apache/syncope/services/proxy/SchemaServiceProxy.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -36,18 +36,18 @@ public SchemaServiceProxy(String baseUrl, RestTemplate restTemplate) {\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T create(String kind, SchemaType type, T schemaTO) {\r\n+    public <T extends AbstractSchemaTO> T create(String kind, SchemaKind type, T schemaTO) {\r\n         return (T) restTemplate.postForObject(baseUrl + type + \"/{kind}/create\", schemaTO, getTOClass(type), kind);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T delete(String kind, SchemaType type, String schemaName) {\r\n+    public <T extends AbstractSchemaTO> T delete(String kind, SchemaKind type, String schemaName) {\r\n         return (T) restTemplate.getForObject(baseUrl + type + \"/{kind}/delete/{name}.json\", getTOClass(type), kind,\r\n                 schemaName);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> List<T> list(String kind, SchemaType type) {\r\n+    public <T extends AbstractSchemaTO> List<T> list(String kind, SchemaKind type) {\r\n         switch (type) {\r\n         case NORMAL:\r\n             return (List<T>) Arrays.asList(restTemplate.getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n@@ -63,7 +63,7 @@ public <T extends AbstractSchemaTO> List<T> list(String kind, SchemaType type) {\n         }\r\n     }\r\n \r\n-    private Class<? extends AbstractSchemaTO> getTOClass(SchemaType type) {\r\n+    private Class<? extends AbstractSchemaTO> getTOClass(SchemaKind type) {\r\n         switch (type) {\r\n         case NORMAL:\r\n             return SchemaTO.class;\r\n@@ -77,13 +77,13 @@ private Class<? extends AbstractSchemaTO> getTOClass(SchemaType type) {\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T read(String kind, SchemaType type, String schemaName) {\r\n+    public <T extends AbstractSchemaTO> T read(String kind, SchemaKind type, String schemaName) {\r\n         return (T) restTemplate.getForObject(baseUrl + type + \"/{kind}/read/{name}.json\", getTOClass(type), kind,\r\n                 schemaName);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T update(String kind, SchemaType type, String schemaName, T schemaTO) {\r\n+    public <T extends AbstractSchemaTO> T update(String kind, SchemaKind type, String schemaName, T schemaTO) {\r\n         return (T) restTemplate.postForObject(baseUrl + type + \"/{kind}/update\", schemaTO, getTOClass(type), kind);\r\n     }\r\n }\r"},{"sha":"f3694a4fe653302ab21c0d5c955a0d21630c15a6","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -18,16 +18,11 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import org.apache.syncope.client.search.AttributeCond;\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.to.AttributeTO;\n@@ -81,7 +76,7 @@ public void testUserSchemaAuthorization() {\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(SchemaType.String);\n \n-        SchemaTO newSchemaTO = schemaService.create(\"user\", SchemaService.SchemaType.NORMAL, schemaTO);\n+        SchemaTO newSchemaTO = schemaService.create(\"user\", SchemaService.SchemaKind.NORMAL, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n \n         // 2. create an user with the role created above (as admin)\n@@ -99,19 +94,19 @@ public void testUserSchemaAuthorization() {\n         assertNotNull(userTO);\n \n         // 3. read the schema created above (as admin) - success\n-        schemaTO = schemaService.read(\"user\", SchemaService.SchemaType.NORMAL, \"authTestSchema\");\n+        schemaTO = schemaService.read(\"user\", SchemaService.SchemaKind.NORMAL, \"authTestSchema\");\n         assertNotNull(schemaTO);\n \n         // 4. read the schema created above (as user) - success\n         super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-        schemaTO = schemaService.read(\"user\", SchemaService.SchemaType.NORMAL, \"authTestSchema\");\n+        schemaTO = schemaService.read(\"user\", SchemaService.SchemaKind.NORMAL, \"authTestSchema\");\n         assertNotNull(schemaTO);\n \n         // 5. update the schema create above (as user) - failure\n         HttpClientErrorException exception = null;\n         try {\n-            schemaService.update(\"role\", SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n+            schemaService.update(\"role\", SchemaService.SchemaKind.NORMAL, schemaTO.getName(), schemaTO);\n         } catch (HttpClientErrorException e) {\n             exception = e;\n         }"},{"sha":"f0b8466ae4a868edd515502f46efe9aa7bb357e6","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":20,"deletions":21,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -18,12 +18,9 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.*;\n \n import java.util.List;\n-\n import org.apache.syncope.client.to.DerivedSchemaTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.services.SchemaService;\n@@ -36,12 +33,14 @@\n public class DerivedSchemaTestITCase extends AbstractTest {\n \n     private static final String ROLE = \"role\";\n+\n     private static final String USER = \"user\";\n+\n     private static final String MEMBERSHIP = \"membership\";\n \n     @Test\n     public void list() {\n-        List<DerivedSchemaTO> derivedSchemas = schemaService.list(USER, SchemaService.SchemaType.DERIVED);\n+        List<DerivedSchemaTO> derivedSchemas = schemaService.list(USER, SchemaService.SchemaKind.DERIVED);\n         assertFalse(derivedSchemas.isEmpty());\n         for (DerivedSchemaTO derivedSchemaTO : derivedSchemas) {\n             assertNotNull(derivedSchemaTO);\n@@ -50,7 +49,7 @@ public void list() {\n \n     @Test\n     public void read() {\n-        DerivedSchemaTO derivedSchemaTO = schemaService.read(USER, SchemaService.SchemaType.DERIVED, \"cn\");\n+        DerivedSchemaTO derivedSchemaTO = schemaService.read(USER, SchemaService.SchemaKind.DERIVED, \"cn\");\n         assertNotNull(derivedSchemaTO);\n     }\n \n@@ -60,55 +59,55 @@ public void create() {\n         schema.setName(\"derived\");\n         schema.setExpression(\"derived_sx + '_' + derived_dx\");\n \n-        DerivedSchemaTO actual = schemaService.create(USER, SchemaService.SchemaType.DERIVED, schema);\n+        DerivedSchemaTO actual = schemaService.create(USER, SchemaService.SchemaKind.DERIVED, schema);\n         assertNotNull(actual);\n \n-        actual = schemaService.read(USER, SchemaService.SchemaType.DERIVED, actual.getName());\n+        actual = schemaService.read(USER, SchemaService.SchemaKind.DERIVED, actual.getName());\n         assertNotNull(actual);\n         assertEquals(actual.getExpression(), \"derived_sx + '_' + derived_dx\");\n     }\n \n     @Test\n     public void delete() {\n-        DerivedSchemaTO schema = schemaService.read(ROLE, SchemaService.SchemaType.DERIVED, \"rderiveddata\");\n+        DerivedSchemaTO schema = schemaService.read(ROLE, SchemaService.SchemaKind.DERIVED, \"rderiveddata\");\n         assertNotNull(schema);\n \n-        DerivedSchemaTO schemaToDelete = schemaService.delete(ROLE, SchemaService.SchemaType.DERIVED, schema.getName());\n+        DerivedSchemaTO schemaToDelete = schemaService.delete(ROLE, SchemaService.SchemaKind.DERIVED, schema.getName());\n         assertNotNull(schemaToDelete);\n \n         Throwable t = null;\n         try {\n-            schemaService.read(ROLE, SchemaService.SchemaType.DERIVED, \"rderiveddata\");\n+            schemaService.read(ROLE, SchemaService.SchemaKind.DERIVED, \"rderiveddata\");\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n         } finally {\n-        \t// Recreate schema to make test re-runnable\n-        \tschema = schemaService.create(ROLE, SchemaService.SchemaType.DERIVED, schemaToDelete);\n-        \tassertNotNull(schema);\n+            // Recreate schema to make test re-runnable\n+            schema = schemaService.create(ROLE, SchemaService.SchemaKind.DERIVED, schemaToDelete);\n+            assertNotNull(schema);\n         }\n         assertNotNull(t);\n     }\n \n     @Test\n     public void update() {\n-        DerivedSchemaTO schema = schemaService.read(MEMBERSHIP, SchemaService.SchemaType.DERIVED, \"mderiveddata\");\n+        DerivedSchemaTO schema = schemaService.read(MEMBERSHIP, SchemaService.SchemaKind.DERIVED, \"mderiveddata\");\n         assertNotNull(schema);\n         assertEquals(\"mderived_sx + '-' + mderived_dx\", schema.getExpression());\n         try {\n             schema.setExpression(\"mderived_sx + '.' + mderived_dx\");\n \n-            schema = schemaService.update(MEMBERSHIP, SchemaService.SchemaType.DERIVED, schema.getName(), schema);\n+            schema = schemaService.update(MEMBERSHIP, SchemaService.SchemaKind.DERIVED, schema.getName(), schema);\n             assertNotNull(schema);\n \n-            schema = schemaService.read(MEMBERSHIP, SchemaService.SchemaType.DERIVED, \"mderiveddata\");\n+            schema = schemaService.read(MEMBERSHIP, SchemaService.SchemaKind.DERIVED, \"mderiveddata\");\n             assertNotNull(schema);\n             assertEquals(\"mderived_sx + '.' + mderived_dx\", schema.getExpression());\n         } finally {\n-    \t\t// Set updated back to make test re-runnable\n-    \t\tschema.setExpression(\"mderived_sx + '-' + mderived_dx\");\n-            schema = schemaService.update(MEMBERSHIP, SchemaService.SchemaType.DERIVED, schema.getName(), schema);\n+            // Set updated back to make test re-runnable\n+            schema.setExpression(\"mderived_sx + '-' + mderived_dx\");\n+            schema = schemaService.update(MEMBERSHIP, SchemaService.SchemaKind.DERIVED, schema.getName(), schema);\n             assertNotNull(schema);\n-    \t}\n+        }\n     }\n }"},{"sha":"de0d7ebf3b4f5efdb67be42190c6ad6913124093","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":21,"deletions":25,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -18,15 +18,9 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import java.util.List;\n-\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.to.MembershipTO;\n import org.apache.syncope.client.to.SchemaTO;\n@@ -48,7 +42,9 @@\n public class SchemaTestITCase extends AbstractTest {\n \n     private static final String ROLE = \"role\";\n+\n     private static final String USER = \"user\";\n+\n     private static final String MEMBERSHIP = \"membership\";\n \n     @Test\n@@ -58,10 +54,10 @@ public void create() {\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(SchemaType.String);\n \n-        SchemaTO newSchemaTO = schemaService.create(USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        SchemaTO newSchemaTO = schemaService.create(USER, SchemaService.SchemaKind.NORMAL, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n \n-        newSchemaTO = schemaService.create(MEMBERSHIP, SchemaService.SchemaType.NORMAL, schemaTO);\n+        newSchemaTO = schemaService.create(MEMBERSHIP, SchemaService.SchemaKind.NORMAL, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n     }\n \n@@ -72,7 +68,7 @@ public void createWithNotPermittedName() {\n         schemaTO.setType(SchemaType.String);\n \n         try {\n-            schemaService.create(USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+            schemaService.create(USER, SchemaService.SchemaKind.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -91,7 +87,7 @@ public void createREnumWithoutEnumeration() {\n         schemaTO.setType(SchemaType.Enum);\n \n         try {\n-            schemaService.create(ROLE, SchemaService.SchemaType.NORMAL, schemaTO);\n+            schemaService.create(ROLE, SchemaService.SchemaKind.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n@@ -110,7 +106,7 @@ public void createUEnumWithoutEnumeration() {\n         schemaTO.setType(SchemaType.Enum);\n \n         try {\n-            schemaService.create(USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+            schemaService.create(USER, SchemaService.SchemaKind.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -124,11 +120,11 @@ public void createUEnumWithoutEnumeration() {\n \n     @Test\n     public void delete() {\n-        SchemaTO deletedSchema = schemaService.delete(USER, SchemaService.SchemaType.NORMAL, \"cool\");\n+        SchemaTO deletedSchema = schemaService.delete(USER, SchemaService.SchemaKind.NORMAL, \"cool\");\n         assertNotNull(deletedSchema);\n         SchemaTO firstname = null;\n         try {\n-            firstname = schemaService.read(USER, SchemaService.SchemaType.NORMAL, \"cool\");\n+            firstname = schemaService.read(USER, SchemaService.SchemaKind.NORMAL, \"cool\");\n         } catch (HttpClientErrorException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -137,19 +133,19 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        List<SchemaTO> userSchemas = schemaService.list(USER, SchemaService.SchemaType.NORMAL);\n+        List<SchemaTO> userSchemas = schemaService.list(USER, SchemaService.SchemaKind.NORMAL);\n         assertFalse(userSchemas.isEmpty());\n         for (SchemaTO schemaTO : userSchemas) {\n             assertNotNull(schemaTO);\n         }\n \n-        List<SchemaTO> roleSchemas = schemaService.list(ROLE, SchemaService.SchemaType.NORMAL);\n+        List<SchemaTO> roleSchemas = schemaService.list(ROLE, SchemaService.SchemaKind.NORMAL);\n         assertFalse(roleSchemas.isEmpty());\n         for (SchemaTO schemaTO : roleSchemas) {\n             assertNotNull(schemaTO);\n         }\n \n-        List<SchemaTO> membershipSchemas = schemaService.list(MEMBERSHIP, SchemaService.SchemaType.NORMAL);\n+        List<SchemaTO> membershipSchemas = schemaService.list(MEMBERSHIP, SchemaService.SchemaKind.NORMAL);\n         assertFalse(membershipSchemas.isEmpty());\n         for (SchemaTO schemaTO : membershipSchemas) {\n             assertNotNull(schemaTO);\n@@ -158,15 +154,15 @@ public void list() {\n \n     @Test\n     public void update() {\n-        SchemaTO schemaTO = schemaService.read(ROLE, SchemaService.SchemaType.NORMAL, \"icon\");\n+        SchemaTO schemaTO = schemaService.read(ROLE, SchemaService.SchemaKind.NORMAL, \"icon\");\n         assertNotNull(schemaTO);\n \n-        SchemaTO updatedTO = schemaService.update(ROLE, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n+        SchemaTO updatedTO = schemaService.update(ROLE, SchemaService.SchemaKind.NORMAL, schemaTO.getName(), schemaTO);\n         assertEquals(schemaTO, updatedTO);\n \n         updatedTO.setType(SchemaType.Date);\n         try {\n-            schemaService.update(ROLE, SchemaService.SchemaType.NORMAL, schemaTO.getName(), updatedTO);\n+            schemaService.update(ROLE, SchemaService.SchemaKind.NORMAL, schemaTO.getName(), updatedTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n@@ -180,7 +176,7 @@ public void issue258() {\n         schemaTO.setName(\"schema_issue258\");\n         schemaTO.setType(SchemaType.Double);\n \n-        schemaTO = schemaService.create(USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        schemaTO = schemaService.create(USER, SchemaService.SchemaKind.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"issue258@syncope.apache.org\");\n@@ -191,7 +187,7 @@ public void issue258() {\n \n         schemaTO.setType(SchemaType.Long);\n         try {\n-            schemaService.update(USER, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n+            schemaService.update(USER, SchemaService.SchemaKind.NORMAL, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -206,7 +202,7 @@ public void issue259() {\n         schemaTO.setUniqueConstraint(true);\n         schemaTO.setType(SchemaType.Long);\n \n-        schemaTO = schemaService.create(USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        schemaTO = schemaService.create(USER, SchemaService.SchemaKind.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"issue259@syncope.apache.org\");\n@@ -232,7 +228,7 @@ public void issue260() {\n         schemaTO.setType(SchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n-        schemaTO = schemaService.create(USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        schemaTO = schemaService.create(USER, SchemaService.SchemaKind.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"issue260@syncope.apache.org\");\n@@ -242,7 +238,7 @@ public void issue260() {\n \n         schemaTO.setUniqueConstraint(false);\n         try {\n-            schemaService.update(USER, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n+            schemaService.update(USER, SchemaService.SchemaKind.NORMAL, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);"},{"sha":"e9f205a6bdc94f05e9012a3f17f69f37254ca1bb","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc96f0ee5134b753a6d894c8093507eacec69f24/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc96f0ee5134b753a6d894c8093507eacec69f24/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=fc96f0ee5134b753a6d894c8093507eacec69f24","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.*;\n \n import java.util.List;\n-\n import org.apache.syncope.client.to.VirtualSchemaTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.services.SchemaService;\n@@ -35,47 +33,49 @@\n public class VirtualSchemaTestITCase extends AbstractTest {\n \n     private static final String ROLE = \"role\";\n+\n     private static final String USER = \"user\";\n+\n     private static final String MEMBERSHIP = \"membership\";\n \n     @Test\n     public void list() {\n-        List<VirtualSchemaTO> VirtualSchemas = schemaService.list(USER, SchemaService.SchemaType.VIRTUAL);\n-        assertFalse(VirtualSchemas.isEmpty());\n-        for (VirtualSchemaTO VirtualSchemaTO : VirtualSchemas) {\n-            assertNotNull(VirtualSchemaTO);\n+        List<VirtualSchemaTO> vSchemas = schemaService.list(USER, SchemaService.SchemaKind.VIRTUAL);\n+        assertFalse(vSchemas.isEmpty());\n+        for (VirtualSchemaTO vSchemaTO : vSchemas) {\n+            assertNotNull(vSchemaTO);\n         }\n     }\n \n     @Test\n     public void read() {\n-        VirtualSchemaTO VirtualSchemaTO = schemaService.read(MEMBERSHIP, SchemaService.SchemaType.VIRTUAL, \"mvirtualdata\");\n-        assertNotNull(VirtualSchemaTO);\n+        VirtualSchemaTO vSchemaTO = schemaService.read(MEMBERSHIP, SchemaService.SchemaKind.VIRTUAL, \"mvirtualdata\");\n+        assertNotNull(vSchemaTO);\n     }\n \n     @Test\n     public void create() {\n         VirtualSchemaTO schema = new VirtualSchemaTO();\n         schema.setName(\"virtual\");\n \n-        VirtualSchemaTO actual = schemaService.create(USER, SchemaService.SchemaType.VIRTUAL, schema);\n+        VirtualSchemaTO actual = schemaService.create(USER, SchemaService.SchemaKind.VIRTUAL, schema);\n         assertNotNull(actual);\n \n-        actual = schemaService.read(USER, SchemaService.SchemaType.VIRTUAL, actual.getName());\n+        actual = schemaService.read(USER, SchemaService.SchemaKind.VIRTUAL, actual.getName());\n         assertNotNull(actual);\n     }\n \n     @Test\n     public void delete() {\n-        VirtualSchemaTO schema = schemaService.read(ROLE, SchemaService.SchemaType.VIRTUAL, \"rvirtualdata\");\n+        VirtualSchemaTO schema = schemaService.read(ROLE, SchemaService.SchemaKind.VIRTUAL, \"rvirtualdata\");\n         assertNotNull(schema);\n \n-        VirtualSchemaTO deletedSchema = schemaService.delete(ROLE, SchemaService.SchemaType.VIRTUAL, schema.getName());\n+        VirtualSchemaTO deletedSchema = schemaService.delete(ROLE, SchemaService.SchemaKind.VIRTUAL, schema.getName());\n         assertNotNull(deletedSchema);\n \n         Throwable t = null;\n         try {\n-            schema = schemaService.read(ROLE, SchemaService.SchemaType.VIRTUAL, \"rvirtualdata\");\n+            schemaService.read(ROLE, SchemaService.SchemaKind.VIRTUAL, \"rvirtualdata\");\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));"}]}