{"sha":"8a73dae9259032f62d25203c58cba445515fcf58","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhhNzNkYWU5MjU5MDMyZjYyZDI1MjAzYzU4Y2JhNDQ1NTE1ZmNmNTg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-30T15:12:06Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-30T15:12:06Z"},"message":"REST: list available workflow actions and execute specific action\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246420 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e9a1c1e4c6b689034e9d6f0494001a635a6daf5b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e9a1c1e4c6b689034e9d6f0494001a635a6daf5b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8a73dae9259032f62d25203c58cba445515fcf58","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a73dae9259032f62d25203c58cba445515fcf58","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8a73dae9259032f62d25203c58cba445515fcf58","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a73dae9259032f62d25203c58cba445515fcf58/comments","author":null,"committer":null,"parents":[{"sha":"f1ef3467d4f8721251fd216e3508e6d3f265b4aa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1ef3467d4f8721251fd216e3508e6d3f265b4aa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f1ef3467d4f8721251fd216e3508e6d3f265b4aa"}],"stats":{"total":351,"additions":221,"deletions":130},"files":[{"sha":"508dede634d1c316ef91f6e5e6dda88ecc9d3ca6","filename":"client/src/main/java/org/syncope/client/to/WorkflowActionsTO.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a73dae9259032f62d25203c58cba445515fcf58/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FWorkflowActionsTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a73dae9259032f62d25203c58cba445515fcf58/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FWorkflowActionsTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FWorkflowActionsTO.java?ref=8a73dae9259032f62d25203c58cba445515fcf58","patch":"@@ -0,0 +1,44 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.syncope.client.AbstractBaseBean;\n+\n+public class WorkflowActionsTO extends AbstractBaseBean {\n+\n+    private Set<String> actions;\n+\n+    public WorkflowActionsTO() {\n+        actions = new HashSet<String>();\n+    }\n+\n+    public boolean addAction(String action) {\n+        return actions.add(action);\n+    }\n+\n+    public boolean removeAction(String action) {\n+        return actions.remove(action);\n+    }\n+\n+    public Set<String> getActions() {\n+        return actions;\n+    }\n+\n+    public void setActions(Set<String> actions) {\n+        this.actions = actions;\n+    }\n+}"},{"sha":"9e086b64dc0d17766dd3b2479d14083fc73a896e","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":168,"deletions":130,"changes":298,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a73dae9259032f62d25203c58cba445515fcf58/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a73dae9259032f62d25203c58cba445515fcf58/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=8a73dae9259032f62d25203c58cba445515fcf58","patch":"@@ -47,6 +47,7 @@\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.NodeSearchCondition;\n import org.syncope.client.to.UserTO;\n+import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.Resource;\n@@ -74,7 +75,7 @@ public class UserController extends AbstractController {\n     @Autowired\n     private PropagationManager propagationManager;\n \n-    private SyncopeUser executeAction(String actionName, UserTO userTO)\n+    private SyncopeUser doExecuteAction(String actionName, UserTO userTO)\n             throws WorkflowException, NotFoundException {\n \n         SyncopeUser syncopeUser = syncopeUserDAO.find(userTO.getId());\n@@ -103,7 +104,6 @@ private SyncopeUser executeAction(String actionName, UserTO userTO)\n             }\n         }\n         if (actionId == null) {\n-\n             throw new NotFoundException(actionName);\n         }\n \n@@ -113,14 +113,156 @@ private SyncopeUser executeAction(String actionName, UserTO userTO)\n         return syncopeUserDAO.save(syncopeUser);\n     }\n \n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/action/{actionName}\")\n+    public UserTO executeAction(HttpServletResponse response,\n+            @RequestBody UserTO userTO,\n+            @PathVariable(value = \"actionName\") String actionName)\n+            throws WorkflowException, NotFoundException {\n+\n+        return userDataBinder.getUserTO(\n+                doExecuteAction(actionName, userTO));\n+    }\n+\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/activate\")\n     public UserTO activate(HttpServletResponse response,\n             @RequestBody UserTO userTO)\n             throws WorkflowException, NotFoundException {\n \n         return userDataBinder.getUserTO(\n-                executeAction(Constants.ACTION_ACTIVATE, userTO));\n+                doExecuteAction(Constants.ACTION_ACTIVATE, userTO));\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/generateToken/{userId}\")\n+    public UserTO generateToken(HttpServletResponse response,\n+            @PathVariable(\"userId\") Long userId)\n+            throws WorkflowException, NotFoundException {\n+\n+        UserTO userTO = new UserTO();\n+        userTO.setId(userId);\n+        return userDataBinder.getUserTO(\n+                doExecuteAction(Constants.ACTION_GENERATE_TOKEN, userTO));\n+    }\n+\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/verifyToken\")\n+    public UserTO verifyToken(HttpServletResponse response,\n+            @RequestBody UserTO userTO)\n+            throws WorkflowException, NotFoundException {\n+\n+        return userDataBinder.getUserTO(\n+                doExecuteAction(Constants.ACTION_VERIFY_TOKEN, userTO));\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/list\")\n+    public UserTOs list(HttpServletRequest request) {\n+        List<SyncopeUser> users = syncopeUserDAO.findAll();\n+        List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n+\n+        for (SyncopeUser user : users) {\n+            userTOs.add(userDataBinder.getUserTO(user));\n+        }\n+\n+        UserTOs result = new UserTOs();\n+        result.setUsers(userTOs);\n+        return result;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/read/{userId}\")\n+    public UserTO read(HttpServletResponse response,\n+            @PathVariable(\"userId\") Long userId)\n+            throws NotFoundException {\n+\n+        SyncopeUser user = syncopeUserDAO.find(userId);\n+\n+        if (user == null) {\n+            log.error(\"Could not find user '\" + userId + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(userId));\n+        }\n+\n+        return userDataBinder.getUserTO(user);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/actions/{userId}\")\n+    public WorkflowActionsTO actions(HttpServletResponse response,\n+            @PathVariable(\"userId\") Long userId) throws NotFoundException {\n+\n+        SyncopeUser user = syncopeUserDAO.find(userId);\n+\n+        if (user == null) {\n+            log.error(\"Could not find user '\" + userId + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(userId));\n+        }\n+\n+        WorkflowActionsTO result = new WorkflowActionsTO();\n+\n+        WorkflowDescriptor workflowDescriptor =\n+                userWorkflow.getWorkflowDescriptor(Constants.USER_WORKFLOW);\n+        int[] availableActions = userWorkflow.getAvailableActions(\n+                user.getWorkflowEntryId(), Collections.EMPTY_MAP);\n+        for (int i = 0; i < availableActions.length; i++) {\n+            result.addAction(workflowDescriptor.getAction(\n+                    availableActions[i]).getName());\n+        }\n+\n+        return result;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/search\")\n+    public UserTOs search(HttpServletResponse response,\n+            @RequestBody NodeSearchCondition searchCondition)\n+            throws InvalidSearchConditionException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"search called with condition \" + searchCondition);\n+        }\n+\n+        if (!searchCondition.checkValidity()) {\n+            log.error(\"Invalid search condition: \" + searchCondition);\n+\n+            throw new InvalidSearchConditionException();\n+        }\n+\n+        List<SyncopeUser> matchingUsers =\n+                syncopeUserDAO.search(searchCondition);\n+        UserTOs result = new UserTOs();\n+        for (SyncopeUser user : matchingUsers) {\n+            result.addUser(userDataBinder.getUserTO(user));\n+        }\n+\n+        return result;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/status/{userId}\")\n+    public ModelAndView getStatus(HttpServletResponse response,\n+            @PathVariable(\"userId\") Long userId) throws NotFoundException {\n+\n+        SyncopeUser user = syncopeUserDAO.find(userId);\n+\n+        if (user == null) {\n+            log.error(\"Could not find user '\" + userId + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(userId));\n+        }\n+\n+        List<Step> currentSteps = userWorkflow.getCurrentSteps(\n+                user.getWorkflowEntryId());\n+        if (currentSteps == null || currentSteps.isEmpty()) {\n+            return null;\n+        }\n+\n+        ModelAndView mav = new ModelAndView();\n+        mav.addObject(currentSteps.iterator().next().getStatus());\n+        return mav;\n     }\n \n     private Set<String> getSyncResourceNames(SyncopeUser syncopeUser,\n@@ -235,131 +377,6 @@ public UserTO create(HttpServletRequest request,\n         return userDataBinder.getUserTO(syncopeUser);\n     }\n \n-    @RequestMapping(method = RequestMethod.DELETE,\n-    value = \"/delete/{userId}\")\n-    public void delete(HttpServletResponse response,\n-            @PathVariable(\"userId\") Long userId)\n-            throws NotFoundException {\n-\n-        SyncopeUser user = syncopeUserDAO.find(userId);\n-\n-        if (user == null) {\n-            log.error(\"Could not find user '\" + userId + \"'\");\n-\n-            throw new NotFoundException(String.valueOf(userId));\n-        } else {\n-            if (workflowStore != null && user.getWorkflowEntryId() != null) {\n-                workflowStore.delete(user.getWorkflowEntryId());\n-            }\n-\n-            syncopeUserDAO.delete(userId);\n-        }\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/list\")\n-    public UserTOs list(HttpServletRequest request) {\n-        List<SyncopeUser> users = syncopeUserDAO.findAll();\n-        List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n-\n-        for (SyncopeUser user : users) {\n-            userTOs.add(userDataBinder.getUserTO(user));\n-        }\n-\n-        UserTOs result = new UserTOs();\n-        result.setUsers(userTOs);\n-        return result;\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/read/{userId}\")\n-    public UserTO read(HttpServletResponse response,\n-            @PathVariable(\"userId\") Long userId)\n-            throws NotFoundException {\n-\n-        SyncopeUser user = syncopeUserDAO.find(userId);\n-\n-        if (user == null) {\n-            log.error(\"Could not find user '\" + userId + \"'\");\n-\n-            throw new NotFoundException(String.valueOf(userId));\n-        }\n-\n-        return userDataBinder.getUserTO(user);\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/generateToken/{userId}\")\n-    public UserTO generateToken(HttpServletResponse response,\n-            @PathVariable(\"userId\") Long userId)\n-            throws WorkflowException, NotFoundException {\n-\n-        UserTO userTO = new UserTO();\n-        userTO.setId(userId);\n-        return userDataBinder.getUserTO(\n-                executeAction(Constants.ACTION_GENERATE_TOKEN, userTO));\n-    }\n-\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/verifyToken\")\n-    public UserTO verifyToken(HttpServletResponse response,\n-            @RequestBody UserTO userTO)\n-            throws WorkflowException, NotFoundException {\n-\n-        return userDataBinder.getUserTO(\n-                executeAction(Constants.ACTION_VERIFY_TOKEN, userTO));\n-    }\n-\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/search\")\n-    public UserTOs search(HttpServletResponse response,\n-            @RequestBody NodeSearchCondition searchCondition)\n-            throws InvalidSearchConditionException {\n-\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"search called with condition \" + searchCondition);\n-        }\n-\n-        if (!searchCondition.checkValidity()) {\n-            log.error(\"Invalid search condition: \" + searchCondition);\n-\n-            throw new InvalidSearchConditionException();\n-        }\n-\n-        List<SyncopeUser> matchingUsers =\n-                syncopeUserDAO.search(searchCondition);\n-        UserTOs result = new UserTOs();\n-        for (SyncopeUser user : matchingUsers) {\n-            result.addUser(userDataBinder.getUserTO(user));\n-        }\n-\n-        return result;\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/status/{userId}\")\n-    public ModelAndView getStatus(HttpServletResponse response,\n-            @PathVariable(\"userId\") Long userId) throws NotFoundException {\n-\n-        SyncopeUser user = syncopeUserDAO.find(userId);\n-\n-        if (user == null) {\n-            log.error(\"Could not find user '\" + userId + \"'\");\n-\n-            throw new NotFoundException(String.valueOf(userId));\n-        }\n-\n-        List<Step> currentSteps = userWorkflow.getCurrentSteps(\n-                user.getWorkflowEntryId());\n-        if (currentSteps == null || currentSteps.isEmpty()) {\n-            return null;\n-        }\n-\n-        ModelAndView mav = new ModelAndView();\n-        mav.addObject(currentSteps.iterator().next().getStatus());\n-        return mav;\n-    }\n-\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public UserTO update(HttpServletResponse response,\n@@ -383,8 +400,8 @@ public UserTO update(HttpServletResponse response,\n         }\n \n         // First of all, let's check if update is allowed\n-        syncopeUser =\n-                executeAction(\"update\", userDataBinder.getUserTO(syncopeUser));\n+        syncopeUser = doExecuteAction(Constants.ACTION_UPDATE,\n+                userDataBinder.getUserTO(syncopeUser));\n \n         // Update user with provided userMod\n         ResourceOperations resourceOperations =\n@@ -407,4 +424,25 @@ public UserTO update(HttpServletResponse response,\n \n         return userDataBinder.getUserTO(syncopeUser);\n     }\n+\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/delete/{userId}\")\n+    public void delete(HttpServletResponse response,\n+            @PathVariable(\"userId\") Long userId)\n+            throws NotFoundException {\n+\n+        SyncopeUser user = syncopeUserDAO.find(userId);\n+\n+        if (user == null) {\n+            log.error(\"Could not find user '\" + userId + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(userId));\n+        } else {\n+            if (workflowStore != null && user.getWorkflowEntryId() != null) {\n+                workflowStore.delete(user.getWorkflowEntryId());\n+            }\n+\n+            syncopeUserDAO.delete(userId);\n+        }\n+    }\n }"},{"sha":"18fa7f22f5b25841ea64d465dda0fbc7da00e1db","filename":"core/src/main/java/org/syncope/core/workflow/Constants.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a73dae9259032f62d25203c58cba445515fcf58/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a73dae9259032f62d25203c58cba445515fcf58/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java?ref=8a73dae9259032f62d25203c58cba445515fcf58","patch":"@@ -19,6 +19,7 @@ public class Constants {\n     final public static String ACTION_ACTIVATE = \"activate\";\n     final public static String ACTION_GENERATE_TOKEN = \"generateToken\";\n     final public static String ACTION_VERIFY_TOKEN = \"verifyToken\";\n+    final public static String ACTION_UPDATE = \"update\";\n     final public static String ENTRY = \"entry\";\n     final public static String SYNCOPE_USER = \"syncopeUser\";\n     final public static String TOKEN = \"token\";"},{"sha":"08fc109199de590c1025760ddb7bec5a3cdd018a","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a73dae9259032f62d25203c58cba445515fcf58/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a73dae9259032f62d25203c58cba445515fcf58/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=8a73dae9259032f62d25203c58cba445515fcf58","patch":"@@ -16,6 +16,7 @@\n \n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n+import java.util.Collections;\n import static org.junit.Assert.*;\n \n import java.util.Date;\n@@ -32,6 +33,7 @@\n import org.syncope.client.to.NodeSearchCondition;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.UserTOs;\n+import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -113,6 +115,12 @@ public void create() {\n         userTO.setTokenExpireTime(newUserTO.getTokenExpireTime());\n         assertEquals(userTO, newUserTO);\n \n+        WorkflowActionsTO workflowActions = restTemplate.getForObject(BASE_URL\n+                + \"user/actions/{userId}\", WorkflowActionsTO.class,\n+                userTO.getId());\n+        assertTrue(workflowActions.getActions().equals(\n+                Collections.singleton(\"activate\")));\n+\n         // 2. activate user\n         newUserTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n                 newUserTO, UserTO.class);"}]}