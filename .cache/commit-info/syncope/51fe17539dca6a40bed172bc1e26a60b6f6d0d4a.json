{"sha":"51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUxZmUxNzUzOWRjYTZhNDBiZWQxNzJiYzFlMjZhNjBiNmY2ZDBkNGE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2021-04-02T10:21:32Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-04-02T10:21:32Z"},"message":"[SYNCOPE-1545] Configuration > AM Policies (#256)","tree":{"sha":"fd4052add5d8d5b21f3aa6371b36926da47ef1f2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fd4052add5d8d5b21f3aa6371b36926da47ef1f2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZvAsCRBK7hj4Ov3rIwAAdHIIAAKGQMXnXCwkzYbAVQVEwP8j\n5TIhmlerZ0kuBc98e94ycD1uBNLuIkb6PAZ8hHui6A8QGmG1SXEX/MpTdhdsvySw\nLLZchqaG7kHcOF3dI1sLEAeDBC52+432yYvz5/R/+YZmXAT0nWPegU8zXdXf+7B2\nWR3B6Km9vSxpg2L2M9pAfsTIZYeJLHrjzgdcShoWceEUWixHZ9igrm7pLRLzXSjL\n1DvJ6i0xzVb3nQGNdGKV19y6A25riPKryvg6auaXmhEUUK8wOu37EE5OEV13JC7F\nGxoKZ+zxVGJ9BUxQGMWm/08sHbeyJ2I75kZfMNraJvCX4bdJtStTwHqou3/CWdk=\n=35wZ\n-----END PGP SIGNATURE-----\n","payload":"tree fd4052add5d8d5b21f3aa6371b36926da47ef1f2\nparent 6a496993a8134b19f1242a005525074f312bc569\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1617358892 +0200\ncommitter GitHub <noreply@github.com> 1617358892 +0200\n\n[SYNCOPE-1545] Configuration > AM Policies (#256)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"6a496993a8134b19f1242a005525074f312bc569","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a496993a8134b19f1242a005525074f312bc569","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6a496993a8134b19f1242a005525074f312bc569"}],"stats":{"total":2237,"additions":1354,"deletions":883},"files":[{"sha":"9190785b52161d425728ff090742bb50ae9ca99b","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.client.console.commons.AMConstants;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n+import org.apache.syncope.client.console.panels.ModalDirectoryPanel;\n import org.apache.syncope.client.console.rest.ClientAppRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n@@ -98,7 +99,8 @@ protected List<IColumn<T, String>> getColumns() {\n         columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n         columns.add(new PropertyColumn<>(\n-                new StringResourceModel(\"name\", this), \"name\", \"name\"));\n+                new StringResourceModel(Constants.NAME_FIELD_NAME, this),\n+                Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME));\n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"clientAppId\", this), \"clientAppId\", \"clientAppId\"));\n \n@@ -133,11 +135,11 @@ public void onClick(final AjaxRequestTarget target, final ClientAppTO ignore) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ClientAppTO ignore) {\n                 model.setObject(ClientAppRestClient.read(type, model.getObject().getKey()));\n-                target.add(propertiesModal.setContent(new ClientAppPropertiesModalPanel<>(\n+                target.add(propertiesModal.setContent(new ModalDirectoryPanel<>(\n                         propertiesModal,\n-                        new ClientAppPropertiesDirectoryPanel<>(\"properties\", propertiesModal, type, model, pageRef),\n+                        new ClientAppPropertiesDirectoryPanel<>(\"panel\", propertiesModal, type, model, pageRef),\n                         pageRef)));\n-                propertiesModal.header(new Model<>(getString(\"properties.title\", new Model<>(model.getObject()))));\n+                propertiesModal.header(new Model<>(getString(\"properties.title\", model)));\n                 propertiesModal.show(true);\n             }\n         }, ActionLink.ActionType.TYPE_EXTENSIONS, AMEntitlement.CLIENTAPP_UPDATE);\n@@ -193,7 +195,7 @@ protected String paginatorRowsKey() {\n         return AMConstants.PREF_CLIENTAPP_PAGINATOR_ROWS;\n     }\n \n-    private class ClientAppDataProvider extends DirectoryDataProvider<T> {\n+    protected class ClientAppDataProvider extends DirectoryDataProvider<T> {\n \n         private static final long serialVersionUID = 4725679400450513556L;\n \n@@ -202,7 +204,7 @@ private class ClientAppDataProvider extends DirectoryDataProvider<T> {\n         ClientAppDataProvider(final int paginatorRows) {\n             super(paginatorRows);\n \n-            setSort(\"name\", SortOrder.ASCENDING);\n+            setSort(Constants.NAME_FIELD_NAME, SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n "},{"sha":"f1aa387344d2c0c5231ba5ba8c658766f0667953","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientAppModalPanelBuilder.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -77,7 +77,7 @@\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.ACCESS).stream().\n-                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -88,7 +88,7 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.ATTR_RELEASE).stream().\n-                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -99,7 +99,7 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.AUTH).stream().\n-                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -135,7 +135,8 @@ private class Profile extends AbstractModalPanel<T> {\n             List<Component> fields = new ArrayList<>();\n \n             AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n-                    \"field\", \"name\", new PropertyModel<>(clientAppTO, \"name\"), false);\n+                    \"field\", Constants.NAME_FIELD_NAME,\n+                    new PropertyModel<>(clientAppTO, Constants.NAME_FIELD_NAME), false);\n             fields.add(name.setRequired(true));\n \n             if (clientAppTO.getClientAppId() == null) {\n@@ -148,7 +149,8 @@ private class Profile extends AbstractModalPanel<T> {\n                     new PropertyModel<>(clientAppTO, \"clientAppId\")).setRequired(true));\n \n             fields.add(new AjaxTextFieldPanel(\n-                    \"field\", \"description\", new PropertyModel<>(clientAppTO, \"description\"), false));\n+                    \"field\", Constants.DESCRIPTION_FIELD_NAME,\n+                    new PropertyModel<>(clientAppTO, Constants.DESCRIPTION_FIELD_NAME), false));\n \n             AjaxDropDownChoicePanel<String> accessPolicy = new AjaxDropDownChoicePanel<>(\n                     \"field\", \"accessPolicy\", new PropertyModel<>(clientAppTO, \"accessPolicy\"), false);"},{"sha":"c73b9a4be0cad44417b034dd9cf6b72c2894b98b","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientAppPropertyWizardBuilder.java","status":"modified","additions":2,"deletions":32,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppPropertyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppPropertyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppPropertyWizardBuilder.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -20,20 +20,13 @@\n \n import java.io.Serializable;\n import org.apache.syncope.client.console.rest.ClientAppRestClient;\n-import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n-import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n-import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wizards.AttrWizardBuilder;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.wicket.PageReference;\n-import org.apache.wicket.extensions.wizard.WizardModel;\n-import org.apache.wicket.extensions.wizard.WizardStep;\n-import org.apache.wicket.model.Model;\n-import org.apache.wicket.model.PropertyModel;\n \n-public class ClientAppPropertyWizardBuilder extends BaseAjaxWizardBuilder<Attr> {\n+public class ClientAppPropertyWizardBuilder extends AttrWizardBuilder {\n \n     private static final long serialVersionUID = 1L;\n \n@@ -52,29 +45,6 @@ public ClientAppPropertyWizardBuilder(\n         this.clientApp = clientApp;\n     }\n \n-    @Override\n-    protected WizardModel buildModelSteps(final Attr modelObject, final WizardModel wizardModel) {\n-        wizardModel.add(new AttrStep(modelObject));\n-        return wizardModel;\n-    }\n-\n-    private static class AttrStep extends WizardStep {\n-\n-        private static final long serialVersionUID = 1L;\n-\n-        AttrStep(final Attr modelObject) {\n-            AjaxTextFieldPanel schema = new AjaxTextFieldPanel(\n-                    Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME, new PropertyModel<>(modelObject, \"schema\"));\n-            schema.addRequiredLabel();\n-            schema.setEnabled(modelObject.getSchema() == null);\n-            add(schema);\n-\n-            AjaxTextFieldPanel value = new AjaxTextFieldPanel(\"panel\", \"values\", new Model<>());\n-            add(new MultiFieldPanel.Builder<String>(\n-                    new PropertyModel<>(modelObject, \"values\")).build(\"values\", \"values\", value));\n-        }\n-    }\n-\n     @Override\n     protected Serializable onApplyInternal(final Attr modelObject) {\n         clientApp.getProperties().removeIf(p -> modelObject.getSchema().equals(p.getSchema()));"},{"sha":"9410d4ddec76c02c2c83e1ad1c727f3e396ce3cb","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/commons/AMConstants.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMConstants.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -30,6 +30,9 @@ public final class AMConstants {\n \n     public static final String PREF_CLIENTAPP_PROPERTIES_PAGINATOR_ROWS = \"clientapp.properties.paginator.rows\";\n \n+    public static final String PREF_ACCESS_POLICY_CONF_REQUIRED_ATTRS_PAGINATOR_ROWS =\n+            \"accesspolicy.conf.requiredattrs.paginator.rows\";\n+\n     private AMConstants() {\n         // private constructor for static utility class\n     }"},{"sha":"46684c5525118fa89608c14f438ff5886ca61cd2","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/commons/AMRealmPolicyProvider.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMRealmPolicyProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMRealmPolicyProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMRealmPolicyProvider.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -45,7 +45,7 @@ public class AMRealmPolicyProvider extends IdRepoRealmPolicyProvider {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.ACCESS).stream().\n-                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -56,7 +56,7 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.ATTR_RELEASE).stream().\n-                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -67,7 +67,7 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.AUTH).stream().\n-                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n "},{"sha":"dfdd43ce8d8b5d21aba92f977d17b214bc7abdca","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/AuthModuleDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAuthModuleDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -92,7 +92,8 @@ protected List<IColumn<AuthModuleTO, String>> getColumns() {\n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(Constants.KEY_FIELD_NAME, this),\n                 Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n-        columns.add(new PropertyColumn<>(new ResourceModel(\"description\"), \"description\", \"description\"));\n+        columns.add(new PropertyColumn<>(new ResourceModel(Constants.DESCRIPTION_FIELD_NAME),\n+                Constants.DESCRIPTION_FIELD_NAME, Constants.DESCRIPTION_FIELD_NAME));\n         columns.add(new PropertyColumn<AuthModuleTO, String>(new ResourceModel(\"type\"), \"conf\") {\n \n             private static final long serialVersionUID = -1822504503325964706L;"},{"sha":"7008abe9b1fe8cba816978f77cc31a299a7415cf","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SRARouteDirectoryPanel.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -27,7 +27,6 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.AMConstants;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.SRARouteDirectoryPanel.SRARouteProvider;\n import org.apache.syncope.client.console.rest.SRARouteRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n@@ -36,6 +35,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SRARouteTO;\n@@ -77,8 +77,11 @@ public SRARouteDirectoryPanel(final String id, final PageReference pageRef) {\n     protected List<IColumn<SRARouteTO, String>> getColumns() {\n         List<IColumn<SRARouteTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<>(new StringResourceModel(\"key\", this), \"key\"));\n-        columns.add(new PropertyColumn<>(new StringResourceModel(\"name\", this), \"name\", \"name\"));\n+        columns.add(new KeyPropertyColumn<>(\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n+        columns.add(new PropertyColumn<>(\n+                new StringResourceModel(Constants.NAME_FIELD_NAME, this),\n+                Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME));\n         columns.add(new PropertyColumn<>(new StringResourceModel(\"target\", this), \"target\", \"target\"));\n         columns.add(new PropertyColumn<>(new StringResourceModel(\"type\", this), \"type\", \"type\"));\n         columns.add(new BooleanPropertyColumn<>(new StringResourceModel(\"logout\", this), \"logout\", \"logout\"));\n@@ -132,7 +135,7 @@ public void onClick(final AjaxRequestTarget target, final SRARouteTO ignore) {\n                     LOG.error(\"While deleting {}\", route.getKey(), e);\n                     SyncopeConsoleSession.get().onException(e);\n                 }\n-                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         }, ActionLink.ActionType.DELETE, AMEntitlement.SRA_ROUTE_DELETE, true);\n \n@@ -162,7 +165,7 @@ protected static final class SRARouteProvider extends DirectoryDataProvider<SRAR\n \n         public SRARouteProvider(final int paginatorRows) {\n             super(paginatorRows);\n-            setSort(\"name\", SortOrder.ASCENDING);\n+            setSort(Constants.NAME_FIELD_NAME, SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n "},{"sha":"be3c6ac22f84632e934547bb555d611e4e499d3f","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SRARouteWizardBuilder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -23,6 +23,7 @@\n import java.util.List;\n import org.apache.syncope.client.console.rest.SRARouteRestClient;\n import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n@@ -71,7 +72,8 @@ public static class Profile extends WizardStep {\n \n         public Profile(final SRARouteTO route) {\n             add(new AjaxTextFieldPanel(\n-                    \"name\", \"name\", new PropertyModel<>(route, \"name\"), false).\n+                    Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME,\n+                    new PropertyModel<>(route, Constants.NAME_FIELD_NAME), false).\n                     addRequiredLabel().setEnabled(true));\n \n             AjaxTextFieldPanel target = new AjaxTextFieldPanel(\"target\", \"target\", new IModel<String>() {"},{"sha":"35cd4cab6652f802b12ed09ad3691a618bdaaa31","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AccessPolicyDirectoryPanel.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -18,11 +18,23 @@\n  */\n package org.apache.syncope.client.console.policies;\n \n+import java.util.List;\n+import org.apache.syncope.client.console.panels.ModalDirectoryPanel;\n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.StringResourceModel;\n \n public class AccessPolicyDirectoryPanel extends PolicyDirectoryPanel<AccessPolicyTO> {\n \n@@ -39,4 +51,34 @@ public AccessPolicyDirectoryPanel(final String id, final PageReference pageRef)\n \n         initResultTable();\n     }\n+\n+    @Override\n+    protected void addCustomColumnFields(final List<IColumn<AccessPolicyTO, String>> columns) {\n+        columns.add(new BooleanPropertyColumn<>(\n+                new StringResourceModel(\"enabled\", this), \"enabled\", \"enabled\"));\n+        columns.add(new BooleanPropertyColumn<>(\n+                new StringResourceModel(\"ssoEnabled\", this), \"ssoEnabled\", \"ssoEnabled\"));\n+    }\n+\n+    @Override\n+    protected void addCustomActions(final ActionsPanel<AccessPolicyTO> panel, final IModel<AccessPolicyTO> model) {\n+        panel.add(new ActionLink<AccessPolicyTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final AccessPolicyTO ignore) {\n+                model.setObject(PolicyRestClient.read(type, model.getObject().getKey()));\n+                if (model.getObject().getConf() == null) {\n+                    model.getObject().setConf(new DefaultAccessPolicyConf());\n+                }\n+                target.add(ruleCompositionModal.setContent(new ModalDirectoryPanel<>(\n+                        ruleCompositionModal,\n+                        new AccessPolicyRequiredAttrsDirectoryPanel(\"panel\", ruleCompositionModal, model, pageRef),\n+                        pageRef)));\n+                ruleCompositionModal.header(new Model<>(getString(\"requiredAttrs.title\", model)));\n+                ruleCompositionModal.show(true);\n+            }\n+        }, ActionLink.ActionType.TYPE_EXTENSIONS, IdRepoEntitlement.POLICY_UPDATE);\n+    }\n }"},{"sha":"91ccb231f29db16de5fba96a2973f19e8f20e351","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AccessPolicyRequiredAttrsDirectoryPanel.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyRequiredAttrsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyRequiredAttrsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyRequiredAttrsDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.AMConstants;\n+import org.apache.syncope.client.console.panels.AttrListDirectoryPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.model.IModel;\n+\n+public class AccessPolicyRequiredAttrsDirectoryPanel extends AttrListDirectoryPanel {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final BaseModal<AccessPolicyTO> wizardModal;\n+\n+    private final IModel<AccessPolicyTO> model;\n+\n+    public AccessPolicyRequiredAttrsDirectoryPanel(\n+            final String id,\n+            final BaseModal<AccessPolicyTO> wizardModal,\n+            final IModel<AccessPolicyTO> model,\n+            final PageReference pageRef) {\n+\n+        super(id, pageRef, false);\n+\n+        this.wizardModal = wizardModal;\n+        this.model = model;\n+\n+        setOutputMarkupId(true);\n+\n+        enableUtilityButton();\n+        setFooterVisibility(false);\n+\n+        addNewItemPanelBuilder(\n+                new AccessPolicyRequiredAttrsWizardBuilder(model.getObject(), new Attr(), pageRef), true);\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof ExitEvent) {\n+            AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n+            wizardModal.close(target);\n+        } else if (event.getPayload() instanceof AjaxWizard.EditItemActionEvent) {\n+            @SuppressWarnings(\"unchecked\")\n+            AjaxWizard.EditItemActionEvent<?> payload = (AjaxWizard.EditItemActionEvent<?>) event.getPayload();\n+            payload.getTarget().ifPresent(actionTogglePanel::close);\n+        }\n+        super.onEvent(event);\n+    }\n+\n+    @Override\n+    protected AttrListProvider dataProvider() {\n+        return new AccessPolicyRequiredAttrsProvider(rows);\n+    }\n+\n+    @Override\n+    protected String paginatorRowsKey() {\n+        return AMConstants.PREF_ACCESS_POLICY_CONF_REQUIRED_ATTRS_PAGINATOR_ROWS;\n+    }\n+\n+    protected final class AccessPolicyRequiredAttrsProvider extends AttrListProvider {\n+\n+        private static final long serialVersionUID = -185944053385660794L;\n+\n+        private AccessPolicyRequiredAttrsProvider(final int paginatorRows) {\n+            super(paginatorRows);\n+        }\n+\n+        @Override\n+        protected List<Attr> list() {\n+            return model.getObject().getConf().getRequiredAttrs();\n+        }\n+    }\n+}"},{"sha":"1636e38b760aa93caab16058ea4ad8febe968089","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AccessPolicyRequiredAttrsWizardBuilder.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyRequiredAttrsWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyRequiredAttrsWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyRequiredAttrsWizardBuilder.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.wizards.AttrWizardBuilder;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.wicket.PageReference;\n+\n+public class AccessPolicyRequiredAttrsWizardBuilder extends AttrWizardBuilder {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final AccessPolicyTO accessPolicy;\n+\n+    public AccessPolicyRequiredAttrsWizardBuilder(\n+            final AccessPolicyTO accessPolicy,\n+            final Attr attr,\n+            final PageReference pageRef) {\n+\n+        super(attr, pageRef);\n+        this.accessPolicy = accessPolicy;\n+    }\n+\n+    @Override\n+    protected Serializable onApplyInternal(final Attr modelObject) {\n+        accessPolicy.getConf().getRequiredAttrs().removeIf(p -> modelObject.getSchema().equals(p.getSchema()));\n+        accessPolicy.getConf().getRequiredAttrs().add(modelObject);\n+\n+        PolicyRestClient.update(PolicyType.ACCESS, accessPolicy);\n+\n+        return null;\n+    }\n+}"},{"sha":"b1ca139c4b4247194014930327199ecd87357389","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AttrReleasePolicyDirectoryPanel.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -18,11 +18,18 @@\n  */\n package org.apache.syncope.client.console.policies;\n \n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n \n public class AttrReleasePolicyDirectoryPanel extends PolicyDirectoryPanel<AttrReleasePolicyTO> {\n \n@@ -39,4 +46,27 @@ public AttrReleasePolicyDirectoryPanel(final String id, final PageReference page\n \n         initResultTable();\n     }\n+\n+    @Override\n+    protected void addCustomActions(\n+            final ActionsPanel<AttrReleasePolicyTO> panel,\n+            final IModel<AttrReleasePolicyTO> model) {\n+\n+        panel.add(new ActionLink<AttrReleasePolicyTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final AttrReleasePolicyTO ignore) {\n+                model.setObject(PolicyRestClient.read(type, model.getObject().getKey()));\n+                if (model.getObject().getConf() == null) {\n+                    model.getObject().setConf(new DefaultAttrReleasePolicyConf());\n+                }\n+                target.add(policySpecModal.setContent(\n+                        new AttrReleasePolicyModalPanel(policySpecModal, model, pageRef)));\n+                policySpecModal.header(new Model<>(getString(\"attrReleasePolicyConf.title\", model)));\n+                policySpecModal.show(true);\n+            }\n+        }, ActionLink.ActionType.TYPE_EXTENSIONS, IdRepoEntitlement.POLICY_UPDATE);\n+    }\n }"},{"sha":"7b244aef48bc122216595e193906a4e82a303bd7","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AttrReleasePolicyModalPanel.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyModalPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.panels.AbstractModalPanel;\n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class AttrReleasePolicyModalPanel extends AbstractModalPanel<AttrReleasePolicyTO> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final IModel<AttrReleasePolicyTO> model;\n+\n+    public AttrReleasePolicyModalPanel(\n+            final BaseModal<AttrReleasePolicyTO> modal,\n+            final IModel<AttrReleasePolicyTO> model,\n+            final PageReference pageRef) {\n+\n+        super(modal, pageRef);\n+        this.model = model;\n+\n+        add(new AjaxCheckBoxPanel(\n+                \"status\",\n+                \"status\",\n+                new PropertyModel<>(model.getObject().getConf(), \"status\"),\n+                false));\n+\n+        AjaxTextFieldPanel allowedAttr = new AjaxTextFieldPanel(\"panel\", \"allowedAttrs\", new Model<>());\n+        add(new MultiFieldPanel.Builder<String>(\n+                new PropertyModel<>(model.getObject().getConf(), \"allowedAttrs\")).build(\n+                \"allowedAttrs\",\n+                \"allowedAttrs\",\n+                allowedAttr));\n+\n+        AjaxTextFieldPanel excludedAttr = new AjaxTextFieldPanel(\"panel\", \"excludedAttrs\", new Model<>());\n+        add(new MultiFieldPanel.Builder<String>(\n+                new PropertyModel<>(model.getObject().getConf(), \"excludedAttrs\")).build(\n+                \"excludedAttrs\",\n+                \"excludedAttrs\",\n+                excludedAttr));\n+\n+        AjaxTextFieldPanel includeOnlyAttr = new AjaxTextFieldPanel(\"panel\", \"includeOnlyAttrs\", new Model<>());\n+        add(new MultiFieldPanel.Builder<String>(\n+                new PropertyModel<>(model.getObject().getConf(), \"includeOnlyAttrs\")).build(\n+                \"includeOnlyAttrs\",\n+                \"includeOnlyAttrs\",\n+                includeOnlyAttr));\n+    }\n+\n+    @Override\n+    public void onSubmit(final AjaxRequestTarget target) {\n+        try {\n+            PolicyRestClient.update(PolicyType.ATTR_RELEASE, model.getObject());\n+\n+            SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+            modal.close(target);\n+        } catch (Exception e) {\n+            LOG.error(\"While updating Attribute Release Policy {}\", model.getObject().getKey(), e);\n+            SyncopeConsoleSession.get().onException(e);\n+        }\n+        ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+    }\n+}"},{"sha":"b0b493b0cc73a261a61d99d7d275ca0537191d3b","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AuthPolicyDirectoryPanel.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAuthPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAuthPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAuthPolicyDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -18,11 +18,18 @@\n  */\n package org.apache.syncope.client.console.policies;\n \n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n \n public class AuthPolicyDirectoryPanel extends PolicyDirectoryPanel<AuthPolicyTO> {\n \n@@ -39,4 +46,25 @@ public AuthPolicyDirectoryPanel(final String id, final PageReference pageRef) {\n \n         initResultTable();\n     }\n+\n+    @Override\n+    protected void addCustomActions(final ActionsPanel<AuthPolicyTO> panel, final IModel<AuthPolicyTO> model) {\n+\n+        panel.add(new ActionLink<AuthPolicyTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final AuthPolicyTO ignore) {\n+                model.setObject(PolicyRestClient.read(type, model.getObject().getKey()));\n+                if (model.getObject().getConf() == null) {\n+                    model.getObject().setConf(new DefaultAuthPolicyConf());\n+                }\n+                target.add(policySpecModal.setContent(\n+                        new AuthPolicyModalPanel(policySpecModal, model, pageRef)));\n+                policySpecModal.header(new Model<>(getString(\"authPolicyConf.title\", model)));\n+                policySpecModal.show(true);\n+            }\n+        }, ActionLink.ActionType.TYPE_EXTENSIONS, IdRepoEntitlement.POLICY_UPDATE);\n+    }\n }"},{"sha":"ad50eb4dce00dc324869d07a5957c21fec9d2d1e","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AuthPolicyModalPanel.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAuthPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAuthPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAuthPolicyModalPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.panels.AbstractModalPanel;\n+import org.apache.syncope.client.console.rest.AuthModuleRestClient;\n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n+import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class AuthPolicyModalPanel extends AbstractModalPanel<AuthPolicyTO> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final IModel<List<String>> allAuthModules = new LoadableDetachableModel<List<String>>() {\n+\n+        private static final long serialVersionUID = -2012833443695917883L;\n+\n+        @Override\n+        protected List<String> load() {\n+            return AuthModuleRestClient.list().stream().map(AuthModuleTO::getKey).sorted().collect(Collectors.toList());\n+        }\n+    };\n+\n+    private final IModel<AuthPolicyTO> model;\n+\n+    public AuthPolicyModalPanel(\n+            final BaseModal<AuthPolicyTO> modal,\n+            final IModel<AuthPolicyTO> model,\n+            final PageReference pageRef) {\n+\n+        super(modal, pageRef);\n+        this.model = model;\n+\n+        add(new AjaxCheckBoxPanel(\n+                \"tryAll\",\n+                \"tryAll\",\n+                new PropertyModel<>(model.getObject().getConf(), \"tryAll\"),\n+                false));\n+\n+        add(new AjaxPalettePanel.Builder<String>().setName(\"authModules\").build(\n+                \"authModules\",\n+                new PropertyModel<>(model.getObject().getConf(), \"authModules\"),\n+                allAuthModules));\n+    }\n+\n+    @Override\n+    public void onSubmit(final AjaxRequestTarget target) {\n+        try {\n+            PolicyRestClient.update(PolicyType.AUTH, model.getObject());\n+\n+            SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+            modal.close(target);\n+        } catch (Exception e) {\n+            LOG.error(\"While updating Auth Policy {}\", model.getObject().getKey(), e);\n+            SyncopeConsoleSession.get().onException(e);\n+        }\n+        ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+    }\n+}"},{"sha":"d8d44a94941133b97350c2949636a2f401a018cd","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -97,7 +97,8 @@ public static class Profile extends WizardStep {\n             add(key);\n \n             AjaxTextFieldPanel description = new AjaxTextFieldPanel(\n-                    \"description\", getString(\"description\"), new PropertyModel<>(authModule, \"description\"));\n+                    Constants.DESCRIPTION_FIELD_NAME, getString(Constants.DESCRIPTION_FIELD_NAME),\n+                    new PropertyModel<>(authModule, Constants.DESCRIPTION_FIELD_NAME));\n             add(description);\n \n             AjaxDropDownChoicePanel<String> conf = new AjaxDropDownChoicePanel<>(\"conf\", getString(\"type\"), isNew"},{"sha":"061ee9f16388189d972a0ba62feffc7c8d69cda9","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/policies/AttrReleasePolicyModalPanel.html","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyModalPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyModalPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAttrReleasePolicyModalPanel.html?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -0,0 +1,34 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"status\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"allowedAttrs\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"excludedAttrs\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"includeOnlyAttrs\"/>\n+    </div>\n+  </wicket:extend>\n+</html>"},{"sha":"b71bbf3fe21f8c12b07a2dc66e1589a636b62857","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/policies/AuthPolicyModalPanel.html","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAuthPolicyModalPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAuthPolicyModalPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAuthPolicyModalPanel.html?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -0,0 +1,28 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"tryAll\"/>\n+    </div>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"authModules\"/>\n+    </div>\n+  </wicket:extend>\n+</html>"},{"sha":"bbe97bec4208eb6ec82e5ccd4fc57226a1a41d1e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/MergeLinkedAccountsReviewPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMergeLinkedAccountsReviewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMergeLinkedAccountsReviewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMergeLinkedAccountsReviewPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wizards.any.MergeLinkedAccountsWizardModel;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -94,7 +95,8 @@ protected List<IColumn<LinkedAccountTO, String>> getColumns() {\n             columns.add(new PropertyColumn<>(\n                     new ResourceModel(\"connObjectKeyValue\"), \"connObjectKeyValue\", \"connObjectKeyValue\"));\n             columns.add(new PropertyColumn<>(\n-                    new ResourceModel(\"username\"), \"username\", \"username\"));\n+                    new ResourceModel(Constants.USERNAME_FIELD_NAME),\n+                    Constants.USERNAME_FIELD_NAME, Constants.USERNAME_FIELD_NAME));\n             columns.add(new BooleanPropertyColumn<>(\n                     new ResourceModel(\"suspended\"), \"suspended\", \"suspended\"));\n             return columns;"},{"sha":"5b9935f34b53beadd167ed1d762b8efd1180f6be","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -30,7 +30,6 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.AbstractModalPanel;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.ImplementationRestClient;\n@@ -42,6 +41,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.common.lib.policy.AbstractCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n@@ -168,7 +168,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n             LOG.error(\"While creating/updating policy\", e);\n             SyncopeConsoleSession.get().onException(e);\n         }\n-        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+        ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n     }\n \n     protected class CorrelationRulePanel extends Panel {\n@@ -200,15 +200,6 @@ protected class CorrelationRulePanel extends Panel {\n \n                 private static final long serialVersionUID = 807008909842554829L;\n \n-                private boolean orSchemas() {\n-                    AbstractCorrelationRuleConf conf = correlationRule.getObject().getDefaultRuleConf();\n-                    return conf instanceof DefaultPullCorrelationRuleConf\n-                            ? DefaultPullCorrelationRuleConf.class.cast(conf).isOrSchemas()\n-                            : conf instanceof DefaultPushCorrelationRuleConf\n-                                    ? DefaultPushCorrelationRuleConf.class.cast(conf).isOrSchemas()\n-                                    : false;\n-                }\n-\n                 @Override\n                 public Boolean getObject() {\n                     AbstractCorrelationRuleConf conf = correlationRule.getObject().getDefaultRuleConf();\n@@ -325,7 +316,8 @@ private List<String> getSchemas(final CorrelationRule rule) {\n                             : AnyTypeKind.ANY_OBJECT).stream().map(EntityTO::getKey).\n                             collect(Collectors.toList());\n             choices.add(Constants.KEY_FIELD_NAME);\n-            choices.add(rule.getAnyType().equals(AnyTypeKind.USER.name()) ? \"username\" : \"name\");\n+            choices.add(rule.getAnyType().equals(AnyTypeKind.USER.name())\n+                    ? Constants.USERNAME_FIELD_NAME : Constants.NAME_FIELD_NAME);\n             Collections.sort(choices);\n             return choices;\n         }"},{"sha":"256a1ba3563dd1e26a24d0db9fbe4d2b3d97a590","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -97,9 +97,10 @@ protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<StatusB\n \n     @Override\n     protected List<IColumn<StatusBean, String>> getColumns() {\n-        final List<IColumn<StatusBean, String>> columns = new ArrayList<>();\n+        List<IColumn<StatusBean, String>> columns = new ArrayList<>();\n \n-        columns.add(new PropertyColumn<>(new StringResourceModel(\"name\", this), \"name\", \"name\"));\n+        columns.add(new PropertyColumn<>(new StringResourceModel(Constants.NAME_FIELD_NAME, this),\n+                Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME));\n \n         return columns;\n     }\n@@ -234,7 +235,8 @@ protected class ResourceStatusDataProvider extends AbstractStatusBeanProvider {\n         private final AbstractAnyRestClient<? extends AnyTO> restClient;\n \n         public ResourceStatusDataProvider(final int paginatorRows) {\n-            super(paginatorRows, AnyTypeKind.USER.name().equals(type) ? \"username\" : \"name\");\n+            super(paginatorRows, AnyTypeKind.USER.name().equals(type)\n+                    ? Constants.USERNAME_FIELD_NAME : Constants.NAME_FIELD_NAME);\n \n             if (StringUtils.isEmpty(type)) {\n                 fiql = null;"},{"sha":"5044dea88c1cf455c0dcef33e0d89dc15c103558","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/LinkedAccountCredentialsPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountCredentialsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountCredentialsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountCredentialsPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -57,15 +57,15 @@ public LinkedAccountCredentialsPanel(\n \n         linkedAccountTO = modelObject.getInnerObject();\n \n-        boolean isUsernameManagementEnabled = whichCredentials.contains(\"username\");\n+        boolean isUsernameManagementEnabled = whichCredentials.contains(Constants.USERNAME_FIELD_NAME);\n         AjaxTextFieldPanel usernameField = new AjaxTextFieldPanel(\n-                \"username\",\n-                \"username\",\n-                new PropertyModel<>(linkedAccountTO, \"username\"));\n+                Constants.USERNAME_FIELD_NAME,\n+                Constants.USERNAME_FIELD_NAME,\n+                new PropertyModel<>(linkedAccountTO, Constants.USERNAME_FIELD_NAME));\n         FieldPanel.class.cast(usernameField).setReadOnly(StringUtils.isBlank(linkedAccountTO.getUsername()));\n         LinkedAccountPlainAttrProperty usernameProperty = new LinkedAccountPlainAttrProperty();\n         usernameProperty.setOverridable(StringUtils.isNotBlank(linkedAccountTO.getUsername()));\n-        usernameProperty.setSchema(\"username\");\n+        usernameProperty.setSchema(Constants.USERNAME_FIELD_NAME);\n         usernameProperty.getValues().add(linkedAccountTO.getUsername());\n         usernameField.showExternAction(\n                 checkboxToggle(usernameProperty, usernameField).setEnabled(isUsernameManagementEnabled));\n@@ -117,14 +117,14 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                         if (model.getObject()) {\n                             if (property.getSchema().equals(\"password\")) {\n                                 linkedAccountTO.setPassword(passwordValue);\n-                            } else if (property.getSchema().equals(\"username\")) {\n+                            } else if (property.getSchema().equals(Constants.USERNAME_FIELD_NAME)) {\n                                 linkedAccountTO.setUsername(usernameValue);\n                             }\n                         } else {\n                             if (property.getSchema().equals(\"password\")) {\n                                 passwordValue = linkedAccountTO.getPassword();\n                                 linkedAccountTO.setPassword(null);\n-                            } else if (property.getSchema().equals(\"username\")) {\n+                            } else if (property.getSchema().equals(Constants.USERNAME_FIELD_NAME)) {\n                                 usernameValue = linkedAccountTO.getUsername();\n                                 linkedAccountTO.setUsername(null);\n                             }"},{"sha":"fe37aa99d6e081f5931c4250ef04fef6e12e2948","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -46,7 +46,7 @@ public class ResourceSecurityPanel extends WizardStep {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.PASSWORD).stream().\n-                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -57,7 +57,7 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.ACCOUNT).stream().\n-                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -68,7 +68,7 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.PULL).stream().\n-                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -79,7 +79,7 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.PUSH).stream().\n-                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n "},{"sha":"d918732311bc3510ac41b1062fd87ad4ca7d5b68","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -76,11 +76,11 @@ public AnyDataProvider(\n         // default sorting\n         switch (type) {\n             case \"USER\":\n-                setSort(\"username\", SortOrder.ASCENDING);\n+                setSort(Constants.USERNAME_FIELD_NAME, SortOrder.ASCENDING);\n                 break;\n \n             case \"GROUP\":\n-                setSort(\"name\", SortOrder.ASCENDING);\n+                setSort(Constants.NAME_FIELD_NAME, SortOrder.ASCENDING);\n                 break;\n \n             default:"},{"sha":"797e254d8771a63d5b994b1a17452d85c4b79055","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoRealmPolicyProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoRealmPolicyProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoRealmPolicyProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoRealmPolicyProvider.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -45,7 +45,7 @@ public class IdRepoRealmPolicyProvider implements RealmPolicyProvider {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.ACCOUNT).stream().\n-                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -56,7 +56,7 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.PASSWORD).stream().\n-                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n "},{"sha":"5c623b4a13e6a6a220ba59ae15dca29e0dd62e60","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/SortableAnyProviderComparator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -33,7 +33,7 @@\n     private static final long serialVersionUID = 1775967163571699258L;\n \n     private static final Set<String> INLINE_PROPS = Set.of(\n-            Constants.KEY_FIELD_NAME, \"status\", \"token\", \"username\", \"name\");\n+            Constants.KEY_FIELD_NAME, \"status\", \"token\", Constants.USERNAME_FIELD_NAME, Constants.NAME_FIELD_NAME);\n \n     public SortableAnyProviderComparator(final SortableDataProvider<T, String> provider) {\n         super(provider);"},{"sha":"015e625bdac1901816d304fa6b2bee37bc13c2ff","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -394,7 +394,7 @@ private static List<String> getSchemas() {\n                 .map(anyTypeTO -> anyTypeTO.getClasses().toArray(new String[] {})).orElseGet(() -> new String[0]);\n \n         List<String> result = new ArrayList<>();\n-        result.add(\"username\");\n+        result.add(Constants.USERNAME_FIELD_NAME);\n \n         result.addAll(SchemaRestClient.<PlainSchemaTO>getSchemas(SchemaType.PLAIN, null, anyTypeClasses).\n                 stream().map(EntityTO::getKey).collect(Collectors.toList()));"},{"sha":"2b1ee655813a7b86a2c0e5370aaf5d0b46ec8308","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AbstractModalPanel.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractModalPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -40,20 +40,12 @@\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractModalPanel.class);\n \n-    protected final BaseModal<T> modal;\n-\n-    protected static final String CANCEL = \"cancel\";\n-\n-    protected static final String SUBMIT = \"submit\";\n+    private static final HeaderItem META = new MetaHeaderItem(\"X-UA-Compatible\", \"IE=edge\");\n \n-    protected static final String APPLY = \"apply\";\n-\n-    protected static final String FORM = \"form\";\n+    protected final BaseModal<T> modal;\n \n     protected final PageReference pageRef;\n \n-    protected final HeaderItem meta = new MetaHeaderItem(\"X-UA-Compatible\", \"IE=edge\");\n-\n     public AbstractModalPanel(final BaseModal<T> modal, final PageReference pageRef) {\n         this(BaseModal.getContentId(), modal, pageRef);\n     }\n@@ -67,7 +59,7 @@ public AbstractModalPanel(final String id, final BaseModal<T> modal, final PageR\n     @Override\n     public void renderHead(final IHeaderResponse response) {\n         super.renderHead(response);\n-        response.render(new PriorityHeaderItem(meta));\n+        response.render(new PriorityHeaderItem(META));\n     }\n \n     @Override"},{"sha":"c39b578ffca113b856dc64772edefb8d34bfe813","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -310,7 +310,7 @@ protected AbstractSearchPanel getSearchPanel(final String id) {\n             case USER:\n                 clause.setComparator(SearchClause.Comparator.EQUALS);\n                 clause.setType(SearchClause.Type.ATTRIBUTE);\n-                clause.setProperty(\"username\");\n+                clause.setProperty(Constants.USERNAME_FIELD_NAME);\n \n                 panel = new UserSearchPanel.Builder(\n                         new ListModel<>(clauses)).required(true).enableSearch().build(id);\n@@ -319,7 +319,7 @@ protected AbstractSearchPanel getSearchPanel(final String id) {\n             case GROUP:\n                 clause.setComparator(SearchClause.Comparator.EQUALS);\n                 clause.setType(SearchClause.Type.ATTRIBUTE);\n-                clause.setProperty(\"name\");\n+                clause.setProperty(Constants.NAME_FIELD_NAME);\n \n                 panel = new GroupSearchPanel.Builder(\n                         new ListModel<>(clauses)).required(true).enableSearch().build(id);\n@@ -328,7 +328,7 @@ protected AbstractSearchPanel getSearchPanel(final String id) {\n             case ANY_OBJECT:\n                 clause.setComparator(SearchClause.Comparator.EQUALS);\n                 clause.setType(SearchClause.Type.ATTRIBUTE);\n-                clause.setProperty(\"name\");\n+                clause.setProperty(Constants.NAME_FIELD_NAME);\n \n                 panel = new AnyObjectSearchPanel.Builder(anyTypeTO.getKey(),\n                         new ListModel<>(clauses)).required(true).enableSearch().build(id);"},{"sha":"91dff7f1a99408ee74621fdc2e91b42392b2e315","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.wizards.AbstractModalPanelBuilder;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n@@ -88,7 +89,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n                             LOG.error(\"While creating or updating {}\", modelObject, e);\n                             SyncopeConsoleSession.get().onException(e);\n                         }\n-                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                        ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n                     }\n                 };\n             }"},{"sha":"b91d03224c436780f6be03fbf1812ceddbf249b7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ApplicationDirectoryPanel.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -29,18 +29,19 @@\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.IdRepoConstants;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.ApplicationDirectoryPanel.ApplicationDataProvider;\n import org.apache.syncope.client.console.rest.ApplicationRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ApplicationTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PrivilegeTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.wicket.MarkupContainer;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -49,7 +50,6 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.repeater.Item;\n import org.apache.wicket.model.CompoundPropertyModel;\n@@ -110,7 +110,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 target.add(modal);\n             }\n         };\n-        ((WebMarkupContainer) get(\"container:content\")).addOrReplace(newApplLink);\n+        ((MarkupContainer) get(\"container:content\")).addOrReplace(newApplLink);\n         MetaDataRoleAuthorizationStrategy.authorize(newApplLink, RENDER, IdRepoEntitlement.APPLICATION_CREATE);\n \n         initResultTable();\n@@ -132,7 +132,8 @@ protected List<IColumn<ApplicationTO, String>> getColumns() {\n \n         columns.add(new PropertyColumn<>(\n                 new ResourceModel(Constants.KEY_FIELD_NAME), Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n-        columns.add(new PropertyColumn<>(new ResourceModel(\"description\"), \"description\", \"description\"));\n+        columns.add(new PropertyColumn<>(new ResourceModel(Constants.DESCRIPTION_FIELD_NAME),\n+                Constants.DESCRIPTION_FIELD_NAME, Constants.DESCRIPTION_FIELD_NAME));\n         columns.add(new AbstractColumn<ApplicationTO, String>(new ResourceModel(\"privileges\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n@@ -201,7 +202,7 @@ public void onClick(final AjaxRequestTarget target, final ApplicationTO ignore)\n                     LOG.error(\"While deleting application {}\", model.getObject().getKey(), e);\n                     SyncopeConsoleSession.get().onException(e);\n                 }\n-                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         }, ActionLink.ActionType.DELETE, IdRepoEntitlement.APPLICATION_DELETE, true);\n "},{"sha":"f77fed364979ea221f1ba311b3eab356d6d15a23","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ApplicationModalPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationModalPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -58,7 +58,8 @@ public ApplicationModalPanel(\n         add(key);\n \n         AjaxTextFieldPanel description = new AjaxTextFieldPanel(\n-                \"description\", \"description\", new PropertyModel<>(application, \"description\"), false);\n+                Constants.DESCRIPTION_FIELD_NAME, Constants.DESCRIPTION_FIELD_NAME,\n+                new PropertyModel<>(application, Constants.DESCRIPTION_FIELD_NAME), false);\n         description.setRequired(false);\n         add(description);\n     }"},{"sha":"375532a9d13c827977950e9745ba1c752b8f1def","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ListViewPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -231,7 +231,8 @@ private static ListView<String> header(final List<String> labels) {\n \n             @Override\n             protected void populateItem(final ListItem<String> item) {\n-                item.add(new Label(\"name\", new ResourceModel(item.getModelObject(), item.getModelObject())));\n+                item.add(new Label(Constants.NAME_FIELD_NAME,\n+                        new ResourceModel(item.getModelObject(), item.getModelObject())));\n             }\n         };\n     }"},{"sha":"6d524c537c55326871e6075ece6d884e3085a172","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ModalDirectoryPanel.java","status":"renamed","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FModalDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FModalDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FModalDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -16,21 +16,18 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.clientapps;\n+package org.apache.syncope.client.console.panels;\n \n-import org.apache.syncope.client.console.panels.AbstractModalPanel;\n+import java.io.Serializable;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n-import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.wicket.PageReference;\n \n-public class ClientAppPropertiesModalPanel<T extends ClientAppTO> extends AbstractModalPanel<T> {\n+public class ModalDirectoryPanel<T extends Serializable> extends AbstractModalPanel<T> {\n \n     private static final long serialVersionUID = 1L;\n \n-    public ClientAppPropertiesModalPanel(\n-            final BaseModal<T> modal,\n-            final ClientAppPropertiesDirectoryPanel<T> directoryPanel,\n-            final PageReference pageRef) {\n+    public ModalDirectoryPanel(\n+            final BaseModal<T> modal, final DirectoryPanel<?, ?, ?, ?> directoryPanel, final PageReference pageRef) {\n \n         super(modal, pageRef);\n         add(directoryPanel);","previous_filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientAppPropertiesModalPanel.java"},{"sha":"b44e8f0dab7cc9d2ea0ca20895c08e2c01d8361c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PrivilegeDirectoryPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -27,12 +27,12 @@\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.IdRepoConstants;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.rest.ApplicationRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -85,7 +85,8 @@ protected List<IColumn<PrivilegeTO, String>> getColumns() {\n \n         columns.add(new PropertyColumn<>(\n                 new ResourceModel(Constants.KEY_FIELD_NAME), Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n-        columns.add(new PropertyColumn<>(new ResourceModel(\"description\"), \"description\", \"description\"));\n+        columns.add(new PropertyColumn<>(new ResourceModel(Constants.DESCRIPTION_FIELD_NAME),\n+                Constants.DESCRIPTION_FIELD_NAME, Constants.DESCRIPTION_FIELD_NAME));\n \n         return columns;\n     }\n@@ -121,7 +122,7 @@ public void onClick(final AjaxRequestTarget target, final PrivilegeTO ignore) {\n                     LOG.error(\"While deleting {}\", model.getObject().getKey(), e);\n                     SyncopeConsoleSession.get().onException(e);\n                 }\n-                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         }, ActionLink.ActionType.DELETE, IdRepoEntitlement.APPLICATION_UPDATE, true);\n \n@@ -152,7 +153,7 @@ protected class PrivilegeDataProvider extends DirectoryDataProvider<PrivilegeTO>\n         public PrivilegeDataProvider(final int paginatorRows) {\n             super(paginatorRows);\n \n-            setSort(\"description\", SortOrder.ASCENDING);\n+            setSort(Constants.DESCRIPTION_FIELD_NAME, SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n "},{"sha":"a3aa1b325c34b26929d40a1216aea52334dbec03","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PrivilegeWizardBuilder.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeWizardBuilder.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -73,14 +73,15 @@ public Profile(final PrivilegeTO privilege) {\n                     : new StringResourceModel(\"privilege.edit\", Model.of(privilege)));\n \n             AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n-                    Constants.KEY_FIELD_NAME,\n-                    Constants.KEY_FIELD_NAME, new PropertyModel<>(privilege, Constants.KEY_FIELD_NAME), false);\n+                    Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME,\n+                    new PropertyModel<>(privilege, Constants.KEY_FIELD_NAME), false);\n             key.setReadOnly(privilege.getKey() != null);\n             key.setRequired(true);\n             add(key);\n \n             AjaxTextFieldPanel description = new AjaxTextFieldPanel(\n-                    \"description\", \"description\", new PropertyModel<>(privilege, \"description\"), false);\n+                    Constants.DESCRIPTION_FIELD_NAME, Constants.DESCRIPTION_FIELD_NAME,\n+                    new PropertyModel<>(privilege, Constants.DESCRIPTION_FIELD_NAME), false);\n             description.setRequired(false);\n             add(description);\n         }"},{"sha":"bda68fae283e880e71bf064b715f9c53daf0a34b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmDetails.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.client.console.commons.RealmPolicyProvider;\n import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n@@ -96,7 +97,8 @@ public RealmDetails(\n         container.add(generics.setVisible(unwrapped));\n \n         FieldPanel<String> name = new AjaxTextFieldPanel(\n-                \"name\", \"name\", new PropertyModel<>(realmTO, \"name\"), false);\n+                Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME,\n+                new PropertyModel<>(realmTO, Constants.NAME_FIELD_NAME), false);\n         name.addRequiredLabel();\n         generics.add(name);\n "},{"sha":"e6ea067e9c461a15e71c0a42df10cde8421a134f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RelationshipTypeDetailsPanel.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypeDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypeDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypeDetailsPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -31,28 +31,27 @@ public class RelationshipTypeDetailsPanel extends Panel {\n \n     private static final long serialVersionUID = -4962850669086306255L;\n \n-    public RelationshipTypeDetailsPanel(\n-            final String id,\n-            final RelationshipTypeTO relationshipTypeTO) {\n+    public RelationshipTypeDetailsPanel(final String id, final RelationshipTypeTO relationshipTypeTO) {\n         super(id);\n \n-        final WebMarkupContainer container = new WebMarkupContainer(\"container\");\n+        WebMarkupContainer container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupId(true);\n         add(container);\n \n-        final Form<RelationshipTypeTO> form = new Form<>(\"form\");\n+        Form<RelationshipTypeTO> form = new Form<>(\"form\");\n         form.setModel(new CompoundPropertyModel<>(relationshipTypeTO));\n         container.add(form);\n \n-        final AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n+        AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n                 Constants.KEY_FIELD_NAME, getString(Constants.KEY_FIELD_NAME),\n                 new PropertyModel<>(relationshipTypeTO, Constants.KEY_FIELD_NAME));\n         key.addRequiredLabel();\n         key.setEnabled(key.getModelObject() == null || key.getModelObject().isEmpty());\n         form.add(key);\n \n-        final AjaxTextFieldPanel description = new AjaxTextFieldPanel(\"description\",\n-                getString(\"description\"), new PropertyModel<>(relationshipTypeTO, \"description\"));\n+        AjaxTextFieldPanel description = new AjaxTextFieldPanel(\n+                Constants.DESCRIPTION_FIELD_NAME, getString(Constants.DESCRIPTION_FIELD_NAME),\n+                new PropertyModel<>(relationshipTypeTO, Constants.DESCRIPTION_FIELD_NAME));\n         description.addRequiredLabel();\n         form.add(description);\n     }"},{"sha":"84c6fbedd3e9ac57dc3a12ac802647535b10af49","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -28,10 +28,7 @@\n import org.apache.syncope.client.console.reports.ReportletWrapper;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n-import org.apache.syncope.client.console.wizards.any.GroupWrapper;\n-import org.apache.syncope.client.ui.commons.wizards.any.UserWrapper;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.JobTO;\n@@ -154,7 +151,7 @@ public TogglePanel<T> addInnerObject(final Component... childs) {\n \n     protected void setHeader(final AjaxRequestTarget target, final String header) {\n         this.header.setDefaultModelObject(Optional.ofNullable(header).map(s -> s.length() >= 40\n-            ? (s.substring(0, 30) + \" ... \") : s).orElse(StringUtils.EMPTY));\n+                ? (s.substring(0, 30) + \" ... \") : s).orElse(StringUtils.EMPTY));\n         target.add(this.header);\n     }\n \n@@ -169,13 +166,8 @@ protected String getTargetKey(final Serializable modelObject) {\n             key = new ResourceModel(\"actions\", StringUtils.EMPTY).getObject();\n         } else if (modelObject instanceof EntityTO) {\n             key = ((EntityTO) modelObject).getKey();\n-        } else if (modelObject instanceof UserWrapper) {\n-            key = ((UserWrapper) modelObject).getInnerObject().getKey();\n-        } else if (modelObject instanceof GroupWrapper) {\n-            key = ((GroupWrapper) modelObject).getInnerObject().getKey();\n-        } else if (modelObject instanceof AnyWrapper\n-                && AnyWrapper.class.cast(modelObject).getInnerObject() instanceof AnyObjectTO) {\n-            key = ((AnyObjectTO) ((AnyWrapper) modelObject).getInnerObject()).getKey();\n+        } else if (modelObject instanceof AnyWrapper) {\n+            key = ((AnyWrapper<?>) modelObject).getInnerObject().getKey();\n         } else if (modelObject instanceof Attr) {\n             key = ((Attr) modelObject).getSchema();\n         } else if (modelObject instanceof ConfParam) {"},{"sha":"4d0ce810bef35d88a0efb1c3a61569b8554b8aff","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -89,7 +89,7 @@ protected List<String> load() {\n                         null,\n                         1,\n                         Constants.MAX_GROUP_LIST_SIZE,\n-                        new SortParam<>(\"name\", true),\n+                        new SortParam<>(Constants.NAME_FIELD_NAME, true),\n                         null).stream().map(GroupTO::getName).collect(Collectors.toList());\n             }\n         };"},{"sha":"abc716a6b1ee9fe80de509926771e8a10f7b310f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -458,16 +458,16 @@ protected void onEvent(final AjaxRequestTarget target) {\n                             inputValue = \"*\" + inputValue;\n                         }\n                         if (!inputValue.endsWith(\"*\")) {\n-                            inputValue = inputValue + \"*\";\n+                            inputValue += \"*\";\n                         }\n                         property.setChoices(groupRestClient.search(\n                                 SyncopeConstants.ROOT_REALM,\n                                 SyncopeClient.getGroupSearchConditionBuilder().\n-                                        is(\"name\").equalToIgnoreCase(inputValue).\n+                                        is(Constants.NAME_FIELD_NAME).equalToIgnoreCase(inputValue).\n                                         query(),\n                                 1,\n                                 Constants.MAX_GROUP_LIST_SIZE,\n-                                new SortParam<>(\"name\", true),\n+                                new SortParam<>(Constants.NAME_FIELD_NAME, true),\n                                 null).stream().map(GroupTO::getName).collect(Collectors.toList()));\n                     }\n                 }"},{"sha":"c2f7536df7297a7882033da95562fa493e710374","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/AccountPolicyDirectoryPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -32,7 +32,6 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.Model;\n import org.apache.wicket.model.StringResourceModel;\n \n /**\n@@ -76,7 +75,7 @@ public void onClick(final AjaxRequestTarget target, final AccountPolicyTO ignore\n                         ruleCompositionModal, model.getObject().getKey(), PolicyType.ACCOUNT, pageRef)));\n \n                 ruleCompositionModal.header(new StringResourceModel(\n-                        \"policy.rules\", AccountPolicyDirectoryPanel.this, Model.of(model.getObject())));\n+                        \"policy.rules\", AccountPolicyDirectoryPanel.this, model));\n \n                 MetaDataRoleAuthorizationStrategy.authorize(\n                         ruleCompositionModal.getForm(), ENABLE, IdRepoEntitlement.POLICY_UPDATE);\n@@ -85,5 +84,4 @@ public void onClick(final AjaxRequestTarget target, final AccountPolicyTO ignore\n             }\n         }, ActionLink.ActionType.COMPOSE, IdRepoEntitlement.POLICY_UPDATE);\n     }\n-\n }"},{"sha":"ea16fe50e7b3049485c729f693c07b78a5a02812","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.IdRepoConstants;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.CollectionPropertyColumn;\n@@ -38,6 +37,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -76,7 +76,7 @@ protected void onConfigure() {\n \n     protected final BaseModal<T> policySpecModal = new BaseModal<>(Constants.OUTER);\n \n-    private final PolicyType type;\n+    protected final PolicyType type;\n \n     public PolicyDirectoryPanel(final String id, final PolicyType type, final PageReference pageRef) {\n         super(id, pageRef, true);\n@@ -105,12 +105,13 @@ public PolicyDirectoryPanel(final String id, final PolicyType type, final PageRe\n \n     @Override\n     protected List<IColumn<T, String>> getColumns() {\n-        final List<IColumn<T, String>> columns = new ArrayList<>();\n+        List<IColumn<T, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n         columns.add(new PropertyColumn<>(\n-                new StringResourceModel(\"description\", this), \"description\", \"description\"));\n+                new StringResourceModel(Constants.NAME_FIELD_NAME, this),\n+                Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME));\n         if (type != PolicyType.ACCESS && type != PolicyType.ATTR_RELEASE && type != PolicyType.AUTH) {\n             columns.add(new CollectionPropertyColumn<>(\n                     new StringResourceModel(\"usedByResources\", this), \"usedByResources\"));\n@@ -127,7 +128,7 @@ protected List<IColumn<T, String>> getColumns() {\n \n     @Override\n     public ActionsPanel<T> getActions(final IModel<T> model) {\n-        final ActionsPanel<T> panel = super.getActions(model);\n+        ActionsPanel<T> panel = super.getActions(model);\n \n         panel.add(new ActionLink<T>() {\n \n@@ -171,7 +172,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n                     LOG.error(\"While deleting {}\", policyTO.getKey(), e);\n                     SyncopeConsoleSession.get().onException(e);\n                 }\n-                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         }, ActionLink.ActionType.DELETE, IdRepoEntitlement.POLICY_DELETE, true);\n \n@@ -208,7 +209,7 @@ protected class PolicyDataProvider extends DirectoryDataProvider<T> {\n         public PolicyDataProvider(final int paginatorRows) {\n             super(paginatorRows);\n \n-            setSort(\"description\", SortOrder.ASCENDING);\n+            setSort(Constants.NAME_FIELD_NAME, SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n "},{"sha":"671a2b3620a9cf95224f9876f85746b52835489a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"modified","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -93,8 +93,8 @@ protected List<String> load() {\n \n             List<Component> fields = new ArrayList<>();\n \n-            fields.add(new AjaxTextFieldPanel(\"field\", \"description\",\n-                    new PropertyModel<>(policyTO, \"description\"), false).setRequired(true));\n+            fields.add(new AjaxTextFieldPanel(\"field\", Constants.NAME_FIELD_NAME,\n+                    new PropertyModel<>(policyTO, Constants.NAME_FIELD_NAME), false).setRequired(true));\n \n             switch (type) {\n                 case ACCOUNT:\n@@ -140,14 +140,20 @@ protected List<String> load() {\n                     break;\n \n                 case ACCESS:\n+                    fields.add(new AjaxCheckBoxPanel(\n+                            \"field\",\n+                            \"enabled\",\n+                            new PropertyModel<>(policyTO, \"enabled\"),\n+                            false));\n+                    fields.add(new AjaxCheckBoxPanel(\n+                            \"field\",\n+                            \"ssoEnabled\",\n+                            new PropertyModel<>(policyTO, \"ssoEnabled\"),\n+                            false));\n                     break;\n \n                 case ATTR_RELEASE:\n-                    break;\n-\n                 case AUTH:\n-                    break;\n-\n                 default:\n             }\n "},{"sha":"4b6696397466c67cfa45d2143b0e3e0aa998a5ca","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -29,14 +29,14 @@\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.IdRepoConstants;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -147,7 +147,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper igno\n                 PolicyRuleDirectoryPanel.this.getTogglePanel().close(target);\n                 if (model.getObject().getConf() == null) {\n                     SyncopeConsoleSession.get().info(getString(\"noConf\"));\n-                    ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                    ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n                 } else {\n                     send(PolicyRuleDirectoryPanel.this, Broadcast.EXACT,\n                             new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n@@ -174,7 +174,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper igno\n                     LOG.error(\"While deleting {}\", rule.getName(), e);\n                     SyncopeConsoleSession.get().onException(e);\n                 }\n-                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         }, ActionLink.ActionType.DELETE, IdRepoEntitlement.POLICY_DELETE, true);\n \n@@ -279,7 +279,7 @@ public IModel<PolicyRuleWrapper> model(final PolicyRuleWrapper object) {\n     public void onEvent(final IEvent<?> event) {\n         super.onEvent(event);\n         if (event.getPayload() instanceof ExitEvent) {\n-            final AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n+            AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n             baseModal.show(false);\n             baseModal.close(target);\n         }"},{"sha":"8f9994292d403b0acb84f4f9f975e9bb8bd94541","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportDirectoryPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -108,7 +108,8 @@ protected List<IColumn<ReportTO, String>> getColumns() {\n \n         columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n-        columns.add(new PropertyColumn<>(new StringResourceModel(\"name\", this), \"name\", \"name\"));\n+        columns.add(new PropertyColumn<>(new StringResourceModel(Constants.NAME_FIELD_NAME, this),\n+                Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME));\n \n         columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"lastExec\", this), null, \"lastExec\"));\n@@ -288,7 +289,7 @@ protected static class ReportDataProvider extends DirectoryDataProvider<ReportTO\n         public ReportDataProvider(final int paginatorRows) {\n             super(paginatorRows);\n \n-            setSort(\"name\", SortOrder.ASCENDING);\n+            setSort(Constants.NAME_FIELD_NAME, SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n "},{"sha":"2299c52271a02a0131526c6b34557c6c4ecbc593","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportWizardBuilder.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportWizardBuilder.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.client.console.rest.ReportRestClient;\n import org.apache.syncope.client.console.tasks.CrontabPanel;\n import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n@@ -69,12 +70,13 @@ public class Profile extends WizardStep {\n \n         public Profile(final ReportTO reportTO) {\n             AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n-                    \"name\", \"name\", new PropertyModel<>(reportTO, \"name\"), false);\n+                    Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME,\n+                    new PropertyModel<>(reportTO, Constants.NAME_FIELD_NAME), false);\n             name.addRequiredLabel();\n             name.setEnabled(true);\n             add(name);\n \n-            final AjaxDropDownChoicePanel<String> template = new AjaxDropDownChoicePanel<>(\n+            AjaxDropDownChoicePanel<String> template = new AjaxDropDownChoicePanel<>(\n                     \"template\", getString(\"template\"),\n                     new PropertyModel<>(reportTO, \"template\"));\n             template.setChoices(restClient.listTemplates().stream()."},{"sha":"722cb50aa4ebe954142e1063e16482ea3db1b804","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -144,7 +144,7 @@ protected Serializable load() {\n                     return reportlet.getConf();\n                 }\n             };\n-            add(new BeanPanel<>(\"bean\", bean, reportlet.getSCondWrapper(), \"name\", \"reportlet\").\n+            add(new BeanPanel<>(\"bean\", bean, reportlet.getSCondWrapper(), Constants.NAME_FIELD_NAME, \"reportlet\").\n                     setRenderBodyOnly(true));\n         }\n     }"},{"sha":"d759d0e436dc2760cf153aa2f21051c4fe0ba8c0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -32,7 +32,7 @@ public class PolicyRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -1392090291817187902L;\n \n-    private static final Comparator<PolicyTO> COMPARATOR = Comparator.comparing(PolicyTO::getDescription);\n+    private static final Comparator<PolicyTO> COMPARATOR = Comparator.comparing(PolicyTO::getName);\n \n     public static <T extends PolicyTO> T read(final PolicyType type, final String key) {\n         T policy = null;"},{"sha":"e779e52848a2e17491fb31a84340d9f3e4525577","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/ProvisioningTaskDirectoryPanel.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -106,10 +106,12 @@ protected List<IColumn<T, String>> getFieldColumns() {\n                 new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n \n         columns.add(new PropertyColumn<>(\n-                new StringResourceModel(\"name\", this), \"name\", \"name\"));\n+                new StringResourceModel(Constants.NAME_FIELD_NAME, this),\n+                Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME));\n \n         columns.add(new PropertyColumn<>(\n-                new StringResourceModel(\"description\", this), \"description\", \"description\"));\n+                new StringResourceModel(Constants.DESCRIPTION_FIELD_NAME, this),\n+                Constants.DESCRIPTION_FIELD_NAME, Constants.DESCRIPTION_FIELD_NAME));\n \n         if (reference == PullTaskTO.class) {\n             columns.add(new PropertyColumn<>("},{"sha":"8b1534551ce6bf6cffc2a4ee78bb782a7ee08cb3","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -152,7 +152,8 @@ protected List<IColumn<T, String>> getFieldColumns() {\n                 new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n \n         columns.add(new PropertyColumn<>(\n-                new StringResourceModel(\"name\", this), \"name\", \"name\"));\n+                new StringResourceModel(Constants.NAME_FIELD_NAME, this),\n+                Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME));\n \n         columns.add(new PropertyColumn<T, String>(\n                 new StringResourceModel(\"jobDelegate\", this), \"jobDelegate\", \"jobDelegate\") {\n@@ -348,7 +349,7 @@ protected SchedTasksProvider<T> dataProvider() {\n \n         public SchedTasksProvider(final Class<T> reference, final TaskType taskType, final int paginatorRows) {\n             super(paginatorRows, taskType);\n-            setSort(\"name\", SortOrder.ASCENDING);\n+            setSort(Constants.NAME_FIELD_NAME, SortOrder.ASCENDING);\n             this.reference = reference;\n         }\n "},{"sha":"8ddc0bfc247b47dbe90dacd55883483bdb6b7727","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -122,14 +122,17 @@ public class Profile extends WizardStep {\n                 getImplementationInfoProvider().getPushActions();\n \n         public Profile(final SchedTaskTO taskTO) {\n-            AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", \"name\", new PropertyModel<>(taskTO, \"name\"),\n+            AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n+                    Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME,\n+                    new PropertyModel<>(taskTO, Constants.NAME_FIELD_NAME),\n                     false);\n             name.addRequiredLabel();\n             name.setEnabled(true);\n             add(name);\n \n             AjaxTextFieldPanel description = new AjaxTextFieldPanel(\n-                    \"description\", \"description\", new PropertyModel<>(taskTO, \"description\"), false);\n+                    Constants.DESCRIPTION_FIELD_NAME, Constants.DESCRIPTION_FIELD_NAME,\n+                    new PropertyModel<>(taskTO, Constants.DESCRIPTION_FIELD_NAME), false);\n             description.setEnabled(true);\n             add(description);\n "},{"sha":"9497b6c0c97a091e915eda2be61339b73c35a59f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -92,7 +92,7 @@ public void updateHeader(final AjaxRequestTarget target, final Serializable mode\n         } else if (modelObject instanceof ConfParam) {\n             header = ((ConfParam) modelObject).getSchema();\n         } else if (modelObject instanceof PolicyTO) {\n-            header = ((PolicyTO) modelObject).getDescription();\n+            header = ((PolicyTO) modelObject).getName();\n         } else if (modelObject instanceof SecurityQuestionTO) {\n             header = ((SecurityQuestionTO) modelObject).getContent();\n         } else if (modelObject instanceof AccessTokenTO) {"},{"sha":"04ab3ec3ae3039d938048249c358acaad32313ee","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ReconDetailsModalPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconDetailsModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconDetailsModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconDetailsModalPanel.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -110,7 +110,8 @@ protected Collection<ActionLink.ActionType> getBatches() {\n         protected List<IColumn<Misaligned, String>> getColumns() {\n             List<IColumn<Misaligned, String>> columns = new ArrayList<>();\n \n-            columns.add(new PropertyColumn<>(new ResourceModel(Constants.KEY_FIELD_NAME), \"name\", \"name\"));\n+            columns.add(new PropertyColumn<>(new ResourceModel(Constants.KEY_FIELD_NAME),\n+                    Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME));\n \n             columns.add(new AbstractColumn<Misaligned, String>(Model.of(Constants.SYNCOPE)) {\n \n@@ -154,7 +155,7 @@ protected final class DetailsProvider extends DirectoryDataProvider<Misaligned>\n \n         private DetailsProvider() {\n             super(ROWS);\n-            setSort(\"name\", SortOrder.ASCENDING);\n+            setSort(Constants.NAME_FIELD_NAME, SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n "},{"sha":"03e0221e03daadbb56c2a4f0454f7202a0ca5d9d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/AttrWizardBuilder.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrWizardBuilder.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards;\n+\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.wizard.WizardModel;\n+import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public abstract class AttrWizardBuilder extends BaseAjaxWizardBuilder<Attr> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public AttrWizardBuilder(final Attr defaultItem, final PageReference pageRef) {\n+        super(defaultItem, pageRef);\n+    }\n+\n+    @Override\n+    protected WizardModel buildModelSteps(final Attr modelObject, final WizardModel wizardModel) {\n+        wizardModel.add(new AttrStep(modelObject));\n+        return wizardModel;\n+    }\n+\n+    protected static class AttrStep extends WizardStep {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        AttrStep(final Attr modelObject) {\n+            AjaxTextFieldPanel schema = new AjaxTextFieldPanel(\n+                    Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME, new PropertyModel<>(modelObject, \"schema\"));\n+            schema.addRequiredLabel();\n+            schema.setEnabled(modelObject.getSchema() == null);\n+            add(schema);\n+\n+            AjaxTextFieldPanel value = new AjaxTextFieldPanel(\"panel\", \"values\", new Model<>());\n+            add(new MultiFieldPanel.Builder<String>(\n+                    new PropertyModel<>(modelObject, \"values\")).build(\"values\", \"values\", value));\n+        }\n+    }\n+}"},{"sha":"0f2458f79b86fb11490aa76d7e2533c46b0b7c7e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectDetails.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectDetails.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.wizards.any;\n \n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -37,7 +38,8 @@ public AnyObjectDetails(\n         super(wrapper, templateMode, includeStatusPanel, pageRef);\n \n         AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n-                \"name\", \"name\", new PropertyModel<>(wrapper.getInnerObject(), \"name\"), false);\n+                Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME,\n+                new PropertyModel<>(wrapper.getInnerObject(), Constants.NAME_FIELD_NAME), false);\n         if (templateMode) {\n             name.enableJexlHelp();\n         } else {"},{"sha":"3ae8889acc89f8080e834f7e8bb862b1163f38c9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupDetails.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.wizards.any;\n \n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.wicket.PageReference;\n@@ -36,7 +37,8 @@ public GroupDetails(\n         super(wrapper, templateMode, includeStatusPanel, pageRef);\n \n         AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n-                \"name\", \"name\", new PropertyModel<>(wrapper.getInnerObject(), \"name\"), false);\n+                Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME,\n+                new PropertyModel<>(wrapper.getInnerObject(), Constants.NAME_FIELD_NAME), false);\n         if (templateMode) {\n             name.enableJexlHelp();\n         } else {"},{"sha":"2c9405b14df93149b1d3ef8754532a0fa1096cb1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -151,10 +151,10 @@ public List<MembershipTO> execute(final String filter) {\n                                     ? groupsModel.getObject()\n                                     : groupRestClient.search(\n                                             anyTO.getRealm(),\n-                                            SyncopeClient.getGroupSearchConditionBuilder().\n-                                                    isAssignable().and(\"name\").equalToIgnoreCase(filter).query(),\n+                                            SyncopeClient.getGroupSearchConditionBuilder().isAssignable().\n+                                                    and(Constants.NAME_FIELD_NAME).equalToIgnoreCase(filter).query(),\n                                             1, Constants.MAX_GROUP_LIST_SIZE,\n-                                            new SortParam<>(\"name\", true),\n+                                            new SortParam<>(Constants.NAME_FIELD_NAME, true),\n                                             null)).stream().\n                                     map(group -> new MembershipTO.Builder(group.getKey()).\n                                     groupName(group.getName()).build()).\n@@ -221,7 +221,7 @@ protected void reloadObject() {\n                     SyncopeClient.getGroupSearchConditionBuilder().isAssignable().query(),\n                     1,\n                     Constants.MAX_GROUP_LIST_SIZE,\n-                    new SortParam<>(\"name\", true),\n+                    new SortParam<>(Constants.NAME_FIELD_NAME, true),\n                     null);\n         }\n \n@@ -241,13 +241,13 @@ protected void reloadMemberships() {\n \n             int total = GroupableRelatableTO.class.cast(anyTO).getMemberships().size();\n             int pages = (total / Constants.MAX_GROUP_LIST_SIZE) + 1;\n-            SortParam<String> sort = new SortParam<>(\"name\", true);\n+            SortParam<String> sort = new SortParam<>(Constants.NAME_FIELD_NAME, true);\n             for (int page = 1; page <= pages; page++) {\n                 GroupFiqlSearchConditionBuilder builder = SyncopeClient.getGroupSearchConditionBuilder();\n \n                 List<CompleteCondition> conditions = GroupableRelatableTO.class.cast(anyTO).getMemberships().\n                         stream().\n-                        skip(((long) page - 1L) * (long) Constants.MAX_GROUP_LIST_SIZE).\n+                        skip((page - 1L) * Constants.MAX_GROUP_LIST_SIZE).\n                         limit(Constants.MAX_GROUP_LIST_SIZE).\n                         map(m -> builder.is(Constants.KEY_FIELD_NAME).equalTo(m.getGroupKey()).wrap()).\n                         collect(Collectors.toList());\n@@ -302,7 +302,7 @@ protected void reloadDynMemberships() {\n                         builder.or(conditions).query(),\n                         -1,\n                         -1,\n-                        new SortParam<>(\"name\", true),\n+                        new SortParam<>(Constants.NAME_FIELD_NAME, true),\n                         null).stream().map(GroupTO::getName).collect(Collectors.toList()));\n             }\n         }"},{"sha":"d8c49e3590c18766a09ffc5c4031b6d13e855fd3","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserDetails.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserDetails.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import org.apache.syncope.client.ui.commons.wizards.any.PasswordPanel;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.ajax.markup.html.LabelInfo;\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n@@ -60,7 +61,8 @@ public UserDetails(\n         // ------------------------\n         // Username\n         // ------------------------\n-        username = new AjaxTextFieldPanel(\"username\", \"username\", new PropertyModel<>(userTO, \"username\"), false);\n+        username = new AjaxTextFieldPanel(Constants.USERNAME_FIELD_NAME, Constants.USERNAME_FIELD_NAME,\n+                new PropertyModel<>(userTO, Constants.USERNAME_FIELD_NAME), false);\n \n         if (wrapper.getPreviousUserTO() != null && StringUtils.compare(\n                 wrapper.getPreviousUserTO().getUsername(), wrapper.getInnerObject().getUsername()) != 0) {"},{"sha":"9e1b066aa946399f8484b327eef025a0df3753a0","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/ModalDirectoryPanel.html","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FModalDirectoryPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FModalDirectoryPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FModalDirectoryPanel.html?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -18,6 +18,6 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:extend>\n-    <div wicket:id=\"properties\"></div>\n+    <div wicket:id=\"panel\"></div>\n   </wicket:extend>\n </html>","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppPropertiesModalPanel.html"},{"sha":"1c0bfcca4250b09c7df325ab96bbda1bbe5794c5","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.properties","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -14,18 +14,30 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-description=Description\n+name=Name\n usedByResources=Used By Resource\n usedByRealms=Used By Realm\n passthroughResources=Passthrough Resources\n maxAuthenticationAttempts=Max Authentication Attempts\n propagateSuspension=Propagate Suspension\n historyLength=History Length\n allowNullPassword=Allow Null Password\n-policy.rules=${description} Rules\n-any.edit=Edit ${description}\n+policy.rules=${name} Rules\n+any.edit=Edit ${name}\n any.new=New Policy\n-any.finish=Submit ${description}\n-any.cancel=Cancel ${description}\n+any.finish=Submit ${name}\n+any.cancel=Cancel ${name}\n compose.title=rules\n conflictResolutionAction=Conflict Resolution Action\n+enabled=Enabled\n+ssoEnabled=SSO Enabled\n+requiredAttrs.title=Required Attributes\n+type_extensions.title=configuration\n+status=Status\n+allowedAttrs=Allowed Attributes\n+excludedAttrs=Excluded Attributes\n+includeOnlyAttrs=Include Only Attributes\n+attrReleasePolicyConf.title=Attribute Release Configuration\n+authPolicyConf.title=Authentication Configuration\n+tryAll=Try All\n+authModules=Authentication Modules"},{"sha":"a4fbd1fdcfc4480886829177095ad290cd2408c0","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_fr_CA.properties","status":"modified","additions":21,"deletions":9,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_fr_CA.properties?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -14,18 +14,30 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-description=Description\n-usedByResources=Utilis� par ressource\n-usedByRealms=Utilis� par domaine\n+name=Nom\n+usedByResources=Utilis\\u00e9 par ressource\n+usedByRealms=Utilis\\u00e9 par domaine\n passthroughResources=Ressources de transit\n maxAuthenticationAttempts=Nombre maximal de tentatives d'authentification\n propagateSuspension=Suspension de propagation\n historyLength=Longueur de l'historique\n allowNullPassword=Permettre mot de passe invalide\n-policy.rules=R�glements ${description} \n-any.edit=Modifier ${description}\n+policy.rules=R\\u00e8glements ${name} \n+any.edit=Modifier ${name}\n any.new=Nouvelle politique\n-any.finish=Soumettre ${description}\n-any.cancel=Annuler ${description}\n-compose.title=r�glements \n-conflictResolutionAction=Action de r�solution des conflits\n+any.finish=Soumettre ${name}\n+any.cancel=Annuler ${name}\n+compose.title=r\\u00e8glements \n+conflictResolutionAction=Action de r\\u00e9solution des conflits\n+enabled=Enabled\n+ssoEnabled=SSO Enabled\n+requiredAttrs.title=Required Attributes\n+type_extensions.title=configuration\n+status=Status\n+allowedAttrs=Allowed Attributes\n+excludedAttrs=Excluded Attributes\n+includeOnlyAttrs=Include Only Attributes\n+attrReleasePolicyConf.title=Attribute Release Configuration\n+authPolicyConf.title=Authentication Configuration\n+tryAll=Try All\n+authModules=Authentication Modules"},{"sha":"c9cc229642977de489798bedec874518aa60a8ed","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_it.properties","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -14,18 +14,30 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-description=Descrizione\n+name=Nome\n usedByResources=Usata Dalla Risorsa\n usedByRealms=Usata Dal Realm\n passthroughResources=Risorse Passthrough\n maxAuthenticationAttempts=Numero Massimo Tentativi Authenticazione\n propagateSuspension=Propagare Sospensione\n historyLength=Lunghezza Storico\n allowNullPassword=Permetti Password Nulla\n-policy.rules=Configurazione Regole di ${description}\n-any.edit=Modifica ${description}\n+policy.rules=Configurazione Regole di ${name}\n+any.edit=Modifica ${name}\n any.new=Nuova Policy\n-any.finish=Invia ${description}\n-any.cancel=Annulla ${description}\n+any.finish=Invia ${name}\n+any.cancel=Annulla ${name}\n compose.title=regole\n conflictResolutionAction=Azione di Risoluzione Conflitti\n+enabled=Abilitata\n+ssoEnabled=SSO Abilitato\n+requiredAttrs.title=Attributi Richiesti\n+type_extensions.title=configurazione\n+status=Stato\n+allowedAttrs=Attributi Consentiti\n+excludedAttrs=Attributi Esclusi\n+includeOnlyAttrs=Attributi Inclusi\n+attrReleasePolicyConf.title=Configurazione Rilascio Attributi\n+authPolicyConf.title=Configurazione Autenticazione\n+tryAll=Prova Tutti\n+authModules=Moduli di Authenticazione"},{"sha":"caf0908bdd2580d202fe5501a399fc72beca874a","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ja.properties","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ja.properties?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -14,18 +14,30 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-description=\\u8aac\\u660e\n+name=\\u540d\\u524d\n usedByResources=\\u4f7f\\u7528\\u30ea\\u30bd\\u30fc\\u30b9\n usedByRealms=\\u4f7f\\u7528\\u30ec\\u30eb\\u30e0\n passthroughResources=\\u901a\\u904e\\u30ea\\u30bd\\u30fc\\u30b9\n maxAuthenticationAttempts=\\u6700\\u5927\\u8a8d\\u8a3c\\u8a66\\u884c\\u56de\\u6570\n propagateSuspension=\\u4f1d\\u64ad\\u30b5\\u30b9\\u30da\\u30f3\\u30b7\\u30e7\\u30f3\n historyLength=\\u5c65\\u6b74\\u9577\n allowNullPassword=\\u7a7a\\u306e\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\\u3092\\u8a31\\u53ef\n-policy.rules=${description} \\u30eb\\u30fc\\u30eb\n-any.edit=${description} \\u3092\\u7de8\\u96c6\n+policy.rules=${name} \\u30eb\\u30fc\\u30eb\n+any.edit=${name} \\u3092\\u7de8\\u96c6\n any.new=\\u65b0\\u3057\\u3044\\u30dd\\u30ea\\u30b7\\u30fc\n-any.finish=${description} \\u3092\\u5b9f\\u884c\n-any.cancel=${description} \\u3092\\u30ad\\u30e3\\u30f3\\u30bb\\u30eb\n+any.finish=${name} \\u3092\\u5b9f\\u884c\n+any.cancel=${name} \\u3092\\u30ad\\u30e3\\u30f3\\u30bb\\u30eb\n compose.title=\\u30eb\\u30fc\\u30eb\n conflictResolutionAction=\\u7af6\\u5408\\u89e3\\u6c7a\\u30a2\\u30af\\u30b7\\u30e7\\u30f3\n+enabled=Enabled\n+ssoEnabled=SSO Enabled\n+requiredAttrs.title=Required Attributes\n+type_extensions.title=configuration\n+status=Status\n+allowedAttrs=Allowed Attributes\n+excludedAttrs=Excluded Attributes\n+includeOnlyAttrs=Include Only Attributes\n+attrReleasePolicyConf.title=Attribute Release Configuration\n+authPolicyConf.title=Authentication Configuration\n+tryAll=Try All\n+authModules=Authentication Modules"},{"sha":"8af6ff818c57f4ad8821ce171e3ce7b06fb52eee","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_pt_BR.properties","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -14,18 +14,30 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-description=Description\n+name=Nome\n usedByResources=Used By Resource\n usedByRealms=Used By Realm\n passthroughResources=Passthrough Resources\n maxAuthenticationAttempts=Max Authentication Attempts\n propagateSuspension=Propagate Suspension\n historyLength=History Length\n allowNullPassword=Allow Null Password\n-policy.rules=${description} Rules\n-any.edit=Edit ${description}\n+policy.rules=${name} Rules\n+any.edit=Edit ${name}\n any.new=New Policy\n-any.finish=Submit ${description}\n-any.cancel=Cancel ${description}\n+any.finish=Submit ${name}\n+any.cancel=Cancel ${name}\n compose.title=rules\n conflictResolutionAction=Conflict Resolution Action\n+enabled=Enabled\n+ssoEnabled=SSO Enabled\n+requiredAttrs.title=Required Attributes\n+type_extensions.title=configuration\n+status=Status\n+allowedAttrs=Allowed Attributes\n+excludedAttrs=Excluded Attributes\n+includeOnlyAttrs=Include Only Attributes\n+attrReleasePolicyConf.title=Attribute Release Configuration\n+authPolicyConf.title=Authentication Configuration\n+tryAll=Try All\n+authModules=Authentication Modules"},{"sha":"2ed8d8cbafc202a6d46e090f12f5533780bcf2da","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ru.properties","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -15,18 +15,30 @@\n # specific language governing permissions and limitations\n # under the License.\n #\n-description=\\u041d\\u0430\\u0437\\u0432\\u0430\\u043d\\u0438\\u0435\n+name=\\u0418\\u043c\\u044f\n usedByResources=\\u0418\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u0443\\u0435\\u0442\\u0441\\u044f \\u0440\\u0435\\u0441\\u0443\\u0440\\u0441\\u0430\\u043c\\u0438\n usedByRealms=\\u0418\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u0443\\u0435\\u0442\\u0441\\u044f \\u0434\\u043b\\u044f \\u043e\\u0431\\u043b\\u0430\\u0441\\u0442\\u0435\\u0439\n passthroughResources=\\u041f\\u0435\\u0440\\u0435\\u0434\\u0430\\u0432\\u0430\\u0442\\u044c \\u0432 \\u0440\\u0435\\u0441\\u0443\\u0440\\u0441\\u044b\n maxAuthenticationAttempts=\\u041c\\u0430\\u043a\\u0441\\u0438\\u043c\\u0430\\u043b\\u044c\\u043d\\u043e\\u0435 \\u043a\\u043e\\u043b\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043e \\u043f\\u043e\\u043f\\u044b\\u0442\\u043e\\u043a \\u0430\\u0443\\u0442\\u0435\\u043d\\u0442\\u0438\\u0444\\u0438\\u043a\\u0430\\u0446\\u0438\\u0438\n propagateSuspension=\\u041f\\u0435\\u0440\\u0435\\u0434\\u0430\\u0432\\u0430\\u0442\\u044c \\u0434\\u0430\\u043d\\u043d\\u044b\\u0435 \\u043e \\u043f\\u0440\\u0438\\u043e\\u0441\\u0442\\u0430\\u043d\\u043e\\u0432\\u043a\\u0435\n historyLength=\\u0420\\u0430\\u0437\\u043c\\u0435\\u0440 \\u0438\\u0441\\u0442\\u043e\\u0440\\u0438\\u0438\n allowNullPassword=\\u0420\\u0430\\u0437\\u0440\\u0435\\u0448\\u0438\\u0442\\u044c \\u043f\\u0443\\u0441\\u0442\\u043e\\u0439 \\u043f\\u0430\\u0440\\u043e\\u043b\\u044c\n-policy.rules=\\u041d\\u0430\\u0441\\u0442\\u0440\\u043e\\u0439\\u043a\\u0430 \\u043f\\u0440\\u0430\\u0432\\u0438\\u043b \\u0434\\u043b\\u044f \\u043f\\u043e\\u043b\\u0438\\u0442\\u0438\\u043a\\u0438 '${description}'\n-any.edit=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${description}\n+policy.rules=\\u041d\\u0430\\u0441\\u0442\\u0440\\u043e\\u0439\\u043a\\u0430 \\u043f\\u0440\\u0430\\u0432\\u0438\\u043b \\u0434\\u043b\\u044f \\u043f\\u043e\\u043b\\u0438\\u0442\\u0438\\u043a\\u0438 '${name}'\n+any.edit=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${name}\n any.new=\\u0421\\u043e\\u0437\\u0434\\u0430\\u0442\\u044c \\u043f\\u043e\\u043b\\u0438\\u0442\\u0438\\u043a\\u0443\n-any.finish=\\u0421\\u043e\\u0445\\u0440\\u0430\\u043d\\u0438\\u0442\\u044c ${description}\n-any.cancel=\\u041e\\u0442\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${description}\n+any.finish=\\u0421\\u043e\\u0445\\u0440\\u0430\\u043d\\u0438\\u0442\\u044c ${name}\n+any.cancel=\\u041e\\u0442\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${name}\n compose.title=rules\n conflictResolutionAction=Conflict Resolution Action\n+enabled=Enabled\n+ssoEnabled=SSO Enabled\n+requiredAttrs.title=Required Attributes\n+type_extensions.title=configuration\n+status=Status\n+allowedAttrs=Allowed Attributes\n+excludedAttrs=Excluded Attributes\n+includeOnlyAttrs=Include Only Attributes\n+attrReleasePolicyConf.title=Attribute Release Configuration\n+authPolicyConf.title=Authentication Configuration\n+tryAll=Try All\n+authModules=Authentication Modules"},{"sha":"0c74006ea6a98cdd71f1154806cb27c353d6f98f","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/AttrWizardBuilder$AttrStep.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrWizardBuilder%24AttrStep.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrWizardBuilder%24AttrStep.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrWizardBuilder%24AttrStep.html?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppPropertyWizardBuilder$AttrStep.html"},{"sha":"7626f73bc80e3d5c42a8adab753f852db6c67cd3","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/Groups.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FGroups.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -23,6 +23,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.rest.GroupRestClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.wizards.any.AbstractGroups;\n import org.apache.syncope.client.ui.commons.wizards.any.AbstractGroupsModel;\n@@ -104,7 +105,7 @@ public List<MembershipTO> execute(final String filter) {\n                             : GroupRestClient.searchAssignableGroups(\n                                     anyTO.getRealm(),\n                                     SyncopeClient.getGroupSearchConditionBuilder().\n-                                            isAssignable().and().is(\"name\").equalTo(filter).query(),\n+                                            isAssignable().and().is(Constants.NAME_FIELD_NAME).equalTo(filter).query(),\n                                     1, MAX_GROUP_LIST_CARDINALITY)).stream()\n                             .map(input -> new MembershipTO.Builder(input.getKey())\n                             .groupName(input.getName()).build()).collect(Collectors.toList());"},{"sha":"8f074321302c93b39301d4ba151900307f5e5bab","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/UserDetails.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserDetails.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -80,7 +80,8 @@ public UserDetails(\n         // ------------------------\n         // Username\n         // ------------------------\n-        username = new AjaxTextFieldPanel(\"username\", \"username\", new PropertyModel<>(userTO, \"username\"), false);\n+        username = new AjaxTextFieldPanel(Constants.USERNAME_FIELD_NAME, Constants.USERNAME_FIELD_NAME,\n+                new PropertyModel<>(userTO, Constants.USERNAME_FIELD_NAME), false);\n \n         if (wrapper.getPreviousUserTO() != null && StringUtils.\n                 compare(wrapper.getPreviousUserTO().getUsername(), wrapper.getInnerObject().getUsername()) != 0) {"},{"sha":"84b88cb5c976879f415e077a1ea6bfefafd6028b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAccessPolicyConf.java","status":"removed","additions":0,"deletions":76,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a496993a8134b19f1242a005525074f312bc569/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a496993a8134b19f1242a005525074f312bc569/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccessPolicyConf.java?ref=6a496993a8134b19f1242a005525074f312bc569","patch":"@@ -1,76 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.policy;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import org.apache.syncope.common.lib.Attr;\n-import org.apache.syncope.common.lib.BaseBean;\n-\n-public abstract class AbstractAccessPolicyConf implements BaseBean, AccessPolicyConf {\n-\n-    private static final long serialVersionUID = 1153200197344709778L;\n-\n-    private boolean enabled = true;\n-\n-    private boolean ssoEnabled = true;\n-\n-    @JacksonXmlElementWrapper(localName = \"requiredAttrs\")\n-    @JacksonXmlProperty(localName = \"requiredAttr\")\n-    @JsonProperty(\"requiredAttrs\")\n-    private final List<Attr> requiredAttrList = new ArrayList<>();\n-\n-    @Override\n-    public boolean isEnabled() {\n-        return enabled;\n-    }\n-\n-    public void setEnabled(final boolean enabled) {\n-        this.enabled = enabled;\n-    }\n-\n-    @Override\n-    public boolean isSsoEnabled() {\n-        return this.ssoEnabled;\n-    }\n-\n-    public void setSsoEnabled(final boolean ssoEnabled) {\n-        this.ssoEnabled = ssoEnabled;\n-    }\n-\n-    @JsonIgnore\n-    @Override\n-    public Map<String, Set<String>> getRequiredAttrs() {\n-        return requiredAttrList.stream().\n-                collect(Collectors.toUnmodifiableMap(Attr::getSchema, attr -> new HashSet<>(attr.getValues())));\n-    }\n-\n-    public void addRequiredAttr(final String key, final Set<String> values) {\n-        requiredAttrList.removeIf(attr -> attr.getSchema().equals(key));\n-        requiredAttrList.add(new Attr.Builder(key).values(values).build());\n-    }\n-}"},{"sha":"3e51994e3404eacc1316c3d757f0dbe2e8be4c43","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAuthPolicyConf.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a496993a8134b19f1242a005525074f312bc569/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a496993a8134b19f1242a005525074f312bc569/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyConf.java?ref=6a496993a8134b19f1242a005525074f312bc569","patch":"@@ -1,35 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.policy;\n-\n-public abstract class AbstractAuthPolicyConf implements AuthPolicyConf {\n-\n-    private static final long serialVersionUID = 9185127128182430142L;\n-\n-    private AuthPolicyCriteriaConf criteria;\n-\n-    @Override\n-    public AuthPolicyCriteriaConf getCriteria() {\n-        return criteria;\n-    }\n-\n-    public void setCriteria(final AuthPolicyCriteriaConf criteria) {\n-        this.criteria = criteria;\n-    }\n-}"},{"sha":"9b7253506837883a0369b6b2cf8a3afb1e7fe6c9","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AccessPolicyConf.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -19,16 +19,12 @@\n package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.List;\n+import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.BaseBean;\n \n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n public interface AccessPolicyConf extends BaseBean {\n \n-    boolean isEnabled();\n-\n-    boolean isSsoEnabled();\n-\n-    Map<String, Set<String>> getRequiredAttrs();\n+    List<Attr> getRequiredAttrs();\n }"},{"sha":"27da7c7c4ee4bcd0604e063b478711bf8b142fc0","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AccessPolicyTO.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyTO.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -28,6 +28,10 @@ public class AccessPolicyTO extends PolicyTO {\n \n     private static final long serialVersionUID = -6711411162433533300L;\n \n+    private boolean enabled = true;\n+\n+    private boolean ssoEnabled = true;\n+\n     private AccessPolicyConf conf;\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n@@ -38,6 +42,22 @@ public String getDiscriminator() {\n         return getClass().getName();\n     }\n \n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    public void setEnabled(final boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    public boolean isSsoEnabled() {\n+        return this.ssoEnabled;\n+    }\n+\n+    public void setSsoEnabled(final boolean ssoEnabled) {\n+        this.ssoEnabled = ssoEnabled;\n+    }\n+\n     public AccessPolicyConf getConf() {\n         return conf;\n     }"},{"sha":"310e8dc4c0767533f144baa8272569645444b6ee","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AllowedAttrReleasePolicyConf.java","status":"removed","additions":0,"deletions":99,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a496993a8134b19f1242a005525074f312bc569/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAllowedAttrReleasePolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a496993a8134b19f1242a005525074f312bc569/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAllowedAttrReleasePolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAllowedAttrReleasePolicyConf.java?ref=6a496993a8134b19f1242a005525074f312bc569","patch":"@@ -1,99 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.policy;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-public class AllowedAttrReleasePolicyConf implements AttrReleasePolicyConf {\n-\n-    private static final long serialVersionUID = -1969836661359025380L;\n-\n-    /**\n-     * Specify the list of allowed attribute to release.\n-     * Use the special {@code *} to release everything.\n-     */\n-    @JacksonXmlElementWrapper(localName = \"allowedAttrs\")\n-    @JacksonXmlProperty(localName = \"allowedAttrs\")\n-    @JsonProperty(\"allowedAttrs\")\n-    private final List<String> allowedAttrs = new ArrayList<>();\n-\n-    private ConsentPolicy consentPolicy;\n-\n-    public List<String> getAllowedAttrs() {\n-        return allowedAttrs;\n-    }\n-\n-    public ConsentPolicy getConsentPolicy() {\n-        return consentPolicy;\n-    }\n-\n-    public void setConsentPolicy(final ConsentPolicy consentPolicy) {\n-        this.consentPolicy = consentPolicy;\n-    }\n-\n-    public class ConsentPolicy implements Serializable {\n-\n-        private static final long serialVersionUID = 6744647343202583865L;\n-\n-        private Boolean status = null;\n-\n-        @JacksonXmlElementWrapper(localName = \"excludedAttributes\")\n-        @JacksonXmlProperty(localName = \"excludedAttributes\")\n-        @JsonProperty(\"excludedAttributes\")\n-        private final Set<String> excludedAttrs = new HashSet<>();\n-\n-        @JacksonXmlElementWrapper(localName = \"includeOnlyAttrs\")\n-        @JacksonXmlProperty(localName = \"includeOnlyAttrs\")\n-        @JsonProperty(\"includeOnlyAttrs\")\n-        private final Set<String> includeOnlyAttrs = new HashSet<>();\n-\n-        public Boolean getStatus() {\n-            return status;\n-        }\n-\n-        public void setStatus(final Boolean status) {\n-            this.status = status;\n-        }\n-\n-        public Set<String> getExcludedAttrs() {\n-            return excludedAttrs;\n-        }\n-\n-        public void addExcludedAttr(final String attr) {\n-            excludedAttrs.add(attr);\n-        }\n-\n-        public Set<String> getIncludeOnlyAttrs() {\n-            return includeOnlyAttrs;\n-        }\n-\n-        public void addIncludeOnlyAttribute(final String attr) {\n-            includeOnlyAttrs.add(attr);\n-        }\n-\n-    }\n-\n-}"},{"sha":"6413119ff6ba8551204ef0b77578fd957dcb96ac","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AuthPolicyConf.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyConf.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -21,15 +21,6 @@\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import org.apache.syncope.common.lib.BaseBean;\n \n-@FunctionalInterface\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n public interface AuthPolicyConf extends BaseBean {\n-\n-    /**\n-     * Gets the policy criteria linked to this policy\n-     * to establish criteria for success.\n-     *\n-     * @return the criteria\n-     */\n-    AuthPolicyCriteriaConf getCriteria();\n }"},{"sha":"f228b5c08ea502991257a0705288bb6b12faaa7d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AuthPolicyCriteriaConf.java","status":"removed","additions":0,"deletions":34,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a496993a8134b19f1242a005525074f312bc569/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyCriteriaConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a496993a8134b19f1242a005525074f312bc569/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyCriteriaConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyCriteriaConf.java?ref=6a496993a8134b19f1242a005525074f312bc569","patch":"@@ -1,34 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.policy;\n-\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import org.apache.syncope.common.lib.BaseBean;\n-\n-/**\n- * Determine the criteria by which the authentication policy\n- * should conduct itself. Typically, this translates to how\n- * the policy should execute the modules to establish a success\n- * criteria. Examples would include \"all modules should validate the user\"\n- * or \"any module can validate the user\" before the policy can consider it\n- * a success.\n- */\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n-public interface AuthPolicyCriteriaConf extends BaseBean {\n-}"},{"sha":"e2b97641fce5b6fbcfa297c2e291b7d7ae3931e2","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccessPolicyConf.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -18,8 +18,22 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n-public class DefaultAccessPolicyConf extends AbstractAccessPolicyConf implements AccessPolicyConf {\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.lib.Attr;\n \n-    private static final long serialVersionUID = -1969836600059025380L;\n+public class DefaultAccessPolicyConf implements AccessPolicyConf {\n \n+    private static final long serialVersionUID = 1153200197344709778L;\n+\n+    private final List<Attr> requiredAttrs = new ArrayList<>();\n+\n+    @JacksonXmlElementWrapper(localName = \"requiredAttrs\")\n+    @JacksonXmlProperty(localName = \"requiredAttr\")\n+    @Override\n+    public List<Attr> getRequiredAttrs() {\n+        return requiredAttrs;\n+    }\n }"},{"sha":"c46a80d64112a6d887f2dc545c20900a679c334d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAttrReleasePolicyConf.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAttrReleasePolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAttrReleasePolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAttrReleasePolicyConf.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class DefaultAttrReleasePolicyConf implements AttrReleasePolicyConf {\n+\n+    private static final long serialVersionUID = -1969836661359025380L;\n+\n+    private Boolean status = null;\n+\n+    /**\n+     * Specify the list of allowed attribute to release.\n+     * Use the special {@code *} to release everything.\n+     */\n+    private final List<String> allowedAttrs = new ArrayList<>();\n+\n+    private final List<String> excludedAttrs = new ArrayList<>();\n+\n+    private final List<String> includeOnlyAttrs = new ArrayList<>();\n+\n+    public Boolean getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(final Boolean status) {\n+        this.status = status;\n+    }\n+\n+    @JacksonXmlElementWrapper(localName = \"allowedAttrs\")\n+    @JacksonXmlProperty(localName = \"allowedAttrs\")\n+    public List<String> getAllowedAttrs() {\n+        return allowedAttrs;\n+    }\n+\n+    @JacksonXmlElementWrapper(localName = \"excludedAttributes\")\n+    @JacksonXmlProperty(localName = \"excludedAttributes\")\n+    public List<String> getExcludedAttrs() {\n+        return excludedAttrs;\n+    }\n+\n+    @JacksonXmlElementWrapper(localName = \"includeOnlyAttrs\")\n+    @JacksonXmlProperty(localName = \"includeOnlyAttrs\")\n+    @JsonProperty(\"includeOnlyAttrs\")\n+    public List<String> getIncludeOnlyAttrs() {\n+        return includeOnlyAttrs;\n+    }\n+}"},{"sha":"d78ef7cff952c138ccd408a1e54095a73fcb3de5","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAuthPolicyConf.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyConf.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -18,15 +18,29 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import java.util.ArrayList;\n import java.util.List;\n \n-public class DefaultAuthPolicyConf extends AbstractAuthPolicyConf implements AuthPolicyConf {\n+public class DefaultAuthPolicyConf implements AuthPolicyConf {\n \n     private static final long serialVersionUID = -2969836600059025380L;\n \n+    private boolean tryAll;\n+\n     private final List<String> authModules = new ArrayList<>();\n \n+    public boolean isTryAll() {\n+        return tryAll;\n+    }\n+\n+    public void setTryAll(final boolean tryAll) {\n+        this.tryAll = tryAll;\n+    }\n+\n+    @JacksonXmlElementWrapper(localName = \"authModules\")\n+    @JacksonXmlProperty(localName = \"authModule\")\n     public List<String> getAuthModules() {\n         return authModules;\n     }"},{"sha":"d4ed27a82eefc7d5a09a7814ec58afb8b9445a0c","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAuthPolicyCriteriaConf.java","status":"removed","additions":0,"deletions":34,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a496993a8134b19f1242a005525074f312bc569/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyCriteriaConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a496993a8134b19f1242a005525074f312bc569/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyCriteriaConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyCriteriaConf.java?ref=6a496993a8134b19f1242a005525074f312bc569","patch":"@@ -1,34 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.policy;\n-\n-public class DefaultAuthPolicyCriteriaConf implements AuthPolicyCriteriaConf {\n-\n-    private static final long serialVersionUID = 3928807032588105869L;\n-\n-    private boolean all;\n-\n-    public boolean isAll() {\n-        return all;\n-    }\n-\n-    public void setAll(final boolean all) {\n-        this.all = all;\n-    }\n-}"},{"sha":"5fe5aadbbcd72498d6dca7196d740261d9a679ea","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/WAClientApp.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -21,7 +21,7 @@\n import java.util.HashMap;\n import java.util.Map;\n import org.apache.syncope.common.lib.BaseBean;\n-import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n import org.apache.syncope.common.lib.to.ClientAppTO;\n@@ -32,7 +32,7 @@ public class WAClientApp implements BaseBean {\n \n     private ClientAppTO clientAppTO;\n \n-    private AccessPolicyConf accessPolicyConf;\n+    private AccessPolicyTO accessPolicy;\n \n     private AuthPolicyConf authPolicyConf;\n \n@@ -48,12 +48,12 @@ public void setClientAppTO(final ClientAppTO clientAppTO) {\n         this.clientAppTO = clientAppTO;\n     }\n \n-    public AccessPolicyConf getAccessPolicyConf() {\n-        return accessPolicyConf;\n+    public AccessPolicyTO getAccessPolicy() {\n+        return accessPolicy;\n     }\n \n-    public void setAccessPolicyConf(final AccessPolicyConf accessPolicyConf) {\n-        this.accessPolicyConf = accessPolicyConf;\n+    public void setAccessPolicy(final AccessPolicyTO accessPolicy) {\n+        this.accessPolicy = accessPolicy;\n     }\n \n     public AuthPolicyConf getAuthPolicyConf() {"},{"sha":"95453f2c4b211323bc386934c542ff3b1d01c9b4","filename":"common/am/lib/src/test/java/org/apache/syncope/common/lib/SerializationTest.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -23,7 +23,6 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n import java.io.StringWriter;\n-import java.util.Set;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.junit.jupiter.api.Test;\n@@ -35,11 +34,11 @@ public abstract class SerializationTest {\n     @Test\n     public void accessPolicyConf() throws IOException {\n         AccessPolicyTO policy = new AccessPolicyTO();\n-        policy.setDescription(\"Test Access policy\");\n+        policy.setName(\"Test Access policy\");\n+        policy.setEnabled(true);\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n-        conf.setEnabled(true);\n-        conf.addRequiredAttr(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n+        conf.getRequiredAttrs().add(new Attr.Builder(\"cn\").values(\"admin\", \"Admin\", \"TheAdmin\").build());\n         policy.setConf(conf);\n \n         StringWriter writer = new StringWriter();"},{"sha":"4bd405a57b72a22b6265e5b489bbc0e67a7ece49","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/PolicyTO.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -29,12 +29,12 @@\n import javax.ws.rs.PathParam;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.NamedEntityTO;\n \n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"_class\")\n-@JsonPropertyOrder(value = { \"_class\", \"key\", \"description\" })\n+@JsonPropertyOrder(value = { \"_class\", \"key\", \"name\" })\n @Schema(subTypes = { AccountPolicyTO.class, PasswordPolicyTO.class }, discriminatorProperty = \"_class\")\n-public abstract class PolicyTO implements EntityTO {\n+public abstract class PolicyTO implements NamedEntityTO {\n \n     private static final long serialVersionUID = -2903888572649721035L;\n \n@@ -44,7 +44,7 @@ public abstract class PolicyTO implements EntityTO {\n \n     private String key;\n \n-    private String description;\n+    private String name;\n \n     private final List<String> usedByResources = new ArrayList<>();\n \n@@ -70,12 +70,14 @@ public void setKey(final String key) {\n     }\n \n     @JsonProperty(required = true)\n-    public String getDescription() {\n-        return description;\n+    @Override\n+    public String getName() {\n+        return name;\n     }\n \n-    public void setDescription(final String description) {\n-        this.description = description;\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n@@ -107,7 +109,7 @@ public boolean equals(final Object obj) {\n         return new EqualsBuilder().\n                 append(discriminator, policyTO.discriminator).\n                 append(key, policyTO.key).\n-                append(description, policyTO.description).\n+                append(name, policyTO.name).\n                 append(usedByResources, policyTO.usedByResources).\n                 append(usedByRealms, policyTO.usedByRealms).\n                 build();\n@@ -118,7 +120,7 @@ public int hashCode() {\n         return new HashCodeBuilder().\n                 append(discriminator).\n                 append(key).\n-                append(description).\n+                append(name).\n                 append(usedByResources).\n                 append(usedByRealms).\n                 build();"},{"sha":"67bc5fd7bb657906dd789d4bce4c29250059314c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AccessPolicy.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccessPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccessPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccessPolicy.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -22,6 +22,14 @@\n \n public interface AccessPolicy extends Policy {\n \n+    boolean isEnabled();\n+\n+    void setEnabled(boolean enabled);\n+\n+    boolean isSsoEnabled();\n+\n+    void setSsoEnabled(boolean ssoEnabled);\n+\n     AccessPolicyConf getConf();\n \n     void setConf(AccessPolicyConf conf);"},{"sha":"68ed6acf2cc0aff60c0280733c618d03653ebd49","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/Policy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPolicy.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -22,7 +22,7 @@\n \n public interface Policy extends Entity {\n \n-    String getDescription();\n+    String getName();\n \n-    void setDescription(String description);\n+    void setName(String name);\n }"},{"sha":"039746e31744ad7f120d4dc023a3f32bf8fa527c","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -19,45 +19,45 @@ under the License.\n -->\n <dataset>\n   <!-- sample policies -->\n-  <PasswordPolicy id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" description=\"a password policy\"\n+  <PasswordPolicy id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" name=\"a password policy\"\n                   historyLength=\"1\" allowNullPassword=\"1\"/>\n   <Implementation id=\"DefaultPasswordRuleConf1\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" implementation_id=\"DefaultPasswordRuleConf1\"/>\n   <PasswordPolicy id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"\n-                  description=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"1\"/> \n+                  name=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"1\"/> \n   <Implementation id=\"DefaultPasswordRuleConf2\" type=\"PASSWORD_RULE\"  engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\" implementation_id=\"DefaultPasswordRuleConf2\"/>\n-  <AccountPolicy id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\" description=\"an account policy\"\n+  <AccountPolicy id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\" name=\"an account policy\"\n                  propagateSuspension=\"0\" maxAuthenticationAttempts=\"0\"/>\n   <Implementation id=\"DefaultAccountRuleConf1\" type=\"ACCOUNT_RULE\" engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n   <AccountPolicyRule policy_id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\" implementation_id=\"DefaultAccountRuleConf1\"/>\n-  <AccountPolicy id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\" description=\"sample account policy\"\n+  <AccountPolicy id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\" name=\"sample account policy\"\n                  propagateSuspension=\"0\" maxAuthenticationAttempts=\"3\"/>\n   <Implementation id=\"DefaultAccountRuleConf2\" type=\"ACCOUNT_RULE\"  engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <AccountPolicyRule policy_id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\" implementation_id=\"DefaultAccountRuleConf2\"/>\n-  <PasswordPolicy id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" description=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"0\"/> \n+  <PasswordPolicy id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" name=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"0\"/> \n   <Implementation id=\"DefaultPasswordRuleConf3\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n   \n   <!-- Authentication policies -->\n-  <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" description=\"MyDefaultAuthPolicyConf\"\n+  <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\"\n               jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n-  <AuthPolicy id=\"b912a0d4-a890-416f-9ab8-84ab077eb028\" description=\"DefaultAuthPolicy\"\n+  <AuthPolicy id=\"b912a0d4-a890-416f-9ab8-84ab077eb028\" name=\"DefaultAuthPolicy\"\n               jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n \n   <!-- Access policies -->\n-  <AccessPolicy id=\"419935c7-deb3-40b3-8a9a-683037e523a2\" description=\"MyDefaultAccessPolicyConf\"\n+  <AccessPolicy id=\"419935c7-deb3-40b3-8a9a-683037e523a2\" name=\"MyDefaultAccessPolicyConf\"\n                 jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf\",\"name\":\"MyDefaultAccessPolicyConf\",\"enabled\":true,\"ssoEnabled\":true}'/>\n \n   <!-- Attr Release Policies -->\n-  <AttrReleasePolicy id=\"319935c7-deb3-40b3-8a9a-683037e523a2\" description=\"AllowedAttrReleasePolicy\"\n+  <AttrReleasePolicy id=\"319935c7-deb3-40b3-8a9a-683037e523a2\" name=\"AllowedAttrReleasePolicy\"\n                      jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"AllowedAttrReleasePolicy\",\"allowedAttributes\":[\"cn\",\"givenName\",\"uid\"]}'/>\n-  <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" description=\"DenyAttrReleasePolicy\"\n+  <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" name=\"DenyAttrReleasePolicy\"\n                      jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n   \n   <!-- Authentication modules -->\n@@ -475,22 +475,22 @@ under the License.\n                user_id=\"823074dc-d280-436d-a7dd-07399fae48ec\" group_id=\"ece66293-8f31-4a84-8e8d-23da36e70846\"/>\n     \n   <!-- pull policies -->\n-  <PullPolicy id=\"66691e96-285f-4464-bc19-e68384ea4c85\" description=\"a pull policy\" conflictResolutionAction=\"IGNORE\"/>\n-  <PullPolicy id=\"880f8553-069b-4aed-9930-2cd53873f544\" description=\"another pull policy\" conflictResolutionAction=\"ALL\"/>\n+  <PullPolicy id=\"66691e96-285f-4464-bc19-e68384ea4c85\" name=\"a pull policy\" conflictResolutionAction=\"IGNORE\"/>\n+  <PullPolicy id=\"880f8553-069b-4aed-9930-2cd53873f544\" name=\"another pull policy\" conflictResolutionAction=\"ALL\"/>\n   <Implementation id=\"TestPullCorrelationRule\" type=\"PULL_CORRELATION_RULE\" engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\",\"name\":\"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\",\"schemas\":[\"username\",\"firstname\"]}'/>\n   <PullCorrelationRuleEntity id=\"10e3d196-7486-4c88-aefd-59e40d93a0c1\" pullPolicy_id=\"880f8553-069b-4aed-9930-2cd53873f544\" \n                              anyType_id=\"USER\" implementation_id=\"TestPullCorrelationRule\"/>\n-  <PullPolicy id=\"4ad10d94-e002-4b3f-b771-16089cc71da9\" description=\"pull policy 1\" conflictResolutionAction=\"IGNORE\"/>\n-  <PullPolicy id=\"9454b0d7-2610-400a-be82-fc23cf553dd6\" description=\"pull policy for java rule\" conflictResolutionAction=\"IGNORE\"/>\n+  <PullPolicy id=\"4ad10d94-e002-4b3f-b771-16089cc71da9\" name=\"pull policy 1\" conflictResolutionAction=\"IGNORE\"/>\n+  <PullPolicy id=\"9454b0d7-2610-400a-be82-fc23cf553dd6\" name=\"pull policy for java rule\" conflictResolutionAction=\"IGNORE\"/>\n \n   <!-- push policies -->\n-  <PushPolicy id=\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\" description=\"a push policy\" conflictResolutionAction=\"IGNORE\"/>\n+  <PushPolicy id=\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\" name=\"a push policy\" conflictResolutionAction=\"IGNORE\"/>\n   <Implementation id=\"TestPushCorrelationRule\" type=\"PUSH_CORRELATION_RULE\" engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf\",\"name\":\"org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf\",\"schemas\":[\"surname\"]}'/>\n   <PushCorrelationRuleEntity id=\"24463935-32a0-4272-bc78-04d6d0adc69e\" pushPolicy_id=\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\" \n                              anyType_id=\"USER\" implementation_id=\"TestPushCorrelationRule\"/>\n-  \n+\n   <ConnInstance id=\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\" displayName=\"ConnInstance100\"\n                 adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                 location=\"${connid.location}\""},{"sha":"60fbb9fd58de94a43bfff855949acea415ef42ea","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractPolicy.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -34,15 +34,15 @@ public abstract class AbstractPolicy extends AbstractGeneratedKeyEntity implemen\n     private static final long serialVersionUID = -5844833125843247458L;\n \n     @NotNull\n-    private String description;\n+    private String name;\n \n     @Override\n-    public String getDescription() {\n-        return description;\n+    public String getName() {\n+        return name;\n     }\n \n     @Override\n-    public void setDescription(final String description) {\n-        this.description = description;\n+    public void setName(final String name) {\n+        this.name = name;\n     }\n }"},{"sha":"50474709b4112a10e9c455f9092ee7eb529c683c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccessPolicy.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -19,9 +19,11 @@\n package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n import java.util.Optional;\n+import javax.persistence.Basic;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n+import org.apache.commons.lang3.BooleanUtils;\n import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -34,9 +36,35 @@ public class JPAAccessPolicy extends AbstractPolicy implements AccessPolicy {\n \n     public static final String TABLE = \"AccessPolicy\";\n \n+    @Basic\n+    private Boolean enabled = true;\n+\n+    @Basic\n+    private Boolean ssoEnabled = true;\n+\n     @Lob\n     private String jsonConf;\n \n+    @Override\n+    public boolean isEnabled() {\n+        return BooleanUtils.isNotFalse(enabled);\n+    }\n+\n+    @Override\n+    public void setEnabled(final boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    @Override\n+    public boolean isSsoEnabled() {\n+        return BooleanUtils.isNotFalse(ssoEnabled);\n+    }\n+\n+    @Override\n+    public void setSsoEnabled(final boolean ssoEnabled) {\n+        this.ssoEnabled = ssoEnabled;\n+    }\n+\n     @Override\n     public AccessPolicyConf getConf() {\n         return jsonConf == null"},{"sha":"e6adc46817eb15c5b6bad24de8d899223cb19de7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAProvision.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -35,6 +35,7 @@\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.NotNull;\n+import org.apache.commons.lang3.BooleanUtils;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -134,7 +135,7 @@ public List<? extends AnyTypeClass> getAuxClasses() {\n     @Override\n     public SyncToken getSyncToken() {\n         return Optional.ofNullable(serializedSyncToken)\n-            .map(syncToken -> POJOHelper.deserialize(syncToken, SyncToken.class)).orElse(null);\n+                .map(syncToken -> POJOHelper.deserialize(syncToken, SyncToken.class)).orElse(null);\n     }\n \n     @Override\n@@ -149,7 +150,7 @@ public void setSyncToken(final SyncToken syncToken) {\n \n     @Override\n     public boolean isIgnoreCaseMatch() {\n-        return ignoreCaseMatch;\n+        return BooleanUtils.isNotFalse(ignoreCaseMatch);\n     }\n \n     @Override"},{"sha":"53bb4d1bc4da6ed9911ac5dbcfaac010a57c9dab","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -28,9 +28,9 @@ public class PolicyValidator extends AbstractValidator<PolicyCheck, Policy> {\n     public boolean isValid(final Policy policy, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        if (isHtml(policy.getDescription())) {\n+        if (isHtml(policy.getName())) {\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidName, policy.getDescription())).\n+                    getTemplate(EntityViolationType.InvalidName, policy.getName())).\n                     addPropertyNode(\"description\").addConstraintViolation();\n             return false;\n         }"},{"sha":"0add3bfcc5b34d66483682dc16aa5b99aee10a20","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AbstractClientAppTest.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.core.persistence.jpa.inner;\n \n import java.util.List;\n-import java.util.Set;\n+import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n-import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n@@ -37,15 +37,12 @@ public class AbstractClientAppTest extends AbstractTest {\n \n     protected AttrReleasePolicy buildAndSaveAttrRelPolicy() {\n         AttrReleasePolicy attrRelPolicy = entityFactory.newEntity(AttrReleasePolicy.class);\n-        attrRelPolicy.setDescription(\"AttrRelPolicyTest\");\n+        attrRelPolicy.setName(\"AttrRelPolicyTest\");\n \n-        AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n+        DefaultAttrReleasePolicyConf conf = new DefaultAttrReleasePolicyConf();\n         conf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n-\n-        AllowedAttrReleasePolicyConf.ConsentPolicy consentPolicy = conf.new ConsentPolicy();\n-        consentPolicy.setStatus(Boolean.TRUE);\n-        consentPolicy.getIncludeOnlyAttrs().addAll(Set.of(\"cn\"));\n-        conf.setConsentPolicy(consentPolicy);\n+        conf.setStatus(Boolean.TRUE);\n+        conf.getIncludeOnlyAttrs().add(\"cn\");\n \n         attrRelPolicy.setConf(conf);\n \n@@ -55,20 +52,20 @@ protected AttrReleasePolicy buildAndSaveAttrRelPolicy() {\n \n     protected AccessPolicy buildAndSaveAccessPolicy() {\n         AccessPolicy accessPolicy = entityFactory.newEntity(AccessPolicy.class);\n-        accessPolicy.setDescription(\"AccessPolicyTest\");\n+        accessPolicy.setName(\"AccessPolicyTest\");\n+        accessPolicy.setEnabled(true);\n+        accessPolicy.setSsoEnabled(false);\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n-        conf.setEnabled(true);\n-        conf.addRequiredAttr(\"attribute1\", Set.of(\"value1\", \"value2\"));\n-        conf.setSsoEnabled(false);\n+        conf.getRequiredAttrs().add(new Attr.Builder(\"attribute1\").values(\"value1\", \"value2\").build());\n         accessPolicy.setConf(conf);\n \n         return policyDAO.save(accessPolicy);\n     }\n \n     protected AuthPolicy buildAndSaveAuthPolicy() {\n         AuthPolicy authPolicy = entityFactory.newEntity(AuthPolicy.class);\n-        authPolicy.setDescription(\"AuthPolicyTest\");\n+        authPolicy.setName(\"AuthPolicyTest\");\n \n         DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n         conf.getAuthModules().addAll(List.of(\"LdapAuthentication1\", \"DatabaseAuthentication2\"));"},{"sha":"db49599b7460448059ecef118322bde0ef65dcda","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":14,"deletions":20,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -25,12 +25,11 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n-import java.util.Set;\n import java.util.UUID;\n+import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n-import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n-import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n@@ -147,7 +146,7 @@ public void findByType() {\n     public void create() {\n         PullPolicy policy = entityFactory.newEntity(PullPolicy.class);\n         policy.setConflictResolutionAction(ConflictResolutionAction.IGNORE);\n-        policy.setDescription(\"Pull policy\");\n+        policy.setName(\"Pull policy\");\n \n         final String pullURuleName = \"net.tirasa.pull.correlation.TirasaURule\";\n         final String pullGRuleName = \"net.tirasa.pull.correlation.TirasaGRule\";\n@@ -188,10 +187,10 @@ public void create() {\n \n         int beforeCount = policyDAO.findAll().size();\n         AccessPolicy accessPolicy = entityFactory.newEntity(AccessPolicy.class);\n-        accessPolicy.setDescription(\"AttrReleasePolicyAllowEverything\");\n+        accessPolicy.setName(\"AttrReleasePolicyAllowEverything\");\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n-        conf.addRequiredAttr(\"cn\", Set.of(\"syncope\"));\n+        conf.getRequiredAttrs().add(new Attr.Builder(\"cn\").value(\"syncope\").build());\n         accessPolicy.setConf(conf);\n \n         accessPolicy = policyDAO.save(accessPolicy);\n@@ -204,13 +203,11 @@ public void create() {\n \n         beforeCount = policyDAO.findAll().size();\n         AuthPolicy authPolicy = entityFactory.newEntity(AuthPolicy.class);\n-        authPolicy.setDescription(\"AuthPolicyTest\");\n+        authPolicy.setName(\"AuthPolicyTest\");\n \n         DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n         authPolicyConf.getAuthModules().addAll(List.of(\"LdapAuthentication1\", \"DatabaseAuthentication2\"));\n-        DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n-        criteria.setAll(true);\n-        authPolicyConf.setCriteria(criteria);\n+        authPolicyConf.setTryAll(true);\n         authPolicy.setConf(authPolicyConf);\n \n         authPolicy = policyDAO.save(authPolicy);\n@@ -223,23 +220,20 @@ public void create() {\n \n         beforeCount = policyDAO.findAll().size();\n         AttrReleasePolicy attrReleasePolicy = entityFactory.newEntity(AttrReleasePolicy.class);\n-        attrReleasePolicy.setDescription(\"AttrReleasePolicyAllowEverything\");\n+        attrReleasePolicy.setName(\"AttrReleasePolicyAllowEverything\");\n \n-        AllowedAttrReleasePolicyConf attrReleasePolicyConf = new AllowedAttrReleasePolicyConf();\n-        attrReleasePolicyConf.getAllowedAttrs().addAll(List.of(\"*\"));\n-\n-        AllowedAttrReleasePolicyConf.ConsentPolicy consentPolicy = attrReleasePolicyConf.new ConsentPolicy();\n-        consentPolicy.setStatus(Boolean.TRUE);\n-        consentPolicy.getIncludeOnlyAttrs().addAll(Set.of(\"cn\"));\n-        attrReleasePolicyConf.setConsentPolicy(consentPolicy);\n+        DefaultAttrReleasePolicyConf attrReleasePolicyConf = new DefaultAttrReleasePolicyConf();\n+        attrReleasePolicyConf.getAllowedAttrs().add(\"*\");\n+        attrReleasePolicyConf.setStatus(Boolean.TRUE);\n+        attrReleasePolicyConf.getIncludeOnlyAttrs().add(\"cn\");\n         attrReleasePolicy.setConf(attrReleasePolicyConf);\n \n         attrReleasePolicy = policyDAO.save(attrReleasePolicy);\n \n         assertNotNull(attrReleasePolicy);\n         assertNotNull(attrReleasePolicy.getKey());\n-        assertNotNull(((AllowedAttrReleasePolicyConf) attrReleasePolicy.getConf()).getAllowedAttrs());\n-        assertNotNull(((AllowedAttrReleasePolicyConf) attrReleasePolicy.getConf()).getConsentPolicy());\n+        assertNotNull(((DefaultAttrReleasePolicyConf) attrReleasePolicy.getConf()).getAllowedAttrs());\n+        assertNotNull(((DefaultAttrReleasePolicyConf) attrReleasePolicy.getConf()).getStatus());\n \n         afterCount = policyDAO.findAll().size();\n         assertEquals(afterCount, beforeCount + 1);"},{"sha":"97affb1341073e214fd3b30fc3c53362a37393b9","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -19,45 +19,45 @@ under the License.\n -->\n <dataset>\n   <!-- sample policies -->\n-  <PasswordPolicy id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" description=\"a password policy\"\n+  <PasswordPolicy id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" name=\"a password policy\"\n                   historyLength=\"1\" allowNullPassword=\"1\"/>\n   <Implementation id=\"DefaultPasswordRuleConf1\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" implementation_id=\"DefaultPasswordRuleConf1\"/>\n   <PasswordPolicy id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"\n-                  description=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"1\"/> \n+                  name=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"1\"/> \n   <Implementation id=\"DefaultPasswordRuleConf2\" type=\"PASSWORD_RULE\"  engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\" implementation_id=\"DefaultPasswordRuleConf2\"/>\n-  <AccountPolicy id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\" description=\"an account policy\"\n+  <AccountPolicy id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\" name=\"an account policy\"\n                  propagateSuspension=\"0\" maxAuthenticationAttempts=\"0\"/>\n   <Implementation id=\"DefaultAccountRuleConf1\" type=\"ACCOUNT_RULE\" engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n   <AccountPolicyRule policy_id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\" implementation_id=\"DefaultAccountRuleConf1\"/>\n-  <AccountPolicy id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\" description=\"sample account policy\"\n+  <AccountPolicy id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\" name=\"sample account policy\"\n                  propagateSuspension=\"0\" maxAuthenticationAttempts=\"3\"/>\n   <Implementation id=\"DefaultAccountRuleConf2\" type=\"ACCOUNT_RULE\"  engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <AccountPolicyRule policy_id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\" implementation_id=\"DefaultAccountRuleConf2\"/>\n-  <PasswordPolicy id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" description=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"0\"/> \n+  <PasswordPolicy id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" name=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"0\"/> \n   <Implementation id=\"DefaultPasswordRuleConf3\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n   \n   <!-- Authentication policies -->\n-  <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" description=\"MyDefaultAuthPolicyConf\"\n+  <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\"\n               jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n-  <AuthPolicy id=\"b912a0d4-a890-416f-9ab8-84ab077eb028\" description=\"DefaultAuthPolicy\"\n+  <AuthPolicy id=\"b912a0d4-a890-416f-9ab8-84ab077eb028\" name=\"DefaultAuthPolicy\"\n               jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n \n   <!-- Access policies -->\n-  <AccessPolicy id=\"419935c7-deb3-40b3-8a9a-683037e523a2\" description=\"MyDefaultAccessPolicyConf\"\n+  <AccessPolicy id=\"419935c7-deb3-40b3-8a9a-683037e523a2\" name=\"MyDefaultAccessPolicyConf\"\n                 jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf\",\"name\":\"MyDefaultAccessPolicyConf\",\"enabled\":true,\"ssoEnabled\":true}'/>\n \n   <!-- Attr Release Policies -->\n-  <AttrReleasePolicy id=\"319935c7-deb3-40b3-8a9a-683037e523a2\" description=\"AllowedAttrReleasePolicy\"\n+  <AttrReleasePolicy id=\"319935c7-deb3-40b3-8a9a-683037e523a2\" name=\"AllowedAttrReleasePolicy\"\n                      jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"AllowedAttrReleasePolicy\",\"allowedAttributes\":[\"cn\",\"givenName\",\"uid\"]}'/>\n-  <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" description=\"DenyAttrReleasePolicy\"\n+  <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" name=\"DenyAttrReleasePolicy\"\n                      jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n \n   <!-- Authentication modules -->\n@@ -562,17 +562,17 @@ under the License.\n   <GPlainAttrValue attribute_id=\"22690472-ed3f-4972-8979-4c9251fab044\" id=\"e16765e6-f806-469e-ae34-1ddf56f2102a\" stringValue=\"r13\"/>\n   \n   <!-- pull policies -->\n-  <PullPolicy id=\"66691e96-285f-4464-bc19-e68384ea4c85\" description=\"a pull policy\" conflictResolutionAction=\"IGNORE\"/>\n-  <PullPolicy id=\"880f8553-069b-4aed-9930-2cd53873f544\" description=\"another pull policy\" conflictResolutionAction=\"ALL\"/>\n+  <PullPolicy id=\"66691e96-285f-4464-bc19-e68384ea4c85\" name=\"a pull policy\" conflictResolutionAction=\"IGNORE\"/>\n+  <PullPolicy id=\"880f8553-069b-4aed-9930-2cd53873f544\" name=\"another pull policy\" conflictResolutionAction=\"ALL\"/>\n   <Implementation id=\"TestPullCorrelationRule\" type=\"PULL_CORRELATION_RULE\" engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\",\"name\":\"org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf\",\"schemas\":[\"username\",\"firstname\"]}'/>\n   <PullCorrelationRuleEntity id=\"10e3d196-7486-4c88-aefd-59e40d93a0c1\" pullPolicy_id=\"880f8553-069b-4aed-9930-2cd53873f544\" \n                              anyType_id=\"USER\" implementation_id=\"TestPullCorrelationRule\"/>\n-  <PullPolicy id=\"4ad10d94-e002-4b3f-b771-16089cc71da9\" description=\"pull policy 1\" conflictResolutionAction=\"IGNORE\"/>\n-  <PullPolicy id=\"9454b0d7-2610-400a-be82-fc23cf553dd6\" description=\"pull policy for java rule\" conflictResolutionAction=\"IGNORE\"/>\n+  <PullPolicy id=\"4ad10d94-e002-4b3f-b771-16089cc71da9\" name=\"pull policy 1\" conflictResolutionAction=\"IGNORE\"/>\n+  <PullPolicy id=\"9454b0d7-2610-400a-be82-fc23cf553dd6\" name=\"pull policy for java rule\" conflictResolutionAction=\"IGNORE\"/>\n \n   <!-- push policies -->\n-  <PushPolicy id=\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\" description=\"a push policy\" conflictResolutionAction=\"IGNORE\"/>\n+  <PushPolicy id=\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\" name=\"a push policy\" conflictResolutionAction=\"IGNORE\"/>\n   <Implementation id=\"TestPushCorrelationRule\" type=\"PUSH_CORRELATION_RULE\" engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf\",\"name\":\"org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf\",\"schemas\":[\"surname\"]}'/>\n   <PushCorrelationRuleEntity id=\"24463935-32a0-4272-bc78-04d6d0adc69e\" pushPolicy_id=\"fb6530e5-892d-4f47-a46b-180c5b6c5c83\" "},{"sha":"f18476b934080e9e3b5fe2f544c40b88daa9a1c5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":16,"deletions":8,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -206,7 +206,7 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n             AuthPolicy authPolicy = AuthPolicy.class.cast(result);\n             AuthPolicyTO authPolicyTO = AuthPolicyTO.class.cast(policyTO);\n \n-            authPolicy.setDescription(authPolicyTO.getKey());\n+            authPolicy.setName(authPolicyTO.getKey());\n             authPolicy.setConf(authPolicyTO.getConf());\n         } else if (policyTO instanceof AccessPolicyTO) {\n             if (result == null) {\n@@ -216,7 +216,9 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n             AccessPolicy accessPolicy = AccessPolicy.class.cast(result);\n             AccessPolicyTO accessPolicyTO = AccessPolicyTO.class.cast(policyTO);\n \n-            accessPolicy.setDescription(accessPolicyTO.getKey());\n+            accessPolicy.setName(accessPolicyTO.getKey());\n+            accessPolicy.setEnabled(accessPolicyTO.isEnabled());\n+            accessPolicy.setSsoEnabled(accessPolicyTO.isSsoEnabled());\n             accessPolicy.setConf(accessPolicyTO.getConf());\n         } else if (policyTO instanceof AttrReleasePolicyTO) {\n             if (result == null) {\n@@ -226,12 +228,12 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n             AttrReleasePolicy attrReleasePolicy = AttrReleasePolicy.class.cast(result);\n             AttrReleasePolicyTO attrReleasePolicyTO = AttrReleasePolicyTO.class.cast(policyTO);\n \n-            attrReleasePolicy.setDescription(attrReleasePolicyTO.getKey());\n+            attrReleasePolicy.setName(attrReleasePolicyTO.getKey());\n             attrReleasePolicy.setConf(attrReleasePolicyTO.getConf());\n         }\n \n         if (result != null) {\n-            result.setDescription(policyTO.getDescription());\n+            result.setName(policyTO.getName());\n         }\n \n         return result;\n@@ -295,21 +297,27 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n                     put(rule.getAnyType().getKey(), rule.getImplementation().getKey()));\n         } else if (policy instanceof AuthPolicy) {\n             AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n-            authPolicyTO.setConf(((AuthPolicy) policy).getConf());\n             policyTO = (T) authPolicyTO;\n+\n+            authPolicyTO.setConf(((AuthPolicy) policy).getConf());\n         } else if (policy instanceof AccessPolicy) {\n+            AccessPolicy accessPolicy = AccessPolicy.class.cast(policy);\n             AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n-            accessPolicyTO.setConf(((AccessPolicy) policy).getConf());\n             policyTO = (T) accessPolicyTO;\n+\n+            accessPolicyTO.setEnabled(accessPolicy.isEnabled());\n+            accessPolicyTO.setSsoEnabled(accessPolicy.isSsoEnabled());\n+            accessPolicyTO.setConf(((AccessPolicy) policy).getConf());\n         } else if (policy instanceof AttrReleasePolicy) {\n             AttrReleasePolicyTO attrReleasePolicyTO = new AttrReleasePolicyTO();\n-            attrReleasePolicyTO.setConf(((AttrReleasePolicy) policy).getConf());\n             policyTO = (T) attrReleasePolicyTO;\n+\n+            attrReleasePolicyTO.setConf(((AttrReleasePolicy) policy).getConf());\n         }\n \n         if (policyTO != null) {\n             policyTO.setKey(policy.getKey());\n-            policyTO.setDescription(policy.getDescription());\n+            policyTO.setName(policy.getName());\n \n             if (!(policy instanceof AuthPolicy)\n                     && !(policy instanceof AccessPolicy)"},{"sha":"c375e5065b73206b3f24a6ae55de96d0d0f55eea","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/wa/WAClientAppDataBinderImpl.java","status":"modified","additions":17,"deletions":13,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -39,6 +40,9 @@ public class WAClientAppDataBinderImpl implements WAClientAppDataBinder {\n     @Autowired\n     private ClientAppDataBinder clientAppDataBinder;\n \n+    @Autowired\n+    private PolicyDataBinder policyDataBinder;\n+\n     @Autowired\n     private AuthModuleDAO authModuleDAO;\n \n@@ -56,19 +60,6 @@ public WAClientApp getWAClientApp(final ClientApp clientApp) {\n                 authPolicyConf = clientApp.getRealm().getAuthPolicy().getConf();\n                 waClientApp.setAuthPolicyConf(clientApp.getRealm().getAuthPolicy().getConf());\n             }\n-\n-            if (clientApp.getAccessPolicy() != null) {\n-                waClientApp.setAccessPolicyConf(clientApp.getAccessPolicy().getConf());\n-            } else if (clientApp.getRealm() != null && clientApp.getRealm().getAccessPolicy() != null) {\n-                waClientApp.setAccessPolicyConf(clientApp.getRealm().getAccessPolicy().getConf());\n-            }\n-\n-            if (clientApp.getAttrReleasePolicy() != null) {\n-                waClientApp.setAttrReleasePolicyConf(clientApp.getAttrReleasePolicy().getConf());\n-            } else if (clientApp.getRealm() != null && clientApp.getRealm().getAttrReleasePolicy() != null) {\n-                waClientApp.setAttrReleasePolicyConf(clientApp.getRealm().getAttrReleasePolicy().getConf());\n-            }\n-\n             if (authPolicyConf instanceof DefaultAuthPolicyConf) {\n                 ((DefaultAuthPolicyConf) authPolicyConf).getAuthModules().forEach(key -> {\n                     AuthModule authModule = authModuleDAO.find(key);\n@@ -81,6 +72,19 @@ public WAClientApp getWAClientApp(final ClientApp clientApp) {\n                     }\n                 });\n             }\n+\n+            if (clientApp.getAccessPolicy() != null) {\n+                waClientApp.setAccessPolicy(policyDataBinder.getPolicyTO(clientApp.getAccessPolicy()));\n+            } else if (clientApp.getRealm() != null && clientApp.getRealm().getAccessPolicy() != null) {\n+                waClientApp.setAccessPolicy(policyDataBinder.getPolicyTO(clientApp.getRealm().getAccessPolicy()));\n+            }\n+\n+            if (clientApp.getAttrReleasePolicy() != null) {\n+                waClientApp.setAttrReleasePolicyConf(clientApp.getAttrReleasePolicy().getConf());\n+            } else if (clientApp.getRealm() != null && clientApp.getRealm().getAttrReleasePolicy() != null) {\n+                waClientApp.setAttrReleasePolicyConf(clientApp.getRealm().getAttrReleasePolicy().getConf());\n+            }\n+\n             if (waClientApp.getReleaseAttrs().isEmpty()) {\n                 if (clientApp.getAttrReleasePolicy() != null) {\n                     waClientApp.setAttrReleasePolicyConf(clientApp.getAttrReleasePolicy().getConf());"},{"sha":"33ce37a4514164fac6fc2f3847fc8a815488f304","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/TestPasswordPolicy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordPolicy.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -35,12 +35,12 @@ public String getKey() {\n     }\n \n     @Override\n-    public String getDescription() {\n+    public String getName() {\n         return \"\";\n     }\n \n     @Override\n-    public void setDescription(String description) {\n+    public void setName(String description) {\n         // nothing to do\n     }\n "},{"sha":"1958fea4022c2a52e687247c583a32b8df191f33","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -34,7 +34,6 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Properties;\n-import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n@@ -71,7 +70,7 @@\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n-import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n@@ -770,13 +769,13 @@ protected <T> T queryForObject(\n     protected static OIDCRPTO buildOIDCRP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n-        authPolicyTO.setDescription(\"Authentication Policy\");\n+        authPolicyTO.setName(\"Authentication Policy\");\n         authPolicyTO = createPolicy(PolicyType.AUTH, authPolicyTO);\n         assertNotNull(authPolicyTO);\n \n         AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n         accessPolicyTO.setKey(\"AccessPolicyTest_\" + getUUIDString());\n-        accessPolicyTO.setDescription(\"Access policy\");\n+        accessPolicyTO.setName(\"Access policy\");\n         accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n         assertNotNull(accessPolicyTO);\n \n@@ -799,13 +798,13 @@ protected static OIDCRPTO buildOIDCRP() {\n     protected static SAML2SPTO buildSAML2SP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n-        authPolicyTO.setDescription(\"Authentication Policy\");\n+        authPolicyTO.setName(\"Authentication Policy\");\n         authPolicyTO = createPolicy(PolicyType.AUTH, authPolicyTO);\n         assertNotNull(authPolicyTO);\n \n         AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n         accessPolicyTO.setKey(\"AccessPolicyTest_\" + getUUIDString());\n-        accessPolicyTO.setDescription(\"Access policy\");\n+        accessPolicyTO.setName(\"Access policy\");\n         accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n         assertNotNull(accessPolicyTO);\n \n@@ -839,7 +838,7 @@ protected <T extends ClientAppTO> T createClientApp(final ClientAppType type, fi\n \n     protected static AuthPolicyTO buildAuthPolicyTO(final String authModuleKey) {\n         AuthPolicyTO policy = new AuthPolicyTO();\n-        policy.setDescription(\"Test Authentication policy\");\n+        policy.setName(\"Test Authentication policy\");\n \n         DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n         conf.getAuthModules().add(authModuleKey);\n@@ -850,15 +849,12 @@ protected static AuthPolicyTO buildAuthPolicyTO(final String authModuleKey) {\n \n     protected static AttrReleasePolicyTO buildAttrReleasePolicyTO() {\n         AttrReleasePolicyTO policy = new AttrReleasePolicyTO();\n-        policy.setDescription(\"Test Attribute Release policy\");\n+        policy.setName(\"Test Attribute Release policy\");\n \n-        AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n+        DefaultAttrReleasePolicyConf conf = new DefaultAttrReleasePolicyConf();\n         conf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n-\n-        AllowedAttrReleasePolicyConf.ConsentPolicy consentPolicy = conf.new ConsentPolicy();\n-        consentPolicy.setStatus(Boolean.TRUE);\n-        consentPolicy.getIncludeOnlyAttrs().addAll(Set.of(\"cn\"));\n-        conf.setConsentPolicy(consentPolicy);\n+        conf.setStatus(Boolean.TRUE);\n+        conf.getIncludeOnlyAttrs().add(\"cn\");\n \n         policy.setConf(conf);\n \n@@ -867,11 +863,11 @@ protected static AttrReleasePolicyTO buildAttrReleasePolicyTO() {\n \n     protected static AccessPolicyTO buildAccessPolicyTO() {\n         AccessPolicyTO policy = new AccessPolicyTO();\n-        policy.setDescription(\"Test Access policy\");\n+        policy.setName(\"Test Access policy\");\n+        policy.setEnabled(true);\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n-        conf.setEnabled(true);\n-        conf.addRequiredAttr(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n+        conf.getRequiredAttrs().add(new Attr.Builder(\"cn\").values(\"admin\", \"Admin\", \"TheAdmin\").build());\n         policy.setConf(conf);\n \n         return policy;"},{"sha":"708e31ee601ec656c2343bfcc8ee7ca99da8df49","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/PoliciesITCase.java","status":"modified","additions":121,"deletions":121,"changes":242,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -41,7 +41,7 @@ public void login() {\n         TESTER.assertRenderedPage(Policies.class);\n     }\n \n-    private static void createAccountPolicy(String description) {\n+    private static void createAccountPolicy(String name) {\n         TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:0:link\");\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:container:content:add\");\n         TESTER.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n@@ -51,7 +51,7 @@ private static void createAccountPolicy(String description) {\n \n         FormTester formTester = TESTER.newFormTester(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n-        formTester.setValue(\"content:fields:0:field:textField\", description);\n+        formTester.setValue(\"content:fields:0:field:textField\", name);\n         formTester.setValue(\"content:fields:1:field:spinner\", \"1\");\n         formTester.setValue(\"content:fields:2:field:checkboxField\", true);\n         formTester.setValue(\"content:fields:3:field:paletteField:recorder\", \"ws-target-resource-nopropagation4\");\n@@ -67,9 +67,9 @@ private static void createAccountPolicy(String description) {\n         TESTER.assertComponent(\"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", WebMarkupContainer.class);\n \n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -81,7 +81,7 @@ private static void createAccountPolicy(String description) {\n                 Modal.class);\n \n         TESTER.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n-                + \":content:fields:0:field:textField\", description);\n+                + \":content:fields:0:field:textField\", name);\n         TESTER.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n                 + \":content:fields:1:field:spinner\", 1);\n         TESTER.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n@@ -93,12 +93,12 @@ private static void createAccountPolicy(String description) {\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n                 Constants.ON_CLICK);\n \n-        component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+        component = findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n         assertNotNull(component);\n     }\n \n-    private static void createPasswordPolicy(String description) {\n+    private static void createPasswordPolicy(String name) {\n         TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:1:link\");\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:container:content:add\");\n         TESTER.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n@@ -108,7 +108,7 @@ private static void createPasswordPolicy(String description) {\n \n         FormTester formTester = TESTER.newFormTester(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n-        formTester.setValue(\"content:fields:0:field:textField\", description);\n+        formTester.setValue(\"content:fields:0:field:textField\", name);\n         formTester.setValue(\"content:fields:1:field:spinner\", \"1\");\n         formTester.setValue(\"content:fields:2:field:checkboxField\", true);\n \n@@ -120,9 +120,9 @@ private static void createPasswordPolicy(String description) {\n \n         closeCallBack(modal);\n \n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -134,7 +134,7 @@ private static void createPasswordPolicy(String description) {\n                 Modal.class);\n \n         TESTER.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n-                + \":content:fields:0:field:textField\", description);\n+                + \":content:fields:0:field:textField\", name);\n         TESTER.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n                 + \":content:fields:1:field:spinner\", 1);\n         TESTER.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n@@ -144,11 +144,11 @@ private static void createPasswordPolicy(String description) {\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n                 Constants.ON_CLICK);\n \n-        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+        assertNotNull(findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name));\n     }\n \n-    private static void createPullPolicy(String description) {\n+    private static void createPullPolicy(String name) {\n         TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:5:link\");\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:container:content:add\");\n         TESTER.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n@@ -158,7 +158,7 @@ private static void createPullPolicy(String description) {\n \n         FormTester formTester = TESTER.newFormTester(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n-        formTester.setValue(\"content:fields:0:field:textField\", description);\n+        formTester.setValue(\"content:fields:0:field:textField\", name);\n \n         TESTER.executeAjaxEvent(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\",\n@@ -169,9 +169,9 @@ private static void createPullPolicy(String description) {\n \n         closeCallBack(modal);\n \n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -183,21 +183,21 @@ private static void createPullPolicy(String description) {\n                 Modal.class);\n \n         TESTER.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n-                + \":content:fields:0:field:textField\", description);\n+                + \":content:fields:0:field:textField\", name);\n \n         TESTER.executeAjaxEvent(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n                 Constants.ON_CLICK);\n \n-        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+        assertNotNull(findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name));\n     }\n \n-    private static void deleteAccountPolicy(String description) {\n+    private static void deleteAccountPolicy(String name) {\n         TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:0:link\");\n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -214,15 +214,15 @@ private static void deleteAccountPolicy(String description) {\n         assertSuccessMessage();\n         TESTER.cleanupFeedbackMessages();\n \n-        assertNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+        assertNull(findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name));\n     }\n \n-    private static void deletePasswordPolicy(String description) {\n+    private static void deletePasswordPolicy(String name) {\n         TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:1:link\");\n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -239,15 +239,15 @@ private static void deletePasswordPolicy(String description) {\n         assertSuccessMessage();\n         TESTER.cleanupFeedbackMessages();\n \n-        assertNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+        assertNull(findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name));\n     }\n \n-    private static void deletePullPolicy(String description) {\n+    private static void deletePullPolicy(String name) {\n         TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:5:link\");\n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -264,31 +264,31 @@ private static void deletePullPolicy(String description) {\n         assertSuccessMessage();\n         TESTER.cleanupFeedbackMessages();\n \n-        assertNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+        assertNull(findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name));\n     }\n \n     @Test\n     public void read() {\n-        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n+        assertNotNull(findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", \"an account policy\"));\n     }\n \n     @Test\n     public void createDeleteAccountPolicy() {\n-        String description = \"My Test Account Policy\";\n-        createAccountPolicy(description);\n-        deleteAccountPolicy(description);\n+        String name = \"My Test Account Policy\";\n+        createAccountPolicy(name);\n+        deleteAccountPolicy(name);\n     }\n \n     @Test\n     public void cloneDeleteAccountPolicy() {\n-        String description = \"My Test Account Policy to be cloned\";\n-        createAccountPolicy(description);\n+        String name = \"My Test Account Policy to be cloned\";\n+        createAccountPolicy(name);\n \n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -304,7 +304,7 @@ public void cloneDeleteAccountPolicy() {\n \n         FormTester formTester = TESTER.newFormTester(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n-        formTester.setValue(\"content:fields:0:field:textField\", description + '2');\n+        formTester.setValue(\"content:fields:0:field:textField\", name + '2');\n \n         TESTER.clickLink(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n@@ -314,32 +314,32 @@ public void cloneDeleteAccountPolicy() {\n \n         closeCallBack(modal);\n \n-        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+        assertNotNull(findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name));\n \n-        deleteAccountPolicy(description);\n+        deleteAccountPolicy(name);\n \n-        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description + '2'));\n+        assertNotNull(findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name + '2'));\n \n-        deleteAccountPolicy(description + '2');\n+        deleteAccountPolicy(name + '2');\n     }\n \n     @Test\n     public void createDeletePasswordPolicy() {\n-        String description = \"My Test Password Policy\";\n-        createPasswordPolicy(description);\n-        deletePasswordPolicy(description);\n+        String name = \"My Test Password Policy\";\n+        createPasswordPolicy(name);\n+        deletePasswordPolicy(name);\n     }\n \n     @Test\n     public void cloneDeletePasswordPolicy() {\n-        String description = \"My Test Password Policy to be cloned\";\n-        createPasswordPolicy(description);\n+        String name = \"My Test Password Policy to be cloned\";\n+        createPasswordPolicy(name);\n \n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -355,7 +355,7 @@ public void cloneDeletePasswordPolicy() {\n \n         FormTester formTester = TESTER.newFormTester(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n-        formTester.setValue(\"content:fields:0:field:textField\", description + '2');\n+        formTester.setValue(\"content:fields:0:field:textField\", name + '2');\n \n         TESTER.clickLink(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n@@ -365,32 +365,32 @@ public void cloneDeletePasswordPolicy() {\n \n         closeCallBack(modal);\n \n-        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+        assertNotNull(findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name));\n \n-        deletePasswordPolicy(description);\n+        deletePasswordPolicy(name);\n \n-        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description + '2'));\n+        assertNotNull(findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name + '2'));\n \n-        deletePasswordPolicy(description + '2');\n+        deletePasswordPolicy(name + '2');\n     }\n \n     @Test\n     public void createDeletePullPolicy() {\n-        String description = \"My Test Pull Policy\";\n-        createPullPolicy(description);\n-        deletePullPolicy(description);\n+        String name = \"My Test Pull Policy\";\n+        createPullPolicy(name);\n+        deletePullPolicy(name);\n     }\n \n     @Test\n     public void cloneDeletePullPolicy() {\n-        String description = \"My Test Pull Policy to be cloned\";\n-        createPullPolicy(description);\n+        String name = \"My Test Pull Policy to be cloned\";\n+        createPullPolicy(name);\n \n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -406,7 +406,7 @@ public void cloneDeletePullPolicy() {\n \n         FormTester formTester = TESTER.newFormTester(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n-        formTester.setValue(\"content:fields:0:field:textField\", description + '2');\n+        formTester.setValue(\"content:fields:0:field:textField\", name + '2');\n \n         TESTER.clickLink(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n@@ -416,25 +416,25 @@ public void cloneDeletePullPolicy() {\n \n         closeCallBack(modal);\n \n-        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description));\n+        assertNotNull(findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name));\n \n-        deletePullPolicy(description);\n+        deletePullPolicy(name);\n \n-        assertNotNull(findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description + '2'));\n+        assertNotNull(findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name + '2'));\n \n-        deletePullPolicy(description + '2');\n+        deletePullPolicy(name + '2');\n     }\n \n     @Test\n     public void createUpdateDeleteAccountPolicy() {\n-        String description = \"Account Policy To Be Updated\";\n-        createAccountPolicy(description);\n+        String name = \"Account Policy To Be Updated\";\n+        createAccountPolicy(name);\n \n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -460,8 +460,8 @@ public void createUpdateDeleteAccountPolicy() {\n \n         closeCallBack(modal);\n \n-        component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+        component = findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -479,11 +479,11 @@ public void createUpdateDeleteAccountPolicy() {\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n                 Constants.ON_CLICK);\n \n-        deleteAccountPolicy(description);\n+        deleteAccountPolicy(name);\n     }\n \n     private static void composeDefaultAccountPolicy(final String policyDescription) {\n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", policyDescription);\n \n@@ -523,20 +523,20 @@ private static void composeDefaultAccountPolicy(final String policyDescription)\n \n     @Test\n     public void createComposeDeleteAccountPolicy() {\n-        String description = \"Account Policy To Be Composed\";\n-        createAccountPolicy(description);\n-        composeDefaultAccountPolicy(description);\n-        deleteAccountPolicy(description);\n+        String name = \"Account Policy To Be Composed\";\n+        createAccountPolicy(name);\n+        composeDefaultAccountPolicy(name);\n+        deleteAccountPolicy(name);\n     }\n \n     @Test\n     public void createUpdateDeletePasswordPolicy() {\n-        String description = \"Password Policy To Be Updated\";\n-        createPasswordPolicy(description);\n+        String name = \"Password Policy To Be Updated\";\n+        createPasswordPolicy(name);\n \n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -562,8 +562,8 @@ public void createUpdateDeletePasswordPolicy() {\n \n         closeCallBack(modal);\n \n-        component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+        component = findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -581,17 +581,17 @@ public void createUpdateDeletePasswordPolicy() {\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n                 Constants.ON_CLICK);\n \n-        deletePasswordPolicy(description);\n+        deletePasswordPolicy(name);\n     }\n \n     @Test\n     public void createComposeDeletePasswordPolicy() {\n-        String description = \"Password Policy To Be Composed\";\n-        createPasswordPolicy(description);\n+        String name = \"Password Policy To Be Composed\";\n+        createPasswordPolicy(name);\n \n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -626,17 +626,17 @@ public void createComposeDeletePasswordPolicy() {\n \n         closeCallBack(modal);\n \n-        deletePasswordPolicy(description);\n+        deletePasswordPolicy(name);\n     }\n \n     @Test\n     public void createUpdateDeletePullPolicy() {\n-        String description = \"Pull Policy To Be Updated\";\n-        createPullPolicy(description);\n+        String name = \"Pull Policy To Be Updated\";\n+        createPullPolicy(name);\n \n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n \n         Component modal = TESTER.getComponentFromLastRenderedPage(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\");\n@@ -652,7 +652,7 @@ public void createUpdateDeletePullPolicy() {\n \n         FormTester formTester = TESTER.newFormTester(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\");\n-        formTester.setValue(\"content:fields:0:field:textField\", description + '2');\n+        formTester.setValue(\"content:fields:0:field:textField\", name + '2');\n \n         TESTER.clickLink(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:inputs:0:submit\");\n@@ -662,8 +662,8 @@ public void createUpdateDeletePullPolicy() {\n \n         closeCallBack(modal);\n \n-        component = findComponentByProp(\"description\", \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description + '2');\n+        component = findComponentByProp(\"name\", \"body:content:tabbedPanel:panel:container:content:\"\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name + '2');\n \n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -675,23 +675,23 @@ public void createUpdateDeletePullPolicy() {\n                 Modal.class);\n \n         TESTER.assertModelValue(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:form\"\n-                + \":content:fields:0:field:textField\", description + '2');\n+                + \":content:fields:0:field:textField\", name + '2');\n \n         TESTER.executeAjaxEvent(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer:dialog:footer:buttons:0:button\",\n                 Constants.ON_CLICK);\n \n-        deletePullPolicy(description + '2');\n+        deletePullPolicy(name + '2');\n     }\n \n     @Test\n     public void createComposeDeletePullPolicy() {\n-        String description = \"Pull Policy To Be Composed\";\n-        createPullPolicy(description);\n+        String name = \"Pull Policy To Be Composed\";\n+        createPullPolicy(name);\n \n-        Component component = findComponentByProp(\"description\",\n+        Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n-                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", description);\n+                + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);\n         assertNotNull(component);\n \n         TESTER.executeAjaxEvent(component.getPageRelativePath(), Constants.ON_CLICK);\n@@ -730,15 +730,15 @@ public void createComposeDeletePullPolicy() {\n \n         closeCallBack(modal);\n \n-        deletePullPolicy(description);\n+        deletePullPolicy(name);\n     }\n \n     @Test\n     public void issueSYNCOPE1030() {\n-        String description = \"SYNCOPE-1030\";\n+        String name = \"SYNCOPE-1030\";\n         // Create account policy\n-        createAccountPolicy(description);\n-        composeDefaultAccountPolicy(description);\n+        createAccountPolicy(name);\n+        composeDefaultAccountPolicy(name);\n \n         // goto realms\n         TESTER.clickLink(\"body:realmsLI:realms\");\n@@ -846,6 +846,6 @@ public void issueSYNCOPE1030() {\n         // delete default policy\n         TESTER.clickLink(\"body:configurationLI:configurationUL:policiesLI:policies\");\n         TESTER.assertRenderedPage(Policies.class);\n-        deleteAccountPolicy(description);\n+        deleteAccountPolicy(name);\n     }\n }"},{"sha":"63fac133b24581c6b0c592e885a1e9ee3f62f35e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ClientAppITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -67,7 +67,7 @@ public void updateSAML2SP() {\n \n         AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n         accessPolicyTO.setKey(\"NewAccessPolicyTest_\" + getUUIDString());\n-        accessPolicyTO.setDescription(\"New Access policy\");\n+        accessPolicyTO.setName(\"New Access policy\");\n         accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n         assertNotNull(accessPolicyTO);\n \n@@ -141,7 +141,7 @@ public void updateOIDCRP() {\n \n         AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n         accessPolicyTO.setKey(\"NewAccessPolicyTest_\" + getUUIDString());\n-        accessPolicyTO.setDescription(\"New Access policy\");\n+        accessPolicyTO.setName(\"New Access policy\");\n         accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n         assertNotNull(accessPolicyTO);\n \n@@ -189,13 +189,13 @@ public void deleteCASSP() {\n     private static CASSPTO buildCASSP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n-        authPolicyTO.setDescription(\"Authentication Policy\");\n+        authPolicyTO.setName(\"Authentication Policy\");\n         authPolicyTO = createPolicy(PolicyType.AUTH, authPolicyTO);\n         assertNotNull(authPolicyTO);\n \n         AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n         accessPolicyTO.setKey(\"AccessPolicyTest_\" + getUUIDString());\n-        accessPolicyTO.setDescription(\"Access policy\");\n+        accessPolicyTO.setName(\"Access policy\");\n         accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n         assertNotNull(accessPolicyTO);\n "},{"sha":"e0b6afb79f2ca992aebe6b8f691420d08e3efabb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LinkedAccountITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -415,7 +415,7 @@ public void pull() {\n             assertNotNull(rule);\n \n             PullPolicyTO policy = new PullPolicyTO();\n-            policy.setDescription(\"Linked Account sample Pull policy\");\n+            policy.setName(\"Linked Account sample Pull policy\");\n             policy.getCorrelationRules().put(AnyTypeKind.USER.name(), rule.getKey());\n             Response response = policyService.create(PolicyType.PULL, policy);\n             policy = policyService.read(PolicyType.PULL, response.getHeaderString(RESTHeaders.RESOURCE_KEY));"},{"sha":"221571c10ff2553e8ba1195f5945265790808112","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":17,"deletions":15,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -29,7 +29,7 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n-import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n@@ -55,6 +55,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n \n@@ -82,7 +83,7 @@ private PullPolicyTO buildPullPolicyTO() throws IOException {\n \n         PullPolicyTO policy = new PullPolicyTO();\n         policy.getCorrelationRules().put(AnyTypeKind.USER.name(), corrRule.getKey());\n-        policy.setDescription(\"Pull policy\");\n+        policy.setName(\"Pull policy\");\n \n         return policy;\n     }\n@@ -109,7 +110,7 @@ private PushPolicyTO buildPushPolicyTO() throws IOException {\n \n         PushPolicyTO policy = new PushPolicyTO();\n         policy.getCorrelationRules().put(AnyTypeKind.USER.name(), corrRule.getKey());\n-        policy.setDescription(\"Push policy\");\n+        policy.setName(\"Push policy\");\n \n         return policy;\n     }\n@@ -188,19 +189,19 @@ public void create() throws IOException {\n         AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH,\n                 buildAuthPolicyTO(\"LdapAuthentication1\"));\n         assertNotNull(authPolicyTO);\n-        assertEquals(\"Test Authentication policy\", authPolicyTO.getDescription());\n+        assertEquals(\"Test Authentication policy\", authPolicyTO.getName());\n \n         AccessPolicyTO accessPolicyTO = createPolicy(PolicyType.ACCESS, buildAccessPolicyTO());\n         assertNotNull(accessPolicyTO);\n-        assertEquals(\"Test Access policy\", accessPolicyTO.getDescription());\n+        assertEquals(\"Test Access policy\", accessPolicyTO.getName());\n     }\n \n     @Test\n     public void updatePasswordPolicy() {\n         PasswordPolicyTO globalPolicy = policyService.read(PolicyType.PASSWORD, \"ce93fcda-dc3a-4369-a7b0-a6108c261c85\");\n \n         PasswordPolicyTO policy = SerializationUtils.clone(globalPolicy);\n-        policy.setDescription(\"A simple password policy\");\n+        policy.setName(\"A simple password policy\");\n \n         // create a new password policy using the former as a template\n         policy = createPolicy(PolicyType.PASSWORD, policy);\n@@ -251,8 +252,9 @@ public void updateAccessPolicy() {\n         assertNotNull(newAccessPolicyTO);\n \n         DefaultAccessPolicyConf accessPolicyConf = (DefaultAccessPolicyConf) newAccessPolicyTO.getConf();\n-        accessPolicyConf.addRequiredAttr(\"ou\", Set.of(\"test\"));\n-        accessPolicyConf.addRequiredAttr(\"cn\", Set.of(\"admin\", \"Admin\"));\n+        accessPolicyConf.getRequiredAttrs().add(new Attr.Builder(\"ou\").value(\"test\").build());\n+        accessPolicyConf.getRequiredAttrs().removeIf(attr -> \"cn\".equals(attr.getSchema()));\n+        accessPolicyConf.getRequiredAttrs().add(new Attr.Builder(\"cn\").values(\"admin\", \"Admin\").build());\n \n         // update new authentication policy\n         policyService.update(PolicyType.ACCESS, newAccessPolicyTO);\n@@ -261,29 +263,29 @@ public void updateAccessPolicy() {\n \n         accessPolicyConf = (DefaultAccessPolicyConf) newAccessPolicyTO.getConf();\n         assertEquals(2, accessPolicyConf.getRequiredAttrs().size());\n-        assertNotNull(accessPolicyConf.getRequiredAttrs().get(\"cn\"));\n-        assertNotNull(accessPolicyConf.getRequiredAttrs().get(\"ou\"));\n+        assertTrue(accessPolicyConf.getRequiredAttrs().stream().anyMatch(attr -> \"cn\".equals(attr.getSchema())));\n+        assertTrue(accessPolicyConf.getRequiredAttrs().stream().anyMatch(attr -> \"ou\".equals(attr.getSchema())));\n     }\n \n     @Test\n     public void updateAttrReleasePolicy() {\n         AttrReleasePolicyTO newPolicyTO = createPolicy(PolicyType.ATTR_RELEASE, buildAttrReleasePolicyTO());\n         assertNotNull(newPolicyTO);\n \n-        AllowedAttrReleasePolicyConf policyConf = (AllowedAttrReleasePolicyConf) newPolicyTO.getConf();\n+        DefaultAttrReleasePolicyConf policyConf = (DefaultAttrReleasePolicyConf) newPolicyTO.getConf();\n         policyConf.getAllowedAttrs().add(\"postalCode\");\n \n         // update new policy\n         policyService.update(PolicyType.ATTR_RELEASE, newPolicyTO);\n         newPolicyTO = policyService.read(PolicyType.ATTR_RELEASE, newPolicyTO.getKey());\n         assertNotNull(newPolicyTO);\n \n-        policyConf = (AllowedAttrReleasePolicyConf) newPolicyTO.getConf();\n+        policyConf = (DefaultAttrReleasePolicyConf) newPolicyTO.getConf();\n         assertEquals(3, policyConf.getAllowedAttrs().size());\n         assertTrue(policyConf.getAllowedAttrs().contains(\"cn\"));\n         assertTrue(policyConf.getAllowedAttrs().contains(\"postalCode\"));\n         assertTrue(policyConf.getAllowedAttrs().contains(\"givenName\"));\n-        assertTrue(policyConf.getConsentPolicy().getIncludeOnlyAttrs().contains(\"cn\"));\n+        assertTrue(policyConf.getIncludeOnlyAttrs().contains(\"cn\"));\n     }\n \n     @Test\n@@ -348,7 +350,7 @@ public void getPushCorrelationRuleJavaClasses() {\n     @Test\n     public void issueSYNCOPE553() {\n         AccountPolicyTO policy = new AccountPolicyTO();\n-        policy.setDescription(\"SYNCOPE553\");\n+        policy.setName(\"SYNCOPE553\");\n \n         DefaultAccountRuleConf ruleConf = new DefaultAccountRuleConf();\n         ruleConf.setMinLength(3);\n@@ -371,7 +373,7 @@ public void issueSYNCOPE553() {\n     @Test\n     public void issueSYNCOPE682() {\n         AccountPolicyTO policy = new AccountPolicyTO();\n-        policy.setDescription(\"SYNCOPE682\");\n+        policy.setName(\"SYNCOPE682\");\n         policy.getPassthroughResources().add(RESOURCE_NAME_LDAP);\n \n         DefaultAccountRuleConf ruleConf = new DefaultAccountRuleConf();"},{"sha":"44d01f3822430c18ba8c019ac5ca61b5154d5224","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -27,14 +27,14 @@\n \n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n import java.util.UUID;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n-import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n@@ -175,7 +175,7 @@ public void deletingAccountPolicy() {\n         rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n \n         AccountPolicyTO policy = new AccountPolicyTO();\n-        policy.setDescription(\"deletingAccountPolicy\");\n+        policy.setName(\"deletingAccountPolicy\");\n         policy.getRules().add(rule.getKey());\n \n         policy = createPolicy(PolicyType.ACCOUNT, policy);\n@@ -217,7 +217,7 @@ public void deletingAuthPolicy() {\n         ruleConf.getAuthModules().addAll(List.of(\"LdapAuthentication1\"));\n \n         AuthPolicyTO policy = new AuthPolicyTO();\n-        policy.setDescription(\"Test Authentication policy\");\n+        policy.setName(\"Test Authentication policy\");\n         policy.setConf(ruleConf);\n         policy = createPolicy(PolicyType.AUTH, policy);\n         assertNotNull(policy);\n@@ -254,13 +254,12 @@ public void deletingAuthPolicy() {\n     @Test\n     public void deletingAccessPolicy() {\n         // 1. create access policy\n-        DefaultAccessPolicyConf ruleConf = new DefaultAccessPolicyConf();\n-        ruleConf.setEnabled(true);\n-        ruleConf.addRequiredAttr(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n+        DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n+        conf.getRequiredAttrs().add(new Attr.Builder(\"cn\").values(\"admin\", \"Admin\", \"TheAdmin\").build());\n \n         AccessPolicyTO policy = new AccessPolicyTO();\n-        policy.setDescription(\"Test Access policy\");\n-        policy.setConf(ruleConf);\n+        policy.setName(\"Test Access policy\");\n+        policy.setConf(conf);\n         policy = createPolicy(PolicyType.ACCESS, policy);\n         assertNotNull(policy);\n \n@@ -296,16 +295,13 @@ public void deletingAccessPolicy() {\n     @Test\n     public void deletingAttributeReleasePolicy() {\n         // 1. create attribute release policy\n-        AllowedAttrReleasePolicyConf ruleConf = new AllowedAttrReleasePolicyConf();\n-        ruleConf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n-\n-        AllowedAttrReleasePolicyConf.ConsentPolicy consentPolicy1 = ruleConf.new ConsentPolicy();\n-        consentPolicy1.getIncludeOnlyAttrs().addAll(Set.of(\"cn\"));\n-        ruleConf.setConsentPolicy(consentPolicy1);\n+        DefaultAttrReleasePolicyConf conf = new DefaultAttrReleasePolicyConf();\n+        conf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n+        conf.getIncludeOnlyAttrs().add(\"cn\");\n \n         AttrReleasePolicyTO policy = new AttrReleasePolicyTO();\n-        policy.setDescription(\"Test Attribute Release policy\");\n-        policy.setConf(ruleConf);\n+        policy.setName(\"Test Attribute Release policy\");\n+        policy.setConf(conf);\n         policy = createPolicy(PolicyType.ATTR_RELEASE, policy);\n         assertNotNull(policy);\n "},{"sha":"8e965ef5fba23b27b229a901d6408c999b80e907","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -937,7 +937,7 @@ public void customPolicyRules() {\n         implementationTO.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n \n         AccountPolicyTO accountPolicy = new AccountPolicyTO();\n-        accountPolicy.setDescription(\"Account Policy with custom rules\");\n+        accountPolicy.setName(\"Account Policy with custom rules\");\n         accountPolicy.getRules().add(implementationTO.getKey());\n         accountPolicy = createPolicy(PolicyType.ACCOUNT, accountPolicy);\n         assertNotNull(accountPolicy);\n@@ -951,7 +951,7 @@ public void customPolicyRules() {\n         implementationTO.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n \n         PasswordPolicyTO passwordPolicy = new PasswordPolicyTO();\n-        passwordPolicy.setDescription(\"Password Policy with custom rules\");\n+        passwordPolicy.setName(\"Password Policy with custom rules\");\n         passwordPolicy.getRules().add(implementationTO.getKey());\n         passwordPolicy = createPolicy(PolicyType.PASSWORD, passwordPolicy);\n         assertNotNull(passwordPolicy);\n@@ -1347,7 +1347,7 @@ public void haveIBeenPwned() {\n         rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n \n         PasswordPolicyTO pwdPolicy = new PasswordPolicyTO();\n-        pwdPolicy.setDescription(\"Have I Been Pwned?\");\n+        pwdPolicy.setName(\"Have I Been Pwned?\");\n         pwdPolicy.getRules().add(rule.getKey());\n         pwdPolicy = createPolicy(PolicyType.PASSWORD, pwdPolicy);\n         assertNotNull(pwdPolicy.getKey());"},{"sha":"446734456148e1d8b0b64a52fa1a4241f6bb5f70","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -1221,7 +1221,7 @@ public void issueSYNCOPE626() {\n         rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n \n         PasswordPolicyTO passwordPolicy = new PasswordPolicyTO();\n-        passwordPolicy.setDescription(\"Password Policy for SYNCOPE-626\");\n+        passwordPolicy.setName(\"Password Policy for SYNCOPE-626\");\n         passwordPolicy.getRules().add(rule.getKey());\n \n         passwordPolicy = createPolicy(PolicyType.PASSWORD, passwordPolicy);"},{"sha":"7e3062bb295953c0108c900dee68ce0b2a67b7ff","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/AbstractSRAITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractSRAITCase.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -207,7 +207,7 @@ protected static AuthPolicyTO getAuthPolicy() {\n \n         return policyService.list(PolicyType.AUTH).stream().\n                 map(AuthPolicyTO.class::cast).\n-                filter(policy -> description.equals(policy.getDescription())\n+                filter(policy -> description.equals(policy.getName())\n                 && policy.getConf() instanceof DefaultAuthPolicyConf\n                 && ((DefaultAuthPolicyConf) policy.getConf()).getAuthModules().contains(authModule)).\n                 findFirst().\n@@ -216,7 +216,7 @@ protected static AuthPolicyTO getAuthPolicy() {\n                     policyConf.getAuthModules().add(authModule);\n \n                     AuthPolicyTO policy = new AuthPolicyTO();\n-                    policy.setDescription(description);\n+                    policy.setName(description);\n                     policy.setConf(policyConf);\n \n                     Response response = policyService.create(PolicyType.AUTH, policy);"},{"sha":"f70ff39ed64cf1167d14d76bc1aaae5b8b22679e","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/AbstractUIITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FAbstractUIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FAbstractUIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FAbstractUIITCase.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -42,7 +42,7 @@ protected static AuthPolicyTO getAuthPolicy() {\n \n         return policyService.list(PolicyType.AUTH).stream().\n                 map(AuthPolicyTO.class::cast).\n-                filter(policy -> description.equals(policy.getDescription())\n+                filter(policy -> description.equals(policy.getName())\n                 && policy.getConf() instanceof DefaultAuthPolicyConf\n                 && ((DefaultAuthPolicyConf) policy.getConf()).getAuthModules().contains(syncopeAuthModule)\n                 && ((DefaultAuthPolicyConf) policy.getConf()).getAuthModules().contains(ldapAuthModule)).\n@@ -53,7 +53,7 @@ protected static AuthPolicyTO getAuthPolicy() {\n                     policyConf.getAuthModules().add(ldapAuthModule);\n \n                     AuthPolicyTO policy = new AuthPolicyTO();\n-                    policy.setDescription(description);\n+                    policy.setName(description);\n                     policy.setConf(policyConf);\n \n                     Response response = policyService.create(PolicyType.AUTH, policy);"},{"sha":"26bb33299d71ac24909fa6269e4e33c330adeee2","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.wa.starter.gauth.SyncopeWAGoogleMfaAuthCredentialRepository;\n import org.apache.syncope.wa.starter.mapping.AccessMapFor;\n import org.apache.syncope.wa.starter.mapping.AccessMapper;\n-import org.apache.syncope.wa.starter.mapping.AllowedAttrReleaseMapper;\n+import org.apache.syncope.wa.starter.mapping.DefaultAttrReleaseMapper;\n import org.apache.syncope.wa.starter.mapping.AttrReleaseMapFor;\n import org.apache.syncope.wa.starter.mapping.AttrReleaseMapper;\n import org.apache.syncope.wa.starter.mapping.AuthMapFor;\n@@ -132,7 +132,7 @@ public OpenAPI casSwaggerOpenApi() {\n \n     @Bean\n     public AttrReleaseMapper allowedAttrReleaseMapper() {\n-        return new AllowedAttrReleaseMapper();\n+        return new DefaultAttrReleaseMapper();\n     }\n \n     @Bean"},{"sha":"b6240cfc0957a966d267e90c2fa012801e3e1daa","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AccessMapper.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n-import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n \n @FunctionalInterface\n public interface AccessMapper {\n \n-    RegisteredServiceAccessStrategy build(AccessPolicyConf conf);\n+    RegisteredServiceAccessStrategy build(AccessPolicyTO policy);\n }"},{"sha":"cb03d008eb5c3b7e54e68ff64453ff52ba0b878e","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAccessMapper.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n-import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n+import java.util.HashSet;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n@@ -27,10 +28,11 @@\n public class DefaultAccessMapper implements AccessMapper {\n \n     @Override\n-    public RegisteredServiceAccessStrategy build(final AccessPolicyConf conf) {\n+    public RegisteredServiceAccessStrategy build(final AccessPolicyTO policy) {\n         RegisteredServiceAccessStrategy accessStrategy =\n-                new DefaultRegisteredServiceAccessStrategy(conf.isEnabled(), conf.isSsoEnabled());\n-        accessStrategy.getRequiredAttributes().putAll(conf.getRequiredAttrs());\n+                new DefaultRegisteredServiceAccessStrategy(policy.isEnabled(), policy.isSsoEnabled());\n+        policy.getConf().getRequiredAttrs().forEach(\n+                attr -> accessStrategy.getRequiredAttributes().put(attr.getSchema(), new HashSet<>(attr.getValues())));\n         return accessStrategy;\n     }\n }"},{"sha":"3d8f4be19ff4feb85f10999359f9b84480fe1bd8","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAttrReleaseMapper.java","status":"renamed","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAttrReleaseMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAttrReleaseMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAttrReleaseMapper.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -18,21 +18,21 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n-import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import java.util.HashSet;\n+import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n-import org.apereo.cas.services.RegisteredServiceConsentPolicy;\n import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n import org.apereo.cas.services.consent.DefaultRegisteredServiceConsentPolicy;\n import org.apereo.cas.util.model.TriStateBoolean;\n \n-@AttrReleaseMapFor(attrReleasePolicyConfClass = AllowedAttrReleasePolicyConf.class)\n-public class AllowedAttrReleaseMapper implements AttrReleaseMapper {\n+@AttrReleaseMapFor(attrReleasePolicyConfClass = DefaultAttrReleasePolicyConf.class)\n+public class DefaultAttrReleaseMapper implements AttrReleaseMapper {\n \n     @Override\n     public RegisteredServiceAttributeReleasePolicy build(final AttrReleasePolicyConf conf) {\n-        AllowedAttrReleasePolicyConf aarpc = (AllowedAttrReleasePolicyConf) conf;\n+        DefaultAttrReleasePolicyConf aarpc = (DefaultAttrReleasePolicyConf) conf;\n \n         RegisteredServiceAttributeReleasePolicy attributeReleasePolicy;\n         if (aarpc.getAllowedAttrs().isEmpty()) {\n@@ -42,13 +42,12 @@ public RegisteredServiceAttributeReleasePolicy build(final AttrReleasePolicyConf\n             ((ReturnAllowedAttributeReleasePolicy) attributeReleasePolicy).\n                     setAllowedAttributes((aarpc.getAllowedAttrs()));\n \n-            if (aarpc.getConsentPolicy() != null) {\n-                RegisteredServiceConsentPolicy consentPolicy =\n-                        new DefaultRegisteredServiceConsentPolicy(aarpc.getConsentPolicy().getExcludedAttrs(),\n-                                aarpc.getConsentPolicy().getIncludeOnlyAttrs());\n-                ((DefaultRegisteredServiceConsentPolicy) consentPolicy).setStatus(\n-                        aarpc.getConsentPolicy().getStatus() == null ? TriStateBoolean.UNDEFINED\n-                        : TriStateBoolean.fromBoolean(aarpc.getConsentPolicy().getStatus()));\n+            if (!aarpc.getExcludedAttrs().isEmpty() || !aarpc.getIncludeOnlyAttrs().isEmpty()) {\n+                DefaultRegisteredServiceConsentPolicy consentPolicy = new DefaultRegisteredServiceConsentPolicy(\n+                        new HashSet<>(aarpc.getExcludedAttrs()), new HashSet<>(aarpc.getIncludeOnlyAttrs()));\n+                consentPolicy.setStatus(\n+                        aarpc.getStatus() == null ? TriStateBoolean.UNDEFINED\n+                        : TriStateBoolean.fromBoolean(aarpc.getStatus()));\n                 ((ReturnAllowedAttributeReleasePolicy) attributeReleasePolicy).setConsentPolicy(consentPolicy);\n             }\n         }","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AllowedAttrReleaseMapper.java"},{"sha":"99e5c390dac2cf1ac910b6e2f130e553d4ee0d80","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAuthMapper.java","status":"modified","additions":7,"deletions":14,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -21,7 +21,6 @@\n import java.util.HashSet;\n import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n-import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n import org.apereo.cas.services.DefaultRegisteredServiceAuthenticationPolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n@@ -33,21 +32,15 @@ public class DefaultAuthMapper implements AuthMapper {\n     public RegisteredServiceAuthenticationPolicy build(final AuthPolicyConf conf) {\n         DefaultRegisteredServiceAuthenticationPolicy authPolicy = new DefaultRegisteredServiceAuthenticationPolicy();\n \n-        if (conf.getCriteria() instanceof DefaultAuthPolicyCriteriaConf) {\n-            DefaultAuthPolicyCriteriaConf policyCriteriaConf = (DefaultAuthPolicyCriteriaConf) conf.getCriteria();\n-\n-            AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria criteria =\n-                    new AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria();\n-            criteria.setTryAll(policyCriteriaConf.isAll());\n-            authPolicy.setCriteria(criteria);\n+        DefaultAuthPolicyConf policyConf = (DefaultAuthPolicyConf) conf;\n+        if (!policyConf.getAuthModules().isEmpty()) {\n+            authPolicy.setRequiredAuthenticationHandlers(new HashSet<>(policyConf.getAuthModules()));\n         }\n \n-        if (conf instanceof DefaultAuthPolicyConf) {\n-            DefaultAuthPolicyConf policyConf = (DefaultAuthPolicyConf) conf;\n-            if (!policyConf.getAuthModules().isEmpty()) {\n-                authPolicy.setRequiredAuthenticationHandlers(new HashSet<>(policyConf.getAuthModules()));\n-            }\n-        }\n+        AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria criteria =\n+                new AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria();\n+        criteria.setTryAll(policyConf.isTryAll());\n+        authPolicy.setCriteria(criteria);\n \n         return authPolicy;\n     }"},{"sha":"d6326927804446a613361167a9688ec4c5a7759c","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/RegisteredServiceMapper.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -61,7 +61,7 @@ public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n             LOG.warn(\"Unable to locate ClientAppMapper using key {}\", key);\n             return null;\n         }\n-        \n+\n         RegisteredServiceAuthenticationPolicy authPolicy = null;\n         if (clientApp.getAuthPolicyConf() != null) {\n             AuthMapper authMapper =\n@@ -71,11 +71,11 @@ public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n         }\n \n         RegisteredServiceAccessStrategy accessStrategy = null;\n-        if (clientApp.getAccessPolicyConf() != null) {\n+        if (clientApp.getAccessPolicy() != null) {\n             AccessMapper accessPolicyConfMapper =\n-                    accessPolicyConfMappers.get(clientApp.getAccessPolicyConf().getClass().getName());\n+                    accessPolicyConfMappers.get(clientApp.getAccessPolicy().getClass().getName());\n             accessStrategy = Optional.ofNullable(accessPolicyConfMapper).\n-                    map(mapper -> mapper.build(clientApp.getAccessPolicyConf())).orElse(null);\n+                    map(mapper -> mapper.build(clientApp.getAccessPolicy())).orElse(null);\n         }\n \n         RegisteredServiceAttributeReleasePolicy attributeReleasePolicy = null;"},{"sha":"b0bd5398746bc2fdebba2c219570c8e2a2b9451b","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeWAServiceRegistryTest.java","status":"modified","additions":11,"deletions":16,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java?ref=51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","patch":"@@ -23,15 +23,14 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n-import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n import org.apache.syncope.common.lib.to.OIDCRPTO;\n import org.apache.syncope.common.lib.to.SAML2SPTO;\n import org.apache.syncope.common.lib.types.OIDCGrantType;\n@@ -95,28 +94,24 @@ private static void addAttributes(\n             final WAClientApp waClientApp) {\n \n         DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n-        DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n-        criteria.setAll(true);\n-        authPolicyConf.setCriteria(criteria);\n+        authPolicyConf.setTryAll(true);\n         authPolicyConf.getAuthModules().add(\"TestAuthModule\");\n \n         waClientApp.setAuthPolicyConf(authPolicyConf);\n \n         if (withReleaseAttributes) {\n-            Map<String, Object> releaseAttrs;\n-            releaseAttrs = new HashMap<>();\n-            releaseAttrs.put(\"uid\", \"username\");\n-            releaseAttrs.put(\"cn\", \"fullname\");\n-            waClientApp.getReleaseAttrs().putAll(releaseAttrs);\n+            waClientApp.getReleaseAttrs().putAll(Map.of(\"uid\", \"username\", \"cn\", \"fullname\"));\n         }\n \n+        AccessPolicyTO accessPolicy = new AccessPolicyTO();\n+        accessPolicy.setEnabled(true);\n         DefaultAccessPolicyConf accessPolicyConf = new DefaultAccessPolicyConf();\n-        accessPolicyConf.setEnabled(true);\n-        accessPolicyConf.addRequiredAttr(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n-        waClientApp.setAccessPolicyConf(accessPolicyConf);\n+        accessPolicyConf.getRequiredAttrs().add(new Attr.Builder(\"cn\").values(\"admin\", \"Admin\", \"TheAdmin\").build());\n+        accessPolicy.setConf(accessPolicyConf);\n+        waClientApp.setAccessPolicy(accessPolicy);\n \n         if (withAttrReleasePolicy) {\n-            AllowedAttrReleasePolicyConf attrReleasePolicyConf = new AllowedAttrReleasePolicyConf();\n+            DefaultAttrReleasePolicyConf attrReleasePolicyConf = new DefaultAttrReleasePolicyConf();\n             attrReleasePolicyConf.getAllowedAttrs().add(\"cn\");\n             waClientApp.setAttrReleasePolicyConf(attrReleasePolicyConf);\n         }"}]}