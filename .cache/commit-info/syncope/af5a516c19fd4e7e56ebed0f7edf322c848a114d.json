{"sha":"af5a516c19fd4e7e56ebed0f7edf322c848a114d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFmNWE1MTZjMTlmZDRlN2U1NmViZWQwZjdlZGYzMjJjODQ4YTExNGQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-11T15:53:32Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-11T15:53:32Z"},"message":"java.net identity connectors integrated\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246083 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"628bb905dc553a344a39ba67fbfe7303778fddd9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/628bb905dc553a344a39ba67fbfe7303778fddd9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/af5a516c19fd4e7e56ebed0f7edf322c848a114d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/af5a516c19fd4e7e56ebed0f7edf322c848a114d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/af5a516c19fd4e7e56ebed0f7edf322c848a114d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/af5a516c19fd4e7e56ebed0f7edf322c848a114d/comments","author":null,"committer":null,"parents":[{"sha":"917088ff3aaa82a77115383b2dfc419b0d65172c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/917088ff3aaa82a77115383b2dfc419b0d65172c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/917088ff3aaa82a77115383b2dfc419b0d65172c"}],"stats":{"total":466,"additions":416,"deletions":50},"files":[{"sha":"ffbc503bc3e5e18198c39fc774b69dee26d96fd1","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnectorInstance.java","status":"modified","additions":56,"deletions":50,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/af5a516c19fd4e7e56ebed0f7edf322c848a114d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/af5a516c19fd4e7e56ebed0f7edf322c848a114d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java?ref=af5a516c19fd4e7e56ebed0f7edf322c848a114d","patch":"@@ -16,42 +16,71 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.Lob;\n \n @Entity\n public class ConnectorInstance extends AbstractBaseBean {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n-    private String name;\n-    private String minorVersion;\n+    /**\n+     * Connector class name prefix used to retrieve configuration bean\n+     */\n+    @Column(nullable = false)\n+    private String connectorName;\n+    /**\n+     * ConnectorBundle-Name: Qualified name for the connector bundle.\n+     * Within a given deployment, the pair (ConnectorBundle-Name,\n+     * ConnectorBundle-Version) must be unique.\n+     */\n+    @Column(nullable = false)\n+    private String bundleName;\n \n-    public String getMajorVersion() {\n-        return majorVersion;\n+    /**\n+     * ConnectorBundle-Version: The version of the bundle. Within a given\n+     * deployment, the pair (ConnectorBundle-Name, ConnectorBundle-Version)\n+     * must be unique.\n+     */\n+    @Column(nullable = false)\n+    private String version;\n+\n+    /**\n+     * The main configuration for the connector instance.\n+     * This is directly implemented by the Configuration bean class which\n+     * contains annotated ConfigurationProperties (@ConfigurationProperty).\n+     */\n+    @Lob\n+    @Column(nullable = false)\n+    private String xmlConfiguration;\n+\n+    public String getVersion() {\n+        return version;\n     }\n \n-    public void setMajorVersion(String majorVersion) {\n-        this.majorVersion = majorVersion;\n+    public void setVersion(String majorVersion) {\n+        this.version = majorVersion;\n     }\n \n-    public String getMinorVersion() {\n-        return minorVersion;\n+    public String getBundleName() {\n+        return bundleName;\n     }\n \n-    public void setMinorVersion(String minorVersion) {\n-        this.minorVersion = minorVersion;\n+    public void setBundleName(String bundleName) {\n+        this.bundleName = bundleName;\n     }\n \n-    public String getName() {\n-        return name;\n+    public String getConnectorName() {\n+        return connectorName;\n     }\n \n-    public void setName(String name) {\n-        this.name = name;\n+    public void setConnectorName(String connectorName) {\n+        this.connectorName = connectorName;\n     }\n \n     public String getXmlConfiguration() {\n@@ -61,9 +90,6 @@ public String getXmlConfiguration() {\n     public void setXmlConfiguration(String xmlConfiguration) {\n         this.xmlConfiguration = xmlConfiguration;\n     }\n-    private String majorVersion;\n-    private String xmlConfiguration;\n-\n     public Long getId() {\n         return id;\n     }\n@@ -74,50 +100,30 @@ public void setId(Long id) {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (obj == null) {\n-            return false;\n-        }\n-        if (getClass() != obj.getClass()) {\n-            return false;\n-        }\n+        if (obj == null) return false;\n+        if (getClass() != obj.getClass()) return false;\n         final ConnectorInstance other = (ConnectorInstance) obj;\n-        if (this.id != other.id\n-                && (this.id == null || !this.id.equals(other.id))) {\n+        if (this.id != other.id && (this.id == null || !this.id.equals(other.id)))\n             return false;\n-        }\n-        if ((this.name == null)\n-                ? (other.name != null) : !this.name.equals(other.name)) {\n+        if ((this.connectorName == null) ? (other.connectorName != null) : !this.connectorName.equals(other.connectorName))\n             return false;\n-        }\n-        if ((this.minorVersion == null)\n-                ? (other.minorVersion != null)\n-                : !this.minorVersion.equals(other.minorVersion)) {\n+        if ((this.bundleName == null) ? (other.bundleName != null) : !this.bundleName.equals(other.bundleName))\n             return false;\n-        }\n-        if ((this.majorVersion == null)\n-                ? (other.majorVersion != null)\n-                : !this.majorVersion.equals(other.majorVersion)) {\n+        if ((this.version == null) ? (other.version != null) : !this.version.equals(other.version))\n             return false;\n-        }\n-        if ((this.xmlConfiguration == null)\n-                ? (other.xmlConfiguration != null)\n-                : !this.xmlConfiguration.equals(other.xmlConfiguration)) {\n+        if ((this.xmlConfiguration == null) ? (other.xmlConfiguration != null) : !this.xmlConfiguration.equals(other.xmlConfiguration))\n             return false;\n-        }\n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n-        int hash = 7;\n-        hash = 83 * hash + (this.id != null ? this.id.hashCode() : 0);\n-        hash = 83 * hash + (this.name != null ? this.name.hashCode() : 0);\n-        hash = 83 * hash + (this.minorVersion != null\n-                ? this.minorVersion.hashCode() : 0);\n-        hash = 83 * hash + (this.majorVersion != null\n-                ? this.majorVersion.hashCode() : 0);\n-        hash = 83 * hash + (this.xmlConfiguration != null\n-                ? this.xmlConfiguration.hashCode() : 0);\n+        int hash = 3;\n+        hash = 79 * hash + (this.id != null ? this.id.hashCode() : 0);\n+        hash = 79 * hash + (this.connectorName != null ? this.connectorName.hashCode() : 0);\n+        hash = 79 * hash + (this.bundleName != null ? this.bundleName.hashCode() : 0);\n+        hash = 79 * hash + (this.version != null ? this.version.hashCode() : 0);\n+        hash = 79 * hash + (this.xmlConfiguration != null ? this.xmlConfiguration.hashCode() : 0);\n         return hash;\n     }\n }"},{"sha":"e391a3a1e8e95755fd830f3985ba9a786bf2c761","filename":"core/src/main/java/org/syncope/core/persistence/dao/ConnectorInstanceDAO.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/af5a516c19fd4e7e56ebed0f7edf322c848a114d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/af5a516c19fd4e7e56ebed0f7edf322c848a114d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorInstanceDAO.java?ref=af5a516c19fd4e7e56ebed0f7edf322c848a114d","patch":"@@ -0,0 +1,32 @@\n+/*\n+ *  Copyright 2010 fabio.\n+ * \n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n+\n+/**\n+ *\n+ * @author fabio\n+ */\n+public interface ConnectorInstanceDAO extends DAO {\n+\n+    ConnectorInstance find(Long id);\n+\n+    ConnectorInstance save(ConnectorInstance connector);\n+\n+    void delete(Long id);\n+}"},{"sha":"a5bae1076c596c8ecae08223ad6ef82841daf158","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ConnectorInstanceDAOImpl.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/af5a516c19fd4e7e56ebed0f7edf322c848a114d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/af5a516c19fd4e7e56ebed0f7edf322c848a114d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java?ref=af5a516c19fd4e7e56ebed0f7edf322c848a114d","patch":"@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright 2010 fabio.\n+ * \n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n+import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n+\n+/**\n+ *\n+ * @author fabio\n+ */\n+@Repository\n+public class ConnectorInstanceDAOImpl extends AbstractDAOImpl\n+        implements ConnectorInstanceDAO {\n+\n+    @Override\n+    public ConnectorInstance find(Long id) {\n+        return entityManager.find(ConnectorInstance.class, id);\n+    }\n+\n+    @Override\n+    public ConnectorInstance save(ConnectorInstance connector) {\n+        ConnectorInstance result = entityManager.merge(connector);\n+        entityManager.flush();\n+        return result;\n+    }\n+\n+    @Override\n+    public void delete(Long id) {\n+        entityManager.remove(find(id));\n+    }\n+}"},{"sha":"5b028f73c87cc2a1d836929758187b43ea347019","filename":"core/src/test/java/org/syncope/core/persistence/test/ConnectorInstanceDAOTest.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/af5a516c19fd4e7e56ebed0f7edf322c848a114d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FConnectorInstanceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/af5a516c19fd4e7e56ebed0f7edf322c848a114d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FConnectorInstanceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2FConnectorInstanceDAOTest.java?ref=af5a516c19fd4e7e56ebed0f7edf322c848a114d","patch":"@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright 2010 fabio.\n+ * \n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.test;\n+\n+import java.io.InputStream;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n+import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n+import org.syncope.core.persistence.test.util.WebServiceConfiguration;\n+\n+@Transactional\n+public class ConnectorInstanceDAOTest extends AbstractDAOTest {\n+\n+    @Autowired\n+    ConnectorInstanceDAO connectorInstanceDAO;\n+\n+    @Test\n+    public final void testFindById() {\n+        ConnectorInstance connectorInstance = connectorInstanceDAO.find(100L);\n+\n+        assertNotNull(\"findById did not work\", connectorInstance);\n+\n+        assertEquals(\"invalid name\", \"OpenAM\",\n+                connectorInstance.getConnectorName());\n+\n+        assertEquals(\"invalid name\", \"org.syncope.core.persistence.test.util.openam\",\n+                connectorInstance.getBundleName());\n+\n+        assertEquals(\"invalid version\",\n+                \"1.0\", connectorInstance.getVersion());\n+    }\n+\n+    @Test\n+    public final void testSave() throws ClassNotFoundException {\n+        ConnectorInstance connectorInstance = new ConnectorInstance();\n+\n+        // set connector version\n+        connectorInstance.setVersion(\"1.0\");\n+\n+        // set connector name\n+        connectorInstance.setConnectorName(\"WebService\");\n+\n+        // set bundle name\n+        connectorInstance.setBundleName(\n+                \"org.syncope.core.persistence.test.util\");\n+\n+        WebServiceConfiguration conf = new WebServiceConfiguration();\n+        conf.setEndpoint(\"http://host.domain\");\n+        conf.setService(\"/provisioning\");\n+        conf.setContext(\"/service\");\n+\n+        String xmlconf = conf.serializeToXML();\n+\n+        assertNotNull(\"xml configuration string is null\", xmlconf);\n+\n+        // set connector configuration\n+        connectorInstance.setXmlConfiguration(xmlconf);\n+\n+        // perform save operation\n+        ConnectorInstance actual =\n+                connectorInstanceDAO.save(connectorInstance);\n+\n+        assertNotNull(\"save did not work\", actual.getId());\n+\n+        assertEquals(\"save did not work\",\n+                Long.valueOf(101L), actual.getId());\n+\n+        assertEquals(\"save did not work for \\\"name\\\" attribute\",\n+                \"WebService\",\n+                actual.getConnectorName());\n+\n+        assertEquals(\"save did not work for \\\"bundle name\\\" attribute\",\n+                \"org.syncope.core.persistence.test.util\",\n+                actual.getBundleName());\n+\n+        assertEquals(\"save did not work for \\\"majorVersion\\\" attribute\",\n+                \"1.0\", connectorInstance.getVersion());\n+\n+\n+        InputStream is = null;\n+\n+        String xmlConfiguration = connectorInstance.getXmlConfiguration();\n+\n+        assertNotNull(\"configuration not found\", xmlConfiguration);\n+\n+        conf = (WebServiceConfiguration) WebServiceConfiguration.buildFromXML(\n+                xmlConfiguration);\n+\n+        assertNotNull(\"configuration retrieving failed\", conf);\n+\n+        Throwable t = null;\n+        \n+        try {\n+            conf.validate();\n+        } catch (IllegalArgumentException e) {\n+            t = e;\n+        }\n+\n+        assertNull(\"configuration validation failed\", t);\n+    }\n+\n+    @Test\n+    public final void testDelete() {\n+        ConnectorInstance connectorInstance = connectorInstanceDAO.find(100L);\n+\n+        assertNotNull(\"find to delete did not work\", connectorInstance);\n+\n+        connectorInstanceDAO.delete(connectorInstance.getId());\n+\n+        ConnectorInstance actual = connectorInstanceDAO.find(100L);\n+        assertNull(\"delete did not work\", actual);\n+    }\n+}"},{"sha":"88c20bf0ee8446e4140f1140840fe7e94fbedff9","filename":"core/src/test/java/org/syncope/core/persistence/test/util/WebServiceConfiguration.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/af5a516c19fd4e7e56ebed0f7edf322c848a114d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2Futil%2FWebServiceConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/af5a516c19fd4e7e56ebed0f7edf322c848a114d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2Futil%2FWebServiceConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Ftest%2Futil%2FWebServiceConfiguration.java?ref=af5a516c19fd4e7e56ebed0f7edf322c848a114d","patch":"@@ -0,0 +1,133 @@\n+/*\n+ * ====================\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ * Copyright 2008-2009 Sun Microsystems, Inc. All rights reserved.     \n+ * \n+ * The contents of this file are subject to the terms of the Common Development \n+ * and Distribution License(\"CDDL\") (the \"License\").  You may not use this file \n+ * except in compliance with the License.\n+ * \n+ * You can obtain a copy of the License at \n+ * http://IdentityConnectors.dev.java.net/legal/license.txt\n+ * See the License for the specific language governing permissions and limitations \n+ * under the License. \n+ * \n+ * When distributing the Covered Code, include this CDDL Header Notice in each file\n+ * and include the License file at identityconnectors/legal/license.txt.\n+ * If applicable, add the following below this CDDL Header, with the fields \n+ * enclosed by brackets [] replaced by your own identifying information: \n+ * \"Portions Copyrighted [year] [name of copyright owner]\"\n+ * ====================\n+ */\n+package org.syncope.core.persistence.test.util;\n+\n+import java.beans.XMLDecoder;\n+import java.beans.XMLEncoder;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import org.identityconnectors.framework.spi.AbstractConfiguration;\n+import org.identityconnectors.framework.spi.ConfigurationProperty;\n+import org.identityconnectors.common.StringUtil;\n+\n+/**\n+ * Extends the {@link AbstractConfiguration} class to provide all the necessary\n+ * parameters to initialize the WebService Connector.\n+ *\n+ * @author fabio\n+ * @version 1.0\n+ * @since 1.0\n+ */\n+public class WebServiceConfiguration extends AbstractConfiguration {\n+\n+    /*\n+     * Set up base configuration elements\n+     */\n+    private String endpoint = null;\n+\n+    private String context = null;\n+\n+    private String service = null;\n+\n+    /**\n+     * Accessor for the example property. Uses ConfigurationProperty annotation\n+     * to provide property metadata to the application.\n+     */\n+    @ConfigurationProperty(displayMessageKey = \"ENDPOINT_DISPLAY\", helpMessageKey = \"ENDPOINT_HELP\", confidential = false)\n+    public String getEndpoint() {\n+        return endpoint;\n+    }\n+\n+    public void setEndpoint(String endpoint) {\n+        this.endpoint = endpoint;\n+    }\n+\n+    /**\n+     * Accessor for the example property. Uses ConfigurationProperty annotation\n+     * to provide property metadata to the application.\n+     */\n+    @ConfigurationProperty(displayMessageKey = \"SERVICE_DISPLAY\", helpMessageKey = \"SERVICE_HELP\", confidential = false)\n+    public String getService() {\n+        return service;\n+    }\n+\n+    public void setService(String service) {\n+        this.service = service;\n+    }\n+\n+    /**\n+     * Accessor for the example property. Uses ConfigurationProperty annotation\n+     * to provide property metadata to the application.\n+     */\n+    @ConfigurationProperty(displayMessageKey = \"CONTEXT_DISPLAY\", helpMessageKey = \"CONTEXT_HELP\", confidential = false)\n+    public String getContext() {\n+        return context;\n+    }\n+\n+    public void setContext(String context) {\n+        this.context = context;\n+    }\n+\n+    /**\n+     * Constructor\n+     */\n+    public WebServiceConfiguration() {\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void validate() {\n+        if (StringUtil.isBlank(endpoint)) {\n+            throw new IllegalArgumentException(\"Endpoint cannot be null or empty.\");\n+        }\n+\n+        if (StringUtil.isBlank(service)) {\n+            throw new IllegalArgumentException(\"Service cannot be null or empty.\");\n+        }\n+\n+        if (StringUtil.isBlank(context)) {\n+            throw new IllegalArgumentException(\"Context cannot be null or empty.\");\n+        }\n+    }\n+\n+    public String serializeToXML() {\n+        ByteArrayOutputStream tokenContentOS = new ByteArrayOutputStream();\n+        XMLEncoder encoder = new XMLEncoder(tokenContentOS);\n+        encoder.writeObject(this);\n+        encoder.flush();\n+        encoder.close();\n+\n+        return tokenContentOS.toString();\n+    }\n+\n+    public static Object buildFromXML(String xml) {\n+        ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(xml.getBytes());\n+        XMLDecoder decoder = new XMLDecoder(tokenContentIS);\n+        Object object = decoder.readObject();\n+        decoder.close();\n+\n+        return object;\n+    }\n+}"},{"sha":"4c6fc68352ac4614021ba589678de4a5d634743e","filename":"core/src/test/resources/dbunitTestData.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/af5a516c19fd4e7e56ebed0f7edf322c848a114d/core%2Fsrc%2Ftest%2Fresources%2FdbunitTestData.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/af5a516c19fd4e7e56ebed0f7edf322c848a114d/core%2Fsrc%2Ftest%2Fresources%2FdbunitTestData.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FdbunitTestData.xml?ref=af5a516c19fd4e7e56ebed0f7edf322c848a114d","patch":"@@ -107,6 +107,13 @@\n \n     <SyncopeUser_DerivedAttribute SyncopeUser_id=\"3\"\n                                   derivedAttributes_id=\"1000\"/>\n+    <ConnectorInstance\n+        id=\"100\"\n+        connectorName=\"OpenAM\"\n+        bundleName=\"org.syncope.core.persistence.test.util.openam\"\n+        version=\"1.0\"\n+        xmlConfiguration=\"%lt;xml ... \" />\n+\n \n     <Entitlement name=\"base\" description=\"NULL\"/>\n     <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n@@ -117,4 +124,5 @@\n                              roles_name=\"root\" roles_parent=\"/\"/>\n     <Entitlement_SyncopeRole entitlements_name=\"base\"\n                              roles_name=\"child\" roles_parent=\"root\"/>\n+\n </dataset>"},{"sha":"7d3131a7ef1b1f461c3d9dd5c11b5a9da0ab8d3f","filename":"pom.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/af5a516c19fd4e7e56ebed0f7edf322c848a114d/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/af5a516c19fd4e7e56ebed0f7edf322c848a114d/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=af5a516c19fd4e7e56ebed0f7edf322c848a114d","patch":"@@ -127,6 +127,8 @@\n \n         <jetty.version>6.1.24</jetty.version>\n \n+        <commons-digester.version>2.0</commons-digester.version>\n+\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n \n     </properties>\n@@ -276,6 +278,12 @@\n                 <version>${jetty.version}</version>\n                 <scope>test</scope>\n             </dependency>\n+            <dependency>\n+            <groupId>commons-digester</groupId>\n+            <artifactId>commons-digester</artifactId>\n+            <version>${commons-digester.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n             <!-- /TEST -->\n \n         </dependencies>"}]}