{"sha":"144dd71cb42681586dc3ec9c13858e7b6b506798","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE0NGRkNzFjYjQyNjgxNTg2ZGMzZWM5YzEzODU4ZTdiNmI1MDY3OTg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-06T07:33:31Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-06T07:33:31Z"},"message":"(Fixes issue #39)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246466 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"61c1ef2a9cc8f07af6394a484734871ea8cd1651","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/61c1ef2a9cc8f07af6394a484734871ea8cd1651"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/144dd71cb42681586dc3ec9c13858e7b6b506798","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/144dd71cb42681586dc3ec9c13858e7b6b506798","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/144dd71cb42681586dc3ec9c13858e7b6b506798","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/144dd71cb42681586dc3ec9c13858e7b6b506798/comments","author":null,"committer":null,"parents":[{"sha":"893b08749670cb99e4c6dc026c6b67595d811099","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/893b08749670cb99e4c6dc026c6b67595d811099","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/893b08749670cb99e4c6dc026c6b67595d811099"}],"stats":{"total":245,"additions":130,"deletions":115},"files":[{"sha":"098b39e26235cbdc7e57315f3ce351ff54881028","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":130,"deletions":115,"changes":245,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/144dd71cb42681586dc3ec9c13858e7b6b506798/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/144dd71cb42681586dc3ec9c13858e7b6b506798/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=144dd71cb42681586dc3ec9c13858e7b6b506798","patch":"@@ -17,6 +17,7 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import org.identityconnectors.framework.api.ConnectorFacade;\n import org.identityconnectors.framework.common.FrameworkUtil;\n@@ -45,22 +46,32 @@\n import org.syncope.types.SchemaType;\n import org.syncope.types.SchemaValueType;\n \n+/**\n+ * Manage the data propagation to target resources.\n+ */\n public class PropagationManager {\n \n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(PropagationManager.class);\n+    /**\n+     * Schema DAO.\n+     */\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n-    private static final Logger log =\n-            LoggerFactory.getLogger(PropagationManager.class);\n-\n     /**\n      * Create the user on every associated resource.\n      * Exceptions will be ignored.\n      * @param user to be created.\n      * @return a set of provisioned resources.\n      * @throws PropagationException\n      */\n-    public Set<String> create(SyncopeUser user) throws PropagationException {\n+    public final Set<String> create(final SyncopeUser user)\n+            throws PropagationException {\n+\n         return create(user, null);\n     }\n \n@@ -71,7 +82,8 @@ public Set<String> create(SyncopeUser user) throws PropagationException {\n      * Exceptions won't be ignored and the process will be stopped if the\n      * creation fails onto a synchronous resource.\n      * @param user to be created.\n-     * @param syncResourceNames to ask for a synchronous or asynchronous provisioning.\n+     * @param syncResourceNames to ask for a synchronous or\n+     * asynchronous provisioning.\n      * @return a set of provisioned resources.\n      * @throws PropagationException\n      */\n@@ -125,9 +137,9 @@ private Set<String> provision(SyncopeUser user,\n             Set<String> syncResourceNames)\n             throws PropagationException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Provisioning with user \" + user + \":\\n\" +\n-                    resourceOperations);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Provisioning with user \" + user + \":\\n\"\n+                    + resourceOperations);\n         }\n \n         // set of provisioned resources\n@@ -157,93 +169,78 @@ private Set<String> provision(SyncopeUser user,\n         }\n \n         // synchronous propagation ...\n-        if (log.isDebugEnabled()) {\n-            log.debug(\n-                    \"Synchronous provisioning with user \" + user + \":\\n\" +\n-                    syncOperations);\n-\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Synchronous provisioning with user \" + user + \":\\n\"\n+                    + syncOperations);\n         }\n \n         for (Type type : ResourceOperations.Type.values()) {\n             for (TargetResource resource : syncOperations.get(type)) {\n                 try {\n+                    Map<String, Set<Attribute>> preparedAttributes =\n+                            prepareAttributes(user, resource);\n+                    String accountId =\n+                            preparedAttributes.keySet().iterator().next();\n+                    Set<Attribute> attributes =\n+                            manipulateSyncAttributes(\n+                            preparedAttributes.values().iterator().next());\n+                    propagate(resource, type, accountId, attributes);\n \n-                    propagate(user, resource, type);\n                     provisioned.add(resource.getName());\n-\n                 } catch (Throwable t) {\n-                    log.error(\n-                            \"Exception during provision on resource \" +\n-                            resource.getName(), t);\n+                    LOG.error(\"Exception during provision on resource \"\n+                            + resource.getName(), t);\n \n                     throw new PropagationException(\n-                            \"Exception during provision on resource \" +\n-                            resource.getName(), resource.getName(), t);\n+                            \"Exception during provision on resource \"\n+                            + resource.getName(), resource.getName(), t);\n                 }\n             }\n         }\n \n         // asynchronous propagation ...\n-        if (log.isDebugEnabled()) {\n-            log.debug(\n-                    \"Asynchronous provisioning with user \" + user + \":\\n\" +\n-                    asyncOperations);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Asynchronous provisioning with user \" + user + \":\\n\"\n+                    + asyncOperations);\n         }\n \n         for (Type type : ResourceOperations.Type.values()) {\n             for (TargetResource resource : asyncOperations.get(type)) {\n                 try {\n+                    Map<String, Set<Attribute>> preparedAttributes =\n+                            prepareAttributes(user, resource);\n+                    String accountId =\n+                            preparedAttributes.keySet().iterator().next();\n+                    Set<Attribute> attributes =\n+                            manipulateAsyncAttributes(\n+                            preparedAttributes.values().iterator().next());\n+                    propagate(resource, type, accountId, attributes);\n \n-                    propagate(user, resource, type);\n-                    provisioned.add(resource.getName());\n \n+                    provisioned.add(resource.getName());\n                 } catch (Throwable t) {\n-                    log.error(\n-                            \"Exception during provision on resource \" +\n-                            resource.getName(), t);\n+                    LOG.error(\"Exception during provision on resource \"\n+                            + resource.getName(), t);\n                 }\n             }\n         }\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\n-                    \"Provisioned \" + provisioned +\n-                    \" with user \" + user.getId());\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\n+                    \"Provisioned \" + provisioned\n+                    + \" with user \" + user.getId());\n         }\n \n         return provisioned;\n     }\n \n-    /**\n-     * Propagate provision/update the resource indicated.\n-     * @param user to be created.\n-     * @param resource to be provisioned.\n-     * @param type to be performed on the specified resource\n-     * @throws NoSuchBeanDefinitionException if the connector bean doesn't\n-     * exist.\n-     * @throws IllegalStateException if propagation fails.\n-     */\n-    private void propagate(SyncopeUser user, TargetResource resource, Type type)\n-            throws NoSuchBeanDefinitionException, IllegalStateException {\n-\n-        if (log.isDebugEnabled()) {\n-            log.debug(\n-                    \"\\nPropagation of user \" + user +\n-                    \"\\nAttributes: \" + user.getAttributes());\n-        }\n-\n-        ConnectorInstance connectorInstance = resource.getConnector();\n-\n-        ConnectorFacade connector =\n-                getConnectorFacade(connectorInstance.getId().toString());\n-\n-        if (connector == null) {\n-            log.error(\n-                    \"Connector instance bean \" +\n-                    connectorInstance.getId().toString() + \" not found\");\n+    private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n+            TargetResource resource) {\n \n-            throw new NoSuchBeanDefinitionException(\n-                    \"Connector instance bean not found\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Preparing resource attributes for \" + user\n+                    + \" on resource \" + resource\n+                    + \" with attributes: \" + user.getAttributes());\n         }\n \n         // get password\n@@ -253,7 +250,7 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n         List<SchemaMapping> mappings = resource.getMappings();\n \n         // set of user attributes\n-        Set<Attribute> attrs = new HashSet<Attribute>();\n+        Set<Attribute> attributes = new HashSet<Attribute>();\n \n         // cast to be applied on SchemaValueType\n         Class castToBeApplied = null;\n@@ -278,10 +275,7 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n         // syncope user attribute values\n         List<UserAttributeValue> values = null;\n \n-        //SchemaDAO schemaDAO = getSchemaDAO();\n-\n         for (SchemaMapping mapping : mappings) {\n-\n             try {\n                 // get field name on target resource\n                 field = mapping.getField();\n@@ -290,10 +284,10 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n                 schemaName = mapping.getSchemaName();\n                 schemaType = mapping.getSchemaType();\n \n-                if (log.isDebugEnabled()) {\n-                    log.debug(\n-                            \"Process schema \" + schemaName +\n-                            \"(\" + schemaType.getClassName() + \").\");\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\n+                            \"Process schema \" + schemaName\n+                            + \"(\" + schemaType.getClassName() + \").\");\n                 }\n \n                 AbstractSchema schema = null;\n@@ -302,12 +296,14 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n                     // check for schema or constants (AccountId/Password)\n                     schemaType.getSchemaType().asSubclass(AbstractSchema.class);\n \n-                    schema = schemaDAO.find(schemaName, schemaType.getSchemaType());\n+                    schema = schemaDAO.find(schemaName,\n+                            schemaType.getSchemaType());\n                 } catch (ClassCastException e) {\n                     // ignore exception ... check for AccountId or Password\n-                    if (log.isDebugEnabled())\n-                        log.debug(\"Wrong schema type \" +\n-                                schemaType.getClassName());\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Wrong schema type \"\n+                                + schemaType.getClassName());\n+                    }\n                 }\n \n                 if (schema != null) {\n@@ -321,12 +317,11 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n                             ? userAttribute.getAttributeValues()\n                             : Collections.EMPTY_LIST;\n \n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\n-                                \"\\nRetrieved attribute \" + userAttribute +\n-                                \"\\n* Schema \" + schemaName +\n-                                \"\\n* Schema type \" + schemaType.getClassName() +\n-                                \"\\n* Attribute values \" + values);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Retrieved attribute \" + userAttribute\n+                                + \"\\n* Schema \" + schemaName\n+                                + \"\\n* Schema type \" + schemaType.getClassName()\n+                                + \"\\n* Attribute values \" + values);\n                     }\n \n                 } else {\n@@ -342,18 +337,17 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n                     values = Collections.singletonList(userAttributeValue);\n                 }\n \n-                if (log.isDebugEnabled()) {\n-                    log.debug(\n-                            \"\\nDefine mapping for: \" +\n-                            \"\\n* Field \" + field +\n-                            \"\\n* is accountId \" + mapping.isAccountid() +\n-                            \"\\n* is password \" + (mapping.isPassword() ||\n-                            schemaType.equals(SchemaType.Password)) +\n-                            \"\\n* is nullable \" + mapping.isNullable() +\n-                            \"\\n* Schema \" + schemaName +\n-                            \"\\n* SchemaType \" + schemaType.toString() +\n-                            \"\\n* ClassType \" + schemaValueType.getClassName() +\n-                            \"\\n* Values \" + values);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Define mapping for: \"\n+                            + \"\\n* Field \" + field\n+                            + \"\\n* is accountId \" + mapping.isAccountid()\n+                            + \"\\n* is password \" + (mapping.isPassword()\n+                            || schemaType.equals(SchemaType.Password))\n+                            + \"\\n* is nullable \" + mapping.isNullable()\n+                            + \"\\n* Schema \" + schemaName\n+                            + \"\\n* SchemaType \" + schemaType.toString()\n+                            + \"\\n* ClassType \" + schemaValueType.getClassName()\n+                            + \"\\n* Values \" + values);\n                 }\n \n                 // -----------------------------\n@@ -362,7 +356,6 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n                 objValues = new HashSet();\n \n                 for (UserAttributeValue value : values) {\n-\n                     castToBeApplied =\n                             Class.forName(schemaValueType.getClassName());\n \n@@ -371,60 +364,84 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n \n                         castToBeApplied = String.class;\n                         objValues.add(value.getValueAsString());\n-\n                     } else {\n-\n                         objValues.add(value.getValue());\n-\n                     }\n                 }\n                 // -----------------------------\n \n                 if (mapping.isAccountid()) {\n                     accountId = objValues.iterator().next().toString();\n-                    attrs.add(new Name(accountId));\n+                    attributes.add(new Name(accountId));\n                 }\n \n                 if (mapping.isPassword()) {\n-                    attrs.add(AttributeBuilder.buildPassword(\n+                    attributes.add(AttributeBuilder.buildPassword(\n                             objValues.iterator().next().toString().\n                             toCharArray()));\n                 }\n \n                 Object objValue = null;\n-\n                 if (!objValues.isEmpty()) {\n                     objValue = objValues.iterator().next();\n                 }\n \n                 if (!mapping.isPassword() && !mapping.isAccountid()) {\n-\n                     if (schema.isMultivalue()) {\n-                        attrs.add(AttributeBuilder.build(\n+                        attributes.add(AttributeBuilder.build(\n                                 field,\n                                 objValues));\n                     } else {\n-                        attrs.add(AttributeBuilder.build(\n+                        attributes.add(AttributeBuilder.build(\n                                 field,\n                                 castToBeApplied.cast(objValue)));\n                     }\n                 }\n-\n             } catch (ClassNotFoundException e) {\n-\n-                if (log.isWarnEnabled()) {\n-                    log.warn(\"Unsupported attribute type \" +\n-                            schemaValueType.getClassName(), e);\n+                if (LOG.isWarnEnabled()) {\n+                    LOG.warn(\"Unsupported attribute type \"\n+                            + schemaValueType.getClassName(), e);\n                 }\n-\n             } catch (Throwable t) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Attribute '\" + schemaName +\n-                            \"' processing failed\", t);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Attribute '\" + schemaName\n+                            + \"' processing failed\", t);\n                 }\n             }\n         }\n \n+        return Collections.singletonMap(accountId, attributes);\n+    }\n+\n+    protected Set<Attribute> manipulateSyncAttributes(\n+            final Set<Attribute> attributes) {\n+\n+        return attributes;\n+    }\n+\n+    protected Set<Attribute> manipulateAsyncAttributes(\n+            final Set<Attribute> attributes) {\n+\n+        return attributes;\n+    }\n+\n+    private void propagate(TargetResource resource, Type type,\n+            String accountId, Set<Attribute> attrs)\n+            throws NoSuchBeanDefinitionException, IllegalStateException {\n+\n+        ConnectorInstance connectorInstance = resource.getConnector();\n+\n+        ConnectorFacade connector =\n+                getConnectorFacade(connectorInstance.getId().toString());\n+\n+        if (connector == null) {\n+            LOG.error(\"Connector instance bean \"\n+                    + connectorInstance.getId().toString() + \" not found\");\n+\n+            throw new NoSuchBeanDefinitionException(\n+                    \"Connector instance bean not found\");\n+        }\n+\n         Uid userUid = null;\n \n         switch (type) {\n@@ -453,16 +470,14 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n             case DELETE:\n                 connector.delete(ObjectClass.ACCOUNT, new Uid(accountId), null);\n                 break;\n-\n         }\n \n         if (userUid == null && type != Type.DELETE) {\n-            log.error(\n-                    \"Error creating / updating user onto resource \" + resource);\n+            LOG.error(\"Error creating / updating user onto resource \"\n+                    + resource);\n \n             throw new IllegalStateException(\"Error creating user\");\n         }\n-\n     }\n \n     private ConnectorFacade getConnectorFacade(String id) {"}]}