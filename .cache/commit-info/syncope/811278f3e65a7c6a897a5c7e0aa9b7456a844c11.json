{"sha":"811278f3e65a7c6a897a5c7e0aa9b7456a844c11","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgxMTI3OGYzZTY1YTdjNmE4OTdhNWM3ZTBhYTliNzQ1NmE4NDRjMTE=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-05-08T08:13:02Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-05-08T08:13:02Z"},"message":"SYNCOPE-80 #comment the same problem - more or less - has been solved for users as well\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1335375 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f0d53e239b1bf87fcc674208d397402b9fa0f8c8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f0d53e239b1bf87fcc674208d397402b9fa0f8c8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/811278f3e65a7c6a897a5c7e0aa9b7456a844c11","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/811278f3e65a7c6a897a5c7e0aa9b7456a844c11","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/811278f3e65a7c6a897a5c7e0aa9b7456a844c11","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"2dc34192ad84189dcd9a580d659000f9a896f086","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2dc34192ad84189dcd9a580d659000f9a896f086","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2dc34192ad84189dcd9a580d659000f9a896f086"}],"stats":{"total":244,"additions":168,"deletions":76},"files":[{"sha":"62c5fe7a6a3f9e5be7a8a73fa6f6563e24d00a22","filename":"console/src/main/java/org/apache/syncope/console/pages/Tasks.java","status":"modified","additions":33,"deletions":4,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=811278f3e65a7c6a897a5c7e0aa9b7456a844c11","patch":"@@ -33,7 +33,9 @@\n import org.apache.syncope.console.pages.panels.SyncTasks;\n import org.apache.syncope.console.rest.TaskRestClient;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.model.AbstractReadOnlyModel;\n@@ -96,6 +98,7 @@ public int size() {\n         public IModel<TaskExecTO> model(final TaskExecTO taskExecution) {\n \n             return new AbstractReadOnlyModel<TaskExecTO>() {\n+\n                 private static final long serialVersionUID = 7485475149862342421L;\n \n                 @Override\n@@ -124,8 +127,8 @@ public List<TaskExecTO> getTaskDB() {\n \n         private Class<T> reference;\n \n-        public TasksProvider(final TaskRestClient restClient, final int paginatorRows, final String id,\n-                final Class<T> reference) {\n+        public TasksProvider(\n+                final TaskRestClient restClient, final int paginatorRows, final String id, final Class<T> reference) {\n \n             super();\n \n@@ -156,8 +159,8 @@ public int compare(final TaskExecTO left, final TaskExecTO right) {\n                         }\n                     });\n \n-                    ((SchedTaskTO) task).setLastExec(task.getExecutions().get(task.getExecutions().size() - 1)\n-                            .getStartDate());\n+                    ((SchedTaskTO) task).setLastExec(task.getExecutions().get(task.getExecutions().size() - 1).\n+                            getStartDate());\n                 }\n                 tasks.add(task);\n             }\n@@ -176,4 +179,30 @@ public IModel<T> model(final T object) {\n             return new CompoundPropertyModel<T>(object);\n         }\n     }\n+\n+    /**\n+     * Update task table.\n+     *\n+     * @param columns columns.\n+     * @param dataProvider data provider.\n+     * @param container container.\n+     * @param currentPage current page index.\n+     * @return data table.\n+     */\n+    public static AjaxFallbackDefaultDataTable<TaskTO> updateTaskTable(\n+            final List<IColumn<TaskTO>> columns,\n+            final TasksProvider dataProvider,\n+            final WebMarkupContainer container,\n+            final int currentPage) {\n+\n+        final AjaxFallbackDefaultDataTable table = new AjaxFallbackDefaultDataTable<TaskTO>(\n+                \"datatable\", columns, dataProvider, dataProvider.paginatorRows);\n+\n+        table.setCurrentPage(currentPage);\n+        table.setOutputMarkupId(true);\n+\n+        container.addOrReplace(table);\n+\n+        return table;\n+    }\n }"},{"sha":"97f5265b2e0f2b7bb329fcd6306d272757d46f31","filename":"console/src/main/java/org/apache/syncope/console/pages/Users.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=811278f3e65a7c6a897a5c7e0aa9b7456a844c11","patch":"@@ -81,8 +81,8 @@ public Page createPage() {\n                 editModalWin.show(target);\n             }\n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(createLink, ENABLE, xmlRolesReader.getAllAllowedRoles(\"Users\",\n-                \"create\"));\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                createLink, ENABLE, xmlRolesReader.getAllAllowedRoles(\"Users\", \"create\"));\n         add(createLink);\n \n         setWindowClosedReloadCallback(editModalWin);"},{"sha":"b917a9ccf58d8936070657ff2a0399aab4c765b1","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/NotificationTasks.java","status":"modified","additions":21,"deletions":8,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java?ref=811278f3e65a7c6a897a5c7e0aa9b7456a844c11","patch":"@@ -40,12 +40,14 @@\n import org.apache.wicket.request.http.WebResponse;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.apache.syncope.client.to.NotificationTaskTO;\n+import org.apache.syncope.client.to.PropagationTaskTO;\n import org.apache.syncope.client.to.TaskTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.XMLRolesReader;\n import org.apache.syncope.console.pages.NotificationTaskModalPage;\n+import org.apache.syncope.console.pages.Tasks;\n import org.apache.syncope.console.pages.Tasks.TasksProvider;\n import org.apache.syncope.console.rest.TaskRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n@@ -76,14 +78,22 @@ public class NotificationTasks extends Panel {\n     @SpringBean\n     protected XMLRolesReader xmlRolesReader;\n \n+    private final List<IColumn<TaskTO>> columns;\n+\n+    private AjaxFallbackDefaultDataTable<TaskTO> table;\n+\n     public NotificationTasks(String id) {\n         super(id);\n \n+        container = new WebMarkupContainer(\"container\");\n+        container.setOutputMarkupId(true);\n+        add(container);\n+\n         add(window = new ModalWindow(\"taskWin\"));\n \n         paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS);\n \n-        List<IColumn<TaskTO>> columns = new ArrayList<IColumn<TaskTO>>();\n+        columns = new ArrayList<IColumn<TaskTO>>();\n \n         columns.add(new PropertyColumn(new ResourceModel(\"id\"), \"id\", \"id\"));\n         columns.add(new PropertyColumn(new ResourceModel(\"sender\"), \"sender\", \"sender\"));\n@@ -169,14 +179,13 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxFallbackDefaultDataTable<TaskTO> table = new AjaxFallbackDefaultDataTable<TaskTO>(\"datatable\",\n-                columns, new TasksProvider(restClient, paginatorRows, getId(), NotificationTaskTO.class), paginatorRows);\n+        table = Tasks.updateTaskTable(\n+                columns,\n+                new TasksProvider(restClient, paginatorRows, getId(), NotificationTaskTO.class),\n+                container,\n+                0);\n \n-        container = new WebMarkupContainer(\"container\");\n         container.add(table);\n-        container.setOutputMarkupId(true);\n-\n-        add(container);\n \n         window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n \n@@ -212,7 +221,11 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 prefMan.set(getWebRequest(), (WebResponse) getResponse(),\n                         Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS, String.valueOf(paginatorRows));\n \n-                table.setItemsPerPage(paginatorRows);\n+                table = Tasks.updateTaskTable(\n+                        columns,\n+                        new TasksProvider(restClient, paginatorRows, getId(), NotificationTaskTO.class),\n+                        container,\n+                        table == null ? 0 : table.getCurrentPage());\n \n                 target.add(container);\n             }"},{"sha":"30240df0ab5d4654685c0bcd4abb916634076c95","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PropagationTasks.java","status":"modified","additions":22,"deletions":12,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java?ref=811278f3e65a7c6a897a5c7e0aa9b7456a844c11","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.XMLRolesReader;\n import org.apache.syncope.console.pages.PropagationTaskModalPage;\n+import org.apache.syncope.console.pages.Tasks;\n import org.apache.syncope.console.pages.Tasks.TasksProvider;\n import org.apache.syncope.console.rest.TaskRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n@@ -80,14 +81,22 @@ public class PropagationTasks extends Panel {\n     @SpringBean\n     protected XMLRolesReader xmlRolesReader;\n \n+    private final List<IColumn<TaskTO>> columns;\n+\n+    private AjaxFallbackDefaultDataTable<TaskTO> table;\n+\n     public PropagationTasks(final String id) {\n         super(id);\n \n+        container = new WebMarkupContainer(\"container\");\n+        container.setOutputMarkupId(true);\n+        add(container);\n+\n         add(window = new ModalWindow(\"taskWin\"));\n \n         paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS);\n \n-        List<IColumn<TaskTO>> columns = new ArrayList<IColumn<TaskTO>>();\n+        columns = new ArrayList<IColumn<TaskTO>>();\n \n         columns.add(new PropertyColumn(new ResourceModel(\"id\"), \"id\", \"id\"));\n \n@@ -179,14 +188,11 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxFallbackDefaultDataTable<TaskTO> table = new AjaxFallbackDefaultDataTable<TaskTO>(\"datatable\",\n-                columns, new TasksProvider(restClient, paginatorRows, getId(), PropagationTaskTO.class), paginatorRows);\n-\n-        container = new WebMarkupContainer(\"container\");\n-        container.add(table);\n-        container.setOutputMarkupId(true);\n-\n-        add(container);\n+        table = Tasks.updateTaskTable(\n+                columns,\n+                new TasksProvider(restClient, paginatorRows, getId(), PropagationTaskTO.class),\n+                container,\n+                0);\n \n         window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n \n@@ -210,8 +216,8 @@ public void onClose(final AjaxRequestTarget target) {\n \n         Form paginatorForm = new Form(\"PaginatorForm\");\n \n-        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this, \"paginatorRows\"),\n-                prefMan.getPaginatorChoices());\n+        final DropDownChoice rowsChooser = new DropDownChoice(\n+                \"rowsChooser\", new PropertyModel(this, \"paginatorRows\"), prefMan.getPaginatorChoices());\n \n         rowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n@@ -222,7 +228,11 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 prefMan.set(getWebRequest(), (WebResponse) getResponse(),\n                         Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS, String.valueOf(paginatorRows));\n \n-                table.setItemsPerPage(paginatorRows);\n+                table = Tasks.updateTaskTable(\n+                        columns,\n+                        new TasksProvider(restClient, paginatorRows, getId(), PropagationTaskTO.class),\n+                        container,\n+                        table == null ? 0 : table.getCurrentPage());\n \n                 target.add(container);\n             }"},{"sha":"2f27607a9946e2adb46d49691d8aeab3647839c9","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResultSetPanel.java","status":"modified","additions":33,"deletions":18,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResultSetPanel.java?ref=811278f3e65a7c6a897a5c7e0aa9b7456a844c11","patch":"@@ -145,9 +145,8 @@ public class ResultSetPanel extends Panel implements IEventSource {\n     final private FeedbackPanel feedbackPanel;\n \n     /**\n-     * Specify if results are about a filtered search or not. Using this\n-     * attribute it is possible to use this panel to show results about user\n-     * list and user search.\n+     * Specify if results are about a filtered search or not. Using this attribute it is possible to use this panel to\n+     * show results about user list and user search.\n      */\n     private boolean filtered;\n \n@@ -167,8 +166,7 @@ public class ResultSetPanel extends Panel implements IEventSource {\n     private UserDataProvider dataProvider;\n \n     /**\n-     * Modal window to be used for user profile editing. Global visibility is\n-     * required ...\n+     * Modal window to be used for user profile editing. Global visibility is required ...\n      */\n     private final ModalWindow editmodal = new ModalWindow(\"editModal\");\n \n@@ -226,13 +224,14 @@ public <T extends AbstractAttributableTO> ResultSetPanel(final String id, final\n         // Result table initialization\n         // ---------------------------\n         // preferences and container must be not null to use it ...\n+        rows = preferences.getPaginatorRows(getRequest(), Constants.PREF_USERS_PAGINATOR_ROWS);\n         updateResultTable(false);\n         // ---------------------------\n \n         // ---------------------------\n         // Link to select schemas/columns to be shown\n         // ---------------------------\n-        AjaxLink displayAttrsLink = new IndicatingAjaxLink(\"displayAttrsLink\") {\n+        final AjaxLink displayAttrsLink = new IndicatingAjaxLink(\"displayAttrsLink\") {\n \n             private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -272,8 +271,8 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n             }\n         });\n \n-        MetaDataRoleAuthorizationStrategy.authorize(displayAttrsLink, ENABLE, xmlRolesReader.getAllAllowedRoles(\n-                \"Users\", \"changeView\"));\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                displayAttrsLink, ENABLE, xmlRolesReader.getAllAllowedRoles(\"Users\", \"changeView\"));\n \n         container.add(displayAttrsLink);\n         // ---------------------------\n@@ -284,8 +283,8 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n         final Form paginatorForm = new Form(\"paginator\");\n         container.add(paginatorForm);\n \n-        final DropDownChoice<Integer> rowsChooser = new DropDownChoice<Integer>(\"rowsChooser\", new PropertyModel(this,\n-                \"rows\"), preferences.getPaginatorChoices());\n+        final DropDownChoice<Integer> rowsChooser = new DropDownChoice<Integer>(\n+                \"rowsChooser\", new PropertyModel(this, \"rows\"), preferences.getPaginatorChoices());\n \n         rowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n@@ -297,6 +296,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n                 final EventDataWrapper data = new EventDataWrapper();\n                 data.setTarget(target);\n+                data.setRows(rows);\n \n                 send(getParent(), Broadcast.BREADTH, data);\n             }\n@@ -317,16 +317,17 @@ public void search(final NodeCond searchCond, final AjaxRequestTarget target) {\n     }\n \n     private void updateResultTable(final boolean create) {\n-        // Requires preferences/container attributes not null ...\n-        rows = preferences.getPaginatorRows(getRequest(), Constants.PREF_USERS_PAGINATOR_ROWS);\n+        updateResultTable(create, rows);\n+    }\n \n+    private void updateResultTable(final boolean create, final int rows) {\n         dataProvider = new UserDataProvider(userRestClient, rows, filtered);\n         dataProvider.setSearchCond(filter);\n \n         final int currentPage = resultTable != null\n                 ? (create\n-                        ? resultTable.getPageCount() - 1\n-                        : resultTable.getCurrentPage())\n+                ? resultTable.getPageCount() - 1\n+                : resultTable.getCurrentPage())\n                 : 0;\n \n         resultTable = new AjaxFallbackDefaultDataTable<UserTO>(\"resultTable\", getColumns(), dataProvider, rows);\n@@ -480,11 +481,14 @@ public void onEvent(final IEvent<?> event) {\n         if (event.getPayload() instanceof EventDataWrapper) {\n \n             final EventDataWrapper data = (EventDataWrapper) event.getPayload();\n-            final AjaxRequestTarget target = data.getTarget();\n \n-            updateResultTable(data.isCreate());\n-\n-            target.add(container);\n+            if (data.getRows() < 1) {\n+                updateResultTable(data.isCreate());\n+            } else {\n+                updateResultTable(data.isCreate(), data.getRows());\n+            }\n+            \n+            data.getTarget().add(container);\n         }\n     }\n \n@@ -497,6 +501,7 @@ private void setWindowClosedReloadCallback(final ModalWindow window) {\n             public void onClose(final AjaxRequestTarget target) {\n                 final EventDataWrapper data = new EventDataWrapper();\n                 data.setTarget(target);\n+                data.setRows(rows);\n \n                 send(getParent(), Broadcast.BREADTH, data);\n \n@@ -518,6 +523,8 @@ public static class EventDataWrapper {\n \n         private boolean create;\n \n+        private int rows;\n+\n         public AjaxRequestTarget getTarget() {\n             return target;\n         }\n@@ -533,5 +540,13 @@ public boolean isCreate() {\n         public void setCreate(boolean create) {\n             this.create = create;\n         }\n+\n+        public int getRows() {\n+            return rows;\n+        }\n+\n+        public void setRows(int rows) {\n+            this.rows = rows;\n+        }\n     }\n }"},{"sha":"a3139da95892f0ad612c7621f590ef70a10313b0","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SchedTasks.java","status":"modified","additions":21,"deletions":9,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java?ref=811278f3e65a7c6a897a5c7e0aa9b7456a844c11","patch":"@@ -45,6 +45,7 @@\n import org.apache.wicket.request.http.WebResponse;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.apache.syncope.client.to.SchedTaskTO;\n+import org.apache.syncope.client.to.TaskTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n@@ -80,6 +81,10 @@ public class SchedTasks extends Panel {\n     @SpringBean\n     protected XMLRolesReader xmlRolesReader;\n \n+    private final List<IColumn<TaskTO>> columns;\n+\n+    private AjaxFallbackDefaultDataTable<TaskTO> table;\n+\n     public SchedTasks(final String id, final PageReference callerPageRef) {\n \n         super(id);\n@@ -99,7 +104,7 @@ public SchedTasks(final String id, final PageReference callerPageRef) {\n \n         paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_SCHED_TASKS_PAGINATOR_ROWS);\n \n-        List<IColumn<SchedTaskTO>> columns = new ArrayList<IColumn<SchedTaskTO>>();\n+        columns = new ArrayList<IColumn<TaskTO>>();\n \n         columns.add(new PropertyColumn(new ResourceModel(\"id\"), \"id\", \"id\"));\n \n@@ -111,7 +116,7 @@ public SchedTasks(final String id, final PageReference callerPageRef) {\n \n         columns.add(new PropertyColumn(new ResourceModel(\"latestExecStatus\"), \"latestExecStatus\", \"latestExecStatus\"));\n \n-        columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(\"actions\", \"\")) {\n+        columns.add(new AbstractColumn<TaskTO>(new ResourceModel(\"actions\", \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n@@ -121,10 +126,10 @@ public String getCssClass() {\n             }\n \n             @Override\n-            public void populateItem(final Item<ICellPopulator<SchedTaskTO>> cellItem, final String componentId,\n-                    final IModel<SchedTaskTO> model) {\n+            public void populateItem(final Item<ICellPopulator<TaskTO>> cellItem, final String componentId,\n+                    final IModel<TaskTO> model) {\n \n-                final SchedTaskTO taskTO = model.getObject();\n+                final SchedTaskTO taskTO = (SchedTaskTO) model.getObject();\n \n                 final ActionLinksPanel panel = new ActionLinksPanel(componentId, model);\n \n@@ -206,9 +211,12 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxFallbackDefaultDataTable<SchedTaskTO> table = new AjaxFallbackDefaultDataTable<SchedTaskTO>(\n-                \"datatable\", columns, new TasksProvider(restClient, paginatorRows, getId(), SchedTaskTO.class),\n-                paginatorRows);\n+        table = Tasks.updateTaskTable(\n+                columns,\n+                new TasksProvider(restClient, paginatorRows, getId(), SchedTaskTO.class),\n+                container,\n+                0);\n+\n         container.add(table);\n \n         Form paginatorForm = new Form(\"PaginatorForm\");\n@@ -225,7 +233,11 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 prefMan.set(getWebRequest(), (WebResponse) getResponse(), Constants.PREF_SCHED_TASKS_PAGINATOR_ROWS,\n                         String.valueOf(paginatorRows));\n \n-                table.setItemsPerPage(paginatorRows);\n+                table = Tasks.updateTaskTable(\n+                        columns,\n+                        new TasksProvider(restClient, paginatorRows, getId(), SchedTaskTO.class),\n+                        container,\n+                        table == null ? 0 : table.getCurrentPage());\n \n                 target.add(container);\n             }"},{"sha":"05a566c31954b9a0e05b015b0bac715594c2190a","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SyncTasks.java","status":"modified","additions":36,"deletions":23,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/811278f3e65a7c6a897a5c7e0aa9b7456a844c11/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java?ref=811278f3e65a7c6a897a5c7e0aa9b7456a844c11","patch":"@@ -20,6 +20,20 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.syncope.client.to.SyncTaskTO;\n+import org.apache.syncope.client.to.TaskTO;\n+import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.commons.PreferenceManager;\n+import org.apache.syncope.console.commons.XMLRolesReader;\n+import org.apache.syncope.console.pages.SyncTaskModalPage;\n+import org.apache.syncope.console.pages.Tasks;\n+import org.apache.syncope.console.pages.Tasks.TasksProvider;\n+import org.apache.syncope.console.pages.UserTemplateModalPage;\n+import org.apache.syncope.console.rest.TaskRestClient;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -43,19 +57,6 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.http.WebResponse;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.apache.syncope.client.to.SyncTaskTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.commons.Constants;\n-import org.apache.syncope.console.commons.PreferenceManager;\n-import org.apache.syncope.console.commons.XMLRolesReader;\n-import org.apache.syncope.console.pages.SyncTaskModalPage;\n-import org.apache.syncope.console.pages.Tasks;\n-import org.apache.syncope.console.pages.Tasks.TasksProvider;\n-import org.apache.syncope.console.pages.UserTemplateModalPage;\n-import org.apache.syncope.console.rest.TaskRestClient;\n-import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n-import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n \n public class SyncTasks extends Panel {\n \n@@ -80,6 +81,10 @@ public class SyncTasks extends Panel {\n     @SpringBean\n     protected XMLRolesReader xmlRolesReader;\n \n+    private final List<IColumn<TaskTO>> columns;\n+\n+    private AjaxFallbackDefaultDataTable<TaskTO> table;\n+\n     public SyncTasks(String id, final PageReference callerPageRef) {\n         super(id);\n \n@@ -98,7 +103,7 @@ public SyncTasks(String id, final PageReference callerPageRef) {\n \n         paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_SYNC_TASKS_PAGINATOR_ROWS);\n \n-        List<IColumn<SyncTaskTO>> columns = new ArrayList<IColumn<SyncTaskTO>>();\n+        columns = new ArrayList<IColumn<TaskTO>>();\n \n         columns.add(new PropertyColumn(new ResourceModel(\"id\"), \"id\", \"id\"));\n \n@@ -110,7 +115,7 @@ public SyncTasks(String id, final PageReference callerPageRef) {\n \n         columns.add(new PropertyColumn(new ResourceModel(\"latestExecStatus\"), \"latestExecStatus\", \"latestExecStatus\"));\n \n-        columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(\"actions\", \"\")) {\n+        columns.add(new AbstractColumn<TaskTO>(new ResourceModel(\"actions\", \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n@@ -120,10 +125,10 @@ public String getCssClass() {\n             }\n \n             @Override\n-            public void populateItem(final Item<ICellPopulator<SyncTaskTO>> cellItem, final String componentId,\n-                    final IModel<SyncTaskTO> model) {\n+            public void populateItem(final Item<ICellPopulator<TaskTO>> cellItem, final String componentId,\n+                    final IModel<TaskTO> model) {\n \n-                final SyncTaskTO taskTO = model.getObject();\n+                final SyncTaskTO taskTO = (SyncTaskTO) model.getObject();\n \n                 final ActionLinksPanel panel = new ActionLinksPanel(componentId, model);\n \n@@ -226,8 +231,12 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxFallbackDefaultDataTable<SyncTaskTO> table = new AjaxFallbackDefaultDataTable<SyncTaskTO>(\n-                \"datatable\", columns, new TasksProvider(restClient, paginatorRows, id, SyncTaskTO.class), paginatorRows);\n+        table = Tasks.updateTaskTable(\n+                columns,\n+                new TasksProvider(restClient, paginatorRows, getId(), SyncTaskTO.class),\n+                container,\n+                0);\n+\n         container.add(table);\n \n         Form paginatorForm = new Form(\"PaginatorForm\");\n@@ -244,7 +253,11 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 prefMan.set(getWebRequest(), (WebResponse) getResponse(), Constants.PREF_SYNC_TASKS_PAGINATOR_ROWS,\n                         String.valueOf(paginatorRows));\n \n-                table.setItemsPerPage(paginatorRows);\n+                table = Tasks.updateTaskTable(\n+                        columns,\n+                        new TasksProvider(restClient, paginatorRows, getId(), SyncTaskTO.class),\n+                        container,\n+                        table == null ? 0 : table.getCurrentPage());\n \n                 target.add(container);\n             }\n@@ -274,8 +287,8 @@ public Page createPage() {\n             }\n         };\n \n-        MetaDataRoleAuthorizationStrategy.authorize(createLink, RENDER, xmlRolesReader.getAllAllowedRoles(\"Tasks\",\n-                \"create\"));\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                createLink, RENDER, xmlRolesReader.getAllAllowedRoles(\"Tasks\", \"create\"));\n \n         add(createLink);\n     }"}]}