{"sha":"941dc06a30e14122bd4552de0c600d273a6592b5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk0MWRjMDZhMzBlMTQxMjJiZDQ1NTJkZTBjNjAwZDI3M2E2NTkyYjU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-12-22T08:27:41Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-12-22T08:27:51Z"},"message":"[SYNCOPE-983] Improving search performance by skipping unnecessary checks for mandatory schemas","tree":{"sha":"265685391a34ddcdf5e318a18b9427a31a213726","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/265685391a34ddcdf5e318a18b9427a31a213726"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/941dc06a30e14122bd4552de0c600d273a6592b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/941dc06a30e14122bd4552de0c600d273a6592b5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/941dc06a30e14122bd4552de0c600d273a6592b5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/941dc06a30e14122bd4552de0c600d273a6592b5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"18ac4512cbda7a1b58a185fc866887ff753d7932","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/18ac4512cbda7a1b58a185fc866887ff753d7932","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/18ac4512cbda7a1b58a185fc866887ff753d7932"}],"stats":{"total":255,"additions":150,"deletions":105},"files":[{"sha":"fe5b57223ac8fa1fe68d12844dafc48e7b0c7685","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnySearchDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java?ref=941dc06a30e14122bd4552de0c600d273a6592b5","patch":"@@ -79,9 +79,8 @@ <T extends Any<?>> List<T> search(\n      *\n      * @param any to be checked\n      * @param searchCondition to be verified\n-     * @param kind any object\n      * @param <T> any\n      * @return true if any matches searchCondition\n      */\n-    <T extends Any<?>> boolean matches(T any, SearchCond searchCondition, AnyTypeKind kind);\n+    <T extends Any<?>> boolean matches(T any, SearchCond searchCondition);\n }"},{"sha":"49bf4ff20551b515ff593a2d80a651d79c965310","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":92,"deletions":78,"changes":170,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=941dc06a30e14122bd4552de0c600d273a6592b5","patch":"@@ -114,7 +114,7 @@ private String getAdminRealmsFilter(\n             }\n         }\n \n-        StringBuilder adminRealmFilter = new StringBuilder().\n+        StringBuilder adminRealmFilter = new StringBuilder(\"u.any_id IN (\").\n                 append(\"SELECT any_id FROM \").append(svs.field().name).\n                 append(\" WHERE realm_id IN (SELECT id AS realm_id FROM Realm\");\n \n@@ -129,7 +129,7 @@ private String getAdminRealmsFilter(\n             adminRealmFilter.append(\" id=?\").append(setParameter(parameters, realmKey));\n         }\n \n-        adminRealmFilter.append(')');\n+        adminRealmFilter.append(\"))\");\n \n         return adminRealmFilter.toString();\n     }\n@@ -144,8 +144,7 @@ public int count(final Set<String> adminRealms, final SearchCond cond, final Any\n \n         // 2. take into account administrative realms\n         queryString.insert(0, \"SELECT u.any_id FROM (\");\n-        queryString.append(\") u WHERE any_id IN (\");\n-        queryString.append(getAdminRealmsFilter(adminRealms, svs, parameters)).append(')');\n+        queryString.append(\") u WHERE \").append(getAdminRealmsFilter(adminRealms, svs, parameters));\n \n         // 3. prepare the COUNT query\n         queryString.insert(0, \"SELECT COUNT(any_id) FROM (\");\n@@ -202,13 +201,11 @@ public <T extends Any<?>> List<T> search(\n     }\n \n     @Override\n-    public <T extends Any<?>> boolean matches(\n-            final T any, final SearchCond cond, final AnyTypeKind typeKind) {\n-\n+    public <T extends Any<?>> boolean matches(final T any, final SearchCond cond) {\n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n \n         // 1. get the query string from the search condition\n-        SearchSupport svs = new SearchSupport(typeKind);\n+        SearchSupport svs = new SearchSupport(any.getType().getKind());\n         StringBuilder queryString = getQuery(cond, parameters, svs);\n \n         boolean matches;\n@@ -257,52 +254,55 @@ private void fillWithParameters(final Query query, final List<Object> parameters\n         }\n     }\n \n-    private StringBuilder buildSelect(final OrderBySupport orderBySupport) {\n+    private StringBuilder buildSelect(final OrderBySupport obs) {\n         final StringBuilder select = new StringBuilder(\"SELECT u.any_id\");\n \n-        for (OrderBySupport.Item obs : orderBySupport.items) {\n-            select.append(',').append(obs.select);\n+        for (OrderBySupport.Item item : obs.items) {\n+            select.append(',').append(item.select);\n         }\n         select.append(\" FROM \");\n \n         return select;\n     }\n \n-    private StringBuilder buildWhere(final OrderBySupport orderBySupport, final AnyTypeKind typeKind) {\n-        SearchSupport svs = new SearchSupport(typeKind);\n+    private StringBuilder buildWhere(final SearchSupport svs, final OrderBySupport obs) {\n         StringBuilder where = new StringBuilder(\" u\");\n-        for (SearchSupport.SearchView searchView : orderBySupport.views) {\n+        for (SearchSupport.SearchView searchView : obs.views) {\n             where.append(',');\n             if (searchView.name.equals(svs.attr().name)) {\n-                where.append(\" (SELECT * FROM \").append(searchView.name).append(\" UNION \").\n-                        append(\"SELECT * FROM \").append(svs.nullAttr().name).append(')');\n+                where.append(\" (SELECT * FROM \").append(searchView.name);\n+\n+                if (svs.nonMandatorySchemas || obs.nonMandatorySchemas) {\n+                    where.append(\" UNION SELECT * FROM \").append(svs.nullAttr().name);\n+                }\n+\n+                where.append(')');\n             } else {\n                 where.append(searchView.name);\n             }\n             where.append(' ').append(searchView.alias);\n         }\n         where.append(\" WHERE \");\n-        for (SearchSupport.SearchView searchView : orderBySupport.views) {\n+        for (SearchSupport.SearchView searchView : obs.views) {\n             where.append(\"u.any_id=\").append(searchView.alias).append(\".any_id AND \");\n         }\n \n-        for (OrderBySupport.Item obs : orderBySupport.items) {\n-            if (StringUtils.isNotBlank(obs.where)) {\n-                where.append(obs.where).append(\" AND \");\n+        for (OrderBySupport.Item item : obs.items) {\n+            if (StringUtils.isNotBlank(item.where)) {\n+                where.append(item.where).append(\" AND \");\n             }\n         }\n-        where.append(\"u.any_id IN (\");\n \n         return where;\n     }\n \n-    private StringBuilder buildOrderBy(final OrderBySupport orderBySupport) {\n+    private StringBuilder buildOrderBy(final OrderBySupport obs) {\n         StringBuilder orderBy = new StringBuilder();\n \n-        for (OrderBySupport.Item obs : orderBySupport.items) {\n-            orderBy.append(obs.orderBy).append(',');\n+        for (OrderBySupport.Item item : obs.items) {\n+            orderBy.append(item.orderBy).append(',');\n         }\n-        if (!orderBySupport.items.isEmpty()) {\n+        if (!obs.items.isEmpty()) {\n             orderBy.insert(0, \" ORDER BY \");\n             orderBy.deleteCharAt(orderBy.length() - 1);\n         }\n@@ -315,10 +315,10 @@ private OrderBySupport parseOrderBy(final AnyTypeKind type, final SearchSupport\n \n         final AnyUtils attrUtils = anyUtilsFactory.getInstance(type);\n \n-        OrderBySupport orderBySupport = new OrderBySupport();\n+        OrderBySupport obs = new OrderBySupport();\n \n         for (OrderByClause clause : orderByClauses) {\n-            OrderBySupport.Item obs = new OrderBySupport.Item();\n+            OrderBySupport.Item item = new OrderBySupport.Item();\n \n             // Manage difference among external key attribute and internal JPA @Id\n             String fieldName = \"key\".equals(clause.getField()) ? \"id\" : clause.getField();\n@@ -327,44 +327,47 @@ private OrderBySupport parseOrderBy(final AnyTypeKind type, final SearchSupport\n             if (anyField == null) {\n                 PlainSchema schema = schemaDAO.find(fieldName);\n                 if (schema != null) {\n+                    // keep track of involvement of non-mandatory schemas in the order by clauses\n+                    obs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());\n+\n                     if (schema.isUniqueConstraint()) {\n-                        orderBySupport.views.add(svs.uniqueAttr());\n+                        obs.views.add(svs.uniqueAttr());\n \n-                        obs.select = new StringBuilder().\n+                        item.select = new StringBuilder().\n                                 append(svs.uniqueAttr().alias).append('.').append(svs.fieldName(schema.getType())).\n                                 append(\" AS \").append(fieldName).toString();\n-                        obs.where = new StringBuilder().\n+                        item.where = new StringBuilder().\n                                 append(svs.uniqueAttr().alias).\n                                 append(\".schema_id='\").append(fieldName).append(\"'\").toString();\n-                        obs.orderBy = fieldName + \" \" + clause.getDirection().name();\n+                        item.orderBy = fieldName + \" \" + clause.getDirection().name();\n                     } else {\n-                        orderBySupport.views.add(svs.attr());\n+                        obs.views.add(svs.attr());\n \n-                        obs.select = new StringBuilder().\n+                        item.select = new StringBuilder().\n                                 append(svs.attr().alias).append('.').append(svs.fieldName(schema.getType())).\n                                 append(\" AS \").append(fieldName).toString();\n-                        obs.where = new StringBuilder().\n+                        item.where = new StringBuilder().\n                                 append(svs.attr().alias).\n                                 append(\".schema_id='\").append(fieldName).append(\"'\").toString();\n-                        obs.orderBy = fieldName + \" \" + clause.getDirection().name();\n+                        item.orderBy = fieldName + \" \" + clause.getDirection().name();\n                     }\n                 }\n             } else {\n-                orderBySupport.views.add(svs.field());\n+                obs.views.add(svs.field());\n \n-                obs.select = svs.field().alias + \".\" + fieldName;\n-                obs.where = StringUtils.EMPTY;\n-                obs.orderBy = svs.field().alias + \".\" + fieldName + \" \" + clause.getDirection().name();\n+                item.select = svs.field().alias + \".\" + fieldName;\n+                item.where = StringUtils.EMPTY;\n+                item.orderBy = svs.field().alias + \".\" + fieldName + \" \" + clause.getDirection().name();\n             }\n \n-            if (obs.isEmpty()) {\n+            if (item.isEmpty()) {\n                 LOG.warn(\"Cannot build any valid clause from {}\", clause);\n             } else {\n-                orderBySupport.items.add(obs);\n+                obs.items.add(item);\n             }\n         }\n \n-        return orderBySupport;\n+        return obs;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -379,17 +382,17 @@ private <T extends Any<?>> List<T> doSearch(final Set<String> adminRealms,\n         StringBuilder queryString = getQuery(cond, parameters, svs);\n \n         // 2. take into account administrative groups and ordering\n-        OrderBySupport orderBySupport = parseOrderBy(typeKind, svs, orderBy);\n+        OrderBySupport obs = parseOrderBy(typeKind, svs, orderBy);\n         if (queryString.charAt(0) == '(') {\n-            queryString.insert(0, buildSelect(orderBySupport));\n-            queryString.append(buildWhere(orderBySupport, typeKind));\n+            queryString.insert(0, buildSelect(obs));\n+            queryString.append(buildWhere(svs, obs));\n         } else {\n-            queryString.insert(0, buildSelect(orderBySupport).append('('));\n-            queryString.append(')').append(buildWhere(orderBySupport, typeKind));\n+            queryString.insert(0, buildSelect(obs).append('('));\n+            queryString.append(')').append(buildWhere(svs, obs));\n         }\n         queryString.\n-                append(getAdminRealmsFilter(adminRealms, svs, parameters)).append(')').\n-                append(buildOrderBy(orderBySupport));\n+                append(getAdminRealmsFilter(adminRealms, svs, parameters)).\n+                append(buildOrderBy(obs));\n \n         // 3. prepare the search query\n         Query query = entityManager().createNativeQuery(queryString.toString());\n@@ -434,30 +437,30 @@ private StringBuilder getQuery(final SearchCond cond, final List<Object> paramet\n         switch (cond.getType()) {\n             case LEAF:\n             case NOT_LEAF:\n-                if (cond.getAnyTypeCond() != null && AnyTypeKind.ANY_OBJECT == svs.anyTypeKind()) {\n+                if (cond.getAnyTypeCond() != null && AnyTypeKind.ANY_OBJECT == svs.anyTypeKind) {\n                     query.append(getQuery(cond.getAnyTypeCond(),\n                             cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (cond.getRelationshipTypeCond() != null\n-                        && (AnyTypeKind.USER == svs.anyTypeKind() || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind())) {\n+                        && (AnyTypeKind.USER == svs.anyTypeKind || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind)) {\n \n                     query.append(getQuery(cond.getRelationshipTypeCond(),\n                             cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (cond.getRelationshipCond() != null\n-                        && (AnyTypeKind.USER == svs.anyTypeKind() || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind())) {\n+                        && (AnyTypeKind.USER == svs.anyTypeKind || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind)) {\n \n                     query.append(getQuery(cond.getRelationshipCond(),\n                             cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (cond.getMembershipCond() != null\n-                        && (AnyTypeKind.USER == svs.anyTypeKind() || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind())) {\n+                        && (AnyTypeKind.USER == svs.anyTypeKind || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind)) {\n \n                     query.append(getQuery(cond.getMembershipCond(),\n                             cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (cond.getAssignableCond() != null) {\n                     query.append(getQuery(cond.getAssignableCond(), parameters, svs));\n-                } else if (cond.getRoleCond() != null && AnyTypeKind.USER == svs.anyTypeKind()) {\n+                } else if (cond.getRoleCond() != null && AnyTypeKind.USER == svs.anyTypeKind) {\n                     query.append(getQuery(cond.getRoleCond(),\n                             cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                } else if (cond.getMemberCond() != null && AnyTypeKind.GROUP == svs.anyTypeKind()) {\n+                } else if (cond.getMemberCond() != null && AnyTypeKind.GROUP == svs.anyTypeKind) {\n                     query.append(getQuery(cond.getMemberCond(),\n                             cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 } else if (cond.getResourceCond() != null) {\n@@ -498,8 +501,8 @@ private StringBuilder getQuery(final SearchCond cond, final List<Object> paramet\n         return query;\n     }\n \n-    private String getQuery(final AnyTypeCond cond, final boolean not, final List<Object> parameters,\n-            final SearchSupport svs) {\n+    private String getQuery(\n+            final AnyTypeCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE type_id\");\n@@ -515,7 +518,10 @@ private String getQuery(final AnyTypeCond cond, final boolean not, final List<Ob\n         return query.toString();\n     }\n \n-    private String getQuery(final RelationshipTypeCond cond, final boolean not, final List<Object> parameters,\n+    private String getQuery(\n+            final RelationshipTypeCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n             final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n@@ -538,8 +544,8 @@ private String getQuery(final RelationshipTypeCond cond, final boolean not, fina\n         return query.toString();\n     }\n \n-    private String getQuery(final RelationshipCond cond, final boolean not, final List<Object> parameters,\n-            final SearchSupport svs) {\n+    private String getQuery(\n+            final RelationshipCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n         String rightAnyObjectKey;\n         if (SyncopeConstants.UUID_PATTERN.matcher(cond.getAnyObject()).matches()) {\n@@ -569,8 +575,8 @@ private String getQuery(final RelationshipCond cond, final boolean not, final Li\n         return query.toString();\n     }\n \n-    private String getQuery(final MembershipCond cond, final boolean not, final List<Object> parameters,\n-            final SearchSupport svs) {\n+    private String getQuery(\n+            final MembershipCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n         String groupKey;\n         if (SyncopeConstants.UUID_PATTERN.matcher(cond.getGroup()).matches()) {\n@@ -611,8 +617,8 @@ private String getQuery(final MembershipCond cond, final boolean not, final List\n         return query.toString();\n     }\n \n-    private String getQuery(final RoleCond cond, final boolean not, final List<Object> parameters,\n-            final SearchSupport svs) {\n+    private String getQuery(\n+            final RoleCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n@@ -642,8 +648,8 @@ private String getQuery(final RoleCond cond, final boolean not, final List<Objec\n         return query.toString();\n     }\n \n-    private String getQuery(final ResourceCond cond, final boolean not, final List<Object> parameters,\n-            final SearchSupport svs) {\n+    private String getQuery(\n+            final ResourceCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n@@ -659,7 +665,7 @@ private String getQuery(final ResourceCond cond, final boolean not, final List<O\n                 append(\" WHERE resource_id=?\").\n                 append(setParameter(parameters, cond.getResourceKey()));\n \n-        if (svs.anyTypeKind() == AnyTypeKind.USER) {\n+        if (svs.anyTypeKind == AnyTypeKind.USER) {\n             query.append(\" UNION SELECT DISTINCT any_id FROM \").\n                     append(svs.groupResource().name).\n                     append(\" WHERE resource_id=?\").\n@@ -695,8 +701,8 @@ private String getQuery(final AssignableCond cond, final List<Object> parameters\n         return query.toString();\n     }\n \n-    private String getQuery(final MemberCond cond, final boolean not, final List<Object> parameters,\n-            final SearchSupport svs) {\n+    private String getQuery(\n+            final MemberCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n         String memberKey;\n         if (SyncopeConstants.UUID_PATTERN.matcher(cond.getMember()).matches()) {\n@@ -740,9 +746,14 @@ private String getQuery(final MemberCond cond, final boolean not, final List<Obj\n         return query.toString();\n     }\n \n-    private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue attrValue,\n-            final PlainSchema schema, final AttributeCond cond, final boolean not,\n-            final List<Object> parameters, final SearchSupport svs) {\n+    private void fillAttributeQuery(\n+            final StringBuilder query,\n+            final PlainAttrValue attrValue,\n+            final PlainSchema schema,\n+            final AttributeCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n         // activate ignoreCase only for EQ and LIKE operators\n         boolean ignoreCase = AttributeCond.Type.ILIKE == cond.getType() || AttributeCond.Type.IEQ == cond.getType();\n@@ -850,17 +861,20 @@ private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue\n         }\n     }\n \n-    private String getQuery(final AttributeCond cond, final boolean not, final List<Object> parameters,\n-            final SearchSupport svs) {\n+    private String getQuery(\n+            final AttributeCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n-        AnyUtils attrUtils = anyUtilsFactory.getInstance(svs.anyTypeKind());\n+        AnyUtils attrUtils = anyUtilsFactory.getInstance(svs.anyTypeKind);\n \n         PlainSchema schema = schemaDAO.find(cond.getSchema());\n         if (schema == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n             return EMPTY_QUERY;\n         }\n \n+        // keep track of involvement of non-mandatory schemas in the search condition\n+        svs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());\n+\n         PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n         try {\n             if (cond.getType() != AttributeCond.Type.LIKE\n@@ -902,12 +916,12 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n         return query.toString();\n     }\n \n-    private String getQuery(final AnyCond cond, final boolean not, final List<Object> parameters,\n-            final SearchSupport svs) {\n+    private String getQuery(\n+            final AnyCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n         AnyCond condClone = SerializationUtils.clone(cond);\n \n-        AnyUtils attrUtils = anyUtilsFactory.getInstance(svs.anyTypeKind());\n+        AnyUtils attrUtils = anyUtilsFactory.getInstance(svs.anyTypeKind);\n \n         // Keeps track of difference between entity's getKey() and JPA @Id fields\n         if (\"key\".equals(condClone.getSchema())) {"},{"sha":"0bcdee2292c491c80a0c846ffb2e98778ea1202a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=941dc06a30e14122bd4552de0c600d273a6592b5","patch":"@@ -290,8 +290,7 @@ public void refreshDynMemberships(final AnyObject anyObject) {\n             for (ADynGroupMembership memb : group.getADynMemberships()) {\n                 if (searchDAO.matches(\n                         anyObject,\n-                        buildDynMembershipCond(memb.getFIQLCond(), group.getRealm()),\n-                        AnyTypeKind.ANY_OBJECT)) {\n+                        buildDynMembershipCond(memb.getFIQLCond(), group.getRealm()))) {\n \n                     memb.add(anyObject);\n                 } else {\n@@ -308,8 +307,7 @@ public void refreshDynMemberships(final User user) {\n             if (group.getUDynMembership() != null) {\n                 if (searchDAO.matches(\n                         user,\n-                        buildDynMembershipCond(group.getUDynMembership().getFIQLCond(), group.getRealm()),\n-                        AnyTypeKind.USER)) {\n+                        buildDynMembershipCond(group.getUDynMembership().getFIQLCond(), group.getRealm()))) {\n \n                     group.getUDynMembership().add(user);\n                 } else {"},{"sha":"b636fc63f3707237de3ce1c2af0cd98d32684d3b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=941dc06a30e14122bd4552de0c600d273a6592b5","patch":"@@ -111,9 +111,7 @@ public void delete(final String key) {\n     public void refreshDynMemberships(final User user) {\n         for (Role role : findAll()) {\n             if (role.getDynMembership() != null) {\n-                if (searchDAO.matches(user,\n-                        SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), AnyTypeKind.USER)) {\n-\n+                if (searchDAO.matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()))) {\n                     role.getDynMembership().add(user);\n                 } else {\n                     role.getDynMembership().getMembers().remove(user);"},{"sha":"ec87f5b283a9c4d72e26a0a665a57d17214a5cda","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/OrderBySupport.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOrderBySupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOrderBySupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOrderBySupport.java?ref=941dc06a30e14122bd4552de0c600d273a6592b5","patch":"@@ -44,4 +44,6 @@ protected boolean isEmpty() {\n \n     protected List<Item> items = new ArrayList<>();\n \n+    protected boolean nonMandatorySchemas = false;\n+\n }"},{"sha":"9964d89fa47259479406f59b7b5a9b35112d6a93","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=941dc06a30e14122bd4552de0c600d273a6592b5","patch":"@@ -47,16 +47,14 @@ public int hashCode() {\n         }\n     }\n \n-    private final AnyTypeKind anyTypeKind;\n+    protected final AnyTypeKind anyTypeKind;\n+\n+    protected boolean nonMandatorySchemas = false;\n \n     SearchSupport(final AnyTypeKind anyTypeKind) {\n         this.anyTypeKind = anyTypeKind;\n     }\n \n-    public AnyTypeKind anyTypeKind() {\n-        return anyTypeKind;\n-    }\n-\n     public String fieldName(final AttrSchemaType attrSchemaType) {\n         String result;\n "},{"sha":"c7e5c62c3865df478552e95ae36b917eef28658d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":34,"deletions":8,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=941dc06a30e14122bd4552de0c600d273a6592b5","patch":"@@ -89,11 +89,11 @@ public void anyObjectMatch() {\n \n         RelationshipCond relationshipCond = new RelationshipCond();\n         relationshipCond.setAnyObject(\"Canon MF 8030cn\");\n-        assertTrue(searchDAO.matches(anyObject, SearchCond.getLeafCond(relationshipCond), AnyTypeKind.ANY_OBJECT));\n+        assertTrue(searchDAO.matches(anyObject, SearchCond.getLeafCond(relationshipCond)));\n \n         RelationshipTypeCond relationshipTypeCond = new RelationshipTypeCond();\n         relationshipTypeCond.setRelationshipTypeKey(\"neighborhood\");\n-        assertTrue(searchDAO.matches(anyObject, SearchCond.getLeafCond(relationshipTypeCond), AnyTypeKind.ANY_OBJECT));\n+        assertTrue(searchDAO.matches(anyObject, SearchCond.getLeafCond(relationshipTypeCond)));\n     }\n \n     @Test\n@@ -103,25 +103,25 @@ public void userMatch() {\n \n         MembershipCond groupCond = new MembershipCond();\n         groupCond.setGroup(\"secretary\");\n-        assertFalse(searchDAO.matches(user, SearchCond.getLeafCond(groupCond), AnyTypeKind.USER));\n+        assertFalse(searchDAO.matches(user, SearchCond.getLeafCond(groupCond)));\n \n         groupCond.setGroup(\"root\");\n-        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(groupCond), AnyTypeKind.USER));\n+        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(groupCond)));\n \n         RoleCond roleCond = new RoleCond();\n         roleCond.setRoleKey(\"Other\");\n-        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(roleCond), AnyTypeKind.USER));\n+        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(roleCond)));\n \n         user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n         assertNotNull(user);\n \n         RelationshipCond relationshipCond = new RelationshipCond();\n         relationshipCond.setAnyObject(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n-        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(relationshipCond), AnyTypeKind.USER));\n+        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(relationshipCond)));\n \n         RelationshipTypeCond relationshipTypeCond = new RelationshipTypeCond();\n         relationshipTypeCond.setRelationshipTypeKey(\"neighborhood\");\n-        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(relationshipTypeCond), AnyTypeKind.USER));\n+        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(relationshipTypeCond)));\n     }\n \n     @Test\n@@ -133,7 +133,7 @@ public void groupMatch() {\n         attrCond.setSchema(\"show\");\n         attrCond.setType(AttributeCond.Type.ISNOTNULL);\n \n-        assertTrue(searchDAO.matches(group, SearchCond.getLeafCond(attrCond), AnyTypeKind.GROUP));\n+        assertTrue(searchDAO.matches(group, SearchCond.getLeafCond(attrCond)));\n     }\n \n     @Test\n@@ -755,4 +755,30 @@ public void issueSYNCOPE980() {\n         matching = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n         assertEquals(1, matching.size());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE983() {\n+        AttributeCond fullnameLeafCond = new AttributeCond(AttributeCond.Type.LIKE);\n+        fullnameLeafCond.setSchema(\"surname\");\n+        fullnameLeafCond.setExpression(\"%o%\");\n+\n+        List<OrderByClause> orderByClauses = new ArrayList<>();\n+        OrderByClause orderByClause = new OrderByClause();\n+        orderByClause.setField(\"surname\");\n+        orderByClause.setDirection(OrderByClause.Direction.ASC);\n+        orderByClauses.add(orderByClause);\n+        orderByClause = new OrderByClause();\n+        orderByClause.setField(\"username\");\n+        orderByClause.setDirection(OrderByClause.Direction.DESC);\n+        orderByClauses.add(orderByClause);\n+\n+        List<User> users = searchDAO.search(\n+                SyncopeConstants.FULL_ADMIN_REALMS,\n+                SearchCond.getLeafCond(fullnameLeafCond),\n+                -1,\n+                -1,\n+                orderByClauses,\n+                AnyTypeKind.USER);\n+        assertFalse(users.isEmpty());\n+    }\n }"},{"sha":"6248185352295377f6b992eafba3797e103c948c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/941dc06a30e14122bd4552de0c600d273a6592b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=941dc06a30e14122bd4552de0c600d273a6592b5","patch":"@@ -212,8 +212,8 @@ private NotificationTask getNotificationTask(\n             try {\n                 NotificationRecipientsProvider recipientsProvider =\n                         (NotificationRecipientsProvider) ApplicationContextProvider.getBeanFactory().\n-                        createBean(Class.forName(notification.getRecipientsProviderClassName()),\n-                                AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                                createBean(Class.forName(notification.getRecipientsProviderClassName()),\n+                                        AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n                 recipientEmails.addAll(recipientsProvider.provideRecipients(notification));\n             } catch (Exception e) {\n                 LOG.error(\"Could not fetch recipients from {}\", notification.getRecipientsProviderClassName(), e);\n@@ -309,8 +309,7 @@ public List<NotificationTask> createTasks(\n                     LOG.debug(\"No events found about {}\", any);\n                 } else if (anyType == null || any == null\n                         || notification.getAbout(anyType) == null\n-                        || searchDAO.matches(any,\n-                                SearchCondConverter.convert(notification.getAbout(anyType).get()), anyType.getKind())) {\n+                        || searchDAO.matches(any, SearchCondConverter.convert(notification.getAbout(anyType).get()))) {\n \n                     LOG.debug(\"Creating notification task for event {} about {}\", currentEvent, any);\n "},{"sha":"ae2bf7b00a9d5c5f4bc1a3d51c9e24f269aef253","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/941dc06a30e14122bd4552de0c600d273a6592b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/941dc06a30e14122bd4552de0c600d273a6592b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=941dc06a30e14122bd4552de0c600d273a6592b5","patch":"@@ -168,7 +168,7 @@ public void deletingAccountPolicy() {\n     @Test\n     public void delete() {\n         RealmTO realm = new RealmTO();\n-        realm.setName(\"deletable\");\n+        realm.setName(\"deletable3\");\n \n         Response response = realmService.create(\"/even/two\", realm);\n         RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);"},{"sha":"976c11c30aa27919fbb7f22447bdfca111702afe","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/941dc06a30e14122bd4552de0c600d273a6592b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/941dc06a30e14122bd4552de0c600d273a6592b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=941dc06a30e14122bd4552de0c600d273a6592b5","patch":"@@ -20,6 +20,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n@@ -521,4 +522,14 @@ public void issueSYNCOPE980() {\n             anyTypeService.delete(service.getKey());\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE983() {\n+        PagedResult<UserTO> users = userService.search(\n+                new AnyQuery.Builder().\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"surname\").equalTo(\"*o*\").query()).\n+                        orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"surname\").desc(\"username\").build()).\n+                        build());\n+        assertNotEquals(0, users.getTotalCount());\n+    }\n }"}]}