{"sha":"0d19448b579617beec6d9a92b63d1878cd7cf439","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBkMTk0NDhiNTc5NjE3YmVlYzZkOWE5MmI2M2QxODc4Y2Q3Y2Y0Mzk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-10T15:04:55Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-10T15:04:55Z"},"message":"Thread-safe handling of DateFormat and DecimalFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246627 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b9273eac6f4051ed8cbbabaaf4f36ee7bb2e4ed","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5b9273eac6f4051ed8cbbabaaf4f36ee7bb2e4ed"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0d19448b579617beec6d9a92b63d1878cd7cf439","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0d19448b579617beec6d9a92b63d1878cd7cf439","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0d19448b579617beec6d9a92b63d1878cd7cf439","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0d19448b579617beec6d9a92b63d1878cd7cf439/comments","author":null,"committer":null,"parents":[{"sha":"89e4a84be33b5d79d6b4484d334664b42da30243","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/89e4a84be33b5d79d6b4484d334664b42da30243","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/89e4a84be33b5d79d6b4484d334664b42da30243"}],"stats":{"total":94,"additions":46,"deletions":48},"files":[{"sha":"ff994a7c556448039d40677ba65af1c1592f0f86","filename":"client/src/main/java/org/syncope/types/SchemaValueType.java","status":"modified","additions":3,"deletions":25,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0d19448b579617beec6d9a92b63d1878cd7cf439/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaValueType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0d19448b579617beec6d9a92b63d1878cd7cf439/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaValueType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaValueType.java?ref=0d19448b579617beec6d9a92b63d1878cd7cf439","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -14,49 +14,27 @@\n  */\n package org.syncope.types;\n \n-import java.text.DecimalFormat;\n-import java.text.Format;\n-import java.text.SimpleDateFormat;\n-\n public enum SchemaValueType {\n \n     String(\"java.lang.String\"),\n     Long(\"java.lang.Long\"),\n     Double(\"java.lang.Double\"),\n     Boolean(\"java.lang.Boolean\"),\n     Date(\"java.util.Date\");\n+\n     final private String className;\n-    private Format formatter;\n \n     SchemaValueType(String className) {\n         this.className = className;\n-        this.formatter = null;\n     }\n \n     public String getClassName() {\n         return className;\n     }\n \n-    public Format getBasicFormatter() {\n-        if (formatter == null) {\n-            switch (this) {\n-                case Date:\n-                    this.formatter = new SimpleDateFormat();\n-                    break;\n-                case Long:\n-                case Double:\n-                    this.formatter = new DecimalFormat();\n-                    break;\n-            }\n-        }\n-\n-        return formatter;\n-    }\n-\n     public boolean isConversionPatternNeeded() {\n         return this == SchemaValueType.Date\n                 || this == SchemaValueType.Double\n                 || this == SchemaValueType.Long;\n     }\n-\n }"},{"sha":"04adf0a0d283feee5815859aab9079e97c7d745c","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributeValue.java","status":"modified","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0d19448b579617beec6d9a92b63d1878cd7cf439/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0d19448b579617beec6d9a92b63d1878cd7cf439/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java?ref=0d19448b579617beec6d9a92b63d1878cd7cf439","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -14,8 +14,6 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.text.DecimalFormat;\n-import java.text.SimpleDateFormat;\n import java.util.Date;\n import javax.persistence.Basic;\n import javax.persistence.GeneratedValue;\n@@ -33,12 +31,17 @@ public abstract class AbstractAttributeValue extends AbstractBaseBean {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     protected Long id;\n+\n     private String stringValue;\n+\n     @Temporal(TemporalType.TIMESTAMP)\n     private Date dateValue;\n+\n     @Basic\n     private Character booleanValue;\n+\n     private Long longValue;\n+\n     private Double doubleValue;\n \n     public Long getId() {\n@@ -114,18 +117,18 @@ public String getValueAsString() {\n                 break;\n \n             case Long:\n-                result = getAttribute().getSchema().getFormatter(\n-                        DecimalFormat.class).format(getLongValue());\n+                result = getAttribute().getSchema().getFormatter().\n+                        format(getLongValue());\n                 break;\n \n             case Double:\n-                result = getAttribute().getSchema().getFormatter(\n-                        DecimalFormat.class).format(getDoubleValue());\n+                result = getAttribute().getSchema().getFormatter().\n+                        format(getDoubleValue());\n                 break;\n \n             case Date:\n-                result = getAttribute().getSchema().getFormatter(\n-                        SimpleDateFormat.class).format(getDateValue());\n+                result = getAttribute().getSchema().getFormatter().\n+                        format(getDateValue());\n \n             default:\n         }"},{"sha":"038332335aa3f0671379d4311b9aeb985eb23a79","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0d19448b579617beec6d9a92b63d1878cd7cf439/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0d19448b579617beec6d9a92b63d1878cd7cf439/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=0d19448b579617beec6d9a92b63d1878cd7cf439","patch":"@@ -34,6 +34,24 @@\n @MappedSuperclass\n public abstract class AbstractSchema extends AbstractBaseBean {\n \n+    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT =\n+            new ThreadLocal<SimpleDateFormat>() {\n+\n+                @Override\n+                protected SimpleDateFormat initialValue() {\n+                    return new SimpleDateFormat();\n+                }\n+            };\n+\n+    private static final ThreadLocal<DecimalFormat> DECIMAL_FORMAT =\n+            new ThreadLocal<DecimalFormat>() {\n+\n+                @Override\n+                protected DecimalFormat initialValue() {\n+                    return new DecimalFormat();\n+                }\n+            };\n+\n     @Id\n     private String name;\n \n@@ -189,29 +207,26 @@ public void setConversionPattern(String conversionPattern) {\n         this.conversionPattern = conversionPattern;\n     }\n \n-    public <T extends Format> T getFormatter(final Class<T> reference) {\n+    public <T extends Format> T getFormatter() {\n         T result = null;\n \n         switch (getType()) {\n             case Long:\n-                DecimalFormat longFormatter =\n-                        ((DecimalFormat) getType().getBasicFormatter());\n+                DecimalFormat longFormatter = DECIMAL_FORMAT.get();\n                 longFormatter.applyPattern(getConversionPattern());\n \n                 result = (T) longFormatter;\n                 break;\n \n             case Double:\n-                DecimalFormat doubleFormatter =\n-                        ((DecimalFormat) getType().getBasicFormatter());\n+                DecimalFormat doubleFormatter = DECIMAL_FORMAT.get();\n                 doubleFormatter.applyPattern(getConversionPattern());\n \n                 result = (T) doubleFormatter;\n                 break;\n \n             case Date:\n-                SimpleDateFormat dateFormatter =\n-                        (SimpleDateFormat) getType().getBasicFormatter();\n+                SimpleDateFormat dateFormatter = DATE_FORMAT.get();\n                 dateFormatter.applyPattern(getConversionPattern());\n                 dateFormatter.setLenient(false);\n "},{"sha":"7f4b3d49582045189559ea75311a231b0c1b6088","filename":"core/src/main/java/org/syncope/core/persistence/validation/AbstractAttributeValidator.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0d19448b579617beec6d9a92b63d1878cd7cf439/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAbstractAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0d19448b579617beec6d9a92b63d1878cd7cf439/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAbstractAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAbstractAttributeValidator.java?ref=0d19448b579617beec6d9a92b63d1878cd7cf439","patch":"@@ -29,7 +29,7 @@ public AbstractAttributeValidator(final AbstractSchema schema) {\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> T getValue(String value,\n+    public <T extends AbstractAttributeValue> T getValue(final String value,\n             T attributeValue)\n             throws ParseException, ValidationFailedException {\n \n@@ -39,9 +39,10 @@ public <T extends AbstractAttributeValue> T getValue(String value,\n         return attributeValue;\n     }\n \n-    private <T extends AbstractAttributeValue> T parseValue(String value,\n+    private <T extends AbstractAttributeValue> T parseValue(final String value,\n             T attributeValue)\n             throws ParseException {\n+\n         Exception exception = null;\n \n         switch (schema.getType()) {\n@@ -57,7 +58,7 @@ private <T extends AbstractAttributeValue> T parseValue(String value,\n             case Long:\n                 try {\n                     attributeValue.setLongValue(Long.valueOf(\n-                            schema.getFormatter(DecimalFormat.class).parse(\n+                            ((DecimalFormat) schema.getFormatter()).parse(\n                             value).longValue()));\n                 } catch (java.text.ParseException pe) {\n                     exception = pe;\n@@ -67,7 +68,7 @@ private <T extends AbstractAttributeValue> T parseValue(String value,\n             case Double:\n                 try {\n                     attributeValue.setDoubleValue(Double.valueOf(\n-                            schema.getFormatter(DecimalFormat.class).parse(\n+                            ((DecimalFormat) schema.getFormatter()).parse(\n                             value).doubleValue()));\n                 } catch (java.text.ParseException pe) {\n                     exception = pe;\n@@ -76,8 +77,9 @@ private <T extends AbstractAttributeValue> T parseValue(String value,\n \n             case Date:\n                 try {\n-                    attributeValue.setDateValue(new Date(schema.getFormatter(\n-                            SimpleDateFormat.class).parse(value).getTime()));\n+                    attributeValue.setDateValue(new Date(\n+                            ((SimpleDateFormat) schema.getFormatter()).parse(\n+                            value).getTime()));\n                 } catch (java.text.ParseException pe) {\n                     exception = pe;\n                 }"}]}