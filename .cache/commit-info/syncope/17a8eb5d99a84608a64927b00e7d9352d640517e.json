{"sha":"17a8eb5d99a84608a64927b00e7d9352d640517e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE3YThlYjVkOTlhODQ2MDhhNjQ5MjdiMDBlN2Q5MzUyZDY0MDUxN2U=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-02T08:54:36Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-02T08:54:36Z"},"message":"[SYNCOPE-1216] Spring 5 in: had to backport OpenJpaVendorAdapter from Spring 4.3.x due to SPR-16035","tree":{"sha":"16f8c9dfff16c663e5d4ff0b43bd38ba6a2e8a7e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/16f8c9dfff16c663e5d4ff0b43bd38ba6a2e8a7e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/17a8eb5d99a84608a64927b00e7d9352d640517e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/17a8eb5d99a84608a64927b00e7d9352d640517e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/17a8eb5d99a84608a64927b00e7d9352d640517e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/17a8eb5d99a84608a64927b00e7d9352d640517e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"428857e0fda5abedad7cf3ed941f4306b804a39f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/428857e0fda5abedad7cf3ed941f4306b804a39f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/428857e0fda5abedad7cf3ed941f4306b804a39f"}],"stats":{"total":304,"additions":297,"deletions":7},"files":[{"sha":"aec657c314ad6e6a8c733b3959559c0c54fc1c85","filename":"core/persistence-jpa/src/main/java/org/springframework/orm/jpa/vendor/OpenJpaDialect.java","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/17a8eb5d99a84608a64927b00e7d9352d640517e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaDialect.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/17a8eb5d99a84608a64927b00e7d9352d640517e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaDialect.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaDialect.java?ref=17a8eb5d99a84608a64927b00e7d9352d640517e","patch":"@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2002-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.orm.jpa.vendor;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceException;\n+\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.jdbc.IsolationLevel;\n+import org.apache.openjpa.persistence.jdbc.JDBCFetchPlan;\n+\n+import org.springframework.jdbc.datasource.ConnectionHandle;\n+import org.springframework.jdbc.datasource.ConnectionHolder;\n+import org.springframework.jdbc.support.JdbcUtils;\n+import org.springframework.orm.jpa.DefaultJpaDialect;\n+import org.springframework.transaction.SavepointManager;\n+import org.springframework.transaction.TransactionDefinition;\n+import org.springframework.transaction.TransactionException;\n+\n+/**\n+ * {@link org.springframework.orm.jpa.JpaDialect} implementation for Apache OpenJPA.\n+ * Developed and tested against OpenJPA 2.2.\n+ *\n+ * @author Juergen Hoeller\n+ * @author Costin Leau\n+ * @since 2.0\n+ */\n+public class OpenJpaDialect extends DefaultJpaDialect {\n+\n+    private static final long serialVersionUID = 2099118508988476959L;\n+\n+    @Override\n+    public Object beginTransaction(final EntityManager entityManager, final TransactionDefinition definition)\n+            throws PersistenceException, SQLException, TransactionException {\n+\n+        OpenJPAEntityManager openJpaEntityManager = getOpenJPAEntityManager(entityManager);\n+\n+        if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {\n+            // Pass custom isolation level on to OpenJPA's JDBCFetchPlan configuration\n+            FetchPlan fetchPlan = openJpaEntityManager.getFetchPlan();\n+            if (fetchPlan instanceof JDBCFetchPlan) {\n+                IsolationLevel isolation = IsolationLevel.fromConnectionConstant(definition.getIsolationLevel());\n+                ((JDBCFetchPlan) fetchPlan).setIsolation(isolation);\n+            }\n+        }\n+\n+        entityManager.getTransaction().begin();\n+\n+        if (!definition.isReadOnly()) {\n+            // Like with EclipseLink, make sure to start the logic transaction early so that other\n+            // participants using the connection (such as JdbcTemplate) run in a transaction.\n+            openJpaEntityManager.beginStore();\n+        }\n+\n+        // Custom implementation for OpenJPA savepoint handling\n+        return new OpenJpaTransactionData(openJpaEntityManager);\n+    }\n+\n+    @Override\n+    public ConnectionHandle getJdbcConnection(final EntityManager entityManager, final boolean readOnly)\n+            throws PersistenceException, SQLException {\n+\n+        return new OpenJpaConnectionHandle(getOpenJPAEntityManager(entityManager));\n+    }\n+\n+    /**\n+     * Return the OpenJPA-specific variant of {@code EntityManager}.\n+     *\n+     * @param em the generic {@code EntityManager} instance\n+     * @return the OpenJPA-specific variant of {@code EntityManager}\n+     */\n+    protected OpenJPAEntityManager getOpenJPAEntityManager(final EntityManager em) {\n+        return OpenJPAPersistence.cast(em);\n+    }\n+\n+    /**\n+     * Transaction data Object exposed from {@code beginTransaction},\n+     * implementing the {@link SavepointManager} interface.\n+     */\n+    private static class OpenJpaTransactionData implements SavepointManager {\n+\n+        private final OpenJPAEntityManager entityManager;\n+\n+        private int savepointCounter = 0;\n+\n+        OpenJpaTransactionData(final OpenJPAEntityManager entityManager) {\n+            this.entityManager = entityManager;\n+        }\n+\n+        @Override\n+        public Object createSavepoint() throws TransactionException {\n+            this.savepointCounter++;\n+            String savepointName = ConnectionHolder.SAVEPOINT_NAME_PREFIX + this.savepointCounter;\n+            this.entityManager.setSavepoint(savepointName);\n+            return savepointName;\n+        }\n+\n+        @Override\n+        public void rollbackToSavepoint(final Object savepoint) throws TransactionException {\n+            this.entityManager.rollbackToSavepoint((String) savepoint);\n+        }\n+\n+        @Override\n+        public void releaseSavepoint(final Object savepoint) throws TransactionException {\n+            try {\n+                this.entityManager.releaseSavepoint((String) savepoint);\n+            } catch (Throwable ex) {\n+                LogFactory.getLog(OpenJpaTransactionData.class).debug(\n+                        \"Could not explicitly release OpenJPA savepoint\", ex);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * {@link ConnectionHandle} implementation that fetches a new OpenJPA-provided\n+     * Connection for every {@code getConnection} call and closes the Connection on\n+     * {@code releaseConnection}. This is necessary because OpenJPA requires the\n+     * fetched Connection to be closed before continuing EntityManager work.\n+     *\n+     * @see org.apache.openjpa.persistence.OpenJPAEntityManager#getConnection()\n+     */\n+    private static class OpenJpaConnectionHandle implements ConnectionHandle {\n+\n+        private final OpenJPAEntityManager entityManager;\n+\n+        OpenJpaConnectionHandle(final OpenJPAEntityManager entityManager) {\n+            this.entityManager = entityManager;\n+        }\n+\n+        @Override\n+        public Connection getConnection() {\n+            return (Connection) this.entityManager.getConnection();\n+        }\n+\n+        @Override\n+        public void releaseConnection(final Connection con) {\n+            JdbcUtils.closeConnection(con);\n+        }\n+    }\n+\n+}"},{"sha":"a8016377517186afee6eaeed2ac28c2b1a39c31c","filename":"core/persistence-jpa/src/main/java/org/springframework/orm/jpa/vendor/OpenJpaVendorAdapter.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/17a8eb5d99a84608a64927b00e7d9352d640517e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaVendorAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/17a8eb5d99a84608a64927b00e7d9352d640517e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaVendorAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaVendorAdapter.java?ref=17a8eb5d99a84608a64927b00e7d9352d640517e","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2002-2014 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.orm.jpa.vendor;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.spi.PersistenceProvider;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.PersistenceProviderImpl;\n+\n+/**\n+ * {@link org.springframework.orm.jpa.JpaVendorAdapter} implementation for Apache OpenJPA.\n+ * Developed and tested against OpenJPA 3.0.\n+ *\n+ * Exposes OpenJPA's persistence provider and EntityManager extension interface,\n+ * and adapts {@link AbstractJpaVendorAdapter}'s common configuration settings.\n+ * No support for the detection of annotated packages (through\n+ * {@link org.springframework.orm.jpa.persistenceunit.SmartPersistenceUnitInfo#getManagedPackages()})\n+ * since OpenJPA doesn't use package-level metadata.\n+ *\n+ * @author Juergen Hoeller\n+ * @author Costin Leau\n+ * @since 2.0\n+ * @see OpenJpaDialect\n+ * @see org.apache.openjpa.persistence.PersistenceProviderImpl\n+ * @see org.apache.openjpa.persistence.OpenJPAEntityManager\n+ */\n+public class OpenJpaVendorAdapter extends AbstractJpaVendorAdapter {\n+\n+    private final PersistenceProvider persistenceProvider = new PersistenceProviderImpl();\n+\n+    private final OpenJpaDialect jpaDialect = new OpenJpaDialect();\n+\n+    @Override\n+    public PersistenceProvider getPersistenceProvider() {\n+        return this.persistenceProvider;\n+    }\n+\n+    @Override\n+    public String getPersistenceProviderRootPackage() {\n+        return \"org.apache.openjpa\";\n+    }\n+\n+    @Override\n+    public Map<String, Object> getJpaPropertyMap() {\n+        Map<String, Object> jpaProperties = new HashMap<>();\n+\n+        if (getDatabasePlatform() != null) {\n+            jpaProperties.put(\"openjpa.jdbc.DBDictionary\", getDatabasePlatform());\n+        } else if (getDatabase() != null) {\n+            String databaseDictonary = determineDatabaseDictionary(getDatabase());\n+            if (databaseDictonary != null) {\n+                jpaProperties.put(\"openjpa.jdbc.DBDictionary\", databaseDictonary);\n+            }\n+        }\n+\n+        if (isGenerateDdl()) {\n+            jpaProperties.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true)\");\n+        }\n+        if (isShowSql()) {\n+            // Taken from the OpenJPA 0.9.6 docs (\"Standard OpenJPA Log Configuration + All SQL Statements\")\n+            jpaProperties.put(\"openjpa.Log\", \"DefaultLevel=WARN, Runtime=INFO, Tool=INFO, SQL=TRACE\");\n+        }\n+\n+        return jpaProperties;\n+    }\n+\n+    /**\n+     * Determine the OpenJPA database dictionary name for the given database.\n+     *\n+     * @param database the specified database\n+     * @return the OpenJPA database dictionary name, or {@code null} if none found\n+     */\n+    protected String determineDatabaseDictionary(final Database database) {\n+        switch (database) {\n+            case DB2:\n+                return \"db2\";\n+            case DERBY:\n+                return \"derby\";\n+            case HSQL:\n+                return \"hsql(SimulateLocking=true)\";\n+            case INFORMIX:\n+                return \"informix\";\n+            case MYSQL:\n+                return \"mysql\";\n+            case ORACLE:\n+                return \"oracle\";\n+            case POSTGRESQL:\n+                return \"postgres\";\n+            case SQL_SERVER:\n+                return \"sqlserver\";\n+            case SYBASE:\n+                return \"sybase\";\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    @Override\n+    public OpenJpaDialect getJpaDialect() {\n+        return this.jpaDialect;\n+    }\n+\n+    @Override\n+    public Class<? extends EntityManagerFactory> getEntityManagerFactoryInterface() {\n+        return OpenJPAEntityManagerFactorySPI.class;\n+    }\n+\n+    @Override\n+    public Class<? extends EntityManager> getEntityManagerInterface() {\n+        return OpenJPAEntityManagerSPI.class;\n+    }\n+\n+}"},{"sha":"d1e36bd9377db9b5cd3f6be63b587e508234088b","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateComponent.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/17a8eb5d99a84608a64927b00e7d9352d640517e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/17a8eb5d99a84608a64927b00e7d9352d640517e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java?ref=17a8eb5d99a84608a64927b00e7d9352d640517e","patch":"@@ -21,7 +21,7 @@\n import java.util.Map;\n \n import org.apache.camel.Endpoint;\n-import org.apache.camel.impl.UriEndpointComponent;\n+import org.apache.camel.impl.DefaultComponent;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -31,7 +31,7 @@\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public class PropagateComponent extends UriEndpointComponent {\n+public class PropagateComponent extends DefaultComponent {\n \n     @Autowired\n     protected PropagationManager propagationManager;\n@@ -54,10 +54,6 @@ public class PropagateComponent extends UriEndpointComponent {\n     @Autowired\n     protected UserWorkflowAdapter uwfAdapter;\n \n-    public PropagateComponent() {\n-        super(PropagateEndpoint.class);\n-    }\n-\n     @Override\n     protected Endpoint createEndpoint(final String uri, final String remaining,\n             final Map<String, Object> parameters) throws Exception {"},{"sha":"f6aa1c5307674f36299fb90c7f2c33cc4d3a22c2","filename":"fit/build-tools/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/17a8eb5d99a84608a64927b00e7d9352d640517e/fit%2Fbuild-tools%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/17a8eb5d99a84608a64927b00e7d9352d640517e/fit%2Fbuild-tools%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fpom.xml?ref=17a8eb5d99a84608a64927b00e7d9352d640517e","patch":"@@ -99,6 +99,10 @@ under the License.\n       <artifactId>spring-core</artifactId>\n       <version>${spring.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-context</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-jdbc</artifactId>"},{"sha":"2c3e4507dd014032876a2c1fabdad04858f278b2","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/17a8eb5d99a84608a64927b00e7d9352d640517e/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/17a8eb5d99a84608a64927b00e7d9352d640517e/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=17a8eb5d99a84608a64927b00e7d9352d640517e","patch":"@@ -369,7 +369,7 @@ under the License.\n \n     <jackson.version>2.9.1</jackson.version>\n \n-    <spring.version>4.3.11.RELEASE</spring.version>\n+    <spring.version>5.0.0.RELEASE</spring.version>\n     <spring-security.version>4.2.3.RELEASE</spring-security.version>\n \n     <openjpa.version>3.0.0-SNAPSHOT</openjpa.version>"}]}