{"sha":"0b4c4c8912daff5c22502467b2d743d525e3fa5a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBiNGM0Yzg5MTJkYWZmNWMyMjUwMjQ2N2IyZDc0M2Q1MjVlM2ZhNWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-03-23T09:59:56Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-03-23T09:59:56Z"},"message":"[SYNCOPE-701] Various improvements","tree":{"sha":"76c423de2556da4a09b956ff7d9a7def5c18e3b6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/76c423de2556da4a09b956ff7d9a7def5c18e3b6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0b4c4c8912daff5c22502467b2d743d525e3fa5a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0b4c4c8912daff5c22502467b2d743d525e3fa5a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0b4c4c8912daff5c22502467b2d743d525e3fa5a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0b4c4c8912daff5c22502467b2d743d525e3fa5a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"85288b1e7ec83b666657cfeb8c62ab728a7e7e2c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/85288b1e7ec83b666657cfeb8c62ab728a7e7e2c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/85288b1e7ec83b666657cfeb8c62ab728a7e7e2c"}],"stats":{"total":132,"additions":59,"deletions":73},"files":[{"sha":"a3648417b3cf4589b750a08a93899edfed72c8f5","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/AbstractBaseResource.java","status":"modified","additions":13,"deletions":19,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b4c4c8912daff5c22502467b2d743d525e3fa5a/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAbstractBaseResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b4c4c8912daff5c22502467b2d743d525e3fa5a/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAbstractBaseResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAbstractBaseResource.java?ref=0b4c4c8912daff5c22502467b2d743d525e3fa5a","patch":"@@ -52,26 +52,20 @@ protected final boolean isSelfRegistrationAllowed() {\n \n     protected final boolean xsrfCheck(final HttpServletRequest request) {\n         final String requestXSRFHeader = request.getHeader(SyncopeEnduserConstants.XSRF_HEADER_NAME);\n-        if (SyncopeEnduserApplication.get().isXsrfEnabled()) {\n-            return StringUtils.isNotBlank(requestXSRFHeader)\n-                    && SyncopeEnduserSession.get().getCookieUtils().getCookie(SyncopeEnduserConstants.XSRF_COOKIE).\n-                    getValue().equals(requestXSRFHeader);\n-        } else {\n-            //if xsfr is disabled, we return always true\n-            return true;\n-        }\n+\n+        return SyncopeEnduserApplication.get().isXsrfEnabled()\n+                ? StringUtils.isNotBlank(requestXSRFHeader)\n+                && SyncopeEnduserSession.get().getCookieUtils().\n+                getCookie(SyncopeEnduserConstants.XSRF_COOKIE).getValue().equals(requestXSRFHeader)\n+                : true;\n     }\n \n-    protected final boolean captchaCheck(final String enteredCaptcha, final String currentCaptcha) {\n-        if (SyncopeEnduserApplication.get().isCaptchaEnabled()) {\n-            if (StringUtils.isBlank(currentCaptcha) || enteredCaptcha == null) {\n-                return false;\n-            } else {\n-                return enteredCaptcha.equals(currentCaptcha);\n-            }\n-        } else {\n-            //if captcha is disabled, we return always true\n-            return true;\n-        }\n+    protected final boolean captchaCheck(final String enteredCaptcha, final Object currentCaptcha) {\n+        String toCheck = currentCaptcha.toString();\n+        return SyncopeEnduserApplication.get().isCaptchaEnabled()\n+                ? StringUtils.isBlank(toCheck) || enteredCaptcha == null\n+                ? false\n+                : enteredCaptcha.equals(toCheck)\n+                : true;\n     }\n }"},{"sha":"528bc46ea07bcbeeebe5e34e55a3b46f065d9092","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/CaptchaResource.java","status":"modified","additions":6,"deletions":17,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b4c4c8912daff5c22502467b2d743d525e3fa5a/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b4c4c8912daff5c22502467b2d743d525e3fa5a/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaResource.java?ref=0b4c4c8912daff5c22502467b2d743d525e3fa5a","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.enduser.resources;\n \n import javax.servlet.http.HttpServletRequest;\n+import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.wicket.extensions.markup.html.captcha.CaptchaImageResource;\n import org.apache.wicket.request.cycle.RequestCycle;\n@@ -31,26 +32,14 @@ public class CaptchaResource extends CaptchaImageResource {\n \n     private static final Logger LOG = LoggerFactory.getLogger(CaptchaResource.class);\n \n-    public static int randomInt(final int min, final int max) {\n-        return (int) (Math.random() * (max - min) + min);\n-    }\n-\n-    public static String randomString(final int min, final int max) {\n-        int num = randomInt(min, max);\n-        byte[] b = new byte[num];\n-        for (int i = 0; i < num; i++) {\n-            b[i] = (byte) randomInt('a', 'z');\n-        }\n-        return new String(b);\n-    }\n-\n     @Override\n     protected byte[] render() {\n-        LOG.info(\"Generate captcha\");\n-        final String captcha = randomString(6, 8);\n-        HttpServletRequest httpRequest = ((HttpServletRequest) RequestCycle.get().getRequest().getContainerRequest());\n+        LOG.debug(\"Generate captcha\");\n+\n+        String captcha = RandomStringUtils.randomAlphabetic(6);\n+        HttpServletRequest request = ((HttpServletRequest) RequestCycle.get().getRequest().getContainerRequest());\n         // store the captcha in the current session\n-        httpRequest.getSession().setAttribute(SyncopeEnduserConstants.CAPTCHA_SESSION_KEY, captcha);\n+        request.getSession().setAttribute(SyncopeEnduserConstants.CAPTCHA_SESSION_KEY, captcha);\n \n         getChallengeIdModel().setObject(captcha);\n         return super.render();"},{"sha":"34538841f830f55687fe9a91bdb648020d40d45e","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b4c4c8912daff5c22502467b2d743d525e3fa5a/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b4c4c8912daff5c22502467b2d743d525e3fa5a/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java?ref=0b4c4c8912daff5c22502467b2d743d525e3fa5a","patch":"@@ -42,7 +42,6 @@ public UserSelfCreateResource() {\n \n     @Override\n     protected ResourceResponse newResourceResponse(final Attributes attributes) {\n-\n         final StringBuilder responseMessage = new StringBuilder();\n         ResourceResponse response = new ResourceResponse();\n \n@@ -59,10 +58,11 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n \n             final UserTO userTO = MAPPER.readValue(jsonString, UserTO.class);\n \n-            if (!captchaCheck(request.getHeader(\"captcha\"), request.getSession().getAttribute(\n-                    SyncopeEnduserConstants.CAPTCHA_SESSION_KEY).toString())) {\n-                LOG.error(\"Entered captcha is not matching\");\n-                throw new Exception(\"Entered captcha is not matching\");\n+            if (!captchaCheck(\n+                    request.getHeader(\"captcha\"),\n+                    request.getSession().getAttribute(SyncopeEnduserConstants.CAPTCHA_SESSION_KEY))) {\n+\n+                throw new IllegalArgumentException(\"Entered captcha is not matching\");\n             }\n \n             if (isSelfRegistrationAllowed() && userTO != null) {\n@@ -93,11 +93,12 @@ public void writeData(final Attributes attributes) throws IOException {\n \n         } catch (Exception e) {\n             LOG.error(\"Could not create userTO\", e);\n-            response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()\n-                    .append(\"ErrorMessage{{ \")\n-                    .append(e.getMessage())\n-                    .append(\" }}\")\n-                    .toString());\n+            response.setError(Response.Status.BAD_REQUEST.getStatusCode(),\n+                    new StringBuilder().\n+                    append(\"ErrorMessage{{ \").\n+                    append(e.getMessage()).\n+                    append(\" }}\").\n+                    toString());\n         }\n         return response;\n     }"},{"sha":"84e1bbac7db9ef3e64a49cb0306cddce0efcce2c","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfPasswordReset.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b4c4c8912daff5c22502467b2d743d525e3fa5a/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfPasswordReset.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b4c4c8912daff5c22502467b2d743d525e3fa5a/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfPasswordReset.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfPasswordReset.java?ref=0b4c4c8912daff5c22502467b2d743d525e3fa5a","patch":"@@ -44,7 +44,6 @@ public UserSelfPasswordReset() {\n \n     @Override\n     protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n-\n         AbstractResource.ResourceResponse response = new AbstractResource.ResourceResponse();\n \n         try {\n@@ -63,19 +62,19 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                 username = parameters.get(\"username\")[0];\n             }\n \n-            if (request.getHeader(\"captcha\") == null || !captchaCheck(request.getHeader(\"captcha\"), request.\n-                    getSession().getAttribute(SyncopeEnduserConstants.CAPTCHA_SESSION_KEY).\n-                    toString())) {\n-                LOG.error(\"Entered captcha is not matching\");\n-                throw new Exception(\"Entered captcha is not matching\");\n+            if (request.getHeader(\"captcha\") == null\n+                    || !captchaCheck(\n+                            request.getHeader(\"captcha\"),\n+                            request.getSession().getAttribute(SyncopeEnduserConstants.CAPTCHA_SESSION_KEY))) {\n+\n+                throw new IllegalArgumentException(\"Entered captcha is not matching\");\n             }\n \n             if (SyncopeEnduserSession.get().getPlatformInfo().isPwdResetRequiringSecurityQuestions()) {\n                 if (parameters.get(\"securityanswer\") == null || parameters.get(\"securityanswer\").length == 0) {\n                     throw new Exception(\"A correct security answer should be provided\");\n                 }\n-                userSelfService.requestPasswordReset(username,\n-                        parameters.get(\"securityanswer\")[0]);\n+                userSelfService.requestPasswordReset(username, parameters.get(\"securityanswer\")[0]);\n             } else {\n                 userSelfService.requestPasswordReset(username, null);\n             }\n@@ -94,11 +93,12 @@ public void writeData(final Attributes attributes) throws IOException {\n \n         } catch (final Exception e) {\n             LOG.error(\"Error while updating user\", e);\n-            response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()\n-                    .append(\"ErrorMessage{{ \")\n-                    .append(e.getMessage())\n-                    .append(\" }}\")\n-                    .toString());\n+            response.setError(Response.Status.BAD_REQUEST.getStatusCode(),\n+                    new StringBuilder().\n+                    append(\"ErrorMessage{{ \").\n+                    append(e.getMessage()).\n+                    append(\" }}\").\n+                    toString());\n         }\n         return response;\n     }"},{"sha":"04c89afd8e01b62f4f9cabb5e4400f38fb3152e3","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":16,"deletions":14,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b4c4c8912daff5c22502467b2d743d525e3fa5a/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b4c4c8912daff5c22502467b2d743d525e3fa5a/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=0b4c4c8912daff5c22502467b2d743d525e3fa5a","patch":"@@ -58,22 +58,23 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n \n             final UserTO userTO = MAPPER.readValue(jsonString, UserTO.class);\n \n-            if (!captchaCheck(request.getHeader(\"captcha\"), request.getSession().getAttribute(\n-                    SyncopeEnduserConstants.CAPTCHA_SESSION_KEY).toString())) {\n-                LOG.error(\"Entered captcha is not matching\");\n-                throw new Exception(\"Entered captcha is not matching\");\n+            if (!captchaCheck(\n+                    request.getHeader(\"captcha\"),\n+                    request.getSession().getAttribute(SyncopeEnduserConstants.CAPTCHA_SESSION_KEY))) {\n+\n+                throw new IllegalArgumentException(\"Entered captcha is not matching\");\n             }\n \n-            LOG.debug(\"User {} id updating himself\", userTO.getUsername());\n+            LOG.debug(\"User {} id self-updating\", userTO.getUsername());\n \n             // update user\n             Response res = userSelfService.update(userTO);\n \n             final String responseMessage = res.getStatusInfo().getFamily().equals(Response.Status.Family.SUCCESSFUL)\n-                    ? new StringBuilder().append(\"User\").append(userTO.getUsername()).append(\n-                    \" successfully updated\").toString()\n-                    : new StringBuilder().append(\"ErrorMessage{{ \").\n-                    append(res.getStatusInfo().getReasonPhrase()).append(\" }}\").toString();\n+                    ? new StringBuilder().\n+                    append(\"User\").append(userTO.getUsername()).append(\" successfully updated\").toString()\n+                    : new StringBuilder().\n+                    append(\"ErrorMessage{{ \").append(res.getStatusInfo().getReasonPhrase()).append(\" }}\").toString();\n \n             response.setWriteCallback(new WriteCallback() {\n \n@@ -87,11 +88,12 @@ public void writeData(final Attributes attributes) throws IOException {\n \n         } catch (final Exception e) {\n             LOG.error(\"Error while updating user\", e);\n-            response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()\n-                    .append(\"ErrorMessage{{ \")\n-                    .append(e.getMessage())\n-                    .append(\" }}\")\n-                    .toString());\n+            response.setError(Response.Status.BAD_REQUEST.getStatusCode(),\n+                    new StringBuilder().\n+                    append(\"ErrorMessage{{ \").\n+                    append(e.getMessage()).\n+                    append(\" }}\").\n+                    toString());\n         }\n         return response;\n     }"}]}