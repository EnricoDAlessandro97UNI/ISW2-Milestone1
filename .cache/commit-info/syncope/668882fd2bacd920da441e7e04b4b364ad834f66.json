{"sha":"668882fd2bacd920da441e7e04b4b364ad834f66","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY2ODg4MmZkMmJhY2Q5MjBkYTQ0MWU3ZTA0YjRiMzY0YWQ4MzRmNjY=","commit":{"author":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-15T09:35:05Z"},"committer":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-15T09:35:05Z"},"message":"Cosmetic changes to improve error diagnostic\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1433324 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dd2403ada1cc04313667d159e58ca080a02624b0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/dd2403ada1cc04313667d159e58ca080a02624b0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/668882fd2bacd920da441e7e04b4b364ad834f66","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/668882fd2bacd920da441e7e04b4b364ad834f66","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/668882fd2bacd920da441e7e04b4b364ad834f66","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/668882fd2bacd920da441e7e04b4b364ad834f66/comments","author":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"committer":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"parents":[{"sha":"96771b83b49cff8aa174d26ac25862e5614daf7c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/96771b83b49cff8aa174d26ac25862e5614daf7c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/96771b83b49cff8aa174d26ac25862e5614daf7c"}],"stats":{"total":86,"additions":44,"deletions":42},"files":[{"sha":"19e9bce6e9ab633e44afb5b357b5377a77cafcf9","filename":"client/src/main/java/org/apache/syncope/services/proxy/PolicyServiceProxy.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/668882fd2bacd920da441e7e04b4b364ad834f66/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/668882fd2bacd920da441e7e04b4b364ad834f66/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java?ref=668882fd2bacd920da441e7e04b4b364ad834f66","patch":"@@ -48,22 +48,6 @@ public <T extends PolicyTO> T delete(PolicyType type, Long policyId) {\n         return result;\r\n     }\r\n \r\n-    private Class<? extends PolicyTO> getTOClass(PolicyType type) {\r\n-        switch (type) {\r\n-        case ACCOUNT:\r\n-        case GLOBAL_ACCOUNT:\r\n-            return AccountPolicyTO.class;\r\n-        case PASSWORD:\r\n-        case GLOBAL_PASSWORD:\r\n-            return PasswordPolicyTO.class;\r\n-        case SYNC:\r\n-        case GLOBAL_SYNC:\r\n-            return SyncPolicyTO.class;\r\n-        default:\r\n-            throw new IllegalArgumentException(\"Policy Type not supported\");\r\n-        }\r\n-    }\r\n-\r\n     @Override\r\n     public <T extends PolicyTO> List<T> listByType(PolicyType type) {\r\n         @SuppressWarnings(\"unchecked\")\r\n@@ -103,4 +87,21 @@ public <T extends PolicyTO> T update(PolicyType type, Long policyId, T policyTO)\n                 typeToUrl(policyTO.getType()));\r\n         return result;\r\n     }\r\n+\r\n+    private Class<? extends PolicyTO> getTOClass(PolicyType type) {\r\n+        switch (type) {\r\n+        case ACCOUNT:\r\n+        case GLOBAL_ACCOUNT:\r\n+            return AccountPolicyTO.class;\r\n+        case PASSWORD:\r\n+        case GLOBAL_PASSWORD:\r\n+            return PasswordPolicyTO.class;\r\n+        case SYNC:\r\n+        case GLOBAL_SYNC:\r\n+            return SyncPolicyTO.class;\r\n+        default:\r\n+            throw new IllegalArgumentException(\"Policy Type not supported: \" + type);\r\n+        }\r\n+    }\r\n+\r\n }\r"},{"sha":"90d9ea3bb7561c6c54f63cc0967666c9c7702330","filename":"client/src/main/java/org/apache/syncope/services/proxy/SchemaServiceProxy.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/668882fd2bacd920da441e7e04b4b364ad834f66/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/668882fd2bacd920da441e7e04b4b364ad834f66/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=668882fd2bacd920da441e7e04b4b364ad834f66","patch":"@@ -63,6 +63,17 @@ public <T extends AbstractSchemaTO> List<T> list(AttributableType kind, SchemaTy\n         }\r\n     }\r\n \r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> T read(AttributableType kind, SchemaType type, String schemaName) {\r\n+        return (T) getRestTemplate().getForObject(baseUrl + type + \"/{kind}/read/{name}.json\", getTOClass(type), kind,\r\n+                schemaName);\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> T update(AttributableType kind, SchemaType type, String schemaName, T schemaTO) {\r\n+        return (T) getRestTemplate().postForObject(baseUrl + type + \"/{kind}/update\", schemaTO, getTOClass(type), kind);\r\n+    }\r\n+\r\n     private Class<? extends AbstractSchemaTO> getTOClass(SchemaType type) {\r\n         switch (type) {\r\n         case NORMAL:\r\n@@ -72,18 +83,8 @@ private Class<? extends AbstractSchemaTO> getTOClass(SchemaType type) {\n         case VIRTUAL:\r\n             return VirtualSchemaTO.class;\r\n         default:\r\n-            throw new IllegalArgumentException(\"SchemaType is not supported.\");\r\n+            throw new IllegalArgumentException(\"SchemaType is not supported: \" + type);\r\n         }\r\n     }\r\n \r\n-    @Override\r\n-    public <T extends AbstractSchemaTO> T read(AttributableType kind, SchemaType type, String schemaName) {\r\n-        return (T) getRestTemplate().getForObject(baseUrl + type + \"/{kind}/read/{name}.json\", getTOClass(type), kind,\r\n-                schemaName);\r\n-    }\r\n-\r\n-    @Override\r\n-    public <T extends AbstractSchemaTO> T update(AttributableType kind, SchemaType type, String schemaName, T schemaTO) {\r\n-        return (T) getRestTemplate().postForObject(baseUrl + type + \"/{kind}/update\", schemaTO, getTOClass(type), kind);\r\n-    }\r\n }\r"},{"sha":"ded9a4a0d0617eaddcb93d7b67746d90912aa81e","filename":"client/src/main/java/org/apache/syncope/services/proxy/TaskServiceProxy.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/668882fd2bacd920da441e7e04b4b364ad834f66/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/668882fd2bacd920da441e7e04b4b364ad834f66/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=668882fd2bacd920da441e7e04b4b364ad834f66","patch":"@@ -107,21 +107,6 @@ public <T extends TaskTO> List<T> list(TaskType type) {\n         }\r\n     }\r\n \r\n-    private Class<? extends TaskTO> getTOClass(TaskType type) {\r\n-        switch (type) {\r\n-        case PROPAGATION:\r\n-            return PropagationTaskTO.class;\r\n-        case NOTIFICATION:\r\n-            return NotificationTaskTO.class;\r\n-        case SCHEDULED:\r\n-            return SchedTaskTO.class;\r\n-        case SYNCHRONIZATION:\r\n-            return SyncTaskTO.class;\r\n-        default:\r\n-            throw new IllegalArgumentException(\"SchemaType is not supported.\");\r\n-        }\r\n-    }\r\n-\r\n     @Override\r\n     public <T extends TaskTO> List<T> list(TaskType type, int page, int size) {\r\n         switch (type) {\r\n@@ -177,4 +162,19 @@ public <T extends TaskTO> T update(Long taskId, T taskTO) {\n         return (T) getRestTemplate().postForObject(baseUrl + \"task/update/\" + path, taskTO, taskTO.getClass());\r\n     }\r\n \r\n+    private Class<? extends TaskTO> getTOClass(TaskType type) {\r\n+        switch (type) {\r\n+        case PROPAGATION:\r\n+            return PropagationTaskTO.class;\r\n+        case NOTIFICATION:\r\n+            return NotificationTaskTO.class;\r\n+        case SCHEDULED:\r\n+            return SchedTaskTO.class;\r\n+        case SYNCHRONIZATION:\r\n+            return SyncTaskTO.class;\r\n+        default:\r\n+            throw new IllegalArgumentException(\"SchemaType is not supported: \" + type);\r\n+        }\r\n+    }\r\n+\r\n }\r"}]}