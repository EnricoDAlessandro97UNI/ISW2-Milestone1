{"sha":"d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ2MTFlNjVhYThiYzg2NjlmMmU4ZDVhNjRhNDJhOThmY2U0MWM5YzE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-19T15:07:48Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-19T15:07:56Z"},"message":"Removing deprecations","tree":{"sha":"6eb2b8cf5a9dc6d3866b23b8605e112840274656","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6eb2b8cf5a9dc6d3866b23b8605e112840274656"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"59d6d4a37b93757397f8e16da4bc2e7aa4fe3066","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/59d6d4a37b93757397f8e16da4bc2e7aa4fe3066","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/59d6d4a37b93757397f8e16da4bc2e7aa4fe3066"}],"stats":{"total":105,"additions":92,"deletions":13},"files":[{"sha":"a514498adedff4b375d92634677ffcc859b0b2f9","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/CaptchaResource.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaResource.java?ref=d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.client.enduser.resources;\n \n import javax.servlet.http.HttpServletRequest;\n-import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.text.CharacterPredicates;\n+import org.apache.commons.text.RandomStringGenerator;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n+import org.apache.syncope.common.lib.SecureTextRandomProvider;\n import org.apache.wicket.extensions.markup.html.captcha.CaptchaImageResource;\n import org.apache.wicket.request.cycle.RequestCycle;\n import org.slf4j.Logger;\n@@ -32,11 +34,16 @@ public class CaptchaResource extends CaptchaImageResource {\n \n     private static final Logger LOG = LoggerFactory.getLogger(CaptchaResource.class);\n \n+    private static final RandomStringGenerator RANDOM_LETTERS = new RandomStringGenerator.Builder().\n+            usingRandom(new SecureTextRandomProvider()).\n+            filteredBy(CharacterPredicates.LETTERS).\n+            build();\n+\n     @Override\n     protected byte[] render() {\n         LOG.debug(\"Generate captcha\");\n \n-        String captcha = RandomStringUtils.randomAlphabetic(6);\n+        String captcha = RANDOM_LETTERS.generate(6);\n         HttpServletRequest request = ((HttpServletRequest) RequestCycle.get().getRequest().getContainerRequest());\n         // store the captcha in the current session\n         request.getSession().setAttribute(SyncopeEnduserConstants.CAPTCHA_SESSION_KEY, captcha);"},{"sha":"810f45faf099eccae4169bf74a52c9165123531b","filename":"common/lib/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/common%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/common%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fpom.xml?ref=d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1","patch":"@@ -57,6 +57,10 @@ under the License.\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-text</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-collections4</artifactId>"},{"sha":"ee13bc4c131f77cc87010adfb0ce59c115915055","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/SecureTextRandomProvider.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSecureTextRandomProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSecureTextRandomProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSecureTextRandomProvider.java?ref=d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+import java.security.SecureRandom;\n+import org.apache.commons.text.TextRandomProvider;\n+\n+/**\n+ * {@link TextRandomProvider} baking {@link SecureRandom}.\n+ */\n+public class SecureTextRandomProvider implements TextRandomProvider {\n+\n+    private static final SecureRandom RANDOM = new SecureRandom();\n+\n+    @Override\n+    public int nextInt(final int max) {\n+        return RANDOM.nextInt(max);\n+    }\n+\n+}"},{"sha":"9fe8cb3915a7c69fa47179d1363b7d44418dacf3","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SecureRandomUtils.java","status":"modified","additions":34,"deletions":8,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java?ref=d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1","patch":"@@ -18,28 +18,54 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import java.security.SecureRandom;\n-\n-import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.text.CharacterPredicate;\n+import org.apache.commons.text.CharacterPredicates;\n+import org.apache.commons.text.RandomStringGenerator;\n+import org.apache.syncope.common.lib.SecureTextRandomProvider;\n \n public final class SecureRandomUtils {\n \n-    private static final SecureRandom RANDOM = new SecureRandom();\n+    private static final RandomStringGenerator FOR_PASSWORD = new RandomStringGenerator.Builder().\n+            usingRandom(new SecureTextRandomProvider()).\n+            build();\n+\n+    private static final RandomStringGenerator FOR_LETTERS = new RandomStringGenerator.Builder().\n+            usingRandom(new SecureTextRandomProvider()).\n+            filteredBy(CharacterPredicates.LETTERS).\n+            build();\n+\n+    private static final RandomStringGenerator FOR_NUMBERS = new RandomStringGenerator.Builder().\n+            usingRandom(new SecureTextRandomProvider()).\n+            filteredBy(CharacterPredicates.LETTERS).\n+            build();\n \n     public static String generateRandomPassword(final int tokenLength) {\n-        return RandomStringUtils.random(tokenLength, 0, 0, true, false, null, RANDOM);\n+        return FOR_PASSWORD.generate(tokenLength);\n     }\n \n     public static String generateRandomLetter() {\n-        return RandomStringUtils.random(1, 0, 0, true, false, null, RANDOM);\n+        return FOR_LETTERS.generate(1);\n     }\n \n     public static String generateRandomNumber() {\n-        return RandomStringUtils.random(1, 0, 0, false, true, null, RANDOM);\n+        return FOR_NUMBERS.generate(1);\n     }\n \n     public static String generateRandomSpecialCharacter(final char[] characters) {\n-        return RandomStringUtils.random(1, 0, 0, false, false, characters, RANDOM);\n+        return new RandomStringGenerator.Builder().\n+                usingRandom(new SecureTextRandomProvider()).\n+                filteredBy(new CharacterPredicate() {\n+\n+                    @Override\n+                    public boolean test(final int codePoint) {\n+                        boolean found = false;\n+                        for (int i = 0; i < characters.length && !found; i++) {\n+                            found = codePoint == Character.codePointAt(characters, i);\n+                        }\n+\n+                        return found;\n+                    }\n+                }).build().generate(1);\n     }\n \n     private SecureRandomUtils() {"},{"sha":"3c121ca6d2195f05bd24e9c5e2dfdc1977864c9f","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/HttpUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FHttpUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FHttpUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FHttpUtils.java?ref=d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1","patch":"@@ -34,8 +34,8 @@\n import org.apache.http.client.methods.HttpGet;\n import org.apache.http.client.methods.HttpPost;\n import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.conn.ssl.NoopHostnameVerifier;\n import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n-import org.apache.http.conn.ssl.SSLContextBuilder;\n import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n import org.apache.http.entity.ContentType;\n import org.apache.http.entity.StringEntity;\n@@ -47,6 +47,7 @@\n import org.apache.http.impl.client.BasicCredentialsProvider;\n import org.apache.http.impl.client.CloseableHttpClient;\n import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.ssl.SSLContextBuilder;\n \n public class HttpUtils {\n \n@@ -200,8 +201,7 @@ private static CloseableHttpClient createHttpsClient() {\n             final SSLContextBuilder builder = new SSLContextBuilder();\n             builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());\n             chc = HttpClients.custom().setSSLSocketFactory(\n-                    new SSLConnectionSocketFactory(builder.build(),\n-                            SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER)).build();\n+                    new SSLConnectionSocketFactory(builder.build(), NoopHostnameVerifier.INSTANCE)).build();\n         } catch (Exception ex) {\n             // ignore\n         }"},{"sha":"36c897ed49fa358a11c7bacec0c406a3fe12b4ec","filename":"pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=d611e65aa8bc8669f2e8d5a64a42a98fce41c9c1","patch":"@@ -389,6 +389,7 @@ under the License.\n     <commons-codec.version>1.10</commons-codec.version>\n     <commons-jexl.version>3.1</commons-jexl.version>\n     <commons-lang.version>3.6</commons-lang.version>\n+    <commons-text.version>1.1</commons-text.version>\n     <commons-collection.version>4.1</commons-collection.version>\n     <commons-logging.version>1.1.3</commons-logging.version>\n \n@@ -969,6 +970,11 @@ under the License.\n         <artifactId>commons-lang3</artifactId>\n         <version>${commons-lang.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apache.commons</groupId>\n+        <artifactId>commons-text</artifactId>\n+        <version>${commons-text.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apache.commons</groupId>\n         <artifactId>commons-collections4</artifactId>"}]}