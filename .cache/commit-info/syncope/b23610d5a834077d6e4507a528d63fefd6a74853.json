{"sha":"b23610d5a834077d6e4507a528d63fefd6a74853","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmIyMzYxMGQ1YTgzNDA3N2Q2ZTQ1MDdhNTI4ZDYzZmVmZDZhNzQ4NTM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-04-13T16:37:49Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-04-13T16:37:49Z"},"message":"Fixes issue 106\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246861 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"26b6a25925ce31e124426dc422c7ee78c04ec4f4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/26b6a25925ce31e124426dc422c7ee78c04ec4f4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b23610d5a834077d6e4507a528d63fefd6a74853","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b23610d5a834077d6e4507a528d63fefd6a74853","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b23610d5a834077d6e4507a528d63fefd6a74853","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b23610d5a834077d6e4507a528d63fefd6a74853/comments","author":null,"committer":null,"parents":[{"sha":"f562ff9d5c34325b9467b3537b1d2ed0f9381071","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f562ff9d5c34325b9467b3537b1d2ed0f9381071","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f562ff9d5c34325b9467b3537b1d2ed0f9381071"}],"stats":{"total":926,"additions":309,"deletions":617},"files":[{"sha":"6d3e60d8cb0e360a82a881270a28faa754c9ce43","filename":"client/src/main/java/org/syncope/client/to/DerivedSchemaTO.java","status":"modified","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTO.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -14,8 +14,6 @@\n  */\n package org.syncope.client.to;\n \n-import java.util.HashSet;\n-import java.util.Set;\n import org.syncope.client.AbstractBaseBean;\n \n public class DerivedSchemaTO extends AbstractBaseBean {\n@@ -24,12 +22,6 @@ public class DerivedSchemaTO extends AbstractBaseBean {\n \n     private String expression;\n \n-    private Set<String> schemas;\n-\n-    public DerivedSchemaTO() {\n-        schemas = new HashSet<String>();\n-    }\n-\n     public String getName() {\n         return name;\n     }\n@@ -45,20 +37,4 @@ public String getExpression() {\n     public void setExpression(String expression) {\n         this.expression = expression;\n     }\n-\n-    public boolean addSchema(String schema) {\n-        return schemas.add(schema);\n-    }\n-\n-    public boolean removeSchema(String schema) {\n-        return schemas.remove(schema);\n-    }\n-\n-    public Set<String> getSchemas() {\n-        return schemas;\n-    }\n-\n-    public void setSchemas(Set<String> schemas) {\n-        this.schemas = schemas;\n-    }\n }"},{"sha":"919492214d55055ff57c4ebd3fe9fc76db2b5dbc","filename":"client/src/main/java/org/syncope/client/to/KeyValueTO.java","status":"renamed","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FKeyValueTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FKeyValueTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FKeyValueTO.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -16,24 +16,25 @@\n \n import org.syncope.client.AbstractBaseBean;\n \n-public class ConfigurationTO extends AbstractBaseBean {\n+public class KeyValueTO extends AbstractBaseBean {\n \n-    private String confKey;\n-    private String confValue;\n+    private String key;\n \n-    public String getConfKey() {\n-        return confKey;\n+    private String value;\n+\n+    public String getKey() {\n+        return key;\n     }\n \n-    public void setConfKey(String confKey) {\n-        this.confKey = confKey;\n+    public void setKey(String key) {\n+        this.key = key;\n     }\n \n-    public String getConfValue() {\n-        return confValue;\n+    public String getValue() {\n+        return value;\n     }\n \n-    public void setConfValue(String confValue) {\n-        this.confValue = confValue;\n+    public void setValue(String value) {\n+        this.value = value;\n     }\n }","previous_filename":"client/src/main/java/org/syncope/client/to/ConfigurationTO.java"},{"sha":"328d07c2bfed4286b8b10cec047abdee870495fb","filename":"client/src/main/java/org/syncope/client/to/ResourceTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -36,6 +36,8 @@ public class ResourceTO extends AbstractBaseBean {\n      */\n     private List<SchemaMappingTO> mappings;\n \n+    private String accountLink;\n+\n     /**\n      * Propagation mode to be used when not mandatory in propagation.\n      */\n@@ -83,6 +85,14 @@ public void setMappings(List<SchemaMappingTO> mappings) {\n         this.mappings = mappings;\n     }\n \n+    public String getAccountLink() {\n+        return accountLink;\n+    }\n+\n+    public void setAccountLink(String accountLink) {\n+        this.accountLink = accountLink;\n+    }\n+\n     public String getName() {\n         return name;\n     }"},{"sha":"4494075a5741c9f2bb44183276df0067f54982a6","filename":"client/src/main/java/org/syncope/client/to/SchemaTO.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -14,8 +14,6 @@\n  */\n package org.syncope.client.to;\n \n-import java.util.HashSet;\n-import java.util.Set;\n import org.syncope.client.AbstractBaseBean;\n import org.syncope.types.SchemaType;\n \n@@ -39,11 +37,8 @@ public class SchemaTO extends AbstractBaseBean {\n \n     private String validatorClass;\n \n-    private Set<String> derivedSchemas;\n-\n     public SchemaTO() {\n         mandatoryCondition = \"false\";\n-        derivedSchemas = new HashSet<String>();\n     }\n \n     public String getConversionPattern() {\n@@ -117,20 +112,4 @@ public String getValidatorClass() {\n     public void setValidatorClass(String validatorClass) {\n         this.validatorClass = validatorClass;\n     }\n-\n-    public boolean addDerivedSchema(String derivedSchema) {\n-        return derivedSchemas.add(derivedSchema);\n-    }\n-\n-    public boolean removeDerivedSchema(String derivedSchema) {\n-        return derivedSchemas.remove(derivedSchema);\n-    }\n-\n-    public Set<String> getDerivedSchemas() {\n-        return derivedSchemas;\n-    }\n-\n-    public void setDerivedSchemas(Set<String> derivedSchemas) {\n-        this.derivedSchemas = derivedSchemas;\n-    }\n }"},{"sha":"f7460345faa10d11439763d083e258a868905c13","filename":"client/src/main/java/org/syncope/client/validation/SyncopeClientErrorHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientErrorHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientErrorHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientErrorHandler.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"sha":"a908f570f7cbc4d92eb96f125104cc35e509e14a","filename":"console/src/main/java/org/syncope/console/pages/Configuration.java","status":"modified","additions":22,"deletions":22,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -52,7 +52,7 @@\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.LoggerFactory;\n import org.springframework.web.client.RestClientException;\n-import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.client.to.KeyValueTO;\n import org.syncope.client.to.LoggerTO;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n@@ -109,16 +109,16 @@ public Configuration(final PageParameters parameters) {\n         confColumns.add(new PropertyColumn(new Model(getString(\"value\")),\n                 \"confValue\", \"confValue\"));\n \n-        confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(\n+        confColumns.add(new AbstractColumn<KeyValueTO>(new Model<String>(\n                 getString(\"edit\"))) {\n \n             @Override\n             public void populateItem(\n-                    final Item<ICellPopulator<ConfigurationTO>> cellItem,\n+                    final Item<ICellPopulator<KeyValueTO>> cellItem,\n                     final String componentId,\n-                    final IModel<ConfigurationTO> model) {\n+                    final IModel<KeyValueTO> model) {\n \n-                final ConfigurationTO configurationTO = model.getObject();\n+                final KeyValueTO configurationTO = model.getObject();\n                 AjaxLink editLink = new IndicatingAjaxLink(\"editLink\") {\n \n                     @Override\n@@ -152,15 +152,15 @@ public Page createPage() {\n             }\n         });\n \n-        confColumns.add(new AbstractColumn<ConfigurationTO>(\n+        confColumns.add(new AbstractColumn<KeyValueTO>(\n                 new Model<String>(getString(\"delete\"))) {\n \n             @Override\n             public void populateItem(\n-                    final Item<ICellPopulator<ConfigurationTO>> cellItem,\n-                    final String componentId, IModel<ConfigurationTO> model) {\n+                    final Item<ICellPopulator<KeyValueTO>> cellItem,\n+                    final String componentId, IModel<KeyValueTO> model) {\n \n-                final ConfigurationTO configurationTO = model.getObject();\n+                final KeyValueTO configurationTO = model.getObject();\n \n                 AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n                         \"deleteLink\") {\n@@ -169,7 +169,7 @@ public void populateItem(\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             restClient.deleteConfiguration(configurationTO.\n-                                    getConfKey());\n+                                    getKey());\n                         } catch (UnsupportedEncodingException e) {\n                             LOG.error(\"While deleting a conf key\", e);\n                             error(e.getMessage());\n@@ -232,7 +232,7 @@ public void onClick(AjaxRequestTarget target) {\n                     public Page createPage() {\n                         ConfigurationModalPage window =\n                                 new ConfigurationModalPage(Configuration.this,\n-                                createConfigWin, new ConfigurationTO(), true);\n+                                createConfigWin, new KeyValueTO(), true);\n                         return window;\n                     }\n                 });\n@@ -330,20 +330,20 @@ public void setOperationResult(boolean operationResult) {\n     }\n \n     private class SyncopeConfProvider\n-            extends SortableDataProvider<ConfigurationTO> {\n+            extends SortableDataProvider<KeyValueTO> {\n \n-        private SortableDataProviderComparator<ConfigurationTO> comparator;\n+        private SortableDataProviderComparator<KeyValueTO> comparator;\n \n         public SyncopeConfProvider() {\n             //Default sorting\n             setSort(\"confKey\", true);\n             comparator =\n-                    new SortableDataProviderComparator<ConfigurationTO>(this);\n+                    new SortableDataProviderComparator<KeyValueTO>(this);\n         }\n \n         @Override\n-        public Iterator<ConfigurationTO> iterator(int first, int count) {\n-            List<ConfigurationTO> list = getAllConfigurations();\n+        public Iterator<KeyValueTO> iterator(int first, int count) {\n+            List<KeyValueTO> list = getAllConfigurations();\n \n             Collections.sort(list, comparator);\n \n@@ -356,20 +356,20 @@ public int size() {\n         }\n \n         @Override\n-        public IModel<ConfigurationTO> model(\n-                final ConfigurationTO configuration) {\n+        public IModel<KeyValueTO> model(\n+                final KeyValueTO configuration) {\n \n-            return new AbstractReadOnlyModel<ConfigurationTO>() {\n+            return new AbstractReadOnlyModel<KeyValueTO>() {\n \n                 @Override\n-                public ConfigurationTO getObject() {\n+                public KeyValueTO getObject() {\n                     return configuration;\n                 }\n             };\n         }\n \n-        private List<ConfigurationTO> getAllConfigurations() {\n-            List<ConfigurationTO> list = null;\n+        private List<KeyValueTO> getAllConfigurations() {\n+            List<KeyValueTO> list = null;\n \n             try {\n                 list = restClient.getAllConfigurations();"},{"sha":"ec9b2c8689a7482172a003c87f6fad1e7f8e3e57","filename":"console/src/main/java/org/syncope/console/pages/ConfigurationModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -27,7 +27,7 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.client.to.KeyValueTO;\n import org.syncope.console.rest.ConfigurationRestClient;\n \n /**\n@@ -54,7 +54,7 @@ public class ConfigurationModalPage extends BaseModalPage {\n      */\n     public ConfigurationModalPage(final BasePage basePage,\n             final ModalWindow window,\n-            final ConfigurationTO configurationTO,\n+            final KeyValueTO configurationTO,\n             final boolean createFlag) {\n \n         Form form = new Form(\"ConfigurationForm\", new CompoundPropertyModel("},{"sha":"125dc882c8e605bbb03c3c3e571f79ef67868a94","filename":"console/src/main/java/org/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -151,9 +151,12 @@ protected Object load() {\n         resourceName.setEnabled(createFlag);\n         resourceName.setRequired(true);\n         resourceName.setOutputMarkupId(true);\n-\n         resourceForm.add(resourceName);\n \n+        TextField accountLink = new TextField(\"accountLink\");\n+        accountLink.setOutputMarkupId(true);\n+        resourceForm.add(accountLink);\n+\n         forceMandatoryConstraint = new CheckBox(\"forceMandatoryConstraint\");\n         forceMandatoryConstraint.setOutputMarkupId(true);\n         resourceForm.add(forceMandatoryConstraint);"},{"sha":"5a855654ece0997ee5d7911c00652eb77bdb5a93","filename":"console/src/main/java/org/syncope/console/rest/ConfigurationRestClient.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -19,7 +19,7 @@\n import java.util.List;\n import org.springframework.stereotype.Component;\n import org.springframework.web.client.HttpStatusCodeException;\n-import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.client.to.KeyValueTO;\n import org.syncope.client.to.LoggerTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n \n@@ -33,14 +33,14 @@ public class ConfigurationRestClient extends AbstractBaseRestClient {\n      * Get all stored configurations.\n      * @return ConfigurationTOs\n      */\n-    public List<ConfigurationTO> getAllConfigurations()\n+    public List<KeyValueTO> getAllConfigurations()\n             throws SyncopeClientCompositeErrorException {\n \n-        List<ConfigurationTO> configurations = null;\n+        List<KeyValueTO> configurations = null;\n \n         configurations = Arrays.asList(\n                 restTemplate.getForObject(baseURL\n-                + \"configuration/list.json\", ConfigurationTO[].class));\n+                + \"configuration/list.json\", KeyValueTO[].class));\n \n         return configurations;\n     }\n@@ -50,12 +50,12 @@ public List<ConfigurationTO> getAllConfigurations()\n      * @return ConfigurationTO object if the configuration exists,\n      * null otherwise\n      */\n-    public ConfigurationTO readConfiguration(String confKey)\n+    public KeyValueTO readConfiguration(String confKey)\n             throws SyncopeClientCompositeErrorException {\n \n-        ConfigurationTO configurationTO =\n+        KeyValueTO configurationTO =\n                 restTemplate.getForObject(baseURL\n-                + \"configuration/read/{confKey}.json\", ConfigurationTO.class,\n+                + \"configuration/read/{confKey}.json\", KeyValueTO.class,\n                 confKey);\n \n \n@@ -67,12 +67,12 @@ public ConfigurationTO readConfiguration(String confKey)\n      * @param configurationTO\n      * @return true if the operation ends succesfully, false otherwise\n      */\n-    public boolean createConfiguration(ConfigurationTO configurationTO) {\n+    public boolean createConfiguration(KeyValueTO configurationTO) {\n \n-        ConfigurationTO newConfigurationTO =\n+        KeyValueTO newConfigurationTO =\n                 restTemplate.postForObject(baseURL\n                 + \"configuration/create\",\n-                configurationTO, ConfigurationTO.class);\n+                configurationTO, KeyValueTO.class);\n \n         return (configurationTO.equals(newConfigurationTO)) ? true : false;\n     }\n@@ -82,13 +82,13 @@ public boolean createConfiguration(ConfigurationTO configurationTO) {\n      * @param configurationTO\n      * @return true if the operation ends succesfully, false otherwise\n      */\n-    public boolean updateConfiguration(ConfigurationTO configurationTO) {\n-        ConfigurationTO newConfigurationTO = null;\n+    public boolean updateConfiguration(KeyValueTO configurationTO) {\n+        KeyValueTO newConfigurationTO = null;\n \n         try {\n             newConfigurationTO = restTemplate.postForObject(baseURL\n                     + \"configuration/update\", configurationTO,\n-                    ConfigurationTO.class);\n+                    KeyValueTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While updating a configuration\", e);\n             return false;"},{"sha":"fbef14d0f9b2f1a819b7452de267cd2cab726e20","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage.html","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -110,6 +110,9 @@\n                     &nbsp;\n                 </div>\n \n+                <label for=\"accountLink\"><wicket:message key=\"accountLink\"/></label>\n+                <input type=\"text\" id=\"name\" class=\"text ui-widget-content ui-corner-all\" wicket:id=\"accountLink\" />\n+\n                 <label for=\"mandatoryConstraint\"><wicket:message key=\"forceMandatoryConstraint\"/></label>\n                 <input type=\"checkbox\" class=\"checkbox\"  wicket:id=\"forceMandatoryConstraint\"/>\n "},{"sha":"f3b4a55e85264687274cd05252e34b4a3095562f","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -22,4 +22,5 @@ fieldName=Field name\n accountIdValidation=Cannot set more than one AccountId mapping\n passwordValidation=Cannot set more than one password mapping\n customValidation=Custom validation exception\n-optionalPropagationMode=Mode for non-mandatory propagations\n\\ No newline at end of file\n+optionalPropagationMode=Mode for non-mandatory propagations\n+accountLink=Account link"},{"sha":"ac8c6147bbe57b7d6f417489474310cbea9d1fd7","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage_it.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -21,4 +21,5 @@ forceMandatoryConstraint=Forza mandatory constraint\n fieldName=Nome campo\n accountIdValidation=Non \\u00e8 possibile impostare pi\\u00f9 di un campo accountId nel mapping\n passwordValidation=Non \\u00e8 possibile impostare pi\\u00f9 di un password nel mapping\n-optionalPropagationMode=Modalit\\u00e0 per propagazioni non obbligatorie\n\\ No newline at end of file\n+optionalPropagationMode=Modalit\\u00e0 per propagazioni non obbligatorie\n+accountLink=Account link"},{"sha":"e31a67f92a289127aea452ee93353c42ee61c8fd","filename":"console/src/test/resources/content.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -136,9 +136,6 @@\n \n     <UDerSchema name=\"cn\" expression=\"surname + ', ' + firstname\"/>\n     \n-    <USchemaDerivation derivedSchemas_name=\"cn\" schemas_name=\"surname\"/>\n-    <USchemaDerivation derivedSchemas_name=\"cn\" schemas_name=\"firstname\"/>\n-                                            \n     <UDerAttr id=\"1000\" derivedSchema_name=\"cn\" owner_id=\"3\"/>\n \n     <ConnInstance id=\"100\" displayName=\"ConnInstance100\"\n@@ -293,9 +290,6 @@\n \n     <RDerSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"/>\n \n-    <RSchemaDerivation derivedSchemas_name=\"displayProperty\" schemas_name=\"icon\" />\n-    <RSchemaDerivation derivedSchemas_name=\"displayProperty\" schemas_name=\"show\" />\n-\n     <RDerAttr id=\"1001\" derivedSchema_name=\"displayProperty\" owner_id=\"1\"/>\n     <RDerAttr id=\"1002\" derivedSchema_name=\"displayProperty\" owner_id=\"4\"/>\n "},{"sha":"f733f8d68045eecd0f6e178612695247f22668f7","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerAttr.java","status":"modified","additions":6,"deletions":47,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -15,23 +15,14 @@\n package org.syncope.core.persistence.beans;\n \n import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.List;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n-import org.apache.commons.jexl2.Expression;\n-import org.apache.commons.jexl2.JexlContext;\n-import org.apache.commons.jexl2.JexlEngine;\n-import org.apache.commons.jexl2.JexlException;\n-import org.apache.commons.jexl2.MapContext;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.syncope.core.util.ApplicationContextManager;\n+import org.syncope.core.util.JexlUtil;\n \n-/**\n- * @see http://commons.apache.org/jexl/reference/index.html\n- */\n @MappedSuperclass\n public abstract class AbstractDerAttr extends AbstractBaseBean {\n \n@@ -52,44 +43,12 @@ public Long getId() {\n     public String getValue(\n             final Collection<? extends AbstractAttr> attributes) {\n \n-        JexlContext jexlContext = new MapContext();\n-\n-        List<? extends AbstractAttrValue> attributeValues = null;\n-        String expressionValue = null;\n-        AbstractAttr attribute = null;\n-        AbstractAttrValue attributeValue = null;\n-        for (Iterator<? extends AbstractAttr> itor =\n-                attributes.iterator(); itor.hasNext();) {\n-\n-            attribute = itor.next();\n-            attributeValues = attribute.getValues();\n-            if (attributeValues.isEmpty()\n-                    || !getDerivedSchema().getSchemas().contains(\n-                    attribute.getSchema())) {\n-\n-                expressionValue = \"\";\n-            } else {\n-                attributeValue = attributeValues.iterator().next();\n-                expressionValue = attributeValue.getValueAsString();\n-            }\n-\n-            jexlContext.set(attribute.getSchema().getName(), expressionValue);\n-        }\n-\n         ConfigurableApplicationContext context =\n                 ApplicationContextManager.getApplicationContext();\n-        JexlEngine jexlEngine = (JexlEngine) context.getBean(\"jexlEngine\");\n-        String result = null;\n-        try {\n-            Expression jexlExpression = jexlEngine.createExpression(\n-                    getDerivedSchema().getExpression());\n-            result = jexlExpression.evaluate(jexlContext).toString();\n-        } catch (JexlException e) {\n-            LOG.error(\"Invalid jexl expression: \"\n-                    + getDerivedSchema().getExpression(), e);\n-        }\n+        JexlUtil jexlUtil = (JexlUtil) context.getBean(\"jexlUtil\");\n \n-        return result;\n+        return jexlUtil.evaluateWithAttributes(\n+                getDerivedSchema().getExpression(), attributes);\n     }\n \n     public abstract <T extends AbstractAttributable> T getOwner();"},{"sha":"1d872bc576566ef34c891c3fbe49d2bd8fd77f46","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerSchema.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -15,7 +15,6 @@\n package org.syncope.core.persistence.beans;\n \n import java.util.List;\n-import java.util.Set;\n import javax.persistence.Column;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n@@ -25,6 +24,7 @@ public abstract class AbstractDerSchema extends AbstractBaseBean {\n \n     @Id\n     private String name;\n+\n     @Column(nullable = false)\n     private String expression;\n \n@@ -52,14 +52,6 @@ public void setExpression(String expression) {\n \n     public abstract <T extends AbstractDerAttr> void setDerivedAttributes(List<T> derivedAttributes);\n \n-    public abstract <T extends AbstractSchema> boolean addSchema(T schema);\n-\n-    public abstract <T extends AbstractSchema> boolean removeSchema(T schema);\n-\n-    public abstract Set<? extends AbstractSchema> getSchemas();\n-\n-    public abstract void setSchemas(Set<? extends AbstractSchema> schemas);\n-\n     public abstract boolean addMapping(SchemaMapping mapping);\n \n     public abstract boolean removeMapping(SchemaMapping mapping);"},{"sha":"bdb55799e192ef7096629a823c2954382a7b44a1","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -20,7 +20,6 @@\n import java.text.DecimalFormat;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n-import java.util.List;\n import javax.persistence.Basic;\n import javax.persistence.Column;\n import javax.persistence.Enumerated;\n@@ -244,15 +243,4 @@ public <T extends Format> T getFormatter() {\n \n         return result;\n     }\n-\n-    public abstract <T extends AbstractDerSchema> boolean addDerivedSchema(\n-            T derivedSchema);\n-\n-    public abstract <T extends AbstractDerSchema> boolean removeDerivedSchema(\n-            T derivedSchema);\n-\n-    public abstract List<? extends AbstractDerSchema> getDerivedSchemas();\n-\n-    public abstract void setDerivedSchemas(\n-            List<? extends AbstractDerSchema> derivedSchemas);\n }"},{"sha":"05b2e2f33c9fd3729d0af10a04549c67b80d668a","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -88,6 +88,12 @@ public class TargetResource extends AbstractBaseBean {\n     @Valid\n     private List<SchemaMapping> mappings;\n \n+    /**\n+     * A JEXL expression for determining how to link user account id in\n+     * Syncope DB to user account id in target resource's DB.\n+     */\n+    private String accountLink;\n+\n     @Enumerated(EnumType.STRING)\n     @Column(nullable = false)\n     private PropagationMode optionalPropagationMode;\n@@ -194,6 +200,14 @@ public void setMappings(List<SchemaMapping> mappings) {\n         }\n     }\n \n+    public String getAccountLink() {\n+        return accountLink;\n+    }\n+\n+    public void setAccountLink(String accountLink) {\n+        this.accountLink = accountLink;\n+    }\n+\n     public String getName() {\n         return name;\n     }"},{"sha":"ac57b26802e7bcde68fbdc3863353cc65d21b38b","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MDerSchema.java","status":"modified","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerSchema.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -16,52 +16,23 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.Entity;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n public class MDerSchema extends AbstractDerSchema {\n \n-    @ManyToMany\n-    @JoinTable(name = \"MSchemaDerivation\")\n-    private Set<MSchema> schemas;\n     @OneToMany(mappedBy = \"derivedSchema\")\n     private List<MDerAttr> derivedAttributes;\n \n     public MDerSchema() {\n-        schemas = new HashSet<MSchema>();\n         derivedAttributes = new ArrayList<MDerAttr>();\n     }\n \n-    @Override\n-    public <T extends AbstractSchema> boolean addSchema(T schema) {\n-        return schemas.add((MSchema) schema);\n-    }\n-\n-    @Override\n-    public <T extends AbstractSchema> boolean removeSchema(T schema) {\n-        return schemas.remove((MSchema) schema);\n-    }\n-\n-    @Override\n-    public Set<MSchema> getSchemas() {\n-        return schemas;\n-    }\n-\n-    @Override\n-    public void setSchemas(Set<? extends AbstractSchema> schemas) {\n-        this.schemas = (Set<MSchema>) schemas;\n-    }\n-\n     @Override\n     public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n             T derivedAttribute) {"},{"sha":"aecdeb912005b15fdff1a536efc44e6d8cf3af4f","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MSchema.java","status":"modified","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMSchema.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -14,53 +14,12 @@\n  */\n package org.syncope.core.persistence.beans.membership;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import javax.persistence.Entity;\n-import javax.persistence.ManyToMany;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n-import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n public class MSchema extends AbstractSchema {\n-\n-    @ManyToMany(mappedBy = \"schemas\")\n-    private List<MDerSchema> derivedSchemas;\n-\n-    public MSchema() {\n-        derivedSchemas = new ArrayList<MDerSchema>();\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerSchema> boolean addDerivedSchema(\n-            final T derivedSchema) {\n-\n-        return derivedSchemas.add((MDerSchema) derivedSchema);\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerSchema> boolean removeDerivedSchema(\n-            final T derivedSchema) {\n-\n-        return derivedSchemas.remove((MDerSchema) derivedSchema);\n-    }\n-\n-    @Override\n-    public List<? extends AbstractDerSchema> getDerivedSchemas() {\n-        return derivedSchemas;\n-    }\n-\n-    @Override\n-    public void setDerivedSchemas(\n-            final List<? extends AbstractDerSchema> derivedSchemas) {\n-\n-        this.derivedSchemas.clear();\n-        if (derivedSchemas != null && !derivedSchemas.isEmpty()) {\n-            this.derivedSchemas.addAll(\n-                    (List<MDerSchema>) derivedSchemas);\n-        }\n-    }\n }"},{"sha":"5d8fd411edc6dd9cf6c9b90b1e7a525439484753","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RDerSchema.java","status":"modified","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerSchema.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -16,52 +16,23 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.Entity;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n public class RDerSchema extends AbstractDerSchema {\n \n-    @ManyToMany\n-    @JoinTable(name = \"RSchemaDerivation\")\n-    private Set<RSchema> schemas;\n     @OneToMany(mappedBy = \"derivedSchema\")\n     private List<RDerAttr> derivedAttributes;\n \n     public RDerSchema() {\n-        schemas = new HashSet<RSchema>();\n         derivedAttributes = new ArrayList<RDerAttr>();\n     }\n \n-    @Override\n-    public <T extends AbstractSchema> boolean addSchema(T schema) {\n-        return schemas.add((RSchema) schema);\n-    }\n-\n-    @Override\n-    public <T extends AbstractSchema> boolean removeSchema(T schema) {\n-        return schemas.remove((RSchema) schema);\n-    }\n-\n-    @Override\n-    public Set<RSchema> getSchemas() {\n-        return schemas;\n-    }\n-\n-    @Override\n-    public void setSchemas(Set<? extends AbstractSchema> schemas) {\n-        this.schemas = (Set<RSchema>) schemas;\n-    }\n-\n     @Override\n     public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n             T derivedAttribute) {"},{"sha":"273775d8a4bb99823b6316933dc8e324614a4595","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RSchema.java","status":"modified","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRSchema.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -14,49 +14,12 @@\n  */\n package org.syncope.core.persistence.beans.role;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import javax.persistence.Entity;\n-import javax.persistence.ManyToMany;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n-import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n public class RSchema extends AbstractSchema {\n-\n-    @ManyToMany(mappedBy = \"schemas\")\n-    private List<RDerSchema> derivedSchemas;\n-\n-    public RSchema() {\n-        derivedSchemas = new ArrayList<RDerSchema>();\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerSchema> boolean addDerivedSchema(\n-            T derivedSchema) {\n-\n-        return derivedSchemas.add((RDerSchema) derivedSchema);\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerSchema> boolean removeDerivedSchema(\n-            T derivedSchema) {\n-\n-        return derivedSchemas.remove((RDerSchema) derivedSchema);\n-    }\n-\n-    @Override\n-    public List<? extends AbstractDerSchema> getDerivedSchemas() {\n-        return derivedSchemas;\n-    }\n-\n-    @Override\n-    public void setDerivedSchemas(\n-            List<? extends AbstractDerSchema> derivedSchemas) {\n-\n-        this.derivedSchemas = (List<RDerSchema>) derivedSchemas;\n-    }\n }"},{"sha":"16cf457f65ca4f0daff9bcf1e646e8c0a5fa9cc7","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -160,7 +160,7 @@ public String getPassword() {\n \n     /**\n      * TODO: password policies.\n-     * @param password\n+     * @param password the password to be set\n      */\n     public void setPassword(final String password) {\n         if (password == null) {\n@@ -171,7 +171,7 @@ public void setPassword(final String password) {\n                 algorithm.reset();\n                 algorithm.update(password.getBytes());\n \n-                byte messageDigest[] = algorithm.digest();\n+                byte[] messageDigest = algorithm.digest();\n                 StringBuilder hexString = new StringBuilder();\n                 for (int i = 0; i < messageDigest.length; i++) {\n                     hexString.append("},{"sha":"69e80de80cf6e3bf9e1e3fb7a981c6f9556234c4","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UDerSchema.java","status":"modified","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -16,53 +16,23 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.Entity;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n public class UDerSchema extends AbstractDerSchema {\n \n-    @ManyToMany\n-    @JoinTable(name = \"USchemaDerivation\")\n-    private Set<USchema> schemas;\n-\n     @OneToMany(mappedBy = \"derivedSchema\")\n     private List<UDerAttr> derivedAttributes;\n \n     public UDerSchema() {\n-        schemas = new HashSet<USchema>();\n         derivedAttributes = new ArrayList<UDerAttr>();\n     }\n \n-    @Override\n-    public <T extends AbstractSchema> boolean addSchema(T schema) {\n-        return schemas.add((USchema) schema);\n-    }\n-\n-    @Override\n-    public <T extends AbstractSchema> boolean removeSchema(T schema) {\n-        return schemas.remove((USchema) schema);\n-    }\n-\n-    @Override\n-    public Set<USchema> getSchemas() {\n-        return schemas;\n-    }\n-\n-    @Override\n-    public void setSchemas(Set<? extends AbstractSchema> schemas) {\n-        this.schemas = (Set<USchema>) schemas;\n-    }\n-\n     @Override\n     public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n             T derivedAttribute) {"},{"sha":"34b23b48b06f3785120fbd2d2e1c01443cf329fb","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/USchema.java","status":"modified","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -14,49 +14,12 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import javax.persistence.Entity;\n-import javax.persistence.ManyToMany;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n-import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n public class USchema extends AbstractSchema {\n-\n-    @ManyToMany(mappedBy = \"schemas\")\n-    private List<UDerSchema> derivedSchemas;\n-\n-    public USchema() {\n-        derivedSchemas = new ArrayList<UDerSchema>();\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerSchema> boolean addDerivedSchema(\n-            T derivedSchema) {\n-\n-        return derivedSchemas.add((UDerSchema) derivedSchema);\n-    }\n-\n-    @Override\n-    public <T extends AbstractDerSchema> boolean removeDerivedSchema(\n-            T derivedSchema) {\n-\n-        return derivedSchemas.remove((UDerSchema) derivedSchema);\n-    }\n-\n-    @Override\n-    public List<? extends AbstractDerSchema> getDerivedSchemas() {\n-        return derivedSchemas;\n-    }\n-\n-    @Override\n-    public void setDerivedSchemas(\n-            List<? extends AbstractDerSchema> derivedSchemas) {\n-\n-        this.derivedSchemas = (List<UDerSchema>) derivedSchemas;\n-    }\n }"},{"sha":"b143c12918833ef35bbd8d59f95cd72922bf68c3","filename":"core/src/main/java/org/syncope/core/persistence/dao/EntitlementDAO.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -15,7 +15,6 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import javassist.NotFoundException;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;"},{"sha":"069d3b449f4f37fdc0802349db224a9eef8621a4","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerSchemaDAOImpl.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -22,7 +22,6 @@\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.DerAttrDAO;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n \n@@ -62,11 +61,6 @@ public <T extends AbstractDerSchema> void delete(final String name,\n             return;\n         }\n \n-        for (AbstractSchema schema : derivedSchema.getSchemas()) {\n-            schema.removeDerivedSchema(derivedSchema);\n-        }\n-        derivedSchema.getSchemas().clear();\n-\n         Set<Long> derivedAttributeIds =\n                 new HashSet<Long>(derivedSchema.getDerivedAttributes().size());\n         Class attributeClass = null;"},{"sha":"f9334d14157825f7fb531266f674f1412ddde9a9","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -21,7 +21,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.AbstractAttr;\n-import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.AttrDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n@@ -82,11 +81,6 @@ public void delete(final String name,\n             return;\n         }\n \n-        for (AbstractDerSchema derivedSchema : schema.getDerivedSchemas()) {\n-            derivedSchema.removeSchema(schema);\n-        }\n-        schema.getDerivedSchemas().clear();\n-\n         List<? extends AbstractAttr> attributes = getAttributes(schema,\n                 attributableUtil.attributeClass());\n "},{"sha":"5c699fdf973985ba99c52448386fa91645256b2a","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -54,6 +54,7 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.core.persistence.dao.TaskExecutionDAO;\n+import org.syncope.core.util.JexlUtil;\n import org.syncope.core.workflow.Constants;\n import org.syncope.core.workflow.WFUtils;\n import org.syncope.types.PropagationMode;\n@@ -97,6 +98,12 @@ public class PropagationManager {\n     @Resource(name = \"taskExecutionWorkflow\")\n     private Workflow workflow;\n \n+    /**\n+     * JEXL engine for evaluating connector's account link.\n+     */\n+    @Autowired\n+    private JexlUtil jexlUtil;\n+\n     /**\n      * Create the user on every associated resource.\n      * Exceptions will be ignored.\n@@ -432,7 +439,6 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n \n                 if (mapping.isAccountid()) {\n                     accountId = objValues.iterator().next().toString();\n-                    attributes.add(new Name(accountId));\n                 }\n \n                 if (mapping.isPassword()) {\n@@ -461,6 +467,14 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n             }\n         }\n \n+        if (accountId != null) {\n+            String evaluatedAccountLink = jexlUtil.evaluateWithAttributes(\n+                    resource.getAccountLink(), user.getAttributes());\n+\n+            attributes.add(new Name(evaluatedAccountLink.isEmpty()\n+                    ? accountId : evaluatedAccountLink));\n+        }\n+\n         return Collections.singletonMap(accountId, attributes);\n     }\n "},{"sha":"52c759ffdd41ff17146a8490490a163cd2c969ad","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":23,"deletions":28,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -30,7 +30,7 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.servlet.ModelAndView;\n-import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.client.to.KeyValueTO;\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.ConfDAO;\n@@ -42,52 +42,47 @@\n public class ConfigurationController extends AbstractController {\n \n     @Autowired\n-    private ConfDAO syncopeConfigurationDAO;\n+    private ConfDAO confDAO;\n \n     @Autowired\n     private ConfigurationDataBinder configurationDataBinder;\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n-    public ConfigurationTO create(final HttpServletRequest request,\n-            final HttpServletResponse response,\n-            @RequestBody final ConfigurationTO configurationTO) {\n+    public KeyValueTO create(final HttpServletResponse response,\n+            @RequestBody final KeyValueTO configurationTO) {\n \n         LOG.debug(\"Configuration create called with parameters {}\",\n                 configurationTO);\n \n-        SyncopeConf syncopeConfiguration =\n-                configurationDataBinder.createSyncopeConfiguration(\n+        SyncopeConf conf = configurationDataBinder.createSyncopeConfiguration(\n                 configurationTO);\n-\n-        syncopeConfiguration =\n-                syncopeConfigurationDAO.save(syncopeConfiguration);\n+        conf = confDAO.save(conf);\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n \n-        return configurationDataBinder.getConfigurationTO(syncopeConfiguration);\n+        return configurationDataBinder.getConfigurationTO(conf);\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{confKey}\")\n-    public void delete(final HttpServletResponse response,\n-            @PathVariable(\"confKey\") final String confKey)\n+    public void delete(@PathVariable(\"confKey\") final String confKey)\n             throws MissingConfKeyException {\n \n-        syncopeConfigurationDAO.find(confKey);\n-        syncopeConfigurationDAO.delete(confKey);\n+        confDAO.find(confKey);\n+        confDAO.delete(confKey);\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public List<ConfigurationTO> list(HttpServletRequest request) {\n+    public List<KeyValueTO> list(HttpServletRequest request) {\n         List<SyncopeConf> configurations =\n-                syncopeConfigurationDAO.findAll();\n-        List<ConfigurationTO> configurationTOs =\n-                new ArrayList<ConfigurationTO>(configurations.size());\n+                confDAO.findAll();\n+        List<KeyValueTO> configurationTOs =\n+                new ArrayList<KeyValueTO>(configurations.size());\n \n         for (SyncopeConf configuration : configurations) {\n             configurationTOs.add(\n@@ -100,22 +95,22 @@ public List<ConfigurationTO> list(HttpServletRequest request) {\n     @PreAuthorize(\"hasRole('CONFIGURATION_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{confKey}\")\n-    public ConfigurationTO read(HttpServletResponse response,\n+    public KeyValueTO read(HttpServletResponse response,\n             @PathVariable(\"confKey\") String confKey)\n             throws MissingConfKeyException {\n \n-        ConfigurationTO result;\n+        KeyValueTO result;\n         try {\n             SyncopeConf syncopeConfiguration =\n-                    syncopeConfigurationDAO.find(confKey);\n+                    confDAO.find(confKey);\n             result = configurationDataBinder.getConfigurationTO(\n                     syncopeConfiguration);\n         } catch (MissingConfKeyException e) {\n             LOG.error(\"Could not find configuration key '\" + confKey\n                     + \"', returning null\");\n \n-            result = new ConfigurationTO();\n-            result.setConfKey(confKey);\n+            result = new KeyValueTO();\n+            result.setKey(confKey);\n         }\n \n         return result;\n@@ -124,14 +119,14 @@ public ConfigurationTO read(HttpServletResponse response,\n     @PreAuthorize(\"hasRole('CONFIGURATION_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n-    public ConfigurationTO update(final HttpServletResponse response,\n-            @RequestBody final ConfigurationTO configurationTO)\n+    public KeyValueTO update(final HttpServletResponse response,\n+            @RequestBody final KeyValueTO configurationTO)\n             throws MissingConfKeyException {\n \n         SyncopeConf syncopeConfiguration =\n-                syncopeConfigurationDAO.find(configurationTO.getConfKey());\n+                confDAO.find(configurationTO.getKey());\n \n-        syncopeConfiguration.setConfValue(configurationTO.getConfValue());\n+        syncopeConfiguration.setConfValue(configurationTO.getValue());\n \n         return configurationDataBinder.getConfigurationTO(syncopeConfiguration);\n     }"},{"sha":"ac1f7bb8b3e1384e7b5f438df61750b50dd5a590","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":8,"deletions":42,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -22,11 +22,6 @@\n import java.util.List;\n import java.util.Set;\n import javax.validation.ValidationException;\n-import org.apache.commons.jexl2.Expression;\n-import org.apache.commons.jexl2.JexlContext;\n-import org.apache.commons.jexl2.JexlEngine;\n-import org.apache.commons.jexl2.JexlException;\n-import org.apache.commons.jexl2.MapContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -56,6 +51,7 @@\n import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n+import org.syncope.core.util.JexlUtil;\n import org.syncope.types.ResourceOperationType;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -95,7 +91,7 @@ public abstract class AbstractAttributableDataBinder {\n     protected MembershipDAO membershipDAO;\n \n     @Autowired\n-    private JexlEngine jexlEngine;\n+    private JexlUtil jexlUtil;\n \n     private <T extends AbstractSchema> T getSchema(\n             final String schemaName, final Class<T> reference) {\n@@ -171,39 +167,11 @@ protected void fillAttribute(final List<String> values,\n \n     private boolean evaluateMandatoryCondition(\n             final String mandatoryCondition,\n-            final List<? extends AbstractAttr> attributes,\n-            final AttributableUtil attributableUtil) {\n-\n-        JexlContext jexlContext = new MapContext();\n-\n-        List<AbstractSchema> allSchemas =\n-                schemaDAO.findAll(attributableUtil.schemaClass());\n-        for (AbstractAttr attribute : attributes) {\n-            jexlContext.set(attribute.getSchema().getName(),\n-                    attribute.getValuesAsStrings().isEmpty()\n-                    ? null\n-                    : (attribute.getSchema().isMultivalue()\n-                    ? attribute.getValuesAsStrings()\n-                    : attribute.getValuesAsStrings().iterator().next()));\n-\n-            allSchemas.remove(attribute.getSchema());\n-        }\n-        for (AbstractSchema schema : allSchemas) {\n-            jexlContext.set(schema.getName(), null);\n-        }\n-\n-        boolean result = false;\n+            final List<? extends AbstractAttr> attributes) {\n \n-        try {\n-            Expression jexlExpression = jexlEngine.createExpression(\n-                    mandatoryCondition);\n-            result = Boolean.parseBoolean(\n-                    jexlExpression.evaluate(jexlContext).toString());\n-        } catch (JexlException e) {\n-            LOG.error(\"Invalid jexl expression: \" + mandatoryCondition, e);\n-        }\n-\n-        return result;\n+        return Boolean.parseBoolean(\n+                jexlUtil.evaluateWithAttributes(\n+                mandatoryCondition, attributes));\n     }\n \n     private boolean evaluateMandatoryCondition(\n@@ -224,8 +192,7 @@ private boolean evaluateMandatoryCondition(\n             mapping = itor.next();\n             result |= evaluateMandatoryCondition(\n                     mapping.getMandatoryCondition(),\n-                    attributes,\n-                    attributableUtil);\n+                    attributes);\n         }\n \n         return result;\n@@ -277,8 +244,7 @@ private SyncopeClientException checkMandatory(\n                     && !schema.isReadonly()\n                     && (evaluateMandatoryCondition(\n                     schema.getMandatoryCondition(),\n-                    attributable.getAttributes(),\n-                    attributableUtil)\n+                    attributable.getAttributes())\n                     || evaluateMandatoryCondition(resources,\n                     attributable.getAttributes(),\n                     schema.getName(),"},{"sha":"56508e5c3ff7ead82ca02c3f7374582f050dd911","filename":"core/src/main/java/org/syncope/core/rest/data/ConfigurationDataBinder.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -15,28 +15,28 @@\n package org.syncope.core.rest.data;\n \n import org.springframework.stereotype.Component;\n-import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.client.to.KeyValueTO;\n import org.syncope.core.persistence.beans.SyncopeConf;\n \n @Component\n public class ConfigurationDataBinder {\n \n     public SyncopeConf createSyncopeConfiguration(\n-            final ConfigurationTO configurationTO) {\n+            final KeyValueTO configurationTO) {\n \n         SyncopeConf syncopeConfiguration = new SyncopeConf();\n-        syncopeConfiguration.setConfKey(configurationTO.getConfKey());\n-        syncopeConfiguration.setConfValue(configurationTO.getConfValue());\n+        syncopeConfiguration.setConfKey(configurationTO.getKey());\n+        syncopeConfiguration.setConfValue(configurationTO.getValue());\n \n         return syncopeConfiguration;\n     }\n \n-    public ConfigurationTO getConfigurationTO(\n+    public KeyValueTO getConfigurationTO(\n             final SyncopeConf syncopeConfiguration) {\n \n-        ConfigurationTO configurationTO = new ConfigurationTO();\n-        configurationTO.setConfKey(syncopeConfiguration.getConfKey());\n-        configurationTO.setConfValue(syncopeConfiguration.getConfValue());\n+        KeyValueTO configurationTO = new KeyValueTO();\n+        configurationTO.setKey(syncopeConfiguration.getConfKey());\n+        configurationTO.setValue(syncopeConfiguration.getConfValue());\n \n         return configurationTO;\n     }"},{"sha":"995b70833c42b2a85b4a726f9715034abb2a13af","filename":"core/src/main/java/org/syncope/core/rest/data/DerivedSchemaDataBinder.java","status":"modified","additions":3,"deletions":27,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -14,8 +14,6 @@\n  */\n package org.syncope.core.rest.data;\n \n-import org.apache.commons.jexl2.JexlEngine;\n-import org.apache.commons.jexl2.JexlException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -27,7 +25,7 @@\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.util.JexlUtil;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -43,10 +41,7 @@ public class DerivedSchemaDataBinder {\n         \"schemas\", \"derivedAttributes\"};\n \n     @Autowired\n-    private SchemaDAO schemaDAO;\n-\n-    @Autowired\n-    private JexlEngine jexlEngine;\n+    private JexlUtil jexlUtil;\n \n     private <T extends AbstractSchema> AbstractDerSchema populate(\n             AbstractDerSchema derivedSchema,\n@@ -64,12 +59,7 @@ private <T extends AbstractSchema> AbstractDerSchema populate(\n             scce.addException(requiredValuesMissing);\n         }\n \n-        try {\n-            jexlEngine.createExpression(derivedSchemaTO.getExpression());\n-        } catch (JexlException e) {\n-            LOG.error(\"Invalid derived schema expression: \"\n-                    + derivedSchemaTO.getExpression(), e);\n-\n+        if (!jexlUtil.isExpressionValid(derivedSchemaTO.getExpression())) {\n             SyncopeClientException invalidMandatoryCondition =\n                     new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidValues);\n@@ -86,16 +76,6 @@ private <T extends AbstractSchema> AbstractDerSchema populate(\n         BeanUtils.copyProperties(derivedSchemaTO, derivedSchema,\n                 ignoreDerivedSchemaProperties);\n \n-        AbstractSchema abstractSchema = null;\n-        for (String schema : derivedSchemaTO.getSchemas()) {\n-            abstractSchema = schemaDAO.find(schema, reference);\n-            if (abstractSchema != null) {\n-                derivedSchema.addSchema(abstractSchema);\n-            } else {\n-                LOG.error(\"Unmatched schema name: \" + schema);\n-            }\n-        }\n-\n         return derivedSchema;\n     }\n \n@@ -126,10 +106,6 @@ public <T extends AbstractDerSchema> DerivedSchemaTO getDerivedSchemaTO(\n         BeanUtils.copyProperties(derivedSchema, derivedSchemaTO,\n                 ignoreDerivedSchemaProperties);\n \n-        for (AbstractSchema schema : derivedSchema.getSchemas()) {\n-            derivedSchemaTO.addSchema(schema.getName());\n-        }\n-\n         return derivedSchemaTO;\n     }\n }"},{"sha":"df6ecd2a82d1bd52687e4268cec62dc37a09b4ff","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -17,8 +17,6 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n-import org.apache.commons.jexl2.JexlEngine;\n-import org.apache.commons.jexl2.JexlException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -33,6 +31,7 @@\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n+import org.syncope.core.util.JexlUtil;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -51,7 +50,7 @@ public class ResourceDataBinder {\n     private ConnInstanceDAO connectorInstanceDAO;\n \n     @Autowired\n-    private JexlEngine jexlEngine;\n+    private JexlUtil jexlUtil;\n \n     public TargetResource getResource(ResourceTO resourceTO)\n             throws SyncopeClientCompositeErrorException {\n@@ -113,6 +112,8 @@ public TargetResource getResource(TargetResource resource,\n         resource.setMappings(\n                 getSchemaMappings(resource, resourceTO.getMappings()));\n \n+        resource.setAccountLink(resourceTO.getAccountLink());\n+\n         return resource;\n     }\n \n@@ -151,6 +152,8 @@ public ResourceTO getResourceTO(TargetResource resource) {\n         // set the mappings\n         resourceTO.setMappings(getSchemaMappingTOs(resource.getMappings()));\n \n+        resourceTO.setAccountLink(resource.getAccountLink());\n+\n         resourceTO.setForceMandatoryConstraint(\n                 resource.isForceMandatoryConstraint());\n \n@@ -219,12 +222,7 @@ private SchemaMapping getSchemaMapping(\n             compositeErrorException.addException(requiredValuesMissing);\n         }\n \n-        try {\n-            jexlEngine.createExpression(mappingTO.getMandatoryCondition());\n-        } catch (JexlException e) {\n-            LOG.error(\"Invalid mandatory condition: \"\n-                    + mappingTO.getMandatoryCondition(), e);\n-\n+        if (!jexlUtil.isExpressionValid(mappingTO.getMandatoryCondition())) {\n             SyncopeClientException invalidMandatoryCondition =\n                     new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidValues);"},{"sha":"14b9e768b4a36db25282fc255551a6011136d1b3","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":3,"deletions":28,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -15,8 +15,6 @@\n package org.syncope.core.rest.data;\n \n import java.util.Iterator;\n-import org.apache.commons.jexl2.JexlEngine;\n-import org.apache.commons.jexl2.JexlException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -30,9 +28,9 @@\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.util.AttributableUtil;\n+import org.syncope.core.util.JexlUtil;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -51,10 +49,7 @@ public class SchemaDataBinder {\n     private SchemaDAO schemaDAO;\n \n     @Autowired\n-    private DerSchemaDAO derivedSchemaDAO;\n-\n-    @Autowired\n-    private JexlEngine jexlEngine;\n+    private JexlUtil jexlUtil;\n \n     private <T extends AbstractDerSchema> AbstractSchema populate(\n             final AbstractSchema schema,\n@@ -72,12 +67,7 @@ private <T extends AbstractDerSchema> AbstractSchema populate(\n             scce.addException(requiredValuesMissing);\n         }\n \n-        try {\n-            jexlEngine.createExpression(schemaTO.getMandatoryCondition());\n-        } catch (JexlException e) {\n-            LOG.error(\"Invalid mandatory condition: \"\n-                    + schemaTO.getMandatoryCondition(), e);\n-\n+        if (!jexlUtil.isExpressionValid(schemaTO.getMandatoryCondition())) {\n             SyncopeClientException invalidMandatoryCondition =\n                     new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidValues);\n@@ -93,17 +83,6 @@ private <T extends AbstractDerSchema> AbstractSchema populate(\n \n         BeanUtils.copyProperties(schemaTO, schema, IGNORE_SCHEMA_PROPERTIES);\n \n-        AbstractDerSchema abstractDerivedSchema;\n-        for (String derivedSchema : schemaTO.getDerivedSchemas()) {\n-            abstractDerivedSchema =\n-                    derivedSchemaDAO.find(derivedSchema, derivedReference);\n-            if (abstractDerivedSchema != null) {\n-                schema.addDerivedSchema(abstractDerivedSchema);\n-            } else {\n-                LOG.error(\"Unmatched derived schema name: \" + derivedSchema);\n-            }\n-        }\n-\n         return schema;\n     }\n \n@@ -172,10 +151,6 @@ public <T extends AbstractSchema> SchemaTO getSchemaTO(T schema,\n         SchemaTO schemaTO = new SchemaTO();\n         BeanUtils.copyProperties(schema, schemaTO, IGNORE_SCHEMA_PROPERTIES);\n \n-        for (AbstractDerSchema derivedSchema : schema.getDerivedSchemas()) {\n-            schemaTO.addDerivedSchema(derivedSchema.getName());\n-        }\n-\n         return schemaTO;\n     }\n }"},{"sha":"79fbee0b1a30b0b13c2e9330a7bcec6a4a937e6d","filename":"core/src/main/java/org/syncope/core/util/JexlUtil.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -0,0 +1,94 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.util;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.jexl2.Expression;\n+import org.apache.commons.jexl2.JexlContext;\n+import org.apache.commons.jexl2.JexlEngine;\n+import org.apache.commons.jexl2.JexlException;\n+import org.apache.commons.jexl2.MapContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n+\n+/**\n+ * @see http://commons.apache.org/jexl/reference/index.html\n+ */\n+public class JexlUtil {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(JexlUtil.class);\n+\n+    @Autowired\n+    private JexlEngine jexlEngine;\n+\n+    public boolean isExpressionValid(final String expression) {\n+        boolean result = true;\n+        try {\n+            jexlEngine.createExpression(expression);\n+        } catch (JexlException e) {\n+            LOG.error(\"Invalid jexl expression: \" + expression, e);\n+            result = false;\n+        }\n+        return result;\n+    }\n+\n+    public String evaluateWithAttributes(final String expression,\n+            final Collection<? extends AbstractAttr> attributes) {\n+\n+        if (expression == null || expression.isEmpty()) {\n+            return \"\";\n+        }\n+\n+        JexlContext jexlContext = new MapContext();\n+\n+        List<? extends AbstractAttrValue> attributeValues;\n+        String expressionValue;\n+        AbstractAttr attribute;\n+        AbstractAttrValue attributeValue;\n+        for (Iterator<? extends AbstractAttr> itor =\n+                attributes.iterator(); itor.hasNext();) {\n+\n+            attribute = itor.next();\n+            attributeValues = attribute.getValues();\n+            if (attributeValues.isEmpty()) {\n+                expressionValue = \"\";\n+            } else {\n+                attributeValue = attributeValues.iterator().next();\n+                expressionValue = attributeValue.getValueAsString();\n+            }\n+\n+            jexlContext.set(attribute.getSchema().getName(), expressionValue);\n+        }\n+\n+        String result;\n+        try {\n+            Expression jexlExpression = jexlEngine.createExpression(expression);\n+            result = jexlExpression.evaluate(jexlContext).toString();\n+        } catch (JexlException e) {\n+            LOG.error(\"Invalid jexl expression: \" + expression, e);\n+            result = \"\";\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"aa0b312ed907ebed870628cc7fa74fac780d365d","filename":"core/src/main/resources/content.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -53,11 +53,6 @@\n                \n     <UDerSchema name=\"username\" expression=\"firstname + '.' + surname\"/>\n \n-    <USchemaDerivation derivedSchemas_name=\"username\"\n-                          schemas_name=\"firstname\"/>\n-    <USchemaDerivation derivedSchemas_name=\"username\"\n-                          schemas_name=\"surname\"/>\n-\n     <SyncopeRole id=\"0\" name=\"/\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n \n     <MSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"0\""},{"sha":"503f5906ce1cf9fce3298febd51063663e549d29","filename":"core/src/main/resources/indexes.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -28,8 +28,6 @@\n     <entry key=\"MAttrValue_booleanvalueIndex\">CREATE INDEX MAttrValue_booleanvalueIndex ON MAttrValue(booleanvalue)</entry>\n     <entry key=\"MDerAttr_derivedSchema_nameIndex\">CREATE INDEX MDerAttr_derivedSchema_naIndex ON MDerAttr(derivedSchema_name)</entry>\n     <entry key=\"MDerAttr_owner_idIndex\">CREATE INDEX MDerAttr_owner_idIndex ON MDerAttr(owner_id)</entry>\n-    <entry key=\"MSchemaDerivation_schemas_nameIndex\">CREATE INDEX MSchemaDerivation_schemasIndex ON MSchemaDerivation(schemas_name)</entry>\n-    <entry key=\"MSchemaDerivation_derivedSchemas_nameIndex\">CREATE INDEX MSchemaDerivation_derivedIndex ON MSchemaDerivation(derivedSchemas_name)</entry>\n     <entry key=\"Membership_syncopeUser_idIndex\">CREATE INDEX Membership_syncopeUser_idIndex ON Membership(syncopeUser_id)</entry>\n     <entry key=\"Membership_syncopeRole_idIndex\">CREATE INDEX Membership_syncopeRole_idIndex ON Membership(syncopeRole_id)</entry>\n     <entry key=\"Membership_TargetResource_Membership_idIndex\">CREATE INDEX Membership_TargetResourc1Index ON Membership_TargetResource(Membership_id)</entry>\n@@ -44,8 +42,6 @@\n     <entry key=\"RAttrValue_booleanvalueIndex\">CREATE INDEX RAttrValue_booleanvalueIndex ON RAttrValue(booleanvalue)</entry>\n     <entry key=\"RDerAttr_derivedSchema_nameIndex\">CREATE INDEX RDerAttr_derivedSchema_naIndex ON RDerAttr(derivedSchema_name)</entry>\n     <entry key=\"RDerAttr_owner_idIndex\">CREATE INDEX RDerAttr_owner_idIndex ON RDerAttr(owner_id)</entry>\n-    <entry key=\"RSchemaDerivation_schemas_nameIndex\">CREATE INDEX RSchemaDerivation_schemasIndex ON RSchemaDerivation(schemas_name)</entry>\n-    <entry key=\"RSchemaDerivation_derivedSchemas_nameIndex\">CREATE INDEX RSchemaDerivation_derivedIndex ON RSchemaDerivation(derivedSchemas_name)</entry>\n     <entry key=\"SchemaMapping_resource_nameIndex\">CREATE INDEX SchemaMapping_resource_naIndex ON SchemaMapping(resource_name)</entry>\n     <entry key=\"SyncopeRole_parent_idIndex\">CREATE INDEX SyncopeRole_parent_idIndeIndex ON SyncopeRole(parent_id)</entry>\n     <entry key=\"SyncopeRole_Entitlement_entitlements_nameIndex\">CREATE INDEX SyncopeRole_Entitlement_eIndex ON SyncopeRole_Entitlement(entitlements_name)</entry>\n@@ -67,8 +63,6 @@\n     <entry key=\"UAttrValue_booleanvalueIndex\">CREATE INDEX UAttrValue_booleanvalueIndex ON UAttrValue(booleanvalue)</entry>\n     <entry key=\"UDerAttr_derivedSchema_nameIndex\">CREATE INDEX UDerAttr_derivedSchema_naIndex ON UDerAttr(derivedSchema_name)</entry>\n     <entry key=\"UDerAttr_owner_idIndex\">CREATE INDEX UDerAttr_owner_idIndex ON UDerAttr(owner_id)</entry>\n-    <entry key=\"USchemaDerivation_schemas_nameIndex\">CREATE INDEX USchemaDerivation_schemasIndex ON USchemaDerivation(schemas_name)</entry>\n-    <entry key=\"USchemaDerivation_derivedSchemas_nameIndex\">CREATE INDEX USchemaDerivation_derivedIndex ON USchemaDerivation(derivedSchemas_name)</entry>\n     <entry key=\"os_currentstep_workflowEntry_idIndex\">CREATE INDEX os_currentstep_workflowEnIndex ON os_currentstep(workflowEntry_id)</entry>\n     <entry key=\"os_historystep_workflowEntry_idIndex\">CREATE INDEX os_historystep_workflowEnIndex ON os_historystep(workflowEntry_id)</entry>\n </properties>"},{"sha":"53e3b7807346869b81b8c2750168cc0e26a61e15","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -101,6 +101,7 @@\n         <property name=\"lenient\" value=\"true\"/>\n         <property name=\"silent\" value=\"false\"/>\n     </bean>\n+    <bean id=\"jexlUtil\" class=\"org.syncope.core.util.JexlUtil\"/>\n \n     <bean id=\"propagationManager\"\n           class=\"org.syncope.core.persistence.propagation.PropagationManager\"/>"},{"sha":"869e83dd49592938727b587d01828d1c397114ca","filename":"core/src/test/java/org/syncope/core/persistence/dao/DerSchemaTest.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -21,7 +21,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n-import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.AbstractTest;\n \n @Transactional\n@@ -54,10 +53,6 @@ public final void save() {\n                 new UDerSchema();\n         derivedAttributeSchema.setName(\"cn2\");\n         derivedAttributeSchema.setExpression(\"firstname surname\");\n-        derivedAttributeSchema.addSchema(\n-                schemaDAO.find(\"firstname\", USchema.class));\n-        derivedAttributeSchema.addSchema(\n-                schemaDAO.find(\"surname\", USchema.class));\n \n         derSchemaDAO.save(derivedAttributeSchema);\n "},{"sha":"dd3a00b2cda75b7c905928b9030f0ab5d968942c","filename":"core/src/test/java/org/syncope/core/persistence/dao/RoleTest.java","status":"modified","additions":26,"deletions":12,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -27,50 +27,64 @@\n public class RoleTest extends AbstractTest {\n \n     @Autowired\n-    private RoleDAO syncopeRoleDAO;\n+    private RoleDAO roleDAO;\n \n     @Test\n     public final void findAll() {\n-        List<SyncopeRole> list = syncopeRoleDAO.findAll();\n+        List<SyncopeRole> list = roleDAO.findAll();\n         assertEquals(\"did not get expected number of roles \", 8, list.size());\n     }\n \n     @Test\n     public final void findChildren() {\n-        assertEquals(2, syncopeRoleDAO.findChildren(4L).size());\n+        assertEquals(2, roleDAO.findChildren(4L).size());\n     }\n \n     @Test\n     public final void find() {\n-        SyncopeRole role = syncopeRoleDAO.find(\"root\", null);\n+        SyncopeRole role = roleDAO.find(\"root\", null);\n         assertNotNull(\"did not find expected role\", role);\n-        role = syncopeRoleDAO.find(null, null);\n+        role = roleDAO.find(null, null);\n         assertNull(\"found role but did not expect it\", role);\n     }\n \n+    @Test\n+    public final void inheritedAttributes() {\n+        SyncopeRole director = roleDAO.find(7L);\n+\n+        assertEquals(2, director.findInheritedAttributes().size());\n+    }\n+\n+    @Test\n+    public final void inheritedDerivedAttributes() {\n+        SyncopeRole director = roleDAO.find(7L);\n+\n+        assertEquals(1, director.findInheritedDerivedAttributes().size());\n+    }\n+\n     @Test\n     public final void save() {\n         SyncopeRole role = new SyncopeRole();\n         role.setName(\"secondChild\");\n \n-        SyncopeRole rootRole = syncopeRoleDAO.find(\"root\", null);\n+        SyncopeRole rootRole = roleDAO.find(\"root\", null);\n         role.setParent(rootRole);\n \n-        role = syncopeRoleDAO.save(role);\n+        role = roleDAO.save(role);\n \n-        SyncopeRole actual = syncopeRoleDAO.find(role.getId());\n+        SyncopeRole actual = roleDAO.find(role.getId());\n         assertNotNull(\"expected save to work\", actual);\n     }\n \n     @Test\n     public final void delete() {\n-        SyncopeRole role = syncopeRoleDAO.find(4L);\n-        syncopeRoleDAO.delete(role.getId());\n+        SyncopeRole role = roleDAO.find(4L);\n+        roleDAO.delete(role.getId());\n \n-        SyncopeRole actual = syncopeRoleDAO.find(4L);\n+        SyncopeRole actual = roleDAO.find(4L);\n         assertNull(\"delete did not work\", actual);\n \n-        SyncopeRole children = syncopeRoleDAO.find(7L);\n+        SyncopeRole children = roleDAO.find(7L);\n         assertNull(\"delete of successors did not work\", children);\n \n     }"},{"sha":"131bb1d2d6141f60dc6d4663644df1e4c41080cf","filename":"core/src/test/java/org/syncope/core/persistence/relationships/DerSchemaTest.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -21,7 +21,6 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.UDerAttr;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n-import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.dao.AttrDAO;\n import org.syncope.core.persistence.dao.DerAttrDAO;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n@@ -55,10 +54,6 @@ public final void test() {\n \n         assertNull(derSchemaDAO.find(\"cn\", UDerSchema.class));\n         assertNull(derAttrDAO.find(1000L, UDerAttr.class));\n-        assertTrue(schemaDAO.find(\"surname\",\n-                USchema.class).getDerivedSchemas().isEmpty());\n-        assertTrue(schemaDAO.find(\"firstname\",\n-                USchema.class).getDerivedSchemas().isEmpty());\n         assertNull(userDAO.find(3L).getDerivedAttribute(\"cn\"));\n     }\n }"},{"sha":"902db9929f804e53fb5a7c4e0b54a58081276f54","filename":"core/src/test/java/org/syncope/core/persistence/relationships/RoleTest.java","status":"modified","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -22,7 +22,6 @@\n import org.syncope.core.persistence.beans.role.RAttr;\n import org.syncope.core.persistence.beans.role.RAttrValue;\n import org.syncope.core.persistence.beans.role.RSchema;\n-import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.AttrDAO;\n import org.syncope.core.persistence.dao.AttrValueDAO;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n@@ -65,18 +64,4 @@ public final void delete() {\n         assertNull(attrValueDAO.find(41L, RAttrValue.class));\n         assertNotNull(schemaDAO.find(\"icon\", RSchema.class));\n     }\n-\n-    @Test\n-    public final void inheritedAttributes() {\n-        SyncopeRole director = roleDAO.find(7L);\n-\n-        assertEquals(2, director.findInheritedAttributes().size());\n-    }\n-\n-    @Test\n-    public final void inheritedDerivedAttributes() {\n-        SyncopeRole director = roleDAO.find(7L);\n-\n-        assertEquals(1, director.findInheritedDerivedAttributes().size());\n-    }\n }"},{"sha":"e8e709106e50a391193c0b6ace598e781af07bec","filename":"core/src/test/java/org/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -23,7 +23,6 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.user.UAttr;\n-import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.dao.AttrDAO;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n@@ -130,8 +129,5 @@ public void test2() {\n         assertNull(schema);\n \n         assertNull(schemaDAO.find(\"surname\", USchema.class));\n-\n-        assertEquals(1, derSchemaDAO.find(\"cn\",\n-                UDerSchema.class).getSchemas().size());\n     }\n }"},{"sha":"902bf16f47c715680aaefc2a6fb770f7e4e02d39","filename":"core/src/test/java/org/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -22,19 +22,19 @@\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.client.HttpStatusCodeException;\n-import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.client.to.KeyValueTO;\n \n public class ConfigurationTestITCase extends AbstractTest {\n \n     @Test\n     public void create() {\n-        ConfigurationTO configurationTO = new ConfigurationTO();\n-        configurationTO.setConfKey(\"testKey\");\n-        configurationTO.setConfValue(\"testValue\");\n+        KeyValueTO configurationTO = new KeyValueTO();\n+        configurationTO.setKey(\"testKey\");\n+        configurationTO.setValue(\"testValue\");\n \n-        ConfigurationTO newConfigurationTO = restTemplate.postForObject(\n+        KeyValueTO newConfigurationTO = restTemplate.postForObject(\n                 BASE_URL + \"configuration/create\",\n-                configurationTO, ConfigurationTO.class);\n+                configurationTO, KeyValueTO.class);\n         assertEquals(configurationTO, newConfigurationTO);\n     }\n \n@@ -47,58 +47,58 @@ public void delete() throws UnsupportedEncodingException {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n \n-        ConfigurationTO tokenLengthTO = restTemplate.getForObject(\n+        KeyValueTO tokenLengthTO = restTemplate.getForObject(\n                 BASE_URL + \"configuration/read/{confKey}.json\",\n-                ConfigurationTO.class,\n+                KeyValueTO.class,\n                 \"token.length\");\n \n         restTemplate.delete(BASE_URL + \"configuration/delete/{confKey}.json\",\n                 \"token.length\");\n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"configuration/read/{confKey}.json\",\n-                    ConfigurationTO.class,\n+                    KeyValueTO.class,\n                     \"token.length\");\n         } catch (HttpStatusCodeException e) {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n \n-        ConfigurationTO newConfigurationTO = restTemplate.postForObject(\n+        KeyValueTO newConfigurationTO = restTemplate.postForObject(\n                 BASE_URL + \"configuration/create\",\n-                tokenLengthTO, ConfigurationTO.class);\n+                tokenLengthTO, KeyValueTO.class);\n         assertEquals(tokenLengthTO, newConfigurationTO);\n     }\n \n     @Test\n     public void list() {\n-        List<ConfigurationTO> configurations = Arrays.asList(\n+        List<KeyValueTO> configurations = Arrays.asList(\n                 restTemplate.getForObject(\n                 BASE_URL + \"configuration/list.json\",\n-                ConfigurationTO[].class));\n+                KeyValueTO[].class));\n         assertNotNull(configurations);\n-        for (ConfigurationTO configuration : configurations) {\n+        for (KeyValueTO configuration : configurations) {\n             assertNotNull(configuration);\n         }\n     }\n \n     @Test\n     public void read() {\n-        ConfigurationTO configurationTO = restTemplate.getForObject(BASE_URL\n+        KeyValueTO configurationTO = restTemplate.getForObject(BASE_URL\n                 + \"configuration/read/{confKey}.json\",\n-                ConfigurationTO.class, \"token.expireTime\");\n+                KeyValueTO.class, \"token.expireTime\");\n \n         assertNotNull(configurationTO);\n     }\n \n     @Test\n     public void update() {\n-        ConfigurationTO configurationTO = new ConfigurationTO();\n-        configurationTO.setConfKey(\"token.expireTime\");\n-        configurationTO.setConfValue(\"61\");\n+        KeyValueTO configurationTO = new KeyValueTO();\n+        configurationTO.setKey(\"token.expireTime\");\n+        configurationTO.setValue(\"61\");\n \n-        ConfigurationTO newConfigurationTO = restTemplate.postForObject(\n+        KeyValueTO newConfigurationTO = restTemplate.postForObject(\n                 BASE_URL + \"configuration/update\",\n-                configurationTO, ConfigurationTO.class);\n+                configurationTO, KeyValueTO.class);\n \n         assertEquals(configurationTO, newConfigurationTO);\n     }"},{"sha":"e31a67f92a289127aea452ee93353c42ee61c8fd","filename":"core/src/test/resources/content.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -136,9 +136,6 @@\n \n     <UDerSchema name=\"cn\" expression=\"surname + ', ' + firstname\"/>\n     \n-    <USchemaDerivation derivedSchemas_name=\"cn\" schemas_name=\"surname\"/>\n-    <USchemaDerivation derivedSchemas_name=\"cn\" schemas_name=\"firstname\"/>\n-                                            \n     <UDerAttr id=\"1000\" derivedSchema_name=\"cn\" owner_id=\"3\"/>\n \n     <ConnInstance id=\"100\" displayName=\"ConnInstance100\"\n@@ -293,9 +290,6 @@\n \n     <RDerSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"/>\n \n-    <RSchemaDerivation derivedSchemas_name=\"displayProperty\" schemas_name=\"icon\" />\n-    <RSchemaDerivation derivedSchemas_name=\"displayProperty\" schemas_name=\"show\" />\n-\n     <RDerAttr id=\"1001\" derivedSchema_name=\"displayProperty\" owner_id=\"1\"/>\n     <RDerAttr id=\"1002\" derivedSchema_name=\"displayProperty\" owner_id=\"4\"/>\n "},{"sha":"e29ae370440013fc7c1ecf33c5ef4168cae3ca52","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b23610d5a834077d6e4507a528d63fefd6a74853/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b23610d5a834077d6e4507a528d63fefd6a74853/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=b23610d5a834077d6e4507a528d63fefd6a74853","patch":"@@ -27,7 +27,7 @@\n     <parent>\n         <groupId>org.sonatype.oss</groupId>\n         <artifactId>oss-parent</artifactId>\n-        <version>5</version>\n+        <version>7</version>\n     </parent>\n \n     <url>http://syncope.googlecode.com/</url>"}]}