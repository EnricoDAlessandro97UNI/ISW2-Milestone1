{"sha":"708c9cb8b54d876592105b114b46814771a4b152","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjcwOGM5Y2I4YjU0ZDg3NjU5MjEwNWIxMTRiNDY4MTQ3NzFhNGIxNTI=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-07-03T17:45:14Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-07-03T17:45:14Z"},"message":"Upgrade WA to 6.3.0 (#200)\n\n* switch WA to 6.3 SNAPSHOT; fix APIs\r\n\r\n* upgrade yo CAS 6.3; rework gauth account management\r\n\r\n* upgrade to CAS 6.3; rework gauth account management\r\n\r\n* fix tests and permission issue\r\n\r\n* fix test\r\n\r\n* fix api return types for collections\r\n\r\nCo-authored-by: Francesco Chicchiriccò <ilgrosso@users.noreply.github.com>","tree":{"sha":"cb51f63e1f42818fd750ef1cc11c05c7432670c5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cb51f63e1f42818fd750ef1cc11c05c7432670c5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/708c9cb8b54d876592105b114b46814771a4b152","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/26qCRBK7hj4Ov3rIwAAdHIIAGKkwxCRNI72fDCp5JlOwpsx\ncPPu5+oaTfopa7qssHQyMTv5+l0oRyX/OkjI7oGlSnVJ6RYz81HOcmP6O6/hibe0\nqssbTo7MDGSFLwUModmRkQR0Tf1xZnI3CRDDmW0w3X2FsXzCMKO5LUJB909iMwzG\n10RZ2a3e43m3VmO8fxqWSdIcpTaSwQWN71KzaBUetARGKGjM61EyuKTVkTAtai++\nlxLHQvpcDWkocX4DH4tJLXYdNIaTFJuEeKOiVKSzD/oUB6yeEOFP0GQ0TbSpCyX6\nD/4WjM4GCHopi/Wy502D1ix8osx2HXBlSTgAIVcmshEZVBhh6Lojq+UQgdqlbTY=\n=VGyz\n-----END PGP SIGNATURE-----\n","payload":"tree cb51f63e1f42818fd750ef1cc11c05c7432670c5\nparent 9ba9524bb45e527da91d074d1d9209797f292009\nauthor Misagh Moayyed <mm1844@gmail.com> 1593798314 +0430\ncommitter GitHub <noreply@github.com> 1593798314 +0430\n\nUpgrade WA to 6.3.0 (#200)\n\n* switch WA to 6.3 SNAPSHOT; fix APIs\r\n\r\n* upgrade yo CAS 6.3; rework gauth account management\r\n\r\n* upgrade to CAS 6.3; rework gauth account management\r\n\r\n* fix tests and permission issue\r\n\r\n* fix test\r\n\r\n* fix api return types for collections\r\n\r\nCo-authored-by: Francesco Chicchiriccò <ilgrosso@users.noreply.github.com>"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/708c9cb8b54d876592105b114b46814771a4b152","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/708c9cb8b54d876592105b114b46814771a4b152","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/708c9cb8b54d876592105b114b46814771a4b152/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"9ba9524bb45e527da91d074d1d9209797f292009","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9ba9524bb45e527da91d074d1d9209797f292009","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9ba9524bb45e527da91d074d1d9209797f292009"}],"stats":{"total":401,"additions":304,"deletions":97},"files":[{"sha":"ca78af3c60cd62ce7bc9f72add0bd0a4baf162d6","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -96,6 +96,8 @@ public final class AMEntitlement {\n \n     public static final String GOOGLE_MFA_COUNT_ACCOUNTS = \"GOOGLE_MFA_COUNT_ACCOUNTS\";\n \n+    public static final String GOOGLE_MFA_LIST_ACCOUNTS = \"GOOGLE_MFA_LIST_ACCOUNTS\";\n+\n     public static final String OIDC_JWKS_CREATE = \"OIDC_JWKS_CREATE\";\n \n     public static final String OIDC_JWKS_READ = \"OIDC_JWKS_READ\";"},{"sha":"17cbef991539929c9615d22a98e5ad28c91a5be2","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GoogleMfaAuthAccount.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGoogleMfaAuthAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGoogleMfaAuthAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGoogleMfaAuthAccount.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -36,8 +36,12 @@ public class GoogleMfaAuthAccount implements BaseBean {\n \n     private String secretKey;\n \n+    private String name;\n+\n     private int validationCode;\n \n+    private long id;\n+\n     private List<Integer> scratchCodes = new ArrayList<>(0);\n \n     private String owner;\n@@ -52,6 +56,22 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(final long id) {\n+        this.id = id;\n+    }\n+\n     public String getOwner() {\n         return owner;\n     }\n@@ -101,6 +121,8 @@ public int hashCode() {\n             .append(key)\n             .append(secretKey)\n             .append(owner)\n+            .append(name)\n+            .append(id)\n             .append(scratchCodes)\n             .append(validationCode)\n             .append(registrationDate)\n@@ -124,6 +146,8 @@ public boolean equals(final Object obj) {\n             .append(this.key, rhs.key)\n             .append(this.secretKey, rhs.secretKey)\n             .append(this.owner, rhs.owner)\n+            .append(this.name, rhs.name)\n+            .append(this.id, rhs.id)\n             .append(this.scratchCodes, rhs.scratchCodes)\n             .append(this.registrationDate, rhs.registrationDate)\n             .append(this.validationCode, rhs.validationCode)\n@@ -134,8 +158,10 @@ public boolean equals(final Object obj) {\n     public String toString() {\n         return new ToStringBuilder(this)\n             .append(\"key\", key)\n+            .append(\"name\", name)\n             .append(\"secretKey\", secretKey)\n             .append(\"owner\", owner)\n+            .append(\"id\", id)\n             .append(\"scratchCodes\", scratchCodes)\n             .append(\"registrationDate\", registrationDate)\n             .append(\"validationCode\", validationCode)\n@@ -166,11 +192,21 @@ public GoogleMfaAuthAccount.Builder validationCode(final Integer code) {\n             return this;\n         }\n \n+        public GoogleMfaAuthAccount.Builder id(final Long id) {\n+            instance.setId(id);\n+            return this;\n+        }\n+\n         public GoogleMfaAuthAccount.Builder owner(final String owner) {\n             instance.setOwner(owner);\n             return this;\n         }\n \n+        public GoogleMfaAuthAccount.Builder name(final String name) {\n+            instance.setName(name);\n+            return this;\n+        }\n+\n         public GoogleMfaAuthAccount.Builder key(final String key) {\n             instance.setKey(key);\n             return this;"},{"sha":"3dbac81f44a1427fa8c28d6b18004586660e9a0f","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/GoogleMfaAuthAccountService.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -43,6 +43,8 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n \n+import java.util.List;\n+\n @Tag(name = \"Google MFA Accounts\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n@@ -54,7 +56,7 @@ public interface GoogleMfaAuthAccountService extends JAXRSService {\n     @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n     @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n     @Path(\"accts/owners/${owner}\")\n-    Response deleteAccountFor(@NotNull @PathParam(\"owner\") String owner);\n+    Response deleteAccountsFor(@NotNull @PathParam(\"owner\") String owner);\n \n     @DELETE\n     @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n@@ -90,23 +92,35 @@ public interface GoogleMfaAuthAccountService extends JAXRSService {\n     @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n     @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n     @Path(\"accts/owners/${owner}\")\n-    GoogleMfaAuthAccount findAccountFor(@NotNull @PathParam(\"owner\") String owner);\n+    List<GoogleMfaAuthAccount> findAccountsFor(@NotNull @PathParam(\"owner\") String owner);\n \n     @GET\n     @Path(\"accts/{key}\")\n     @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n     @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n     GoogleMfaAuthAccount findAccountBy(@NotNull @PathParam(\"key\") String key);\n \n+    @GET\n+    @Path(\"accts/id/{id}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    GoogleMfaAuthAccount findAccountBy(@NotNull @PathParam(\"id\") long id);\n+\n     @GET\n     @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n     @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n     @Path(\"accts/count\")\n     PagedResult<GoogleMfaAuthAccount> countAll();\n \n+    @GET\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"accts/count/{owner}\")\n+    PagedResult<GoogleMfaAuthAccount> countFor(@NotNull @PathParam(\"owner\") String owner);\n+\n     @GET\n     @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n     @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n     @Path(\"accts\")\n-    PagedResult<GoogleMfaAuthAccount> list();\n+    List<GoogleMfaAuthAccount> list();\n }"},{"sha":"b799695e72839642a3d983024e0518ff678db95b","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/GoogleMfaAuthAccountLogic.java","status":"modified","additions":69,"deletions":22,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthAccountLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthAccountLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthAccountLogic.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -80,9 +80,9 @@ protected AuthProfileTO resolveReference(final Method method, final Object... ar\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n         + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void deleteAccountFor(final String owner) {\n+    public void deleteAccountsFor(final String owner) {\n         authProfileDAO.findByOwner(owner).ifPresent(profile -> {\n-            profile.setGoogleMfaAuthAccount(null);\n+            profile.setGoogleMfaAuthAccounts(List.of());\n             authProfileDAO.save(profile);\n         });\n     }\n@@ -92,7 +92,7 @@ public void deleteAccountFor(final String owner) {\n     public void deleteAll() {\n         authProfileDAO.findAll().\n             forEach(profile -> {\n-                profile.setGoogleMfaAuthAccount(null);\n+                profile.setGoogleMfaAuthAccounts(List.of());\n                 authProfileDAO.save(profile);\n             });\n     }\n@@ -110,26 +110,36 @@ public GoogleMfaAuthAccount save(final GoogleMfaAuthAccount acct) {\n         if (acct.getKey() == null) {\n             acct.setKey(SecureRandomUtils.generateRandomUUID().toString());\n         }\n-        profile.setGoogleMfaAuthAccount(acct);\n-        return authProfileDAO.save(profile).getGoogleMfaAuthAccount();\n+        profile.add(acct);\n+        profile = authProfileDAO.save(profile);\n+        return profile.getGoogleMfaAuthAccounts().\n+            stream().\n+            filter(t -> t.getKey().equals(acct.getKey())).\n+            findFirst().\n+            orElse(null);\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_UPDATE_ACCOUNT + \"') \"\n         + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void update(final GoogleMfaAuthAccount acct) {\n-        AuthProfile profile = authProfileDAO.findByOwner(acct.getOwner()).\n-            orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + acct.getOwner()));\n-        profile.setGoogleMfaAuthAccount(acct);\n-        authProfileDAO.save(profile).getGoogleMfaAuthAccount();\n+    public void update(final GoogleMfaAuthAccount account) {\n+        AuthProfile authProfile = authProfileDAO.findByOwner(account.getOwner()).\n+            orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + account.getOwner()));\n+        final List<GoogleMfaAuthAccount> accounts = authProfile.getGoogleMfaAuthAccounts();\n+        if (accounts.removeIf(acct -> acct.getKey().equals(account.getKey()))) {\n+            accounts.add(account);\n+            authProfile.setGoogleMfaAuthAccounts(accounts);\n+            authProfileDAO.save(authProfile);\n+        }\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n         + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public GoogleMfaAuthAccount findAccountFor(final String owner) {\n+    public List<GoogleMfaAuthAccount> findAccountsFor(final String owner) {\n         return authProfileDAO.findByOwner(owner).\n             stream().\n-            map(AuthProfile::getGoogleMfaAuthAccount).\n+            map(AuthProfile::getGoogleMfaAuthAccounts).\n             filter(Objects::nonNull).\n+            filter(accounts -> !accounts.isEmpty()).\n             findFirst().\n             orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + owner));\n     }\n@@ -140,9 +150,30 @@ public GoogleMfaAuthAccount findAccountFor(final String owner) {\n     public GoogleMfaAuthAccount findAccountBy(final String key) {\n         return authProfileDAO.findAll().\n             stream().\n-            map(AuthProfile::getGoogleMfaAuthAccount).\n+            map(AuthProfile::getGoogleMfaAuthAccounts).\n+            filter(Objects::nonNull).\n+            map(accounts -> accounts.stream().\n+                filter(acct -> acct.getKey().equals(key)).\n+                findFirst().\n+                orElse(null)).\n+            filter(Objects::nonNull).\n+            findFirst().\n+            orElse(null);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public GoogleMfaAuthAccount findAccountBy(final long id) {\n+        return authProfileDAO.findAll().\n+            stream().\n+            map(AuthProfile::getGoogleMfaAuthAccounts).\n+            filter(Objects::nonNull).\n+            map(accounts -> accounts.stream().\n+                filter(acct -> acct.getId() == id).\n+                findFirst().\n+                orElse(null)).\n             filter(Objects::nonNull).\n-            filter(acct -> acct.getKey().equals(key)).\n             findFirst().\n             orElse(null);\n     }\n@@ -152,31 +183,47 @@ public GoogleMfaAuthAccount findAccountBy(final String key) {\n     public long countAll() {\n         return authProfileDAO.findAll().\n             stream().\n-            filter(profile -> profile.getGoogleMfaAuthAccount() != null).\n-            count();\n+            filter(profile -> profile.getGoogleMfaAuthAccounts() != null).\n+            mapToInt(profile -> profile.getGoogleMfaAuthAccounts().size()).\n+            sum();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_COUNT_ACCOUNTS + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public long countFor(final String owner) {\n+        return authProfileDAO.findByOwner(owner).\n+            stream().\n+            filter(profile -> profile.getGoogleMfaAuthAccounts() != null).\n+            mapToInt(profile -> profile.getGoogleMfaAuthAccounts().size()).\n+            sum();\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n         + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public void deleteAccountBy(final String key) {\n         authProfileDAO.findAll().\n             stream().\n-            filter(profile -> profile.getGoogleMfaAuthAccount() != null\n-                && profile.getGoogleMfaAuthAccount().getKey().equals(key)).\n+            filter(profile -> profile.getGoogleMfaAuthAccounts() != null\n+                && profile.getGoogleMfaAuthAccounts().stream().anyMatch(acct -> acct.getKey().equals(key))).\n             findFirst().\n             ifPresent(profile -> {\n-                profile.setGoogleMfaAuthAccount(null);\n-                authProfileDAO.save(profile);\n+                List<GoogleMfaAuthAccount> accounts = profile.getGoogleMfaAuthAccounts();\n+                boolean removed = accounts.removeIf(acct -> acct.getKey().equals(key));\n+                if (removed) {\n+                    authProfileDAO.save(profile);\n+                }\n             });\n     }\n \n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_LIST_ACCOUNTS + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n     public List<GoogleMfaAuthAccount> list() {\n         return authProfileDAO.findAll().\n             stream().\n-            map(AuthProfile::getGoogleMfaAuthAccount).\n+            map(AuthProfile::getGoogleMfaAuthAccounts).\n             filter(Objects::nonNull).\n+            flatMap(List::stream).\n             collect(Collectors.toList());\n     }\n }"},{"sha":"44d15789709f47233362dc1a5f729da63e7e43a0","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/GoogleMfaAuthAccountServiceImpl.java","status":"modified","additions":20,"deletions":10,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -31,15 +31,16 @@\n import javax.ws.rs.core.Response;\n \n import java.net.URI;\n+import java.util.List;\n \n @Service\n public class GoogleMfaAuthAccountServiceImpl extends AbstractServiceImpl implements GoogleMfaAuthAccountService {\n     @Autowired\n     private GoogleMfaAuthAccountLogic logic;\n \n     @Override\n-    public Response deleteAccountFor(final String owner) {\n-        logic.deleteAccountFor(owner);\n+    public Response deleteAccountsFor(final String owner) {\n+        logic.deleteAccountsFor(owner);\n         return Response.noContent().build();\n     }\n \n@@ -57,10 +58,10 @@ public Response deleteAll() {\n \n     @Override\n     public Response save(final GoogleMfaAuthAccount acct) {\n-        final GoogleMfaAuthAccount token = logic.save(acct);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(token.getKey()).build();\n+        final GoogleMfaAuthAccount account = logic.save(acct);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(account.getKey()).build();\n         return Response.created(location).\n-            header(RESTHeaders.RESOURCE_KEY, token.getKey()).\n+            header(RESTHeaders.RESOURCE_KEY, account.getKey()).\n             build();\n     }\n \n@@ -70,15 +71,20 @@ public void update(final GoogleMfaAuthAccount acct) {\n     }\n \n     @Override\n-    public GoogleMfaAuthAccount findAccountFor(final String owner) {\n-        return logic.findAccountFor(owner);\n+    public List<GoogleMfaAuthAccount> findAccountsFor(final String owner) {\n+        return logic.findAccountsFor(owner);\n     }\n \n     @Override\n     public GoogleMfaAuthAccount findAccountBy(final String key) {\n         return logic.findAccountBy(key);\n     }\n \n+    @Override\n+    public GoogleMfaAuthAccount findAccountBy(final long id) {\n+        return logic.findAccountBy(id);\n+    }\n+\n     @Override\n     public PagedResult<GoogleMfaAuthAccount> countAll() {\n         PagedResult<GoogleMfaAuthAccount> result = new PagedResult<>();\n@@ -89,12 +95,16 @@ public PagedResult<GoogleMfaAuthAccount> countAll() {\n     }\n \n     @Override\n-    public PagedResult<GoogleMfaAuthAccount> list() {\n+    public PagedResult<GoogleMfaAuthAccount> countFor(final String owner) {\n         PagedResult<GoogleMfaAuthAccount> result = new PagedResult<>();\n-        result.setSize(Long.valueOf(logic.countAll()).intValue());\n+        result.setSize(Long.valueOf(logic.countFor(owner)).intValue());\n         result.setPage(1);\n         result.setTotalCount(result.getSize());\n-        result.getResult().addAll(logic.list());\n         return result;\n     }\n+\n+    @Override\n+    public List<GoogleMfaAuthAccount> list() {\n+        return logic.list();\n+    }\n }"},{"sha":"824903b6b70b7ee58d8d1a54d825c2c582efb7cd","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/AuthProfileDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthProfileDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthProfileDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthProfileDAO.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -40,4 +40,6 @@ public interface AuthProfileDAO extends DAO<AuthProfile> {\n     void deleteByOwner(String owner);\n \n     void delete(AuthProfile authProfile);\n+\n+    void deleteAll();\n }"},{"sha":"4834388289b614a9d0b45bb4e60708da3e7453dc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthProfile.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -35,9 +35,11 @@ public interface AuthProfile extends Entity {\n \n     void setGoogleMfaAuthTokens(List<GoogleMfaAuthToken> tokens);\n \n-    GoogleMfaAuthAccount getGoogleMfaAuthAccount();\n+    List<GoogleMfaAuthAccount> getGoogleMfaAuthAccounts();\n \n-    void setGoogleMfaAuthAccount(GoogleMfaAuthAccount account);\n+    void setGoogleMfaAuthAccounts(List<GoogleMfaAuthAccount> accounts);\n \n     void add(GoogleMfaAuthToken token);\n+\n+    void add(GoogleMfaAuthAccount account);\n }"},{"sha":"a8089a112dcf590bfbdf9d183be2512205f11efd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAAuthProfileDAO.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthProfileDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthProfileDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthProfileDAO.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -88,4 +88,11 @@ public void deleteByOwner(final String owner) {\n     public void delete(final AuthProfile authProfile) {\n         entityManager().remove(authProfile);\n     }\n+\n+    @Override\n+    public void deleteAll() {\n+        entityManager().\n+            createQuery(\"DELETE FROM \" + JPAAuthProfile.class.getSimpleName()).\n+            executeUpdate();\n+    }\n }"},{"sha":"f5e80895d27870657bab69480f105a504a1fa3dd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthProfile.java","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -43,7 +43,7 @@ public class JPAAuthProfile extends AbstractGeneratedKeyEntity implements AuthPr\n     private static final long serialVersionUID = 57352617217394093L;\n \n     @Lob\n-    private String googleMfaAuthAccount;\n+    private String googleMfaAuthAccounts;\n \n     @Lob\n     private String googleMfaAuthTokens;\n@@ -75,16 +75,16 @@ public void setGoogleMfaAuthTokens(final List<GoogleMfaAuthToken> tokens) {\n     }\n \n     @Override\n-    public GoogleMfaAuthAccount getGoogleMfaAuthAccount() {\n-        return googleMfaAuthAccount == null\n-            ? null\n-            : POJOHelper.deserialize(googleMfaAuthAccount, new TypeReference<GoogleMfaAuthAccount>() {\n+    public List<GoogleMfaAuthAccount> getGoogleMfaAuthAccounts() {\n+        return googleMfaAuthAccounts == null\n+            ? new ArrayList<>(0)\n+            : POJOHelper.deserialize(googleMfaAuthAccounts, new TypeReference<List<GoogleMfaAuthAccount>>() {\n         });\n     }\n \n     @Override\n-    public void setGoogleMfaAuthAccount(final GoogleMfaAuthAccount account) {\n-        this.googleMfaAuthAccount = POJOHelper.serialize(account);\n+    public void setGoogleMfaAuthAccounts(final List<GoogleMfaAuthAccount> accounts) {\n+        this.googleMfaAuthAccounts = POJOHelper.serialize(accounts);\n     }\n \n     @Override\n@@ -94,4 +94,12 @@ public void add(final GoogleMfaAuthToken token) {\n         tokens.add(token);\n         setGoogleMfaAuthTokens(tokens);\n     }\n+\n+    @Override\n+    public void add(final GoogleMfaAuthAccount account) {\n+        checkType(account, GoogleMfaAuthAccount.class);\n+        final List<GoogleMfaAuthAccount> accounts = getGoogleMfaAuthAccounts();\n+        accounts.add(account);\n+        setGoogleMfaAuthAccounts(accounts);\n+    }\n }"},{"sha":"070cc1ec8b26a958eb20fecd62d04bfb2912cddf","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthProfileTest.java","status":"modified","additions":21,"deletions":12,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -24,14 +24,16 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n-import java.util.UUID;\n+\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -46,9 +48,14 @@ public class AuthProfileTest extends AbstractTest {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @BeforeEach\n+    public void beforeEach() {\n+        authProfileDAO.deleteAll();\n+    }\n+\n     @Test\n     public void googleMfaToken() {\n-        String id = UUID.randomUUID().toString();\n+        String id = SecureRandomUtils.generateRandomUUID().toString();\n \n         createAuthProfileWithToken(id, 123456);\n \n@@ -70,7 +77,7 @@ public void googleMfaToken() {\n \n     @Test\n     public void googleMfaAccount() {\n-        String id = UUID.randomUUID().toString();\n+        String id = SecureRandomUtils.generateRandomUUID().toString();\n \n         createAuthProfileWithAccount(id);\n \n@@ -83,13 +90,14 @@ public void googleMfaAccount() {\n         result = authProfileDAO.findByKey(authProfile.getKey());\n         assertTrue(result.isPresent());\n \n-        String secret = UUID.randomUUID().toString();\n-        GoogleMfaAuthAccount googleMfaAuthAccount = authProfile.getGoogleMfaAuthAccount();\n+        String secret = SecureRandomUtils.generateRandomUUID().toString();\n+        List<GoogleMfaAuthAccount> googleMfaAuthAccounts = authProfile.getGoogleMfaAuthAccounts();\n+        GoogleMfaAuthAccount googleMfaAuthAccount = googleMfaAuthAccounts.get(0);\n         googleMfaAuthAccount.setSecretKey(secret);\n-        authProfile.setGoogleMfaAuthAccount(googleMfaAuthAccount);\n-        authProfileDAO.save(authProfile);\n-\n-        assertEquals(secret, authProfileDAO.findByOwner(id).get().getGoogleMfaAuthAccount().getSecretKey());\n+        \n+        authProfile.setGoogleMfaAuthAccounts(googleMfaAuthAccounts);\n+        authProfile = authProfileDAO.save(authProfile);\n+        assertEquals(secret, authProfile.getGoogleMfaAuthAccounts().get(0).getSecretKey());\n     }\n \n     private AuthProfile createAuthProfileWithToken(final String owner, final Integer otp) {\n@@ -107,14 +115,15 @@ private AuthProfile createAuthProfileWithToken(final String owner, final Integer\n     private AuthProfile createAuthProfileWithAccount(final String owner) {\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);\n-        GoogleMfaAuthAccount token = new GoogleMfaAuthAccount.Builder()\n+        GoogleMfaAuthAccount account = new GoogleMfaAuthAccount.Builder()\n             .registrationDate(new Date())\n             .scratchCodes(List.of(1, 2, 3, 4, 5))\n-            .secretKey(UUID.randomUUID().toString())\n+            .secretKey(SecureRandomUtils.generateRandomUUID().toString())\n             .validationCode(123456)\n             .owner(owner)\n+            .name(SecureRandomUtils.generateRandomUUID().toString())\n             .build();\n-        profile.setGoogleMfaAuthAccount(token);\n+        profile.add(account);\n         return authProfileDAO.save(profile);\n     }\n }"},{"sha":"1b8143e1e8c4b28d298813a77599145836268a3a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GoogleMfaAuthAccountITCase.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthAccountITCase.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -29,23 +30,24 @@\n \n import java.util.Date;\n import java.util.List;\n-import java.util.UUID;\n \n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n public class GoogleMfaAuthAccountITCase extends AbstractITCase {\n \n     private static GoogleMfaAuthAccount createGoogleMfaAuthAccount() {\n-        String id = UUID.randomUUID().toString();\n+        String id = SecureRandomUtils.generateRandomUUID().toString();\n         return new GoogleMfaAuthAccount.Builder()\n             .registrationDate(new Date())\n             .scratchCodes(List.of(1, 2, 3, 4, 5))\n-            .secretKey(UUID.randomUUID().toString())\n+            .secretKey(SecureRandomUtils.generateRandomUUID().toString())\n             .validationCode(123456)\n             .owner(id)\n+            .name(SecureRandomUtils.generateRandomUUID().toString())\n             .build();\n     }\n \n@@ -72,8 +74,10 @@ public void create() {\n     public void count() {\n         GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n         googleMfaAuthAccountService.save(acct);\n+        assertFalse(googleMfaAuthAccountService.list().isEmpty());\n         assertEquals(1, googleMfaAuthAccountService.countAll().getTotalCount());\n-        assertNotNull(googleMfaAuthAccountService.findAccountFor(acct.getOwner()));\n+        assertEquals(1, googleMfaAuthAccountService.countFor(acct.getOwner()).getTotalCount());\n+        assertFalse(googleMfaAuthAccountService.findAccountsFor(acct.getOwner()).isEmpty());\n     }\n \n     @Test\n@@ -82,9 +86,9 @@ public void deleteByOwner() {\n         Response response = googleMfaAuthAccountService.save(acct);\n         String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n         assertNotNull(key);\n-        response = googleMfaAuthAccountService.deleteAccountFor(acct.getOwner());\n+        response = googleMfaAuthAccountService.deleteAccountsFor(acct.getOwner());\n         assertEquals(response.getStatusInfo().getStatusCode(), Response.Status.NO_CONTENT.getStatusCode());\n-        assertThrows(SyncopeClientException.class, () -> googleMfaAuthAccountService.findAccountFor(acct.getOwner()));\n+        assertThrows(SyncopeClientException.class, () -> googleMfaAuthAccountService.findAccountsFor(acct.getOwner()));\n     }\n \n     @Test\n@@ -93,11 +97,12 @@ public void update() {\n         Response response = googleMfaAuthAccountService.save(acct);\n         String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n         acct = googleMfaAuthAccountService.findAccountBy(key);\n+        acct = googleMfaAuthAccountService.findAccountBy(acct.getId());\n         acct.setSecretKey(\"NewSecret\");\n         acct.setScratchCodes(List.of(9, 8, 7, 6, 5));\n         googleMfaAuthAccountService.update(acct);\n         assertEquals(1, googleMfaAuthAccountService.countAll().getTotalCount());\n-        acct = googleMfaAuthAccountService.findAccountFor(acct.getOwner());\n+        acct = googleMfaAuthAccountService.findAccountsFor(acct.getOwner()).get(0);\n         assertEquals(acct.getSecretKey(), acct.getSecretKey());\n         googleMfaAuthAccountService.deleteAccountBy(acct.getKey());\n     }"},{"sha":"917a197b1e915d7715e5e0be152881d81bee685e","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -446,7 +446,7 @@ under the License.\n     <commons-text.version>1.8</commons-text.version>\n     <commons-logging.version>1.1.3</commons-logging.version>\n     \n-    <cas.version>6.2.0</cas.version>\n+    <cas.version>6.3.0-SNAPSHOT</cas.version>\n \n     <h2.version>1.4.200</h2.version>\n "},{"sha":"d051d2e26ac20477c02f2da1b7ac2e1f53570ab4","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -263,7 +263,7 @@ private static void mapSaml2IdPAuthModuleConf(\n         props.setAttributeConsumingServiceIndex(conf.getAttributeConsumingServiceIndex());\n         props.setAuthnContextClassRef(conf.getAuthnContextClassRefs());\n         props.setAuthnContextComparisonType(conf.getAuthnContextComparisonType());\n-        props.setBlackListedSignatureSigningAlgorithms(conf.getBlackListedSignatureSigningAlgorithms());\n+        props.setBlockedSignatureSigningAlgorithms(conf.getBlackListedSignatureSigningAlgorithms());\n         props.setDestinationBinding(conf.getDestinationBinding());\n         props.setIdentityProviderMetadataPath(conf.getIdentityProviderMetadataPath());\n         props.setKeystoreAlias(conf.getKeystoreAlias());"},{"sha":"423cdeaaba61ca14a715d8c4affcb3647cf3d43c","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -63,7 +63,6 @@\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.io.ResourceLoader;\n \n import java.util.Collection;\n import java.util.HashMap;\n@@ -75,9 +74,6 @@ public class SyncopeWAConfiguration {\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n-    @Autowired\n-    private ResourceLoader resourceLoader;\n-\n     @Autowired\n     @Qualifier(\"samlSelfSignedCertificateWriter\")\n     private ObjectProvider<SamlIdPCertificateAndKeyWriter> samlSelfSignedCertificateWriter;\n@@ -151,7 +147,7 @@ public SamlIdPMetadataGenerator samlIdPMetadataGenerator(final WARestClient rest\n             SamlIdPMetadataGeneratorConfigurationContext.builder().\n                 samlIdPMetadataLocator(samlIdPMetadataLocator(restClient)).\n                 samlIdPCertificateAndKeyWriter(samlSelfSignedCertificateWriter.getObject()).\n-                resourceLoader(resourceLoader).\n+                applicationContext(applicationContext).\n                 casProperties(casProperties).\n                 metadataCipherExecutor(CipherExecutor.noOpOfStringToString()).\n                 build();"},{"sha":"569cb7c0c8515f73576caa40f1c7dca3572e8a9f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/credential/SyncopeWAGoogleMfaAuthCredentialRepository.java","status":"modified","additions":92,"deletions":24,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Fcredential%2FSyncopeWAGoogleMfaAuthCredentialRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Fcredential%2FSyncopeWAGoogleMfaAuthCredentialRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Fcredential%2FSyncopeWAGoogleMfaAuthCredentialRepository.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -28,12 +28,15 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apache.syncope.wa.starter.gauth.token.SyncopeWAGoogleMfaAuthTokenRepository;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.ws.rs.core.Response;\n+\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n@@ -45,67 +48,125 @@ public class SyncopeWAGoogleMfaAuthCredentialRepository extends BaseGoogleAuthen\n     private final WARestClient waRestClient;\n \n     public SyncopeWAGoogleMfaAuthCredentialRepository(final WARestClient waRestClient,\n-                                                         final IGoogleAuthenticator googleAuthenticator) {\n+                                                      final IGoogleAuthenticator googleAuthenticator) {\n         super(CipherExecutor.noOpOfStringToString(), googleAuthenticator);\n         this.waRestClient = waRestClient;\n     }\n \n+    private static GoogleMfaAuthAccount mapGoogleMfaAuthAccount(final OneTimeTokenAccount account) {\n+        return new GoogleMfaAuthAccount.Builder()\n+            .owner(account.getUsername())\n+            .registrationDate(new Date())\n+            .scratchCodes(account.getScratchCodes())\n+            .validationCode(account.getValidationCode())\n+            .secretKey(account.getSecretKey())\n+            .id(account.getId())\n+            .build();\n+    }\n+\n+    private static GoogleAuthenticatorAccount mapGoogleMfaAuthAccount(final GoogleMfaAuthAccount account) {\n+        return GoogleAuthenticatorAccount.builder().\n+            username(account.getOwner()).\n+            secretKey(account.getSecretKey()).\n+            validationCode(account.getValidationCode()).\n+            scratchCodes(account.getScratchCodes()).\n+            name(account.getName()).\n+            id(account.getId()).\n+            build();\n+    }\n+\n     @Override\n-    public OneTimeTokenAccount get(final String username) {\n+    public OneTimeTokenAccount get(final long id) {\n         try {\n             GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthAccountService.class);\n-            GoogleMfaAuthAccount account = googleService.findAccountFor(username);\n-            return new GoogleAuthenticatorAccount(account.getOwner(),\n-                account.getSecretKey(), account.getValidationCode(), account.getScratchCodes());\n+            GoogleMfaAuthAccount account = googleService.findAccountBy(id);\n+            if (account != null) {\n+                return mapGoogleMfaAuthAccount(account);\n+            }\n         } catch (final SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.NotFound) {\n-                LOG.info(\"Could not locate account for owner {}\", username);\n+                LOG.info(\"Could not locate account for id {}\", id);\n+            } else {\n+                LOG.error(e.getMessage(), e);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public OneTimeTokenAccount get(final String username, final long id) {\n+        try {\n+            GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n+                getService(GoogleMfaAuthAccountService.class);\n+            googleService.findAccountsFor(username).\n+                stream().\n+                filter(account -> account.getId() == id).\n+                map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n+                collect(Collectors.toList());\n+        } catch (final SyncopeClientException e) {\n+            if (e.getType() == ClientExceptionType.NotFound) {\n+                LOG.info(\"Could not locate account for owner {} and id {}\", username, id);\n             } else {\n                 LOG.error(e.getMessage(), e);\n             }\n         }\n         return null;\n     }\n \n+    @Override\n+    public Collection<? extends OneTimeTokenAccount> get(final String username) {\n+        try {\n+            GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n+                getService(GoogleMfaAuthAccountService.class);\n+            googleService.findAccountsFor(username).\n+                stream().\n+                map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n+                collect(Collectors.toList());\n+        } catch (final SyncopeClientException e) {\n+            if (e.getType() == ClientExceptionType.NotFound) {\n+                LOG.info(\"Could not locate account for owner {}\", username);\n+            } else {\n+                LOG.error(e.getMessage(), e);\n+            }\n+        }\n+        return List.of();\n+    }\n+\n     @Override\n     public Collection<? extends OneTimeTokenAccount> load() {\n         GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n             getService(GoogleMfaAuthAccountService.class);\n         return googleService.list().\n-            getResult().\n             stream().\n-            map(account -> new GoogleAuthenticatorAccount(account.getOwner(),\n-                account.getSecretKey(), account.getValidationCode(), account.getScratchCodes())).\n+            map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n             collect(Collectors.toList());\n     }\n \n     @Override\n-    public void save(final String userName, final String secretKey,\n-                     final int validationCode, final List<Integer> scratchCodes) {\n+    public OneTimeTokenAccount save(final OneTimeTokenAccount tokenAccount) {\n         GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n             getService(GoogleMfaAuthAccountService.class);\n         GoogleMfaAuthAccount account = new GoogleMfaAuthAccount.Builder()\n-            .owner(userName)\n+            .owner(tokenAccount.getUsername())\n             .registrationDate(new Date())\n-            .scratchCodes(scratchCodes)\n-            .validationCode(validationCode)\n-            .secretKey(secretKey)\n+            .scratchCodes(tokenAccount.getScratchCodes())\n+            .validationCode(tokenAccount.getValidationCode())\n+            .secretKey(tokenAccount.getSecretKey())\n+            .name(tokenAccount.getName())\n+            .id(tokenAccount.getId())\n             .build();\n-        googleService.save(account);\n+        Response response = googleService.save(account);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        account.setKey(key);\n+        return mapGoogleMfaAuthAccount(account);\n     }\n \n     @Override\n     public OneTimeTokenAccount update(final OneTimeTokenAccount account) {\n         GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n             getService(GoogleMfaAuthAccountService.class);\n-        GoogleMfaAuthAccount acct = new GoogleMfaAuthAccount.Builder()\n-            .owner(account.getUsername())\n-            .registrationDate(new Date())\n-            .scratchCodes(account.getScratchCodes())\n-            .validationCode(account.getValidationCode())\n-            .secretKey(account.getSecretKey())\n-            .build();\n+        GoogleMfaAuthAccount acct = mapGoogleMfaAuthAccount(account);\n         googleService.update(acct);\n         return account;\n     }\n@@ -121,7 +182,7 @@ public void deleteAll() {\n     public void delete(final String username) {\n         GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n             getService(GoogleMfaAuthAccountService.class);\n-        googleService.deleteAccountFor(username);\n+        googleService.deleteAccountsFor(username);\n     }\n \n     @Override\n@@ -130,4 +191,11 @@ public long count() {\n             getService(GoogleMfaAuthAccountService.class);\n         return googleService.countAll().getTotalCount();\n     }\n+\n+    @Override\n+    public long count(final String username) {\n+        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthAccountService.class);\n+        return googleService.countFor(username).getTotalCount();\n+    }\n }"},{"sha":"640fa2c32db5390af2ea64ff9d91ef48abb5339e","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/AbstractTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -25,6 +25,7 @@\n \n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, properties = {\n     \"cas.authn.accept.users=mrossi::password\",\n+    \"cas.authn.syncope.url=http://localhost:8080\",\n     \"cas.sso.allow-missing-service-parameter=true\"\n })\n @ContextConfiguration(initializers = ZookeeperTestingServer.class)"},{"sha":"d336ac27805b32036db8f19cb32693ee34375d55","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeWAServiceRegistryTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/708c9cb8b54d876592105b114b46814771a4b152/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/708c9cb8b54d876592105b114b46814771a4b152/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java?ref=708c9cb8b54d876592105b114b46814771a4b152","patch":"@@ -90,7 +90,7 @@ protected SAML2SPTO buildSAML2SP() {\n         return saml2spto;\n     }\n \n-    private void addAttributes(final boolean withReleaseAttributes,\n+    private static void addAttributes(final boolean withReleaseAttributes,\n             final boolean withAttrReleasePolicy,\n             final WAClientApp waClientApp) {\n         DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n@@ -137,12 +137,12 @@ public void addClientApp() {\n         waClientApp.setClientAppTO(buildOIDCRP());\n         Long clientAppId = waClientApp.getClientAppTO().getClientAppId();\n         addAttributes(true, true, waClientApp);\n-\n+        \n         SyncopeCoreTestingServer.APPS.add(waClientApp);\n         List<WAClientApp> apps = service.list();\n         assertEquals(1, apps.size());\n \n-        assertNull(servicesManager.findServiceBy(clientAppId));\n+        assertNotNull(servicesManager.findServiceBy(clientAppId));\n \n         // 3. trigger client app refresh\n         Collection<RegisteredService> load = servicesManager.load();"}]}