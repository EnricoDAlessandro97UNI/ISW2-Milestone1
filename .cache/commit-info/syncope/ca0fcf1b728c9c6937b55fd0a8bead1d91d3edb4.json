{"sha":"ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNhMGZjZjFiNzI4YzljNjkzN2I1NWZkMGE4YmVhZDFkOTFkM2VkYjQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-26T12:37:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-26T12:38:15Z"},"message":"[SYNCOPE-1099] Adding checks to ensure that all resources (including the ones coming from dynamic groups) are considered for propagation","tree":{"sha":"3fdd07145fca15d9eb1cc86bf0b302385595f174","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3fdd07145fca15d9eb1cc86bf0b302385595f174"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3088b0335a7b6024b3fd84c12c2992d77ae6a0ef","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3088b0335a7b6024b3fd84c12c2992d77ae6a0ef","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3088b0335a7b6024b3fd84c12c2992d77ae6a0ef"}],"stats":{"total":163,"additions":131,"deletions":32},"files":[{"sha":"152174955216aa02dc565bb157ee5f790abdc6e5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -311,7 +311,7 @@ public Collection<ExternalResource> findAllResources(final AnyObject anyObject)\n         return result;\n     }\n \n-    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Transactional(readOnly = true)\n     @Override\n     public Collection<String> findAllResourceKeys(final String key) {\n         return CollectionUtils.collect(findAllResources(authFind(key)), EntityUtils.<ExternalResource>keyTransformer());"},{"sha":"47d6f3009a51193ff5d1aba98520dbe5827a8d52","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -562,7 +562,7 @@ public Collection<ExternalResource> findAllResources(final User user) {\n         return result;\n     }\n \n-    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Transactional(readOnly = true)\n     @Override\n     public Collection<String> findAllResourceKeys(final String key) {\n         return CollectionUtils.collect(findAllResources(authFind(key)), EntityUtils.keyTransformer());"},{"sha":"b02c34acdd6d9b1080785ade2153226fbbaaad10","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/PropagationByResource.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -236,6 +236,12 @@ public boolean contains(final ResourceOperation type, final String resourceKey)\n         return result;\n     }\n \n+    public boolean contains(final String resourceKey) {\n+        return toBeCreated.contains(resourceKey)\n+                || toBeUpdated.contains(resourceKey)\n+                || toBeDeleted.contains(resourceKey);\n+    }\n+\n     /**\n      * Get resources for a given resource operation type.\n      *"},{"sha":"9b23633cb6adad8752ef9e0f8f300cbd2debd6fa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Propagation;\n@@ -123,14 +124,26 @@ public List<PropagationStatus> delete(final String key, final boolean nullPriori\n     public List<PropagationStatus> delete(\n             final String key, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(ResourceOperation.DELETE, anyObjectDAO.findAllResourceKeys(key));\n+\n+        // Note here that we can only notify about \"delete\", not any other\n+        // task defined in workflow process definition: this because this\n+        // information could only be available after awfAdapter.delete(), which\n+        // will also effectively remove user from db, thus making virtually\n+        // impossible by NotificationManager to fetch required user information\n         List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 key,\n-                null,\n+                propByRes,\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n-        awfAdapter.delete(key);\n+        try {\n+            awfAdapter.delete(key);\n+        } catch (PropagationException e) {\n+            throw e;\n+        }\n \n         return propagationReporter.getStatuses();\n     }"},{"sha":"b4090d84d8aeb8acd0e78577c27b47f8f648ac04","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -69,7 +68,7 @@ public class VirAttrHandlerImpl implements VirAttrHandler {\n     private AnyUtilsFactory anyUtilsFactory;\n \n     private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSchema> schemas) {\n-        Collection<? extends ExternalResource> ownedResources = anyUtilsFactory.getInstance(any).getAllResources(any);\n+        Set<ExternalResource> ownedResources = anyUtilsFactory.getInstance(any).getAllResources(any);\n \n         Map<VirSchema, List<String>> result = new HashMap<>();\n \n@@ -179,7 +178,7 @@ public Map<VirSchema, List<String>> getValues(final Any<?> any, final Membership\n         return getValues(\n                 any,\n                 anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class).\n-                getForMembership(membership.getRightEnd()));\n+                        getForMembership(membership.getRightEnd()));\n     }\n \n }"},{"sha":"b25712b0517453430bd3df1d33db9720f1629076","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -26,6 +26,7 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -93,6 +94,20 @@ abstract class AbstractAnyDataBinder {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractAnyDataBinder.class);\n \n+    protected static class PropByResContains implements Predicate<String> {\n+\n+        private final PropagationByResource propByRes;\n+\n+        PropByResContains(final PropagationByResource propByRes) {\n+            this.propByRes = propByRes;\n+        }\n+\n+        @Override\n+        public boolean evaluate(final String resourceKey) {\n+            return !propByRes.contains(resourceKey);\n+        }\n+    }\n+\n     @Autowired\n     protected SchemaDataBinder schemaDataBinder;\n \n@@ -287,7 +302,7 @@ protected void processAttrPatch(\n             final PlainSchema schema,\n             final PlainAttr<?> attr,\n             final AnyUtils anyUtils,\n-            final Set<ExternalResource> resources,\n+            final Collection<ExternalResource> resources,\n             final PropagationByResource propByRes,\n             final SyncopeClientException invalidValues) {\n "},{"sha":"5428f5f8af93ee1e13d02b4d53a430234fd90e8e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":29,"deletions":7,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -25,6 +25,7 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n@@ -231,10 +232,10 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n                 } else {\n                     LOG.error(\"{} cannot be assigned to {}\", group, anyObject);\n \n-                    SyncopeClientException unassignabled =\n+                    SyncopeClientException unassignable =\n                             SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n-                    unassignabled.getElements().add(\"Cannot be assigned: \" + group);\n-                    scce.addException(unassignabled);\n+                    unassignable.getElements().add(\"Cannot be assigned: \" + group);\n+                    scce.addException(unassignable);\n                 }\n             }\n         }\n@@ -326,18 +327,18 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                             } else {\n                                 LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n \n-                                SyncopeClientException unassignabled =\n+                                SyncopeClientException unassignable =\n                                         SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n-                                unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n-                                scce.addException(unassignabled);\n+                                unassignable.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                                scce.addException(unassignable);\n                             }\n                         }\n                     }\n                 }\n             }\n         }\n \n-        Set<ExternalResource> resources = anyUtils.getAllResources(anyObject);\n+        Collection<ExternalResource> resources = anyObjectDAO.findAllResources(anyObject);\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n@@ -437,6 +438,27 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n             }\n         }\n \n+        // finally double-check that there are no resources owned (after all changes above) that remain\n+        // not considered for provisioning\n+        anyObject = anyObjectDAO.save(anyObject);\n+        PropByResContains propByResContains = new PropByResContains(propByRes);\n+        Collection<String> prospectResources = anyObjectDAO.findAllResourceKeys(anyObject.getKey());\n+        for (String resourceKey : IterableUtils.filteredIterable(\n+                CollectionUtils.intersection(currentResources, prospectResources), propByResContains)) {\n+\n+            propByRes.add(ResourceOperation.DELETE, resourceKey);\n+        }\n+        for (String resourceKey : IterableUtils.filteredIterable(\n+                CollectionUtils.intersection(prospectResources, currentResources), propByResContains)) {\n+\n+            propByRes.add(ResourceOperation.CREATE, resourceKey);\n+        }\n+        for (String resourceKey : IterableUtils.filteredIterable(\n+                CollectionUtils.intersection(prospectResources, currentResources), propByResContains)) {\n+\n+            propByRes.add(ResourceOperation.UPDATE, resourceKey);\n+        }\n+\n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {\n             throw scce;"},{"sha":"3cd52c31778a4f41f30a068120f1e3850551c964","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":28,"deletions":7,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -272,10 +272,10 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n                 } else {\n                     LOG.error(\"{} cannot be assigned to {}\", group, user);\n \n-                    SyncopeClientException unassignabled =\n+                    SyncopeClientException unassignable =\n                             SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n-                    unassignabled.getElements().add(\"Cannot be assigned: \" + group);\n-                    scce.addException(unassignabled);\n+                    unassignable.getElements().add(\"Cannot be assigned: \" + group);\n+                    scce.addException(unassignable);\n                 }\n             }\n         }\n@@ -432,17 +432,17 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                         } else {\n                             LOG.error(\"{} cannot be assigned to {}\", otherEnd, user);\n \n-                            SyncopeClientException unassignabled =\n+                            SyncopeClientException unassignable =\n                                     SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n-                            unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n-                            scce.addException(unassignabled);\n+                            unassignable.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                            scce.addException(unassignable);\n                         }\n                     }\n                 }\n             }\n         }\n \n-        Set<ExternalResource> resources = anyUtils.getAllResources(user);\n+        Collection<ExternalResource> resources = userDAO.findAllResources(user);\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n@@ -554,6 +554,27 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n             }\n         }\n \n+        // finally double-check that there are no resources owned (after all changes above) that remain\n+        // not considered for provisioning\n+        user = userDAO.save(user);\n+        PropByResContains propByResContains = new PropByResContains(propByRes);\n+        Collection<String> prospectResources = userDAO.findAllResourceKeys(user.getKey());\n+        for (String resourceKey : IterableUtils.filteredIterable(\n+                CollectionUtils.intersection(currentResources, prospectResources), propByResContains)) {\n+\n+            propByRes.add(ResourceOperation.DELETE, resourceKey);\n+        }\n+        for (String resourceKey : IterableUtils.filteredIterable(\n+                CollectionUtils.intersection(prospectResources, currentResources), propByResContains)) {\n+\n+            propByRes.add(ResourceOperation.CREATE, resourceKey);\n+        }\n+        for (String resourceKey : IterableUtils.filteredIterable(\n+                CollectionUtils.intersection(prospectResources, currentResources), propByResContains)) {\n+\n+            propByRes.add(ResourceOperation.UPDATE, resourceKey);\n+        }\n+\n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {\n             throw scce;"},{"sha":"21727fd01dae2c18d81bd6ff652642a5a719542f","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -258,9 +258,7 @@ protected WorkflowResult<Pair<String, Boolean>> doCreate(\n         }\n \n         PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(\n-                ResourceOperation.CREATE,\n-                CollectionUtils.collect(userDAO.findAllResources(user), EntityUtils.keyTransformer()));\n+        propByRes.set(ResourceOperation.CREATE, userDAO.findAllResourceKeys(user.getKey()));\n \n         saveForFormSubmit(user, userTO.getPassword(), propByRes);\n "},{"sha":"ada196f3ed66ea12e15f3cb51b34f137e64ea2db","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultAnyObjectWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -44,7 +44,7 @@ protected WorkflowResult<String> doCreate(final AnyObjectTO anyObjectTO) {\n         anyObject = anyObjectDAO.save(anyObject);\n \n         PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(ResourceOperation.CREATE, anyObject.getResourceKeys());\n+        propByRes.set(ResourceOperation.CREATE, anyObjectDAO.findAllResourceKeys(anyObject.getKey()));\n \n         return new WorkflowResult<>(anyObject.getKey(), propByRes, \"create\");\n     }"},{"sha":"e3b87baf6bac63483cd69505b05906b3378f974e","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -79,9 +79,7 @@ protected WorkflowResult<Pair<String, Boolean>> doCreate(\n         user = userDAO.save(user);\n \n         PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(\n-                ResourceOperation.CREATE,\n-                CollectionUtils.collect(userDAO.findAllResources(user), EntityUtils.keyTransformer()));\n+        propByRes.set(ResourceOperation.CREATE, userDAO.findAllResourceKeys(user.getKey()));\n \n         return new WorkflowResult<Pair<String, Boolean>>(\n                 new ImmutablePair<>(user.getKey(), propagateEnable), propByRes, \"create\");"},{"sha":"69dd12e370879e046e9f87a985552c4a7a2c72da","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -599,8 +599,7 @@ public void updatePasswordOnly() {\n         assertFalse(beforeTasks <= 0);\n \n         UserTO userTO = getUniqueSampleTO(\"pwdonly@t.com\");\n-        userTO.getMemberships().add(new MembershipTO.Builder().\n-                group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         userTO = createUser(userTO).getEntity();\n \n@@ -615,7 +614,7 @@ public void updatePasswordOnly() {\n \n         int afterTasks = taskService.list(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build()).getTotalCount();\n-        assertFalse(beforeTasks <= 0);\n+        assertFalse(afterTasks <= 0);\n \n         assertTrue(beforeTasks < afterTasks);\n     }"},{"sha":"df32cad28b42964f23f1deadce3b53da9270166c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=ca0fcf1b728c9c6937b55fd0a8bead1d91d3edb4","patch":"@@ -1344,4 +1344,32 @@ public void issueSYNCOPE881() {\n         // 5. verify that user is not in LDAP anynmore\n         assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, userDn.getValues().get(0)));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1099() {\n+        // 1. create group with dynamic condition and resource\n+        GroupTO group = GroupITCase.getSampleTO(\"syncope1099G\");\n+        group.getResources().clear();\n+        group.getResources().add(RESOURCE_NAME_TESTDB);\n+        group.setUDynMembershipCond(\"firstname==issueSYNCOPE1099\");\n+\n+        group = createGroup(group).getEntity();\n+        assertNotNull(group);\n+\n+        // 2. create user matching the condition above\n+        UserTO user = UserITCase.getUniqueSampleTO(\"syncope1099U@apache.org\");\n+        user.getPlainAttrMap().get(\"firstname\").getValues().set(0, \"issueSYNCOPE1099\");\n+\n+        ProvisioningResult<UserTO> created = createUser(user);\n+        assertNotNull(created);\n+\n+        // 3. verify that dynamic membership is set and that resource is consequently assigned\n+        user = created.getEntity();\n+        assertTrue(user.getDynGroups().contains(group.getKey()));\n+        assertTrue(user.getResources().contains(RESOURCE_NAME_TESTDB));\n+\n+        // 4. verify that propagation happened towards the resource of the dynamic group\n+        assertFalse(created.getPropagationStatuses().isEmpty());\n+        assertEquals(RESOURCE_NAME_TESTDB, created.getPropagationStatuses().get(0).getResource());\n+    }\n }"}]}