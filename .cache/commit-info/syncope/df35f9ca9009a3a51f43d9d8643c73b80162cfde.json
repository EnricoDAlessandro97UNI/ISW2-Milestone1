{"sha":"df35f9ca9009a3a51f43d9d8643c73b80162cfde","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRmMzVmOWNhOTAwOWEzYTUxZjQzZDlkODY0M2M3M2I4MDE2MmNmZGU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-11T12:04:27Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-11T12:04:27Z"},"message":"[SYNCOPE-1222] Better resource management in case of membership removal","tree":{"sha":"38606e0ae0e4c9ef75065c6d51809ae93f7dc3ef","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/38606e0ae0e4c9ef75065c6d51809ae93f7dc3ef"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/df35f9ca9009a3a51f43d9d8643c73b80162cfde","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/df35f9ca9009a3a51f43d9d8643c73b80162cfde","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/df35f9ca9009a3a51f43d9d8643c73b80162cfde","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/df35f9ca9009a3a51f43d9d8643c73b80162cfde/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"cea47da1a1510446b7bd62fbc8e45cc8757d6611","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cea47da1a1510446b7bd62fbc8e45cc8757d6611","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cea47da1a1510446b7bd62fbc8e45cc8757d6611"}],"stats":{"total":127,"additions":84,"deletions":43},"files":[{"sha":"c6770637634e6ca2303994a2af4aefd244cb6da4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":31,"deletions":10,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/df35f9ca9009a3a51f43d9d8643c73b80162cfde/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/df35f9ca9009a3a51f43d9d8643c73b80162cfde/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=df35f9ca9009a3a51f43d9d8643c73b80162cfde","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -262,9 +263,6 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         // attributes and resources\n         propByRes.merge(fill(anyObject, anyObjectPatch, anyUtils, scce));\n \n-        Set<String> toBeDeprovisioned = new HashSet<>();\n-        Set<String> toBeProvisioned = new HashSet<>();\n-\n         // relationships\n         anyObjectPatch.getRelationships().stream().\n                 filter(patch -> patch.getRelationshipTO() != null).forEachOrdered((patch) -> {\n@@ -277,9 +275,6 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                 if (relationship.isPresent()) {\n                     anyObject.getRelationships().remove(relationship.get());\n                     relationship.get().setLeftEnd(null);\n-\n-                    toBeDeprovisioned.addAll(\n-                            anyObjectDAO.findAllResourceKeys(relationship.get().getRightEnd().getKey()));\n                 }\n \n                 if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n@@ -303,8 +298,6 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                             newRelationship.setLeftEnd(anyObject);\n \n                             anyObject.add(newRelationship);\n-\n-                            toBeProvisioned.addAll(anyObjectDAO.findAllResourceKeys(otherEnd.getKey()));\n                         } else {\n                             LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n \n@@ -318,7 +311,25 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n             }\n         });\n \n+        // prepare for membership-related resource management\n         Collection<ExternalResource> resources = anyObjectDAO.findAllResources(anyObject);\n+\n+        Map<String, Set<String>> reasons = new HashMap<>();\n+        anyObject.getResources().forEach(resource -> {\n+            reasons.put(resource.getKey(), new HashSet<>(Collections.singleton(anyObject.getKey())));\n+        });\n+        anyObjectDAO.findAllGroupKeys(anyObject).forEach(group -> {\n+            groupDAO.findAllResourceKeys(group).forEach(resource -> {\n+                if (!reasons.containsKey(resource)) {\n+                    reasons.put(resource, new HashSet<>());\n+                }\n+                reasons.get(resource).add(group);\n+            });\n+        });\n+\n+        Set<String> toBeDeprovisioned = new HashSet<>();\n+        Set<String> toBeProvisioned = new HashSet<>();\n+\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n@@ -334,7 +345,12 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                 });\n \n                 if (membPatch.getOperation() == PatchOperation.DELETE) {\n-                    toBeDeprovisioned.addAll(groupDAO.findAllResourceKeys(membership.get().getRightEnd().getKey()));\n+                    groupDAO.findAllResourceKeys(membership.get().getRightEnd().getKey()).stream().\n+                            filter(resource -> reasons.containsKey(resource)).\n+                            forEach(resource -> {\n+                                reasons.get(resource).remove(membership.get().getRightEnd().getKey());\n+                                toBeProvisioned.add(resource);\n+                            });\n                 }\n             }\n             if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n@@ -389,10 +405,15 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n             }\n         });\n \n+        // finalize resource management\n+        reasons.entrySet().stream().\n+                filter(entry -> entry.getValue().isEmpty()).\n+                forEach(entry -> toBeDeprovisioned.add(entry.getKey()));\n+\n         propByRes.addAll(ResourceOperation.DELETE, toBeDeprovisioned);\n         propByRes.addAll(ResourceOperation.UPDATE, toBeProvisioned);\n \n-        // In case of new memberships all current resources need to be updated in order to propagate new group\n+        // in case of new memberships all current resources need to be updated in order to propagate new group\n         // attribute values.\n         if (!toBeDeprovisioned.isEmpty() || !toBeProvisioned.isEmpty()) {\n             currentResources.removeAll(toBeDeprovisioned);"},{"sha":"770e7da8dc100f3242a00574f60fd7e04e0355cd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":31,"deletions":10,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/df35f9ca9009a3a51f43d9d8643c73b80162cfde/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/df35f9ca9009a3a51f43d9d8643c73b80162cfde/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=df35f9ca9009a3a51f43d9d8643c73b80162cfde","patch":"@@ -21,6 +21,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -365,9 +366,6 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         // attributes and resources\n         propByRes.merge(fill(user, userPatch, anyUtils, scce));\n \n-        Set<String> toBeDeprovisioned = new HashSet<>();\n-        Set<String> toBeProvisioned = new HashSet<>();\n-\n         // relationships\n         userPatch.getRelationships().stream().\n                 filter(patch -> patch.getRelationshipTO() != null).forEachOrdered((patch) -> {\n@@ -380,9 +378,6 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                 if (relationship.isPresent()) {\n                     user.getRelationships().remove(relationship.get());\n                     relationship.get().setLeftEnd(null);\n-\n-                    toBeDeprovisioned.addAll(\n-                            anyObjectDAO.findAllResourceKeys(relationship.get().getRightEnd().getKey()));\n                 }\n \n                 if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n@@ -396,8 +391,6 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                         newRelationship.setLeftEnd(user);\n \n                         user.add(newRelationship);\n-\n-                        toBeProvisioned.addAll(anyObjectDAO.findAllResourceKeys(otherEnd.getKey()));\n                     } else {\n                         LOG.error(\"{} cannot be assigned to {}\", otherEnd, user);\n \n@@ -410,7 +403,25 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n             }\n         });\n \n+        // prepare for membership-related resource management\n         Collection<ExternalResource> resources = userDAO.findAllResources(user);\n+\n+        Map<String, Set<String>> reasons = new HashMap<>();\n+        user.getResources().forEach(resource -> {\n+            reasons.put(resource.getKey(), new HashSet<>(Collections.singleton(user.getKey())));\n+        });\n+        userDAO.findAllGroupKeys(user).forEach(group -> {\n+            groupDAO.findAllResourceKeys(group).forEach(resource -> {\n+                if (!reasons.containsKey(resource)) {\n+                    reasons.put(resource, new HashSet<>());\n+                }\n+                reasons.get(resource).add(group);\n+            });\n+        });\n+\n+        Set<String> toBeDeprovisioned = new HashSet<>();\n+        Set<String> toBeProvisioned = new HashSet<>();\n+\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n@@ -427,7 +438,12 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                 });\n \n                 if (membPatch.getOperation() == PatchOperation.DELETE) {\n-                    toBeDeprovisioned.addAll(groupDAO.findAllResourceKeys(membership.get().getRightEnd().getKey()));\n+                    groupDAO.findAllResourceKeys(membership.get().getRightEnd().getKey()).stream().\n+                            filter(resource -> reasons.containsKey(resource)).\n+                            forEach(resource -> {\n+                                reasons.get(resource).remove(membership.get().getRightEnd().getKey());\n+                                toBeProvisioned.add(resource);\n+                            });\n                 }\n             }\n             if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n@@ -494,10 +510,15 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n             }\n         });\n \n+        // finalize resource management\n+        reasons.entrySet().stream().\n+                filter(entry -> entry.getValue().isEmpty()).\n+                forEach(entry -> toBeDeprovisioned.add(entry.getKey()));\n+\n         propByRes.addAll(ResourceOperation.DELETE, toBeDeprovisioned);\n         propByRes.addAll(ResourceOperation.UPDATE, toBeProvisioned);\n \n-        // In case of new memberships all current resources need to be updated in order to propagate new group\n+        // in case of new memberships all current resources need to be updated in order to propagate new group\n         // attribute values.\n         if (!toBeDeprovisioned.isEmpty() || !toBeProvisioned.isEmpty()) {\n             currentResources.removeAll(toBeDeprovisioned);"},{"sha":"2a1e944e3f6af6d0202bd7d71080c03bbd95aca5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":22,"deletions":23,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/df35f9ca9009a3a51f43d9d8643c73b80162cfde/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/df35f9ca9009a3a51f43d9d8643c73b80162cfde/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=df35f9ca9009a3a51f43d9d8643c73b80162cfde","patch":"@@ -197,7 +197,7 @@ public void issue234() {\n     }\n \n     @Test\n-    public final void issue280() {\n+    public void issue280() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"issue280@syncope.apache.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n@@ -367,7 +367,7 @@ public void issueSYNCOPE185() {\n     @Test()\n     public void issueSYNCOPE51() {\n         AttrTO defaultCA = configurationService.get(\"password.cipher.algorithm\");\n-        final String originalCAValue = defaultCA.getValues().get(0);\n+        String originalCAValue = defaultCA.getValues().get(0);\n         defaultCA.getValues().set(0, \"MD5\");\n         configurationService.set(defaultCA);\n \n@@ -466,23 +466,23 @@ public void issueSYNCOPE122() {\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n \n-        final String pwdOnSyncope = userTO.getPassword();\n+        String pwdOnSyncope = userTO.getPassword();\n \n         ConnObjectTO userOnDb = resourceService.readConnObject(\n                 RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userTO.getKey());\n-        final AttrTO pwdOnTestDbAttr = userOnDb.getAttr(OperationalAttributes.PASSWORD_NAME).get();\n+        AttrTO pwdOnTestDbAttr = userOnDb.getAttr(OperationalAttributes.PASSWORD_NAME).get();\n         assertNotNull(pwdOnTestDbAttr);\n         assertNotNull(pwdOnTestDbAttr.getValues());\n         assertFalse(pwdOnTestDbAttr.getValues().isEmpty());\n-        final String pwdOnTestDb = pwdOnTestDbAttr.getValues().iterator().next();\n+        String pwdOnTestDb = pwdOnTestDbAttr.getValues().iterator().next();\n \n         ConnObjectTO userOnDb2 = resourceService.readConnObject(\n                 RESOURCE_NAME_TESTDB2, AnyTypeKind.USER.name(), userTO.getKey());\n-        final AttrTO pwdOnTestDb2Attr = userOnDb2.getAttr(OperationalAttributes.PASSWORD_NAME).get();\n+        AttrTO pwdOnTestDb2Attr = userOnDb2.getAttr(OperationalAttributes.PASSWORD_NAME).get();\n         assertNotNull(pwdOnTestDb2Attr);\n         assertNotNull(pwdOnTestDb2Attr.getValues());\n         assertFalse(pwdOnTestDb2Attr.getValues().isEmpty());\n-        final String pwdOnTestDb2 = pwdOnTestDb2Attr.getValues().iterator().next();\n+        String pwdOnTestDb2 = pwdOnTestDb2Attr.getValues().iterator().next();\n \n         // 2. request to change password only on testdb (no Syncope, no testdb2)\n         UserPatch userPatch = new UserPatch();\n@@ -503,15 +503,15 @@ public void issueSYNCOPE122() {\n \n         // 3c. verify that password *has* changed on testdb\n         userOnDb = resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userTO.getKey());\n-        final AttrTO pwdOnTestDbAttrAfter = userOnDb.getAttr(OperationalAttributes.PASSWORD_NAME).get();\n+        AttrTO pwdOnTestDbAttrAfter = userOnDb.getAttr(OperationalAttributes.PASSWORD_NAME).get();\n         assertNotNull(pwdOnTestDbAttrAfter);\n         assertNotNull(pwdOnTestDbAttrAfter.getValues());\n         assertFalse(pwdOnTestDbAttrAfter.getValues().isEmpty());\n         assertNotEquals(pwdOnTestDb, pwdOnTestDbAttrAfter.getValues().iterator().next());\n \n         // 3d. verify that password hasn't changed on testdb2\n         userOnDb2 = resourceService.readConnObject(RESOURCE_NAME_TESTDB2, AnyTypeKind.USER.name(), userTO.getKey());\n-        final AttrTO pwdOnTestDb2AttrAfter = userOnDb2.getAttr(OperationalAttributes.PASSWORD_NAME).get();\n+        AttrTO pwdOnTestDb2AttrAfter = userOnDb2.getAttr(OperationalAttributes.PASSWORD_NAME).get();\n         assertNotNull(pwdOnTestDb2AttrAfter);\n         assertNotNull(pwdOnTestDb2AttrAfter.getValues());\n         assertFalse(pwdOnTestDb2AttrAfter.getValues().isEmpty());\n@@ -522,7 +522,7 @@ public void issueSYNCOPE122() {\n     public void issueSYNCOPE136AES() {\n         // 1. read configured cipher algorithm in order to be able to restore it at the end of test\n         AttrTO pwdCipherAlgo = configurationService.get(\"password.cipher.algorithm\");\n-        final String origpwdCipherAlgo = pwdCipherAlgo.getValues().get(0);\n+        String origpwdCipherAlgo = pwdCipherAlgo.getValues().get(0);\n \n         // 2. set AES password cipher algorithm\n         pwdCipherAlgo.getValues().set(0, \"AES\");\n@@ -641,6 +641,7 @@ public void issueSYNCOPE354() {\n \n         userTO = createUser(userTO).getEntity();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n+        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey()));\n \n         // 3. read group on resource, check that user DN is included in uniqueMember\n         ConnObjectTO connObj = resourceService.readConnObject(\n@@ -664,7 +665,12 @@ public void issueSYNCOPE354() {\n         assertFalse(connObj.getAttr(\"uniqueMember\").get().getValues().\n                 contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n \n-        // 6. restore original resource-ldap group mapping\n+        // 6. user has still the LDAP resource assigned - SYNCOPE-1222\n+        userTO = userService.read(userTO.getKey());\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n+        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey()));\n+\n+        // 7. restore original resource-ldap group mapping\n         ldap.getProvision(AnyTypeKind.GROUP.name()).get().getMapping().getItems().stream().\n                 filter(item -> (\"uniqueMember\".equals(item.getExtAttrName()))).\n                 forEachOrdered(item -> {\n@@ -781,16 +787,9 @@ public void issueSYNCOPE402() {\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n         ProvisioningResult<UserTO> result = updateUser(userPatch);\n \n-        List<PropagationStatus> propagationStatuses = result.getPropagationStatuses();\n-        PropagationStatus ws1PropagationStatus = null;\n-        if (propagationStatuses != null) {\n-            for (PropagationStatus propStatus : propagationStatuses) {\n-                if (RESOURCE_NAME_WS1.equals(propStatus.getResource())) {\n-                    ws1PropagationStatus = propStatus;\n-                    break;\n-                }\n-            }\n-        }\n+        PropagationStatus ws1PropagationStatus = result.getPropagationStatuses().stream().\n+                filter(propStatus -> RESOURCE_NAME_WS1.equals(propStatus.getResource())).\n+                findFirst().orElse(null);\n         assertNotNull(ws1PropagationStatus);\n         assertEquals(RESOURCE_NAME_WS1, ws1PropagationStatus.getResource());\n         assertNotNull(ws1PropagationStatus.getFailureReason());\n@@ -1008,7 +1007,7 @@ public void issueSYNCOPE505DB() throws Exception {\n         assertEquals(1, user.getResources().size());\n \n         // 4. Check that the DB resource has the correct password\n-        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n         String value = jdbcTemplate.queryForObject(\n                 \"SELECT PASSWORD FROM test WHERE ID=?\", String.class, user.getUsername());\n         assertEquals(Encryptor.getInstance().encode(\"security123\", CipherAlgorithm.SHA1), value.toUpperCase());\n@@ -1396,7 +1395,7 @@ public void issueSYNCOPE1099() {\n \n         // 3. verify that dynamic membership is set and that resource is consequently assigned\n         user = created.getEntity();\n-        final String groupKey = group.getKey();\n+        String groupKey = group.getKey();\n         assertTrue(user.getDynMemberships().stream().anyMatch(m -> m.getGroupKey().equals(groupKey)));\n         assertTrue(user.getResources().contains(RESOURCE_NAME_TESTDB));\n "}]}