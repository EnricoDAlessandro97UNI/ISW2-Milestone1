{"sha":"52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUyYzBhZDNmMmY1ZDYyNTljZTU4M2EwODE3Y2UyZGJmMTBjZWVjZjQ=","commit":{"author":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-02-06T14:51:35Z"},"committer":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-02-06T14:51:35Z"},"message":"[SYNCOPE-1267] New binary Schema validator to check MIME types","tree":{"sha":"df5d177b3491d03fa55e0649d16001dc113741b4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/df5d177b3491d03fa55e0649d16001dc113741b4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"parents":[{"sha":"f34f1f40da821466f39f83ce73dad54290d667e9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f34f1f40da821466f39f83ce73dad54290d667e9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f34f1f40da821466f39f83ce73dad54290d667e9"}],"stats":{"total":278,"additions":273,"deletions":5},"files":[{"sha":"c996bcc010247ce846a31d599bf5937ba0c8eed3","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -67,6 +67,8 @@ public class PlainSchemaDetails extends AbstractSchemaDetailsPanel {\n \n     private final MultiFieldPanel<String> enumerationKeys;\n \n+    private final AjaxDropDownChoicePanel<String> validator;\n+\n     public PlainSchemaDetails(\n             final String id,\n             final PageReference pageReference,\n@@ -233,6 +235,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                         binaryParams, mimeType);\n                 target.add(conversionParams);\n                 target.add(typeParams);\n+                target.add(validator);\n             }\n         }\n         );\n@@ -247,8 +250,9 @@ protected List<String> load() {\n                         map(EntityTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n-        final AjaxDropDownChoicePanel<String> validator = new AjaxDropDownChoicePanel<>(\"validator\",\n+        validator = new AjaxDropDownChoicePanel<>(\"validator\",\n                 getString(\"validator\"), new PropertyModel<>(schemaTO, \"validator\"));\n+        validator.setOutputMarkupId(true);\n         ((DropDownChoice) validator.getField()).setNullValid(true);\n         validator.setChoices(validators.getObject());\n         schemaForm.add(validator);\n@@ -330,6 +334,8 @@ private void showHide(final AbstractSchemaTO schema, final AjaxDropDownChoicePan\n             binaryParams.setVisible(false);\n             mimeType.setModelObject(null);\n             mimeType.setChoices(null);\n+\n+            PlainSchemaTO.class.cast(schema).setValidator(null);\n         } else if (AttrSchemaType.Enum.ordinal() == typeOrdinal) {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -356,6 +362,8 @@ private void showHide(final AbstractSchemaTO schema, final AjaxDropDownChoicePan\n             binaryParams.setVisible(false);\n             mimeType.setModelObject(null);\n             mimeType.setChoices(null);\n+\n+            PlainSchemaTO.class.cast(schema).setValidator(null);\n         } else if (AttrSchemaType.Encrypted.ordinal() == typeOrdinal) {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -378,6 +386,8 @@ private void showHide(final AbstractSchemaTO schema, final AjaxDropDownChoicePan\n             binaryParams.setVisible(false);\n             mimeType.setModelObject(null);\n             mimeType.setChoices(null);\n+\n+            PlainSchemaTO.class.cast(schema).setValidator(null);\n         } else if (AttrSchemaType.Binary.ordinal() == typeOrdinal) {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -401,6 +411,8 @@ private void showHide(final AbstractSchemaTO schema, final AjaxDropDownChoicePan\n \n             binaryParams.setVisible(true);\n             mimeType.setChoices(MIME_TYPES_LOADER.getMimeTypes());\n+\n+            PlainSchemaTO.class.cast(schema).setValidator(\"BinaryValidator\");\n         } else {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -425,6 +437,8 @@ private void showHide(final AbstractSchemaTO schema, final AjaxDropDownChoicePan\n             binaryParams.setVisible(false);\n             mimeType.setModelObject(null);\n             mimeType.setChoices(null);\n+\n+            PlainSchemaTO.class.cast(schema).setValidator(null);\n         }\n     }\n }"},{"sha":"545e6cb568921853d684a5d95e072fdff4cf5800","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -103,6 +103,11 @@ under the License.\n       <artifactId>syncope-core-spring</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.tika</groupId>\n+      <artifactId>tika-core</artifactId>\n+    </dependency>\n         \n     <!-- TEST -->\n     <dependency> "},{"sha":"a7dbb8dc874a12245f33f918a0f3bd69b523ee71","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/BinaryValidator.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBinaryValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBinaryValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBinaryValidator.java?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.attrvalue.validation;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.tika.Tika;\n+\n+public class BinaryValidator extends AbstractValidator {\n+\n+    private static final long serialVersionUID = 1344152444666540361L;\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    @Override\n+    protected void doValidate(final PlainAttrValue attrValue) {\n+        // check Binary schemas MIME Type mismatches\n+        if (attrValue.getBinaryValue() != null) {\n+            PlainSchema currentSchema = attrValue.getAttr().getSchema();\n+            byte[] binaryValue = attrValue.getBinaryValue();\n+            String mimeType = detectSchemaMimeType(binaryValue);\n+            boolean valid = true;\n+            if (!mimeType.equals(currentSchema.getMimeType())) {\n+                if (mimeType.equals(\"text/plain\")\n+                        && currentSchema.getMimeType().equals(\"application/json\")) {\n+                    String decoded = new String(binaryValue).trim();\n+                    valid = (decoded.startsWith(\"{\") && decoded.endsWith(\"}\"))\n+                            || (decoded.startsWith(\"[\") && decoded.endsWith(\"]\"))\n+                            && isValidJSON(decoded);\n+                } else {\n+                    valid = false;\n+                }\n+            }\n+            if (!valid) {\n+                throw new InvalidPlainAttrValueException(\n+                        \"Found MIME type: '\"\n+                        + mimeType\n+                        + \"', expecting: '\"\n+                        + currentSchema.getMimeType()\n+                        + \"'\");\n+            }\n+        }\n+    }\n+\n+    private String detectSchemaMimeType(final byte[] value) {\n+        Tika tika = new Tika();\n+        tika.setMaxStringLength(-1);\n+        return tika.detect(value);\n+    }\n+\n+    private boolean isValidJSON(final String value) {\n+        try {\n+            MAPPER.readTree(value);\n+            return true;\n+        } catch (IOException e) {\n+            return false;\n+        }\n+    }\n+}"},{"sha":"4e338951c00300bb45a09a23ba4dd9e4f4329ca9","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -184,6 +184,9 @@ under the License.\n   <PlainSchema id=\"email\" type=\"String\" anyTypeClass_id=\"BaseUser\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                validator_id=\"EmailAddressValidator\"/>\n+  \n+  <Implementation id=\"BinaryValidator\" type=\"VALIDATOR\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.BinaryValidator\"/>\n \n   <Implementation id=\"PullJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n                   body=\"org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate\"/>"},{"sha":"c0982e6e508780118148911dfae3e4c86662eddc","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -43,7 +43,7 @@ public void findAll() {\n         List<Implementation> implementations = implementationDAO.findAll();\n         assertFalse(implementations.isEmpty());\n \n-        assertEquals(16, implementations.size());\n+        assertEquals(17, implementations.size());\n \n         implementations = implementationDAO.find(ImplementationType.PULL_ACTIONS);\n         assertEquals(1, implementations.size());\n@@ -64,7 +64,7 @@ public void findAll() {\n         assertEquals(3, implementations.size());\n \n         implementations = implementationDAO.find(ImplementationType.VALIDATOR);\n-        assertEquals(1, implementations.size());\n+        assertEquals(2, implementations.size());\n \n         implementations = implementationDAO.find(ImplementationType.PULL_CORRELATION_RULE);\n         assertEquals(1, implementations.size());"},{"sha":"ec749b7e49ae42a69c30e9415d81ef325b7d3741","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -465,6 +465,9 @@ under the License.\n   <PlainSchema id=\"photo\" type=\"Binary\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                mimeType=\"image/jpeg\"/>\n+  \n+  <Implementation id=\"BinaryValidator\" type=\"VALIDATOR\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.BinaryValidator\"/>\n \n   <SyncopeSchema id=\"csvuserid\"/>\n   <DerSchema id=\"csvuserid\" expression=\"firstname + ',' + surname\" anyTypeClass_id=\"csv\"/>"},{"sha":"97de7cd96dceea1834b8994e3c9160e4395b24b7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -188,9 +188,12 @@ private void fillAttr(\n                 try {\n                     attr.add(value, anyUtils);\n                 } catch (InvalidPlainAttrValueException e) {\n-                    LOG.warn(\"Invalid value for attribute \" + schema.getKey() + \": \" + value, e);\n+                    String valueToPrint = value.length() > 40\n+                            ? value.substring(0, 20) + \"...\"\n+                            : value;\n+                    LOG.warn(\"Invalid value for attribute \" + schema.getKey() + \": \" + valueToPrint, e);\n \n-                    invalidValues.getElements().add(schema.getKey() + \": \" + value + \" - \" + e.getMessage());\n+                    invalidValues.getElements().add(schema.getKey() + \": \" + valueToPrint + \" - \" + e.getMessage());\n                 }\n             }\n         });"},{"sha":"f6ec44829bb250ffd90332bd2ea17728d0c3383b","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -59,6 +59,7 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.AlwaysTrueValidator;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.BasicValidator;\n+import org.apache.syncope.core.persistence.jpa.attrvalue.validation.BinaryValidator;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultAccountRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPasswordRule;\n@@ -199,6 +200,7 @@ public class ITImplementationLookup implements ImplementationLookup {\n             classNames.add(BasicValidator.class.getName());\n             classNames.add(EmailAddressValidator.class.getName());\n             classNames.add(AlwaysTrueValidator.class.getName());\n+            classNames.add(BinaryValidator.class.getName());\n             put(ImplementationType.VALIDATOR, classNames);\n \n             classNames = new HashSet<>();"},{"sha":"395572f5f1a88ce2b3076513c282f3e3b08216bf","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PlainSchemaITCase.java","status":"modified","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -25,11 +25,15 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import java.io.IOException;\n+import java.util.Base64;\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -39,10 +43,12 @@\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n+import org.apache.cxf.helpers.IOUtils;\n \n public class PlainSchemaITCase extends AbstractITCase {\n \n@@ -141,6 +147,95 @@ public void createBinary() {\n         createSchema(SchemaType.PLAIN, schemaTO);\n     }\n \n+    @Test\n+    public void testBinaryValidation() throws IOException {\n+        // pdf - with validator\n+        PlainSchemaTO schemaTOpdf = new PlainSchemaTO();\n+        schemaTOpdf.setKey(\"BinaryPDF\");\n+        schemaTOpdf.setType(AttrSchemaType.Binary);\n+        schemaTOpdf.setMimeType(\"application/pdf\");\n+        schemaTOpdf.setValidator(\"BinaryValidator\");\n+        schemaTOpdf.setAnyTypeClass(\"minimal user\");\n+\n+        createSchema(SchemaType.PLAIN, schemaTOpdf);\n+\n+        // json - with validator\n+        PlainSchemaTO schemaTOjson = new PlainSchemaTO();\n+        schemaTOjson.setKey(\"BinaryJSON\");\n+        schemaTOjson.setType(AttrSchemaType.Binary);\n+        schemaTOjson.setMimeType(\"application/json\");\n+        schemaTOjson.setValidator(\"BinaryValidator\");\n+        schemaTOjson.setAnyTypeClass(\"minimal user\");\n+\n+        createSchema(SchemaType.PLAIN, schemaTOjson);\n+\n+        // json - no validator\n+        PlainSchemaTO schemaTOjson2 = new PlainSchemaTO();\n+        schemaTOjson2.setKey(\"BinaryJSON2\");\n+        schemaTOjson2.setType(AttrSchemaType.Binary);\n+        schemaTOjson2.setMimeType(\"application/json\");\n+        schemaTOjson2.setAnyTypeClass(\"minimal user\");\n+\n+        createSchema(SchemaType.PLAIN, schemaTOjson2);\n+\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"test@syncope.apache.org\");\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        // validation OK - application/pdf -> application/pdf\n+        userPatch.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+                attrTO(attrTO(\"BinaryPDF\",\n+                        Base64.getEncoder().encodeToString(\n+                                IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.pdf\"))))).\n+                build());\n+\n+        updateUser(userPatch);\n+        assertNotNull(userService.read(userTO.getKey()).getPlainAttr(\"BinaryPDF\"));\n+\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        // validation KO - text/html -> application/pdf\n+        try {\n+            userPatch.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+                    attrTO(attrTO(\"BinaryPDF\",\n+                            Base64.getEncoder().encodeToString(\n+                                    IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.html\"))))).\n+                    build());\n+\n+            updateUser(userPatch);\n+            fail(\"This should not be reacheable\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidValues, e.getType());\n+        }\n+\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        // validation ok - application/json -> application/json\n+        userPatch.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+                attrTO(attrTO(\"BinaryJSON\",\n+                        Base64.getEncoder().encodeToString(\n+                                IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.json\"))))).\n+                build());\n+\n+        updateUser(userPatch);\n+        assertNotNull(userService.read(userTO.getKey()).getPlainAttr(\"BinaryJSON\"));\n+\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        // no validation - application/xml -> application/json\n+        userPatch.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+                attrTO(attrTO(\"BinaryJSON2\",\n+                        Base64.getEncoder().encodeToString(\n+                                IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.xml\"))))).\n+                build());\n+\n+        updateUser(userPatch);\n+        assertNotNull(userService.read(userTO.getKey()).getPlainAttr(\"BinaryJSON2\"));\n+    }\n+\n     @Test\n     public void delete() {\n         PlainSchemaTO schemaTO = buildPlainSchemaTO(\"todelete\", AttrSchemaType.String);"},{"sha":"d55d628c5acb9d56f962d2da75e20b157fc8865a","filename":"fit/core-reference/src/test/resources/test.html","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.html?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -0,0 +1,30 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<!doctype html>\n+\n+<head>\n+  <meta charset=\"utf-8\">\n+  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n+  <meta name=\"description\" content=\"\">\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n+</head>\n+<body>\n+  <p> Syncope is Magic </p>\n+</body>\n+</html>"},{"sha":"fd88c8d65a785fc24dfa6dd1e3fed9fdc9c7d785","filename":"fit/core-reference/src/test/resources/test.json","status":"added","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.json?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -0,0 +1,3 @@\n+{\n+  \"message\": \"Syncope is Magic\"\n+}"},{"sha":"bed69a7f721f424aad286a2bfa9c096ce986cbd7","filename":"fit/core-reference/src/test/resources/test.pdf","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.pdf","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.pdf","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.pdf?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4"},{"sha":"66cad363a05f5714d2295c770903912bbe07e72c","filename":"fit/core-reference/src/test/resources/test.xml","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ftest.xml?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<Tests xmlns=\"http://www.test.com\">  \n+  <Test>  \n+    <Name>Syncope is Magic</Name>  \n+  </Test>\n+</Tests>  \n\\ No newline at end of file"},{"sha":"47752dfd8cd5ad65a32f2b9df4237014779d3404","filename":"pom.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=52c0ad3f2f5d6259ce583a0817ce2dbf10ceecf4","patch":"@@ -402,6 +402,8 @@ under the License.\n     <commons-lang.version>3.7</commons-lang.version>\n     <commons-text.version>1.2</commons-text.version>\n     <commons-logging.version>1.1.3</commons-logging.version>\n+    \n+    <tika.version>1.17</tika.version>\n \n     <joda.version>2.9.9</joda.version>\n \n@@ -1487,6 +1489,12 @@ under the License.\n         <artifactId>httpmime</artifactId>\n         <version>${httpclient.version}</version>\n       </dependency>\n+      \n+      <dependency>\n+        <groupId>org.apache.tika</groupId>\n+        <artifactId>tika-core</artifactId>\n+        <version>${tika.version}</version>\n+      </dependency>\n \n       <dependency>\n         <groupId>org.netbeans.api</groupId>"}]}