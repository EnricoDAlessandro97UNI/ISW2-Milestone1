{"sha":"79dd23cfc384ebbc5fc656206d1aa583a82aaf05","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc5ZGQyM2NmYzM4NGViYmM1ZmM2NTYyMDZkMWFhNTgzYTgyYWFmMDU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-04-29T11:22:10Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-04-29T11:22:10Z"},"message":"[SYNCOPE-368] Merge from 1_1_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1476969 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9b72435afcdc0d569068e0fe76c2a7a958960f1e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9b72435afcdc0d569068e0fe76c2a7a958960f1e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/79dd23cfc384ebbc5fc656206d1aa583a82aaf05","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/79dd23cfc384ebbc5fc656206d1aa583a82aaf05","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/79dd23cfc384ebbc5fc656206d1aa583a82aaf05","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8be896b4149c3b8c9dfbe1f2a93dc40ab5a9e88a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8be896b4149c3b8c9dfbe1f2a93dc40ab5a9e88a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8be896b4149c3b8c9dfbe1f2a93dc40ab5a9e88a"},{"sha":"c62aca26716cfec01cbe1700994cec8e2dbc0a20","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c62aca26716cfec01cbe1700994cec8e2dbc0a20","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c62aca26716cfec01cbe1700994cec8e2dbc0a20"}],"stats":{"total":155,"additions":84,"deletions":71},"files":[{"sha":"eb3abd33643a4a840da3ec9b6c0b91f676c796c7","filename":"common/src/main/java/org/apache/syncope/common/types/IntMappingType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java?ref=79dd23cfc384ebbc5fc656206d1aa583a82aaf05","patch":"@@ -117,7 +117,7 @@ public static Set<IntMappingType> getAttributeTypes(final AttributableType attri\n     public static Set<IntMappingType> getEmbedded() {\r\n         return EnumSet.of(\r\n                 IntMappingType.UserId, IntMappingType.Username, IntMappingType.Password,\r\n-                IntMappingType.RoleId, IntMappingType.RoleName,\r\n+                IntMappingType.RoleId, IntMappingType.RoleName, IntMappingType.RoleOwnerSchema,\r\n                 IntMappingType.MembershipId);\r\n     }\r\n \r"},{"sha":"fe8ef7979ea38f597d21b14c55bab8eaf1c921e0","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":28,"deletions":19,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=79dd23cfc384ebbc5fc656206d1aa583a82aaf05","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.rest;\n \n+import static org.apache.syncope.common.types.PolicyType.GLOBAL_SYNC;\n+import static org.apache.syncope.common.types.PolicyType.SYNC;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.fail;\n \n@@ -71,10 +73,13 @@\n import org.apache.syncope.common.services.UserWorkflowService;\n import org.apache.syncope.common.services.WorkflowService;\n import org.apache.syncope.common.to.AbstractSchemaTO;\n+import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PolicyTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.PolicyType;\n@@ -338,44 +343,47 @@ protected static AttributeMod attributeMod(final String schema, final String val\n         return attr;\n     }\n \n-    protected UserTO createUser(final UserTO userTO) {\n-        Response response = userService.create(userTO);\n-        if (response.getStatus() != HttpStatus.SC_CREATED) {\n-            Exception ex = clientExceptionMapper.fromResponse(response);\n-            if (ex != null) {\n-                throw (RuntimeException) ex;\n-            }\n-        }\n-        return response.readEntity(UserTO.class);\n-    }\n-\n     protected void assertCreated(final Response response) {\n         if (response.getStatus() != HttpStatus.SC_CREATED) {\n             StringBuilder builder = new StringBuilder();\n             MultivaluedMap<String, Object> headers = response.getHeaders();\n             builder.append(\"Headers (\");\n             for (String key : headers.keySet()) {\n-                builder.append(key + \":\" + headers.getFirst(key) + \",\");\n+                builder.append(key).append(':').append(headers.getFirst(key)).append(',');\n             }\n             builder.append(\")\");\n             fail(\"Error on create. Status is : \" + response.getStatus() + \" with headers \"\n                     + builder.toString());\n         }\n     }\n \n-    protected <T extends AbstractSchemaTO> Response createSchema(final AttributableType kind,\n+    protected UserTO createUser(final UserTO userTO) {\n+        Response response = userService.create(userTO);\n+        if (response.getStatus() != HttpStatus.SC_CREATED) {\n+            Exception ex = clientExceptionMapper.fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return response.readEntity(UserTO.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends AbstractSchemaTO> T createSchema(final AttributableType kind,\n             final SchemaType type, final T schemaTO) {\n+\n         Response response = schemaService.create(kind, type, schemaTO);\n         if (response.getStatus() != HttpStatus.SC_CREATED) {\n             Exception ex = clientExceptionMapper.fromResponse(response);\n             if (ex != null) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return response;\n+\n+        return (T) getObject(response, schemaTO.getClass(), schemaService);\n     }\n \n-    protected RoleTO createRole(RoleService roleService, RoleTO newRoleTO) {\n+    protected RoleTO createRole(final RoleService roleService, final RoleTO newRoleTO) {\n         Response response = roleService.create(newRoleTO);\n         if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n             Exception ex = clientExceptionMapper.fromResponse(response);\n@@ -386,25 +394,26 @@ protected RoleTO createRole(RoleService roleService, RoleTO newRoleTO) {\n         return getObject(response, RoleTO.class, roleService);\n     }\n \n-    protected Response createPolicy(PolicyService policyService, PolicyType policyType, PolicyTO policy) {\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends PolicyTO> T createPolicy(final PolicyType policyType, final T policy) {\n         Response response = policyService.create(policyType, policy);\n         if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n             Exception ex = clientExceptionMapper.fromResponse(response);\n             if (ex != null) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return response;\n+        return (T) getObject(response, policy.getClass(), policyService);\n     }\n \n-    protected Response createResource(ResourceService resourceService, ResourceTO resourceTO) {\n+    protected ResourceTO createResource(final ResourceTO resourceTO) {\n         Response response = resourceService.create(resourceTO);\n         if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n             Exception ex = clientExceptionMapper.fromResponse(response);\n             if (ex != null) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return response;\n+        return getObject(response, ResourceTO.class, resourceService);\n     }\n }"},{"sha":"8ec951f4dc60408d1e29ffa0cbc28a35ec63173d","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=79dd23cfc384ebbc5fc656206d1aa583a82aaf05","patch":"@@ -83,8 +83,7 @@ public void testUserSchemaAuthorization() {\n         authRoleTO.setParent(8L);\n         authRoleTO.addEntitlement(\"SCHEMA_READ\");\n \n-        Response response = roleService.create(authRoleTO);\n-        authRoleTO = getObject(response, RoleTO.class, roleService);\n+        authRoleTO = createRole(roleService, authRoleTO);\n         assertNotNull(authRoleTO);\n \n         String schemaName = \"authTestSchema\" + getUUIDString();\n@@ -95,8 +94,7 @@ public void testUserSchemaAuthorization() {\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(AttributeSchemaType.String);\n \n-        response = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n-        SchemaTO newSchemaTO = getObject(response, SchemaTO.class, entitlementService);\n+        SchemaTO newSchemaTO = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n \n         // 2. create an user with the role created above (as admin)\n@@ -334,17 +332,15 @@ public void issueSYNCOPE48() {\n         parentRole.addEntitlement(\"ROLE_1\");\n         parentRole.setParent(1L);\n \n-        Response response = roleService.create(parentRole);\n-        parentRole = getObject(response, RoleTO.class, roleService);\n+        parentRole =  createRole(roleService, parentRole);\n         assertNotNull(parentRole);\n \n         // Child role, with no entitlements\n         RoleTO childRole = new RoleTO();\n         childRole.setName(\"childAdminRole\");\n         childRole.setParent(parentRole.getId());\n \n-        response = roleService.create(childRole);\n-        childRole = getObject(response, RoleTO.class, roleService);\n+        childRole = createRole(roleService, childRole);\n         assertNotNull(childRole);\n \n         // User with child role, created by admin\n@@ -366,7 +362,7 @@ public void issueSYNCOPE48() {\n         membershipTO.setRoleId(1L);\n         role1User.addMembership(membershipTO);\n \n-        response = userService2.create(role1User);\n+        Response response = userService2.create(role1User);\n         assertNotNull(response);\n         role1User = response.readEntity(UserTO.class);\n         assertNotNull(role1User);"},{"sha":"38041808140eb51d1db6993083e95b6c56c5acd7","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=79dd23cfc384ebbc5fc656206d1aa583a82aaf05","patch":"@@ -26,8 +26,6 @@\n \n import java.util.List;\n \n-import javax.ws.rs.core.Response;\n-\n import org.apache.syncope.common.to.DerivedSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n@@ -65,8 +63,7 @@ public void create() {\n         schema.setName(\"derived\");\n         schema.setExpression(\"derived_sx + '_' + derived_dx\");\n \n-        Response response = createSchema(AttributableType.USER, SchemaType.DERIVED, schema);\n-        DerivedSchemaTO actual = getObject(response, DerivedSchemaTO.class, schemaService);\n+        DerivedSchemaTO actual = createSchema(AttributableType.USER, SchemaType.DERIVED, schema);\n         assertNotNull(actual);\n \n         actual = schemaService.read(AttributableType.USER, SchemaType.DERIVED, actual.getName());\n@@ -91,9 +88,8 @@ public void delete() {\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n         } finally {\n             // Recreate schema to make test re-runnable\n-            Response response = createSchema(AttributableType.ROLE, SchemaType.DERIVED, schema);\n-            assertNotNull(response);\n-            assertEquals(HttpStatus.CREATED.value(), response.getStatus());\n+            schema = createSchema(AttributableType.ROLE, SchemaType.DERIVED, schema);\n+            assertNotNull(schema);\n         }\n         assertNotNull(t);\n     }"},{"sha":"a0f279bbbb7ee2f01f15c02cb3df582d206742bd","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=79dd23cfc384ebbc5fc656206d1aa583a82aaf05","patch":"@@ -24,7 +24,6 @@\n import static org.junit.Assert.fail;\n \n import java.util.List;\n-import javax.ws.rs.core.Response;\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n@@ -80,7 +79,7 @@ public void createWithException() {\n         policy.setDescription(\"global password policy\");\n \n         try {\n-            createPolicy(policyService, PolicyType.PASSWORD, policy);\n+            createPolicy(PolicyType.PASSWORD, policy);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n             assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidPasswordPolicy));\n@@ -93,7 +92,7 @@ public void createMissingDescription() {\n         policy.setSpecification(new SyncPolicySpec());\n \n         try {\n-            createPolicy(policyService, PolicyType.SYNC, policy);\n+            createPolicy(PolicyType.SYNC, policy);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n             assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidSyncPolicy));\n@@ -104,12 +103,11 @@ public void createMissingDescription() {\n     public void create() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n \n-        Response response = createPolicy(policyService, PolicyType.SYNC, policy);\n-        SyncPolicyTO policyTO = getObject(response, SyncPolicyTO.class, policyService);\n+        SyncPolicyTO policyTO = createPolicy(PolicyType.SYNC, policy);\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.SYNC, policyTO.getType());\n-        assertEquals(TestSyncRule.class.getName(), ((SyncPolicySpec) policyTO.getSpecification()).getUserJavaRule());\n+        assertEquals(TestSyncRule.class.getName(), policyTO.getSpecification().getUserJavaRule());\n     }\n \n     @Test\n@@ -122,8 +120,7 @@ public void update() {\n         policy.setSpecification(globalPolicy.getSpecification());\n \n         // create a new password policy using global password as a template\n-        Response response = createPolicy(policyService, PolicyType.PASSWORD, policy);\n-        policy = getObject(response, PasswordPolicyTO.class, policyService);\n+        policy = createPolicy(PolicyType.PASSWORD, policy);\n \n         // read new password policy\n         policy = policyService.read(PolicyType.PASSWORD, policy.getId());\n@@ -147,8 +144,8 @@ public void update() {\n     @Test\n     public void delete() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n-        Response response = createPolicy(policyService, PolicyType.SYNC, policy);\n-        SyncPolicyTO policyTO = getObject(response, SyncPolicyTO.class, policyService);\n+\n+        SyncPolicyTO policyTO = createPolicy(PolicyType.SYNC, policy);\n         assertNotNull(policyTO);\n \n         policyService.delete(PolicyType.SYNC, policyTO.getId());"},{"sha":"75fb626ac82d34a50d3ca722218b0cd561c1e706","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":33,"deletions":5,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=79dd23cfc384ebbc5fc656206d1aa583a82aaf05","patch":"@@ -194,7 +194,7 @@ public void createWithInvalidMapping() {\n         resourceTO.setUmapping(mapping);\n \n         try {\n-            createResource(resourceService, resourceTO);\n+            createResource(resourceTO);\n             fail(\"Create should not have worked\");\n         } catch (SyncopeClientCompositeErrorException e) {\n             SyncopeClientException requiredValueMissing = e\n@@ -228,7 +228,7 @@ public void createWithoutExtAttr() {\n \n         resourceTO.setUmapping(mapping);\n \n-        createResource(resourceService, resourceTO);\n+        createResource(resourceTO);\n     }\n \n     @Test\n@@ -395,7 +395,7 @@ public void issueSYNCOPE323() {\n         assertNotNull(actual);\n \n         try {\n-            createResource(resourceService, actual);\n+            createResource(actual);\n             fail();\n         } catch (SyncopeClientCompositeErrorException scce) {\n             assertEquals(HttpStatus.CONFLICT, scce.getStatusCode());\n@@ -404,7 +404,7 @@ public void issueSYNCOPE323() {\n \n         actual.setName(null);\n         try {\n-            createResource(resourceService, actual);\n+            createResource(actual);\n             fail();\n         } catch (SyncopeClientCompositeErrorException scce) {\n             assertEquals(HttpStatus.BAD_REQUEST, scce.getStatusCode());\n@@ -458,6 +458,35 @@ public void issueSYNCOPE360() {\n         assertNull(resource.getUmapping());\n     }\n \n+    @Test\n+    public void issueSYNCOPE368() {\n+        final String name = \"SYNCOPE368-\" + getUUIDString();\n+\n+        ResourceTO resourceTO = new ResourceTO();\n+\n+        resourceTO.setName(name);\n+        resourceTO.setConnectorId(105L);\n+\n+        MappingTO mapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.RoleName);\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.setAccountIdItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.RoleOwnerSchema);\n+        item.setExtAttrName(\"owner\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+        mapping.addItem(item);\n+\n+        resourceTO.setRmapping(mapping);\n+        \n+        resourceTO = createResource(resourceTO);\n+        assertNotNull(resourceTO);\n+        assertEquals(2, resourceTO.getRmapping().getItems().size());\n+    }\n+\n     private ResourceTO buildResourceTO(String resourceName) {\n         ResourceTO resourceTO = new ResourceTO();\n \n@@ -477,7 +506,6 @@ private ResourceTO buildResourceTO(String resourceName) {\n         item.setExtAttrName(\"username\");\n         item.setIntAttrName(\"fullname\");\n         item.setIntMappingType(IntMappingType.UserId);\n-        item.setAccountid(true);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setAccountIdItem(item);\n "},{"sha":"d16a67326af3382d73e82125eabde52b1823cd71","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=79dd23cfc384ebbc5fc656206d1aa583a82aaf05","patch":"@@ -29,8 +29,6 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import javax.ws.rs.core.Response;\n-\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.services.RoleService;\n import org.apache.syncope.common.to.ConnObjectTO;\n@@ -148,8 +146,7 @@ public void delete() {\n \n         roleTO.addResource(\"resource-ldap\");\n \n-        Response response = roleService.create(roleTO);\n-        roleTO = getObject(response, RoleTO.class, roleService);\n+        roleTO = createRole(roleService, roleTO);\n         assertNotNull(roleTO);\n \n         RoleTO deletedRole = roleService.delete(roleTO.getId());"},{"sha":"f3e3bbd488cc42c7c1db54a02ea46c9328b05252","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":5,"deletions":12,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=79dd23cfc384ebbc5fc656206d1aa583a82aaf05","patch":"@@ -27,8 +27,6 @@\n \n import java.util.List;\n \n-import javax.ws.rs.core.Response;\n-\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.SchemaTO;\n@@ -55,12 +53,10 @@ public void create() {\n         SchemaTO schemaTO = buildSchemaTO(\"testAttribute\", AttributeSchemaType.String);\n         schemaTO.setMandatoryCondition(\"false\");\n \n-        Response response = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n-        SchemaTO newSchemaTO = getObject(response, SchemaTO.class, schemaService);\n+        SchemaTO newSchemaTO = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n \n-        response = createSchema(AttributableType.MEMBERSHIP, SchemaType.NORMAL, schemaTO);\n-        newSchemaTO = getObject(response, SchemaTO.class, schemaService);\n+        newSchemaTO = createSchema(AttributableType.MEMBERSHIP, SchemaType.NORMAL, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n     }\n \n@@ -184,8 +180,7 @@ public void issue258() {\n         schemaTO.setName(\"schema_issue258\");\n         schemaTO.setType(AttributeSchemaType.Double);\n \n-        Response response = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n-        schemaTO = getObject(response, SchemaTO.class, schemaService);\n+        schemaTO = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue258@syncope.apache.org\");\n@@ -209,8 +204,7 @@ public void issue259() {\n         SchemaTO schemaTO = buildSchemaTO(\"schema_issue259\", AttributeSchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n-        Response response = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n-        schemaTO = getObject(response, SchemaTO.class, schemaService);\n+        schemaTO = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue259@syncope.apache.org\");\n@@ -234,8 +228,7 @@ public void issue260() {\n         SchemaTO schemaTO = buildSchemaTO(\"schema_issue260\", AttributeSchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n-        Response response = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n-        schemaTO = getObject(response, SchemaTO.class, schemaService);\n+        schemaTO = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue260@syncope.apache.org\");"},{"sha":"bf93ac5d04185294ee9720e2190cb7d30d312921","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/79dd23cfc384ebbc5fc656206d1aa583a82aaf05/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=79dd23cfc384ebbc5fc656206d1aa583a82aaf05","patch":"@@ -26,8 +26,6 @@\n \n import java.util.List;\n \n-import javax.ws.rs.core.Response;\n-\n import org.apache.syncope.common.to.VirtualSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n@@ -64,8 +62,7 @@ public void create() {\n         VirtualSchemaTO schema = new VirtualSchemaTO();\n         schema.setName(\"virtual\");\n \n-        Response response = createSchema(AttributableType.USER, SchemaType.VIRTUAL, schema);\n-        VirtualSchemaTO actual = getObject(response, VirtualSchemaTO.class, schemaService);\n+        VirtualSchemaTO actual = createSchema(AttributableType.USER, SchemaType.VIRTUAL, schema);\n         assertNotNull(actual);\n \n         actual = schemaService.read(AttributableType.USER, SchemaType.VIRTUAL, actual.getName());"}]}