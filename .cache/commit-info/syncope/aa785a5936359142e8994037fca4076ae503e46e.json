{"sha":"aa785a5936359142e8994037fca4076ae503e46e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFhNzg1YTU5MzYzNTkxNDJlODk5NDAzN2ZjYTQwNzZhZTUwM2U0NmU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-05-30T12:29:19Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-05-30T12:29:19Z"},"message":"[SYNCOPE-479] Now using X-Application-Error-Code and  X-Application-Error-Info header names for error reporting - more REST best practices\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1598567 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cbdf6e4871b043d9ce06b48162239a3bab144eed","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cbdf6e4871b043d9ce06b48162239a3bab144eed"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/aa785a5936359142e8994037fca4076ae503e46e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aa785a5936359142e8994037fca4076ae503e46e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aa785a5936359142e8994037fca4076ae503e46e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aa785a5936359142e8994037fca4076ae503e46e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2276d7e08334c185eed01e0f4c9d6ba49c224b0f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2276d7e08334c185eed01e0f4c9d6ba49c224b0f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2276d7e08334c185eed01e0f4c9d6ba49c224b0f"}],"stats":{"total":65,"additions":39,"deletions":26},"files":[{"sha":"b1db91c1b7fdadc76b9c8dcb19735186ec82139a","filename":"client/src/main/java/org/apache/syncope/client/rest/RestClientExceptionMapper.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa785a5936359142e8994037fca4076ae503e46e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa785a5936359142e8994037fca4076ae503e46e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java?ref=aa785a5936359142e8994037fca4076ae503e46e","patch":"@@ -27,6 +27,7 @@\n import javax.ws.rs.ext.ExceptionMapper;\r\n import javax.ws.rs.ext.Provider;\r\n import javax.xml.ws.WebServiceException;\r\n+import org.apache.commons.lang3.StringUtils;\r\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\r\n import org.apache.syncope.common.types.ClientExceptionType;\r\n import org.apache.syncope.common.types.RESTHeaders;\r\n@@ -75,9 +76,9 @@ else if (statusCode == Response.Status.BAD_REQUEST.getStatusCode()) {\n     }\r\n \r\n     private SyncopeClientCompositeException checkSyncopeClientCompositeException(final Response response) {\r\n-        List<Object> exTypesInHeaders = response.getHeaders().get(RESTHeaders.EXCEPTION_TYPE.toString());\r\n+        List<Object> exTypesInHeaders = response.getHeaders().get(RESTHeaders.ERROR_CODE);\r\n         if (exTypesInHeaders == null) {\r\n-            LOG.debug(\"No \" + RESTHeaders.EXCEPTION_TYPE + \" provided\");\r\n+            LOG.debug(\"No \" + RESTHeaders.ERROR_CODE + \" provided\");\r\n             return null;\r\n         }\r\n \r\n@@ -90,18 +91,22 @@ private SyncopeClientCompositeException checkSyncopeClientCompositeException(fin\n             try {\r\n                 exceptionType = ClientExceptionType.fromHeaderValue(exTypeAsString);\r\n             } catch (IllegalArgumentException e) {\r\n-                LOG.error(\"Unexpected value of \" + RESTHeaders.EXCEPTION_TYPE + \": \" + exTypeAsString, e);\r\n+                LOG.error(\"Unexpected value of \" + RESTHeaders.ERROR_CODE + \": \" + exTypeAsString, e);\r\n             }\r\n             if (exceptionType != null) {\r\n                 handledExceptions.add(exTypeAsString);\r\n \r\n                 final SyncopeClientException clientException = SyncopeClientException.build(exceptionType);\r\n \r\n-                if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null\r\n-                        && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {\r\n+                if (response.getHeaders().get(RESTHeaders.ERROR_INFO) != null\r\n+                        && !response.getHeaders().get(RESTHeaders.ERROR_INFO).isEmpty()) {\r\n \r\n-                    clientException.getElements().addAll(\r\n-                            response.getHeaders().get(exceptionType.getElementHeaderName()));\r\n+                    for (Object value : response.getHeaders().get(RESTHeaders.ERROR_INFO)) {\r\n+                        final String element = value.toString();\r\n+                        if (element.startsWith(exceptionType.getHeaderValue())) {\r\n+                            clientException.getElements().add(StringUtils.substringAfter(value.toString(), \":\"));\r\n+                        }\r\n+                    }\r\n                 }\r\n                 compException.addException(clientException);\r\n             }\r"},{"sha":"157b2a42fbb98b7e74b21b83837fc4847837f9dc","filename":"common/src/main/java/org/apache/syncope/common/SyncopeClientException.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa785a5936359142e8994037fca4076ae503e46e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa785a5936359142e8994037fca4076ae503e46e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeClientException.java?ref=aa785a5936359142e8994037fca4076ae503e46e","patch":"@@ -28,7 +28,7 @@ public class SyncopeClientException extends RuntimeException {\n \r\n     private ClientExceptionType type;\r\n \r\n-    private final List<Object> elements = new ArrayList<Object>();\r\n+    private final List<String> elements = new ArrayList<String>();\r\n \r\n     public static SyncopeClientException build(final ClientExceptionType type) {\r\n         if (type == ClientExceptionType.Composite) {\r\n@@ -66,7 +66,7 @@ public final void setType(final ClientExceptionType type) {\n         this.type = type;\r\n     }\r\n \r\n-    public List<Object> getElements() {\r\n+    public List<String> getElements() {\r\n         return elements;\r\n     }\r\n \r"},{"sha":"cd0d8ec69c7ba2619f8e7ed465903f5cb9ec9f4c","filename":"common/src/main/java/org/apache/syncope/common/types/ClientExceptionType.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa785a5936359142e8994037fca4076ae503e46e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa785a5936359142e8994037fca4076ae503e46e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FClientExceptionType.java?ref=aa785a5936359142e8994037fca4076ae503e46e","patch":"@@ -91,8 +91,8 @@ public String getHeaderValue() {\n         return name();\r\n     }\r\n \r\n-    public String getElementHeaderName() {\r\n-        return getHeaderValue() + \".element\";\r\n+    public String getInfoHeaderValue(final String value) {\r\n+        return getHeaderValue() + \":\" + value;\r\n     }\r\n \r\n     public Response.Status getResponseStatus() {\r"},{"sha":"435e5b97b50d8207d8e140896bf8adf41f34cae6","filename":"common/src/main/java/org/apache/syncope/common/types/RESTHeaders.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa785a5936359142e8994037fca4076ae503e46e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa785a5936359142e8994037fca4076ae503e46e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java?ref=aa785a5936359142e8994037fca4076ae503e46e","patch":"@@ -55,8 +55,15 @@ public final class RESTHeaders {\n \n     /**\n      * Declares the type of exception being raised.\n+     *\n+     * @see ClientExceptionType\n+     */\n+    public static final String ERROR_CODE = \"X-Application-Error-Code\";\n+\n+    /**\n+     * Declares additional information for the exception being raised.\n      */\n-    public static final String EXCEPTION_TYPE = \"Syncope.ExceptionType\";\n+    public static final String ERROR_INFO = \"X-Application-Error-Info\";\n \n     /**\n      * Mediatype for PNG images, not defined in <tt>javax.ws.rs.core.MediaType</tt>."},{"sha":"715f9cd929a94e957451ce36e298fe6894f1ffab","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa785a5936359142e8994037fca4076ae503e46e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa785a5936359142e8994037fca4076ae503e46e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=aa785a5936359142e8994037fca4076ae503e46e","patch":"@@ -100,7 +100,8 @@ public Response toResponse(final Exception ex) {\n                 // ...or just report as InternalServerError\r\n                 if (builder == null) {\r\n                     builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR).\r\n-                            header(ClientExceptionType.Unknown.getElementHeaderName(), getExMessage(ex));\r\n+                            header(RESTHeaders.ERROR_INFO,\r\n+                                    ClientExceptionType.Unknown.getInfoHeaderValue(getExMessage(ex)));\r\n \r\n                     ErrorTO error = new ErrorTO();\r\n                     error.setStatus(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode());\r\n@@ -122,14 +123,14 @@ public Exception fromResponse(final Response r) {\n \r\n     private ResponseBuilder getSyncopeClientExceptionResponse(final SyncopeClientException ex) {\r\n         ResponseBuilder builder = Response.status(ex.getType().getResponseStatus());\r\n-        builder.header(RESTHeaders.EXCEPTION_TYPE, ex.getType().getHeaderValue());\r\n+        builder.header(RESTHeaders.ERROR_CODE, ex.getType().getHeaderValue());\r\n \r\n         ErrorTO error = new ErrorTO();\r\n         error.setStatus(ex.getType().getResponseStatus().getStatusCode());\r\n         error.setType(ex.getType());\r\n \r\n-        for (Object element : ex.getElements()) {\r\n-            builder.header(ex.getType().getElementHeaderName(), element);\r\n+        for (String element : ex.getElements()) {\r\n+            builder.header(RESTHeaders.ERROR_INFO, ex.getType().getInfoHeaderValue(element));\r\n             error.getElements().add(element);\r\n         }\r\n \r\n@@ -145,14 +146,14 @@ private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final Syncope\n \r\n         List<ErrorTO> errors = new ArrayList<ErrorTO>();\r\n         for (SyncopeClientException sce : ex.getExceptions()) {\r\n-            builder.header(RESTHeaders.EXCEPTION_TYPE, sce.getType().getHeaderValue());\r\n+            builder.header(RESTHeaders.ERROR_CODE, sce.getType().getHeaderValue());\r\n \r\n             ErrorTO error = new ErrorTO();\r\n             error.setStatus(sce.getType().getResponseStatus().getStatusCode());\r\n             error.setType(sce.getType());\r\n \r\n-            for (Object element : sce.getElements()) {\r\n-                builder.header(sce.getType().getElementHeaderName(), element);\r\n+            for (String element : sce.getElements()) {\r\n+                builder.header(RESTHeaders.ERROR_INFO, ex.getType().getInfoHeaderValue(element));\r\n                 error.getElements().add(element);\r\n             }\r\n \r\n@@ -192,16 +193,16 @@ private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n                     : ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\r\n \r\n             ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\r\n-            builder.header(RESTHeaders.EXCEPTION_TYPE, exType.getHeaderValue());\r\n+            builder.header(RESTHeaders.ERROR_CODE, exType.getHeaderValue());\r\n \r\n             ErrorTO error = new ErrorTO();\r\n             error.setStatus(exType.getResponseStatus().getStatusCode());\r\n             error.setType(exType);\r\n \r\n             for (Map.Entry<Class<?>, Set<EntityViolationType>> violation : iee.getViolations().entrySet()) {\r\n                 for (EntityViolationType violationType : violation.getValue()) {\r\n-                    builder.header(exType.getElementHeaderName(),\r\n-                            violationType.name() + \": \" + violationType.getMessage());\r\n+                    builder.header(RESTHeaders.ERROR_INFO,\r\n+                            exType.getInfoHeaderValue(violationType.name() + \": \" + violationType.getMessage()));\r\n                     error.getElements().add(violationType.name() + \": \" + violationType.getMessage());\r\n                 }\r\n             }\r\n@@ -241,8 +242,8 @@ private ResponseBuilder processBadRequestExceptions(final Exception ex) {\n \r\n     private ResponseBuilder builder(final Response.Status status, final ClientExceptionType hType, final String msg) {\r\n         ResponseBuilder builder = Response.status(status).\r\n-                header(RESTHeaders.EXCEPTION_TYPE, hType.getHeaderValue()).\r\n-                header(hType.getElementHeaderName(), msg);\r\n+                header(RESTHeaders.ERROR_CODE, hType.getHeaderValue()).\r\n+                header(RESTHeaders.ERROR_INFO, hType.getInfoHeaderValue(msg));\r\n \r\n         ErrorTO error = new ErrorTO();\r\n         error.setStatus(status.getStatusCode());\r"},{"sha":"1c92db8b1efc343c65f04c0fc6b58c25cb90f8af","filename":"core/src/main/java/org/apache/syncope/core/services/AbstractServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa785a5936359142e8994037fca4076ae503e46e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa785a5936359142e8994037fca4076ae503e46e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java?ref=aa785a5936359142e8994037fca4076ae503e46e","patch":"@@ -147,8 +147,8 @@ protected void checkPageSize(final int page, final int size) {\n             LOG.error(\"Invalid page / size specified: {},{}\", page, size);\n \n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPageOrSize);\n-            sce.getElements().add(page);\n-            sce.getElements().add(size);\n+            sce.getElements().add(String.valueOf(page));\n+            sce.getElements().add(String.valueOf(size));\n             throw sce;\n         }\n     }"}]}