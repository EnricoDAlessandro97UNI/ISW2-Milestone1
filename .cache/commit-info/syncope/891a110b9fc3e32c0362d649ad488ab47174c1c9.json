{"sha":"891a110b9fc3e32c0362d649ad488ab47174c1c9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg5MWExMTBiOWZjM2UzMmMwMzYyZDY0OWFkNDg4YWI0NzE3NGMxYzk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-04-04T15:56:30Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-04-04T15:56:30Z"},"message":"[SYNCOPE-1455] Core support for SRA gateway routes","tree":{"sha":"2bb5298110d1e4e91794ea91d001c458d665f8ca","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2bb5298110d1e4e91794ea91d001c458d665f8ca"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/891a110b9fc3e32c0362d649ad488ab47174c1c9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/891a110b9fc3e32c0362d649ad488ab47174c1c9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/891a110b9fc3e32c0362d649ad488ab47174c1c9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/891a110b9fc3e32c0362d649ad488ab47174c1c9/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5461235cc7b935686bc8e526ab231a7fb191f7db","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5461235cc7b935686bc8e526ab231a7fb191f7db","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5461235cc7b935686bc8e526ab231a7fb191f7db"}],"stats":{"total":1859,"additions":1852,"deletions":7},"files":[{"sha":"f973c701e5fbd51828f8e4b79be169a2ca86406d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/GatewayRouteTO.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGatewayRouteTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGatewayRouteTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGatewayRouteTO.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.types.GatewayFilter;\n+import org.apache.syncope.common.lib.types.GatewayPredicate;\n+import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n+\n+public class GatewayRouteTO implements EntityTO {\n+\n+    private static final long serialVersionUID = 4044528284951757870L;\n+\n+    private String key;\n+\n+    private String name;\n+\n+    private URI target;\n+\n+    private final List<GatewayFilter> filters = new ArrayList<>();\n+\n+    private final List<GatewayPredicate> predicates = new ArrayList<>();\n+\n+    private GatewayRouteStatus status;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public URI getTarget() {\n+        return target;\n+    }\n+\n+    public void setTarget(final URI target) {\n+        this.target = target;\n+    }\n+\n+    @XmlElementWrapper(name = \"filters\")\n+    @XmlElement(name = \"filter\")\n+    @JsonProperty(\"filters\")\n+    public List<GatewayFilter> getFilters() {\n+        return filters;\n+    }\n+\n+    @XmlElementWrapper(name = \"predicates\")\n+    @XmlElement(name = \"predicate\")\n+    @JsonProperty(\"predicates\")\n+    public List<GatewayPredicate> getPredicates() {\n+        return predicates;\n+    }\n+\n+    public GatewayRouteStatus getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(final GatewayRouteStatus status) {\n+        this.status = status;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(name).\n+                append(target).\n+                append(filters).\n+                append(predicates).\n+                append(status).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final GatewayRouteTO other = (GatewayRouteTO) obj;\n+        return new EqualsBuilder().\n+                append(key, other.key).\n+                append(name, other.name).\n+                append(target, other.target).\n+                append(filters, other.filters).\n+                append(predicates, other.predicates).\n+                append(status, other.status).\n+                build();\n+    }\n+}"},{"sha":"6d7d7625e872625b885c6493ffd1441c0b0e3afe","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+public final class AMEntitlement {\n+\n+    public static final String GATEWAY_ROUTE_LIST = \"GATEWAY_ROUTE_LIST\";\n+\n+    public static final String GATEWAY_ROUTE_CREATE = \"GATEWAY_ROUTE_CREATE\";\n+\n+    public static final String GATEWAY_ROUTE_READ = \"GATEWAY_ROUTE_READ\";\n+\n+    public static final String GATEWAY_ROUTE_UPDATE = \"GATEWAY_ROUTE_UPDATE\";\n+\n+    public static final String GATEWAY_ROUTE_DELETE = \"GATEWAY_ROUTE_DELETE\";\n+\n+    public static final String GATEWAY_ROUTE_PUSH = \"GATEWAY_ROUTE_PUSH\";\n+\n+    private static final Set<String> VALUES;\n+\n+    static {\n+        Set<String> values = new TreeSet<>();\n+        for (Field field : AMEntitlement.class.getDeclaredFields()) {\n+            if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n+                values.add(field.getName());\n+            }\n+        }\n+        VALUES = Collections.unmodifiableSet(values);\n+    }\n+\n+    public static Set<String> values() {\n+        return VALUES;\n+    }\n+\n+    private AMEntitlement() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"1120af988e5c0234c271e06f1dbc1fe71d8e616f","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/FilterFactory.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FFilterFactory.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum FilterFactory {\n+    ADD_REQUEST_HEADER,\n+    ADD_REQUEST_PARAMETER,\n+    ADD_RESPONSE_HEADER,\n+    HYSTRIX,\n+    MODIFY_REQUEST_BODY,\n+    MODIFY_RESPONSE_BODY,\n+    PREFIX_PATH,\n+    PRESERVE_HOST_HEADER,\n+    REDIRECT,\n+    REMOVE_REQUEST_HEADER,\n+    REMOVE_RESPONSE_HEADER,\n+    REQUEST_RATE_LIMITER,\n+    REWRITE_PATH,\n+    RETRY,\n+    SECURE_HEADERS,\n+    SET_PATH,\n+    SET_REQUEST_HEADER,\n+    SET_RESPONSE_HEADER,\n+    REWRITE_RESPONSE_HEADER,\n+    SET_STATUS,\n+    SAVE_SESSION,\n+    STRIP_PREFIX,\n+    REQUEST_HEADER_TO_REQUEST_URI,\n+    CHANGE_REQUEST_URI,\n+    SET_REQIEST_SIZE,\n+    FALLBACK_HEADERS,\n+    CUSTOM\n+\n+}"},{"sha":"cbf946eb9576c59825b2760fce421c37b65be640","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayFilter.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayFilter.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import java.io.Serializable;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+public class GatewayFilter implements Serializable {\n+\n+    private static final long serialVersionUID = -635785645207375128L;\n+\n+    public static class Builder {\n+\n+        private final GatewayFilter instance = new GatewayFilter();\n+\n+        public Builder factory(final FilterFactory factory) {\n+            instance.setFactory(factory);\n+            return this;\n+        }\n+\n+        public Builder args(final String args) {\n+            instance.setArgs(args);\n+            return this;\n+        }\n+\n+        public GatewayFilter build() {\n+            return instance;\n+        }\n+    }\n+\n+    private FilterFactory factory;\n+\n+    private String args;\n+\n+    public FilterFactory getFactory() {\n+        return factory;\n+    }\n+\n+    public void setFactory(final FilterFactory factory) {\n+        this.factory = factory;\n+    }\n+\n+    public String getArgs() {\n+        return args;\n+    }\n+\n+    public void setArgs(final String args) {\n+        this.args = args;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(factory).\n+                append(args).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final GatewayFilter other = (GatewayFilter) obj;\n+        return new EqualsBuilder().\n+                append(factory, other.factory).\n+                append(args, other.args).\n+                build();\n+    }\n+}"},{"sha":"27c6635b9e5f20a541efa4f2774aa07c026e448a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayPredicate.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayPredicate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayPredicate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayPredicate.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import java.io.Serializable;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+public class GatewayPredicate implements Serializable {\n+\n+    private static final long serialVersionUID = -635785645207375128L;\n+\n+    public static class Builder {\n+\n+        private final GatewayPredicate instance = new GatewayPredicate();\n+\n+        public Builder cond(final PredicateCond cond) {\n+            instance.setCond(cond);\n+            return this;\n+        }\n+\n+        public Builder factory(final PredicateFactory factory) {\n+            instance.setFactory(factory);\n+            return this;\n+        }\n+\n+        public Builder args(final String args) {\n+            instance.setArgs(args);\n+            return this;\n+        }\n+\n+        public GatewayPredicate build() {\n+            return instance;\n+        }\n+    }\n+\n+    private PredicateCond cond;\n+\n+    private PredicateFactory factory;\n+\n+    private String args;\n+\n+    public PredicateCond getCond() {\n+        return cond;\n+    }\n+\n+    public void setCond(final PredicateCond cond) {\n+        this.cond = cond;\n+    }\n+\n+    public PredicateFactory getFactory() {\n+        return factory;\n+    }\n+\n+    public void setFactory(final PredicateFactory factory) {\n+        this.factory = factory;\n+    }\n+\n+    public String getArgs() {\n+        return args;\n+    }\n+\n+    public void setArgs(final String args) {\n+        this.args = args;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(cond).\n+                append(factory).\n+                append(args).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final GatewayPredicate other = (GatewayPredicate) obj;\n+        return new EqualsBuilder().\n+                append(cond, other.cond).\n+                append(factory, other.factory).\n+                append(args, other.args).\n+                build();\n+    }\n+}"},{"sha":"ab199e9f241e7cda4ade4449a1a0a41e91a21517","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayRouteStatus.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRouteStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRouteStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGatewayRouteStatus.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum GatewayRouteStatus {\n+    DRAFT,\n+    STAGING,\n+    PUBLISHED,\n+    DEPRECATED\n+\n+}"},{"sha":"93b0bad571134095e93015706551d08633f03b1d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/PredicateCond.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPredicateCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPredicateCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPredicateCond.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum PredicateCond {\n+    AND,\n+    OR,\n+    NOT\n+\n+}"},{"sha":"5cf4e779369bc800b9475694fc4a9b05eb4cc8a0","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/PredicateFactory.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPredicateFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPredicateFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPredicateFactory.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum PredicateFactory {\n+    AFTER,\n+    BEFORE,\n+    BETWEEN,\n+    COOKIE,\n+    HEADER,\n+    HOST,\n+    METHOD,\n+    PATH,\n+    QUERY,\n+    REMOTE_ADDR,\n+    READ_BODY,\n+    CUSTOM\n+\n+}"},{"sha":"6b957b8b324b2b45e8b55ae56495f96b280b6bb3","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GatewayRouteService.java","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGatewayRouteService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGatewayRouteService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGatewayRouteService.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+/**\n+ * REST operations for gateway routes.\n+ */\n+@Tag(name = \"GatewayRoutes\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"gatewayRoutes\")\n+public interface GatewayRouteService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all existing routes.\n+     *\n+     * @return paged list of existing routes matching the given query\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    List<GatewayRouteTO> list();\n+\n+    /**\n+     * Creates a new route.\n+     *\n+     * @param routeTO route to be created\n+     * @return Response object featuring Location header of created route\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Route successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the entity created\"),\n+                @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response create(@NotNull GatewayRouteTO routeTO);\n+\n+    /**\n+     * Returns route with matching key.\n+     *\n+     * @param key key of route to be read\n+     * @return route with matching key\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    GatewayRouteTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Updates route with matching key.\n+     *\n+     * @param routeTO route to be stored\n+     */\n+    @Parameter(name = \"key\", description = \"Route's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void update(@NotNull GatewayRouteTO routeTO);\n+\n+    /**\n+     * Deletes route with matching key.\n+     *\n+     * @param key route key\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @DELETE\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Push all routes to SRA.\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @POST\n+    @Path(\"push\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void pushToSRA();\n+\n+    /**\n+     * Push route with matching key to SRA.\n+     *\n+     * @param key route key\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @POST\n+    @Path(\"push/{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void pushToSRA(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"600f0d7cd4e7e2bf3705b0cb5d913f59dd06562b","filename":"core/am/logic/pom.xml","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fam%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fam%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fpom.xml?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,81 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.core</groupId>\n+    <artifactId>syncope-core-am</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Core AM Logic</name>\n+  <description>Apache Syncope Core AM Logic</description>\n+  <groupId>org.apache.syncope.core.am</groupId>\n+  <artifactId>syncope-core-am-logic</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core.idrepo</groupId>\n+      <artifactId>syncope-core-idrepo-logic</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <resources>\n+      <resource>\n+        <directory>${basedir}/src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+    </resources>\n+        \n+    <plugins>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>buildnumber-maven-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <configuration>\n+          <doCheck>false</doCheck>\n+          <doUpdate>false</doUpdate>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <phase>validate</phase>\n+            <goals>\n+              <goal>create</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"3d57c179ba66ce494f9cdc4e588433277533d896","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/GatewayRouteLogic.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGatewayRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGatewayRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGatewayRouteLogic.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.GatewayRouteDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+import org.apache.syncope.core.provisioning.api.data.GatewayRouteDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class GatewayRouteLogic extends AbstractTransactionalLogic<GatewayRouteTO> {\n+\n+    @Autowired\n+    private GatewayRouteDAO routeDAO;\n+\n+    @Autowired\n+    private GatewayRouteDataBinder binder;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    public List<GatewayRouteTO> list() {\n+        return routeDAO.findAll().stream().map(binder::getGatewayRouteTO).collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_CREATE + \"')\")\n+    public GatewayRouteTO create(final GatewayRouteTO routeTO) {\n+        GatewayRoute route = entityFactory.newEntity(GatewayRoute.class);\n+        binder.getGatewayRoute(route, routeTO);\n+\n+        return binder.getGatewayRouteTO(routeDAO.save(route));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_READ + \"')\")\n+    public GatewayRouteTO read(final String key) {\n+        GatewayRoute route = routeDAO.find(key);\n+        if (route == null) {\n+            throw new NotFoundException(\"GatewayRoute \" + key);\n+        }\n+        return binder.getGatewayRouteTO(route);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_UPDATE + \"')\")\n+    public GatewayRouteTO update(final GatewayRouteTO routeTO) {\n+        GatewayRoute route = routeDAO.find(routeTO.getKey());\n+        if (route == null) {\n+            throw new NotFoundException(\"GatewayRoute \" + routeTO.getKey());\n+        }\n+\n+        binder.getGatewayRoute(route, routeTO);\n+\n+        return binder.getGatewayRouteTO(routeDAO.save(route));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_DELETE + \"')\")\n+    public GatewayRouteTO delete(final String key) {\n+        GatewayRoute route = routeDAO.find(key);\n+        if (route == null) {\n+            throw new NotFoundException(\"GatewayRoute \" + key);\n+        }\n+\n+        GatewayRouteTO deleted = binder.getGatewayRouteTO(route);\n+        routeDAO.delete(route);\n+        return deleted;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_PUSH + \"')\")\n+    public void pushToSRA() {\n+        // TODO\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_PUSH + \"')\")\n+    public void pushToSRA(final String key) {\n+        // TODO\n+    }\n+\n+    @Override\n+    protected GatewayRouteTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args) && (\"create\".equals(method.getName())\n+                || \"update\".equals(method.getName())\n+                || \"delete\".equals(method.getName()))) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof GatewayRouteTO) {\n+                    key = ((GatewayRouteTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return binder.getGatewayRouteTO(routeDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"2ca422c223f9d6b3d651e2033ead9170bd8a1af9","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/init/AMEntitlementLoader.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAMEntitlementLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAMEntitlementLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAMEntitlementLoader.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AMEntitlementLoader implements SyncopeCoreLoader {\n+\n+    @Override\n+    public int getOrder() {\n+        return 900;\n+    }\n+\n+    @Override\n+    public void load() {\n+        EntitlementsHolder.getInstance().addAll(AMEntitlement.values());\n+    }\n+}"},{"sha":"c430317be80e88f9ab85e30dde262cd84edb28fb","filename":"core/am/pom.xml","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fam%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fam%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Fpom.xml?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-core</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Core AM</name>\n+  <description>Apache Syncope Core AM</description>\n+  <groupId>org.apache.syncope.core</groupId>\n+  <artifactId>syncope-core-am</artifactId>\n+  <packaging>pom</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n+  </properties>\n+  \n+  <modules>\n+    <module>logic</module>\n+    <module>rest-cxf</module>\n+  </modules>\n+</project>"},{"sha":"80de056d0e5144f4e7510a497aed997b708a0832","filename":"core/am/rest-cxf/pom.xml","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fam%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fam%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fpom.xml?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,86 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.core</groupId>\n+    <artifactId>syncope-core-am</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Core AM REST CXF</name>\n+  <description>Apache Syncope Core AM REST CXF</description>\n+  <groupId>org.apache.syncope.core.am</groupId>\n+  <artifactId>syncope-core-am-rest-cxf</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency> \n+      <groupId>javax.servlet</groupId> \n+      <artifactId>javax.servlet-api</artifactId> \n+      <scope>provided</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope.common.am</groupId>\n+      <artifactId>syncope-common-am-rest-api</artifactId>\n+      <version>${project.version}</version>\n+      <classifier>javadoc</classifier>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.core.idrepo</groupId>\n+      <artifactId>syncope-core-idrepo-rest-cxf</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.core.am</groupId>\n+      <artifactId>syncope-core-am-logic</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.common.am</groupId>\n+      <artifactId>syncope-common-am-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>            \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+\n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+    </resources>\n+  </build>\n+</project>"},{"sha":"f02f0c1b41126072c53e987be61378d01ea47f9a","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GatewayRouteServiceImpl.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGatewayRouteServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGatewayRouteServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGatewayRouteServiceImpl.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n+import org.apache.syncope.core.logic.GatewayRouteLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class GatewayRouteServiceImpl extends AbstractServiceImpl implements GatewayRouteService {\n+\n+    @Autowired\n+    private GatewayRouteLogic logic;\n+    \n+    @Override\n+    public List<GatewayRouteTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public Response create(final GatewayRouteTO routeTO) {\n+        GatewayRouteTO createdRoute = logic.create(routeTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(createdRoute.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, createdRoute.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public GatewayRouteTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public void update(final GatewayRouteTO routeTO) {\n+        logic.update(routeTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+    @Override\n+    public void pushToSRA() {\n+        logic.pushToSRA();\n+    }\n+\n+    @Override\n+    public void pushToSRA(final String key) {\n+        logic.pushToSRA(key);\n+    }\n+}"},{"sha":"2a6ed43cba3c8cbc85b86c779b6fd47fb1158c18","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LogicContext.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicContext.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import java.lang.reflect.InvocationTargetException;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.springframework.context.EnvironmentAware;\n import org.springframework.context.annotation.Bean;\n@@ -53,17 +54,19 @@ public String buildNumber() {\n \n     @Bean\n     public LogicInvocationHandler logicInvocationHandler()\n-            throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, \n+            NoSuchMethodException, IllegalArgumentException, InvocationTargetException {\n \n         return (LogicInvocationHandler) Class.forName(env.getProperty(\"logicInvocationHandler\")).\n-                newInstance();\n+                getDeclaredConstructor().newInstance();\n     }\n \n     @Bean\n     public ImplementationLookup classPathScanImplementationLookup()\n-            throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, \n+            NoSuchMethodException, IllegalArgumentException, InvocationTargetException {\n \n         return (ImplementationLookup) Class.forName(env.getProperty(\"classPathScanImplementationLookup\")).\n-                newInstance();\n+                getDeclaredConstructor().newInstance();\n     }\n }"},{"sha":"c942730723f451a70d5567101ef404a3c4914efc","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/MemoryAppender.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -23,6 +23,7 @@\n import org.apache.logging.log4j.core.Filter;\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.appender.AbstractAppender;\n+import org.apache.logging.log4j.core.config.Property;\n import org.apache.logging.log4j.core.config.plugins.Plugin;\n import org.apache.logging.log4j.core.config.plugins.PluginAttribute;\n import org.apache.logging.log4j.core.config.plugins.PluginElement;\n@@ -45,7 +46,7 @@ protected MemoryAppender(\n             final Filter filter,\n             final boolean ignoreExceptions) {\n \n-        super(name, filter, null, ignoreExceptions);\n+        super(name, filter, null, ignoreExceptions, Property.EMPTY_ARRAY);\n         this.statements = new CircularFifoQueue<>(size);\n     }\n "},{"sha":"61a3643468411c86656fdd2790ce9d9fb9404e34","filename":"core/persistence-api/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fpom.xml?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -66,6 +66,11 @@ under the License.\n       <artifactId>syncope-common-idm-lib</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.common.am</groupId>\n+      <artifactId>syncope-common-am-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n     \n     <!-- TEST -->\n     <dependency>"},{"sha":"85dbfa440141d6b4b3b3d2dc91965cdb1f294389","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GatewayRouteDAO.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGatewayRouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGatewayRouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGatewayRouteDAO.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+\n+public interface GatewayRouteDAO extends DAO<GatewayRoute> {\n+\n+    GatewayRoute find(String key);\n+\n+    List<GatewayRoute> findAll();\n+\n+    GatewayRoute save(GatewayRoute route);\n+\n+    void delete(String key);\n+\n+    void delete(GatewayRoute route);\n+}"},{"sha":"70f1e6e66c9146e378521a4057913b121d9251c5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GatewayRoute.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGatewayRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGatewayRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGatewayRoute.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.net.URI;\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.GatewayFilter;\n+import org.apache.syncope.common.lib.types.GatewayPredicate;\n+import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n+\n+public interface GatewayRoute extends Entity {\n+\n+    String getName();\n+\n+    void setName(String name);\n+\n+    URI getTarget();\n+\n+    void setTarget(URI target);\n+\n+    List<GatewayFilter> getFilters();\n+\n+    void setFilters(List<GatewayFilter> filters);\n+\n+    List<GatewayPredicate> getPredicates();\n+\n+    void setPredicates(List<GatewayPredicate> predicates);\n+\n+    GatewayRouteStatus getStatus();\n+\n+    void setStatus(GatewayRouteStatus status);\n+}"},{"sha":"4466ca968baade7a0f83da074ad97c6ccf429f98","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGatewayRouteDAO.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGatewayRouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGatewayRouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGatewayRouteDAO.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.GatewayRouteDAO;\n+import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAGatewayRoute;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPAGatewayRouteDAO extends AbstractDAO<GatewayRoute> implements GatewayRouteDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public GatewayRoute find(final String key) {\n+        return entityManager().find(JPAGatewayRoute.class, key);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<GatewayRoute> findAll() {\n+        TypedQuery<GatewayRoute> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAGatewayRoute.class.getSimpleName() + \" e\", GatewayRoute.class);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    @Transactional(rollbackFor = Throwable.class)\n+    public GatewayRoute save(final GatewayRoute report) {\n+        return entityManager().merge(report);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        GatewayRoute report = find(key);\n+        if (report == null) {\n+            return;\n+        }\n+\n+        delete(report);\n+    }\n+\n+    @Override\n+    public void delete(final GatewayRoute report) {\n+        entityManager().remove(report);\n+    }\n+}"},{"sha":"9d46c27543e7d3046d4bcedcd73653499f60c693","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -130,6 +130,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnit;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n+import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Remediation;\n@@ -300,6 +301,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPARemediation();\n         } else if (reference.equals(Batch.class)) {\n             result = (E) new JPABatch();\n+        } else if (reference.equals(GatewayRoute.class)) {\n+            result = (E) new JPAGatewayRoute();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"8aee36297b7dc668a45da5c17ccbd3f2bf8b1bf0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAGatewayRoute.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.GatewayFilter;\n+import org.apache.syncope.common.lib.types.GatewayPredicate;\n+import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n+import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.GatewayRouteCheck;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+@Entity\n+@Table(name = JPAGatewayRoute.TABLE)\n+@GatewayRouteCheck\n+public class JPAGatewayRoute extends AbstractGeneratedKeyEntity implements GatewayRoute {\n+\n+    private static final long serialVersionUID = -8718852361106840530L;\n+\n+    public static final String TABLE = \"GatewayRoute\";\n+\n+    @Column(unique = true, nullable = false)\n+    private String name;\n+\n+    private String target;\n+\n+    @Lob\n+    private String predicates;\n+\n+    @Lob\n+    private String filters;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    private GatewayRouteStatus status;\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public URI getTarget() {\n+        return URI.create(target);\n+    }\n+\n+    @Override\n+    public void setTarget(final URI target) {\n+        this.target = target == null ? null : target.toASCIIString();\n+    }\n+\n+    @Override\n+    public List<GatewayFilter> getFilters() {\n+        return filters == null\n+                ? Collections.emptyList()\n+                : Arrays.asList(POJOHelper.deserialize(filters, GatewayFilter[].class));\n+    }\n+\n+    @Override\n+    public void setFilters(final List<GatewayFilter> filters) {\n+        this.filters = POJOHelper.serialize(filters);\n+    }\n+\n+    @Override\n+    public List<GatewayPredicate> getPredicates() {\n+        return predicates == null\n+                ? Collections.emptyList()\n+                : Arrays.asList(POJOHelper.deserialize(predicates, GatewayPredicate[].class));\n+    }\n+\n+    @Override\n+    public void setPredicates(final List<GatewayPredicate> predicates) {\n+        this.predicates = POJOHelper.serialize(predicates);\n+    }\n+\n+    @Override\n+    public GatewayRouteStatus getStatus() {\n+        return status;\n+    }\n+\n+    @Override\n+    public void setStatus(final GatewayRouteStatus status) {\n+        this.status = status;\n+    }\n+}"},{"sha":"1735d2db2847e972985fad87b4d2dc0715a9ce64","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/GatewayRouteCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FGatewayRouteCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FGatewayRouteCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FGatewayRouteCheck.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = GatewayRouteValidator.class)\n+@Documented\n+public @interface GatewayRouteCheck {\n+\n+    String message() default \"{org.apache.syncope.core.persistence.validation.gatewayroute}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"490528f1fd72aeedac91cc3d2b3cd15f4e4a2b71","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/GatewayRouteValidator.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FGatewayRouteValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FGatewayRouteValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FGatewayRouteValidator.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+\n+public class GatewayRouteValidator extends AbstractValidator<GatewayRouteCheck, GatewayRoute> {\n+\n+    @Override\n+    public boolean isValid(final GatewayRoute route, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        boolean isValid = true;\n+\n+        if (isHtml(route.getName())) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidName, \"Invalid name\")).\n+                    addPropertyNode(\"name\").addConstraintViolation();\n+\n+            isValid = false;\n+        }\n+\n+        if (route.getPredicates().size() > 1) {\n+            if (route.getPredicates().stream().allMatch(predicate -> predicate.getCond() != null)) {\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidValueList,\n+                                \"Cond must be set when predicates are more than one\")).\n+                        addPropertyNode(\"predicates\").addConstraintViolation();\n+            }\n+\n+            isValid = false;\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"2bcc959e2cf79e351bfea9d1dc170049da8fb810","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GatewayRouteTest.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGatewayRouteTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGatewayRouteTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGatewayRouteTest.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.ws.rs.HttpMethod;\n+import org.apache.syncope.common.lib.types.FilterFactory;\n+import org.apache.syncope.common.lib.types.GatewayFilter;\n+import org.apache.syncope.common.lib.types.GatewayPredicate;\n+import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n+import org.apache.syncope.common.lib.types.PredicateFactory;\n+import org.apache.syncope.core.persistence.api.dao.GatewayRouteDAO;\n+import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class GatewayRouteTest extends AbstractTest {\n+\n+    @Autowired\n+    private GatewayRouteDAO routeDAO;\n+\n+    @Test\n+    public void find() {\n+        GatewayRoute route = routeDAO.find(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n+        assertNotNull(route);\n+        assertEquals(GatewayRouteStatus.PUBLISHED, route.getStatus());\n+        assertEquals(1, route.getPredicates().size());\n+\n+        route = routeDAO.find(UUID.randomUUID().toString());\n+        assertNull(route);\n+    }\n+\n+    @Test\n+    public void findAll() {\n+        List<GatewayRoute> routes = routeDAO.findAll();\n+        assertNotNull(routes);\n+        assertEquals(1, routes.size());\n+    }\n+\n+    @Test\n+    public void save() {\n+        GatewayRoute route = entityFactory.newEntity(GatewayRoute.class);\n+        route.setName(\"just for test\");\n+        route.setTarget(URI.create(\"http://httpbin.org:80\"));\n+        route.setPredicates(Arrays.asList(new GatewayPredicate.Builder().\n+                factory(PredicateFactory.METHOD).args(HttpMethod.GET).build()));\n+        route.setFilters(Arrays.asList(new GatewayFilter.Builder().\n+                factory(FilterFactory.ADD_REQUEST_HEADER).args(\"X-Request-Foo, Bar\").build()));\n+        route.setStatus(GatewayRouteStatus.DRAFT);\n+\n+        int beforeCount = routeDAO.findAll().size();\n+\n+        route = routeDAO.save(route);\n+        assertNotNull(route);\n+        assertNotNull(route.getKey());\n+\n+        int afterCount = routeDAO.findAll().size();\n+        assertEquals(afterCount, beforeCount + 1);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        GatewayRoute route = routeDAO.find(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n+        assertNotNull(route);\n+\n+        routeDAO.delete(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n+\n+        route = routeDAO.find(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n+        assertNull(route);\n+    }\n+}"},{"sha":"4bf6a5ecee8609010030df96342dd09739ea0914","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -2558,4 +2558,7 @@ $$ }&#10;\n   <SyncopeLogger logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n   \n   <SecurityQuestion id=\"887028ea-66fc-41e7-b397-620d7ea6dfbb\" content=\"What's your mother's maiden name?\"/>\n+\n+  <GatewayRoute id=\"ec7bada2-3dd6-460c-8441-65521d005ffa\" name=\"basic1\" target=\"http://httpbin.org:80\" status=\"PUBLISHED\"\n+                predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n </dataset>"},{"sha":"27d35856d4f4095633e4d0e0ca2dc4c780d8d187","filename":"core/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -79,6 +79,7 @@ under the License.\n   <modules>\n     <module>idrepo</module>\n     <module>idm</module>\n+    <module>am</module>\n     <module>persistence-api</module>\n     <module>persistence-jpa</module>\n     <module>persistence-jpa-json</module>"},{"sha":"d879f710c9c9cd88be0e32d49604aeaf6f46d6db","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/GatewayRouteDataBinder.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGatewayRouteDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGatewayRouteDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGatewayRouteDataBinder.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+\n+public interface GatewayRouteDataBinder {\n+\n+    void getGatewayRoute(GatewayRoute report, GatewayRouteTO reportTO);\n+\n+    GatewayRouteTO getGatewayRouteTO(GatewayRoute report);\n+}"},{"sha":"ac7e563cc61d74cca5aad92e19ea3d5c9cc77552","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GatewayRouteDataBinderImpl.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGatewayRouteDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGatewayRouteDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGatewayRouteDataBinderImpl.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+import org.apache.syncope.core.provisioning.api.data.GatewayRouteDataBinder;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class GatewayRouteDataBinderImpl implements GatewayRouteDataBinder {\n+\n+    @Override\n+    public void getGatewayRoute(final GatewayRoute route, final GatewayRouteTO routeTO) {\n+        route.setName(routeTO.getName());\n+        route.setTarget(routeTO.getTarget());\n+        route.setFilters(routeTO.getFilters());\n+        route.setPredicates(routeTO.getPredicates());\n+        route.setStatus(routeTO.getStatus());\n+    }\n+\n+    @Override\n+    public GatewayRouteTO getGatewayRouteTO(final GatewayRoute route) {\n+        GatewayRouteTO routeTO = new GatewayRouteTO();\n+        routeTO.setKey(route.getKey());\n+        routeTO.setName(route.getName());\n+        routeTO.setTarget(route.getTarget());\n+        routeTO.getFilters().addAll(route.getFilters());\n+        routeTO.getPredicates().addAll(route.getPredicates());\n+        routeTO.setStatus(route.getStatus());\n+\n+        return routeTO;\n+    }\n+}"},{"sha":"422ed246867a957fb00395707a1f844945f7c6c1","filename":"fit/core-reference/pom.xml","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -51,6 +51,11 @@ under the License.\n       <artifactId>syncope-core-idm-rest-cxf</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.core.am</groupId>\n+      <artifactId>syncope-core-am-rest-cxf</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n \n     <!-- TEST -->\n     <dependency>\n@@ -71,6 +76,12 @@ under the License.\n       <version>${project.version}</version>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.client.am</groupId>\n+      <artifactId>syncope-client-am-lib</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.syncope.client.idm</groupId>\n       <artifactId>syncope-client-idm-console</artifactId>"},{"sha":"adcb34ead46c7b5123f818f7f00c1cdbcb6d6d01","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -119,6 +119,7 @@\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.apache.syncope.common.rest.api.service.UserRequestService;\n import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n+import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowTaskService;\n \n public abstract class AbstractITCase {\n@@ -265,6 +266,8 @@ public abstract class AbstractITCase {\n \n     protected static RemediationService remediationService;\n \n+    protected static GatewayRouteService gatewayRouteService;\n+\n     protected static CamelRouteService camelRouteService;\n \n     protected static SAML2SPService saml2SpService;\n@@ -343,6 +346,7 @@ public static void restSetup() {\n         securityQuestionService = adminClient.getService(SecurityQuestionService.class);\n         implementationService = adminClient.getService(ImplementationService.class);\n         remediationService = adminClient.getService(RemediationService.class);\n+        gatewayRouteService = adminClient.getService(GatewayRouteService.class);\n         camelRouteService = adminClient.getService(CamelRouteService.class);\n         saml2SpService = adminClient.getService(SAML2SPService.class);\n         saml2IdPService = adminClient.getService(SAML2IdPService.class);"},{"sha":"5d4f8c4a5d318d9d65a6d06183b0678cd86d0b40","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GatewayRouteITCase.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGatewayRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGatewayRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGatewayRouteITCase.java?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.ws.rs.HttpMethod;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.FilterFactory;\n+import org.apache.syncope.common.lib.types.GatewayFilter;\n+import org.apache.syncope.common.lib.types.GatewayPredicate;\n+import org.apache.syncope.common.lib.types.GatewayRouteStatus;\n+import org.apache.syncope.common.lib.types.PredicateFactory;\n+import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+\n+public class GatewayRouteITCase extends AbstractITCase {\n+\n+    @Test\n+    public void read() {\n+        GatewayRouteTO route = gatewayRouteService.read(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n+        assertNotNull(route);\n+        assertEquals(GatewayRouteStatus.PUBLISHED, route.getStatus());\n+        assertEquals(1, route.getPredicates().size());\n+\n+        try {\n+            gatewayRouteService.read(UUID.randomUUID().toString());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void findAll() {\n+        List<GatewayRouteTO> routes = gatewayRouteService.list();\n+        assertNotNull(routes);\n+        assertFalse(routes.isEmpty());\n+    }\n+\n+    @Test\n+    public void createUpdateDelete() {\n+        GatewayRouteTO route = new GatewayRouteTO();\n+        route.setName(\"just for test\");\n+        route.setTarget(URI.create(\"http://httpbin.org:80\"));\n+        route.getPredicates().add(new GatewayPredicate.Builder().\n+                factory(PredicateFactory.METHOD).args(HttpMethod.GET).build());\n+        route.getFilters().add(new GatewayFilter.Builder().\n+                factory(FilterFactory.ADD_REQUEST_HEADER).args(\"X-Request-Foo, Bar\").build());\n+        route.setStatus(GatewayRouteStatus.DRAFT);\n+\n+        int beforeCount = gatewayRouteService.list().size();\n+\n+        Response response = gatewayRouteService.create(route);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n+        route = getObject(response.getLocation(), GatewayRouteService.class, GatewayRouteTO.class);\n+        assertNotNull(route);\n+        assertNotNull(route.getKey());\n+\n+        int afterCount = gatewayRouteService.list().size();\n+        assertEquals(afterCount, beforeCount + 1);\n+\n+        route.setStatus(GatewayRouteStatus.STAGING);\n+        gatewayRouteService.update(route);\n+        route = gatewayRouteService.read(route.getKey());\n+        assertEquals(GatewayRouteStatus.STAGING, route.getStatus());\n+\n+        gatewayRouteService.delete(route.getKey());\n+\n+        try {\n+            gatewayRouteService.read(route.getKey());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+\n+        int endCount = gatewayRouteService.list().size();\n+        assertEquals(endCount, beforeCount);\n+    }\n+}"},{"sha":"cc8c14baf6c97aaff6b89ce5c5450af2b55c2ef2","filename":"sra/src/main/resources/application.properties","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -19,3 +19,12 @@ spring.groovy.template.check-template-location=false\n spring.main.banner-mode=log\n \n server.port=8080\n+\n+management.endpoint.gateway.enabled=true\n+management.endpoints.web.exposure.include=gateway\n+\n+spring.cloud.gateway.metrics.enabled=true\n+management.endpoint.metrics.enabled=true\n+management.endpoints.web.exposure.include=*\n+management.endpoint.prometheus.enabled=true\n+management.metrics.export.prometheus.enabled=true"},{"sha":"d7211f55e99af59a026e063250c0242d14f01d5c","filename":"sra/src/main/resources/log4j2.xml","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891a110b9fc3e32c0362d649ad488ab47174c1c9/sra%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891a110b9fc3e32c0362d649ad488ab47174c1c9/sra%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=891a110b9fc3e32c0362d649ad488ab47174c1c9","patch":"@@ -22,7 +22,7 @@ under the License.\n   <appenders>\n \n     <RollingRandomAccessFile name=\"main\" fileName=\"${log.directory}/sra.log\"\n-                             filePattern=\"${log.directory}/console-%d{yyyy-MM-dd}.log.gz\"\n+                             filePattern=\"${log.directory}/sra-%d{yyyy-MM-dd}.log.gz\"\n                              immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n         <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n@@ -33,6 +33,18 @@ under the License.\n       </Policies>\n     </RollingRandomAccessFile>\n     \n+    <RollingRandomAccessFile name=\"access\" fileName=\"${log.directory}/sra-access.log\"\n+                             filePattern=\"${log.directory}/sra-access-%d{yyyy-MM-dd}.log.gz\"\n+                             immediateFlush=\"false\" append=\"true\">\n+      <PatternLayout>\n+        <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n+      </PatternLayout>\n+      <Policies>\n+        <TimeBasedTriggeringPolicy/>\n+        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n+      </Policies>\n+    </RollingRandomAccessFile>\n+\n   </appenders>\n \n   <loggers>\n@@ -44,7 +56,12 @@ under the License.\n     <asyncLogger name=\"org.apache.syncope.sra\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n-    \n+\n+    <!-- Requires -Dreactor.netty.http.server.accessLogEnabled=true to work-->\n+    <asyncLogger name=\"reactor.netty.http.server.AccessLog\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"access\"/>\n+    </asyncLogger>\n+\n     <root level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </root>"}]}