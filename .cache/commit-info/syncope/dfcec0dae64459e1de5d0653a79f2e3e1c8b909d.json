{"sha":"dfcec0dae64459e1de5d0653a79f2e3e1c8b909d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRmY2VjMGRhZTY0NDU5ZTFkZTVkMDY1M2E3OWYyZTNlMWM4YjkwOWQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-04-13T10:35:34Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-04-13T10:39:45Z"},"message":"Small fixes","tree":{"sha":"38d84810923e1314f38fc3b795d8aa7b6515aaf3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/38d84810923e1314f38fc3b795d8aa7b6515aaf3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0527a8089064499798dadd774347703e294e8727","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0527a8089064499798dadd774347703e294e8727","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0527a8089064499798dadd774347703e294e8727"}],"stats":{"total":85,"additions":31,"deletions":54},"files":[{"sha":"70d4fd3e08357382e4fbdff93960dc284a00f10c","filename":"client/enduser/src/test/java/org/apache/syncope/client/enduser/util/UserRequestValidatorTest.java","status":"modified","additions":20,"deletions":19,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidatorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidatorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidatorTest.java?ref=dfcec0dae64459e1de5d0653a79f2e3e1c8b909d","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.client.enduser.util;\n \n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n@@ -27,59 +30,57 @@\n import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.junit.Assert;\n import org.junit.Test;\n import org.springframework.core.io.ClassPathResource;\n \n public class UserRequestValidatorTest {\n \n+    private AttrTO attrTO(String schemaKey, String... values) {\n+        return new AttrTO.Builder().schema(schemaKey).values(values).build();\n+    }\n+\n     @Test\n     public void testCompliant() throws IOException {\n-\n         UserTO userTO = new UserTO();\n         // plain\n-        AttrTO firstname = buildAttrTO(\"firstname\", \"defaultFirstname\");\n-        AttrTO surname = buildAttrTO(\"surname\", \"surnameValue\");\n-        AttrTO additionalCtype = buildAttrTO(\"additional#ctype\", \"ctypeValue\");\n-        AttrTO notAllowed = buildAttrTO(\"not_allowed\", \"notAllowedValue\");\n+        AttrTO firstname = attrTO(\"firstname\", \"defaultFirstname\");\n+        AttrTO surname = attrTO(\"surname\", \"surnameValue\");\n+        AttrTO additionalCtype = attrTO(\"additional#ctype\", \"ctypeValue\");\n+        AttrTO notAllowed = attrTO(\"not_allowed\", \"notAllowedValue\");\n         userTO.getPlainAttrs().addAll(Arrays.asList(firstname, surname, notAllowed, additionalCtype));\n \n         Map<String, CustomAttributesInfo> customForm = new ObjectMapper().readValue(new ClassPathResource(\n                 \"customForm.json\").getFile(), new TypeReference<HashMap<String, CustomAttributesInfo>>() {\n         });\n \n         // not allowed because of presence of notAllowed attribute\n-        Assert.assertFalse(UserRequestValidator.compliant(userTO, customForm, true));\n+        assertFalse(UserRequestValidator.compliant(userTO, customForm, true));\n \n         // remove notAllowed attribute and make it compliant\n         userTO.getPlainAttrs().remove(notAllowed);\n-        Assert.assertTrue(UserRequestValidator.compliant(userTO, customForm, true));\n+        assertTrue(UserRequestValidator.compliant(userTO, customForm, true));\n \n         // firstname must have only one defaultValue\n         userTO.getPlainAttrMap().get(\"firstname\").getValues().add(\"notAllowedFirstnameValue\");\n-        Assert.assertFalse(UserRequestValidator.compliant(userTO, customForm, true));\n-        Assert.assertTrue(UserRequestValidator.compliant(userTO, customForm, false));\n+        assertFalse(UserRequestValidator.compliant(userTO, customForm, true));\n+        assertTrue(UserRequestValidator.compliant(userTO, customForm, false));\n         // clean\n         userTO.getPlainAttrMap().get(\"firstname\").getValues().remove(\"notAllowedFirstnameValue\");\n \n         // derived must not be present\n-        AttrTO derivedNotAllowed = buildAttrTO(\"derivedNotAllowed\");\n+        AttrTO derivedNotAllowed = attrTO(\"derivedNotAllowed\");\n         userTO.getDerAttrs().add(derivedNotAllowed);\n-        Assert.assertFalse(UserRequestValidator.compliant(userTO, customForm, true));\n+        assertFalse(UserRequestValidator.compliant(userTO, customForm, true));\n         // clean \n         userTO.getDerAttrs().clear();\n \n         // virtual\n-        AttrTO virtualdata = buildAttrTO(\"virtualdata\", \"defaultVirtualData\");\n+        AttrTO virtualdata = attrTO(\"virtualdata\", \"defaultVirtualData\");\n         userTO.getVirAttrs().add(virtualdata);\n-        Assert.assertTrue(UserRequestValidator.compliant(userTO, customForm, true));\n+        assertTrue(UserRequestValidator.compliant(userTO, customForm, true));\n \n         // with empty form is compliant by definition\n-        Assert.assertTrue(UserRequestValidator.compliant(userTO, new HashMap<String, CustomAttributesInfo>(), true));\n-    }\n-\n-    private AttrTO buildAttrTO(String schemaKey, String... values) {\n-        return new AttrTO.Builder().schema(schemaKey).values(values).build();\n+        assertTrue(UserRequestValidator.compliant(userTO, new HashMap<String, CustomAttributesInfo>(), true));\n     }\n \n }"},{"sha":"322b478211f7684667bb6419e548bc1f35abdb01","filename":"deb/enduser/pom.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/deb%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/deb%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/deb%2Fenduser%2Fpom.xml?ref=dfcec0dae64459e1de5d0653a79f2e3e1c8b909d","patch":"@@ -92,7 +92,6 @@ under the License.\n         <directory>${project.basedir}/../../client/enduser/src/main/resources</directory>\n         <includes>\n           <include>enduser.properties</include>\n-          <include>enduserContext.xml</include>\n           <include>customForm.json</include>\n         </includes>\n         <targetPath>${project.build.directory}/etc</targetPath>"},{"sha":"a8fe48183372d17f9a6786125b57950b92f63684","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Logout.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java?ref=dfcec0dae64459e1de5d0653a79f2e3e1c8b909d","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.common.lib.SSOConstants;\n import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n-import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n \n @WebServlet(name = \"logout\", urlPatterns = { \"/saml2sp/logout\" })\n@@ -116,7 +115,6 @@ protected void doGet(final HttpServletRequest request, final HttpServletResponse\n             SAML2ReceivedResponseTO receivedResponse = new SAML2ReceivedResponseTO();\n             receivedResponse.setSamlResponse(samlResponse);\n             receivedResponse.setRelayState(relayState);\n-            receivedResponse.setBindingType(SAML2BindingType.REDIRECT);\n \n             doLogout(receivedResponse, request, response);\n         }\n@@ -128,7 +126,6 @@ protected void doPost(final HttpServletRequest request, final HttpServletRespons\n \n         // process POST binding logout response\n         SAML2ReceivedResponseTO receivedResponse = extract(request.getInputStream());\n-        receivedResponse.setBindingType(SAML2BindingType.POST);\n         doLogout(receivedResponse, request, response);\n     }\n "},{"sha":"3d5d9b477f60da5ead10bf827cd3da15e87338c0","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2ReceivedResponseTO.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2ReceivedResponseTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2ReceivedResponseTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2ReceivedResponseTO.java?ref=dfcec0dae64459e1de5d0653a79f2e3e1c8b909d","patch":"@@ -21,7 +21,6 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n @XmlRootElement(name = \"saml2ReceivedResponse\")\n @XmlType\n@@ -33,8 +32,6 @@ public class SAML2ReceivedResponseTO extends AbstractBaseBean {\n \n     private String relayState;\n \n-    private SAML2BindingType bindingType;\n-\n     public String getSamlResponse() {\n         return samlResponse;\n     }\n@@ -51,12 +48,4 @@ public void setRelayState(final String relayState) {\n         this.relayState = relayState;\n     }\n \n-    public SAML2BindingType getBindingType() {\n-        return bindingType;\n-    }\n-\n-    public void setBindingType(final SAML2BindingType bindingType) {\n-        this.bindingType = bindingType;\n-    }\n-\n }"},{"sha":"ab2959a7e0cf3d7fb8cb6663b5d1a700113faaca","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/types/SAML2BindingType.java","status":"modified","additions":3,"deletions":10,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2BindingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2BindingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2BindingType.java?ref=dfcec0dae64459e1de5d0653a79f2e3e1c8b909d","patch":"@@ -22,26 +22,19 @@\n \n @XmlEnum\n public enum SAML2BindingType {\n-    POST(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\", 0),\n-    REDIRECT(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\", 1);\n+    POST(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"),\n+    REDIRECT(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\");\n \n     private final String uri;\n \n-    private final int index;\n-\n-    SAML2BindingType(final String uri, final int index) {\n+    SAML2BindingType(final String uri) {\n         this.uri = uri;\n-        this.index = index;\n     }\n \n     public String getUri() {\n         return uri;\n     }\n \n-    public int getIndex() {\n-        return index;\n-    }\n-\n     public static SAML2BindingType fromUri(final String uri) {\n         SAML2BindingType bindingType = null;\n "},{"sha":"9835061473a389488c745b3c2390c7d39897ec06","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=dfcec0dae64459e1de5d0653a79f2e3e1c8b909d","patch":"@@ -196,7 +196,7 @@ public void getMetadata(final String spEntityID, final String urlContext, final\n \n             for (SAML2BindingType bindingType : SAML2BindingType.values()) {\n                 AssertionConsumerService assertionConsumerService = new AssertionConsumerServiceBuilder().buildObject();\n-                assertionConsumerService.setIndex(bindingType.getIndex());\n+                assertionConsumerService.setIndex(bindingType.ordinal());\n                 assertionConsumerService.setBinding(bindingType.getUri());\n                 assertionConsumerService.setLocation(spEntityID + urlContext + \"/assertion-consumer\");\n                 spSSODescriptor.getAssertionConsumerServices().add(assertionConsumerService);\n@@ -420,8 +420,7 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         // 2. parse the provided SAML response\n         Response samlResponse;\n         try {\n-            XMLObject responseObject = saml2rw.read(\n-                    SAML2BindingType.POST, useDeflateEncoding, response.getSamlResponse());\n+            XMLObject responseObject = saml2rw.read(useDeflateEncoding, response.getSamlResponse());\n             if (!(responseObject instanceof Response)) {\n                 throw new IllegalArgumentException(\"Expected \" + Response.class.getName()\n                         + \", got \" + responseObject.getClass().getName());\n@@ -587,7 +586,8 @@ public SAML2RequestTO createLogoutRequest(final String accessToken, final String\n         try {\n             // 3. generate relay state as JWT\n             Map<String, Object> claims = new HashMap<>();\n-            claims.put(JWT_CLAIM_IDP_DEFLATE, idp.isUseDeflateEncoding());\n+            claims.put(JWT_CLAIM_IDP_DEFLATE,\n+                    idp.getBindingType() == SAML2BindingType.REDIRECT ? true : idp.isUseDeflateEncoding());\n             Triple<String, String, Date> relayState =\n                     accessTokenDataBinder.generateJWT(logoutRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n             requestTO.setRelayState(relayState.getMiddle());\n@@ -641,8 +641,7 @@ public void validateLogoutResponse(final String accessToken, final SAML2Received\n         // 3. parse the provided SAML response\n         LogoutResponse logoutResponse;\n         try {\n-            XMLObject responseObject = saml2rw.read(\n-                    response.getBindingType(), useDeflateEncoding, response.getSamlResponse());\n+            XMLObject responseObject = saml2rw.read(useDeflateEncoding, response.getSamlResponse());\n             if (!(responseObject instanceof LogoutResponse)) {\n                 throw new IllegalArgumentException(\"Expected \" + LogoutResponse.class.getName()\n                         + \", got \" + responseObject.getClass().getName());"},{"sha":"6b75472e22979628eed4ea8388afeb7caba466c0","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java?ref=dfcec0dae64459e1de5d0653a79f2e3e1c8b909d","patch":"@@ -127,7 +127,7 @@ public String getId() {\n     }\n \n     public boolean isUseDeflateEncoding() {\n-        return bindingType == SAML2BindingType.REDIRECT ? true : useDeflateEncoding;\n+        return useDeflateEncoding;\n     }\n \n     public void setUseDeflateEncoding(final boolean useDeflateEncoding) {"},{"sha":"429c088aff5031c2f21dd16e8ba6721b9d3188c6","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ReaderWriter.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dfcec0dae64459e1de5d0653a79f2e3e1c8b909d/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java?ref=dfcec0dae64459e1de5d0653a79f2e3e1c8b909d","patch":"@@ -46,7 +46,6 @@\n import org.apache.cxf.rs.security.saml.sso.SAMLProtocolResponseValidator;\n import org.apache.cxf.staxutils.StaxUtils;\n import org.apache.syncope.common.lib.SSOConstants;\n-import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.core.logic.init.SAML2SPLoader;\n import org.apache.wss4j.common.crypto.Merlin;\n import org.apache.wss4j.common.ext.WSSecurityException;\n@@ -126,12 +125,12 @@ public void write(final Writer writer, final XMLObject object, final boolean sig\n         transformer.transform(source, streamResult);\n     }\n \n-    public XMLObject read(final SAML2BindingType bindingType, final boolean useDeflateEncoding, final String response)\n+    public XMLObject read(final boolean useDeflateEncoding, final String response)\n             throws DataFormatException, UnsupportedEncodingException, XMLStreamException, WSSecurityException {\n \n         InputStream tokenStream;\n         byte[] deflatedToken = Base64.getDecoder().decode(response);\n-        tokenStream = bindingType != SAML2BindingType.POST && useDeflateEncoding\n+        tokenStream = useDeflateEncoding\n                 ? new DeflateEncoderDecoder().inflateToken(deflatedToken)\n                 : new ByteArrayInputStream(deflatedToken);\n "}]}