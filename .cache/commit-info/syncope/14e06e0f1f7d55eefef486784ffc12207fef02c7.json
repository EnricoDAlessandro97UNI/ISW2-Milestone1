{"sha":"14e06e0f1f7d55eefef486784ffc12207fef02c7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE0ZTA2ZTBmMWY3ZDU1ZWVmZWY0ODY3ODRmZmMxMjIwN2ZlZjAyYzc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-21T13:29:00Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-21T13:29:00Z"},"message":"Various small fixes","tree":{"sha":"a91135049ce6e3526a4f45e7c918f46e8331bcff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a91135049ce6e3526a4f45e7c918f46e8331bcff"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/14e06e0f1f7d55eefef486784ffc12207fef02c7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/14e06e0f1f7d55eefef486784ffc12207fef02c7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/14e06e0f1f7d55eefef486784ffc12207fef02c7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/14e06e0f1f7d55eefef486784ffc12207fef02c7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a92f400f6458a8d789780e0d3089d98c97458b6d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a92f400f6458a8d789780e0d3089d98c97458b6d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a92f400f6458a8d789780e0d3089d98c97458b6d"}],"stats":{"total":144,"additions":81,"deletions":63},"files":[{"sha":"686742a45520c7b626700f6a1dd1ead0995c712e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/14e06e0f1f7d55eefef486784ffc12207fef02c7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/14e06e0f1f7d55eefef486784ffc12207fef02c7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=14e06e0f1f7d55eefef486784ffc12207fef02c7","patch":"@@ -555,6 +555,7 @@ public String transform(final AnyTypeClass role) {\n \n     protected RelationshipTO getRelationshipTO(final Relationship<? extends Any<?>, AnyObject> relationship) {\n         return new RelationshipTO.Builder().\n+                type(relationship.getType().getKey()).\n                 left(relationship.getLeftEnd().getType().getKey(), relationship.getLeftEnd().getKey()).\n                 right(relationship.getRightEnd().getType().getKey(), relationship.getRightEnd().getKey()).\n                 build();"},{"sha":"19684b28d9b726a04f5691367739980c24140ebd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":39,"deletions":31,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/14e06e0f1f7d55eefef486784ffc12207fef02c7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/14e06e0f1f7d55eefef486784ffc12207fef02c7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=14e06e0f1f7d55eefef486784ffc12207fef02c7","patch":"@@ -157,12 +157,16 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n                     LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n                 } else if (assignableAnyObjects.contains(otherEnd)) {\n                     RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n-                    ARelationship relationship = entityFactory.newEntity(ARelationship.class);\n-                    relationship.setType(relationshipType);\n-                    relationship.setRightEnd(anyObject);\n-                    relationship.setLeftEnd(anyObject);\n+                    if (relationshipType == null) {\n+                        LOG.debug(\"Ignoring invalid relationship type {}\", relationshipTO.getType());\n+                    } else {\n+                        ARelationship relationship = entityFactory.newEntity(ARelationship.class);\n+                        relationship.setType(relationshipType);\n+                        relationship.setRightEnd(anyObject);\n+                        relationship.setLeftEnd(anyObject);\n \n-                    anyObject.add(relationship);\n+                        anyObject.add(relationship);\n+                    }\n                 } else {\n                     LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n \n@@ -234,33 +238,37 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         for (RelationshipPatch patch : anyObjectPatch.getRelationships()) {\n             if (patch.getRelationshipTO() != null) {\n                 RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n-                ARelationship relationship =\n-                        anyObject.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n-                if (relationship != null) {\n-                    anyObject.remove(relationship);\n-                    toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n-                }\n-\n-                if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n-                    if (otherEnd == null) {\n-                        LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n-                    } else if (assignableAnyObjects.contains(otherEnd)) {\n-                        relationship = entityFactory.newEntity(ARelationship.class);\n-                        relationship.setType(relationshipType);\n-                        relationship.setRightEnd(otherEnd);\n-                        relationship.setLeftEnd(anyObject);\n-\n-                        anyObject.add(relationship);\n-\n-                        toBeProvisioned.addAll(otherEnd.getResourceNames());\n-                    } else {\n-                        LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n+                if (relationshipType == null) {\n+                    LOG.debug(\"Ignoring invalid relationship type {}\", patch.getRelationshipTO().getType());\n+                } else {\n+                    ARelationship relationship =\n+                            anyObject.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n+                    if (relationship != null) {\n+                        anyObject.remove(relationship);\n+                        toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n+                    }\n \n-                        SyncopeClientException unassignabled =\n-                                SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n-                        unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n-                        scce.addException(unassignabled);\n+                    if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                        AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n+                        if (otherEnd == null) {\n+                            LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n+                        } else if (assignableAnyObjects.contains(otherEnd)) {\n+                            relationship = entityFactory.newEntity(ARelationship.class);\n+                            relationship.setType(relationshipType);\n+                            relationship.setRightEnd(otherEnd);\n+                            relationship.setLeftEnd(anyObject);\n+\n+                            anyObject.add(relationship);\n+\n+                            toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                        } else {\n+                            LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n+\n+                            SyncopeClientException unassignabled =\n+                                    SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n+                            unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                            scce.addException(unassignabled);\n+                        }\n                     }\n                 }\n             }"},{"sha":"1668fc40df53586bcac423eb070af9f41d61f524","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":40,"deletions":31,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/14e06e0f1f7d55eefef486784ffc12207fef02c7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/14e06e0f1f7d55eefef486784ffc12207fef02c7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=14e06e0f1f7d55eefef486784ffc12207fef02c7","patch":"@@ -200,12 +200,17 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n                     LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n                 } else if (assignableAnyObjects.contains(otherEnd)) {\n                     RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n-                    URelationship relationship = entityFactory.newEntity(URelationship.class);\n-                    relationship.setType(relationshipType);\n-                    relationship.setRightEnd(otherEnd);\n-                    relationship.setLeftEnd(user);\n+                    if (relationshipType == null) {\n+                        LOG.debug(\"Ignoring invalid relationship type {}\", relationshipTO.getType());\n+                    } else {\n+\n+                        URelationship relationship = entityFactory.newEntity(URelationship.class);\n+                        relationship.setType(relationshipType);\n+                        relationship.setRightEnd(otherEnd);\n+                        relationship.setLeftEnd(user);\n \n-                    user.add(relationship);\n+                        user.add(relationship);\n+                    }\n                 } else {\n                     LOG.error(\"{} cannot be assigned to {}\", otherEnd, user);\n \n@@ -377,33 +382,37 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         for (RelationshipPatch patch : userPatch.getRelationships()) {\n             if (patch.getRelationshipTO() != null) {\n                 RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n-                URelationship relationship =\n-                        user.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n-                if (relationship != null) {\n-                    user.remove(relationship);\n-                    toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n-                }\n-\n-                if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n-                    if (otherEnd == null) {\n-                        LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n-                    } else if (assignableAnyObjects.contains(otherEnd)) {\n-                        relationship = entityFactory.newEntity(URelationship.class);\n-                        relationship.setType(relationshipType);\n-                        relationship.setRightEnd(otherEnd);\n-                        relationship.setLeftEnd(user);\n-\n-                        user.add(relationship);\n-\n-                        toBeProvisioned.addAll(otherEnd.getResourceNames());\n-                    } else {\n-                        LOG.error(\"{} cannot be assigned to {}\", otherEnd, user);\n+                if (relationshipType == null) {\n+                    LOG.debug(\"Ignoring invalid relationship type {}\", patch.getRelationshipTO().getType());\n+                } else {\n+                    URelationship relationship =\n+                            user.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n+                    if (relationship != null) {\n+                        user.remove(relationship);\n+                        toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n+                    }\n \n-                        SyncopeClientException unassignabled =\n-                                SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n-                        unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n-                        scce.addException(unassignabled);\n+                    if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                        AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n+                        if (otherEnd == null) {\n+                            LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n+                        } else if (assignableAnyObjects.contains(otherEnd)) {\n+                            relationship = entityFactory.newEntity(URelationship.class);\n+                            relationship.setType(relationshipType);\n+                            relationship.setRightEnd(otherEnd);\n+                            relationship.setLeftEnd(user);\n+\n+                            user.add(relationship);\n+\n+                            toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                        } else {\n+                            LOG.error(\"{} cannot be assigned to {}\", otherEnd, user);\n+\n+                            SyncopeClientException unassignabled =\n+                                    SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n+                            unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                            scce.addException(unassignabled);\n+                        }\n                     }\n                 }\n             }"},{"sha":"978b5f83a7410d9b51c18953d2f8129c3fe7b627","filename":"fit/core-reference/src/main/resources/mysql/domains/Master.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/14e06e0f1f7d55eefef486784ffc12207fef02c7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/14e06e0f1f7d55eefef486784ffc12207fef02c7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fdomains%2FMaster.properties?ref=14e06e0f1f7d55eefef486784ffc12207fef02c7","patch":"@@ -19,7 +19,7 @@ Master.url=jdbc:mysql://localhost:3306/syncope?characterEncoding=UTF-8\n Master.schema=\n Master.username=syncope\n Master.password=syncope\n-Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB)\n Master.orm=META-INF/spring-orm.xml\n \n # note: other connection pool settings can also be configured here, see DataSource definition"}]}