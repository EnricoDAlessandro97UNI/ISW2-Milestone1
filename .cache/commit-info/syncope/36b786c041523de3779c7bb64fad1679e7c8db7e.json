{"sha":"36b786c041523de3779c7bb64fad1679e7c8db7e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM2Yjc4NmMwNDE1MjNkZTM3NzljN2JiNjRmYWQxNjc5ZTdjOGRiN2U=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-25T13:52:50Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-25T13:53:06Z"},"message":"[SYNCOPE-1082] Remove half-management via JPA for dynamic members","tree":{"sha":"f7c9b05f9bfaa9f49abed5e75cb4c5eae71bac5f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f7c9b05f9bfaa9f49abed5e75cb4c5eae71bac5f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/36b786c041523de3779c7bb64fad1679e7c8db7e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/36b786c041523de3779c7bb64fad1679e7c8db7e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/36b786c041523de3779c7bb64fad1679e7c8db7e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/36b786c041523de3779c7bb64fad1679e7c8db7e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"be35817fe645f4142c2d80be0ee55e36c156324f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/be35817fe645f4142c2d80be0ee55e36c156324f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/be35817fe645f4142c2d80be0ee55e36c156324f"}],"stats":{"total":685,"additions":319,"deletions":366},"files":[{"sha":"13102a5fdf0e0c549a0ea03778f187c260dafe01","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -80,10 +80,7 @@ public RoleTO update(final RoleTO roleTO) {\n             throw new NotFoundException(roleTO.getKey());\n         }\n \n-        binder.update(role, roleTO);\n-        role = roleDAO.save(role);\n-\n-        return binder.getRoleTO(role);\n+        return binder.getRoleTO(roleDAO.save(binder.update(role, roleTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_DELETE + \"')\")"},{"sha":"04ff490104aeda4ba6fe503236b4856cef09a7c2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -46,13 +46,17 @@ public interface GroupDAO extends AnyDAO<Group> {\n \n     List<TypeExtension> findTypeExtensions(AnyTypeClass anyTypeClass);\n \n-    List<String> findADynMembersKeys(Group group);\n+    List<String> findADynMembers(Group group);\n+\n+    void clearADynMembers(Group group);\n \n     void refreshDynMemberships(AnyObject anyObject);\n \n     void removeDynMemberships(AnyObject anyObject);\n \n-    List<String> findUDynMembersKeys(Group group);\n+    List<String> findUDynMembers(Group group);\n+\n+    void clearUDynMembers(Group group);\n \n     void refreshDynMemberships(User user);\n "},{"sha":"f76b38238af358775119158ee68271b44ce27f6f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RoleDAO.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -39,9 +39,12 @@ public interface RoleDAO extends DAO<Role> {\n \n     void delete(String key);\n \n-    List<String> findDynMembersKeys(Role role);\n+    List<String> findDynMembers(Role role);\n+\n+    void clearDynMembers(Role role);\n \n     void refreshDynMemberships(User user);\n \n     void removeDynMemberships(User user);\n+\n }"},{"sha":"b62ea175cd9657ea84343d0b8710a6cc864a2734","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynMembership.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -23,8 +23,4 @@\n     String getFIQLCond();\n \n     void setFIQLCond(String fiql);\n-\n-    boolean add(A any);\n-\n-    void clear();\n }"},{"sha":"3fba66b17cd06ea203b48c7cba62a8c93d8455d5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -55,6 +55,7 @@\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAccessToken;\n import org.apache.syncope.core.persistence.jpa.entity.JPAReportExec;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n@@ -86,7 +87,7 @@ public class XMLContentExporter extends AbstractContentDealer implements Content\n         JPAUser.TABLE, JPAUPlainAttr.TABLE, JPAUPlainAttrValue.TABLE, JPAUPlainAttrUniqueValue.TABLE,\n         JPAURelationship.TABLE, JPAUMembership.TABLE,\n         JPAAnyObject.TABLE, JPAAPlainAttr.TABLE, JPAAPlainAttrValue.TABLE, JPAAPlainAttrUniqueValue.TABLE,\n-        JPAARelationship.TABLE, JPAAMembership.TABLE\n+        JPAARelationship.TABLE, JPAAMembership.TABLE, JPAAccessToken.TABLE\n     }));\n \n     protected static final Map<String, String> TABLES_TO_BE_FILTERED ="},{"sha":"8ebea1d2a5a8db187946f4b6188e0af8d1b4b4d8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java","status":"modified","additions":21,"deletions":20,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -43,12 +43,12 @@\n @Component\n public class XMLContentLoader extends AbstractContentDealer implements ContentLoader {\n \n-    @Resource(name = \"indexesXML\")\n-    private ResourceWithFallbackLoader indexesXML;\n-\n     @Resource(name = \"viewsXML\")\n     private ResourceWithFallbackLoader viewsXML;\n \n+    @Resource(name = \"indexesXML\")\n+    private ResourceWithFallbackLoader indexesXML;\n+\n     @Override\n     public Integer getPriority() {\n         return 0;\n@@ -83,8 +83,8 @@ public void load() {\n                     LOG.error(\"[{}] While loading default content\", entry.getKey(), e);\n                 }\n                 try {\n-                    createIndexes(entry.getKey(), entry.getValue());\n                     createViews(entry.getKey(), entry.getValue());\n+                    createIndexes(entry.getKey(), entry.getValue());\n                 } catch (IOException e) {\n                     LOG.error(\"[{}] While creating indexes and views\", entry.getKey(), e);\n                 }\n@@ -109,41 +109,42 @@ private void loadDefaultContent(\n         }\n     }\n \n-    private void createIndexes(final String domain, final DataSource dataSource) throws IOException {\n-        LOG.debug(\"[{}] Creating indexes\", domain);\n+    private void createViews(final String domain, final DataSource dataSource) throws IOException {\n+        LOG.debug(\"[{}] Creating views\", domain);\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n \n-        Properties indexes = PropertiesLoaderUtils.loadProperties(indexesXML.getResource());\n-        for (String idx : indexes.stringPropertyNames()) {\n-            LOG.debug(\"[{}] Creating index {}\", domain, indexes.get(idx).toString());\n+        Properties views = PropertiesLoaderUtils.loadProperties(viewsXML.getResource());\n+        for (String idx : views.stringPropertyNames()) {\n+            LOG.debug(\"[{}] Creating view {}\", domain, views.get(idx).toString());\n \n             try {\n-                jdbcTemplate.execute(indexes.get(idx).toString());\n+                jdbcTemplate.execute(views.get(idx).toString().replaceAll(\"\\\\n\", \" \"));\n             } catch (DataAccessException e) {\n-                LOG.error(\"[{}] Could not create index\", domain, e);\n+                LOG.error(\"[{}] Could not create view\", domain, e);\n             }\n         }\n \n-        LOG.debug(\"Indexes created\");\n+        LOG.debug(\"Views created\");\n     }\n \n-    private void createViews(final String domain, final DataSource dataSource) throws IOException {\n-        LOG.debug(\"[{}] Creating views\", domain);\n+    private void createIndexes(final String domain, final DataSource dataSource) throws IOException {\n+        LOG.debug(\"[{}] Creating indexes\", domain);\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n \n-        Properties views = PropertiesLoaderUtils.loadProperties(viewsXML.getResource());\n-        for (String idx : views.stringPropertyNames()) {\n-            LOG.debug(\"[{}] Creating view {}\", domain, views.get(idx).toString());\n+        Properties indexes = PropertiesLoaderUtils.loadProperties(indexesXML.getResource());\n+        for (String idx : indexes.stringPropertyNames()) {\n+            LOG.debug(\"[{}] Creating index {}\", domain, indexes.get(idx).toString());\n \n             try {\n-                jdbcTemplate.execute(views.get(idx).toString().replaceAll(\"\\\\n\", \" \"));\n+                jdbcTemplate.execute(indexes.get(idx).toString());\n             } catch (DataAccessException e) {\n-                LOG.error(\"[{}] Could not create view\", domain, e);\n+                LOG.error(\"[{}] Could not create index\", domain, e);\n             }\n         }\n \n-        LOG.debug(\"Views created\");\n+        LOG.debug(\"Indexes created\");\n     }\n+\n }"},{"sha":"f882ad711cfdaa0eb8da8bdfc4d57f472cfe7abd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -54,10 +54,8 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.event.AnyCreatedUpdatedEvent;\n@@ -262,12 +260,7 @@ public void delete(final AnyObject anyObject) {\n     @Override\n     public List<Group> findDynGroups(final AnyObject anyObject) {\n         Query query = entityManager().createNativeQuery(\n-                \"SELECT t2.id FROM \" + JPAADynGroupMembership.TABLE + \" t0 \"\n-                + \"INNER JOIN \" + JPAADynGroupMembership.JOIN_TABLE + \" t1 \"\n-                + \"ON t0.id = t1.aDynGroupMembership_id \"\n-                + \"LEFT OUTER JOIN \" + JPAGroup.TABLE + \" t2 \"\n-                + \"ON t0.GROUP_ID = t2.id \"\n-                + \"WHERE t1.anyObject_id = ?1\");\n+                \"SELECT group_id FROM \" + JPAGroupDAO.ADYNMEMB_TABLE + \" WHERE any_id=?\");\n         query.setParameter(1, anyObject.getKey());\n \n         List<Group> result = new ArrayList<>();"},{"sha":"cc70cd2c30c52d94277e15b2910bbc33826c0255","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":94,"deletions":81,"changes":175,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -55,6 +56,7 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n+import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n@@ -75,6 +77,10 @@\n @Repository\n public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n \n+    public static final String UDYNMEMB_TABLE = \"UDynGroupMembers\";\n+\n+    public static final String ADYNMEMB_TABLE = \"ADynGroupMembers\";\n+\n     @Autowired\n     private PlainAttrDAO plainAttrDAO;\n \n@@ -274,15 +280,20 @@ public Group save(final Group group) {\n         Group merged = super.save(group);\n         publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged));\n \n-        // refresh dynaminc memberships\n+        // refresh dynamic memberships\n         if (merged.getUDynMembership() != null) {\n             List<User> matching = searchDAO().search(\n                     buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm()),\n                     AnyTypeKind.USER);\n \n-            merged.getUDynMembership().clear();\n+            clearUDynMembers(merged);\n+\n             for (User user : matching) {\n-                merged.getUDynMembership().add(user);\n+                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + UDYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                insert.setParameter(1, user.getKey());\n+                insert.setParameter(2, merged.getKey());\n+                insert.executeUpdate();\n+\n                 publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user));\n             }\n         }\n@@ -291,9 +302,15 @@ public Group save(final Group group) {\n                     buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm()),\n                     AnyTypeKind.ANY_OBJECT);\n \n-            memb.clear();\n+            clearADynMembers(merged);\n+\n             for (AnyObject anyObject : matching) {\n-                memb.add(anyObject);\n+                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + ADYNMEMB_TABLE + \" VALUES(?, ?, ?)\");\n+                insert.setParameter(1, anyObject.getType().getKey());\n+                insert.setParameter(2, anyObject.getKey());\n+                insert.setParameter(3, merged.getKey());\n+                insert.executeUpdate();\n+\n                 publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, anyObject));\n             }\n         }\n@@ -347,13 +364,13 @@ public List<TypeExtension> findTypeExtensions(final AnyTypeClass anyTypeClass) {\n     }\n \n     @Override\n-    public List<String> findADynMembersKeys(final Group group) {\n+    public List<String> findADynMembers(final Group group) {\n         List<String> result = new ArrayList<>();\n         for (ADynGroupMembership memb : group.getADynMemberships()) {\n             Query query = entityManager().createNativeQuery(\n-                    \"SELECT t.anyObject_id FROM \" + JPAADynGroupMembership.JOIN_TABLE + \" t \"\n-                    + \"WHERE t.aDynGroupMembership_id=?\");\n-            query.setParameter(1, memb.getKey());\n+                    \"SELECT any_id FROM \" + ADYNMEMB_TABLE + \" WHERE group_id=? AND anyType_id=?\");\n+            query.setParameter(1, group.getKey());\n+            query.setParameter(2, memb.getAnyType().getKey());\n \n             for (Object key : query.getResultList()) {\n                 String actualKey = key instanceof Object[]\n@@ -366,72 +383,69 @@ public List<String> findADynMembersKeys(final Group group) {\n         return result;\n     }\n \n-    private List<Group> findWithADynMemberships(final int page, final int itemsPerPage) {\n-        TypedQuery<Group> query = entityManager().createQuery(\n-                \"SELECT e FROM  \" + JPAGroup.class.getSimpleName() + \" e WHERE e.aDynMemberships IS NOT EMPTY\",\n-                Group.class);\n-        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n-        query.setMaxResults(itemsPerPage);\n+    @Override\n+    public void clearADynMembers(final Group group) {\n+        Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + ADYNMEMB_TABLE + \" WHERE group_id=?\");\n+        delete.setParameter(1, group.getKey());\n+        delete.executeUpdate();\n+    }\n \n+    private List<ADynGroupMembership> findWithADynMemberships(final AnyType anyType) {\n+        TypedQuery<ADynGroupMembership> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAADynGroupMembership.class.getSimpleName() + \" e  WHERE e.anyType=:anyType\",\n+                ADynGroupMembership.class);\n+        query.setParameter(\"anyType\", anyType);\n         return query.getResultList();\n     }\n \n     @Transactional\n     @Override\n     public void refreshDynMemberships(final AnyObject anyObject) {\n-        Query countQuery = entityManager().createQuery(\n-                \"SELECT COUNT(e) FROM  \" + JPAGroup.class.getSimpleName() + \" e WHERE e.aDynMemberships IS NOT EMPTY\");\n-        int count = ((Number) countQuery.getSingleResult()).intValue();\n-\n-        for (int page = 1; page <= (count / DEFAULT_PAGE_SIZE) + 1; page++) {\n-            for (Group group : findWithADynMemberships(page, DEFAULT_PAGE_SIZE)) {\n-                if (!group.getADynMemberships().isEmpty()) {\n-                    for (ADynGroupMembership memb : group.getADynMemberships()) {\n-                        if (jpaAnySearchDAO().matches(\n-                                anyObject,\n-                                buildDynMembershipCond(memb.getFIQLCond(), group.getRealm()))) {\n-\n-                            memb.add(anyObject);\n-                        } else {\n-                            Query query = entityManager().createNativeQuery(\n-                                    \"DELETE FROM \" + JPAADynGroupMembership.JOIN_TABLE + \" t \"\n-                                    + \"WHERE t.anyObject_id=? and t.aDynGroupMembership_id=?\");\n-                            query.setParameter(1, anyObject.getKey());\n-                            query.setParameter(2, memb.getKey());\n-                            query.executeUpdate();\n-                        }\n-\n-                        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group));\n-                    }\n-                }\n+        for (ADynGroupMembership memb : findWithADynMemberships(anyObject.getType())) {\n+            Query delete = entityManager().createNativeQuery(\n+                    \"DELETE FROM \" + ADYNMEMB_TABLE + \" WHERE group_id=? AND any_id=?\");\n+            delete.setParameter(1, memb.getGroup().getKey());\n+            delete.setParameter(2, anyObject.getKey());\n+            delete.executeUpdate();\n+\n+            if (jpaAnySearchDAO().matches(\n+                    anyObject,\n+                    buildDynMembershipCond(memb.getFIQLCond(), memb.getGroup().getRealm()))) {\n+\n+                Query insert = entityManager().createNativeQuery(\n+                        \"INSERT INTO \" + ADYNMEMB_TABLE + \" VALUES(?, ?, ?)\");\n+                insert.setParameter(1, anyObject.getType().getKey());\n+                insert.setParameter(2, anyObject.getKey());\n+                insert.setParameter(3, memb.getGroup().getKey());\n+                insert.executeUpdate();\n             }\n+\n+            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, memb.getGroup()));\n         }\n     }\n \n     @Override\n     public void removeDynMemberships(final AnyObject anyObject) {\n         List<Group> dynGroups = anyObjectDAO().findDynGroups(anyObject);\n \n-        Query query = entityManager().createNativeQuery(\n-                \"DELETE FROM \" + JPAADynGroupMembership.JOIN_TABLE + \" t WHERE t.anyObject_id=?\");\n-        query.setParameter(1, anyObject.getKey());\n-        query.executeUpdate();\n+        Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + ADYNMEMB_TABLE + \" WHERE any_id=?\");\n+        delete.setParameter(1, anyObject.getKey());\n+        delete.executeUpdate();\n \n         for (Group group : dynGroups) {\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group));\n         }\n     }\n \n     @Override\n-    public List<String> findUDynMembersKeys(final Group group) {\n+    public List<String> findUDynMembers(final Group group) {\n         if (group.getUDynMembership() == null) {\n             return Collections.emptyList();\n         }\n \n         Query query = entityManager().createNativeQuery(\n-                \"SELECT t.user_id FROM \" + JPAUDynGroupMembership.JOIN_TABLE + \" t \"\n-                + \"WHERE t.uDynGroupMembership_id=?\");\n-        query.setParameter(1, group.getUDynMembership().getKey());\n+                \"SELECT any_id FROM \" + UDYNMEMB_TABLE + \" WHERE group_id=?\");\n+        query.setParameter(1, group.getKey());\n \n         List<String> result = new ArrayList<>();\n         for (Object key : query.getResultList()) {\n@@ -444,54 +458,53 @@ public List<String> findUDynMembersKeys(final Group group) {\n         return result;\n     }\n \n-    private List<Group> findWithUDynMemberships(final int page, final int itemsPerPage) {\n-        TypedQuery<Group> query = entityManager().createQuery(\n-                \"SELECT e FROM  \" + JPAGroup.class.getSimpleName() + \" e WHERE e.uDynMembership IS NOT NULL\",\n-                Group.class);\n-        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n-        query.setMaxResults(itemsPerPage);\n+    @Override\n+    public void clearUDynMembers(final Group group) {\n+        Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + UDYNMEMB_TABLE + \" WHERE group_id=?\");\n+        delete.setParameter(1, group.getKey());\n+        delete.executeUpdate();\n+    }\n+\n+    private List<UDynGroupMembership> findWithUDynMemberships() {\n+        TypedQuery<UDynGroupMembership> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAUDynGroupMembership.class.getSimpleName() + \" e\",\n+                UDynGroupMembership.class);\n \n         return query.getResultList();\n     }\n \n     @Transactional\n     @Override\n     public void refreshDynMemberships(final User user) {\n-        Query countQuery = entityManager().createQuery(\n-                \"SELECT COUNT(e) FROM  \" + JPAGroup.class.getSimpleName() + \" e WHERE e.uDynMembership IS NOT NULL\");\n-        int count = ((Number) countQuery.getSingleResult()).intValue();\n-\n-        for (int page = 1; page <= (count / DEFAULT_PAGE_SIZE) + 1; page++) {\n-            for (Group group : findWithUDynMemberships(page, DEFAULT_PAGE_SIZE)) {\n-                if (group.getUDynMembership() != null) {\n-                    if (jpaAnySearchDAO().matches(\n-                            user,\n-                            buildDynMembershipCond(group.getUDynMembership().getFIQLCond(), group.getRealm()))) {\n-\n-                        group.getUDynMembership().add(user);\n-                    } else {\n-                        Query query = entityManager().createNativeQuery(\n-                                \"DELETE FROM \" + JPAUDynGroupMembership.JOIN_TABLE + \" t \"\n-                                + \"WHERE t.user_id=? and t.uDynGroupMembership_id=?\");\n-                        query.setParameter(1, user.getKey());\n-                        query.setParameter(2, group.getUDynMembership().getKey());\n-                        query.executeUpdate();\n-                    }\n-\n-                    publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group));\n-                }\n+        for (UDynGroupMembership memb : findWithUDynMemberships()) {\n+            Query delete = entityManager().createNativeQuery(\n+                    \"DELETE FROM \" + UDYNMEMB_TABLE + \" WHERE group_id=? AND any_id=?\");\n+            delete.setParameter(1, memb.getGroup().getKey());\n+            delete.setParameter(2, user.getKey());\n+            delete.executeUpdate();\n+\n+            if (jpaAnySearchDAO().matches(\n+                    user,\n+                    buildDynMembershipCond(memb.getFIQLCond(), memb.getGroup().getRealm()))) {\n+\n+                Query insert = entityManager().createNativeQuery(\n+                        \"INSERT INTO \" + UDYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                insert.setParameter(1, user.getKey());\n+                insert.setParameter(2, memb.getGroup().getKey());\n+                insert.executeUpdate();\n             }\n+\n+            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, memb.getGroup()));\n         }\n     }\n \n     @Override\n     public void removeDynMemberships(final User user) {\n         List<Group> dynGroups = userDAO().findDynGroups(user);\n \n-        Query query = entityManager().createNativeQuery(\n-                \"DELETE FROM \" + JPAUDynGroupMembership.JOIN_TABLE + \" t WHERE t.user_id=?\");\n-        query.setParameter(1, user.getKey());\n-        query.executeUpdate();\n+        Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + UDYNMEMB_TABLE + \" WHERE any_id=?\");\n+        delete.setParameter(1, user.getKey());\n+        delete.executeUpdate();\n \n         for (Group group : dynGroups) {\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group));"},{"sha":"b3627789a74e61d08a1a0fc064accdd2c6aed97b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":41,"deletions":27,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.event.AnyCreatedUpdatedEvent;\n@@ -43,6 +42,8 @@\n @Repository\n public class JPARoleDAO extends AbstractDAO<Role> implements RoleDAO {\n \n+    public static final String DYNMEMB_TABLE = \"DynRoleMembers\";\n+\n     @Autowired\n     private ApplicationEventPublisher publisher;\n \n@@ -86,19 +87,26 @@ public List<Role> findAll() {\n \n     @Override\n     public Role save(final Role role) {\n-        // refresh dynaminc memberships\n-        if (role.getDynMembership() != null) {\n-            List<User> matchingUsers = searchDAO().search(\n-                    SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), AnyTypeKind.USER);\n-\n-            role.getDynMembership().clear();\n-            for (User user : matchingUsers) {\n-                role.getDynMembership().add(user);\n+        Role merged = entityManager().merge(role);\n+\n+        // refresh dynamic memberships\n+        if (merged.getDynMembership() != null) {\n+            List<User> matching = searchDAO().search(\n+                    SearchCondConverter.convert(merged.getDynMembership().getFIQLCond()), AnyTypeKind.USER);\n+\n+            clearDynMembers(merged);\n+\n+            for (User user : matching) {\n+                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                insert.setParameter(1, user.getKey());\n+                insert.setParameter(2, merged.getKey());\n+                insert.executeUpdate();\n+\n                 publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user));\n             }\n         }\n \n-        return entityManager().merge(role);\n+        return merged;\n     }\n \n     @Override\n@@ -126,15 +134,13 @@ public void delete(final String key) {\n     }\n \n     @Override\n-    public List<String> findDynMembersKeys(final Role role) {\n+    public List<String> findDynMembers(final Role role) {\n         if (role.getDynMembership() == null) {\n             return Collections.emptyList();\n         }\n \n-        Query query = entityManager().createNativeQuery(\n-                \"SELECT t.user_id FROM \" + JPADynRoleMembership.JOIN_TABLE + \" t \"\n-                + \"WHERE t.dynRoleMembership_id=?\");\n-        query.setParameter(1, role.getDynMembership().getKey());\n+        Query query = entityManager().createNativeQuery(\"SELECT any_id FROM \" + DYNMEMB_TABLE + \" WHERE role_id=?\");\n+        query.setParameter(1, role.getKey());\n \n         List<String> result = new ArrayList<>();\n         for (Object key : query.getResultList()) {\n@@ -147,31 +153,39 @@ public List<String> findDynMembersKeys(final Role role) {\n         return result;\n     }\n \n+    @Override\n+    public void clearDynMembers(final Role role) {\n+        Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE role_id=?\");\n+        delete.setParameter(1, role.getKey());\n+        delete.executeUpdate();\n+    }\n+\n     @Transactional\n     @Override\n     public void refreshDynMemberships(final User user) {\n         for (Role role : findAll()) {\n             if (role.getDynMembership() != null) {\n+                Query delete = entityManager().createNativeQuery(\n+                        \"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE role_id=? AND any_id=?\");\n+                delete.setParameter(1, role.getKey());\n+                delete.setParameter(2, user.getKey());\n+                delete.executeUpdate();\n+\n                 if (searchDAO().matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()))) {\n-                    role.getDynMembership().add(user);\n-                } else {\n-                    Query query = entityManager().createNativeQuery(\n-                            \"DELETE FROM \" + JPADynRoleMembership.JOIN_TABLE + \" t \"\n-                            + \"WHERE t.user_id=? and t.dynRoleMembership_id=?\");\n-                    query.setParameter(1, user.getKey());\n-                    query.setParameter(2, role.getDynMembership().getKey());\n-                    query.executeUpdate();\n+                    Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                    insert.setParameter(1, user.getKey());\n+                    insert.setParameter(2, role.getKey());\n+                    insert.executeUpdate();\n                 }\n             }\n         }\n     }\n \n     @Override\n     public void removeDynMemberships(final User user) {\n-        Query query = entityManager().createNativeQuery(\n-                \"DELETE FROM \" + JPADynRoleMembership.JOIN_TABLE + \" t WHERE t.user_id=?\");\n-        query.setParameter(1, user.getKey());\n-        query.executeUpdate();\n+        Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE any_id=?\");\n+        delete.setParameter(1, user.getKey());\n+        delete.executeUpdate();\n     }\n \n }"},{"sha":"28af7e27fa5309ee7524665d480b75bf9e488c54","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":2,"deletions":16,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -71,10 +71,6 @@\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n-import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.spring.event.AnyCreatedUpdatedEvent;\n@@ -480,12 +476,7 @@ public Collection<Role> findAllRoles(final User user) {\n     @Override\n     public List<Role> findDynRoles(final User user) {\n         Query query = entityManager().createNativeQuery(\n-                \"SELECT t2.id FROM \" + JPADynRoleMembership.TABLE + \" t0 \"\n-                + \"INNER JOIN \" + JPADynRoleMembership.JOIN_TABLE + \" t1 \"\n-                + \"ON t0.id = t1.dynRoleMembership_id \"\n-                + \"LEFT OUTER JOIN \" + JPARole.TABLE + \" t2 \"\n-                + \"ON t0.ROLE_ID = t2.id \"\n-                + \"WHERE (t1.user_id = ?1)\");\n+                \"SELECT role_id FROM \" + JPARoleDAO.DYNMEMB_TABLE + \" WHERE any_id=?\");\n         query.setParameter(1, user.getKey());\n \n         List<Role> result = new ArrayList<>();\n@@ -508,12 +499,7 @@ public List<Role> findDynRoles(final User user) {\n     @Override\n     public List<Group> findDynGroups(final User user) {\n         Query query = entityManager().createNativeQuery(\n-                \"SELECT t2.id FROM \" + JPAUDynGroupMembership.TABLE + \" t0 \"\n-                + \"INNER JOIN \" + JPAUDynGroupMembership.JOIN_TABLE + \" t1 \"\n-                + \"ON t0.id = t1.uDynGroupMembership_id \"\n-                + \"LEFT OUTER JOIN \" + JPAGroup.TABLE + \" t2 \"\n-                + \"ON t0.GROUP_ID = t2.id \"\n-                + \"WHERE (t1.user_id = ?1)\");\n+                \"SELECT group_id FROM \" + JPAGroupDAO.UDYNMEMB_TABLE + \" WHERE any_id=?\");\n         query.setParameter(1, user.getKey());\n \n         List<Group> result = new ArrayList<>();"},{"sha":"fd40470b48bf8b3d0e6abdd063296049a906c3b5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -123,16 +123,16 @@ public SearchView membership() {\n     }\n \n     public SearchView dyngroupmembership() {\n-        String kind = anyTypeKind == AnyTypeKind.USER ? \"u\" : \"a\";\n-        return new SearchView(\"sv\" + kind + \"dgm\", field().name + \"_\" + kind + \"dyngmemb\");\n+        return new SearchView(\"sv\" + anyTypeKind.name() + \"dgm\",\n+                anyTypeKind == AnyTypeKind.USER ? JPAGroupDAO.UDYNMEMB_TABLE : JPAGroupDAO.ADYNMEMB_TABLE);\n     }\n \n     public SearchView role() {\n         return new SearchView(\"svr\", field().name + \"_role\");\n     }\n \n     public SearchView dynrolemembership() {\n-        return new SearchView(\"svdr\", field().name + \"_dynrmemb\");\n+        return new SearchView(\"svdr\", JPARoleDAO.DYNMEMB_TABLE);\n     }\n \n     public SearchView nullAttr() {"},{"sha":"b1d55ff8a88eba35aa651103c0ddaba023d0f942","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAADynGroupMembership.java","status":"modified","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADynGroupMembership.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -18,12 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import javax.persistence.Entity;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n@@ -43,21 +38,12 @@ public class JPAADynGroupMembership extends AbstractDynMembership<AnyObject> imp\n \n     public static final String TABLE = \"ADynGroupMembership\";\n \n-    public static final String JOIN_TABLE = TABLE + \"_AnyObject\";\n-\n     @OneToOne\n     private JPAGroup group;\n \n     @ManyToOne\n     private JPAAnyType anyType;\n \n-    @ManyToMany\n-    @JoinTable(name = JOIN_TABLE, joinColumns =\n-            @JoinColumn(name = \"aDynGroupMembership_id\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"anyObject_id\"))\n-    private List<JPAAnyObject> anyObjects = new ArrayList<>();\n-\n     @Override\n     public Group getGroup() {\n         return group;\n@@ -79,16 +65,4 @@ public void setAnyType(final AnyType anyType) {\n         checkType(anyType, JPAAnyType.class);\n         this.anyType = (JPAAnyType) anyType;\n     }\n-\n-    @Override\n-    public boolean add(final AnyObject anyObject) {\n-        checkType(anyObject, JPAAnyObject.class);\n-        return anyObjects.add((JPAAnyObject) anyObject);\n-    }\n-\n-    @Override\n-    public void clear() {\n-        anyObjects.clear();\n-    }\n-\n }"},{"sha":"963b742b180879d007fe18e4182e2a8cbcffffa1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/AbstractUDynMembership.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/be35817fe645f4142c2d80be0ee55e36c156324f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FAbstractUDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/be35817fe645f4142c2d80be0ee55e36c156324f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FAbstractUDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FAbstractUDynMembership.java?ref=be35817fe645f4142c2d80be0ee55e36c156324f","patch":"@@ -1,44 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.user;\n-\n-import java.util.List;\n-import javax.persistence.MappedSuperclass;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractDynMembership;\n-\n-@MappedSuperclass\n-public abstract class AbstractUDynMembership extends AbstractDynMembership<User> {\n-\n-    private static final long serialVersionUID = 6296230283800203205L;\n-\n-    protected abstract List<JPAUser> internalGetUsers();\n-\n-    @Override\n-    public boolean add(final User user) {\n-        checkType(user, JPAUser.class);\n-        return internalGetUsers().add((JPAUser) user);\n-    }\n-\n-    @Override\n-    public void clear() {\n-        internalGetUsers().clear();\n-    }\n-\n-}"},{"sha":"d2a448068d20f9f455382010ddb142a4fd3a51e3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPADynRoleMembership.java","status":"modified","additions":3,"deletions":20,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPADynRoleMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPADynRoleMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPADynRoleMembership.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -18,43 +18,26 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.user;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import javax.persistence.Entity;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractDynMembership;\n import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n \n @Entity\n @Table(name = JPADynRoleMembership.TABLE)\n-public class JPADynRoleMembership extends AbstractUDynMembership implements DynRoleMembership {\n+public class JPADynRoleMembership extends AbstractDynMembership<User> implements DynRoleMembership {\n \n     private static final long serialVersionUID = -7336814163949640354L;\n \n     public static final String TABLE = \"DynRoleMembership\";\n \n-    public static final String JOIN_TABLE = TABLE + \"_User\";\n-\n     @OneToOne\n     private JPARole role;\n \n-    @ManyToMany\n-    @JoinTable(name = JOIN_TABLE, joinColumns =\n-            @JoinColumn(name = \"dynRoleMembership_id\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"user_id\"))\n-    private List<JPAUser> users = new ArrayList<>();\n-\n-    @Override\n-    protected List<JPAUser> internalGetUsers() {\n-        return users;\n-    }\n-\n     @Override\n     public Role getRole() {\n         return role;"},{"sha":"875b572888615e806f331b6dbb2266d22f3d4f8a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDynGroupMembership.java","status":"modified","additions":3,"deletions":20,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDynGroupMembership.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -18,43 +18,26 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.user;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import javax.persistence.Entity;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n-import javax.persistence.ManyToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractDynMembership;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n \n @Entity\n @Table(name = JPAUDynGroupMembership.TABLE)\n-public class JPAUDynGroupMembership extends AbstractUDynMembership implements UDynGroupMembership {\n+public class JPAUDynGroupMembership extends AbstractDynMembership<User> implements UDynGroupMembership {\n \n     private static final long serialVersionUID = -7336814163949640354L;\n \n     public static final String TABLE = \"UDynGroupMembership\";\n \n-    public static final String JOIN_TABLE = TABLE + \"_User\";\n-\n     @OneToOne\n     private JPAGroup group;\n \n-    @ManyToMany\n-    @JoinTable(name = JOIN_TABLE, joinColumns =\n-            @JoinColumn(name = \"uDynGroupMembership_id\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"user_id\"))\n-    private List<JPAUser> users = new ArrayList<>();\n-\n-    @Override\n-    protected List<JPAUser> internalGetUsers() {\n-        return users;\n-    }\n-\n     @Override\n     public Group getGroup() {\n         return group;"},{"sha":"1dfa63dbab89e828f05c129d80eb2aa5faf83bb8","filename":"core/persistence-jpa/src/main/resources/indexes.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -21,6 +21,14 @@ under the License.\n <properties>\n   <comment>Additional indexes (in respect to JPA's)</comment>\n \n+  <entry key=\"UDynGroupMembers_any_id\">CREATE INDEX UDynGroupMembers_any_id ON UDynGroupMembers(any_id)</entry>\n+  <entry key=\"UDynGroupMembers_group_id\">CREATE INDEX UDynGroupMembers_group_id ON UDynGroupMembers(group_id)</entry>\n+  <entry key=\"ADynGroupMembers_any_id\">CREATE INDEX ADynGroupMembers_any_id ON ADynGroupMembers(any_id)</entry>\n+  <entry key=\"ADynGroupMembers_group_id\">CREATE INDEX ADynGroupMembers_group_id ON ADynGroupMembers(group_id)</entry>\n+\n+  <entry key=\"DynRoleMembers_any_id\">CREATE INDEX DynRoleMembers_any_id ON DynRoleMembers(any_id)</entry>\n+  <entry key=\"DynRoleMembers_role_id\">CREATE INDEX DynRoleMembers_role_id ON DynRoleMembers(role_id)</entry>\n+\n   <entry key=\"UPlainAttrValue_stringvalueIndex\">CREATE INDEX UAttrValue_stringvalueIndex ON UPlainAttrValue(stringvalue)</entry>\n   <entry key=\"UPlainAttrValue_datevalueIndex\">CREATE INDEX UAttrValue_datevalueIndex ON UPlainAttrValue(datevalue)</entry>\n   <entry key=\"UPlainAttrValue_longvalueIndex\">CREATE INDEX UAttrValue_longvalueIndex ON UPlainAttrValue(longvalue)</entry>"},{"sha":"fb685164504ae8b2094b537c1d3b90516fb51185","filename":"core/persistence-jpa/src/main/resources/views.xml","status":"modified","additions":20,"deletions":22,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -19,8 +19,27 @@ under the License.\n -->\n <!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n <properties>\n-  <comment>Views</comment>\n   \n+  <entry key=\"UDynGroupMembers\">\n+    CREATE TABLE UDynGroupMembers(\n+    any_id CHAR(36),\n+    group_id CHAR(36),\n+    UNIQUE(any_id, group_id))\n+  </entry>\n+  <entry key=\"ADynGroupMembers\">\n+    CREATE TABLE ADynGroupMembers(\n+    anyType_id VARCHAR(255),\n+    any_id CHAR(36),\n+    group_id CHAR(36),\n+    UNIQUE(anyType_id, any_id, group_id))\n+  </entry>\n+  <entry key=\"DynRoleMembers\">\n+    CREATE TABLE DynRoleMembers(\n+    any_id CHAR(36),\n+    role_id CHAR(36),\n+    UNIQUE(any_id, role_id))\n+  </entry>\n+\n   <!-- user -->\n   <entry key=\"user_search\">\n     CREATE VIEW user_search AS\n@@ -80,26 +99,12 @@ under the License.\n     FROM UMembership m, SyncopeGroup g\n     WHERE m.group_id = g.id\n   </entry>\n-  <entry key=\"user_search_udyngmemb\">\n-    CREATE VIEW user_search_udyngmemb AS\n-\n-    SELECT ds.user_id AS any_id, d.group_id AS group_id\n-    FROM UDynGroupMembership d, UDynGroupMembership_User ds\n-    WHERE d.id = ds.uDynGroupMembership_id\n-  </entry>\n   <entry key=\"user_search_role\">\n     CREATE VIEW user_search_role AS\n \n     SELECT ss.user_id AS any_id, ss.role_id AS role_id\n     FROM SyncopeUser_SyncopeRole ss\n   </entry>\n-  <entry key=\"user_search_dynrmemb\">\n-    CREATE VIEW user_search_dynrmemb AS\n-\n-    SELECT ds.user_id AS any_id, d.role_id AS role_id\n-    FROM DynRoleMembership d, DynRoleMembership_User ds\n-    WHERE d.id = ds.dynRoleMembership_id\n-  </entry>\n   <entry key=\"user_search_resource\">\n     CREATE VIEW user_search_resource AS\n \n@@ -173,13 +178,6 @@ under the License.\n     FROM AMembership m, SyncopeGroup g\n     WHERE m.group_id = g.id\n   </entry>\n-  <entry key=\"anyObject_search_adyngmemb\">\n-    CREATE VIEW anyObject_search_adyngmemb AS\n-\n-    SELECT ds.anyObject_id AS any_id, d.group_id AS group_id\n-    FROM ADynGroupMembership d, ADynGroupMembership_AnyObject ds\n-    WHERE d.id = ds.aDynGroupMembership_id\n-  </entry>\n   <entry key=\"anyObject_search_resource\">\n     CREATE VIEW anyObject_search_resource AS\n "},{"sha":"fc359e35dc396654cddaf718954c14c2c98bb7fc","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":44,"deletions":24,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -29,7 +29,7 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n-import javax.persistence.TypedQuery;\n+import javax.persistence.Query;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -55,6 +55,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n import org.junit.Test;\n@@ -178,13 +179,23 @@ public void delete() {\n      * required for avoiding creating of a new transaction - good for general use case but bad for the way how\n      * this test class is architected.\n      */\n-    private Collection<Group> findDynGroupMemberships(final User user) {\n-        TypedQuery<Group> query = entityManager().createQuery(\n-                \"SELECT e.group FROM \" + JPAUDynGroupMembership.class.getSimpleName()\n-                + \" e WHERE :user MEMBER OF e.users\", Group.class);\n-        query.setParameter(\"user\", user);\n-\n-        return query.getResultList();\n+    private List<Group> findDynGroups(final User user) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT group_id FROM \" + JPAGroupDAO.UDYNMEMB_TABLE + \" WHERE any_id=?\");\n+        query.setParameter(1, user.getKey());\n+\n+        List<Group> result = new ArrayList<>();\n+        for (Object key : query.getResultList()) {\n+            String actualKey = key instanceof Object[]\n+                    ? (String) ((Object[]) key)[0]\n+                    : ((String) key);\n+\n+            Group group = groupDAO.find(actualKey);\n+            if (group != null && !result.contains(group)) {\n+                result.add(group);\n+            }\n+        }\n+        return result;\n     }\n \n     @Test\n@@ -229,14 +240,14 @@ public void udynMembership() {\n         assertEquals(actual, actual.getUDynMembership().getGroup());\n \n         // 3. verify that expected users have the created group dynamically assigned\n-        List<String> members = groupDAO.findUDynMembersKeys(actual);\n+        List<String> members = groupDAO.findUDynMembers(actual);\n         assertEquals(2, members.size());\n         assertEquals(new HashSet<>(Arrays.asList(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", newUserKey)),\n                 new HashSet<>(members));\n \n         user = userDAO.findByUsername(\"bellini\");\n         assertNotNull(user);\n-        Collection<Group> dynGroupMemberships = findDynGroupMemberships(user);\n+        Collection<Group> dynGroupMemberships = findDynGroups(user);\n         assertEquals(1, dynGroupMemberships.size());\n         assertTrue(dynGroupMemberships.contains(actual.getUDynMembership().getGroup()));\n \n@@ -246,7 +257,7 @@ public void udynMembership() {\n         userDAO.flush();\n \n         actual = groupDAO.find(actual.getKey());\n-        members = groupDAO.findUDynMembersKeys(actual);\n+        members = groupDAO.findUDynMembers(actual);\n         assertEquals(1, members.size());\n         assertEquals(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", members.get(0));\n \n@@ -259,7 +270,7 @@ public void udynMembership() {\n \n         assertNull(entityManager().find(JPAUDynGroupMembership.class, dynMembershipKey));\n \n-        dynGroupMemberships = findDynGroupMemberships(user);\n+        dynGroupMemberships = findDynGroups(user);\n         assertTrue(dynGroupMemberships.isEmpty());\n     }\n \n@@ -268,13 +279,23 @@ public void udynMembership() {\n      * required for avoiding creating of a new transaction - good for general use case but bad for the way how\n      * this test class is architected.\n      */\n-    private List<Group> findDynGroupMemberships(final AnyObject anyObject) {\n-        TypedQuery<Group> query = entityManager().createQuery(\n-                \"SELECT e.group FROM \" + JPAADynGroupMembership.class.getSimpleName()\n-                + \" e WHERE :anyObject MEMBER OF e.anyObjects\", Group.class);\n-        query.setParameter(\"anyObject\", anyObject);\n-\n-        return query.getResultList();\n+    private List<Group> findDynGroups(final AnyObject anyObject) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT group_id FROM \" + JPAGroupDAO.ADYNMEMB_TABLE + \" WHERE any_id=?\");\n+        query.setParameter(1, anyObject.getKey());\n+\n+        List<Group> result = new ArrayList<>();\n+        for (Object key : query.getResultList()) {\n+            String actualKey = key instanceof Object[]\n+                    ? (String) ((Object[]) key)[0]\n+                    : ((String) key);\n+\n+            Group group = groupDAO.find(actualKey);\n+            if (group != null && !result.contains(group)) {\n+                result.add(group);\n+            }\n+        }\n+        return result;\n     }\n \n     @Test\n@@ -320,8 +341,7 @@ public void adynMembership() {\n         assertEquals(actual, actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).getGroup());\n \n         // 3. verify that expected any objects have the created group dynamically assigned\n-        System.out.println(\"MMMMMMMMM \" + groupDAO.findADynMembersKeys(actual));\n-        List<String> members = CollectionUtils.select(groupDAO.findADynMembersKeys(actual), new Predicate<String>() {\n+        List<String> members = CollectionUtils.select(groupDAO.findADynMembers(actual), new Predicate<String>() {\n \n             @Override\n             public boolean evaluate(final String object) {\n@@ -335,7 +355,7 @@ public boolean evaluate(final String object) {\n \n         anyObject = anyObjectDAO.find(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n         assertNotNull(anyObject);\n-        Collection<Group> dynGroupMemberships = findDynGroupMemberships(anyObject);\n+        Collection<Group> dynGroupMemberships = findDynGroups(anyObject);\n         assertEquals(1, dynGroupMemberships.size());\n         assertTrue(dynGroupMemberships.contains(actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).getGroup()));\n \n@@ -345,7 +365,7 @@ public boolean evaluate(final String object) {\n         anyObjectDAO.flush();\n \n         actual = groupDAO.find(actual.getKey());\n-        members = CollectionUtils.select(groupDAO.findADynMembersKeys(actual), new Predicate<String>() {\n+        members = CollectionUtils.select(groupDAO.findADynMembers(actual), new Predicate<String>() {\n \n             @Override\n             public boolean evaluate(final String object) {\n@@ -364,7 +384,7 @@ public boolean evaluate(final String object) {\n \n         assertNull(entityManager().find(JPAADynGroupMembership.class, dynMembershipKey));\n \n-        dynGroupMemberships = findDynGroupMemberships(anyObject);\n+        dynGroupMemberships = findDynGroups(anyObject);\n         assertTrue(dynGroupMemberships.isEmpty());\n     }\n "},{"sha":"6ba7906f9d0df038348b7788525c6a4cbcc27d91","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":24,"deletions":12,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -23,11 +23,12 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n-import javax.persistence.TypedQuery;\n+import javax.persistence.Query;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n@@ -40,6 +41,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.persistence.jpa.dao.JPARoleDAO;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -68,13 +70,23 @@ public class RoleTest extends AbstractTest {\n      * required for avoiding creating new transaction - good for general use case but bad for the way how\n      * this test class is architected.\n      */\n-    private Collection<Role> findDynRoleMemberships(final User user) {\n-        TypedQuery<Role> query = entityManager().createQuery(\n-                \"SELECT e.role FROM \" + JPADynRoleMembership.class.getSimpleName()\n-                + \" e WHERE :user MEMBER OF e.users\", Role.class);\n-        query.setParameter(\"user\", user);\n-\n-        return query.getResultList();\n+    private List<Role> findDynRoles(final User user) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT role_id FROM \" + JPARoleDAO.DYNMEMB_TABLE + \" WHERE any_id=?\");\n+        query.setParameter(1, user.getKey());\n+\n+        List<Role> result = new ArrayList<>();\n+        for (Object key : query.getResultList()) {\n+            String actualKey = key instanceof Object[]\n+                    ? (String) ((Object[]) key)[0]\n+                    : ((String) key);\n+\n+            Role role = roleDAO.find(actualKey);\n+            if (role != null && !result.contains(role)) {\n+                result.add(role);\n+            }\n+        }\n+        return result;\n     }\n \n     @Test\n@@ -122,15 +134,15 @@ public void dynMembership() {\n         assertEquals(actual, actual.getDynMembership().getRole());\n \n         // 3. verify that expected users have the created role dynamically assigned\n-        List<String> members = roleDAO.findDynMembersKeys(actual);\n+        List<String> members = roleDAO.findDynMembers(actual);\n         assertEquals(2, members.size());\n         assertEquals(\n                 new HashSet<>(Arrays.asList(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", newUserKey)),\n                 new HashSet<>(members));\n \n         user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n         assertNotNull(user);\n-        Collection<Role> dynRoleMemberships = findDynRoleMemberships(user);\n+        Collection<Role> dynRoleMemberships = findDynRoles(user);\n         assertEquals(1, dynRoleMemberships.size());\n         assertTrue(dynRoleMemberships.contains(actual.getDynMembership().getRole()));\n \n@@ -140,7 +152,7 @@ public void dynMembership() {\n         userDAO.flush();\n \n         actual = roleDAO.find(actual.getKey());\n-        members = roleDAO.findDynMembersKeys(actual);\n+        members = roleDAO.findDynMembers(actual);\n         assertEquals(1, members.size());\n         assertEquals(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", members.get(0));\n \n@@ -153,7 +165,7 @@ public void dynMembership() {\n \n         assertNull(entityManager().find(JPADynRoleMembership.class, dynMembershipKey));\n \n-        dynRoleMemberships = findDynRoleMemberships(user);\n+        dynRoleMemberships = findDynRoles(user);\n         assertTrue(dynRoleMemberships.isEmpty());\n     }\n "},{"sha":"3ebd707c9f3337d8ad891be7f7b2137e39917cfe","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RoleDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRoleDataBinder.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -25,7 +25,7 @@ public interface RoleDataBinder {\n \n     Role create(RoleTO roleTO);\n \n-    void update(Role role, RoleTO roleTO);\n+    Role update(Role role, RoleTO roleTO);\n \n     RoleTO getRoleTO(Role role);\n }"},{"sha":"dc944b50f331f339373e103d66a51c854ff275d6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -251,7 +251,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n     @Override\n     public PropagationByResource update(final AnyObject toBeUpdated, final AnyObjectPatch anyObjectPatch) {\n         // Re-merge any pending change from workflow tasks\n-        final AnyObject anyObject = anyObjectDAO.save(toBeUpdated);\n+        AnyObject anyObject = anyObjectDAO.save(toBeUpdated);\n \n         PropagationByResource propByRes = new PropagationByResource();\n "},{"sha":"32206aa9a7c14664336ebf9aa1ce3aa65481dc69","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -230,11 +230,14 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n             }\n         }\n \n+        group = groupDAO.save(group);\n+        \n         // dynamic membership\n         if (groupPatch.getUDynMembershipCond() == null) {\n             if (group.getUDynMembership() != null) {\n                 group.getUDynMembership().setGroup(null);\n                 group.setUDynMembership(null);\n+                groupDAO.clearUDynMembers(group);\n             }\n         } else {\n             setDynMembership(group, anyTypeDAO.findUser(), groupPatch.getUDynMembershipCond());\n@@ -244,6 +247,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n             memb.setGroup(null);\n             itor.remove();\n         }\n+        groupDAO.clearADynMembers(group);\n         for (Map.Entry<String, String> entry : groupPatch.getADynMembershipConds().entrySet()) {\n             AnyType anyType = anyTypeDAO.find(entry.getKey());\n             if (anyType == null) {"},{"sha":"6ccb229d87a8606da64a3f7b6b7fc2d0501f1447","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -44,6 +45,9 @@ public class RoleDataBinderImpl implements RoleDataBinder {\n     @Autowired\n     private RealmDAO realmDAO;\n \n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -68,14 +72,13 @@ private void setDynMembership(final Role role, final String dynMembershipFIQL) {\n \n     @Override\n     public Role create(final RoleTO roleTO) {\n-        Role role = entityFactory.newEntity(Role.class);\n-        update(role, roleTO);\n-        return role;\n+        return update(entityFactory.newEntity(Role.class), roleTO);\n     }\n \n     @Override\n-    public void update(final Role role, final RoleTO roleTO) {\n-        role.setKey(roleTO.getKey());\n+    public Role update(final Role toBeUpdated, final RoleTO roleTO) {\n+        toBeUpdated.setKey(roleTO.getKey());\n+        Role role = roleDAO.save(toBeUpdated);\n \n         role.getEntitlements().clear();\n         role.getEntitlements().addAll(roleTO.getEntitlements());\n@@ -90,7 +93,10 @@ public void update(final Role role, final RoleTO roleTO) {\n             }\n         }\n \n+        role = roleDAO.save(role);\n+\n         // dynamic membership\n+        roleDAO.clearDynMembers(role);\n         if (role.getKey() == null && roleTO.getDynMembershipCond() != null) {\n             setDynMembership(role, roleTO.getDynMembershipCond());\n         } else if (role.getDynMembership() != null && roleTO.getDynMembershipCond() == null) {\n@@ -100,9 +106,10 @@ public void update(final Role role, final RoleTO roleTO) {\n         } else if (role.getDynMembership() != null && roleTO.getDynMembershipCond() != null\n                 && !role.getDynMembership().getFIQLCond().equals(roleTO.getDynMembershipCond())) {\n \n-            role.getDynMembership().clear();\n             setDynMembership(role, roleTO.getDynMembershipCond());\n         }\n+\n+        return role;\n     }\n \n     @Override"},{"sha":"0140de310075873f6dad9f97452c0d8e04474d60","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -174,6 +174,27 @@ private void setPassword(final User user, final String password, final SyncopeCl\n     public void create(final User user, final UserTO userTO, final boolean storePassword) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n+        // set username\n+        user.setUsername(userTO.getUsername());\n+\n+        // set password\n+        if (StringUtils.isBlank(userTO.getPassword()) || !storePassword) {\n+            LOG.debug(\"Password was not provided or not required to be stored\");\n+        } else {\n+            setPassword(user, userTO.getPassword(), scce);\n+        }\n+\n+        user.setMustChangePassword(userTO.isMustChangePassword());\n+\n+        // security question / answer\n+        if (userTO.getSecurityQuestion() != null) {\n+            SecurityQuestion securityQuestion = securityQuestionDAO.find(userTO.getSecurityQuestion());\n+            if (securityQuestion != null) {\n+                user.setSecurityQuestion(securityQuestion);\n+            }\n+        }\n+        user.setSecurityAnswer(userTO.getSecurityAnswer());\n+\n         // roles\n         for (String roleKey : userTO.getRoles()) {\n             Role role = roleDAO.find(roleKey);\n@@ -262,27 +283,6 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         // attributes and resources\n         fill(user, userTO, anyUtils, scce);\n \n-        // set password\n-        if (StringUtils.isBlank(userTO.getPassword()) || !storePassword) {\n-            LOG.debug(\"Password was not provided or not required to be stored\");\n-        } else {\n-            setPassword(user, userTO.getPassword(), scce);\n-        }\n-\n-        // set username\n-        user.setUsername(userTO.getUsername());\n-\n-        // security question / answer\n-        if (userTO.getSecurityQuestion() != null) {\n-            SecurityQuestion securityQuestion = securityQuestionDAO.find(userTO.getSecurityQuestion());\n-            if (securityQuestion != null) {\n-                user.setSecurityQuestion(securityQuestion);\n-            }\n-        }\n-        user.setSecurityAnswer(userTO.getSecurityAnswer());\n-\n-        user.setMustChangePassword(userTO.isMustChangePassword());\n-\n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {\n             throw scce;"},{"sha":"47bcf9d2497c61d1bdb55668812efd4c6b13fbdc","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36b786c041523de3779c7bb64fad1679e7c8db7e/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36b786c041523de3779c7bb64fad1679e7c8db7e/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=36b786c041523de3779c7bb64fad1679e7c8db7e","patch":"@@ -138,7 +138,7 @@ public Object transform(final UMembership input) {\n                     return input.getLeftEnd().getKey();\n                 }\n             }, new ArrayList<>());\n-            members.add(groupDAO.findUDynMembersKeys(group));\n+            members.add(groupDAO.findUDynMembers(group));\n             CollectionUtils.collect(groupDAO.findAMemberships(group),\n                     new Transformer<AMembership, Object>() {\n \n@@ -147,7 +147,7 @@ public Object transform(final AMembership input) {\n                     return input.getLeftEnd().getKey();\n                 }\n             }, members);\n-            members.add(groupDAO.findADynMembersKeys(group));\n+            members.add(groupDAO.findADynMembers(group));\n             builder = builder.field(\"members\", members);\n         } else if (any instanceof User) {\n             User user = ((User) any);"}]}