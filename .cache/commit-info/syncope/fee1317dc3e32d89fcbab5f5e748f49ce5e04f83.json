{"sha":"fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZlZTEzMTdkYzNlMzJkODlmY2JhYjVmNWU3NDhmNDljZTVlMDRmODM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-02T12:31:40Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-02T12:32:07Z"},"message":"[SYNCOPE-1369] User requests forms now support dropdowns - via Flowable customization","tree":{"sha":"e50ce6af7d63d92f02e136d363ce569e055277be","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e50ce6af7d63d92f02e136d363ce569e055277be"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"fba9bce622df4eab6229f1adb4bc3e3fea738935","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fba9bce622df4eab6229f1adb4bc3e3fea738935","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fba9bce622df4eab6229f1adb4bc3e3fea738935"}],"stats":{"total":2198,"additions":1725,"deletions":473},"files":[{"sha":"92d060d3499064727eaceb8dd7e06cf614ad5638","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/MapChoiceRenderer.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FMapChoiceRenderer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FMapChoiceRenderer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FMapChoiceRenderer.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -23,33 +23,28 @@\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.model.IModel;\n \n-public class MapChoiceRenderer<T, K> implements IChoiceRenderer<T> {\n+public class MapChoiceRenderer implements IChoiceRenderer<String> {\n \n     private static final long serialVersionUID = -7452881117778186644L;\n \n-    private final Map<T, K> map;\n+    private final Map<String, String> map;\n \n-    public MapChoiceRenderer(final Map<T, K> map) {\n+    public MapChoiceRenderer(final Map<String, String> map) {\n         this.map = map;\n     }\n \n     @Override\n-    public Object getDisplayValue(final T key) {\n+    public Object getDisplayValue(final String key) {\n         return map.get(key);\n     }\n \n     @Override\n-    public String getIdValue(final T key, final int index) {\n-        return key.toString();\n+    public String getIdValue(final String key, final int index) {\n+        return key;\n     }\n \n     @Override\n-    public T getObject(final String id, final IModel<? extends List<? extends T>> choices) {\n-        for (Map.Entry<T, K> entry : map.entrySet()) {\n-            if (entry.getValue() != null && entry.getValue().toString().equals(id)) {\n-                return entry.getKey();\n-            }\n-        }\n-        return null;\n+    public String getObject(final String id, final IModel<? extends List<? extends String>> choices) {\n+        return id;\n     }\n }"},{"sha":"c52efac6b2f714e953d75126e7d62b28a6275aab","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDropDownChoicePanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -44,8 +44,7 @@ public AjaxDropDownChoicePanel(\n \n         super(id, name, model);\n \n-        field = new BootstrapSelect<>(\n-                \"dropDownChoiceField\", model, Collections.<T>emptyList(), new ChoiceRenderer<>());\n+        field = new BootstrapSelect<>(\"dropDownChoiceField\", model, Collections.<T>emptyList(), new ChoiceRenderer<>());\n         add(field.setLabel(new Model<>(name)).setOutputMarkupId(true));\n \n         if (enableOnBlur) {"},{"sha":"bfbdc1d17e326b1186290972174c52799ddbde9c","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -136,14 +136,13 @@ private Fragment getViewFragment() {\n                 public Panel getPanel(final String panelId) {\n                     return new ListViewPanel.Builder<>(RelationshipTO.class, pageRef).\n                             setItems(relationships.get(relationship)).\n-                            includes(\"otherEndType\", \"otherEndKey\").\n+                            includes(\"otherEndType\", \"otherEndKey\", \"otherEndName\").\n                             addAction(new ActionLink<RelationshipTO>() {\n \n                                 private static final long serialVersionUID = -6847033126124401556L;\n \n                                 @Override\n-                                public void onClick(\n-                                        final AjaxRequestTarget target, final RelationshipTO modelObject) {\n+                                public void onClick(final AjaxRequestTarget target, final RelationshipTO modelObject) {\n                                     removeRelationships(relationships, modelObject);\n                                     send(Relationships.this, Broadcast.DEPTH, new ListViewReload<>(target));\n                                 }"},{"sha":"45e8a784dffd054ae145db7232f1c81ed51b9b99","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.properties?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -16,3 +16,6 @@\n # under the License.\n relationships.empty.list=No relationships defined\n any.relationships=Relationships\n+otherEndType=AnyType\n+otherEndKey=Key\n+otherEndName=Name"},{"sha":"cdc900fd7a9be2eff503bcfd834307f3083cfc71","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_it.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_it.properties?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -16,3 +16,6 @@\n # under the License.\n relationships.empty.list=Nessuna relazione specificata\n any.relationships=Relazioni\n+otherEndType=AnyType\n+otherEndKey=Chiave\n+otherEndName=Nome"},{"sha":"55610997594cfa615ef28b4c6b6061646236f801","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_ja.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_ja.properties?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -16,3 +16,6 @@\n # under the License.\n relationships.empty.list=\\u95a2\\u4fc2\\u306f\\u5b9a\\u7fa9\\u3055\\u308c\\u3066\\u3044\\u307e\\u305b\\u3093\n any.relationships=\\u95a2\\u4fc2\n+otherEndType=AnyType\n+otherEndKey=Key\n+otherEndName=Name"},{"sha":"c0c71dcd2441cdd4bc422602c3291fb49024e863","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_pt_BR.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_pt_BR.properties?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -16,3 +16,6 @@\n # under the License.\n relationships.empty.list=N\\u00e3o h\\u00e1 relacionamentos definidos\n any.relationships=Relationships\n+otherEndType=AnyType\n+otherEndKey=Key\n+otherEndName=Name"},{"sha":"9fcb63a0fe27a3993540629e34b549af7d75eb40","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_ru.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_ru.properties?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -17,3 +17,6 @@\n \n relationships.empty.list=\\u0421\\u0432\\u044f\\u0437\\u0438 \\u043d\\u0435 \\u0437\\u0430\\u0434\\u0430\\u043d\\u044b\n any.relationships=\\u0421\\u0432\\u044f\\u0437\\u0438\n+otherEndType=AnyType\n+otherEndKey=Key\n+otherEndName=Name"},{"sha":"06dbd0d8b2d447024b568696bd0a6dc61a4c35a1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -43,6 +43,13 @@ public Builder otherEnd(final String otherEndType, final String otherEndKey) {\n             return this;\n         }\n \n+        public Builder otherEnd(final String otherEndType, final String otherEndKey, final String otherEndName) {\n+            instance.setOtherEndType(otherEndType);\n+            instance.setOtherEndKey(otherEndKey);\n+            instance.setOtherEndName(otherEndName);\n+            return this;\n+        }\n+\n         public RelationshipTO build() {\n             return instance;\n         }\n@@ -54,6 +61,8 @@ public RelationshipTO build() {\n \n     private String otherEndKey;\n \n+    private String otherEndName;\n+\n     public String getType() {\n         return type;\n     }\n@@ -78,4 +87,11 @@ public void setOtherEndKey(final String otherEndKey) {\n         this.otherEndKey = otherEndKey;\n     }\n \n+    public String getOtherEndName() {\n+        return otherEndName;\n+    }\n+\n+    public void setOtherEndName(final String otherEndName) {\n+        this.otherEndName = otherEndName;\n+    }\n }"},{"sha":"f8f05f9611264aa0bcc8a24816c6bca4f4c50def","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -46,7 +46,7 @@ public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n     List<Group> findDynGroups(String key);\n \n-    List<Relationship<Any<?>, Any<?>>> findAllRelationships(AnyObject anyObject);\n+    List<Relationship<Any<?>, AnyObject>> findAllRelationships(AnyObject anyObject);\n \n     Collection<Group> findAllGroups(AnyObject anyObject);\n "},{"sha":"a7211de90df1449ef939e7b333ade1664627aa6a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -168,20 +168,20 @@ public AnyObject findByName(final String name) {\n     }\n \n     @Override\n-    public List<Relationship<Any<?>, Any<?>>> findAllRelationships(final AnyObject anyObject) {\n-        List<Relationship<Any<?>, Any<?>>> result = new ArrayList<>();\n+    public List<Relationship<Any<?>, AnyObject>> findAllRelationships(final AnyObject anyObject) {\n+        List<Relationship<Any<?>, AnyObject>> result = new ArrayList<>();\n \n         @SuppressWarnings(\"unchecked\")\n-        TypedQuery<Relationship<Any<?>, Any<?>>> aquery =\n-                (TypedQuery<Relationship<Any<?>, Any<?>>>) entityManager().createQuery(\n+        TypedQuery<Relationship<Any<?>, AnyObject>> aquery =\n+                (TypedQuery<Relationship<Any<?>, AnyObject>>) entityManager().createQuery(\n                         \"SELECT e FROM \" + JPAARelationship.class.getSimpleName()\n                         + \" e WHERE e.rightEnd=:anyObject OR e.leftEnd=:anyObject\");\n         aquery.setParameter(\"anyObject\", anyObject);\n         result.addAll(aquery.getResultList());\n \n         @SuppressWarnings(\"unchecked\")\n-        TypedQuery<Relationship<Any<?>, Any<?>>> uquery =\n-                (TypedQuery<Relationship<Any<?>, Any<?>>>) entityManager().createQuery(\n+        TypedQuery<Relationship<Any<?>, AnyObject>> uquery =\n+                (TypedQuery<Relationship<Any<?>, AnyObject>>) entityManager().createQuery(\n                         \"SELECT e FROM \" + JPAURelationship.class.getSimpleName()\n                         + \" e WHERE e.rightEnd=:anyObject\");\n         uquery.setParameter(\"anyObject\", anyObject);"},{"sha":"5a410859b0e3f8cf0867342bbc4c395e4ec732bd","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -253,14 +253,14 @@ under the License.\n   <SyncopeRole_entitlements entitlement=\"ANYTYPE_READ\" role_id=\"User manager\"/>\n   <SyncopeRole_entitlements entitlement=\"ANYTYPECLASS_LIST\" role_id=\"User manager\"/>\n   <SyncopeRole_entitlements entitlement=\"ANYTYPECLASS_READ\" role_id=\"User manager\"/>\n-  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_id=\"User manager\"/>\n-  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_SUBMIT\" role_id=\"User manager\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_REQUEST_FORM_CLAIM\" role_id=\"User manager\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_REQUEST_FORM_SUBMIT\" role_id=\"User manager\"/>\n   <SyncopeRole_Realm role_id=\"User manager\" realm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"/>\n \n   <SyncopeRole id=\"Other\"/>\n   <SyncopeRole_entitlements entitlement=\"SCHEMA_READ\" role_id=\"Other\"/>\n   <SyncopeRole_entitlements entitlement=\"GROUP_READ\" role_id=\"Other\"/>\n-  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_id=\"Other\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_REQUEST_FORM_CLAIM\" role_id=\"Other\"/>\n   <SyncopeRole_Realm role_id=\"Other\" realm_id=\"722f3d84-9c2b-4525-8f6e-e4b82c55a36c\"/>\n   <SyncopeRole_Privilege role_id=\"Other\" privilege_id=\"postMighty\"/>\n   "},{"sha":"33077fee05675042e2da65986c739b895745f64f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":24,"deletions":23,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -770,11 +770,14 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n                 default:\n             }\n         } else if (intAttrName.getSchemaType() != null && attr != null) {\n-            GroupableRelatableTO groupableTO = null;\n-            Group group = null;\n+            GroupableRelatableTO groupableTO;\n+            Group group;\n             if (anyTO instanceof GroupableRelatableTO && intAttrName.getMembershipOfGroup() != null) {\n                 groupableTO = (GroupableRelatableTO) anyTO;\n                 group = groupDAO.findByName(intAttrName.getMembershipOfGroup());\n+            } else {\n+                groupableTO = null;\n+                group = null;\n             }\n \n             switch (intAttrName.getSchemaType()) {\n@@ -798,29 +801,28 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n                     if (groupableTO == null || group == null) {\n                         anyTO.getPlainAttrs().add(attrTO);\n                     } else {\n-                        Optional<MembershipTO> membership = groupableTO.getMembership(group.getKey());\n-                        if (!membership.isPresent()) {\n-                            membership = Optional.of(\n-                                    new MembershipTO.Builder().group(group.getKey(), group.getName()).build());\n-                            groupableTO.getMemberships().add(membership.get());\n-                        }\n-                        membership.get().getPlainAttrs().add(attrTO);\n+                        MembershipTO membership = groupableTO.getMembership(group.getKey()).orElseGet(() -> {\n+                            MembershipTO newMemb = new MembershipTO.Builder().group(group.getKey()).build();\n+                            groupableTO.getMemberships().add(newMemb);\n+                            return newMemb;\n+                        });\n+                        membership.getPlainAttrs().add(attrTO);\n                     }\n                     break;\n \n                 case DERIVED:\n                     attrTO = new AttrTO();\n                     attrTO.setSchema(intAttrName.getSchemaName());\n+\n                     if (groupableTO == null || group == null) {\n                         anyTO.getDerAttrs().add(attrTO);\n                     } else {\n-                        Optional<MembershipTO> membership = groupableTO.getMembership(group.getKey());\n-                        if (!membership.isPresent()) {\n-                            membership = Optional.of(\n-                                    new MembershipTO.Builder().group(group.getKey(), group.getName()).build());\n-                            groupableTO.getMemberships().add(membership.get());\n-                        }\n-                        membership.get().getDerAttrs().add(attrTO);\n+                        MembershipTO membership = groupableTO.getMembership(group.getKey()).orElseGet(() -> {\n+                            MembershipTO newMemb = new MembershipTO.Builder().group(group.getKey()).build();\n+                            groupableTO.getMemberships().add(newMemb);\n+                            return newMemb;\n+                        });\n+                        membership.getDerAttrs().add(attrTO);\n                     }\n                     break;\n \n@@ -838,13 +840,12 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n                     if (groupableTO == null || group == null) {\n                         anyTO.getVirAttrs().add(attrTO);\n                     } else {\n-                        Optional<MembershipTO> membership = groupableTO.getMembership(group.getKey());\n-                        if (!membership.isPresent()) {\n-                            membership = Optional.of(\n-                                    new MembershipTO.Builder().group(group.getKey(), group.getName()).build());\n-                            groupableTO.getMemberships().add(membership.get());\n-                        }\n-                        membership.get().getVirAttrs().add(attrTO);\n+                        MembershipTO membership = groupableTO.getMembership(group.getKey()).orElseGet(() -> {\n+                            MembershipTO newMemb = new MembershipTO.Builder().group(group.getKey()).build();\n+                            groupableTO.getMemberships().add(newMemb);\n+                            return newMemb;\n+                        });\n+                        membership.getVirAttrs().add(attrTO);\n                     }\n                     break;\n "},{"sha":"c7499a8ea31a66908f5606fc6c3344fbdf05416d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -69,6 +69,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -571,9 +572,9 @@ protected void fillTO(\n         anyTO.getResources().addAll(resources.stream().map(Entity::getKey).collect(Collectors.toSet()));\n     }\n \n-    protected RelationshipTO getRelationshipTO(final String relationshipType, final Any<?> otherEnd) {\n+    protected RelationshipTO getRelationshipTO(final String relationshipType, final AnyObject otherEnd) {\n         return new RelationshipTO.Builder().\n-                type(relationshipType).otherEnd(otherEnd.getType().getKey(), otherEnd.getKey()).\n+                type(relationshipType).otherEnd(otherEnd.getType().getKey(), otherEnd.getKey(), otherEnd.getName()).\n                 build();\n     }\n "},{"sha":"1dd6194fdf42b5b86015ca4ce0a6b8e076cb23e0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -101,11 +101,12 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean detai\n \n             // relationships\n             anyObjectTO.getRelationships().addAll(\n-                    anyObjectDAO.findAllRelationships(anyObject).stream().map(relationship -> getRelationshipTO(\n-                    relationship.getType().getKey(),\n-                    relationship.getLeftEnd().getKey().equals(anyObject.getKey())\n-                    ? relationship.getRightEnd()\n-                    : relationship.getLeftEnd())).\n+                    anyObjectDAO.findAllRelationships(anyObject).stream().\n+                            map(relationship -> getRelationshipTO(\n+                            relationship.getType().getKey(),\n+                            relationship.getLeftEnd().getKey().equals(anyObject.getKey())\n+                            ? relationship.getRightEnd()\n+                            : anyObject)).\n                             collect(Collectors.toList()));\n \n             // memberships"},{"sha":"58c2d7d155c2aea14400a9158510a74dfb0bf47d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -602,10 +602,9 @@ public UserTO getUserTO(final User user, final boolean details) {\n                     flatMap(role -> role.getPrivileges().stream()).map(Entity::getKey).collect(Collectors.toSet()));\n \n             // relationships\n-            userTO.getRelationships().addAll(\n-                    user.getRelationships().stream().map(relationship -> getRelationshipTO(\n-                    relationship.getType().getKey(), relationship.getRightEnd())).\n-                            collect(Collectors.toList()));\n+            userTO.getRelationships().addAll(user.getRelationships().stream().\n+                    map(relationship -> getRelationshipTO(relationship.getType().getKey(), relationship.getRightEnd())).\n+                    collect(Collectors.toList()));\n \n             // memberships\n             userTO.getMemberships().addAll("},{"sha":"f076186f3ed9e41d54bd35bd1650d4504cab0b97","filename":"ext/flowable/client-console/pom.xml","status":"modified","additions":17,"deletions":15,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fpom.xml?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -83,35 +83,37 @@ under the License.\n               <target>\n                 <unzip src=\"${settings.localRepository}/org/flowable/flowable-ui-modeler-app/${flowable.version}/flowable-ui-modeler-app-${flowable.version}.war\" dest=\"${flowable-modeler.directory}\">\n                   <patternset>\n-                    <include name=\"WEB-INF/classes/static/**\" />\n-                    <include name=\"WEB-INF/lib/flowable-ui-modeler-logic-${flowable.version}.jar\" />\n+                    <include name=\"WEB-INF/classes/static/**\"/>\n+                    <include name=\"WEB-INF/lib/flowable-ui-modeler-logic-${flowable.version}.jar\"/>\n                   </patternset>\n                 </unzip>\n                 \n                 <unzip src=\"${flowable-modeler.directory}/WEB-INF/lib/flowable-ui-modeler-logic-${flowable.version}.jar\" dest=\"${flowable-modeler.directory}\">\n                   <patternset>\n-                    <include name=\"stencilset_bpmn.json\" />\n+                    <include name=\"stencilset_bpmn.json\"/>\n                   </patternset>\n                 </unzip>\n                 \n                 <move todir=\"${flowable-modeler.directory}\">\n                   <fileset dir=\"${flowable-modeler.directory}/WEB-INF/classes/static/\">\n-                    <include name=\"**\" />\n+                    <include name=\"**\"/>\n                   </fileset>\n                 </move>\n-                <delete dir=\"${flowable-modeler.directory}/WEB-INF\" />\n+                <delete dir=\"${flowable-modeler.directory}/WEB-INF\"/>\n                 \n-                <replace file=\"${flowable-modeler.directory}/index.html\" token=\"&lt;/head&gt;\" value=\"&lt;script type=&quot;text/javascript&quot;&gt;window.onunload = refreshParent; function refreshParent() { window.opener.location.reload(); }&lt;/script&gt;&lt;/head&gt;\" />\n-                <replace file=\"${flowable-modeler.directory}/index.html\" token=\" ng-click=&quot;backToLanding()&quot;\" value=\" disabled=&quot;disabled&quot;\" />\n-                <replace file=\"${flowable-modeler.directory}/index.html\" token=\"&lt;ul class=&quot;nav navbar-nav&quot; id=&quot;main-nav&quot;\" value=\"&lt;ul class=&quot;nav navbar-nav&quot; id=&quot;main-nav&quot; style=&quot;display: none;&quot;\" />\n-                <replace file=\"${flowable-modeler.directory}/index.html\" token=\"&lt;div class=&quot;pull-right\" value=\"&lt;div style=&quot;display: none;&quot; class=&quot;pull-right\" />\n-                <replace file=\"${flowable-modeler.directory}/editor-app/editor.html\" token=\"&lt;div class=&quot;btn-group pull-right&quot;\" value=\"&lt;div style=&quot;display: none;&quot; class=&quot;btn-group pull-right&quot;\" />\n-                <replace file=\"${flowable-modeler.directory}/editor-app/configuration/toolbar-default-actions.js\" token=\"$location.path('/processes');\" value=\"window.close();\" />\n+                <replace file=\"${flowable-modeler.directory}/index.html\" token=\"&lt;/head&gt;\" value=\"&lt;script type=&quot;text/javascript&quot;&gt;window.onunload = refreshParent; function refreshParent() { window.opener.location.reload(); }&lt;/script&gt;&lt;/head&gt;\"/>\n+                <replace file=\"${flowable-modeler.directory}/index.html\" token=\" ng-click=&quot;backToLanding()&quot;\" value=\" disabled=&quot;disabled&quot;\"/>\n+                <replace file=\"${flowable-modeler.directory}/index.html\" token=\"&lt;ul class=&quot;nav navbar-nav&quot; id=&quot;main-nav&quot;\" value=\"&lt;ul class=&quot;nav navbar-nav&quot; id=&quot;main-nav&quot; style=&quot;display: none;&quot;\"/>\n+                <replace file=\"${flowable-modeler.directory}/index.html\" token=\"&lt;div class=&quot;pull-right\" value=\"&lt;div style=&quot;display: none;&quot; class=&quot;pull-right\"/>\n+                <replace file=\"${flowable-modeler.directory}/editor-app/editor.html\" token=\"&lt;div class=&quot;btn-group pull-right&quot;\" value=\"&lt;div style=&quot;display: none;&quot; class=&quot;btn-group pull-right&quot;\"/>\n+                <replace file=\"${flowable-modeler.directory}/editor-app/configuration/toolbar-default-actions.js\" token=\"$location.path('/processes');\" value=\"window.close();\"/>\n  \n-                <copy file=\"${basedir}/src/main/resources/app-cfg.js\" todir=\"${flowable-modeler.directory}/scripts\" overwrite=\"true\" />\n-                <copy file=\"${basedir}/src/main/resources/url-config.js\" todir=\"${flowable-modeler.directory}/editor-app/configuration\" overwrite=\"true\" />\n-                <copy file=\"${basedir}/src/main/resources/toolbar.js\" todir=\"${flowable-modeler.directory}/editor-app/configuration\" overwrite=\"true\" />\n-                <copy file=\"${basedir}/src/main/resources/save-model.html\" todir=\"${flowable-modeler.directory}/editor-app/popups\" overwrite=\"true\" />\n+                <copy file=\"${basedir}/src/main/resources/app-cfg.js\" todir=\"${flowable-modeler.directory}/scripts\" overwrite=\"true\"/>\n+                <copy file=\"${basedir}/src/main/resources/url-config.js\" todir=\"${flowable-modeler.directory}/editor-app/configuration\" overwrite=\"true\"/>\n+                <copy file=\"${basedir}/src/main/resources/toolbar.js\" todir=\"${flowable-modeler.directory}/editor-app/configuration\" overwrite=\"true\"/>\n+                <copy file=\"${basedir}/src/main/resources/save-model.html\" todir=\"${flowable-modeler.directory}/editor-app/popups\" overwrite=\"true\"/>\n+\n+                <patch patchfile=\"${basedir}/src/main/resources/dropdown.diff\" dir=\"${flowable-modeler.directory}\" strip=\"1\"/>\n               </target>\n             </configuration>\n             <goals>"},{"sha":"6a66afc0e3a01be58eb5f0927df61a0b5370f5a6","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/approvals/Approval.java","status":"modified","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApproval.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApproval.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApproval.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -45,7 +45,6 @@\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n-import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -103,19 +102,17 @@ public void setObject(final String object) {\n                         break;\n \n                     case Date:\n-                        final FastDateFormat formatter = FastDateFormat.getInstance(prop.getDatePattern());\n+                        FastDateFormat formatter = FastDateFormat.getInstance(prop.getDatePattern());\n                         field = new AjaxDateTimeFieldPanel(\"value\", label, new PropertyModel<Date>(prop, \"value\") {\n \n                             private static final long serialVersionUID = -3743432456095828573L;\n \n                             @Override\n                             public Date getObject() {\n                                 try {\n-                                    if (StringUtils.isBlank(prop.getValue())) {\n-                                        return null;\n-                                    } else {\n-                                        return formatter.parse(prop.getValue());\n-                                    }\n+                                    return StringUtils.isBlank(prop.getValue())\n+                                            ? null\n+                                            : formatter.parse(prop.getValue());\n                                 } catch (ParseException e) {\n                                     LOG.error(\"Unparsable date: {}\", prop.getValue(), e);\n                                     return null;\n@@ -131,19 +128,17 @@ public void setObject(final Date object) {\n                         break;\n \n                     case Enum:\n-                        MapChoiceRenderer<String, String> enumCR = new MapChoiceRenderer<>(prop.getEnumValues());\n-\n                         field = new AjaxDropDownChoicePanel(\n                                 \"value\", label, new PropertyModel<String>(prop, \"value\"), false).\n-                                setChoiceRenderer(enumCR).setChoices(new Model<ArrayList<String>>() {\n-\n-                            private static final long serialVersionUID = -858521070366432018L;\n+                                setChoiceRenderer(new MapChoiceRenderer(prop.getEnumValues())).\n+                                setChoices(new ArrayList<>(prop.getEnumValues().keySet()));\n+                        break;\n \n-                            @Override\n-                            public ArrayList<String> getObject() {\n-                                return new ArrayList<>(prop.getEnumValues().keySet());\n-                            }\n-                        });\n+                    case Dropdown:\n+                        field = new AjaxDropDownChoicePanel(\n+                                \"value\", label, new PropertyModel<String>(prop, \"value\"), false).\n+                                setChoiceRenderer(new MapChoiceRenderer(prop.getDropdownValues())).\n+                                setChoices(new ArrayList<>(prop.getDropdownValues().keySet()));\n                         break;\n \n                     case Long:"},{"sha":"577ea65aa09f9cea4ff81796180989e63bbd804e","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -113,15 +113,15 @@ public void onClose(final AjaxRequestTarget target) {\n \n         initResultTable();\n \n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, FlowableEntitlement.WORKFLOW_FORM_SUBMIT);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, FlowableEntitlement.USER_REQUEST_FORM_SUBMIT);\n     }\n \n     @Override\n     protected List<IColumn<UserRequestForm, String>> getColumns() {\n         List<IColumn<UserRequestForm, String>> columns = new ArrayList<>();\n \n         columns.add(new PropertyColumn<>(\n-                new ResourceModel(\"taskId\"), \"taskId\", \"taskId\"));\n+                new ResourceModel(\"bpmnProcess\"), \"bpmnProcess\", \"bpmnProcess\"));\n         columns.add(new PropertyColumn<>(\n                 new ResourceModel(\"key\"), \"formKey\", \"formKey\"));\n         columns.add(new PropertyColumn<>(\n@@ -151,7 +151,7 @@ public void onClick(final AjaxRequestTarget target, final UserRequestForm ignore\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n                 target.add(container);\n             }\n-        }, ActionLink.ActionType.CLAIM, FlowableEntitlement.WORKFLOW_FORM_CLAIM);\n+        }, ActionLink.ActionType.CLAIM, FlowableEntitlement.USER_REQUEST_FORM_CLAIM);\n \n         panel.add(new ActionLink<UserRequestForm>() {\n \n@@ -190,7 +190,7 @@ protected boolean statusCondition(final UserRequestForm modelObject) {\n                         equals(model.getObject().getOwner());\n             }\n \n-        }, ActionLink.ActionType.MANAGE_APPROVAL, FlowableEntitlement.WORKFLOW_FORM_READ);\n+        }, ActionLink.ActionType.MANAGE_APPROVAL, FlowableEntitlement.USER_REQUEST_FORM_SUBMIT);\n \n         // SYNCOPE-1200 edit user while in approval state\n         panel.add(new ActionLink<UserRequestForm>() {\n@@ -239,7 +239,7 @@ protected boolean statusCondition(final UserRequestForm modelObject) {\n                         equals(model.getObject().getOwner());\n             }\n \n-        }, ActionLink.ActionType.EDIT_APPROVAL, FlowableEntitlement.WORKFLOW_FORM_SUBMIT);\n+        }, ActionLink.ActionType.EDIT_APPROVAL, FlowableEntitlement.USER_REQUEST_FORM_SUBMIT);\n \n         return panel;\n     }\n@@ -326,8 +326,6 @@ private class ApprovalUserWizardBuilder extends UserWizardBuilder {\n         protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n             UserTO inner = modelObject.getInnerObject();\n \n-            ProvisioningResult<UserTO> result;\n-\n             UserPatch patch = AnyOperations.diff(inner, formTO.getUserTO(), false);\n \n             if (StringUtils.isNotBlank(inner.getPassword())) {\n@@ -337,16 +335,15 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n                         build();\n                 patch.setPassword(passwordPatch);\n             }\n+\n             // update just if it is changed\n+            ProvisioningResult<UserTO> result;\n             if (patch.isEmpty()) {\n                 result = new ProvisioningResult<>();\n                 result.setEntity(inner);\n             } else {\n                 result = userRestClient.update(getOriginalItem().getInnerObject().getETagValue(), patch);\n-                UserRequestForm workFlowTO = restClient.getForms(result.getEntity().getKey()).get(0);\n-                if (workFlowTO != null) {\n-                    claimForm(workFlowTO.getTaskId());\n-                }\n+                restClient.getForm(result.getEntity().getKey()).ifPresent(form -> claimForm(form.getTaskId()));\n             }\n \n             return result;"},{"sha":"8062a77b1389508b0231f4c61a5208b983b03681","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/pages/Flowable.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FFlowable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FFlowable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FFlowable.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.client.console.annotations.ExtPage;\n import org.apache.syncope.client.console.panels.BpmnProcessDirectoryPanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n-import org.apache.syncope.common.lib.to.BpmnProcessTO;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.common.lib.types.FlowableEntitlement;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -48,7 +48,7 @@ public Flowable(final PageParameters parameters) {\n         disabled.setOutputMarkupPlaceholderTag(true);\n         content.add(disabled);\n \n-        WizardMgtPanel<BpmnProcessTO> bpmnProcessesPanel = new BpmnProcessDirectoryPanel.Builder(getPageReference()) {\n+        WizardMgtPanel<BpmnProcess> bpmnProcessesPanel = new BpmnProcessDirectoryPanel.Builder(getPageReference()) {\n \n             private static final long serialVersionUID = -5960765294082359003L;\n "},{"sha":"8f4d566eaf3215219599e63aa110cccb9d637d96","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/BpmnProcessDirectoryPanel.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBpmnProcessDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBpmnProcessDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBpmnProcessDirectoryPanel.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -43,7 +43,7 @@\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.BpmnProcessTO;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.common.lib.types.FlowableEntitlement;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageReference;\n@@ -65,7 +65,7 @@\n import org.apache.wicket.util.io.IOUtils;\n \n public class BpmnProcessDirectoryPanel extends DirectoryPanel<\n-        BpmnProcessTO, BpmnProcessTO, BpmProcessDataProvider, BpmnProcessRestClient> {\n+        BpmnProcess, BpmnProcess, BpmProcessDataProvider, BpmnProcessRestClient> {\n \n     private static final long serialVersionUID = 2705668831139984998L;\n \n@@ -76,13 +76,13 @@ public class BpmnProcessDirectoryPanel extends DirectoryPanel<\n     protected BpmnProcessDirectoryPanel(final String id, final Builder builder) {\n         super(id, builder);\n \n-        this.addNewItemPanelBuilder(new AjaxWizardBuilder<BpmnProcessTO>(new BpmnProcessTO(), pageRef) {\n+        this.addNewItemPanelBuilder(new AjaxWizardBuilder<BpmnProcess>(new BpmnProcess(), pageRef) {\n \n             private static final long serialVersionUID = 1633859795677053912L;\n \n             @Override\n             protected WizardModel buildModelSteps(\n-                    final BpmnProcessTO modelObject, final WizardModel wizardModel) {\n+                    final BpmnProcess modelObject, final WizardModel wizardModel) {\n \n                 return wizardModel;\n             }\n@@ -133,8 +133,8 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected List<IColumn<BpmnProcessTO, String>> getColumns() {\n-        List<IColumn<BpmnProcessTO, String>> columns = new ArrayList<>();\n+    protected List<IColumn<BpmnProcess, String>> getColumns() {\n+        List<IColumn<BpmnProcess, String>> columns = new ArrayList<>();\n \n         columns.add(new PropertyColumn<>(new ResourceModel(\"key\"), \"key\"));\n         columns.add(new PropertyColumn<>(new ResourceModel(\"name\"), \"name\", \"name\"));\n@@ -143,15 +143,15 @@ protected List<IColumn<BpmnProcessTO, String>> getColumns() {\n     }\n \n     @Override\n-    public ActionsPanel<BpmnProcessTO> getActions(final IModel<BpmnProcessTO> model) {\n-        final ActionsPanel<BpmnProcessTO> panel = super.getActions(model);\n+    public ActionsPanel<BpmnProcess> getActions(final IModel<BpmnProcess> model) {\n+        final ActionsPanel<BpmnProcess> panel = super.getActions(model);\n \n-        panel.add(new ActionLink<BpmnProcessTO>() {\n+        panel.add(new ActionLink<BpmnProcess>() {\n \n             private static final long serialVersionUID = -184018732772021627L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final BpmnProcessTO ignore) {\n+            public void onClick(final AjaxRequestTarget target, final BpmnProcess ignore) {\n                 final IModel<String> wfDefinition = new Model<>();\n                 try {\n                     wfDefinition.setObject(IOUtils.toString(restClient.getDefinition(\n@@ -189,12 +189,12 @@ public void onSubmit(final AjaxRequestTarget target) {\n             }\n         }, ActionLink.ActionType.EDIT, FlowableEntitlement.BPMN_PROCESS_SET);\n \n-        panel.add(new ActionLink<BpmnProcessTO>() {\n+        panel.add(new ActionLink<BpmnProcess>() {\n \n             private static final long serialVersionUID = 3109256773218160485L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final BpmnProcessTO ignore) {\n+            public void onClick(final AjaxRequestTarget target, final BpmnProcess ignore) {\n                 modal.header(Model.of(model.getObject().getKey()));\n                 modal.setContent(new ImageModalPanel<>(\n                         modal, restClient.getDiagram(model.getObject().getKey()), pageRef));\n@@ -203,7 +203,7 @@ public void onClick(final AjaxRequestTarget target, final BpmnProcessTO ignore)\n             }\n         }, ActionLink.ActionType.VIEW, FlowableEntitlement.BPMN_PROCESS_GET);\n \n-        panel.add(new ActionLink<BpmnProcessTO>() {\n+        panel.add(new ActionLink<BpmnProcess>() {\n \n             private static final long serialVersionUID = -184018732772021627L;\n \n@@ -222,22 +222,22 @@ public PageParameters getPageParameters() {\n             }\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final BpmnProcessTO ignore) {\n+            public void onClick(final AjaxRequestTarget target, final BpmnProcess ignore) {\n                 // do nothing\n             }\n         }, ActionLink.ActionType.EXTERNAL_EDITOR, FlowableEntitlement.BPMN_PROCESS_SET);\n \n-        panel.add(new ActionLink<BpmnProcessTO>() {\n+        panel.add(new ActionLink<BpmnProcess>() {\n \n             private static final long serialVersionUID = -7978723352517770644L;\n \n             @Override\n-            protected boolean statusCondition(final BpmnProcessTO modelObject) {\n+            protected boolean statusCondition(final BpmnProcess modelObject) {\n                 return !modelObject.isUserWorkflow();\n             }\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final BpmnProcessTO ignore) {\n+            public void onClick(final AjaxRequestTarget target, final BpmnProcess ignore) {\n                 try {\n                     restClient.deleteDefinition(model.getObject().getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n@@ -260,7 +260,7 @@ protected Collection<ActionLink.ActionType> getBatches() {\n     }\n \n     public abstract static class Builder\n-            extends DirectoryPanel.Builder<BpmnProcessTO, BpmnProcessTO, BpmnProcessRestClient> {\n+            extends DirectoryPanel.Builder<BpmnProcess, BpmnProcess, BpmnProcessRestClient> {\n \n         private static final long serialVersionUID = 5088962796986706805L;\n \n@@ -269,16 +269,16 @@ public Builder(final PageReference pageRef) {\n         }\n \n         @Override\n-        protected WizardMgtPanel<BpmnProcessTO> newInstance(final String id, final boolean wizardInModal) {\n+        protected WizardMgtPanel<BpmnProcess> newInstance(final String id, final boolean wizardInModal) {\n             return new BpmnProcessDirectoryPanel(id, this);\n         }\n     }\n \n-    protected class BpmProcessDataProvider extends DirectoryDataProvider<BpmnProcessTO> {\n+    protected class BpmProcessDataProvider extends DirectoryDataProvider<BpmnProcess> {\n \n         private static final long serialVersionUID = 1764153405387687592L;\n \n-        private final SortableDataProviderComparator<BpmnProcessTO> comparator;\n+        private final SortableDataProviderComparator<BpmnProcess> comparator;\n \n         private final BpmnProcessRestClient restClient = new BpmnProcessRestClient();\n \n@@ -289,8 +289,8 @@ public BpmProcessDataProvider(final int paginatorRows) {\n         }\n \n         @Override\n-        public Iterator<BpmnProcessTO> iterator(final long first, final long count) {\n-            List<BpmnProcessTO> result = restClient.getDefinitions();\n+        public Iterator<BpmnProcess> iterator(final long first, final long count) {\n+            List<BpmnProcess> result = restClient.getDefinitions();\n             Collections.sort(result, comparator);\n             return result.subList((int) first, (int) first + (int) count).iterator();\n         }\n@@ -301,7 +301,7 @@ public long size() {\n         }\n \n         @Override\n-        public IModel<BpmnProcessTO> model(final BpmnProcessTO object) {\n+        public IModel<BpmnProcess> model(final BpmnProcess object) {\n             return new CompoundPropertyModel<>(object);\n         }\n     }"},{"sha":"7ad5f24aeb346f90c24e3e5010d3f1849c4a95b8","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/AbstractBpmnProcessResource.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FAbstractBpmnProcessResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FAbstractBpmnProcessResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FAbstractBpmnProcessResource.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -21,7 +21,7 @@\n import javax.ws.rs.NotFoundException;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.rest.BpmnProcessRestClient;\n-import org.apache.syncope.common.lib.to.BpmnProcessTO;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.util.string.StringValue;\n import org.slf4j.Logger;\n@@ -35,10 +35,10 @@ abstract class AbstractBpmnProcessResource extends AbstractResource {\n \n     protected final BpmnProcessRestClient restClient = new BpmnProcessRestClient();\n \n-    protected BpmnProcessTO getBpmnProcess(final Attributes attributes) {\n+    protected BpmnProcess getBpmnProcess(final Attributes attributes) {\n         StringValue modelId = attributes.getRequest().getQueryParameters().getParameterValue(Constants.MODEL_ID_PARAM);\n \n-        BpmnProcessTO bpmnProcess = modelId == null || modelId.isNull()\n+        BpmnProcess bpmnProcess = modelId == null || modelId.isNull()\n                 ? null\n                 : restClient.getDefinitions().stream().\n                         filter(object -> modelId.toString().equals(object.getModelId())).findAny().orElse(null);"},{"sha":"dfe633e5309a774a38543dc70dd06635ec38d804","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessGETResource.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FBpmnProcessGETResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FBpmnProcessGETResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FBpmnProcessGETResource.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -23,7 +23,7 @@\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.client.console.annotations.Resource;\n import org.apache.syncope.client.console.rest.BpmnProcessRestClient;\n-import org.apache.syncope.common.lib.to.BpmnProcessTO;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.wicket.util.io.IOUtils;\n \n /**\n@@ -36,7 +36,7 @@ public class BpmnProcessGETResource extends AbstractBpmnProcessResource {\n \n     @Override\n     protected ResourceResponse newResourceResponse(final Attributes attributes) {\n-        final BpmnProcessTO toGet = getBpmnProcess(attributes);\n+        final BpmnProcess toGet = getBpmnProcess(attributes);\n \n         ResourceResponse response = new ResourceResponse();\n         response.disableCaching();"},{"sha":"1031ce8e050a161ea47e50f3e27c06c3355997b7","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/resources/BpmnProcessPUTResource.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FBpmnProcessPUTResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FBpmnProcessPUTResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FBpmnProcessPUTResource.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -24,7 +24,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.cxf.common.util.UrlUtils;\n import org.apache.syncope.client.console.annotations.Resource;\n-import org.apache.syncope.common.lib.to.BpmnProcessTO;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.wicket.util.io.IOUtils;\n \n /**\n@@ -52,7 +52,7 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n             LOG.error(\"Could not extract BPMN process\", e);\n         }\n \n-        BpmnProcessTO toSet = getBpmnProcess(attributes);\n+        BpmnProcess toSet = getBpmnProcess(attributes);\n \n         if (definition == null || toSet == null) {\n             return new ResourceResponse().setStatusCode(Response.Status.BAD_REQUEST.getStatusCode())."},{"sha":"9e8843196dac4a8a9f224699124edb69c80f7a21","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/BpmnProcessRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBpmnProcessRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBpmnProcessRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBpmnProcessRestClient.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -25,7 +25,7 @@\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.common.lib.to.BpmnProcessTO;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n \n@@ -37,7 +37,7 @@ private BpmnProcessService getService(final MediaType mediaType) {\n         return SyncopeConsoleSession.get().getService(mediaType, BpmnProcessService.class);\n     }\n \n-    public List<BpmnProcessTO> getDefinitions() {\n+    public List<BpmnProcess> getDefinitions() {\n         return getService(BpmnProcessService.class).list();\n     }\n "},{"sha":"e3a179f71ca5de25d2d24a98c6dced99beb03d33","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/rest/UserRequestRestClient.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRequestRestClient.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.client.console.rest;\n \n import java.util.List;\n+import java.util.Optional;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -40,8 +42,13 @@ public List<UserRequestForm> getForms(final int page, final int size, final Sort\n                 getResult();\n     }\n \n-    public List<UserRequestForm> getForms(final String userKey) {\n-        return getService(UserRequestService.class).getForms(userKey);\n+    public Optional<UserRequestForm> getForm(final String userKey) {\n+        PagedResult<UserRequestForm> forms = getService(UserRequestService.class).\n+                getForms(new UserRequestFormQuery.Builder().user(userKey).page(1).size(1).build());\n+        UserRequestForm form = forms.getResult().isEmpty()\n+                ? null\n+                : forms.getResult().get(0);\n+        return Optional.ofNullable(form);\n     }\n \n     public UserRequestForm claimForm(final String taskKey) {"},{"sha":"9a9fd2d0ce91028925f8ce2e251b245f1b34a4fa","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/widgets/ApprovalsWidget.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -87,8 +87,7 @@ public final void refreshLatestAlerts(final AjaxRequestTarget target) {\n \n     @Override\n     protected int getLatestAlertsSize() {\n-        return SyncopeConsoleSession.get().owns(FlowableEntitlement.WORKFLOW_FORM_LIST)\n-                && SyncopeConsoleSession.get().owns(FlowableEntitlement.WORKFLOW_FORM_READ)\n+        return SyncopeConsoleSession.get().owns(FlowableEntitlement.USER_REQUEST_FORM_LIST)\n                 ? restClient.countForms()\n                 : 0;\n     }\n@@ -102,9 +101,7 @@ protected IModel<List<UserRequestForm>> getLatestAlerts() {\n             @Override\n             public List<UserRequestForm> getObject() {\n                 List<UserRequestForm> updatedApprovals;\n-                if (SyncopeConsoleSession.get().owns(FlowableEntitlement.WORKFLOW_FORM_LIST)\n-                        && SyncopeConsoleSession.get().owns(FlowableEntitlement.WORKFLOW_FORM_READ)) {\n-\n+                if (SyncopeConsoleSession.get().owns(FlowableEntitlement.USER_REQUEST_FORM_LIST)) {\n                     updatedApprovals = restClient.getForms(1, MAX_SIZE, new SortParam<>(\"createTime\", true));\n                 } else {\n                     updatedApprovals = Collections.<UserRequestForm>emptyList();\n@@ -118,7 +115,8 @@ public List<UserRequestForm> getObject() {\n     @Override\n     protected AbstractLink getEventsLink(final String linkid) {\n         BookmarkablePageLink<Approvals> approvals = BookmarkablePageLinkBuilder.build(linkid, Approvals.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(approvals, WebPage.ENABLE, FlowableEntitlement.WORKFLOW_FORM_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                approvals, WebPage.ENABLE, FlowableEntitlement.USER_REQUEST_FORM_LIST);\n         return approvals;\n     }\n "},{"sha":"80fe1e70d77e88e0a272a30962cd501bf9b238d9","filename":"ext/flowable/client-console/src/main/resources/dropdown.diff","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Fdropdown.diff","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Fdropdown.diff","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Fdropdown.diff?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -0,0 +1,139 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+diff --git a/editor-app/configuration/properties-form-properties-controller.js b/editor-app/configuration/properties-form-properties-controller.js\n+index ca8f051..fc02151 100644\n+--- a/editor-app/configuration/properties-form-properties-controller.js\n++++ b/editor-app/configuration/properties-form-properties-controller.js\n+@@ -102,6 +102,20 @@ angular.module('flowableModeler').controller('FlowableFormPropertiesPopupCtrl',\n+                 { field: 'name', displayName: $scope.labels.nameLabel}]\n+             }\n+ \n++            $scope.dropdownGridOptions = {\n++    \t\t    data: $scope.enumValues,\n++                headerRowHeight: 28,\n++                enableRowSelection: true,\n++                enableRowHeaderSelection: false,\n++                multiSelect: false,\n++                modifierKeysToMultiSelect: false,\n++                enableHorizontalScrollbar: 0,\n++                enableColumnMenus: false,\n++                enableSorting: false,\n++                columnDefs: [{ field: 'id', displayName: $scope.labels.idLabel },\n++                { field: 'name', displayName: $scope.labels.nameLabel}]\n++            }\n++\n+             $scope.gridOptions.onRegisterApi = function (gridApi) {\n+                 //set gridApi on scope\n+                 $scope.gridApi = gridApi;\n+@@ -124,6 +138,13 @@ angular.module('flowableModeler').controller('FlowableFormPropertiesPopupCtrl',\n+                     $scope.selectedEnumValue = row.entity;\n+                 });\n+             };\n++            $scope.dropdownGridOptions.onRegisterApi = function (gridApi) {\n++                //set gridApi on scope\n++                $scope.dropdownGridApi = gridApi;\n++                gridApi.selection.on.rowSelectionChanged($scope, function (row) {\n++                    $scope.selectedDropdownValue = row.entity;\n++                });\n++            };\n+         });\n+ \n+         // Handler for when the value of the type dropdown changes\n+@@ -143,7 +164,12 @@ angular.module('flowableModeler').controller('FlowableFormPropertiesPopupCtrl',\n+                 for (var i = 0; i < $scope.selectedProperty.enumValues.length; i++) {\n+                     $scope.enumValues.push($scope.selectedProperty.enumValues[i]);\n+                 }\n+-                \n++            } else if ($scope.selectedProperty.type === 'dropdown') {\n++                $scope.selectedProperty.enumValues = [ {id: 'dropdownValueProvider', name: 'provider'}];\n++                $scope.enumValues.length = 0;\n++                for (var i = 0; i < $scope.selectedProperty.enumValues.length; i++) {\n++                    $scope.enumValues.push($scope.selectedProperty.enumValues[i]);\n++                }\n+             } else {\n+                 delete $scope.selectedProperty.enumValues;\n+                 $scope.enumValues.length = 0;\n+@@ -324,4 +350,4 @@ angular.module('flowableModeler').controller('FlowableFormPropertiesPopupCtrl',\n+         };\n+ \n+     }])\n+-;\n+\\ No newline at end of file\n++;\n+diff --git a/editor-app/configuration/properties/form-properties-popup.html b/editor-app/configuration/properties/form-properties-popup.html\n+index 17c5ca8..57a24e5 100644\n+--- a/editor-app/configuration/properties/form-properties-popup.html\n++++ b/editor-app/configuration/properties/form-properties-popup.html\n+@@ -42,6 +42,7 @@\n+                                     <option>boolean</option>\n+                                     <option>date</option>\n+                                     <option>enum</option>\n++                                    <option>dropdown</option>\n+                                 </select>\n+             \t\t\t\t</div>\n+                            \t<div class=\"form-group\" ng-show=\"selectedProperty.datePattern\">\n+@@ -80,6 +81,38 @@\n+                                     </div>\n+                                 </div>    \n+             \t\t\t\t</div>\n++                            <div ng-show=\"selectedProperty.type == 'dropdown'\" style=\"padding-bottom:10px\">\n++                                <div class=\"row row-no-gutter\">\n++                                    <div class=\"col-xs-6\">\n++                                        <div ng-if=\"translationsRetrieved\" class=\"kis-listener-grid\" ui-grid=\"dropdownGridOptions\" ui-grid-selection ui-grid-auto-resize></div>\n++                                        <!--<div class=\"pull-right\">\n++                                            <div class=\"btn-group\">\n++                                                <a class=\"btn btn-icon btn-lg\" rel=\"tooltip\" data-title=\"{{ACTION.MOVE.UP | translate}}\" data-placement=\"bottom\" data-original-title=\"\" title=\"\" ng-click=\"moveEnumValueUp()\"><i class=\"glyphicon glyphicon-arrow-up\"></i></a>\n++                                                <a class=\"btn btn-icon btn-lg\" rel=\"tooltip\" data-title=\"{{ACTION.MOVE.DOWN | translate}}\" data-placement=\"bottom\" data-original-title=\"\" title=\"\" ng-click=\"moveEnumValueDown()\"><i class=\"glyphicon glyphicon-arrow-down\"></i></a>\n++                                            </div>\n++                                            <div class=\"btn-group\">\n++                                                <a class=\"btn btn-icon btn-lg\" rel=\"tooltip\" data-title=\"{{ACTION.ADD | translate}}\" data-placement=\"bottom\" data-original-title=\"\" title=\"\" ng-click=\"addNewEnumValue()\"><i class=\"glyphicon glyphicon-plus\"></i></a>\n++                                                <a class=\"btn btn-icon btn-lg\" rel=\"tooltip\" data-title=\"{{ACTION.REMOVE | translate}}\" data-placement=\"bottom\" data-original-title=\"\" title=\"\" ng-click=\"removeEnumValue()\"><i class=\"glyphicon glyphicon-minus\"></i></a>\n++                                            </div>\n++                                        </div>-->\n++                                    </div>\n++                            \n++                                    <div class=\"col-xs-6\">\n++                                        <div ng-show=\"selectedDropdownValue\">\n++                            \n++                                            <div class=\"form-group\">\n++                                                <label for=\"classField\">{{'PROPERTY.FORMPROPERTIES.VALUES.ID' | translate}}</label>\n++                                                <input type=\"text\" id=\"classField\" class=\"form-control\" ng-model=\"selectedDropdownValue.id\" placeholder=\"{{'PROPERTY.FORMPROPERTIES.VALUES.ID.PLACEHOLDER' | translate}}\" />\n++                                            </div>\n++                                            <div class=\"form-group\">\n++                                                <label for=\"classField\">{{'PROPERTY.FORMPROPERTIES.VALUES.NAME' | translate}}</label>\n++                                                <input type=\"text\" id=\"classField\" class=\"form-control\" ng-model=\"selectedDropdownValue.name\" placeholder=\"{{'PROPERTY.FORMPROPERTIES.VALUES.NAME.PLACEHOLDER' | translate}}\" />\n++                                            </div>\n++                                        </div>\n++                                        <div ng-show=\"!selectedDropdownValue\" class=\"muted no-property-selected\" translate>PROPERTY.FORMPROPERTIES.DROPDOWNVALUES.EMPTY</div>\n++                                    </div>\n++                                </div>    \n++            \t\t\t\t</div>\n+                             <div class=\"form-group\">\n+             \t\t\t   \t\t<label for=\"expressionField\">{{'PROPERTY.FORMPROPERTIES.EXPRESSION' | translate}}</label>\n+             \t\t\t   \t\t<input id=\"expressionField\" class=\"form-control\" type=\"text\" ng-model=\"selectedProperty.expression\" placeholder=\"{{'PROPERTY.FORMPROPERTIES.EXPRESSION.PLACEHOLDER' | translate }}\" />\n+diff --git a/i18n/en.json b/i18n/en.json\n+index 7d0e40a..1067dad 100644\n+--- a/i18n/en.json\n++++ b/i18n/en.json\n+@@ -824,6 +824,7 @@\n+     \"PROPERTY.FORMPROPERTIES.DATEPATTERN.PLACEHOLDER\" : \"Enter date pattern\",\n+     \"PROPERTY.FORMPROPERTIES.VALUES\" : \"Values\",\n+     \"PROPERTY.FORMPROPERTIES.ENUMVALUES.EMPTY\" : \"No enum value selected\",\n++    \"PROPERTY.FORMPROPERTIES.DROPDOWNVALUES.EMPTY\" : \"No dropdown value selected\",\n+     \"PROPERTY.FORMPROPERTIES.VALUES.ID\" : \"Id\",\n+     \"PROPERTY.FORMPROPERTIES.VALUES.NAME\" : \"Name\",\n+     \"PROPERTY.FORMPROPERTIES.VALUES.ID.PLACEHOLDER\" : \"Enter id of a value\","},{"sha":"84b9c8595a776c3a172e2ecee7cdd06f78511c82","filename":"ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals.properties?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -14,7 +14,7 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-taskId=Task\n+bpmnProcess=User Request\n key=Key\n description=Description\n createTime=Create Time"},{"sha":"f25abd8abed8a6476f174a936f94ab646a4037f3","filename":"ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals_it.properties?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -14,7 +14,7 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-taskId=Task\n+bpmnProcess=User Request\n key=Chiave\n description=Descrizione\n createTime=Data di creazione"},{"sha":"dcca6e1248c5757c38dbbbc981701e1f97652770","filename":"ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_ja.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals_ja.properties?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -14,7 +14,7 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-taskId=\\u30bf\\u30b9\\u30af\n+bpmnProcess=User Request\n key=\\u30ad\\u30fc\n description=\\u8aac\\u660e\n createTime=\\u4f5c\\u6210\\u6642\\u523b"},{"sha":"88a9e05ef3f28acfc39c880ea24c9daaff3fcbca","filename":"ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_pt_BR.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals_pt_BR.properties?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -14,7 +14,7 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-taskId=Tarefa\n+bpmnProcess=User Request\n key=Chave\n description=Descri\\u00e7\\u00e3o\n createTime=Tempo de Cria\\u00e7\\u00e3o"},{"sha":"2e7a1994ec6807c3af3d6e2fdf6b53f15fd4ec86","filename":"ext/flowable/client-console/src/main/resources/org/apache/syncope/client/console/pages/Approvals_ru.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovals_ru.properties?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -16,7 +16,7 @@\n # under the License.\n #\n # taskId=\\u00d0\\u0097\\u00d0\\u00b0\\u00d1\\u008f\\u00d0\\u00b2\\u00d0\\u00ba\\u00d0\\u00b0\n-taskId=\\u0417\\u0430\\u044f\\u0432\\u043a\\u0430\n+bpmnProcess=User Request\n # key=\\u00d0\\u0098\\u00d0\\u00b4\\u00d0\\u00b5\\u00d0\\u00bd\\u00d1\\u0082\\u00d0\\u00b8\\u00d1\\u0084\\u00d0\\u00b8\\u00d0\\u00ba\\u00d0\\u00b0\\u00d1\\u0082\\u00d0\\u00be\\u00d1\\u0080\n key=\\u0418\\u0434\\u0435\\u043d\\u0442\\u0438\\u0444\\u0438\\u043a\\u0430\\u0442\\u043e\\u0440\n # description=\\u00d0\\u009e\\u00d0\\u00bf\\u00d0\\u00b8\\u00d1\\u0081\\u00d0\\u00b0\\u00d0\\u00bd\\u00d0\\u00b8\\u00d0\\u00b5"},{"sha":"35a7883bc2ee04c605e2c99080f9c699402a6f31","filename":"ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/BpmnProcess.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBpmnProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBpmnProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBpmnProcess.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -24,7 +24,7 @@\n \n @XmlRootElement(name = \"bpmnProcess\")\n @XmlType\n-public class BpmnProcessTO extends AbstractBaseBean implements EntityTO {\n+public class BpmnProcess extends AbstractBaseBean implements EntityTO {\n \n     private static final long serialVersionUID = -7044543391316529128L;\n ","previous_filename":"ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/BpmnProcessTO.java"},{"sha":"251eb89b414a6da6381d1d3f996a0eb4fe1ba2c3","filename":"ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequest.java","status":"renamed","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserRequest.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -24,33 +24,17 @@\n \n @XmlRootElement(name = \"userRequest\")\n @XmlType\n-public class UserRequestTO extends AbstractBaseBean {\n+public class UserRequest extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -8430826310789942133L;\n \n-    private String processInstanceId;\n-\n-    private String executionId;\n-\n     private String bpmnProcess;\n \n     private String user;\n \n-    public String getProcessInstanceId() {\n-        return processInstanceId;\n-    }\n-\n-    public void setProcessInstanceId(final String processInstanceId) {\n-        this.processInstanceId = processInstanceId;\n-    }\n-\n-    public String getExecutionId() {\n-        return executionId;\n-    }\n+    private String executionId;\n \n-    public void setExecutionId(final String executionId) {\n-        this.executionId = executionId;\n-    }\n+    private String activityId;\n \n     public String getBpmnProcess() {\n         return bpmnProcess;\n@@ -67,4 +51,20 @@ public String getUser() {\n     public void setUser(final String user) {\n         this.user = user;\n     }\n+\n+    public String getExecutionId() {\n+        return executionId;\n+    }\n+\n+    public void setExecutionId(final String executionId) {\n+        this.executionId = executionId;\n+    }\n+\n+    public String getActivityId() {\n+        return activityId;\n+    }\n+\n+    public void setActivityId(final String activityId) {\n+        this.activityId = activityId;\n+    }\n }","previous_filename":"ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestTO.java"},{"sha":"22118b5b030c38bf6a5874ce2d23733e2f29cac2","filename":"ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestForm.java","status":"modified","additions":23,"deletions":3,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserRequestForm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserRequestForm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserRequestForm.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -37,8 +37,12 @@ public class UserRequestForm extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -7044543391316529128L;\n \n+    private String bpmnProcess;\n+\n     private String username;\n \n+    private String executionId;\n+\n     private String taskId;\n \n     private String formKey;\n@@ -55,6 +59,14 @@ public class UserRequestForm extends AbstractBaseBean {\n \n     private final List<UserRequestFormProperty> properties = new ArrayList<>();\n \n+    public String getBpmnProcess() {\n+        return bpmnProcess;\n+    }\n+\n+    public void setBpmnProcess(final String bpmnProcess) {\n+        this.bpmnProcess = bpmnProcess;\n+    }\n+\n     public String getUsername() {\n         return username;\n     }\n@@ -63,6 +75,14 @@ public void setUsername(final String username) {\n         this.username = username;\n     }\n \n+    public String getExecutionId() {\n+        return executionId;\n+    }\n+\n+    public void setExecutionId(final String executionId) {\n+        this.executionId = executionId;\n+    }\n+\n     public String getTaskId() {\n         return taskId;\n     }\n@@ -138,9 +158,9 @@ public Optional<UserRequestFormProperty> getProperty(final String id) {\n         return properties.stream().filter(property -> id.equals(property.getId())).findFirst();\n     }\n \n-    @XmlElementWrapper(name = \"workflowFormProperties\")\n-    @XmlElement(name = \"workflowFormProperty\")\n-    @JsonProperty(\"workflowFormProperties\")\n+    @XmlElementWrapper(name = \"properties\")\n+    @XmlElement(name = \"property\")\n+    @JsonProperty(\"properties\")\n     public List<UserRequestFormProperty> getProperties() {\n         return properties;\n     }"},{"sha":"95f2fec66ad336fd8383474775504a29b67c0c8f","filename":"ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestFormProperty.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserRequestFormProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserRequestFormProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserRequestFormProperty.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -51,6 +51,9 @@ public class UserRequestFormProperty extends AbstractBaseBean {\n     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n     private final Map<String, String> enumValues = new HashMap<>();\n \n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    private final Map<String, String> dropdownValues = new HashMap<>();\n+\n     private String value;\n \n     public String getId() {\n@@ -114,6 +117,11 @@ public Map<String, String> getEnumValues() {\n         return enumValues;\n     }\n \n+    @JsonProperty\n+    public Map<String, String> getDropdownValues() {\n+        return dropdownValues;\n+    }\n+\n     public String getValue() {\n         return value;\n     }"},{"sha":"fbf5b0294b488105a62944db637fcd8c69989df6","filename":"ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/FlowableEntitlement.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FFlowableEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FFlowableEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FFlowableEntitlement.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -36,19 +36,13 @@ public final class FlowableEntitlement {\n \n     public static final String WORKFLOW_TASK_LIST = \"WORKFLOW_TASK_LIST\";\n \n-    public static final String WORKFLOW_FORM_LIST = \"WORKFLOW_FORM_LIST\";\n+    public static final String USER_REQUEST_LIST = \"USER_REQUEST_LIST\";\n \n-    public static final String WORKFLOW_FORM_READ = \"WORKFLOW_FORM_READ\";\n+    public static final String USER_REQUEST_FORM_LIST = \"USER_REQUEST_FORM_LIST\";\n \n-    public static final String WORKFLOW_FORM_CLAIM = \"WORKFLOW_FORM_CLAIM\";\n+    public static final String USER_REQUEST_FORM_CLAIM = \"USER_REQUEST_FORM_CLAIM\";\n \n-    public static final String WORKFLOW_FORM_SUBMIT = \"WORKFLOW_FORM_SUBMIT\";\n-\n-    public static final String USER_REQUEST_DEF_CREATE = \"USER_REQUEST_DEF_CREATE\";\n-\n-    public static final String USER_REQUEST_DEF_UPDATE = \"USER_REQUEST_DEF_UPDATE\";\n-\n-    public static final String USER_REQUEST_DEF_DELETE = \"USER_REQUEST_DEF_DELETE\";\n+    public static final String USER_REQUEST_FORM_SUBMIT = \"USER_REQUEST_FORM_SUBMIT\";\n \n     public static final String USER_REQUEST_START = \"USER_REQUEST_START\";\n "},{"sha":"227296bb1b5dfab1d659481b5375a2e6ef58d9b9","filename":"ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/types/UserRequestFormPropertyType.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FUserRequestFormPropertyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FUserRequestFormPropertyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FUserRequestFormPropertyType.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -27,6 +27,7 @@ public enum UserRequestFormPropertyType {\n     Long,\n     Enum,\n     Date,\n-    Boolean\n+    Boolean,\n+    Dropdown\n \n }"},{"sha":"f7d17473c23c3a7d21b3b03c0bc570f6509f34dd","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/BpmnProcessManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FBpmnProcessManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FBpmnProcessManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FBpmnProcessManager.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -20,15 +20,15 @@\n \n import java.io.OutputStream;\n import java.util.List;\n-import org.apache.syncope.common.lib.to.BpmnProcessTO;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.common.lib.types.BpmnProcessFormat;\n \n public interface BpmnProcessManager {\n \n     /**\n      * @return all available workflow processes.\n      */\n-    List<BpmnProcessTO> getProcesses();\n+    List<BpmnProcess> getProcesses();\n \n     /**\n      * Export the process for the given key, in the requested format."},{"sha":"b6c79cf5774d804e866ce12e03a240b9144c3a43","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/DropdownValueProvider.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FDropdownValueProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FDropdownValueProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FDropdownValueProvider.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.flowable.api;\n+\n+import java.util.Map;\n+\n+/**\n+ * Implementations of this interface are used with {@link org.apache.syncope.core.flowable.support.DropdownFormType}.\n+ */\n+public interface DropdownValueProvider {\n+\n+    String NAME = \"dropdownValueProvider\";\n+\n+    Map<String, String> getValues();\n+}"},{"sha":"c3c6f0de002c81e374a9e38b5f953204981d2001","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/UserRequestHandler.java","status":"modified","additions":18,"deletions":12,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FUserRequestHandler.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.UserRequestTO;\n+import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -32,14 +32,26 @@\n \n public interface UserRequestHandler {\n \n+    /**\n+     * Get the running user requests matching the provided parameters.\n+     *\n+     * @param userKey user key (optional)\n+     * @param page result page\n+     * @param size items per page\n+     * @param orderByClauses sort conditions\n+     * @return total number of user requests, list of user requests matching the provided parameters\n+     */\n+    Pair<Integer, List<UserRequest>> getUserRequests(\n+            String userKey, int page, int size, List<OrderByClause> orderByClauses);\n+\n     /**\n      * Starts a new user request, for the given BPMN process and user.\n      *\n      * @param bpmnProcess BPMN process\n      * @param user user\n      * @return data about the started request service, including execution id\n      */\n-    UserRequestTO start(String bpmnProcess, User user);\n+    UserRequest start(String bpmnProcess, User user);\n \n     /**\n      * Parses the given execution id to find matching user request and owner.\n@@ -73,22 +85,16 @@ public interface UserRequestHandler {\n     void cancelByUser(AnyDeletedEvent event);\n \n     /**\n-     * Get the forms for current workflow process instances matching the provided parameters.\n+     * Get the forms matching the provided parameters.\n      *\n+     * @param userKey user key (optional)\n      * @param page result page\n      * @param size items per page\n      * @param orderByClauses sort conditions\n      * @return total number of forms, list of forms matching the provided parameters\n      */\n-    Pair<Integer, List<UserRequestForm>> getForms(int page, int size, List<OrderByClause> orderByClauses);\n-\n-    /**\n-     * Get forms for given user (if present).\n-     *\n-     * @param userKey user key\n-     * @return form (if present), otherwise null\n-     */\n-    List<UserRequestForm> getForms(String userKey);\n+    Pair<Integer, List<UserRequestForm>> getForms(\n+            String userKey, int page, int size, List<OrderByClause> orderByClauses);\n \n     /**\n      * Claim a form for a given object."},{"sha":"50b078be349f7241a515731c6128ac74e3561909","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableBpmnProcessManager.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableBpmnProcessManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableBpmnProcessManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableBpmnProcessManager.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -28,9 +28,10 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.io.IOUtils;\n-import org.apache.syncope.common.lib.to.BpmnProcessTO;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.common.lib.types.BpmnProcessFormat;\n import org.apache.syncope.core.flowable.support.DomainProcessEngine;\n+import org.apache.syncope.core.flowable.support.DropdownAwareJsonConverter;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.flowable.bpmn.converter.BpmnXMLConverter;\n@@ -73,11 +74,11 @@ protected Model getModel(final ProcessDefinition procDef) {\n     }\n \n     @Override\n-    public List<BpmnProcessTO> getProcesses() {\n+    public List<BpmnProcess> getProcesses() {\n         try {\n             return engine.getRepositoryService().createProcessDefinitionQuery().latestVersion().list().stream().\n                     map(procDef -> {\n-                        BpmnProcessTO defTO = new BpmnProcessTO();\n+                        BpmnProcess defTO = new BpmnProcess();\n                         defTO.setKey(procDef.getKey());\n                         defTO.setName(procDef.getName());\n \n@@ -163,7 +164,7 @@ public void importProcess(final String key, final BpmnProcessFormat format, fina\n                                 \"Could not find JSON node \" + BpmnJsonConverter.EDITOR_CHILD_SHAPES);\n                     }\n \n-                    BpmnModel bpmnModel = new BpmnJsonConverter().convertToBpmnModel(definitionNode);\n+                    BpmnModel bpmnModel = new DropdownAwareJsonConverter().convertToBpmnModel(definitionNode);\n                     deployment = FlowableDeployUtils.deployDefinition(\n                             engine,\n                             resourceName,"},{"sha":"cdf035d239efe94f2145cceb209660274cac490e","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java","status":"modified","additions":26,"deletions":24,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.flowable.support.DomainProcessEngine;\n@@ -33,7 +34,6 @@\n import org.flowable.common.engine.api.FlowableException;\n import org.flowable.engine.history.HistoricActivityInstance;\n import org.flowable.engine.impl.RuntimeServiceImpl;\n-import org.flowable.engine.impl.persistence.entity.ExecutionEntity;\n import org.flowable.engine.repository.ProcessDefinition;\n import org.flowable.engine.runtime.ProcessInstance;\n import org.flowable.task.api.Task;\n@@ -97,8 +97,17 @@ public static String getWFProcInstID(final DomainProcessEngine engine, final Str\n         return procInst == null ? null : procInst.getId();\n     }\n \n-    public static String getProcBusinessKey(final String processDefinitionId, final String userKey) {\n-        return processDefinitionId + \":\" + userKey;\n+    public static String getProcBusinessKey(final String procDefId, final String userKey) {\n+        return procDefId + \":\" + userKey;\n+    }\n+\n+    public static Pair<String, String> splitProcBusinessKey(final String procBusinessKey) {\n+        String[] split = procBusinessKey.split(\":\");\n+        if (split == null || split.length != 2) {\n+            throw new WorkflowException(new IllegalArgumentException(\"Unexpected business key: \" + procBusinessKey));\n+        }\n+\n+        return Pair.of(split[0], split[1]);\n     }\n \n     public static ProcessDefinition getLatestProcDefByKey(final DomainProcessEngine engine, final String key) {\n@@ -111,31 +120,24 @@ public static ProcessDefinition getLatestProcDefByKey(final DomainProcessEngine\n     }\n \n     public static Set<String> getPerformedTasks(\n-            final DomainProcessEngine engine, final String procInstID, final User user) {\n+            final DomainProcessEngine engine, final String procInstId, final User user) {\n \n         return engine.getHistoryService().createHistoricActivityInstanceQuery().\n-                executionId(procInstID).\n+                executionId(procInstId).\n                 list().stream().\n                 map(HistoricActivityInstance::getActivityId).\n                 collect(Collectors.toSet());\n     }\n \n-    public static void updateStatus(final DomainProcessEngine engine, final String procInstID, final User user) {\n-        List<Task> tasks = createTaskQuery(engine, false).processInstanceId(procInstID).list();\n+    public static void updateStatus(final DomainProcessEngine engine, final String procInstId, final User user) {\n+        List<Task> tasks = createTaskQuery(engine, false).processInstanceId(procInstId).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {\n             LOG.warn(\"While setting user status: unexpected task number ({})\", tasks.size());\n         } else {\n             user.setStatus(tasks.get(0).getTaskDefinitionKey());\n         }\n     }\n \n-    public static List<ProcessInstance> getProcessInstances(final DomainProcessEngine engine, final String userKey) {\n-        return engine.getRuntimeService().createNativeProcessInstanceQuery().\n-                sql(\"SELECT ID_,PROC_INST_ID_ FROM \" + engine.getManagementService().getTableName(ExecutionEntity.class)\n-                        + \" WHERE BUSINESS_KEY_ LIKE '\" + getProcBusinessKey(\"%\", userKey) + \"'\"\n-                        + \" AND PARENT_ID_ IS NULL\").list();\n-    }\n-\n     public static TaskQuery createTaskQuery(final DomainProcessEngine engine, final boolean onlyFormTasks) {\n         SyncopeTaskQueryImpl taskQuery = new SyncopeTaskQueryImpl(\n                 ((RuntimeServiceImpl) engine.getRuntimeService()).getCommandExecutor());\n@@ -145,10 +147,10 @@ public static TaskQuery createTaskQuery(final DomainProcessEngine engine, final\n         return taskQuery;\n     }\n \n-    public static String getFormTask(final DomainProcessEngine engine, final String procInstID) {\n+    public static String getFormTask(final DomainProcessEngine engine, final String procInstId) {\n         String result = null;\n \n-        List<Task> tasks = createTaskQuery(engine, true).processInstanceId(procInstID).list();\n+        List<Task> tasks = createTaskQuery(engine, true).processInstanceId(procInstId).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {\n             LOG.debug(\"While checking if form task: unexpected task number ({})\", tasks.size());\n         } else {\n@@ -162,7 +164,7 @@ public static String getFormTask(final DomainProcessEngine engine, final String\n      * Saves resources to be propagated and password for later - after form submission - propagation.\n      *\n      * @param engine Flowable engine\n-     * @param procInstID process instance id\n+     * @param procInstId process instance id\n      * @param user user JPA entity\n      * @param userTO user transfer object\n      * @param password password\n@@ -171,35 +173,35 @@ public static String getFormTask(final DomainProcessEngine engine, final String\n      */\n     public static void saveForFormSubmit(\n             final DomainProcessEngine engine,\n-            final String procInstID,\n+            final String procInstId,\n             final User user,\n             final UserTO userTO,\n             final String password,\n             final Boolean enabled,\n             final PropagationByResource propByRes) {\n \n-        String formTaskId = getFormTask(engine, procInstID);\n+        String formTaskId = getFormTask(engine, procInstId);\n         if (formTaskId == null) {\n             return;\n         }\n \n-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.USER_TO, userTO);\n+        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.USER_TO, userTO);\n \n         if (password == null) {\n             String encryptedPwd = engine.getRuntimeService().\n-                    getVariable(procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);\n+                    getVariable(procInstId, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);\n             if (encryptedPwd != null) {\n                 userTO.setPassword(decrypt(encryptedPwd));\n             }\n         } else {\n             userTO.setPassword(password);\n             engine.getRuntimeService().\n-                    setVariable(procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD, encrypt(password));\n+                    setVariable(procInstId, FlowableRuntimeUtils.ENCRYPTED_PWD, encrypt(password));\n         }\n \n-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.ENABLED, enabled);\n+        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.ENABLED, enabled);\n \n-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);\n+        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);\n         if (propByRes != null) {\n             propByRes.clear();\n         }"},{"sha":"45a834b0fd10bc04f7fb3aa37e06c6f7abd53c0d","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java","status":"modified","additions":221,"deletions":124,"changes":345,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -31,13 +31,14 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.UserRequestTO;\n+import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.UserRequestFormProperty;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UserRequestFormPropertyType;\n+import org.apache.syncope.core.flowable.api.DropdownValueProvider;\n import org.apache.syncope.core.flowable.api.WorkflowTaskManager;\n import org.apache.syncope.core.flowable.support.DomainProcessEngine;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -49,16 +50,21 @@\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.flowable.common.engine.api.FlowableException;\n+import org.flowable.common.engine.api.FlowableIllegalArgumentException;\n import org.flowable.engine.form.FormProperty;\n import org.flowable.engine.form.FormType;\n import org.flowable.engine.form.TaskFormData;\n import org.flowable.engine.history.HistoricActivityInstance;\n+import org.flowable.engine.impl.persistence.entity.ExecutionEntity;\n import org.flowable.engine.impl.persistence.entity.HistoricFormPropertyEntity;\n+import org.flowable.engine.runtime.NativeProcessInstanceQuery;\n import org.flowable.engine.runtime.ProcessInstance;\n+import org.flowable.engine.runtime.ProcessInstanceQuery;\n import org.flowable.task.api.Task;\n import org.flowable.task.api.TaskQuery;\n import org.flowable.task.api.history.HistoricTaskInstance;\n@@ -93,6 +99,93 @@ public class FlowableUserRequestHandler implements UserRequestHandler {\n     @Autowired\n     protected EntityFactory entityFactory;\n \n+    protected NativeProcessInstanceQuery createProcessInstanceQuery(final String userKey) {\n+        return engine.getRuntimeService().createNativeProcessInstanceQuery().\n+                sql(\"SELECT DISTINCT ID_,BUSINESS_KEY_,ACT_ID_ FROM \"\n+                        + engine.getManagementService().getTableName(ExecutionEntity.class)\n+                        + \" WHERE BUSINESS_KEY_ LIKE '\"\n+                        + FlowableRuntimeUtils.getProcBusinessKey(\"%\", userKey) + \"'\"\n+                        + \" AND BUSINESS_KEY_ NOT LIKE '\"\n+                        + FlowableRuntimeUtils.getProcBusinessKey(FlowableRuntimeUtils.WF_PROCESS_ID, \"%\") + \"'\"\n+                        + \" AND PARENT_ID_ IS NULL\");\n+    }\n+\n+    protected int countProcessInstances(final String userKey) {\n+        return (int) engine.getRuntimeService().createNativeProcessInstanceQuery().\n+                sql(\"SELECT COUNT(ID_) FROM \"\n+                        + engine.getManagementService().getTableName(ExecutionEntity.class)\n+                        + \" WHERE BUSINESS_KEY_ LIKE '\"\n+                        + FlowableRuntimeUtils.getProcBusinessKey(\"%\", userKey) + \"'\"\n+                        + \" AND BUSINESS_KEY_ NOT LIKE '\"\n+                        + FlowableRuntimeUtils.getProcBusinessKey(FlowableRuntimeUtils.WF_PROCESS_ID, \"%\") + \"'\"\n+                        + \" AND PARENT_ID_ IS NULL\").count();\n+    }\n+\n+    protected UserRequest getUserRequest(final ProcessInstance procInst) {\n+        Pair<String, String> split = FlowableRuntimeUtils.splitProcBusinessKey(procInst.getBusinessKey());\n+\n+        UserRequest userRequest = new UserRequest();\n+        userRequest.setBpmnProcess(split.getLeft());\n+        userRequest.setUser(split.getRight());\n+        userRequest.setExecutionId(procInst.getId());\n+        userRequest.setActivityId(procInst.getActivityId());\n+        return userRequest;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public Pair<Integer, List<UserRequest>> getUserRequests(\n+            final String userKey,\n+            final int page,\n+            final int size,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        Integer count = null;\n+        List<UserRequest> result = null;\n+        if (userKey == null) {\n+            ProcessInstanceQuery query = engine.getRuntimeService().createProcessInstanceQuery().active();\n+            for (OrderByClause clause : orderByClauses) {\n+                boolean sorted = true;\n+                switch (clause.getField().trim()) {\n+                    case \"processDefinitionId\":\n+                        query.orderByProcessDefinitionId();\n+                        break;\n+\n+                    case \"processDefinitionKey\":\n+                        query.orderByProcessDefinitionKey();\n+                        break;\n+\n+                    case \"processInstanceId\":\n+                        query.orderByProcessInstanceId();\n+                        break;\n+\n+                    default:\n+                        LOG.warn(\"User request sort request by {}: unsupported, ignoring\", clause.getField().trim());\n+                        sorted = false;\n+                }\n+                if (sorted) {\n+                    if (clause.getDirection() == OrderByClause.Direction.ASC) {\n+                        query.asc();\n+                    } else {\n+                        query.desc();\n+                    }\n+                }\n+\n+                count = (int) query.count();\n+                result = query.listPage(size * (page <= 0 ? 0 : page - 1), size).stream().\n+                        map(procInst -> getUserRequest(procInst)).\n+                        collect(Collectors.toList());\n+            }\n+        } else {\n+            count = countProcessInstances(userKey);\n+            result = createProcessInstanceQuery(userKey).listPage(size * (page <= 0 ? 0 : page - 1), size).stream().\n+                    map(procInst -> getUserRequest(procInst)).\n+                    collect(Collectors.toList());\n+        }\n+\n+        return Pair.of(count, result);\n+    }\n+\n     protected User lazyLoad(final User user) {\n         // using BeanUtils to access all user's properties and trigger lazy loading - we are about to\n         // serialize a User instance for availability within workflow tasks, and this breaks transactions\n@@ -101,8 +194,8 @@ protected User lazyLoad(final User user) {\n     }\n \n     @Override\n-    public UserRequestTO start(final String bpmnProcess, final User user) {\n-        Map<String, Object> variables = new HashMap<>(2);\n+    public UserRequest start(final String bpmnProcess, final User user) {\n+        Map<String, Object> variables = new HashMap<>();\n         variables.put(FlowableRuntimeUtils.WF_EXECUTOR, AuthContextUtils.getUsername());\n         variables.put(FlowableRuntimeUtils.USER, lazyLoad(user));\n         variables.put(FlowableRuntimeUtils.USER_TO, dataBinder.getUserTO(user, true));\n@@ -118,12 +211,8 @@ public UserRequestTO start(final String bpmnProcess, final User user) {\n                 procInst.getProcessInstanceId(),\n                 FlowableRuntimeUtils.getProcBusinessKey(bpmnProcess, user.getKey()));\n \n-        UserRequestTO userRequestTO = new UserRequestTO();\n-        userRequestTO.setProcessInstanceId(procInst.getProcessInstanceId());\n-        userRequestTO.setExecutionId(procInst.getId());\n-        userRequestTO.setBpmnProcess(bpmnProcess);\n-        userRequestTO.setUser(user.getKey());\n-        return userRequestTO;\n+        return getUserRequest(engine.getRuntimeService().createProcessInstanceQuery().\n+                processInstanceId(procInst.getProcessInstanceId()).singleResult());\n     }\n \n     @Override\n@@ -132,7 +221,11 @@ public Pair<ProcessInstance, String> parse(final String executionId) {\n         try {\n             procInst = engine.getRuntimeService().\n                     createProcessInstanceQuery().processInstanceId(executionId).singleResult();\n+            if (procInst == null) {\n+                throw new FlowableIllegalArgumentException(\"ProcessInstance with id \" + executionId);\n+            }\n         } catch (FlowableException e) {\n+            LOG.error(\"Could find execution ProcessInstance with id {}\", executionId, e);\n             throw new NotFoundException(\"User request execution with id \" + executionId);\n         }\n \n@@ -163,7 +256,7 @@ public void cancelByProcessDefinition(final String processDefinitionId) {\n     public void cancelByUser(final AnyDeletedEvent event) {\n         if (AuthContextUtils.getDomain().equals(event.getDomain()) && event.getAnyTypeKind() == AnyTypeKind.USER) {\n             String username = event.getAnyName();\n-            FlowableRuntimeUtils.getProcessInstances(engine, event.getAnyKey()).\n+            createProcessInstanceQuery(event.getAnyKey()).list().\n                     forEach(procInst -> {\n                         engine.getRuntimeService().deleteProcessInstance(\n                                 procInst.getId(), \"Cascade Delete user \" + username);\n@@ -192,6 +285,10 @@ protected UserRequestFormPropertyType fromFlowableFormType(final FormType flowab\n                     result = UserRequestFormPropertyType.Boolean;\n                     break;\n \n+                case \"dropdown\":\n+                    result = UserRequestFormPropertyType.Dropdown;\n+                    break;\n+\n                 case \"string\":\n                 default:\n                     break;\n@@ -201,19 +298,19 @@ protected UserRequestFormPropertyType fromFlowableFormType(final FormType flowab\n         return result;\n     }\n \n-    protected UserRequestForm getFormTO(final Task task) {\n-        return getFormTO(task, engine.getFormService().getTaskFormData(task.getId()));\n+    protected UserRequestForm getForm(final Task task) {\n+        return FlowableUserRequestHandler.this.getForm(task, engine.getFormService().getTaskFormData(task.getId()));\n     }\n \n-    protected UserRequestForm getFormTO(final Task task, final TaskFormData fd) {\n+    protected UserRequestForm getForm(final Task task, final TaskFormData fd) {\n         UserRequestForm formTO =\n-                getFormTO(task.getProcessInstanceId(), task.getId(), fd.getFormKey(), fd.getFormProperties());\n+                getForm(task.getProcessInstanceId(), task.getId(), fd.getFormKey(), fd.getFormProperties());\n         BeanUtils.copyProperties(task, formTO);\n \n         return formTO;\n     }\n \n-    protected UserRequestForm getFormTO(final HistoricTaskInstance task) {\n+    protected UserRequestForm getForm(final HistoricTaskInstance task) {\n         List<HistoricFormPropertyEntity> props = engine.getHistoryService().\n                 createHistoricDetailQuery().taskId(task.getId()).list().stream().\n                 filter(HistoricFormPropertyEntity.class::isInstance).\n@@ -244,26 +341,29 @@ protected String getUserKey(final String procInstId) {\n     }\n \n     protected UserRequestForm getHistoricFormTO(\n-            final String procInstID,\n+            final String procInstId,\n             final String taskId,\n             final String formKey,\n             final List<HistoricFormPropertyEntity> props) {\n \n         UserRequestForm formTO = new UserRequestForm();\n \n-        User user = userDAO.find(getUserKey(procInstID));\n+        formTO.setBpmnProcess(engine.getRuntimeService().createProcessInstanceQuery().\n+                processInstanceId(procInstId).singleResult().getProcessDefinitionKey());\n+\n+        User user = userDAO.find(getUserKey(procInstId));\n         if (user == null) {\n-            throw new NotFoundException(\"User for process instance id \" + procInstID);\n+            throw new NotFoundException(\"User for process instance id \" + procInstId);\n         }\n         formTO.setUsername(user.getUsername());\n \n         formTO.setTaskId(taskId);\n         formTO.setFormKey(formKey);\n \n         formTO.setUserTO(engine.getRuntimeService().\n-                getVariable(procInstID, FlowableRuntimeUtils.USER_TO, UserTO.class));\n+                getVariable(procInstId, FlowableRuntimeUtils.USER_TO, UserTO.class));\n         formTO.setUserPatch(engine.getRuntimeService().\n-                getVariable(procInstID, FlowableRuntimeUtils.USER_PATCH, UserPatch.class));\n+                getVariable(procInstId, FlowableRuntimeUtils.USER_PATCH, UserPatch.class));\n \n         formTO.getProperties().addAll(props.stream().map(prop -> {\n             UserRequestFormProperty propertyTO = new UserRequestFormProperty();\n@@ -277,37 +377,58 @@ protected UserRequestForm getHistoricFormTO(\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected UserRequestForm getFormTO(\n-            final String procInstID,\n+    protected UserRequestForm getForm(\n+            final String procInstId,\n             final String taskId,\n             final String formKey,\n             final List<FormProperty> props) {\n \n         UserRequestForm formTO = new UserRequestForm();\n \n-        User user = userDAO.find(getUserKey(procInstID));\n+        formTO.setBpmnProcess(engine.getRuntimeService().createProcessInstanceQuery().\n+                processInstanceId(procInstId).singleResult().getProcessDefinitionKey());\n+\n+        User user = userDAO.find(getUserKey(procInstId));\n         if (user == null) {\n-            throw new NotFoundException(\"User for process instance id \" + procInstID);\n+            throw new NotFoundException(\"User for process instance id \" + procInstId);\n         }\n         formTO.setUsername(user.getUsername());\n \n+        formTO.setExecutionId(procInstId);\n         formTO.setTaskId(taskId);\n         formTO.setFormKey(formKey);\n \n         formTO.setUserTO(engine.getRuntimeService().\n-                getVariable(procInstID, FlowableRuntimeUtils.USER_TO, UserTO.class));\n+                getVariable(procInstId, FlowableRuntimeUtils.USER_TO, UserTO.class));\n         formTO.setUserPatch(engine.getRuntimeService().\n-                getVariable(procInstID, FlowableRuntimeUtils.USER_PATCH, UserPatch.class));\n+                getVariable(procInstId, FlowableRuntimeUtils.USER_PATCH, UserPatch.class));\n \n         formTO.getProperties().addAll(props.stream().map(fProp -> {\n             UserRequestFormProperty propertyTO = new UserRequestFormProperty();\n             BeanUtils.copyProperties(fProp, propertyTO, PROPERTY_IGNORE_PROPS);\n             propertyTO.setType(fromFlowableFormType(fProp.getType()));\n-            if (propertyTO.getType() == UserRequestFormPropertyType.Date) {\n-                propertyTO.setDatePattern((String) fProp.getType().getInformation(\"datePattern\"));\n-            }\n-            if (propertyTO.getType() == UserRequestFormPropertyType.Enum) {\n-                propertyTO.getEnumValues().putAll((Map<String, String>) fProp.getType().getInformation(\"values\"));\n+            switch (propertyTO.getType()) {\n+                case Date:\n+                    propertyTO.setDatePattern((String) fProp.getType().getInformation(\"datePattern\"));\n+                    break;\n+\n+                case Enum:\n+                    propertyTO.getEnumValues().putAll((Map<String, String>) fProp.getType().getInformation(\"values\"));\n+                    break;\n+\n+                case Dropdown:\n+                    String valueProviderBean = (String) fProp.getType().getInformation(DropdownValueProvider.NAME);\n+                    try {\n+                        DropdownValueProvider valueProvider = ApplicationContextProvider.getApplicationContext().\n+                                getBean(valueProviderBean, DropdownValueProvider.class);\n+                        propertyTO.getDropdownValues().putAll(valueProvider.getValues());\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not find bean {} of type {} for form property {}\",\n+                                valueProviderBean, DropdownValueProvider.class.getName(), propertyTO.getId(), e);\n+                    }\n+                    break;\n+\n+                default:\n             }\n             return propertyTO;\n         }).collect(Collectors.toList()));\n@@ -318,26 +439,28 @@ protected UserRequestForm getFormTO(\n     @Transactional(readOnly = true)\n     @Override\n     public Pair<Integer, List<UserRequestForm>> getForms(\n-            final int page, final int size, final List<OrderByClause> orderByClauses) {\n+            final String userKey,\n+            final int page,\n+            final int size,\n+            final List<OrderByClause> orderByClauses) {\n \n-        Pair<Integer, List<UserRequestForm>> forms = null;\n+        Pair<Integer, List<UserRequestForm>> forms;\n \n-        TaskQuery formTaskQuery = FlowableRuntimeUtils.createTaskQuery(engine, true);\n+        TaskQuery query = FlowableRuntimeUtils.createTaskQuery(engine, true);\n+        if (userKey != null) {\n+            query.processInstanceBusinessKeyLike(FlowableRuntimeUtils.getProcBusinessKey(\"%\", userKey));\n+        }\n \n         String authUser = AuthContextUtils.getUsername();\n         if (adminUser.equals(authUser)) {\n-            forms = getForms(formTaskQuery, page, size, orderByClauses);\n+            forms = getForms(query, page, size, orderByClauses);\n         } else {\n             User user = userDAO.findByUsername(authUser);\n-            if (user == null) {\n-                throw new NotFoundException(\"Syncope User \" + authUser);\n-            }\n-\n-            forms = getForms(formTaskQuery.taskCandidateOrAssigned(user.getUsername()), page, size, orderByClauses);\n+            forms = getForms(query.taskCandidateOrAssigned(user.getUsername()), page, size, orderByClauses);\n \n             List<String> candidateGroups = new ArrayList<>(userDAO.findAllGroupNames(user));\n             if (!candidateGroups.isEmpty()) {\n-                forms = getForms(formTaskQuery.taskCandidateGroupIn(candidateGroups), page, size, orderByClauses);\n+                forms = getForms(query.taskCandidateGroupIn(candidateGroups), page, size, orderByClauses);\n             }\n         }\n \n@@ -349,75 +472,56 @@ public Pair<Integer, List<UserRequestForm>> getForms(\n     protected Pair<Integer, List<UserRequestForm>> getForms(\n             final TaskQuery query, final int page, final int size, final List<OrderByClause> orderByClauses) {\n \n-        TaskQuery sortedQuery = query;\n         for (OrderByClause clause : orderByClauses) {\n-            boolean ack = true;\n+            boolean sorted = true;\n             switch (clause.getField().trim()) {\n+                case \"bpmnProcess\":\n+                    query.orderByProcessDefinitionId();\n+                    break;\n+\n+                case \"executionId\":\n+                    query.orderByExecutionId();\n+                    break;\n+\n                 case \"taskId\":\n-                    sortedQuery = sortedQuery.orderByTaskId();\n+                    query.orderByTaskId();\n                     break;\n \n                 case \"createTime\":\n-                    sortedQuery = sortedQuery.orderByTaskCreateTime();\n+                    query.orderByTaskCreateTime();\n                     break;\n \n                 case \"dueDate\":\n-                    sortedQuery = sortedQuery.orderByTaskDueDate();\n+                    query.orderByTaskDueDate();\n                     break;\n \n                 case \"owner\":\n-                    sortedQuery = sortedQuery.orderByTaskOwner();\n+                    query.orderByTaskOwner();\n                     break;\n \n                 default:\n                     LOG.warn(\"Form sort request by {}: unsupported, ignoring\", clause.getField().trim());\n-                    ack = false;\n+                    sorted = false;\n             }\n-            if (ack) {\n-                sortedQuery = clause.getDirection() == OrderByClause.Direction.ASC\n-                        ? sortedQuery.asc()\n-                        : sortedQuery.desc();\n+            if (sorted) {\n+                if (clause.getDirection() == OrderByClause.Direction.ASC) {\n+                    query.asc();\n+                } else {\n+                    query.desc();\n+                }\n             }\n         }\n \n-        List<UserRequestForm> result = sortedQuery.listPage(size * (page <= 0 ? 0 : page - 1), size).stream().\n+        List<UserRequestForm> result = query.listPage(size * (page <= 0 ? 0 : page - 1), size).stream().\n                 map(task -> task instanceof HistoricTaskInstance\n-                ? getFormTO((HistoricTaskInstance) task) : getFormTO(task)).\n+                ? FlowableUserRequestHandler.this.getForm((HistoricTaskInstance) task)\n+                : FlowableUserRequestHandler.this.getForm(task)).\n                 collect(Collectors.toList());\n \n         return Pair.of((int) query.count(), result);\n     }\n \n-    @Override\n-    public List<UserRequestForm> getForms(final String userKey) {\n-        List<UserRequestForm> result = new ArrayList<>();\n-        FlowableRuntimeUtils.getProcessInstances(engine, userKey).forEach(procInst -> {\n-            Task task;\n-            try {\n-                task = FlowableRuntimeUtils.createTaskQuery(engine, true).\n-                        processInstanceId(procInst.getProcessInstanceId()).singleResult();\n-            } catch (FlowableException e) {\n-                throw new WorkflowException(\"While reading form for process instance \"\n-                        + procInst.getProcessInstanceId(), e);\n-            }\n-\n-            if (task != null) {\n-                TaskFormData formData;\n-                try {\n-                    formData = engine.getFormService().getTaskFormData(task.getId());\n-                } catch (FlowableException e) {\n-                    throw new WorkflowException(\"Error while getting form data for task \" + task.getId(), e);\n-                }\n-                if (formData != null && !formData.getFormProperties().isEmpty()) {\n-                    result.add(getFormTO(task, formData));\n-                }\n-            }\n-        });\n-\n-        return result;\n-    }\n-\n-    protected Pair<Task, TaskFormData> checkTask(final String taskId, final String authUser) {\n+    protected Pair<Task, TaskFormData> parseTask(final String taskId) {\n         Task task;\n         try {\n             task = FlowableRuntimeUtils.createTaskQuery(engine, true).taskId(taskId).singleResult();\n@@ -435,27 +539,20 @@ protected Pair<Task, TaskFormData> checkTask(final String taskId, final String a\n             throw new NotFoundException(\"Form for Flowable Task \" + taskId, e);\n         }\n \n-        if (!adminUser.equals(authUser)) {\n-            User user = userDAO.findByUsername(authUser);\n-            if (user == null) {\n-                throw new NotFoundException(\"Syncope User \" + authUser);\n-            }\n-        }\n-\n         return Pair.of(task, formData);\n     }\n \n     @Override\n     public UserRequestForm claimForm(final String taskId) {\n-        String authUser = AuthContextUtils.getUsername();\n-        Pair<Task, TaskFormData> checked = checkTask(taskId, authUser);\n+        Pair<Task, TaskFormData> parsed = parseTask(taskId);\n \n+        String authUser = AuthContextUtils.getUsername();\n         if (!adminUser.equals(authUser)) {\n             List<Task> tasksForUser = FlowableRuntimeUtils.createTaskQuery(engine, true).\n-                    taskId(taskId).taskCandidateUser(authUser).list();\n+                    taskId(taskId).taskCandidateOrAssigned(authUser).list();\n             if (tasksForUser.isEmpty()) {\n                 throw new WorkflowException(\n-                        new IllegalArgumentException(authUser + \" is not candidate for task \" + taskId));\n+                        new IllegalArgumentException(authUser + \" is not candidate nor assignee of task \" + taskId));\n             }\n         }\n \n@@ -467,7 +564,7 @@ public UserRequestForm claimForm(final String taskId) {\n             throw new WorkflowException(\"While reading task \" + taskId, e);\n         }\n \n-        return getFormTO(task, checked.getRight());\n+        return FlowableUserRequestHandler.this.getForm(task, parsed.getRight());\n     }\n \n     private Map<String, String> getPropertiesForSubmit(final UserRequestForm form) {\n@@ -482,36 +579,36 @@ private Map<String, String> getPropertiesForSubmit(final UserRequestForm form) {\n \n     @Override\n     public WorkflowResult<UserPatch> submitForm(final UserRequestForm form) {\n-        String authUser = AuthContextUtils.getUsername();\n-        Pair<Task, TaskFormData> checked = checkTask(form.getTaskId(), authUser);\n+        Pair<Task, TaskFormData> parsed = parseTask(form.getTaskId());\n \n-        if (!checked.getLeft().getOwner().equals(authUser)) {\n+        String authUser = AuthContextUtils.getUsername();\n+        if (!parsed.getLeft().getOwner().equals(authUser)) {\n             throw new WorkflowException(new IllegalArgumentException(\"Task \" + form.getTaskId() + \" assigned to \"\n-                    + checked.getLeft().getOwner() + \" but submitted by \" + authUser));\n+                    + parsed.getLeft().getOwner() + \" but submitted by \" + authUser));\n         }\n \n-        String procInstID = checked.getLeft().getProcessInstanceId();\n+        String procInstId = parsed.getLeft().getProcessInstanceId();\n \n-        User user = userDAO.find(getUserKey(procInstID));\n+        User user = userDAO.find(getUserKey(procInstId));\n         if (user == null) {\n-            throw new NotFoundException(\"User with key \" + getUserKey(procInstID));\n+            throw new NotFoundException(\"User with key \" + getUserKey(procInstId));\n         }\n \n-        Set<String> preTasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInstID, user);\n+        Set<String> preTasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInstId, user);\n \n-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.TASK, \"submit\");\n-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.FORM_SUBMITTER, authUser);\n-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.USER, lazyLoad(user));\n+        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.TASK, \"submit\");\n+        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.FORM_SUBMITTER, authUser);\n+        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.USER, lazyLoad(user));\n         try {\n             engine.getFormService().submitTaskFormData(form.getTaskId(), getPropertiesForSubmit(form));\n         } catch (FlowableException e) {\n             FlowableRuntimeUtils.throwException(e, \"While submitting form for task \" + form.getTaskId());\n         }\n-        Set<String> postTasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInstID, user);\n+        Set<String> postTasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInstId, user);\n         postTasks.removeAll(preTasks);\n         postTasks.add(form.getTaskId());\n-        if (procInstID.equals(FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey()))) {\n-            FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n+        if (procInstId.equals(FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey()))) {\n+            FlowableRuntimeUtils.updateStatus(engine, procInstId, user);\n         }\n \n         user = userDAO.save(user);\n@@ -521,43 +618,43 @@ public WorkflowResult<UserPatch> submitForm(final UserRequestForm form) {\n         PropagationByResource propByRes = null;\n \n         ProcessInstance afterSubmitPI = engine.getRuntimeService().\n-                createProcessInstanceQuery().processInstanceId(procInstID).singleResult();\n+                createProcessInstanceQuery().processInstanceId(procInstId).singleResult();\n         if (afterSubmitPI != null) {\n-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.TASK);\n-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.FORM_SUBMITTER);\n-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);\n-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_TO);\n+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.TASK);\n+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.FORM_SUBMITTER);\n+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.USER);\n+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.USER_TO);\n \n             // see if there is any propagation to be done\n             propByRes = engine.getRuntimeService().\n-                    getVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE);\n+                    getVariable(procInstId, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.PROP_BY_RESOURCE);\n \n             // fetch - if available - the encrypted password\n             String encryptedPwd = engine.getRuntimeService().\n-                    getVariable(procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);\n-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD);\n+                    getVariable(procInstId, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);\n+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.ENCRYPTED_PWD);\n             if (StringUtils.isNotBlank(encryptedPwd)) {\n                 clearPassword = FlowableRuntimeUtils.decrypt(encryptedPwd);\n             }\n \n             Boolean enabled = engine.getRuntimeService().\n-                    getVariable(procInstID, FlowableRuntimeUtils.ENABLED, Boolean.class);\n-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.ENABLED);\n+                    getVariable(procInstId, FlowableRuntimeUtils.ENABLED, Boolean.class);\n+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.ENABLED);\n \n             // supports approval chains\n             FlowableRuntimeUtils.saveForFormSubmit(\n                     engine,\n-                    procInstID,\n+                    procInstId,\n                     user,\n                     dataBinder.getUserTO(user, true),\n                     clearPassword,\n                     enabled,\n                     propByRes);\n \n             userPatch = engine.getRuntimeService().\n-                    getVariable(procInstID, FlowableRuntimeUtils.USER_PATCH, UserPatch.class);\n-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_PATCH);\n+                    getVariable(procInstId, FlowableRuntimeUtils.USER_PATCH, UserPatch.class);\n+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.USER_PATCH);\n         }\n         if (userPatch == null) {\n             userPatch = new UserPatch();"},{"sha":"de2bbfe581030e19736e1b9d24dffac619d36ef8","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngineFactoryBean.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -18,13 +18,16 @@\n  */\n package org.apache.syncope.core.flowable.support;\n \n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import javax.sql.DataSource;\n import org.apache.commons.lang3.StringUtils;\n import org.flowable.engine.ProcessEngine;\n import org.flowable.common.engine.impl.cfg.SpringBeanFactoryProxyMap;\n import org.flowable.common.engine.impl.interceptor.EngineConfigurationConstants;\n+import org.flowable.engine.form.AbstractFormType;\n import org.flowable.engine.impl.util.EngineServiceUtil;\n import org.flowable.idm.spring.SpringIdmEngineConfiguration;\n import org.flowable.spring.SpringExpressionManager;\n@@ -81,6 +84,9 @@ public DomainProcessEngine getObject() throws Exception {\n                                 EngineConfigurationConstants.KEY_IDM_ENGINE_CONFIG,\n                                 ctx.getBean(SpringIdmEngineConfiguration.class));\n                     }\n+                    List<AbstractFormType> customFormTypes = new ArrayList<>();\n+                    customFormTypes.add(new DropdownFormType(null));\n+                    conf.setCustomFormTypes(customFormTypes);\n \n                     engines.put(domain, conf.buildProcessEngine());\n                 }"},{"sha":"ad29e17accd297a70afbbce55f7a74412724dfd4","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownAwareJsonConverter.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDropdownAwareJsonConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDropdownAwareJsonConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDropdownAwareJsonConverter.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.flowable.support;\n+\n+import org.flowable.bpmn.model.UserTask;\n+import org.flowable.editor.constants.StencilConstants;\n+import org.flowable.editor.language.json.converter.BpmnJsonConverter;\n+\n+public class DropdownAwareJsonConverter extends BpmnJsonConverter {\n+\n+    public DropdownAwareJsonConverter() {\n+        convertersToBpmnMap.put(StencilConstants.STENCIL_TASK_USER, DropdownAwareUserTaskJsonConverter.class);\n+        convertersToJsonMap.put(UserTask.class, DropdownAwareUserTaskJsonConverter.class);\n+    }\n+}"},{"sha":"838201ccbc0420b51812350cff1733a2fdd50000","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownAwareUserTaskJsonConverter.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDropdownAwareUserTaskJsonConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDropdownAwareUserTaskJsonConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDropdownAwareUserTaskJsonConverter.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.flowable.support;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.flowable.bpmn.model.BaseElement;\n+import org.flowable.bpmn.model.FormProperty;\n+import org.flowable.bpmn.model.FormValue;\n+import org.flowable.bpmn.model.StartEvent;\n+import org.flowable.bpmn.model.UserTask;\n+import org.flowable.editor.language.json.converter.BpmnJsonConverterUtil;\n+import org.flowable.editor.language.json.converter.UserTaskJsonConverter;\n+\n+public class DropdownAwareUserTaskJsonConverter extends UserTaskJsonConverter {\n+\n+    @Override\n+    protected void convertJsonToFormProperties(final JsonNode objectNode, final BaseElement element) {\n+        JsonNode formPropertiesNode = getProperty(PROPERTY_FORM_PROPERTIES, objectNode);\n+        if (formPropertiesNode != null) {\n+            formPropertiesNode = BpmnJsonConverterUtil.validateIfNodeIsTextual(formPropertiesNode);\n+            JsonNode propertiesArray = formPropertiesNode.get(\"formProperties\");\n+            if (propertiesArray != null) {\n+                for (JsonNode formNode : propertiesArray) {\n+                    JsonNode formIdNode = formNode.get(PROPERTY_FORM_ID);\n+                    if (formIdNode != null && StringUtils.isNotEmpty(formIdNode.asText())) {\n+\n+                        FormProperty formProperty = new FormProperty();\n+                        formProperty.setId(formIdNode.asText());\n+                        formProperty.setName(getValueAsString(PROPERTY_FORM_NAME, formNode));\n+                        formProperty.setType(getValueAsString(PROPERTY_FORM_TYPE, formNode));\n+                        formProperty.setExpression(getValueAsString(PROPERTY_FORM_EXPRESSION, formNode));\n+                        formProperty.setVariable(getValueAsString(PROPERTY_FORM_VARIABLE, formNode));\n+\n+                        if (\"date\".equalsIgnoreCase(formProperty.getType())) {\n+                            formProperty.setDatePattern(getValueAsString(PROPERTY_FORM_DATE_PATTERN, formNode));\n+\n+                        } else if (\"enum\".equalsIgnoreCase(formProperty.getType())\n+                                || \"dropdown\".equalsIgnoreCase(formProperty.getType())) {\n+\n+                            JsonNode enumValuesNode = formNode.get(PROPERTY_FORM_ENUM_VALUES);\n+                            if (enumValuesNode != null) {\n+                                List<FormValue> formValueList = new ArrayList<>();\n+                                for (JsonNode enumNode : enumValuesNode) {\n+                                    if (enumNode.get(PROPERTY_FORM_ENUM_VALUES_ID) != null && !enumNode.get(\n+                                            PROPERTY_FORM_ENUM_VALUES_ID).isNull() && enumNode.get(\n+                                                    PROPERTY_FORM_ENUM_VALUES_NAME) != null\n+                                            && !enumNode.get(PROPERTY_FORM_ENUM_VALUES_NAME).isNull()) {\n+\n+                                        FormValue formValue = new FormValue();\n+                                        formValue.setId(enumNode.get(PROPERTY_FORM_ENUM_VALUES_ID).asText());\n+                                        formValue.setName(enumNode.get(PROPERTY_FORM_ENUM_VALUES_NAME).asText());\n+                                        formValueList.add(formValue);\n+\n+                                    } else if (enumNode.get(\"value\") != null && !enumNode.get(\"value\").isNull()) {\n+                                        FormValue formValue = new FormValue();\n+                                        formValue.setId(enumNode.get(\"value\").asText());\n+                                        formValue.setName(enumNode.get(\"value\").asText());\n+                                        formValueList.add(formValue);\n+                                    }\n+                                }\n+                                formProperty.setFormValues(formValueList);\n+                            }\n+                        }\n+\n+                        formProperty.setRequired(getValueAsBoolean(PROPERTY_FORM_REQUIRED, formNode));\n+                        formProperty.setReadable(getValueAsBoolean(PROPERTY_FORM_READABLE, formNode));\n+                        formProperty.setWriteable(getValueAsBoolean(PROPERTY_FORM_WRITABLE, formNode));\n+\n+                        if (element instanceof StartEvent) {\n+                            ((StartEvent) element).getFormProperties().add(formProperty);\n+                        } else if (element instanceof UserTask) {\n+                            ((UserTask) element).getFormProperties().add(formProperty);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"},{"sha":"6c612f6855163020bcd47dbb2b67d78b10b7fafc","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownFormType.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDropdownFormType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDropdownFormType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDropdownFormType.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.flowable.support;\n+\n+import org.flowable.engine.form.AbstractFormType;\n+\n+/**\n+ * Extension to predefined Flowable form types relying on the provided\n+ * {@link org.apache.syncope.core.flowable.api.DropdownValueProvider} bean to populate values.\n+ */\n+public class DropdownFormType extends AbstractFormType {\n+\n+    private static final long serialVersionUID = -3549337216346168946L;\n+\n+    protected final String dropdownValueProvider;\n+\n+    public DropdownFormType(final String dropdownValueProvider) {\n+        this.dropdownValueProvider = dropdownValueProvider;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"dropdown\";\n+    }\n+\n+    @Override\n+    public Object getInformation(final String key) {\n+        if (key.equals(\"dropdownValueProvider\")) {\n+            return dropdownValueProvider;\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Object convertFormValueToModelValue(final String propertyValue) {\n+        return propertyValue;\n+    }\n+\n+    @Override\n+    public String convertModelValueToFormValue(final Object modelValue) {\n+        return modelValue == null ? null : modelValue.toString();\n+    }\n+}"},{"sha":"9f6e75112384e2037f185588b7e927e3cd20613b","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeFormHandlerHelper.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeFormHandlerHelper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeFormHandlerHelper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeFormHandlerHelper.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.flowable.support;\n+\n+import org.flowable.bpmn.model.FlowElement;\n+import org.flowable.bpmn.model.UserTask;\n+import org.flowable.bpmn.model.Process;\n+import org.flowable.engine.impl.form.FormHandlerHelper;\n+import org.flowable.engine.impl.form.TaskFormHandler;\n+import org.flowable.engine.impl.persistence.entity.DeploymentEntity;\n+import org.flowable.engine.impl.util.CommandContextUtil;\n+import org.flowable.engine.impl.util.ProcessDefinitionUtil;\n+import org.flowable.engine.repository.ProcessDefinition;\n+\n+/**\n+ * Used to inject {@link SyncopeTaskFormHandler} rather than\n+ * {@link org.flowable.engine.impl.form.DefaultTaskFormHandler}.\n+ */\n+public class SyncopeFormHandlerHelper extends FormHandlerHelper {\n+\n+    @Override\n+    public TaskFormHandler getTaskFormHandlder(final String procDefId, final String taskId) {\n+        Process process = ProcessDefinitionUtil.getProcess(procDefId);\n+        FlowElement flowElement = process.getFlowElement(taskId, true);\n+        if (flowElement instanceof UserTask) {\n+            UserTask userTask = (UserTask) flowElement;\n+\n+            ProcessDefinition processDefinitionEntity = ProcessDefinitionUtil.getProcessDefinition(procDefId);\n+            DeploymentEntity deploymentEntity = CommandContextUtil.getProcessEngineConfiguration().\n+                    getDeploymentEntityManager().findById(processDefinitionEntity.getDeploymentId());\n+\n+            TaskFormHandler taskFormHandler = new SyncopeTaskFormHandler();\n+            taskFormHandler.parseConfiguration(\n+                    userTask.getFormProperties(), userTask.getFormKey(), deploymentEntity, processDefinitionEntity);\n+            return taskFormHandler;\n+        }\n+\n+        return null;\n+    }\n+}"},{"sha":"69c5e5009f3c8197a32347f94bd2924e3381ff33","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeTaskFormHandler.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeTaskFormHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeTaskFormHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeTaskFormHandler.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.flowable.support;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.flowable.api.DropdownValueProvider;\n+import org.flowable.bpmn.model.FormProperty;\n+import org.flowable.common.engine.api.delegate.Expression;\n+import org.flowable.common.engine.impl.el.ExpressionManager;\n+import org.flowable.engine.form.AbstractFormType;\n+import org.flowable.engine.impl.form.DefaultTaskFormHandler;\n+import org.flowable.engine.impl.form.FormPropertyHandler;\n+import org.flowable.engine.impl.form.FormTypes;\n+import org.flowable.engine.impl.persistence.entity.DeploymentEntity;\n+import org.flowable.engine.impl.util.CommandContextUtil;\n+import org.flowable.engine.repository.ProcessDefinition;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Extends {@link DefaultTaskFormHandler} with purpose of supporting more form types than Flowable's default.\n+ */\n+public class SyncopeTaskFormHandler extends DefaultTaskFormHandler {\n+\n+    private static final long serialVersionUID = -5271243544388455797L;\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeTaskFormHandler.class);\n+\n+    protected Optional<AbstractFormType> parseFormPropertyType(\n+            final FormProperty formProperty, final ExpressionManager expressionManager) {\n+\n+        AbstractFormType formType = null;\n+\n+        switch (formProperty.getType()) {\n+            case \"dropdown\":\n+                if (formProperty.getFormValues().isEmpty()\n+                        || !DropdownValueProvider.NAME.equals(formProperty.getFormValues().get(0).getId())) {\n+\n+                    LOG.warn(\"A single value with id '\" + DropdownValueProvider.NAME + \"' was expected, ignoring\");\n+                } else {\n+                    formType = new DropdownFormType(formProperty.getFormValues().get(0).getName());\n+                }\n+                break;\n+\n+            default:\n+        }\n+\n+        return Optional.ofNullable(formType);\n+    }\n+\n+    @Override\n+    public void parseConfiguration(\n+            final List<FormProperty> formProperties,\n+            final String formKey,\n+            final DeploymentEntity deployment,\n+            final ProcessDefinition processDefinition) {\n+\n+        this.deploymentId = deployment.getId();\n+\n+        ExpressionManager expressionManager = CommandContextUtil.getProcessEngineConfiguration().getExpressionManager();\n+\n+        if (StringUtils.isNotEmpty(formKey)) {\n+            this.formKey = expressionManager.createExpression(formKey);\n+        }\n+\n+        FormTypes formTypes = CommandContextUtil.getProcessEngineConfiguration().getFormTypes();\n+\n+        formProperties.forEach(formProperty -> {\n+            FormPropertyHandler formPropertyHandler = new FormPropertyHandler();\n+            formPropertyHandler.setId(formProperty.getId());\n+            formPropertyHandler.setName(formProperty.getName());\n+\n+            AbstractFormType type = parseFormPropertyType(formProperty, expressionManager).\n+                    orElse(formTypes.parseFormPropertyType(formProperty));\n+            formPropertyHandler.setType(type);\n+            formPropertyHandler.setRequired(formProperty.isRequired());\n+            formPropertyHandler.setReadable(formProperty.isReadable());\n+            formPropertyHandler.setWritable(formProperty.isWriteable());\n+            formPropertyHandler.setVariableName(formProperty.getVariable());\n+\n+            if (StringUtils.isNotEmpty(formProperty.getExpression())) {\n+                Expression expression = expressionManager.createExpression(formProperty.getExpression());\n+                formPropertyHandler.setVariableExpression(expression);\n+            }\n+\n+            if (StringUtils.isNotEmpty(formProperty.getDefaultExpression())) {\n+                Expression defaultExpression = expressionManager.createExpression(formProperty.getDefaultExpression());\n+                formPropertyHandler.setDefaultExpression(defaultExpression);\n+            }\n+\n+            formPropertyHandlers.add(formPropertyHandler);\n+        });\n+    }\n+}"},{"sha":"4f34237c3830a602f35599b93f307c08fb90cdab","filename":"ext/flowable/flowable-bpmn/src/main/resources/workflowFlowableContext.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fresources%2FworkflowFlowableContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fresources%2FworkflowFlowableContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fresources%2FworkflowFlowableContext.xml?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -38,6 +38,8 @@ under the License.\n     <property name=\"idmEngineConfiguration\" ref=\"syncopeIdmEngineConfiguration\"/> \n   </bean>\n \n+  <bean id=\"syncopeFormHandlerHelper\" class=\"org.apache.syncope.core.flowable.support.SyncopeFormHandlerHelper\"/>\n+\n   <bean class=\"org.apache.syncope.core.flowable.support.DomainProcessEngineConfiguration\" scope=\"prototype\">\n     <property name=\"databaseSchemaUpdate\" value=\"true\"/>\n \n@@ -52,6 +54,8 @@ under the License.\n         <bean class=\"org.apache.syncope.core.flowable.support.SyncopeEntitiesVariableType\"/>\n       </list>\n     </property>\n+    \n+    <property name=\"formHandlerHelper\" ref=\"syncopeFormHandlerHelper\"/>\n   </bean>\n \n   <bean id=\"bpmnProcessManager\" class=\"org.apache.syncope.core.flowable.impl.FlowableBpmnProcessManager\"/>"},{"sha":"ad76605214d515ea5ad5a05ff6749c80655a9191","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/BpmnProcessLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FBpmnProcessLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FBpmnProcessLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FBpmnProcessLogic.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -21,7 +21,7 @@\n import java.io.OutputStream;\n import java.lang.reflect.Method;\n import java.util.List;\n-import org.apache.syncope.common.lib.to.BpmnProcessTO;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.common.lib.types.FlowableEntitlement;\n import org.apache.syncope.common.lib.types.BpmnProcessFormat;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -31,14 +31,14 @@\n import org.apache.syncope.core.flowable.api.BpmnProcessManager;\n \n @Component\n-public class BpmnProcessLogic extends AbstractTransactionalLogic<BpmnProcessTO> {\n+public class BpmnProcessLogic extends AbstractTransactionalLogic<BpmnProcess> {\n \n     @Autowired\n     private BpmnProcessManager bpmnProcessManager;\n \n     @PreAuthorize(\"hasRole('\" + FlowableEntitlement.BPMN_PROCESS_LIST + \"')\")\n     @Transactional(readOnly = true)\n-    public List<BpmnProcessTO> list() {\n+    public List<BpmnProcess> list() {\n         return bpmnProcessManager.getProcesses();\n     }\n \n@@ -65,7 +65,7 @@ public void delete(final String key) {\n     }\n \n     @Override\n-    protected BpmnProcessTO resolveReference(final Method method, final Object... args)\n+    protected BpmnProcess resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n \n         throw new UnresolvedReferenceException();"},{"sha":"686677e48f844ac106690b15919147a9e5550c8a","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java","status":"modified","additions":84,"deletions":31,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -25,13 +25,12 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n-import org.apache.syncope.common.lib.to.UserRequestTO;\n+import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.common.lib.types.BpmnProcessFormat;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.FlowableEntitlement;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.flowable.api.BpmnProcessManager;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -41,6 +40,7 @@\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.flowable.api.UserRequestHandler;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.flowable.engine.runtime.ProcessInstance;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -52,81 +52,134 @@\n public class UserRequestLogic extends AbstractTransactionalLogic<UserRequestForm> {\n \n     @Autowired\n-    private BpmnProcessManager bpmnProcessManager;\n+    protected BpmnProcessManager bpmnProcessManager;\n \n     @Autowired\n-    private UserRequestHandler userRequestHandler;\n+    protected UserRequestHandler userRequestHandler;\n \n     @Autowired\n-    private PropagationManager propagationManager;\n+    protected PropagationManager propagationManager;\n \n     @Autowired\n-    private PropagationTaskExecutor taskExecutor;\n+    protected PropagationTaskExecutor taskExecutor;\n \n     @Autowired\n-    private UserDataBinder binder;\n+    protected UserDataBinder binder;\n \n     @Autowired\n-    private UserDAO userDAO;\n+    protected UserDAO userDAO;\n \n-    protected UserRequestTO doStart(final String bpmnProcess, final User user) {\n+    @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true)\n+    public Pair<Integer, List<UserRequest>> list(final String userKey,\n+            final int page,\n+            final int size,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        if (userKey == null) {\n+            securityChecks(null,\n+                    FlowableEntitlement.USER_REQUEST_LIST,\n+                    \"Listing user requests not allowed\");\n+        } else {\n+            User user = userDAO.find(userKey);\n+            if (user == null) {\n+                throw new NotFoundException(\"User \" + userKey);\n+            }\n+\n+            securityChecks(user.getUsername(),\n+                    FlowableEntitlement.USER_REQUEST_LIST,\n+                    \"Listing requests for user\" + user.getUsername() + \" not allowed\");\n+        }\n+\n+        return userRequestHandler.getUserRequests(userKey, page, size, orderByClauses);\n+    }\n+\n+    protected UserRequest doStart(final String bpmnProcess, final User user) {\n         // check if BPMN process exists\n         bpmnProcessManager.exportProcess(bpmnProcess, BpmnProcessFormat.XML, new NullOutputStream());\n \n         return userRequestHandler.start(bpmnProcess, user);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public UserRequestTO start(final String bpmnProcess) {\n+    public UserRequest start(final String bpmnProcess) {\n         return doStart(bpmnProcess, userDAO.findByUsername(AuthContextUtils.getUsername()));\n     }\n \n     @PreAuthorize(\"hasRole('\" + FlowableEntitlement.USER_REQUEST_START + \"')\")\n-    public UserRequestTO start(final String bpmnProcess, final String userKey) {\n+    public UserRequest start(final String bpmnProcess, final String userKey) {\n         return doStart(bpmnProcess, userDAO.authFind(userKey));\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n-    public void cancel(final String executionId, final String reason) {\n-        Pair<ProcessInstance, String> parsed = userRequestHandler.parse(executionId);\n-\n-        if (!AuthContextUtils.getUsername().equals(userDAO.find(parsed.getRight()).getUsername())\n+    protected void securityChecks(final String username, final String entitlement, final String errorMessage) {\n+        if (!AuthContextUtils.getUsername().equals(username)\n                 && !AuthContextUtils.getAuthorities().stream().\n-                        anyMatch(auth -> FlowableEntitlement.USER_REQUEST_CANCEL.equals(auth.getAuthority()))) {\n+                        anyMatch(auth -> entitlement.equals(auth.getAuthority()))) {\n \n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n-            sce.getElements().add(\"Canceling \" + executionId + \" not allowed\");\n+            sce.getElements().add(errorMessage);\n             throw sce;\n         }\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public void cancel(final String executionId, final String reason) {\n+        Pair<ProcessInstance, String> parsed = userRequestHandler.parse(executionId);\n+\n+        securityChecks(userDAO.find(parsed.getRight()).getUsername(),\n+                FlowableEntitlement.USER_REQUEST_CANCEL,\n+                \"Canceling \" + executionId + \" not allowed\");\n \n         userRequestHandler.cancel(parsed.getLeft(), reason);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + FlowableEntitlement.WORKFLOW_FORM_CLAIM + \"')\")\n+    @PreAuthorize(\"isAuthenticated()\")\n     public UserRequestForm claimForm(final String taskId) {\n-        return userRequestHandler.claimForm(taskId);\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + FlowableEntitlement.WORKFLOW_FORM_READ + \"') \"\n-            + \"and hasRole('\" + StandardEntitlement.USER_READ + \"')\")\n-    @Transactional(readOnly = true)\n-    public List<UserRequestForm> getForms(final String key) {\n-        User user = userDAO.authFind(key);\n-        return userRequestHandler.getForms(user.getKey());\n+        UserRequestForm form = userRequestHandler.claimForm(taskId);\n+        securityChecks(form.getUsername(),\n+                FlowableEntitlement.USER_REQUEST_FORM_CLAIM,\n+                \"Claiming form \" + taskId + \" not allowed\");\n+        return form;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + FlowableEntitlement.WORKFLOW_FORM_LIST + \"')\")\n+    @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     public Pair<Integer, List<UserRequestForm>> getForms(\n+            final String userKey,\n             final int page,\n             final int size,\n             final List<OrderByClause> orderByClauses) {\n \n-        return userRequestHandler.getForms(page, size, orderByClauses);\n+        if (userKey == null) {\n+            securityChecks(null,\n+                    FlowableEntitlement.USER_REQUEST_FORM_LIST,\n+                    \"Listing forms not allowed\");\n+        } else {\n+            User user = userDAO.find(userKey);\n+            if (user == null) {\n+                throw new NotFoundException(\"User \" + userKey);\n+            }\n+\n+            securityChecks(user.getUsername(),\n+                    FlowableEntitlement.USER_REQUEST_FORM_LIST,\n+                    \"Listing forms for user\" + user.getUsername() + \" not allowed\");\n+        }\n+\n+        return userRequestHandler.getForms(userKey, page, size, orderByClauses);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + FlowableEntitlement.WORKFLOW_FORM_SUBMIT + \"')\")\n+    @PreAuthorize(\"isAuthenticated()\")\n     public UserTO submitForm(final UserRequestForm form) {\n+        if (form.getUsername() == null) {\n+            securityChecks(null,\n+                    FlowableEntitlement.USER_REQUEST_FORM_SUBMIT,\n+                    \"Submitting forms not allowed\");\n+        } else {\n+            securityChecks(form.getUsername(),\n+                    FlowableEntitlement.USER_REQUEST_FORM_SUBMIT,\n+                    \"Submitting forms for user\" + form.getUsername() + \" not allowed\");\n+        }\n+\n         WorkflowResult<UserPatch> wfResult = userRequestHandler.submitForm(form);\n \n         // propByRes can be made empty by the workflow definition if no propagation should occur "},{"sha":"c4ac3a07c56fa34d8cd5ab33774c42b9acf1c7a1","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestFormQuery.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestFormQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestFormQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestFormQuery.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n+import javax.ws.rs.QueryParam;\n+\n public class UserRequestFormQuery extends AbstractQuery {\n \n     private static final long serialVersionUID = -4762457303770028554L;\n@@ -28,5 +30,21 @@ public static class Builder extends AbstractQuery.Builder<UserRequestFormQuery,\n         protected UserRequestFormQuery newInstance() {\n             return new UserRequestFormQuery();\n         }\n+\n+        public Builder user(final String user) {\n+            getInstance().setUser(user);\n+            return this;\n+        }\n+    }\n+\n+    private String user;\n+\n+    public String getUser() {\n+        return user;\n+    }\n+\n+    @QueryParam(\"user\")\n+    public void setUser(final String user) {\n+        this.user = user;\n     }\n }"},{"sha":"3f5362978c072421fa90068a3706c74fa5651c60","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestQuery.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestQuery.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import javax.ws.rs.QueryParam;\n+\n+public class UserRequestQuery extends AbstractQuery {\n+\n+    private static final long serialVersionUID = 427312034580076640L;\n+\n+    public static class Builder extends AbstractQuery.Builder<UserRequestQuery, Builder> {\n+\n+        @Override\n+        protected UserRequestQuery newInstance() {\n+            return new UserRequestQuery();\n+        }\n+\n+        public Builder user(final String user) {\n+            getInstance().setUser(user);\n+            return this;\n+        }\n+    }\n+\n+    private String user;\n+\n+    public String getUser() {\n+        return user;\n+    }\n+\n+    @QueryParam(\"user\")\n+    public void setUser(final String user) {\n+        this.user = user;\n+    }\n+}"},{"sha":"bb34fdd52b6c3ae0ea711afb8eefab1a186bbbf0","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java","status":"modified","additions":16,"deletions":4,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FBpmnProcessService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FBpmnProcessService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FBpmnProcessService.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -19,6 +19,9 @@\n package org.apache.syncope.common.rest.api.service;\n \n import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.media.ArraySchema;\n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n@@ -35,7 +38,7 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.BpmnProcessTO;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n@@ -51,18 +54,25 @@ public interface BpmnProcessService extends JAXRSService {\n     /**\n      * Lists the available BPMN processes.\n      *\n-     * @return available BPMN processs, for the given any object type\n+     * @return available BPMN processs\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\", description = \"available BPMN processes\", content =\n+                    @Content(array =\n+                            @ArraySchema(schema =\n+                                    @Schema(implementation = BpmnProcess.class)))))\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<BpmnProcessTO> list();\n+    List<BpmnProcess> list();\n \n     /**\n      * Exports the BPMN process for matching key.\n      *\n      * @param key BPMN process key\n      * @return BPMN process for matching key\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\", description = \"BPMN process for matching key\"))\n     @GET\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -72,8 +82,10 @@ public interface BpmnProcessService extends JAXRSService {\n      * Exports the BPMN diagram representation (if available), for matching key.\n      *\n      * @param key BPMN process key\n-     * @return workflow diagram representation\n+     * @return BPMN diagram representation\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\", description = \"BPMN diagram representation\"))\n     @GET\n     @Path(\"{key}/diagram.png\")\n     @Produces({ RESTHeaders.MEDIATYPE_IMAGE_PNG })"},{"sha":"5ad7b1284cac668709032bed6ce403c6294fa5fe","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java","status":"modified","additions":49,"deletions":24,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -18,10 +18,13 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n@@ -34,11 +37,12 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.to.UserRequestTO;\n+import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n+import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n \n /**\n  * REST operations related to user workflow.\n@@ -51,26 +55,46 @@\n public interface UserRequestService extends JAXRSService {\n \n     /**\n-     * Starts a new user request, for the given BOMN Process and\n-     * user (if provided) or requesting user (if not provided).\n+     * Returns a list of running user requests matching the given query.\n+     *\n+     * @param query query conditions\n+     * @return list of all running user requests\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\", description = \"list of all running user requests\", content =\n+                    @Content(schema =\n+                            @Schema(implementation = PagedResult.class))))\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    PagedResult<UserRequest> list(@BeanParam UserRequestQuery query);\n+\n+    /**\n+     * Starts a new request for the given BPMN Process and user (if provided) or requesting user (if not provided).\n      *\n      * @param bpmnProcess BPMN process\n-     * @param userKey user key\n+     * @param user if value looks like a UUID then it is interpreted as key otherwise as a username\n      * @return data about the started request service, including execution id\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\",\n+                    description = \"data about the started request service, including execution id\", content =\n+                    @Content(schema =\n+                            @Schema(implementation = UserRequest.class))))\n     @POST\n     @Path(\"start/{bpmnProcess}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    UserRequestTO start(\n+    UserRequest start(\n             @NotNull @PathParam(\"bpmnProcess\") String bpmnProcess,\n-            @QueryParam(\"userKey\") String userKey);\n+            @QueryParam(\"user\") String user);\n \n     /**\n      * Cancel a running user request.\n      *\n      * @param executionId execution id\n      * @param reason reason to cancel the user request\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n     @Path(\"{executionId}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -79,44 +103,45 @@ void cancel(\n             @QueryParam(\"reason\") String reason);\n \n     /**\n-     * Returns a list of all available workflow forms.\n+     * Returns a list of user request forms matching the given query.\n      *\n      * @param query query conditions\n-     * @return list of all available workflow forms\n+     * @return list of all available user request forms\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\", description = \"list of all available user request forms\", content =\n+                    @Content(schema =\n+                            @Schema(implementation = PagedResult.class))))\n     @GET\n     @Path(\"forms\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedResult<UserRequestForm> getForms(@BeanParam UserRequestFormQuery query);\n \n     /**\n-     * Returns a list of available forms for the given user key.\n-     *\n-     * @param userKey user key\n-     * @return list of available forms for the given user key\n-     */\n-    @GET\n-    @Path(\"forms/{userKey}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<UserRequestForm> getForms(@NotNull @PathParam(\"userKey\") String userKey);\n-\n-    /**\n-     * Claims the form for the given task id.\n+     * Requests to manage the form for the given task id.\n      *\n      * @param taskId workflow task id\n-     * @return the workflow form for the given task id\n+     * @return the form for the given task id\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\", description = \"the form for the given task id\", content =\n+                    @Content(schema =\n+                            @Schema(implementation = UserRequestForm.class))))\n     @POST\n     @Path(\"forms/{taskId}/claim\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     UserRequestForm claimForm(@NotNull @PathParam(\"taskId\") String taskId);\n \n     /**\n-     * Submits a workflow form.\n+     * Submits a user request form.\n      *\n-     * @param form workflow form.\n+     * @param form user request form.\n      * @return updated user\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\", description = \"updated user\", content =\n+                    @Content(schema =\n+                            @Schema(implementation = UserTO.class))))\n     @POST\n     @Path(\"forms\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })"},{"sha":"b396d6e2afe780a93dcb7de0bbd1338c8e0533cc","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowTaskService.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowTaskService.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -18,6 +18,11 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.media.ArraySchema;\n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -48,6 +53,11 @@ public interface UserWorkflowTaskService extends JAXRSService {\n      * @param userKey user key\n      * @return list of available tasks for the given user key\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\", description = \"list of available tasks for the given user key\", content =\n+                    @Content(array =\n+                            @ArraySchema(schema =\n+                                    @Schema(implementation = WorkflowTask.class)))))\n     @GET\n     @Path(\"tasks/{userKey}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -59,6 +69,10 @@ public interface UserWorkflowTaskService extends JAXRSService {\n      * @param workflowTaskExecInput input for task execution\n      * @return updated user\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\", description = \"updated user\", content =\n+                    @Content(schema =\n+                            @Schema(implementation = UserTO.class))))\n     @POST\n     @Path(\"tasks/{userKey}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })"},{"sha":"4f976b54047d84cc03539e410da3c57adda38531","filename":"ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/BpmnProcessServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FBpmnProcessServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FBpmnProcessServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FBpmnProcessServiceImpl.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -22,7 +22,7 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n-import org.apache.syncope.common.lib.to.BpmnProcessTO;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.common.lib.types.BpmnProcessFormat;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.core.logic.BpmnProcessLogic;\n@@ -37,7 +37,7 @@ public class BpmnProcessServiceImpl extends AbstractServiceImpl implements BpmnP\n     private BpmnProcessLogic logic;\n \n     @Override\n-    public List<BpmnProcessTO> list() {\n+    public List<BpmnProcess> list() {\n         return logic.list();\n     }\n "},{"sha":"188d22e87c586261c0cf2b02013fc3d1c82cbd85","filename":"ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserRequestServiceImpl.java","status":"modified","additions":26,"deletions":12,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserRequestServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserRequestServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserRequestServiceImpl.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -21,26 +21,42 @@\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.to.UserRequestTO;\n+import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n+import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n import org.apache.syncope.core.logic.UserRequestLogic;\n+import org.apache.syncope.common.rest.api.service.UserRequestService;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-import org.apache.syncope.common.rest.api.service.UserRequestService;\n \n @Service\n public class UserRequestServiceImpl extends AbstractServiceImpl implements UserRequestService {\n \n     @Autowired\n     private UserRequestLogic logic;\n \n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Override\n+    public PagedResult<UserRequest> list(final UserRequestQuery query) {\n+        if (query.getUser() != null) {\n+            query.setUser(getActualKey(userDAO, query.getUser()));\n+        }\n+\n+        Pair<Integer, List<UserRequest>> result = logic.list(\n+                query.getUser(), query.getPage(), query.getSize(), getOrderByClauses(query.getOrderBy()));\n+        return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());\n+    }\n+\n     @Override\n-    public UserRequestTO start(final String bpmnProcess, final String userKey) {\n-        return userKey == null\n+    public UserRequest start(final String bpmnProcess, final String user) {\n+        return user == null\n                 ? logic.start(bpmnProcess)\n-                : logic.start(bpmnProcess, userKey);\n+                : logic.start(bpmnProcess, getActualKey(userDAO, user));\n     }\n \n     @Override\n@@ -53,21 +69,19 @@ public UserRequestForm claimForm(final String taskId) {\n         return logic.claimForm(taskId);\n     }\n \n-    @Override\n-    public List<UserRequestForm> getForms(final String userKey) {\n-        return logic.getForms(userKey);\n-    }\n-\n     @Override\n     public PagedResult<UserRequestForm> getForms(final UserRequestFormQuery query) {\n+        if (query.getUser() != null) {\n+            query.setUser(getActualKey(userDAO, query.getUser()));\n+        }\n+\n         Pair<Integer, List<UserRequestForm>> result = logic.getForms(\n-                query.getPage(), query.getSize(), getOrderByClauses(query.getOrderBy()));\n+                query.getUser(), query.getPage(), query.getSize(), getOrderByClauses(query.getOrderBy()));\n         return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());\n     }\n \n     @Override\n     public UserTO submitForm(final UserRequestForm form) {\n         return logic.submitForm(form);\n     }\n-\n }"},{"sha":"dc5e8d15a5b25b36dda7ba63b850114cfe06580a","filename":"fit/core-reference/pom.xml","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -1541,6 +1541,26 @@ under the License.\n       \n       <build>\n         <plugins>\n+          <!-- Adds Flowable custom classes -->\n+          <plugin>\n+            <groupId>org.codehaus.mojo</groupId>\n+            <artifactId>build-helper-maven-plugin</artifactId>\n+            <executions>\n+              <execution>\n+                <id>add-flowable-custom-classes</id>\n+                <phase>initialize</phase>\n+                <goals>\n+                  <goal>add-source</goal>\n+                </goals>\n+                <configuration>\n+                  <sources>\n+                    <source>${basedir}/src/main/java-all</source>\n+                  </sources>\n+                </configuration>\n+              </execution>\n+            </executions>\n+          </plugin>\n+\n           <!-- Adds Flowable test content -->\n           <plugin>\n             <groupId>org.codehaus.mojo</groupId>"},{"sha":"4db7ac22792fe7f64d9fff9a362562c0d16f525a","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java","status":"renamed","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.fit.core.reference;\n+package org.apache.syncope.fit.core.reference.flowable;\n \n import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n@@ -27,7 +27,9 @@\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n \n+@Component\n public class AssignDirectorGroup extends AbstractFlowableServiceTask {\n \n     @Autowired","previous_filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/AssignDirectorGroup.java"},{"sha":"b0c5261ac810aac4620664a3a0bde5a1fa69c304","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference.flowable;\n+\n+import org.apache.syncope.common.lib.patch.RelationshipPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n+import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;\n+import org.apache.syncope.core.flowable.task.AbstractFlowableServiceTask;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.PropagationByResource;\n+import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CreateARelationship extends AbstractFlowableServiceTask {\n+\n+    @Autowired\n+    private UserDataBinder dataBinder;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Override\n+    protected void doExecute(final String executionId) {\n+        User user = engine.getRuntimeService().\n+                getVariable(executionId, FlowableRuntimeUtils.USER, User.class);\n+\n+        Boolean approve = engine.getRuntimeService().\n+                getVariable(executionId, \"approve\", Boolean.class);\n+        if (Boolean.TRUE.equals(approve)) {\n+            user = userDAO.save(user);\n+\n+            String printer = engine.getRuntimeService().\n+                    getVariable(executionId, \"printer\", String.class);\n+\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(user.getKey());\n+            userPatch.getRelationships().add(new RelationshipPatch.Builder().\n+                    relationshipTO(new RelationshipTO.Builder().\n+                            otherEnd(\"PRINTER\", printer).type(\"neighborhood\").build()).\n+                    build());\n+\n+            PropagationByResource propByRes = dataBinder.update(user, userPatch);\n+\n+            // report updated user and propagation by resource as result\n+            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.USER, user);\n+            engine.getRuntimeService().setVariable(executionId, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);\n+        } else {\n+            LOG.info(\"Printer assignment to \" + user.getUsername() + \" was not approved\");\n+        }\n+    }\n+}"},{"sha":"82e969370ac53873ec27c83ab4590f218e253978","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/PrintersValueProvider.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FPrintersValueProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FPrintersValueProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FPrintersValueProvider.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference.flowable;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.flowable.api.DropdownValueProvider;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class PrintersValueProvider implements DropdownValueProvider {\n+\n+    private static final SearchCond PRINTER_COND;\n+\n+    private static final List<OrderByClause> ORDER_BY;\n+\n+    static {\n+        AnyTypeCond anyTypeCond = new AnyTypeCond();\n+        anyTypeCond.setAnyTypeKey(\"PRINTER\");\n+        PRINTER_COND = SearchCond.getLeafCond(anyTypeCond);\n+\n+        OrderByClause orderByNameAsc = new OrderByClause();\n+        orderByNameAsc.setField(\"name\");\n+        orderByNameAsc.setDirection(OrderByClause.Direction.ASC);\n+        ORDER_BY = Collections.singletonList(orderByNameAsc);\n+    }\n+\n+    @Autowired\n+    private AnySearchDAO anySearchDAO;\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public Map<String, String> getValues() {\n+        return anySearchDAO.<AnyObject>search(PRINTER_COND, ORDER_BY, AnyTypeKind.ANY_OBJECT).stream().\n+                collect(Collectors.toMap(\n+                        AnyObject::getKey,\n+                        AnyObject::getName,\n+                        (u, v) -> {\n+                            throw new IllegalStateException(String.format(\"Duplicate key %s\", u));\n+                        },\n+                        LinkedHashMap::new));\n+    }\n+}"},{"sha":"b14490aefe7671a9322a5a0d84adaaf711fd49c8","filename":"fit/core-reference/src/main/resources/all/workflowTestContext.xml","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2FworkflowTestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2FworkflowTestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2FworkflowTestContext.xml?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -19,9 +19,12 @@ under the License.\n -->\n <beans xmlns=\"http://www.springframework.org/schema/beans\" \n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n-                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\n+                           http://www.springframework.org/schema/context\n+                           http://www.springframework.org/schema/context/spring-context.xsd\">\n \n-  <bean id=\"assignDirectorGroup\" class=\"org.apache.syncope.fit.core.reference.AssignDirectorGroup\"/>\n+  <context:component-scan base-package=\"org.apache.syncope.fit.core.reference.flowable\"/>\n \n </beans>"},{"sha":"c9ecb9c15eb2d7366f5c2ff6b6eeacae7dabe322","filename":"fit/core-reference/src/main/resources/assignPrinterRequest.bpmn20.xml","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FassignPrinterRequest.bpmn20.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FassignPrinterRequest.bpmn20.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FassignPrinterRequest.bpmn20.xml?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -0,0 +1,92 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" \n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n+             xmlns:flowable=\"http://flowable.org/bpmn\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" \n+             xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" \n+             xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" \n+             typeLanguage=\"http://www.w3.org/2001/XMLSchema\" \n+             expressionLanguage=\"http://www.w3.org/1999/XPath\" \n+             targetNamespace=\"http://www.flowable.org/processdef\">\n+\n+  <process id=\"assignPrinterRequest\" name=\"Assign printer\" isExecutable=\"true\">\n+    <startEvent id=\"startevent1\" name=\"Start\"/>\n+    <endEvent id=\"endevent1\" name=\"End\"/>\n+    <sequenceFlow id=\"flow1\" sourceRef=\"startevent1\" targetRef=\"selectPrinter\"/>\n+    <userTask id=\"selectPrinter\" name=\"Select printer\" flowable:formKey=\"selectPrinter\" flowable:assignee=\"${wfExecutor}\">\n+      <extensionElements>\n+        <flowable:formProperty id=\"printer\" name=\"Printer\" variable=\"printer\" type=\"dropdown\" required=\"true\">\n+          <flowable:value id=\"dropdownValueProvider\" name=\"printersValueProvider\"/>\n+        </flowable:formProperty>\n+        <flowable:formProperty id=\"printMode\" name=\"Preferred print mode?\" type=\"enum\">\n+          <flowable:value id=\"bw\" name=\"Black / White\"/>\n+          <flowable:value id=\"color\" name=\"Color\"/>\n+        </flowable:formProperty>\n+      </extensionElements>\n+    </userTask>\n+    <userTask id=\"approvePrinter\" name=\"Approve printer\" flowable:formKey=\"approvePrinter\">\n+      <extensionElements>\n+        <flowable:formProperty id=\"username\" name=\"Username\" type=\"string\" expression=\"${userTO.username}\" writable=\"false\"/>\n+        <flowable:formProperty id=\"printer\" name=\"Selected printer\" type=\"string\" expression=\"${printer}\" writable=\"false\"/>\n+        <flowable:formProperty id=\"approve\" name=\"Approve?\" type=\"boolean\" variable=\"approve\" required=\"true\"/>\n+      </extensionElements>\n+    </userTask>\n+    <sequenceFlow id=\"sid-D7047714-8E57-46B8-B6D4-4844DE330329\" sourceRef=\"selectPrinter\" targetRef=\"approvePrinter\"/>\n+    <serviceTask id=\"createARelationship\" name=\"Create ARelationship\" flowable:expression=\"#{createARelationship.execute(execution.processInstanceId)}\"/>\n+    <sequenceFlow id=\"sid-33880AE7-35C6-4A39-8E5B-12D8BA53F042\" sourceRef=\"approvePrinter\" targetRef=\"createARelationship\"/>\n+    <sequenceFlow id=\"sid-831E1896-EDF9-4F7D-AA42-E86CC1F8C5D3\" sourceRef=\"createARelationship\" targetRef=\"endevent1\"/>\n+  </process>\n+  <bpmndi:BPMNDiagram id=\"BPMNDiagram_assignPrinterRequest\">\n+    <bpmndi:BPMNPlane bpmnElement=\"assignPrinterRequest\" id=\"BPMNPlane_assignPrinterRequest\">\n+      <bpmndi:BPMNShape bpmnElement=\"startevent1\" id=\"BPMNShape_startevent1\">\n+        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"180.0\" y=\"115.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"endevent1\" id=\"BPMNShape_endevent1\">\n+        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"885.0\" y=\"116.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"selectPrinter\" id=\"BPMNShape_selectPrinter\">\n+        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"330.0\" y=\"90.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"approvePrinter\" id=\"BPMNShape_approvePrinter\">\n+        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"495.5\" y=\"90.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNShape bpmnElement=\"createARelationship\" id=\"BPMNShape_createARelationship\">\n+        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"675.0\" y=\"90.0\"/>\n+      </bpmndi:BPMNShape>\n+      <bpmndi:BPMNEdge bpmnElement=\"flow1\" id=\"BPMNEdge_flow1\">\n+        <omgdi:waypoint x=\"209.94999901196195\" y=\"130.0\"/>\n+        <omgdi:waypoint x=\"330.0\" y=\"130.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"sid-D7047714-8E57-46B8-B6D4-4844DE330329\" id=\"BPMNEdge_sid-D7047714-8E57-46B8-B6D4-4844DE330329\">\n+        <omgdi:waypoint x=\"429.95000000000005\" y=\"130.0\"/>\n+        <omgdi:waypoint x=\"495.5\" y=\"130.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"sid-33880AE7-35C6-4A39-8E5B-12D8BA53F042\" id=\"BPMNEdge_sid-33880AE7-35C6-4A39-8E5B-12D8BA53F042\">\n+        <omgdi:waypoint x=\"595.4499999999068\" y=\"130.0\"/>\n+        <omgdi:waypoint x=\"675.0\" y=\"130.0\"/>\n+      </bpmndi:BPMNEdge>\n+      <bpmndi:BPMNEdge bpmnElement=\"sid-831E1896-EDF9-4F7D-AA42-E86CC1F8C5D3\" id=\"BPMNEdge_sid-831E1896-EDF9-4F7D-AA42-E86CC1F8C5D3\">\n+        <omgdi:waypoint x=\"774.9499999999266\" y=\"130.0\"/>\n+        <omgdi:waypoint x=\"885.0\" y=\"130.0\"/>\n+      </bpmndi:BPMNEdge>\n+    </bpmndi:BPMNPlane>\n+  </bpmndi:BPMNDiagram>\n+</definitions>\n\\ No newline at end of file"},{"sha":"cbdb19bcd3a97f7318aa64968cd613f05288be90","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -66,6 +66,7 @@\n import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n+import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.UserService;\n@@ -495,7 +496,8 @@ public void issueSYNCOPE434() {\n         }\n \n         // 3. approve user\n-        UserRequestForm form = userRequestService.getForms(userTO.getKey()).get(0);\n+        UserRequestForm form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"approveCreate\").get().setValue(Boolean.TRUE.toString());\n         userTO = userRequestService.submitForm(form);"},{"sha":"21fb4fd0e200730154f1fa96361f69f6eead45f5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BpmnProcessITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -28,7 +28,7 @@\n import java.nio.charset.StandardCharsets;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n-import org.apache.syncope.common.lib.to.BpmnProcessTO;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.FlowableDetector;\n import org.junit.jupiter.api.BeforeAll;\n@@ -42,7 +42,7 @@ public class BpmnProcessITCase extends AbstractITCase {\n     public static void findDefault() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n         bpmnProcessService.list().stream().\n-                filter(BpmnProcessTO::isUserWorkflow).findAny().\n+                filter(BpmnProcess::isUserWorkflow).findAny().\n                 ifPresent(process -> {\n                     userWorkflowKey = process.getKey();\n                 });"},{"sha":"9281bce923b84d228c9fa8e01dcead20407f5845","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserRequestITCase.java","status":"modified","additions":120,"deletions":15,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -25,14 +25,19 @@\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n import java.io.IOException;\n+import java.util.List;\n import javax.ws.rs.core.MediaType;\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n-import org.apache.syncope.common.lib.to.UserRequestTO;\n+import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n+import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n+import org.apache.syncope.common.rest.api.service.UserRequestService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.FlowableDetector;\n import org.junit.jupiter.api.BeforeAll;\n@@ -42,9 +47,13 @@ public class UserRequestITCase extends AbstractITCase {\n \n     @BeforeAll\n     public static void loadBpmnProcesses() throws IOException {\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+\n         WebClient.client(bpmnProcessService).type(MediaType.APPLICATION_XML_TYPE);\n         bpmnProcessService.set(\"directorGroupRequest\",\n                 IOUtils.toString(UserRequestITCase.class.getResourceAsStream(\"/directorGroupRequest.bpmn20.xml\")));\n+        bpmnProcessService.set(\"assignPrinterRequest\",\n+                IOUtils.toString(UserRequestITCase.class.getResourceAsStream(\"/assignPrinterRequest.bpmn20.xml\")));\n     }\n \n     @Test\n@@ -56,51 +65,68 @@ public void twoLevelsApproval() {\n         assertFalse(user.getMembership(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").isPresent());\n \n         // start request\n-        UserRequestTO req = userRequestService.start(\"directorGroupRequest\", user.getKey());\n+        UserRequest req = userRequestService.start(\"directorGroupRequest\", user.getKey());\n         assertNotNull(req);\n+        assertEquals(\"directorGroupRequest\", req.getBpmnProcess());\n+        assertNotNull(req.getExecutionId());\n+        assertEquals(req.getUser(), user.getKey());\n+        \n+        // check that user can see the ongoing request\n+        SyncopeClient client = clientFactory.create(user.getUsername(), \"password123\");\n+        PagedResult<UserRequest> requests = client.getService(UserRequestService.class).\n+                list(new UserRequestQuery.Builder().user(user.getKey()).build());\n+        assertEquals(1, requests.getTotalCount());\n+        assertEquals(\"directorGroupRequest\", requests.getResult().get(0).getBpmnProcess());\n \n         // 1st approval -> reject\n-        UserRequestForm form = userRequestService.getForms(user.getKey()).get(0);\n+        UserRequestForm form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"firstLevelApprove\").get().setValue(Boolean.FALSE.toString());\n         userRequestService.submitForm(form);\n \n         // no more forms, group not assigned\n-        assertTrue(userRequestService.getForms(user.getKey()).isEmpty());\n+        assertTrue(userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n         assertFalse(userService.read(user.getKey()).getMembership(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").isPresent());\n \n         // start request again\n         req = userRequestService.start(\"directorGroupRequest\", user.getKey());\n         assertNotNull(req);\n \n         // 1st approval -> accept\n-        form = userRequestService.getForms(user.getKey()).get(0);\n+        form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"firstLevelApprove\").get().setValue(Boolean.TRUE.toString());\n         userRequestService.submitForm(form);\n \n         // 2nd approval -> reject\n-        form = userRequestService.getForms(user.getKey()).get(0);\n+        form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"secondLevelApprove\").get().setValue(Boolean.FALSE.toString());\n         user = userRequestService.submitForm(form);\n \n         // no more forms, group not assigned\n-        assertTrue(userRequestService.getForms(user.getKey()).isEmpty());\n+        assertTrue(userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n         assertFalse(userService.read(user.getKey()).getMembership(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").isPresent());\n \n         // start request again\n         req = userRequestService.start(\"directorGroupRequest\", user.getKey());\n         assertNotNull(req);\n \n         // 1st approval -> accept\n-        form = userRequestService.getForms(user.getKey()).get(0);\n+        form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"firstLevelApprove\").get().setValue(Boolean.TRUE.toString());\n         userRequestService.submitForm(form);\n \n         // 2nd approval -> accept\n-        form = userRequestService.getForms(user.getKey()).get(0);\n+        form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"secondLevelApprove\").get().setValue(Boolean.TRUE.toString());\n         user = userRequestService.submitForm(form);\n@@ -115,30 +141,109 @@ public void cancel() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n         PagedResult<UserRequestForm> forms =\n-                userRequestService.getForms(new UserRequestFormQuery.Builder().page(1).size(1000).build());\n+                userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n         UserTO user = createUser(UserITCase.getUniqueSampleTO(\"twoLevelsApproval@tirasa.net\")).getEntity();\n         assertNotNull(user);\n         assertFalse(user.getMembership(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").isPresent());\n \n         // start request\n-        UserRequestTO req = userRequestService.start(\"directorGroupRequest\", user.getKey());\n+        UserRequest req = userRequestService.start(\"directorGroupRequest\", user.getKey());\n         assertNotNull(req);\n \n         // check that form was generated\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().page(1).size(1000).build());\n+        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         assertEquals(preForms + 1, forms.getTotalCount());\n \n-        assertEquals(1, userRequestService.getForms(user.getKey()).size());\n+        assertEquals(1, userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().size());\n \n         // cancel request\n         userRequestService.cancel(req.getExecutionId(), \"nothing in particular\");\n \n         // check that form was removed\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().page(1).size(1000).build());\n+        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        assertEquals(preForms, forms.getTotalCount());\n+\n+        assertTrue(userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n+    }\n+\n+    @Test\n+    public void userSelection() {\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+\n+        PagedResult<UserRequestForm> forms =\n+                userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        int preForms = forms.getTotalCount();\n+\n+        UserTO user = createUser(UserITCase.getUniqueSampleTO(\"userSelection@tirasa.net\")).getEntity();\n+        assertNotNull(user);\n+        List<RelationshipTO> relationships = userService.read(user.getKey()).getRelationships();\n+        assertTrue(relationships.isEmpty());\n+\n+        SyncopeClient client = clientFactory.create(user.getUsername(), \"password123\");\n+\n+        // start request as user\n+        UserRequest req = client.getService(UserRequestService.class).start(\"assignPrinterRequest\", null);\n+        assertNotNull(req);\n+\n+        // check (as admin) that a new form is available\n+        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n+        assertEquals(preForms + 1, forms.getTotalCount());\n+\n+        // get (as user) the form, claim and submit\n+        PagedResult<UserRequestForm> userForms = client.getService(UserRequestService.class).\n+                getForms(new UserRequestFormQuery.Builder().user(user.getKey()).build());\n+        assertEquals(1, userForms.getTotalCount());\n+\n+        UserRequestForm form = userForms.getResult().get(0);\n+        assertEquals(\"assignPrinterRequest\", form.getBpmnProcess());\n+        form = client.getService(UserRequestService.class).claimForm(form.getTaskId());\n+\n+        assertFalse(form.getProperty(\"printer\").get().getDropdownValues().isEmpty());\n+        form.getProperty(\"printer\").ifPresent(printer -> printer.setValue(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\"));\n+\n+        assertFalse(form.getProperty(\"printMode\").get().getEnumValues().isEmpty());\n+        form.getProperty(\"printMode\").ifPresent(printMode -> printMode.setValue(\"color\"));\n+\n+        client.getService(UserRequestService.class).submitForm(form);\n+\n+        userForms = client.getService(UserRequestService.class).getForms(\n+                new UserRequestFormQuery.Builder().user(user.getKey()).build());\n+        assertEquals(0, userForms.getTotalCount());\n+\n+        // check that user can see the ongoing request\n+        PagedResult<UserRequest> requests = client.getService(UserRequestService.class).\n+                list(new UserRequestQuery.Builder().user(user.getKey()).build());\n+        assertEquals(1, requests.getTotalCount());\n+        assertEquals(\"assignPrinterRequest\", requests.getResult().get(0).getBpmnProcess());\n+\n+        // get (as admin) the new form, claim and submit\n+        form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n+        assertEquals(\"assignPrinterRequest\", form.getBpmnProcess());\n+        form = userRequestService.claimForm(form.getTaskId());\n+\n+        assertEquals(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\", form.getProperty(\"printer\").get().getValue());\n+\n+        form.getProperty(\"approve\").get().setValue(Boolean.TRUE.toString());\n+        userRequestService.submitForm(form);\n+\n+        // no more forms available\n+        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         assertEquals(preForms, forms.getTotalCount());\n \n-        assertTrue(userRequestService.getForms(user.getKey()).isEmpty());\n+        assertTrue(client.getService(UserRequestService.class).\n+                list(new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().isEmpty());\n+\n+        // check that relationship was made effective by approval\n+        relationships = userService.read(user.getKey()).getRelationships();\n+        assertFalse(relationships.isEmpty());\n+        assertTrue(relationships.stream().\n+                anyMatch(relationship -> \"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\".equals(relationship.getOtherEndKey())));\n     }\n }"},{"sha":"63db20e22c0882882274ef73ef30c1d61e76d9fd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":25,"deletions":20,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -130,7 +130,8 @@ public void createAndApprove() {\n         }\n \n         // now approve and verify that propagation has happened\n-        UserRequestForm form = userRequestService.getForms(userTO.getKey()).get(0);\n+        UserRequestForm form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"approveCreate\").get().setValue(Boolean.TRUE.toString());\n         userTO = userRequestService.submitForm(form);\n@@ -228,7 +229,8 @@ public void updateWithApproval() {\n         }\n \n         // 3. approve self-update as admin\n-        UserRequestForm form = userRequestService.getForms(updated.getKey()).get(0);\n+        UserRequestForm form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(updated.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"approveUpdate\").get().setValue(Boolean.TRUE.toString());\n         updated = userRequestService.submitForm(form);\n@@ -420,7 +422,8 @@ public void createWithReject() {\n         assertEquals(\"createApproval\", userTO.getStatus());\n \n         // 2. request if there is any pending task for user just created\n-        UserRequestForm form = userRequestService.getForms(userTO.getKey()).get(0);\n+        UserRequestForm form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         assertNotNull(form);\n         assertNotNull(form.getUsername());\n         assertEquals(userTO.getUsername(), form.getUsername());\n@@ -480,8 +483,7 @@ public void createWithApproval() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n         // read forms *before* any operation\n-        PagedResult<UserRequestForm> forms =\n-                userRequestService.getForms(new UserRequestFormQuery.Builder().page(1).size(1000).build());\n+        PagedResult<UserRequestForm> forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n         UserTO userTO = UserITCase.getUniqueSampleTO(\"createWithApproval@syncope.apache.org\");\n@@ -514,7 +516,7 @@ public void createWithApproval() {\n         assertNotNull(exception);\n \n         // 2. request if there is any pending form for user just created\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().page(1).size(1000).build());\n+        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         assertEquals(preForms + 1, forms.getTotalCount());\n \n         // 3. as admin, update user: still pending approval\n@@ -524,7 +526,8 @@ public void createWithApproval() {\n         userPatch.setUsername(new StringReplacePatchItem.Builder().value(updatedUsername).build());\n         updateUser(userPatch);\n \n-        UserRequestForm form = userRequestService.getForms(userTO.getKey()).get(0);\n+        UserRequestForm form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getUserTO());\n@@ -567,8 +570,8 @@ public void updateApproval() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n         // read forms *before* any operation\n-        PagedResult<UserRequestForm> forms = userRequestService.getForms(new UserRequestFormQuery.Builder().\n-                page(1).size(1000).build());\n+        PagedResult<UserRequestForm> forms = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n         UserTO created = createUser(UserITCase.getUniqueSampleTO(\"updateApproval@syncope.apache.org\")).getEntity();\n@@ -585,10 +588,11 @@ public void updateApproval() {\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\"updateApproval\", userService.read(created.getKey()).getStatus());\n \n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().page(1).size(1000).build());\n+        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         assertEquals(preForms + 1, forms.getTotalCount());\n \n-        UserRequestForm form = userRequestService.getForms(created.getKey()).get(0);\n+        UserRequestForm form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(created.getKey()).build()).getResult().get(0);\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNull(form.getOwner());\n@@ -607,7 +611,8 @@ public void updateApproval() {\n         assertEquals(0, updated.getMemberships().size());\n \n         // the patch is not updated in the approval form\n-        form = userRequestService.getForms(created.getKey()).get(0);\n+        form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(created.getKey()).build()).getResult().get(0);\n         assertEquals(patch, form.getUserPatch());\n \n         // approve the user\n@@ -642,8 +647,7 @@ public void issueSYNCOPE15() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n \n         // read forms *before* any operation\n-        PagedResult<UserRequestForm> forms = userRequestService.getForms(new UserRequestFormQuery.Builder().\n-                page(1).size(1000).build());\n+        PagedResult<UserRequestForm> forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         int preForms = forms.getTotalCount();\n \n         UserTO userTO = UserITCase.getUniqueSampleTO(\"issueSYNCOPE15@syncope.apache.org\");\n@@ -667,10 +671,11 @@ public void issueSYNCOPE15() {\n         assertEquals(userTO.getCreationDate(), userTO.getLastChangeDate());\n \n         // 2. request if there is any pending form for user just created\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().page(1).size(1000).build());\n+        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         assertEquals(preForms + 1, forms.getTotalCount());\n \n-        UserRequestForm form = userRequestService.getForms(userTO.getKey()).get(0);\n+        UserRequestForm form = userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         assertNotNull(form);\n \n         // 3. first claim by bellini ....\n@@ -692,12 +697,12 @@ public void issueSYNCOPE15() {\n         userTO = userRequestService.submitForm(form);\n         assertNotNull(userTO);\n         assertEquals(preForms,\n-                userRequestService.getForms(new UserRequestFormQuery.Builder().page(1).size(1000).build()).\n-                        getTotalCount());\n-        assertTrue(userRequestService.getForms(userTO.getKey()).isEmpty());\n+                userRequestService.getForms(new UserRequestFormQuery.Builder().build()).getTotalCount());\n+        assertTrue(userRequestService.getForms(\n+                new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().isEmpty());\n \n         // 7.check that no more forms are still to be processed\n-        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().page(1).size(1000).build());\n+        forms = userRequestService.getForms(new UserRequestFormQuery.Builder().build());\n         assertEquals(preForms, forms.getTotalCount());\n     }\n "},{"sha":"a04a9e5993b0474e6526692f04a0ef81f431f9d8","filename":"pom.xml","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fee1317dc3e32d89fcbab5f5e748f49ce5e04f83/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=fee1317dc3e32d89fcbab5f5e748f49ce5e04f83","patch":"@@ -1747,6 +1747,12 @@ under the License.\n           </configuration>\n         </plugin>\n         \n+        <plugin>\n+          <groupId>org.codehaus.mojo</groupId>\n+          <artifactId>build-helper-maven-plugin</artifactId>\n+          <version>3.0.0</version>\n+        </plugin>\n+\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n@@ -2305,8 +2311,8 @@ under the License.\n             <link>https://docs.spring.io/spring-security/site/docs/5.0.x/api/</link>\n             <link>http://www.flowable.org/docs/javadocs/</link>\n             <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/3.3.0/apidocs/</link>\n-\t    <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.4.1/index.html</link>\n-\t    <link>http://docs.swagger.io/swagger-core/v2.0.5/apidocs/</link>\n+            <link>https://artifacts.elastic.co/javadoc/org/elasticsearch/elasticsearch/6.4.1/index.html</link>\n+            <link>http://docs.swagger.io/swagger-core/v2.0.5/apidocs/</link>\n           </links>\n         </configuration>\n         <reportSets>"}]}