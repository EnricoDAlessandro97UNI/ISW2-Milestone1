{"sha":"f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY3NGNlNWRlZTM3ZjdlNTE1N2EzYzg0ZjAwMTE5ZDJmZmE0MjJlNmY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-09T09:42:25Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-09T09:42:36Z"},"message":"[SYNCOPE-1067] Check that any USER / GROUP / ANYOBJECT UPDATE under DynRealm authorization cannot alter the set of DynRealms","tree":{"sha":"e2e1260ee0e11221f62d84c7ca98cd2cba01548a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e2e1260ee0e11221f62d84c7ca98cd2cba01548a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8683655c629421139ac81c641114153f7c01485f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8683655c629421139ac81c641114153f7c01485f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8683655c629421139ac81c641114153f7c01485f"}],"stats":{"total":311,"additions":207,"deletions":104},"files":[{"sha":"7c969798d19c37d92d57ca2b6202bf19838d895e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":61,"deletions":9,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","patch":"@@ -167,7 +167,7 @@ protected Pair<TO, List<LogicActions>> beforeDelete(final TO input) {\n         return ImmutablePair.of(any, actions);\n     }\n \n-    protected ProvisioningResult<TO> after(\n+    protected ProvisioningResult<TO> afterCreate(\n             final TO input, final List<PropagationStatus> statuses, final List<LogicActions> actions) {\n \n         TO any = input;\n@@ -183,6 +183,53 @@ protected ProvisioningResult<TO> after(\n         return result;\n     }\n \n+    protected ProvisioningResult<TO> afterUpdate(\n+            final TO input,\n+            final List<PropagationStatus> statuses,\n+            final List<LogicActions> actions,\n+            final boolean authDynRealms,\n+            final Set<String> dynRealmsBefore) {\n+\n+        Set<String> dynRealmsAfter = new HashSet<>(input.getDynRealms());\n+        if (authDynRealms && !dynRealmsBefore.equals(dynRealmsAfter)) {\n+            throw new DelegatedAdministrationException(\n+                    this instanceof UserLogic\n+                            ? AnyTypeKind.USER\n+                            : this instanceof GroupLogic\n+                                    ? AnyTypeKind.GROUP\n+                                    : AnyTypeKind.ANY_OBJECT,\n+                    input.getKey());\n+        }\n+\n+        TO any = input;\n+\n+        for (LogicActions action : actions) {\n+            any = action.afterUpdate(any);\n+        }\n+\n+        ProvisioningResult<TO> result = new ProvisioningResult<>();\n+        result.setEntity(any);\n+        result.getPropagationStatuses().addAll(statuses);\n+\n+        return result;\n+    }\n+\n+    protected ProvisioningResult<TO> afterDelete(\n+            final TO input, final List<PropagationStatus> statuses, final List<LogicActions> actions) {\n+\n+        TO any = input;\n+\n+        for (LogicActions action : actions) {\n+            any = action.afterDelete(any);\n+        }\n+\n+        ProvisioningResult<TO> result = new ProvisioningResult<>();\n+        result.setEntity(any);\n+        result.getPropagationStatuses().addAll(statuses);\n+\n+        return result;\n+    }\n+\n     private static class StartsWithPredicate implements Predicate<String> {\n \n         private final Collection<String> targets;\n@@ -204,6 +251,14 @@ public boolean evaluate(final String target) {\n \n     }\n \n+    protected static class DynRealmsPredicate implements Predicate<String> {\n+\n+        @Override\n+        public boolean evaluate(final String realm) {\n+            return !realm.startsWith(\"/\");\n+        }\n+    }\n+\n     protected Set<String> getEffectiveRealms(final Set<String> allowedRealms, final String requestedRealm) {\n         Set<String> allowed = RealmUtils.normalize(allowedRealms);\n         Set<String> requested = new HashSet<>();\n@@ -214,18 +269,12 @@ protected Set<String> getEffectiveRealms(final Set<String> allowedRealms, final\n         CollectionUtils.select(allowed, new StartsWithPredicate(requested), effective);\n \n         // includes dynamic realms\n-        CollectionUtils.select(allowedRealms, new Predicate<String>() {\n-\n-            @Override\n-            public boolean evaluate(final String realm) {\n-                return !realm.startsWith(\"/\");\n-            }\n-        }, effective);\n+        CollectionUtils.select(allowedRealms, new DynRealmsPredicate(), effective);\n \n         return effective;\n     }\n \n-    protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n+    protected boolean securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n         boolean authorized = IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n \n             @Override\n@@ -243,13 +292,16 @@ public boolean evaluate(final String ownedRealm) {\n         }\n         if (!authorized) {\n             throw new DelegatedAdministrationException(\n+                    realm,\n                     this instanceof UserLogic\n                             ? AnyTypeKind.USER\n                             : this instanceof GroupLogic\n                                     ? AnyTypeKind.GROUP\n                                     : AnyTypeKind.ANY_OBJECT,\n                     key);\n         }\n+\n+        return IterableUtils.matchesAny(effectiveRealms, new DynRealmsPredicate());\n     }\n \n     public abstract Date findLastChange(String key);"},{"sha":"8805221bb9f0f8f465d51b3e25d96e47da1ee123","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Date;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -158,14 +159,15 @@ public ProvisioningResult<AnyObjectTO> create(final AnyObjectTO anyObjectTO, fin\n \n         Pair<String, List<PropagationStatus>> created = provisioningManager.create(before.getLeft(), nullPriorityAsync);\n \n-        return after(binder.getAnyObjectTO(created.getKey()), created.getRight(), before.getRight());\n+        return afterCreate(binder.getAnyObjectTO(created.getKey()), created.getRight(), before.getRight());\n     }\n \n     @Override\n     public ProvisioningResult<AnyObjectTO> update(\n             final AnyObjectPatch anyObjectPatch, final boolean nullPriorityAsync) {\n \n         AnyObjectTO anyObjectTO = binder.getAnyObjectTO(anyObjectPatch.getKey());\n+        Set<String> dynRealmsBefore = new HashSet<>(anyObjectTO.getDynRealms());\n         Pair<AnyObjectPatch, List<LogicActions>> before = beforeUpdate(anyObjectPatch, anyObjectTO.getRealm());\n \n         String realm =\n@@ -175,11 +177,16 @@ public ProvisioningResult<AnyObjectTO> update(\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n                 realm);\n-        securityChecks(effectiveRealms, realm, before.getLeft().getKey());\n+        boolean authDynRealms = securityChecks(effectiveRealms, realm, before.getLeft().getKey());\n \n         Pair<String, List<PropagationStatus>> updated = provisioningManager.update(anyObjectPatch, nullPriorityAsync);\n \n-        return after(binder.getAnyObjectTO(updated.getKey()), updated.getRight(), before.getRight());\n+        return afterUpdate(\n+                binder.getAnyObjectTO(updated.getKey()),\n+                updated.getRight(),\n+                before.getRight(),\n+                authDynRealms,\n+                dynRealmsBefore);\n     }\n \n     @Override\n@@ -197,7 +204,7 @@ public ProvisioningResult<AnyObjectTO> delete(final String key, final boolean nu\n         AnyObjectTO anyObjectTO = new AnyObjectTO();\n         anyObjectTO.setKey(before.getLeft().getKey());\n \n-        return after(anyObjectTO, statuses, before.getRight());\n+        return afterDelete(anyObjectTO, statuses, before.getRight());\n     }\n \n     @Override"},{"sha":"ca3e0803ef0070fcb63f08f428adefd4198ea354","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":28,"deletions":14,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Date;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -109,17 +110,22 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {\n     protected EntityFactory entityFactory;\n \n     @Override\n-    protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n-        if (!IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n+    protected boolean securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n+        boolean authorized = IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n \n             @Override\n             public boolean evaluate(final String ownedRealm) {\n                 return realm.startsWith(ownedRealm) || ownedRealm.equals(RealmUtils.getGroupOwnerRealm(realm, key));\n             }\n-        })) {\n-\n-            throw new DelegatedAdministrationException(AnyTypeKind.GROUP, key);\n+        });\n+        if (!authorized) {\n+            authorized = !CollectionUtils.intersection(groupDAO.findDynRealms(key), effectiveRealms).isEmpty();\n+        }\n+        if (!authorized) {\n+            throw new DelegatedAdministrationException(realm, AnyTypeKind.GROUP, key);\n         }\n+\n+        return IterableUtils.matchesAny(effectiveRealms, new AbstractAnyLogic.DynRealmsPredicate());\n     }\n \n     @Transactional(readOnly = true)\n@@ -239,25 +245,33 @@ public ProvisioningResult<GroupTO> create(final GroupTO groupTO, final boolean n\n         Pair<String, List<PropagationStatus>> created =\n                 provisioningManager.create(before.getLeft(), nullPriorityAsync);\n \n-        return after(binder.getGroupTO(created.getKey()), created.getRight(), before.getRight());\n+        return afterCreate(binder.getGroupTO(created.getKey()), created.getRight(), before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> update(final GroupPatch groupPatch, final boolean nullPriorityAsync) {\n         GroupTO groupTO = binder.getGroupTO(groupPatch.getKey());\n+        Set<String> dynRealmsBefore = new HashSet<>(groupTO.getDynRealms());\n         Pair<GroupPatch, List<LogicActions>> before = beforeUpdate(groupPatch, groupTO.getRealm());\n \n-        if (before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())) {\n-            Set<String> effectiveRealms = getEffectiveRealms(\n-                    AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n-                    before.getLeft().getRealm().getValue());\n-            securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n-        }\n+        String realm =\n+                before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())\n+                ? before.getLeft().getRealm().getValue()\n+                : groupTO.getRealm();\n+        Set<String> effectiveRealms = getEffectiveRealms(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n+                realm);\n+        boolean authDynRealms = securityChecks(effectiveRealms, realm, before.getLeft().getKey());\n \n         Pair<String, List<PropagationStatus>> updated = provisioningManager.update(groupPatch, nullPriorityAsync);\n \n-        return after(binder.getGroupTO(updated.getKey()), updated.getRight(), before.getRight());\n+        return afterUpdate(\n+                binder.getGroupTO(updated.getKey()),\n+                updated.getRight(),\n+                before.getRight(),\n+                authDynRealms,\n+                dynRealmsBefore);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_DELETE + \"')\")\n@@ -290,7 +304,7 @@ public String transform(final Group group) {\n         GroupTO groupTO = new GroupTO();\n         groupTO.setKey(before.getLeft().getKey());\n \n-        return after(groupTO, statuses, before.getRight());\n+        return afterDelete(groupTO, statuses, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")"},{"sha":"54a43f3bc608d101ada32d3b867a54fe42dd3ca2","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":18,"deletions":6,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","patch":"@@ -23,6 +23,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -203,7 +204,8 @@ protected ProvisioningResult<UserTO> doCreate(\n         Pair<String, List<PropagationStatus>> created =\n                 provisioningManager.create(before.getLeft(), storePassword, nullPriorityAsync);\n \n-        return after(binder.returnUserTO(binder.getUserTO(created.getKey())), created.getRight(), before.getRight());\n+        return afterCreate(\n+                binder.returnUserTO(binder.getUserTO(created.getKey())), created.getRight(), before.getRight());\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")\n@@ -223,21 +225,29 @@ protected ProvisioningResult<UserTO> doUpdate(\n             final UserPatch userPatch, final boolean self, final boolean nullPriorityAsync) {\n \n         UserTO userTO = binder.getUserTO(userPatch.getKey());\n+        Set<String> dynRealmsBefore = new HashSet<>(userTO.getDynRealms());\n         Pair<UserPatch, List<LogicActions>> before = beforeUpdate(userPatch, userTO.getRealm());\n \n+        boolean authDynRealms = false;\n         if (!self\n                 && before.getLeft().getRealm() != null\n                 && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())) {\n \n             Set<String> effectiveRealms = getEffectiveRealms(\n                     AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                     before.getLeft().getRealm().getValue());\n-            securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n+            authDynRealms =\n+                    securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n         }\n \n         Pair<String, List<PropagationStatus>> updated = provisioningManager.update(before.getLeft(), nullPriorityAsync);\n \n-        return after(binder.returnUserTO(binder.getUserTO(updated.getKey())), updated.getRight(), before.getRight());\n+        return afterUpdate(\n+                binder.returnUserTO(binder.getUserTO(updated.getKey())),\n+                updated.getRight(),\n+                before.getRight(),\n+                authDynRealms,\n+                dynRealmsBefore);\n     }\n \n     protected Pair<String, List<PropagationStatus>> setStatusOnWfAdapter(\n@@ -278,10 +288,12 @@ public ProvisioningResult<UserTO> status(final StatusPatch statusPatch, final bo\n         statusPatch.setKey(toUpdate.getKey());\n         Pair<String, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusPatch, nullPriorityAsync);\n \n-        return after(\n+        return afterUpdate(\n                 binder.returnUserTO(binder.getUserTO(updated.getKey())),\n                 updated.getRight(),\n-                Collections.<LogicActions>emptyList());\n+                Collections.<LogicActions>emptyList(),\n+                false,\n+                Collections.<String>emptySet());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"')\")\n@@ -371,7 +383,7 @@ public String transform(final Group group) {\n             deletedTO = binder.getUserTO(before.getLeft().getKey());\n         }\n \n-        return after(binder.returnUserTO(deletedTO), statuses, before.getRight());\n+        return afterDelete(binder.returnUserTO(deletedTO), statuses, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")"},{"sha":"01fb922a7e2d8f69a6287c2c83233fd616ffa985","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/SearchCondConverterTest.java","status":"modified","additions":61,"deletions":65,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java?ref=f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","patch":"@@ -43,231 +43,227 @@ public class SearchCondConverterTest {\n \n     @Test\n     public void eq() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"username\").equalTo(\"rossini\").query();\n-        assertEquals(\"username==rossini\", fiqlExpression);\n+        String fiql = new UserFiqlSearchConditionBuilder().is(\"username\").equalTo(\"rossini\").query();\n+        assertEquals(\"username==rossini\", fiql);\n \n         AnyCond attrCond = new AnyCond(AttributeCond.Type.EQ);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"rossini\");\n         SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void ieq() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().\n-                is(\"username\").equalToIgnoreCase(\"rossini\").query();\n-        assertEquals(\"username=~rossini\", fiqlExpression);\n+        String fiql = new UserFiqlSearchConditionBuilder().is(\"username\").equalToIgnoreCase(\"rossini\").query();\n+        assertEquals(\"username=~rossini\", fiql);\n \n         AnyCond attrCond = new AnyCond(AttributeCond.Type.IEQ);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"rossini\");\n         SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void nieq() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().\n-                is(\"username\").notEqualTolIgnoreCase(\"rossini\").query();\n-        assertEquals(\"username!~rossini\", fiqlExpression);\n+        String fiql = new UserFiqlSearchConditionBuilder().is(\"username\").notEqualTolIgnoreCase(\"rossini\").query();\n+        assertEquals(\"username!~rossini\", fiql);\n \n         AnyCond attrCond = new AnyCond(AttributeCond.Type.IEQ);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"rossini\");\n         SearchCond simpleCond = SearchCond.getNotLeafCond(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void like() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"username\").equalTo(\"ros*\").query();\n-        assertEquals(\"username==ros*\", fiqlExpression);\n+        String fiql = new UserFiqlSearchConditionBuilder().is(\"username\").equalTo(\"ros*\").query();\n+        assertEquals(\"username==ros*\", fiql);\n \n         AttributeCond attrCond = new AnyCond(AttributeCond.Type.LIKE);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"ros%\");\n         SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void ilike() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"username\").\n-                equalToIgnoreCase(\"ros*\").query();\n-        assertEquals(\"username=~ros*\", fiqlExpression);\n+        String fiql = new UserFiqlSearchConditionBuilder().is(\"username\").equalToIgnoreCase(\"ros*\").query();\n+        assertEquals(\"username=~ros*\", fiql);\n \n         AttributeCond attrCond = new AnyCond(AttributeCond.Type.ILIKE);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"ros%\");\n         SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void nilike() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"username\").notEqualTolIgnoreCase(\"ros*\").\n-                query();\n-        assertEquals(\"username!~ros*\", fiqlExpression);\n+        String fiql = new UserFiqlSearchConditionBuilder().is(\"username\").notEqualTolIgnoreCase(\"ros*\").query();\n+        assertEquals(\"username!~ros*\", fiql);\n \n         AttributeCond attrCond = new AnyCond(AttributeCond.Type.ILIKE);\n         attrCond.setSchema(\"username\");\n         attrCond.setExpression(\"ros%\");\n         SearchCond simpleCond = SearchCond.getNotLeafCond(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void isNull() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"loginDate\").nullValue().query();\n-        assertEquals(\"loginDate==\" + SpecialAttr.NULL, fiqlExpression);\n+        String fiql = new UserFiqlSearchConditionBuilder().is(\"loginDate\").nullValue().query();\n+        assertEquals(\"loginDate==\" + SpecialAttr.NULL, fiql);\n \n         AttributeCond attrCond = new AttributeCond(AttributeCond.Type.ISNULL);\n         attrCond.setSchema(\"loginDate\");\n         SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void isNotNull() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().is(\"loginDate\").notNullValue().query();\n-        assertEquals(\"loginDate!=\" + SpecialAttr.NULL, fiqlExpression);\n+        String fiql = new UserFiqlSearchConditionBuilder().is(\"loginDate\").notNullValue().query();\n+        assertEquals(\"loginDate!=\" + SpecialAttr.NULL, fiql);\n \n         AttributeCond attrCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n         attrCond.setSchema(\"loginDate\");\n         SearchCond simpleCond = SearchCond.getLeafCond(attrCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void relationships() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().\n+        String fiql = new UserFiqlSearchConditionBuilder().\n                 inRelationships(\"ca20ffca-1305-442f-be9a-3723a0cd88ca\").query();\n-        assertEquals(SpecialAttr.RELATIONSHIPS + \"==ca20ffca-1305-442f-be9a-3723a0cd88ca\", fiqlExpression);\n+        assertEquals(SpecialAttr.RELATIONSHIPS + \"==ca20ffca-1305-442f-be9a-3723a0cd88ca\", fiql);\n \n         RelationshipCond relationshipCond = new RelationshipCond();\n         relationshipCond.setAnyObject(\"ca20ffca-1305-442f-be9a-3723a0cd88ca\");\n         SearchCond simpleCond = SearchCond.getLeafCond(relationshipCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void relationshipTypes() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().inRelationshipTypes(\"type1\").query();\n-        assertEquals(SpecialAttr.RELATIONSHIP_TYPES + \"==type1\", fiqlExpression);\n+        String fiql = new UserFiqlSearchConditionBuilder().inRelationshipTypes(\"type1\").query();\n+        assertEquals(SpecialAttr.RELATIONSHIP_TYPES + \"==type1\", fiql);\n \n         RelationshipTypeCond relationshipCond = new RelationshipTypeCond();\n         relationshipCond.setRelationshipTypeKey(\"type1\");\n         SearchCond simpleCond = SearchCond.getLeafCond(relationshipCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n \n-        fiqlExpression = new AnyObjectFiqlSearchConditionBuilder(\"PRINTER\").inRelationshipTypes(\"neighborhood\").query();\n+        fiql = new AnyObjectFiqlSearchConditionBuilder(\"PRINTER\").inRelationshipTypes(\"neighborhood\").query();\n         assertEquals(\n                 SpecialAttr.RELATIONSHIP_TYPES + \"==neighborhood;\" + SpecialAttr.TYPE + \"==PRINTER\",\n-                fiqlExpression);\n+                fiql);\n     }\n \n     @Test\n     public void groups() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().\n+        String fiql = new UserFiqlSearchConditionBuilder().\n                 inGroups(\"e7ff94e8-19c9-4f0a-b8b7-28327edbf6ed\").query();\n-        assertEquals(SpecialAttr.GROUPS + \"==e7ff94e8-19c9-4f0a-b8b7-28327edbf6ed\", fiqlExpression);\n+        assertEquals(SpecialAttr.GROUPS + \"==e7ff94e8-19c9-4f0a-b8b7-28327edbf6ed\", fiql);\n \n         MembershipCond groupCond = new MembershipCond();\n         groupCond.setGroup(\"e7ff94e8-19c9-4f0a-b8b7-28327edbf6ed\");\n         SearchCond simpleCond = SearchCond.getLeafCond(groupCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void roles() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().inRoles(\"User reviewer\").query();\n-        assertEquals(SpecialAttr.ROLES + \"==User reviewer\", fiqlExpression);\n+        String fiql = new UserFiqlSearchConditionBuilder().inRoles(\"User reviewer\").query();\n+        assertEquals(SpecialAttr.ROLES + \"==User reviewer\", fiql);\n \n         RoleCond roleCond = new RoleCond();\n         roleCond.setRole(\"User reviewer\");\n         SearchCond simpleCond = SearchCond.getLeafCond(roleCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void dynRealms() {\n         String dynRealm = UUID.randomUUID().toString();\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().inDynRealms(dynRealm).query();\n-        assertEquals(SpecialAttr.DYNREALMS + \"==\" + dynRealm, fiqlExpression);\n+        String fiql = new UserFiqlSearchConditionBuilder().inDynRealms(dynRealm).query();\n+        assertEquals(SpecialAttr.DYNREALMS + \"==\" + dynRealm, fiql);\n \n         DynRealmCond dynRealmCond = new DynRealmCond();\n         dynRealmCond.setDynRealm(dynRealm);\n         SearchCond simpleCond = SearchCond.getLeafCond(dynRealmCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void resources() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().hasResources(\"resource-ldap\").query();\n-        assertEquals(SpecialAttr.RESOURCES + \"==resource-ldap\", fiqlExpression);\n+        String fiql = new UserFiqlSearchConditionBuilder().hasResources(\"resource-ldap\").query();\n+        assertEquals(SpecialAttr.RESOURCES + \"==resource-ldap\", fiql);\n \n         ResourceCond resCond = new ResourceCond();\n         resCond.setResourceKey(\"resource-ldap\");\n         SearchCond simpleCond = SearchCond.getLeafCond(resCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void assignable() {\n-        String fiqlExpression = new GroupFiqlSearchConditionBuilder().isAssignable().query();\n-        assertEquals(SpecialAttr.ASSIGNABLE + \"==\" + SpecialAttr.NULL, fiqlExpression);\n+        String fiql = new GroupFiqlSearchConditionBuilder().isAssignable().query();\n+        assertEquals(SpecialAttr.ASSIGNABLE + \"==\" + SpecialAttr.NULL, fiql);\n \n         AssignableCond assignableCond = new AssignableCond();\n         assignableCond.setRealmFullPath(\"/even/two\");\n         SearchCond simpleCond = SearchCond.getLeafCond(assignableCond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression, \"/even/two\"));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql, \"/even/two\"));\n     }\n \n     @Test\n     public void type() {\n-        String fiqlExpression = new AnyObjectFiqlSearchConditionBuilder(\"PRINTER\").query();\n-        assertEquals(SpecialAttr.TYPE + \"==PRINTER\", fiqlExpression);\n+        String fiql = new AnyObjectFiqlSearchConditionBuilder(\"PRINTER\").query();\n+        assertEquals(SpecialAttr.TYPE + \"==PRINTER\", fiql);\n \n         AnyTypeCond acond = new AnyTypeCond();\n         acond.setAnyTypeKey(\"PRINTER\");\n         SearchCond simpleCond = SearchCond.getLeafCond(acond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void member() {\n-        String fiqlExpression = new GroupFiqlSearchConditionBuilder().withMembers(\"rossini\").query();\n-        assertEquals(SpecialAttr.MEMBER + \"==rossini\", fiqlExpression);\n+        String fiql = new GroupFiqlSearchConditionBuilder().withMembers(\"rossini\").query();\n+        assertEquals(SpecialAttr.MEMBER + \"==rossini\", fiql);\n \n         MemberCond mcond = new MemberCond();\n         mcond.setMember(\"rossini\");\n         SearchCond simpleCond = SearchCond.getLeafCond(mcond);\n \n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void and() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().\n+        String fiql = new UserFiqlSearchConditionBuilder().\n                 is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query();\n-        assertEquals(\"fullname==*o*;fullname==*i*\", fiqlExpression);\n+        assertEquals(\"fullname==*o*;fullname==*i*\", fiql);\n \n         AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n         fullnameLeafCond1.setSchema(\"fullname\");\n@@ -279,17 +275,17 @@ public void and() {\n                 SearchCond.getLeafCond(fullnameLeafCond1),\n                 SearchCond.getLeafCond(fullnameLeafCond2));\n \n-        assertEquals(andCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(andCond, SearchCondConverter.convert(fiql));\n     }\n \n     @Test\n     public void or() {\n-        String fiqlExpression = new UserFiqlSearchConditionBuilder().\n+        String fiql = new UserFiqlSearchConditionBuilder().\n                 is(\"fullname\").equalTo(\"*o*\", \"*i*\", \"*ini\").query();\n-        assertEquals(\"fullname==*o*,fullname==*i*,fullname==*ini\", fiqlExpression);\n-        fiqlExpression = new UserFiqlSearchConditionBuilder().\n+        assertEquals(\"fullname==*o*,fullname==*i*,fullname==*ini\", fiql);\n+        fiql = new UserFiqlSearchConditionBuilder().\n                 is(\"fullname\").equalTo(\"*o*\").or(\"fullname\").equalTo(\"*i*\").or(\"fullname\").equalTo(\"*ini\").query();\n-        assertEquals(\"fullname==*o*,fullname==*i*,fullname==*ini\", fiqlExpression);\n+        assertEquals(\"fullname==*o*,fullname==*i*,fullname==*ini\", fiql);\n \n         AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n         fullnameLeafCond1.setSchema(\"fullname\");\n@@ -306,7 +302,7 @@ public void or() {\n                         SearchCond.getLeafCond(fullnameLeafCond2),\n                         SearchCond.getLeafCond(fullnameLeafCond3)));\n \n-        assertEquals(orCond, SearchCondConverter.convert(fiqlExpression));\n+        assertEquals(orCond, SearchCondConverter.convert(fiql));\n     }\n \n }"},{"sha":"3cf437605d22a94d20b61cdd6018fa3fce10062d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","patch":"@@ -147,7 +147,8 @@ public boolean evaluate(final String realm) {\n             authorized = !CollectionUtils.intersection(findDynRealms(anyObject.getKey()), authRealms).isEmpty();\n         }\n         if (authRealms == null || authRealms.isEmpty() || !authorized) {\n-            throw new DelegatedAdministrationException(AnyTypeKind.ANY_OBJECT, anyObject.getKey());\n+            throw new DelegatedAdministrationException(\n+                    anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT, anyObject.getKey());\n         }\n     }\n "},{"sha":"4c79d1bd4d31654428e5bb2d773bc2f539e1a014","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","patch":"@@ -171,7 +171,8 @@ public boolean evaluate(final String realm) {\n         }\n \n         if (authRealms == null || authRealms.isEmpty() || !authorized) {\n-            throw new DelegatedAdministrationException(AnyTypeKind.GROUP, group.getKey());\n+            throw new DelegatedAdministrationException(\n+                    group.getRealm().getFullPath(), AnyTypeKind.GROUP, group.getKey());\n         }\n     }\n "},{"sha":"f3ada03be828d731d7285341e404b1db7069c2df","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","patch":"@@ -190,7 +190,8 @@ public boolean evaluate(final String realm) {\n                 authorized = !CollectionUtils.intersection(findDynRealms(user.getKey()), authRealms).isEmpty();\n             }\n             if (authRealms == null || authRealms.isEmpty() || !authorized) {\n-                throw new DelegatedAdministrationException(AnyTypeKind.USER, user.getKey());\n+                throw new DelegatedAdministrationException(\n+                        user.getRealm().getFullPath(), AnyTypeKind.USER, user.getKey());\n             }\n         }\n     }"},{"sha":"718216e769638560fe69b96b57a8ed3e1d88ad2f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","patch":"@@ -99,7 +99,9 @@ public Response toResponse(final Exception ex) {\n             builder = sce.isComposite()\n                     ? getSyncopeClientCompositeExceptionResponse(sce.asComposite())\n                     : getSyncopeClientExceptionResponse(sce);\n-        } else if (ex instanceof DelegatedAdministrationException) {\n+        } else if (ex instanceof DelegatedAdministrationException\n+                || ExceptionUtils.getRootCause(ex) instanceof DelegatedAdministrationException) {\n+\n             builder = builder(ClientExceptionType.DelegatedAdministration, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof EntityExistsException || ex instanceof DuplicateException\n                 || ex instanceof PersistenceException && ex.getCause() instanceof EntityExistsException) {"},{"sha":"0ee414acf83bfa9fe9375be9e21d93e892ad5430","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DelegatedAdministrationException.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDelegatedAdministrationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDelegatedAdministrationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDelegatedAdministrationException.java?ref=f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","patch":"@@ -24,10 +24,14 @@ public class DelegatedAdministrationException extends RuntimeException {\n \n     private static final long serialVersionUID = 7540587364235915081L;\n \n-    public DelegatedAdministrationException(final AnyTypeKind type, final String key) {\n-        super(\"Missing entitlement or realm administration for \"\n+    public DelegatedAdministrationException(final String realm, final AnyTypeKind type, final String key) {\n+        super(\"Missing entitlement or realm administration under \" + realm + \" for \"\n                 + (key == null\n                         ? \"new \" + type\n                         : type + \" \" + key));\n     }\n+\n+    public DelegatedAdministrationException(final AnyTypeKind type, final String key) {\n+        super(\"The requested UPDATE would alter the set of dynamic realms for \" + type + \" \" + key);\n+    }\n }"},{"sha":"caf162395bdc494803ec5b8a2e9fa851cad23adb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f74ce5dee37f7e5157a3c84f00119d2ffa422e6f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=f74ce5dee37f7e5157a3c84f00119d2ffa422e6f","patch":"@@ -41,6 +41,7 @@\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n@@ -182,6 +183,18 @@ public boolean evaluate(final UserTO object) {\n             // USER_UPDATE\n             UserPatch userPatch = new UserPatch();\n             userPatch.setKey(userKey);\n+            userPatch.getResources().add(new StringPatchItem.Builder().\n+                    value(RESOURCE_NAME_LDAP).operation(PatchOperation.DELETE).build());\n+            // this will fail because unassigning resource-ldap would result in removing the user\n+            // from the dynamic realm\n+            try {\n+                delegatedUserService.update(userPatch);\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n+            }\n+            // this will succeed instead\n+            userPatch.getResources().clear();\n             userPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_NOPROPAGATION).build());\n             user = delegatedUserService.update(userPatch).\n                     readEntity(new GenericType<ProvisioningResult<UserTO>>() {"}]}