{"sha":"33e36297fe1ad7447a868d6f457fdca5231e6b4a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMzZTM2Mjk3ZmUxYWQ3NDQ3YTg2OGQ2ZjQ1N2ZkY2E1MjMxZTZiNGE=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2019-11-28T08:48:28Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2019-11-28T09:31:27Z"},"message":"SYNCOPE-1511: Enhance audit queries with additional params","tree":{"sha":"798d3d02011540fc62d234f0e545571ca95e78ad","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/798d3d02011540fc62d234f0e545571ca95e78ad"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/33e36297fe1ad7447a868d6f457fdca5231e6b4a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/33e36297fe1ad7447a868d6f457fdca5231e6b4a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/33e36297fe1ad7447a868d6f457fdca5231e6b4a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/33e36297fe1ad7447a868d6f457fdca5231e6b4a/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5d3ab984ff2135d6bf9aded85e98fdf7faa5883c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5d3ab984ff2135d6bf9aded85e98fdf7faa5883c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5d3ab984ff2135d6bf9aded85e98fdf7faa5883c"}],"stats":{"total":231,"additions":173,"deletions":58},"files":[{"sha":"d5dcd1ae4e2c888dc4b9ec4550f35531102822da","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AuditQuery.java","status":"modified","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33e36297fe1ad7447a868d6f457fdca5231e6b4a/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33e36297fe1ad7447a868d6f457fdca5231e6b4a/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java?ref=33e36297fe1ad7447a868d6f457fdca5231e6b4a","patch":"@@ -18,14 +18,23 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n+import org.apache.syncope.common.lib.types.AuditElements;\n+\n import javax.ws.rs.QueryParam;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n public class AuditQuery extends AbstractQuery {\n \n     private static final long serialVersionUID = -2863334226169614417L;\n \n     private String key;\n \n+    private final List<AuditElements.Result> results = new ArrayList<>();\n+\n+    private final List<String> events = new ArrayList<>();\n+\n     public String getKey() {\n         return key;\n     }\n@@ -35,13 +44,55 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n+    public List<AuditElements.Result> getResults() {\n+        return results;\n+    }\n+\n+    @QueryParam(\"results\")\n+    public void setResults(final List<AuditElements.Result> results) {\n+        if (results != null) {\n+            this.results.addAll(results);\n+        }\n+    }\n+\n+    public List<String> getEvents() {\n+        return events;\n+    }\n+\n+    @QueryParam(\"events\")\n+    public void setEvents(final List<String> events) {\n+        if (events != null) {\n+            this.events.addAll(events);\n+        }\n+    }\n+\n     public static class Builder extends AbstractQuery.Builder<AuditQuery, Builder> {\n \n         public Builder key(final String keyword) {\n             getInstance().setKey(keyword);\n             return this;\n         }\n \n+        public Builder results(final List<AuditElements.Result> results) {\n+            getInstance().setResults(results);\n+            return this;\n+        }\n+\n+        public Builder result(final AuditElements.Result result) {\n+            getInstance().getResults().add(result);\n+            return this;\n+        }\n+\n+        public Builder events(final List<String> events) {\n+            getInstance().setEvents(events);\n+            return this;\n+        }\n+\n+        public Builder event(final String event) {\n+            getInstance().getEvents().add(event);\n+            return this;\n+        }\n+\n         @Override\n         protected AuditQuery newInstance() {\n             return new AuditQuery();"},{"sha":"f730de25e4f32f5adee6da54f7f0b4d4e723a5df","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AuditLogic.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java?ref=33e36297fe1ad7447a868d6f457fdca5231e6b4a","patch":"@@ -24,6 +24,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AuditEntryTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.core.persistence.api.dao.AuditDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n@@ -48,14 +49,16 @@ public Pair<Integer, List<AuditEntryTO>> search(\n             final String key,\n             final int page,\n             final int size,\n+            final List<AuditElements.Result> results,\n+            final List<String> events,\n             final List<OrderByClause> orderByClauses) {\n \n         Integer count = auditDAO.count(key);\n-        List<AuditEntry> matching = auditDAO.findByEntityKey(key, page, size, orderByClauses);\n-        List<AuditEntryTO> results = matching.stream().\n-                map(audit -> binder.returnAuditTO(binder.getAuditTO(audit))).\n+        List<AuditEntry> matching = auditDAO.findByEntityKey(key, page, size, results, events, orderByClauses);\n+        List<AuditEntryTO> searchResults = matching.stream().\n+                map(binder::getAuditTO).\n                 collect(Collectors.toList());\n-        return Pair.of(count, results);\n+        return Pair.of(count, searchResults);\n     }\n \n     @Override"},{"sha":"67126f71d3875e572a1f9349aa820b118971761a","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AuditServiceImpl.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java?ref=33e36297fe1ad7447a868d6f457fdca5231e6b4a","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AuditEntryTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -28,6 +27,8 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n+import java.util.List;\n+\n @Service\n public class AuditServiceImpl extends AbstractServiceImpl implements AuditService {\n \n@@ -40,8 +41,9 @@ public PagedResult<AuditEntryTO> search(final AuditQuery auditQuery) {\n                 auditQuery.getKey(),\n                 auditQuery.getPage(),\n                 auditQuery.getSize(),\n+                auditQuery.getResults(),\n+                auditQuery.getEvents(),\n                 getOrderByClauses(auditQuery.getOrderBy()));\n-\n         return buildPagedResult(result.getRight(), auditQuery.getPage(), auditQuery.getSize(), result.getLeft());\n     }\n }"},{"sha":"3f1994c527376017262bf99744dab64e8d685c1a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AuditDAO.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditDAO.java?ref=33e36297fe1ad7447a868d6f457fdca5231e6b4a","patch":"@@ -20,14 +20,18 @@\n \n import java.util.List;\n \n+import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n \n public interface AuditDAO {\n \n     String TABLE_NAME = \"SYNCOPEAUDIT\";\n \n-    List<AuditEntry> findByEntityKey(String key, int page, int size, List<OrderByClause> orderByClauses);\n+    List<AuditEntry> findByEntityKey(String key, int page, int size,\n+                                     List<AuditElements.Result> results,\n+                                     List<String> events,\n+                                     List<OrderByClause> orderByClauses);\n \n     Integer count(String key);\n }"},{"sha":"1fd173ce222f70ddbd8a4a8d5ac3cff47f162f9c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAuditDAO.java","status":"modified","additions":43,"deletions":1,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditDAO.java?ref=33e36297fe1ad7447a868d6f457fdca5231e6b4a","patch":"@@ -26,6 +26,7 @@\n import java.util.Objects;\n import java.util.stream.Collectors;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.core.persistence.api.dao.AuditDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n@@ -54,10 +55,17 @@ public List<AuditEntry> findByEntityKey(\n             final String key,\n             final int page,\n             final int itemsPerPage,\n+            final List<AuditElements.Result> results,\n+            final List<String> events,\n             final List<OrderByClause> orderByClauses) {\n \n         try {\n-            String queryString = \"SELECT * FROM \" + AuditDAO.TABLE_NAME + buildWhereClauseForEntityKey(key);\n+            String query = new MessageCriteriaBuilder().\n+                    results(results).\n+                    events(events).\n+                    key(key).\n+                    build();\n+            String queryString = \"SELECT * FROM \" + TABLE_NAME + \" WHERE \" + query;\n             if (!orderByClauses.isEmpty()) {\n                 queryString += \" ORDER BY \" + orderByClauses.stream().\n                         map(orderBy -> orderBy.getField() + ' ' + orderBy.getDirection().name()).\n@@ -100,4 +108,38 @@ private JdbcTemplate getJdbcTemplate() {\n         }\n         return new JdbcTemplate(datasource);\n     }\n+\n+    private static class MessageCriteriaBuilder {\n+\n+        private final StringBuilder query = new StringBuilder(\" 1=1 \");\n+\n+        public MessageCriteriaBuilder key(final String key) {\n+            query.append(\" AND MESSAGE LIKE '%\\\"key\\\":\\\"\").append(key).append(\"\\\"%' \");\n+            return this;\n+        }\n+\n+        public MessageCriteriaBuilder results(final List<AuditElements.Result> results) {\n+            buildCriteriaFor(results.stream().map(Enum::name).collect(Collectors.toList()), \"result\");\n+            return this;\n+        }\n+\n+        private void buildCriteriaFor(final List<String> items, final String field) {\n+            if (!items.isEmpty()) {\n+                query.append(\" AND ( \");\n+                query.append(items.stream().map(res -> \"MESSAGE LIKE '%\\\"\" + field + \"\\\":\\\"\" + res + \"\\\"%'\").\n+                        collect(Collectors.joining(\" OR \")));\n+                query.append(\" )\");\n+            }\n+        }\n+\n+        public MessageCriteriaBuilder events(final List<String> events) {\n+            buildCriteriaFor(events, \"event\");\n+            return this;\n+        }\n+\n+        public String build() {\n+            query.trimToSize();\n+            return query.toString();\n+        }\n+    }\n }"},{"sha":"2d6d1183c7e4cd6fbf07d7be7f046e12b199efcc","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AuditEntryImpl.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImpl.java?ref=33e36297fe1ad7447a868d6f457fdca5231e6b4a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n+import java.util.Date;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -28,8 +29,6 @@\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n \n-import java.util.Date;\n-\n public class AuditEntryImpl implements AuditEntry {\n \n     private static final long serialVersionUID = -2299082316063743582L;\n@@ -51,14 +50,14 @@ public class AuditEntryImpl implements AuditEntry {\n     private Date date;\n \n     private String key;\n-    \n+\n     @JsonCreator\n     public AuditEntryImpl(\n-        @JsonProperty(\"who\") final String who,\n-        @JsonProperty(\"logger\") final AuditLoggerName logger,\n-        @JsonProperty(\"before\") final Object before,\n-        @JsonProperty(\"output\") final Object output,\n-        @JsonProperty(\"input\") final Object[] input) {\n+            @JsonProperty(\"who\") final String who,\n+            @JsonProperty(\"logger\") final AuditLoggerName logger,\n+            @JsonProperty(\"before\") final Object before,\n+            @JsonProperty(\"output\") final Object output,\n+            @JsonProperty(\"input\") final Object[] input) {\n \n         super();\n \n@@ -160,6 +159,7 @@ public static Builder builder() {\n     }\n \n     public static final class Builder {\n+\n         private String who;\n \n         private AuditLoggerName logger;"},{"sha":"2f793885cff289799c3142114990c3d94a87ea59","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AuditDataBinder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuditDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuditDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuditDataBinder.java?ref=33e36297fe1ad7447a868d6f457fdca5231e6b4a","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n \n public interface AuditDataBinder {\n-    AuditEntryTO getAuditTO(AuditEntry application);\n \n-    AuditEntryTO returnAuditTO(AuditEntryTO user);\n+    AuditEntryTO getAuditTO(AuditEntry auditEntry);\n }"},{"sha":"d5b9df65fdfdd5182a99a019750d8763cbb878f3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAuditManager.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java?ref=33e36297fe1ad7447a868d6f457fdca5231e6b4a","patch":"@@ -49,10 +49,10 @@ public boolean auditRequested(\n             final String subcategory,\n             final String event) {\n \n-        AuditEntry auditEntry = AuditEntryImpl.builder()\n-            .who(who)\n-            .logger(new AuditLoggerName(type, category, subcategory, event, Result.SUCCESS))\n-            .build();\n+        AuditEntry auditEntry = AuditEntryImpl.builder().\n+                who(who).\n+                logger(new AuditLoggerName(type, category, subcategory, event, Result.SUCCESS)).\n+                build();\n         org.apache.syncope.core.persistence.api.entity.Logger syncopeLogger =\n                 loggerDAO.find(auditEntry.getLogger().toLoggerName());\n         boolean auditRequested = syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG;\n@@ -62,9 +62,9 @@ public boolean auditRequested(\n         }\n \n         auditEntry = AuditEntryImpl.builder()\n-            .who(who)\n-            .logger(new AuditLoggerName(type, category, subcategory, event, Result.FAILURE))\n-            .build();\n+                .who(who)\n+                .logger(new AuditLoggerName(type, category, subcategory, event, Result.FAILURE))\n+                .build();\n         syncopeLogger = loggerDAO.find(auditEntry.getLogger().toLoggerName());\n         auditRequested = syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG;\n \n@@ -104,14 +104,14 @@ public void audit(\n             throwable = (Throwable) output;\n         }\n \n-        AuditEntry auditEntry = AuditEntryImpl.builder()\n-            .who(who)\n-            .logger(new AuditLoggerName(type, category, subcategory, event, condition))\n-            .before(before)\n-            .output(throwable == null ? output : throwable.getMessage())\n-            .input(input)\n-            .build();\n-        \n+        AuditEntry auditEntry = AuditEntryImpl.builder().\n+                who(who).\n+                logger(new AuditLoggerName(type, category, subcategory, event, condition)).\n+                before(before).\n+                output(throwable == null ? output : throwable.getMessage()).\n+                input(input).\n+                build();\n+\n         org.apache.syncope.core.persistence.api.entity.Logger syncopeLogger =\n                 loggerDAO.find(auditEntry.getLogger().toLoggerName());\n         if (syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG) {"},{"sha":"8d74e110830738b849656edcada422fe0a3c5c39","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuditDataBinderImpl.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java?ref=33e36297fe1ad7447a868d6f457fdca5231e6b4a","patch":"@@ -19,12 +19,12 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Arrays;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n-import org.apache.commons.lang3.builder.ToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.syncope.common.lib.to.AuditEntryTO;\n import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n import org.apache.syncope.core.provisioning.api.data.AuditDataBinder;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -47,24 +47,20 @@ public AuditEntryTO getAuditTO(final AuditEntry auditEntry) {\n         }\n \n         if (auditEntry.getBefore() != null) {\n-            auditTO.setBefore(ToStringBuilder.reflectionToString(auditEntry.getBefore(), ToStringStyle.JSON_STYLE));\n+            auditTO.setBefore(POJOHelper.serialize(auditEntry.getBefore()));\n         }\n \n         if (auditEntry.getInput() != null) {\n             auditTO.getInputs().addAll(Arrays.stream(auditEntry.getInput()).\n-                    map(input -> ToStringBuilder.reflectionToString(input, ToStringStyle.JSON_STYLE)).\n+                    filter(Objects::nonNull).\n+                    map(POJOHelper::serialize).\n                     collect(Collectors.toList()));\n         }\n \n         if (auditEntry.getOutput() != null) {\n-            auditTO.setOutput(ToStringBuilder.reflectionToString(auditEntry.getOutput(), ToStringStyle.JSON_STYLE));\n+            auditTO.setOutput(POJOHelper.serialize(auditEntry.getOutput()));\n         }\n \n         return auditTO;\n     }\n-\n-    @Override\n-    public AuditEntryTO returnAuditTO(final AuditEntryTO auditEntryTO) {\n-        return auditEntryTO;\n-    }\n }"},{"sha":"4529a0aea6eea005507d11c2aa64778c1689f6a2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/AuditReportlet.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33e36297fe1ad7447a868d6f457fdca5231e6b4a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java?ref=33e36297fe1ad7447a868d6f457fdca5231e6b4a","patch":"@@ -23,8 +23,6 @@\n import java.util.concurrent.atomic.AtomicReference;\n import javax.sql.DataSource;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.builder.ToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.syncope.common.lib.report.AuditReportletConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n@@ -89,8 +87,7 @@ private void doExtractConf(final ContentHandler handler, final AtomicReference<S\n             handler.endElement(\"\", \"\", \"logger\");\n \n             if (auditEntry.getBefore() != null) {\n-                char[] before = ToStringBuilder.reflectionToString(\n-                        auditEntry.getBefore(), ToStringStyle.JSON_STYLE).toCharArray();\n+                char[] before = POJOHelper.serialize(auditEntry.getBefore()).toCharArray();\n                 handler.startElement(\"\", \"\", \"before\", null);\n                 handler.characters(before, 0, before.length);\n                 handler.endElement(\"\", \"\", \"before\");\n@@ -99,8 +96,7 @@ private void doExtractConf(final ContentHandler handler, final AtomicReference<S\n             if (auditEntry.getInput() != null) {\n                 handler.startElement(\"\", \"\", \"inputs\", null);\n                 for (Object inputObj : auditEntry.getInput()) {\n-                    char[] input = ToStringBuilder.reflectionToString(\n-                            inputObj, ToStringStyle.JSON_STYLE).toCharArray();\n+                    char[] input = POJOHelper.serialize(inputObj).toCharArray();\n                     handler.startElement(\"\", \"\", \"input\", null);\n                     handler.characters(input, 0, input.length);\n                     handler.endElement(\"\", \"\", \"input\");\n@@ -109,8 +105,7 @@ private void doExtractConf(final ContentHandler handler, final AtomicReference<S\n             }\n \n             if (auditEntry.getOutput() != null) {\n-                char[] output = ToStringBuilder.reflectionToString(\n-                        auditEntry.getOutput(), ToStringStyle.JSON_STYLE).toCharArray();\n+                char[] output = POJOHelper.serialize(auditEntry.getOutput()).toCharArray();\n                 handler.startElement(\"\", \"\", \"output\", null);\n                 handler.characters(output, 0, output.length);\n                 handler.endElement(\"\", \"\", \"output\");"},{"sha":"d8fc20a7270c7c0b11e930eec29e945652b82b4c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":30,"deletions":7,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33e36297fe1ad7447a868d6f457fdca5231e6b4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33e36297fe1ad7447a868d6f457fdca5231e6b4a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=33e36297fe1ad7447a868d6f457fdca5231e6b4a","patch":"@@ -25,15 +25,15 @@\n import java.util.List;\n import org.apache.syncope.common.lib.to.AuditEntryTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.rest.api.beans.AuditQuery;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n \n public class AuditITCase extends AbstractITCase {\n \n-    private AuditEntryTO query(final String key, final int maxWaitSeconds) {\n+    private AuditEntryTO query(final AuditQuery query, final int maxWaitSeconds) {\n         int i = 0;\n         List<AuditEntryTO> results = List.of();\n         do {\n@@ -42,13 +42,12 @@ private AuditEntryTO query(final String key, final int maxWaitSeconds) {\n             } catch (InterruptedException e) {\n             }\n \n-            results = auditService.search(new AuditQuery.Builder().\n-                    key(key).orderBy(\"event_date desc\").page(1).size(1).build()).getResult();\n+            results = auditService.search(query).getResult();\n \n             i++;\n         } while (results.isEmpty() && i < maxWaitSeconds);\n         if (results.isEmpty()) {\n-            fail(\"Timeout when executing query for key \" + key);\n+            fail(\"Timeout when executing query for key \" + query.getKey());\n         }\n \n         return results.get(0);\n@@ -59,7 +58,28 @@ public void findByUser() {\n         UserTO userTO = createUser(UserITCase.getUniqueSample(\"audit@syncope.org\")).getEntity();\n         assertNotNull(userTO.getKey());\n \n-        AuditEntryTO entry = query(userTO.getKey(), 50);\n+        AuditQuery query = new AuditQuery.Builder().\n+                key(userTO.getKey()).orderBy(\"event_date desc\").\n+                page(1).size(1).build();\n+        AuditEntryTO entry = query(query, 50);\n+        assertEquals(userTO.getKey(), entry.getKey());\n+        userService.delete(userTO.getKey());\n+    }\n+\n+    @Test\n+    public void findByUserAndByEventAndByResults() {\n+        UserTO userTO = createUser(UserITCase.getUniqueSample(\"audit-2@syncope.org\")).getEntity();\n+        assertNotNull(userTO.getKey());\n+\n+        AuditQuery query = new AuditQuery.Builder().\n+                key(userTO.getKey()).\n+                orderBy(\"event_date desc\").\n+                page(1).\n+                size(1).\n+                event(\"create\").\n+                result(AuditElements.Result.SUCCESS).\n+                build();\n+        AuditEntryTO entry = query(query, 50);\n         assertEquals(userTO.getKey(), entry.getKey());\n         userService.delete(userTO.getKey());\n     }\n@@ -69,7 +89,10 @@ public void findByGroup() {\n         GroupTO groupTO = createGroup(GroupITCase.getBasicSample(\"AuditGroup\")).getEntity();\n         assertNotNull(groupTO.getKey());\n \n-        AuditEntryTO entry = query(groupTO.getKey(), 50);\n+        AuditQuery query = new AuditQuery.Builder().\n+                key(groupTO.getKey()).orderBy(\"event_date desc\").\n+                page(1).size(1).build();\n+        AuditEntryTO entry = query(query, 50);\n         assertEquals(groupTO.getKey(), entry.getKey());\n         groupService.delete(groupTO.getKey());\n     }"}]}