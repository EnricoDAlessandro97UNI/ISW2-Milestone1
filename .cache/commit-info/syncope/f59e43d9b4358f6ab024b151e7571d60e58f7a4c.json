{"sha":"f59e43d9b4358f6ab024b151e7571d60e58f7a4c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY1OWU0M2Q5YjQzNThmNmFiMDI0YjE1MWU3NTcxZDYwZTU4ZjdhNGM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-21T12:37:25Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-21T12:37:25Z"},"message":"Everything verified on all supported DBMS (Fixes issue 177)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247157 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4e2faddbf34d0b9c723deca711f9fdaf44d68077","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4e2faddbf34d0b9c723deca711f9fdaf44d68077"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f59e43d9b4358f6ab024b151e7571d60e58f7a4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f59e43d9b4358f6ab024b151e7571d60e58f7a4c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f59e43d9b4358f6ab024b151e7571d60e58f7a4c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f59e43d9b4358f6ab024b151e7571d60e58f7a4c/comments","author":null,"committer":null,"parents":[{"sha":"070db724393daeba25ce93c27c167c3248089ff8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/070db724393daeba25ce93c27c167c3248089ff8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/070db724393daeba25ce93c27c167c3248089ff8"}],"stats":{"total":87,"additions":18,"deletions":69},"files":[{"sha":"946de559844772d2286e7da7d579c715c6f82aa6","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f59e43d9b4358f6ab024b151e7571d60e58f7a4c/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f59e43d9b4358f6ab024b151e7571d60e58f7a4c/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=f59e43d9b4358f6ab024b151e7571d60e58f7a4c","patch":"@@ -90,16 +90,14 @@\n         </property>\n     </bean>\n \n-    <bean id=\"entityManager\"\n-          class=\"org.springframework.orm.jpa.support.SharedEntityManagerBean\">\n+    <bean id=\"entityManager\" class=\"org.springframework.orm.jpa.support.SharedEntityManagerBean\">\n         <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n     </bean>\n \n-    <tx:annotation-driven/>\n-    <bean id=\"transactionManager\"\n-          class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n+    <bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n         <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n     </bean>\n+    <tx:annotation-driven/>\n \n     <bean id=\"jexlEngine\" class=\"org.apache.commons.jexl2.JexlEngine\">\n         <property name=\"cache\" value=\"512\"/>"},{"sha":"d14fdaf9195322bef3be32f2a5985c52038f38ed","filename":"core/src/test/java/org/syncope/core/rest/AbstractTest.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f59e43d9b4358f6ab024b151e7571d60e58f7a4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f59e43d9b4358f6ab024b151e7571d60e58f7a4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=f59e43d9b4358f6ab024b151e7571d60e58f7a4c","patch":"@@ -28,10 +28,6 @@\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\n-    \"classpath:syncopeContext.xml\",\n-    \"classpath:persistenceContext.xml\",\n-    \"classpath:workflowContext.xml\",\n-    \"classpath:schedulingContext.xml\",\n     \"classpath:restClientContext.xml\"\n })\n public abstract class AbstractTest {"},{"sha":"152a2727e056a698c29ceb69026a53c6bcd44612","filename":"core/src/test/java/org/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":15,"deletions":60,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f59e43d9b4358f6ab024b151e7571d60e58f7a4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f59e43d9b4358f6ab024b151e7571d60e58f7a4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=f59e43d9b4358f6ab024b151e7571d60e58f7a4c","patch":"@@ -16,10 +16,7 @@\n \n import static org.junit.Assert.*;\n \n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n import java.util.Arrays;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -41,57 +38,10 @@\n \n public class AuthenticationTestITCase extends AbstractTest {\n \n-    private UserTO getSampleTO(final String email) {\n-        UserTO userTO = new UserTO();\n-        userTO.setPassword(\"password123\");\n-\n-        AttributeTO usernameTO = new AttributeTO();\n-        usernameTO.setSchema(\"username\");\n-        usernameTO.addValue(email);\n-        userTO.addAttribute(usernameTO);\n-\n-        AttributeTO firstnameTO = new AttributeTO();\n-        firstnameTO.setSchema(\"firstname\");\n-        firstnameTO.addValue(email);\n-        userTO.addAttribute(firstnameTO);\n-\n-        AttributeTO surnameTO = new AttributeTO();\n-        surnameTO.setSchema(\"surname\");\n-        surnameTO.addValue(\"Surname\");\n-        userTO.addAttribute(surnameTO);\n-\n-        AttributeTO typeTO = new AttributeTO();\n-        typeTO.setSchema(\"type\");\n-        typeTO.addValue(\"a type\");\n-        userTO.addAttribute(typeTO);\n-\n-        AttributeTO userIdTO = new AttributeTO();\n-        userIdTO.setSchema(\"userId\");\n-        userIdTO.addValue(email);\n-        userTO.addAttribute(userIdTO);\n-\n-        AttributeTO emailTO = new AttributeTO();\n-        emailTO.setSchema(\"email\");\n-        emailTO.addValue(email);\n-        userTO.addAttribute(emailTO);\n-\n-        AttributeTO loginDateTO = new AttributeTO();\n-        loginDateTO.setSchema(\"loginDate\");\n-        DateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n-        loginDateTO.addValue(sdf.format(new Date()));\n-        userTO.addAttribute(loginDateTO);\n-\n-        AttributeTO testAttributeTO = new AttributeTO();\n-        testAttributeTO.setSchema(\"testAttribute\");\n-        testAttributeTO.addValue(\"a value\");\n-        userTO.addAttribute(testAttributeTO);\n-\n-        return userTO;\n-    }\n-\n     @Test\n     public void testEntitlements() {\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"1\", \"password\"));\n \n         String[] entsArray = restTemplate.getForObject(BASE_URL\n@@ -146,7 +96,7 @@ public void testUserSchemaAuthorization() {\n         assertEquals(schemaTO, newSchemaTO);\n \n         // 2. create an user with the role created above (as admin)\n-        UserTO userTO = getSampleTO(\"auth@test.org\");\n+        UserTO userTO = UserTestITCase.getSampleTO(\"auth@test.org\");\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(authRoleTO.getId());\n         AttributeTO testAttributeTO = new AttributeTO();\n@@ -166,7 +116,8 @@ public void testUserSchemaAuthorization() {\n         assertNotNull(schemaTO);\n \n         // 4. read the schema created above (as user) - success\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 String.valueOf(userTO.getId()), \"password123\"));\n \n@@ -191,7 +142,7 @@ public void testUserSchemaAuthorization() {\n \n     @Test\n     public void testUserRead() {\n-        UserTO userTO = getSampleTO(\"testuserread@test.org\");\n+        UserTO userTO = UserTestITCase.getSampleTO(\"testuserread@test.org\");\n \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n@@ -205,15 +156,17 @@ public void testUserRead() {\n                 userTO, UserTO.class);\n         assertNotNull(userTO);\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 Long.valueOf(userTO.getId()).toString(), \"password123\"));\n \n         UserTO readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n         assertNotNull(readUserTO);\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"2\", \"password\"));\n \n         HttpClientErrorException exception = null;\n@@ -232,7 +185,7 @@ public void testUserRead() {\n \n     @Test\n     public void testUserSearch() {\n-        UserTO userTO = getSampleTO(\"testusersearch@test.org\");\n+        UserTO userTO = UserTestITCase.getSampleTO(\"testusersearch@test.org\");\n \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n@@ -246,7 +199,8 @@ public void testUserSearch() {\n                 userTO, UserTO.class);\n         assertNotNull(userTO);\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 Long.valueOf(userTO.getId()).toString(), \"password123\"));\n \n@@ -266,7 +220,8 @@ public void testUserSearch() {\n         }\n         assertTrue(userIds.contains(1L));\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"2\", \"password\"));\n \n         matchedUsers = Arrays.asList("}]}