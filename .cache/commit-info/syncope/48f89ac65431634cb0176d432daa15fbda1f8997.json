{"sha":"48f89ac65431634cb0176d432daa15fbda1f8997","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ4Zjg5YWM2NTQzMTYzNGNiMDE3NmQ0MzJkYWExNWZiZGExZjg5OTc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-10-26T12:45:28Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-10-26T12:45:28Z"},"message":"[SYNCOPE-1596] Restoring read from underlying PlainSchemaTO to properly set read-only attributes","tree":{"sha":"f9bf31f3a09b672b77d71536efb53f28be23cc74","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f9bf31f3a09b672b77d71536efb53f28be23cc74"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/48f89ac65431634cb0176d432daa15fbda1f8997","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/48f89ac65431634cb0176d432daa15fbda1f8997","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/48f89ac65431634cb0176d432daa15fbda1f8997","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/48f89ac65431634cb0176d432daa15fbda1f8997/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a0360a4e0bfac81a123164675bd552ce2125f89a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a0360a4e0bfac81a123164675bd552ce2125f89a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a0360a4e0bfac81a123164675bd552ce2125f89a"}],"stats":{"total":50,"additions":28,"deletions":22},"files":[{"sha":"b9dcda34000a0c109c069c4950ade0556909d487","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48f89ac65431634cb0176d432daa15fbda1f8997/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48f89ac65431634cb0176d432daa15fbda1f8997/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java?ref=48f89ac65431634cb0176d432daa15fbda1f8997","patch":"@@ -202,7 +202,8 @@ public PlainSchemasOwn(\n \n                 @Override\n                 protected void populateItem(final ListItem<Attr> item) {\n-                    setPanel(schemas, item, false);\n+                    PlainSchemaTO schema = schemas.get(item.getModelObject().getSchema());\n+                    setPanel(schemas, item, schema == null ? false : schema.isReadonly());\n                 }\n             });\n         }\n@@ -226,7 +227,8 @@ public PlainSchemasMemberships(\n \n                 @Override\n                 protected void populateItem(final ListItem<Attr> item) {\n-                    setPanel(schemas, item, false);\n+                    PlainSchemaTO schema = schemas.get(item.getModelObject().getSchema());\n+                    setPanel(schemas, item, schema == null ? false : schema.isReadonly());\n                 }\n             });\n         }"},{"sha":"7e1e66f5af9d6102c6dfe6ac30007a52622df523","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/PlainAttrs.java","status":"modified","additions":24,"deletions":20,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48f89ac65431634cb0176d432daa15fbda1f8997/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48f89ac65431634cb0176d432daa15fbda1f8997/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java?ref=48f89ac65431634cb0176d432daa15fbda1f8997","patch":"@@ -402,24 +402,26 @@ public PlainSchemasMemberships(\n                 @Override\n                 @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n                 protected void populateItem(final ListItem<Attr> item) {\n-                    Attr attrTO = item.getModelObject();\n+                    Attr attr = item.getModelObject();\n+                    PlainSchemaTO schema = schemas.get(attr.getSchema());\n \n                     // set default values, if any\n-                    if (attrTO.getValues().stream().noneMatch(StringUtils::isNotBlank)) {\n-                        attrTO.getValues().clear();\n-                        attrTO.getValues().addAll(getDefaultValues(attrTO.getSchema(), groupName));\n+                    if (attr.getValues().stream().noneMatch(StringUtils::isNotBlank)) {\n+                        attr.getValues().clear();\n+                        attr.getValues().addAll(getDefaultValues(attr.getSchema(), groupName));\n                     }\n \n-                    AbstractFieldPanel<?> panel = getFieldPanel(schemas.get(attrTO.getSchema()));\n-                    if (schemas.get(attrTO.getSchema()).isMultivalue()) {\n+                    AbstractFieldPanel<?> panel = getFieldPanel(schemas.get(attr.getSchema()));\n+                    if (schemas.get(attr.getSchema()).isMultivalue()) {\n                         panel = new MultiFieldPanel.Builder<>(\n                                 new PropertyModel<>(\n-                                        attributableTO.getObject().getPlainAttr(attrTO.getSchema()), \"values\"))\n-                                .build(\"panel\", attrTO.getSchema(), FieldPanel.class.cast(panel));\n+                                        attributableTO.getObject().getPlainAttr(attr.getSchema()), \"values\"))\n+                                .build(\"panel\", attr.getSchema(), FieldPanel.class.cast(panel));\n                         // SYNCOPE-1215 the entire multifield panel must be readonly, not only its field\n-                        ((MultiFieldPanel) panel).setReadOnly(schemas.get(attrTO.getSchema()).isReadonly());\n+                        ((MultiFieldPanel) panel).setReadOnly(schema == null ? false : schema.isReadonly());\n                     } else {\n-                        FieldPanel.class.cast(panel).setNewModel(attrTO.getValues());\n+                        FieldPanel.class.cast(panel).setNewModel(attr.getValues()).\n+                                setReadOnly(schema == null ? false : schema.isReadonly());\n                     }\n \n                     item.add(panel);\n@@ -446,25 +448,27 @@ public PlainSchemasOwn(\n                 @Override\n                 @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n                 protected void populateItem(final ListItem<Attr> item) {\n-                    Attr attrTO = item.getModelObject();\n+                    Attr attr = item.getModelObject();\n+                    PlainSchemaTO schema = schemas.get(attr.getSchema());\n \n                     // set default values, if any\n-                    if (attrTO.getValues().stream().noneMatch(StringUtils::isNotBlank)) {\n-                        attrTO.getValues().clear();\n-                        attrTO.getValues().addAll(getDefaultValues(attrTO.getSchema()));\n+                    if (attr.getValues().stream().noneMatch(StringUtils::isNotBlank)) {\n+                        attr.getValues().clear();\n+                        attr.getValues().addAll(getDefaultValues(attr.getSchema()));\n                     }\n \n-                    AbstractFieldPanel<?> panel = getFieldPanel(schemas.get(attrTO.getSchema()));\n-                    if (schemas.get(attrTO.getSchema()).isMultivalue()) {\n+                    AbstractFieldPanel<?> panel = getFieldPanel(schemas.get(attr.getSchema()));\n+                    if (schemas.get(attr.getSchema()).isMultivalue()) {\n                         panel = new MultiFieldPanel.Builder<>(\n-                                new PropertyModel<>(attrTO, \"values\")).build(\n+                                new PropertyModel<>(attr, \"values\")).build(\n                                 \"panel\",\n-                                attrTO.getSchema(),\n+                                attr.getSchema(),\n                                 FieldPanel.class.cast(panel));\n                         // SYNCOPE-1215 the entire multifield panel must be readonly, not only its field\n-                        ((MultiFieldPanel) panel).setReadOnly(schemas.get(attrTO.getSchema()).isReadonly());\n+                        ((MultiFieldPanel) panel).setReadOnly(schema == null ? false : schema.isReadonly());\n                     } else {\n-                        FieldPanel.class.cast(panel).setNewModel(attrTO.getValues());\n+                        FieldPanel.class.cast(panel).setNewModel(attr.getValues()).\n+                                setReadOnly(schema == null ? false : schema.isReadonly());\n                     }\n                     item.add(panel);\n                 }"}]}