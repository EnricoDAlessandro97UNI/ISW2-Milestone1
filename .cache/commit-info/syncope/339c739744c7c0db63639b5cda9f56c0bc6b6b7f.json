{"sha":"339c739744c7c0db63639b5cda9f56c0bc6b6b7f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMzOWM3Mzk3NDRjN2MwZGI2MzYzOWI1Y2RhOWY1NmMwYmM2YjZiN2Y=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-07-19T13:58:12Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-07-19T13:58:12Z"},"message":"Basic structure to support new Task types, like as SyncTasks and SchedTasks\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247044 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7cf2fc212e6c7e3a2bdecb2bfc8fa9126aac2326","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7cf2fc212e6c7e3a2bdecb2bfc8fa9126aac2326"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/339c739744c7c0db63639b5cda9f56c0bc6b6b7f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/339c739744c7c0db63639b5cda9f56c0bc6b6b7f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/339c739744c7c0db63639b5cda9f56c0bc6b6b7f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/comments","author":null,"committer":null,"parents":[{"sha":"db392b1948e465f53123fb23dda714190f853c14","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/db392b1948e465f53123fb23dda714190f853c14","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/db392b1948e465f53123fb23dda714190f853c14"}],"stats":{"total":2378,"additions":1555,"deletions":823},"files":[{"sha":"160aee9e46cb3ebfc316619d73a24a410a99031f","filename":"client/src/main/java/org/syncope/client/AbstractBaseBean.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FAbstractBaseBean.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -22,6 +22,8 @@\n \n public abstract class AbstractBaseBean implements Serializable {\n \n+    private static final long serialVersionUID = 3119542005279892164L;\n+\n     @Override\n     public boolean equals(Object obj) {\n         return EqualsBuilder.reflectionEquals(this, obj);"},{"sha":"adf9eb5d78ce09224fada702bbc1ce66947a9a33","filename":"client/src/main/java/org/syncope/client/to/PropagationTaskTO.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPropagationTaskTO.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -0,0 +1,85 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import org.syncope.types.PropagationMode;\n+import org.syncope.types.ResourceOperationType;\n+\n+public class PropagationTaskTO extends TaskTO {\n+\n+    private static final long serialVersionUID = 386450127003321197L;\n+\n+    private PropagationMode propagationMode;\n+\n+    private ResourceOperationType resourceOperationType;\n+\n+    private String accountId;\n+\n+    private String oldAccountId;\n+\n+    private String xmlAttributes;\n+\n+    private String resource;\n+\n+    public String getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(String accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public String getOldAccountId() {\n+        return oldAccountId;\n+    }\n+\n+    public void setOldAccountId(String oldAccountId) {\n+        this.oldAccountId = oldAccountId;\n+    }\n+\n+    public PropagationMode getPropagationMode() {\n+        return propagationMode;\n+    }\n+\n+    public void setPropagationMode(PropagationMode propagationMode) {\n+        this.propagationMode = propagationMode;\n+    }\n+\n+    public String getResource() {\n+        return resource;\n+    }\n+\n+    public void setResource(String resource) {\n+        this.resource = resource;\n+    }\n+\n+    public ResourceOperationType getResourceOperationType() {\n+        return resourceOperationType;\n+    }\n+\n+    public void setResourceOperationType(\n+            ResourceOperationType resourceOperationType) {\n+\n+        this.resourceOperationType = resourceOperationType;\n+    }\n+\n+    public String getXmlAttributes() {\n+        return xmlAttributes;\n+    }\n+\n+    public void setXmlAttributes(String xmlAttributes) {\n+        this.xmlAttributes = xmlAttributes;\n+    }\n+}"},{"sha":"4512896d87404cc561976c5b09087c891f49f5df","filename":"client/src/main/java/org/syncope/client/to/SchedTaskTO.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchedTaskTO.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -0,0 +1,40 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+public class SchedTaskTO extends TaskTO {\n+\n+    private static final long serialVersionUID = -5722284116974636425L;\n+\n+    private String cronExpression;\n+\n+    private String jobClassName;\n+\n+    public String getCronExpression() {\n+        return cronExpression;\n+    }\n+\n+    public void setCronExpression(String cronExpression) {\n+        this.cronExpression = cronExpression;\n+    }\n+\n+    public String getJobClassName() {\n+        return jobClassName;\n+    }\n+\n+    public void setJobClassName(String jobClassName) {\n+        this.jobClassName = jobClassName;\n+    }\n+}"},{"sha":"7f0d4a8e574836447fa1275caaf655b724e0242b","filename":"client/src/main/java/org/syncope/client/to/SyncTaskTO.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncTaskTO.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -0,0 +1,86 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SyncTaskTO extends TaskTO {\n+\n+    private String resource;\n+\n+    private List<String> defaultResources;\n+\n+    private List<Long> defaultRoles;\n+\n+    private boolean updateIdentities;\n+\n+    public SyncTaskTO() {\n+        super();\n+\n+        defaultResources = new ArrayList<String>();\n+        defaultRoles = new ArrayList<Long>();\n+    }\n+\n+    public boolean addDefaultResource(String resource) {\n+        return resource != null && !defaultResources.contains(resource)\n+                && defaultResources.add(resource);\n+    }\n+\n+    public boolean removeDefaultResource(String resource) {\n+        return resource != null && defaultResources.remove(resource);\n+    }\n+\n+    public List<String> getDefaultResources() {\n+        return defaultResources;\n+    }\n+\n+    public void setDefaultResources(List<String> defaultResources) {\n+        this.defaultResources = defaultResources;\n+    }\n+\n+    public boolean addDefaultRole(Long role) {\n+        return role != null && !defaultRoles.contains(role)\n+                && defaultRoles.add(role);\n+    }\n+\n+    public boolean removeDefaultRole(Long role) {\n+        return role != null && defaultRoles.remove(role);\n+    }\n+\n+    public List<Long> getDefaultRoles() {\n+        return defaultRoles;\n+    }\n+\n+    public void setDefaultRoles(List<Long> defaultRoles) {\n+        this.defaultRoles = defaultRoles;\n+    }\n+\n+    public String getResource() {\n+        return resource;\n+    }\n+\n+    public void setResource(String resource) {\n+        this.resource = resource;\n+    }\n+\n+    public boolean isUpdateIdentities() {\n+        return updateIdentities;\n+    }\n+\n+    public void setUpdateIdentities(boolean updateIdentities) {\n+        this.updateIdentities = updateIdentities;\n+    }\n+}"},{"sha":"ad41eac78cfd0d42a488419bb0f74d27b55bec88","filename":"client/src/main/java/org/syncope/client/to/TaskExecTO.java","status":"renamed","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskExecTO.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -16,15 +16,21 @@\n \n import java.util.Date;\n import org.syncope.client.AbstractBaseBean;\n-import org.syncope.types.TaskExecutionStatus;\n \n-public class TaskExecutionTO extends AbstractBaseBean {\n+public class TaskExecTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -5401795154606268973L;\n \n     private long id;\n+\n     private Date startDate;\n+\n     private Date endDate;\n-    private TaskExecutionStatus status;\n+\n+    private String status;\n+\n     private String message;\n+\n     private long task;\n \n     public Date getEndDate() {\n@@ -59,11 +65,11 @@ public void setStartDate(Date startDate) {\n         this.startDate = startDate;\n     }\n \n-    public TaskExecutionStatus getStatus() {\n+    public String getStatus() {\n         return status;\n     }\n \n-    public void setStatus(TaskExecutionStatus status) {\n+    public void setStatus(String status) {\n         this.status = status;\n     }\n ","previous_filename":"client/src/main/java/org/syncope/client/to/TaskExecutionTO.java"},{"sha":"5fb1bd40ca75ad0c3ed6123fa782578ff8b2473e","filename":"client/src/main/java/org/syncope/client/to/TaskTO.java","status":"modified","additions":13,"deletions":73,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskTO.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -17,53 +17,19 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.syncope.client.AbstractBaseBean;\n-import org.syncope.types.PropagationMode;\n-import org.syncope.types.ResourceOperationType;\n \n public class TaskTO extends AbstractBaseBean {\n \n-    private long id;\n+    private static final long serialVersionUID = 386450127003321197L;\n \n-    private PropagationMode propagationMode;\n+    private Long id;\n \n-    private ResourceOperationType resourceOperationType;\n-\n-    private String accountId;\n-\n-    private String oldAccountId;\n-\n-    private String xmlAttributes;\n-\n-    private String resource;\n-\n-    private List<TaskExecutionTO> executions;\n+    private List<TaskExecTO> executions;\n \n     public TaskTO() {\n-        executions = new ArrayList<TaskExecutionTO>();\n-    }\n-\n-    public String getAccountId() {\n-        return accountId;\n-    }\n+        super();\n \n-    public void setAccountId(String accountId) {\n-        this.accountId = accountId;\n-    }\n-\n-    public boolean addExecution(TaskExecutionTO execution) {\n-        return executions.add(execution);\n-    }\n-\n-    public boolean removeExecution(TaskExecutionTO execution) {\n-        return executions.add(execution);\n-    }\n-\n-    public List<TaskExecutionTO> getExecutions() {\n-        return executions;\n-    }\n-\n-    public void setExecutions(List<TaskExecutionTO> executions) {\n-        this.executions = executions;\n+        executions = new ArrayList<TaskExecTO>();\n     }\n \n     public long getId() {\n@@ -74,45 +40,19 @@ public void setId(long id) {\n         this.id = id;\n     }\n \n-    public String getOldAccountId() {\n-        return oldAccountId;\n-    }\n-\n-    public void setOldAccountId(String oldAccountId) {\n-        this.oldAccountId = oldAccountId;\n-    }\n-\n-    public PropagationMode getPropagationMode() {\n-        return propagationMode;\n-    }\n-\n-    public void setPropagationMode(PropagationMode propagationMode) {\n-        this.propagationMode = propagationMode;\n-    }\n-\n-    public String getResource() {\n-        return resource;\n-    }\n-\n-    public void setResource(String resource) {\n-        this.resource = resource;\n-    }\n-\n-    public ResourceOperationType getResourceOperationType() {\n-        return resourceOperationType;\n+    public boolean addExecution(TaskExecTO execution) {\n+        return executions.add(execution);\n     }\n \n-    public void setResourceOperationType(\n-            ResourceOperationType resourceOperationType) {\n-\n-        this.resourceOperationType = resourceOperationType;\n+    public boolean removeExecution(TaskExecTO execution) {\n+        return executions.add(execution);\n     }\n \n-    public String getXmlAttributes() {\n-        return xmlAttributes;\n+    public List<TaskExecTO> getExecutions() {\n+        return executions;\n     }\n \n-    public void setXmlAttributes(String xmlAttributes) {\n-        this.xmlAttributes = xmlAttributes;\n+    public void setExecutions(List<TaskExecTO> executions) {\n+        this.executions = executions;\n     }\n }"},{"sha":"ed0baedbf951268c818551e4ed47cd1d756f356c","filename":"client/src/main/java/org/syncope/types/EntityViolationType.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -30,7 +30,11 @@ public enum EntityViolationType {\n     InvalidValueList(\n     \"org.syncope.core.validation.attr.invalidValueList\"),\n     InvalidEntitlementName(\n-    \"org.syncope.core.validation.entitlement.invalidName\");\n+    \"org.syncope.core.validation.entitlement.invalidName\"),\n+    InvalidPropagationTask(\n+    \"org.syncope.core.validation.propagationtask.invalid\"),\n+    InvalidSchedTask(\n+    \"org.syncope.core.validation.schedtask.invalid\");\n \n     private String message;\n "},{"sha":"cc0d533c9f88dbae8e0a653d3687adf0787afef4","filename":"client/src/main/java/org/syncope/types/PropagationTaskExecStatus.java","status":"renamed","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPropagationTaskExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPropagationTaskExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPropagationTaskExecStatus.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -24,8 +24,12 @@\n  *\n  * @see TaskExecution\n  */\n-public enum TaskExecutionStatus {\n+public enum PropagationTaskExecStatus {\n \n-    CREATED, SUBMITTED, UNSUBMITTED, SUCCESS, FAILURE\n+    CREATED,\n+    SUBMITTED,\n+    UNSUBMITTED,\n+    SUCCESS,\n+    FAILURE\n \n }","previous_filename":"client/src/main/java/org/syncope/types/TaskExecutionStatus.java"},{"sha":"3b8fe60be0ef954946159fecd3847801f87baafd","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -31,9 +31,9 @@ public enum SyncopeClientExceptionType {\n     InvalidPassword(\n     \"Syncope.InvalidPassword\",\n     \"Syncope.InvalidPassword.reason\"),\n-    IncompleteTaskExecution(\n-    \"Syncope.IncompleteTaskExecution\",\n-    \"Syncope.IncompleteTaskExecution.id\"),\n+    IncompletePropagationTaskExec(\n+    \"Syncope.IncompletePropagationTaskExec\",\n+    \"Syncope.IncompletePropagationTaskExec.id\"),\n     InvalidRoles(\n     \"Syncope.InvalidRoles\",\n     \"Syncope.InvalidRoles.name\"),\n@@ -43,9 +43,9 @@ public enum SyncopeClientExceptionType {\n     InvalidSearchCondition(\n     \"Syncope.InvalidSearchCondition\",\n     \"\"),\n-    InvalidTaskExecutionReport(\n-    \"Syncope.InvalidTaskExecutionReport\",\n-    \"Syncope.InvalidTaskExecutionReport.element\"),\n+    InvalidPropagationTaskExecReport(\n+    \"Syncope.InvalidPropagationTaskExecReport\",\n+    \"Syncope.InvalidPropagationTaskExecReport.element\"),\n     InvalidSchemaMapping(\n     \"Syncope.InvalidSchemaMapping\",\n     \"\"),"},{"sha":"68c881f5dc77a1a1fd94e5538ab27cd0b816333d","filename":"console/src/main/java/org/syncope/console/pages/TaskModalPage.java","status":"modified","additions":22,"deletions":22,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -45,8 +45,8 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.syncope.client.to.TaskExecutionTO;\n-import org.syncope.client.to.TaskTO;\n+import org.syncope.client.to.TaskExecTO;\n+import org.syncope.client.to.PropagationTaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.rest.TaskRestClient;\n@@ -80,7 +80,7 @@ public class TaskModalPage extends BaseModalPage {\n      * @param create : set to true only if a CREATE operation is required\n      */\n     public TaskModalPage(final BasePage basePage, final ModalWindow window,\n-            final TaskTO taskTO) {\n+            final PropagationTaskTO taskTO) {\n \n         dialogContent = new Label(\"dialogContent\", new Model<String>(\"\"));\n \n@@ -117,14 +117,14 @@ public TaskModalPage(final BasePage basePage, final ModalWindow window,\n         columns.add(new PropertyColumn(new Model(getString(\"status\")),\n                 \"status\", \"status\"));\n \n-        columns.add(new AbstractColumn<TaskExecutionTO>(\n+        columns.add(new AbstractColumn<TaskExecTO>(\n                 new Model<String>(getString(\"message\"))) {\n \n             @Override\n             public void populateItem(\n-                    final Item<ICellPopulator<TaskExecutionTO>> cellItem,\n+                    final Item<ICellPopulator<TaskExecTO>> cellItem,\n                     final String componentId,\n-                    final IModel<TaskExecutionTO> model) {\n+                    final IModel<TaskExecTO> model) {\n \n                 AjaxLink messageLink = new IndicatingAjaxLink(\"link\") {\n \n@@ -150,16 +150,16 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        columns.add(new AbstractColumn<TaskExecutionTO>(\n+        columns.add(new AbstractColumn<TaskExecTO>(\n                 new Model<String>(getString(\"delete\"))) {\n \n             @Override\n             public void populateItem(\n-                    final Item<ICellPopulator<TaskExecutionTO>> cellItem,\n+                    final Item<ICellPopulator<TaskExecTO>> cellItem,\n                     final String componentId,\n-                    final IModel<TaskExecutionTO> model) {\n+                    final IModel<TaskExecTO> model) {\n \n-                final TaskExecutionTO taskExecutionTO = model.getObject();\n+                final TaskExecTO taskExecutionTO = model.getObject();\n \n                 AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n                         \"deleteLink\") {\n@@ -202,25 +202,25 @@ public void onClick(final AjaxRequestTarget target) {\n         add(form);\n     }\n \n-    class TaskExecutionsProvider extends SortableDataProvider<TaskExecutionTO> {\n+    class TaskExecutionsProvider extends SortableDataProvider<TaskExecTO> {\n \n-        private SortableDataProviderComparator<TaskExecutionTO> comparator;\n+        private SortableDataProviderComparator<TaskExecTO> comparator;\n \n-        private TaskTO taskTO;\n+        private PropagationTaskTO taskTO;\n \n-        public TaskExecutionsProvider(TaskTO taskTO) {\n+        public TaskExecutionsProvider(PropagationTaskTO taskTO) {\n             //Default sorting\n             this.taskTO = taskTO;\n             setSort(\"startDate\", true);\n             comparator =\n-                    new SortableDataProviderComparator<TaskExecutionTO>(this);\n+                    new SortableDataProviderComparator<TaskExecTO>(this);\n         }\n \n         @Override\n-        public Iterator<TaskExecutionTO> iterator(final int first,\n+        public Iterator<TaskExecTO> iterator(final int first,\n                 final int count) {\n \n-            List<TaskExecutionTO> list = getTaskDB();\n+            List<TaskExecTO> list = getTaskDB();\n \n             Collections.sort(list, comparator);\n \n@@ -233,19 +233,19 @@ public int size() {\n         }\n \n         @Override\n-        public IModel<TaskExecutionTO> model(\n-                final TaskExecutionTO taskExecution) {\n+        public IModel<TaskExecTO> model(\n+                final TaskExecTO taskExecution) {\n \n-            return new AbstractReadOnlyModel<TaskExecutionTO>() {\n+            return new AbstractReadOnlyModel<TaskExecTO>() {\n \n                 @Override\n-                public TaskExecutionTO getObject() {\n+                public TaskExecTO getObject() {\n                     return taskExecution;\n                 }\n             };\n         }\n \n-        public List<TaskExecutionTO> getTaskDB() {\n+        public List<TaskExecTO> getTaskDB() {\n             return taskTO.getExecutions();\n         }\n     }"},{"sha":"5190800e487ea7c0fe761bbdd69a56793ea2c961","filename":"console/src/main/java/org/syncope/console/pages/Tasks.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -42,7 +42,7 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.syncope.client.to.TaskTO;\n+import org.syncope.client.to.PropagationTaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n@@ -89,7 +89,7 @@ public Tasks(final PageParameters parameters) {\n                 getWebRequestCycle().getWebRequest(),\n                 Constants.PREF_TASKS_PAGINATOR_ROWS);\n \n-        List<IColumn<TaskTO>> columns = new ArrayList<IColumn<TaskTO>>();\n+        List<IColumn<PropagationTaskTO>> columns = new ArrayList<IColumn<PropagationTaskTO>>();\n \n         columns.add(new PropertyColumn(\n                 new Model(getString(\"id\")), \"id\", \"id\"));\n@@ -108,16 +108,16 @@ public Tasks(final PageParameters parameters) {\n                 new Model(getString(\"resourceOperationType\")),\n                 \"resourceOperationType\", \"resourceOperationType\"));\n \n-        columns.add(new AbstractColumn<TaskTO>(new Model<String>(getString(\n+        columns.add(new AbstractColumn<PropagationTaskTO>(new Model<String>(getString(\n                 \"detail\"))) {\n \n             @Override\n             public void populateItem(\n-                    final Item<ICellPopulator<TaskTO>> cellItem,\n+                    final Item<ICellPopulator<PropagationTaskTO>> cellItem,\n                     final String componentId,\n-                    final IModel<TaskTO> model) {\n+                    final IModel<PropagationTaskTO> model) {\n \n-                final TaskTO taskTO = model.getObject();\n+                final PropagationTaskTO taskTO = model.getObject();\n \n                 AjaxLink viewLink = new IndicatingAjaxLink(\"editLink\") {\n \n@@ -149,16 +149,16 @@ public Page createPage() {\n             }\n         });\n \n-        columns.add(new AbstractColumn<TaskTO>(new Model<String>(getString(\n+        columns.add(new AbstractColumn<PropagationTaskTO>(new Model<String>(getString(\n                 \"execute\"))) {\n \n             @Override\n             public void populateItem(\n-                    final Item<ICellPopulator<TaskTO>> cellItem,\n+                    final Item<ICellPopulator<PropagationTaskTO>> cellItem,\n                     final String componentId,\n-                    final IModel<TaskTO> model) {\n+                    final IModel<PropagationTaskTO> model) {\n \n-                final TaskTO taskTO = model.getObject();\n+                final PropagationTaskTO taskTO = model.getObject();\n \n                 AjaxLink executeLink = new IndicatingAjaxLink(\"link\") {\n \n@@ -188,16 +188,16 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        columns.add(new AbstractColumn<TaskTO>(new Model<String>(getString(\n+        columns.add(new AbstractColumn<PropagationTaskTO>(new Model<String>(getString(\n                 \"delete\"))) {\n \n             @Override\n             public void populateItem(\n-                    final Item<ICellPopulator<TaskTO>> cellItem,\n+                    final Item<ICellPopulator<PropagationTaskTO>> cellItem,\n                     final String componentId,\n-                    final IModel<TaskTO> model) {\n+                    final IModel<PropagationTaskTO> model) {\n \n-                final TaskTO taskTO = model.getObject();\n+                final PropagationTaskTO taskTO = model.getObject();\n \n                 AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n                         \"deleteLink\") {\n@@ -229,8 +229,8 @@ public void onClick(final AjaxRequestTarget target) {\n         });\n \n \n-        final AjaxFallbackDefaultDataTable<TaskTO> table =\n-                new AjaxFallbackDefaultDataTable<TaskTO>(\"datatable\", columns,\n+        final AjaxFallbackDefaultDataTable<PropagationTaskTO> table =\n+                new AjaxFallbackDefaultDataTable<PropagationTaskTO>(\"datatable\", columns,\n                 new TasksProvider(), paginatorRows);\n \n         container = new WebMarkupContainer(\"container\");\n@@ -284,20 +284,20 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         add(paginatorForm);\n     }\n \n-    private class TasksProvider extends SortableDataProvider<TaskTO> {\n+    private class TasksProvider extends SortableDataProvider<PropagationTaskTO> {\n \n-        private SortableDataProviderComparator<TaskTO> comparator;\n+        private SortableDataProviderComparator<PropagationTaskTO> comparator;\n \n         public TasksProvider() {\n             super();\n             //Default sorting\n             setSort(\"id\", true);\n-            comparator = new SortableDataProviderComparator<TaskTO>(this);\n+            comparator = new SortableDataProviderComparator<PropagationTaskTO>(this);\n         }\n \n         @Override\n-        public Iterator<TaskTO> iterator(int first, int count) {\n-            List<TaskTO> tasks = restClient.list(\n+        public Iterator<PropagationTaskTO> iterator(int first, int count) {\n+            List<PropagationTaskTO> tasks = restClient.list(\n                     (first / paginatorRows) + 1, count);\n             Collections.sort(tasks, comparator);\n             return tasks.iterator();\n@@ -309,8 +309,8 @@ public int size() {\n         }\n \n         @Override\n-        public IModel<TaskTO> model(final TaskTO object) {\n-            return new CompoundPropertyModel<TaskTO>(object);\n+        public IModel<PropagationTaskTO> model(final PropagationTaskTO object) {\n+            return new CompoundPropertyModel<PropagationTaskTO>(object);\n         }\n     }\n }"},{"sha":"02b5d5e5551b95406853999e4e88dee0899b0992","filename":"console/src/main/java/org/syncope/console/rest/TaskRestClient.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -17,8 +17,8 @@\n import java.util.Arrays;\n import java.util.List;\n import org.springframework.stereotype.Component;\n-import org.syncope.client.to.TaskExecutionTO;\n-import org.syncope.client.to.TaskTO;\n+import org.syncope.client.to.TaskExecTO;\n+import org.syncope.client.to.PropagationTaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n \n /**\n@@ -38,23 +38,23 @@ public Integer count() {\n      * @param size maximum number to fetch\n      * @return list of TaskTO objects\n      */\n-    public List<TaskTO> list(final int page, final int size) {\n+    public List<PropagationTaskTO> list(final int page, final int size) {\n         return Arrays.asList(restTemplate.getForObject(\n                 baseURL + \"task/list/{page}/{size}.json\",\n-                TaskTO[].class, page, size));\n+                PropagationTaskTO[].class, page, size));\n     }\n \n     /**\n      * Load an existing task.\n      * @param taskId task to read\n      * @return TaskTO object if the configuration exists, null otherwise\n      */\n-    public TaskTO read(final String taskId) {\n-        TaskTO taskTO = null;\n+    public PropagationTaskTO read(final String taskId) {\n+        PropagationTaskTO taskTO = null;\n         try {\n             taskTO = restTemplate.getForObject(\n                     baseURL + \"task/read/{taskId}\",\n-                    TaskTO.class, taskId);\n+                    PropagationTaskTO.class, taskId);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a task\", e);\n         }\n@@ -66,11 +66,11 @@ public TaskTO read(final String taskId) {\n      * Get all executions.\n      * @return list of all executions\n      */\n-    public List<TaskExecutionTO> listExecutions() {\n+    public List<TaskExecTO> listExecutions() {\n         return Arrays.asList(\n                 restTemplate.getForObject(\n                 baseURL + \"task/execution/list\",\n-                TaskExecutionTO[].class));\n+                TaskExecTO[].class));\n     }\n \n     /**\n@@ -89,7 +89,7 @@ public void delete(final Long taskId) {\n     public void startExecution(final Long taskId) {\n         restTemplate.getForObject(\n                 baseURL + \"task/execute/{taskId}\",\n-                TaskExecutionTO.class, taskId);\n+                TaskExecTO.class, taskId);\n     }\n \n     /**"},{"sha":"dd20d18a07e4f077abda58f0c209a3d5792d858c","filename":"core/pom.xml","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -173,6 +173,15 @@\n             <groupId>org.apache.velocity</groupId>\n             <artifactId>velocity</artifactId>\n         </dependency>\n+        \n+        <dependency>\n+            <groupId>org.quartz-scheduler</groupId>\n+            <artifactId>quartz</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.quartz-scheduler</groupId>\n+            <artifactId>quartz-oracle</artifactId>\n+        </dependency>\n \n         <dependency>\n             <groupId>org.hibernate</groupId>\n@@ -272,6 +281,17 @@\n             <artifactId>spring-test</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.lazyluke</groupId>\n+            <artifactId>log4jdbc-remix</artifactId>\n+            <version>0.2.4</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.slf4j</groupId>\n+                    <artifactId>slf4j-log4j12</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n         <!-- /TEST -->\n     </dependencies>\n \n@@ -510,7 +530,6 @@\n                         <type>standalone</type>\n                         <properties>\n                             <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>\n-                            <!--<cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=9009,server=y,suspend=n</cargo.jvmargs>-->\n                         </properties>\n                         <deployables>\n                             <deployable>"},{"sha":"842e236dfd4e7ddab2ee40120d01c409b55f4c09","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttr.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -38,7 +38,7 @@ public <T extends AbstractAttrValue> T addValue(final String value,\n         T attrValue;\n         if (getSchema().isUniqueConstraint()) {\n             attrValue = (T) attributableUtil.newAttributeUniqueValue();\n-            ( (AbstractAttrUniqueValue) attrValue ).setSchema(getSchema());\n+            ((AbstractAttrUniqueValue) attrValue).setSchema(getSchema());\n         } else {\n             attrValue = (T) attributableUtil.newAttributeValue();\n         }\n@@ -75,7 +75,7 @@ public abstract <T extends AbstractAttrValue> boolean addValue(\n     public abstract <T extends AbstractAttrValue> boolean removeValue(\n             T attrValue);\n \n-    public <T extends AbstractAttrValue> List<String> getValuesAsStrings() {\n+    public List<String> getValuesAsStrings() {\n         List<String> result;\n         if (getUniqueValue() != null) {\n             result = Collections.singletonList("},{"sha":"3769d88b3e2c9d03d1d69172c8e8ebb90b1e357f","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttrUniqueValue.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrUniqueValue.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -16,6 +16,8 @@\n \n public abstract class AbstractAttrUniqueValue extends AbstractAttrValue {\n \n+    private static final long serialVersionUID = -1114553598914979353L;\n+\n     public abstract <T extends AbstractSchema> T getSchema();\n \n     public abstract <T extends AbstractSchema> void setSchema(T schema);"},{"sha":"5f80e2fa94b20e257c32a70b946a0a740e14a4e4","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttrValue.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -29,6 +29,8 @@\n @AttrValueCheck\n public abstract class AbstractAttrValue extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -9141923816611244785L;\n+\n     private String stringValue;\n \n     @Temporal(TemporalType.TIMESTAMP)"},{"sha":"e16dc94ae2c60367c147896e3d7bbef3fb5ec7cb","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -57,6 +57,8 @@ protected DecimalFormat initialValue() {\n \n     public static String enumValuesSeparator = \";\";\n \n+    private static final long serialVersionUID = -8621028596062054739L;\n+\n     @Id\n     private String name;\n "},{"sha":"776889a44891c65b35e7d25fa254009b6deaf698","filename":"core/src/main/java/org/syncope/core/persistence/beans/PropagationTask.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -0,0 +1,146 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import com.thoughtworks.xstream.XStream;\n+import java.net.URLDecoder;\n+import java.net.URLEncoder;\n+import java.util.Collections;\n+import java.util.Set;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.syncope.core.persistence.validation.entity.PropagationTaskCheck;\n+import org.syncope.core.util.ApplicationContextManager;\n+import org.syncope.types.PropagationMode;\n+import org.syncope.types.ResourceOperationType;\n+\n+/**\n+ * Encapsulate all information about a propagation task.\n+ */\n+@Entity\n+@PropagationTaskCheck\n+public class PropagationTask extends Task {\n+\n+    private static final long serialVersionUID = 7086054884614511210L;\n+\n+    /**\n+     * @see PropagationMode\n+     */\n+    @Enumerated(EnumType.STRING)\n+    private PropagationMode propagationMode;\n+\n+    /**\n+     * @see ResourceOperationType\n+     */\n+    @Enumerated(EnumType.STRING)\n+    private ResourceOperationType resourceOperationType;\n+\n+    /**\n+     * The accountId on the target resource.\n+     */\n+    private String accountId;\n+\n+    /**\n+     * The (optional) former accountId on the target resource.\n+     */\n+    private String oldAccountId;\n+\n+    /**\n+     * Attributes to be propagated.\n+     */\n+    @Lob\n+    private String xmlAttributes;\n+\n+    /**\n+     * TargetResource to which the propagation happens.\n+     */\n+    @ManyToOne\n+    private TargetResource resource;\n+\n+    public String getAccountId() {\n+        return accountId;\n+    }\n+\n+    public void setAccountId(String accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    public String getOldAccountId() {\n+        return oldAccountId;\n+    }\n+\n+    public void setOldAccountId(String oldAccountId) {\n+        this.oldAccountId = oldAccountId;\n+    }\n+\n+    public Set<Attribute> getAttributes() {\n+        Set<Attribute> result = Collections.EMPTY_SET;\n+\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+        XStream xStream = context.getBean(XStream.class);\n+        try {\n+            result = (Set<Attribute>) xStream.fromXML(\n+                    URLDecoder.decode(xmlAttributes, \"UTF-8\"));\n+        } catch (Throwable t) {\n+            LOG.error(\"During attribute deserialization\", t);\n+        }\n+\n+        return result;\n+    }\n+\n+    public void setAttributes(final Set<Attribute> attributes) {\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+        XStream xStream = context.getBean(XStream.class);\n+        try {\n+            xmlAttributes = URLEncoder.encode(\n+                    xStream.toXML(attributes), \"UTF-8\");\n+        } catch (Throwable t) {\n+            LOG.error(\"During attribute serialization\", t);\n+        }\n+    }\n+\n+    public PropagationMode getPropagationMode() {\n+        return propagationMode;\n+    }\n+\n+    public void setPropagationMode(PropagationMode propagationMode) {\n+        this.propagationMode = propagationMode;\n+    }\n+\n+    public ResourceOperationType getResourceOperationType() {\n+        return resourceOperationType;\n+    }\n+\n+    public void setResourceOperationType(\n+            final ResourceOperationType resourceOperationType) {\n+\n+        this.resourceOperationType = resourceOperationType;\n+    }\n+\n+    public TargetResource getResource() {\n+        return resource;\n+    }\n+\n+    public void setResource(TargetResource resource) {\n+        this.resource = resource;\n+    }\n+}"},{"sha":"4d73307030c7fd08adb830c71904d6f06dbb3c47","filename":"core/src/main/java/org/syncope/core/persistence/beans/SchedTask.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchedTask.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import javax.persistence.Entity;\n+import org.syncope.core.persistence.validation.entity.SchedTaskCheck;\n+\n+@Entity\n+@SchedTaskCheck\n+public class SchedTask extends Task {\n+\n+    private static final long serialVersionUID = -4141057723006682562L;\n+\n+    private String cronExpression;\n+\n+    private String jobClassName;\n+\n+    public String getCronExpression() {\n+        return cronExpression;\n+    }\n+\n+    public void setCronExpression(String cronExpression) {\n+        this.cronExpression = cronExpression;\n+    }\n+\n+    public String getJobClassName() {\n+        return jobClassName;\n+    }\n+\n+    public void setJobClassName(String jobClassName) {\n+        this.jobClassName = jobClassName;\n+    }\n+}"},{"sha":"933e7eb3bd8b13b6bc1ea595bd84f9cdd8c8a1e9","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncTask.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.validation.entity.SchedTaskCheck;\n+\n+@Entity\n+@SchedTaskCheck\n+public class SyncTask extends SchedTask {\n+\n+    private static final long serialVersionUID = -4141057723006682562L;\n+\n+    /**\n+     * TargetResource to which the sync happens.\n+     */\n+    @ManyToOne(optional = false)\n+    private TargetResource resource;\n+\n+    @OneToMany\n+    private List<TargetResource> defaultResources;\n+\n+    @OneToMany\n+    private List<SyncopeRole> defaultRoles;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer updateIdentities;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public SyncTask() {\n+        super();\n+\n+        defaultResources = new ArrayList<TargetResource>();\n+        defaultRoles = new ArrayList<SyncopeRole>();\n+        // TODO\n+        super.setJobClassName(\"java.lang.String\");\n+    }\n+\n+    @Override\n+    public void setJobClassName(String jobClassName) {\n+    }\n+\n+    public TargetResource getResource() {\n+        return resource;\n+    }\n+\n+    public void setResource(TargetResource resource) {\n+        this.resource = resource;\n+    }\n+\n+    public boolean addDefaultResource(TargetResource resource) {\n+        return resource != null && !defaultResources.contains(resource)\n+                && defaultResources.add(resource);\n+    }\n+\n+    public boolean removeDefaultResource(TargetResource resource) {\n+        return resource != null && defaultResources.remove(resource);\n+    }\n+\n+    public List<TargetResource> getDefaultResources() {\n+        return defaultResources;\n+    }\n+\n+    public void setDefaultResources(List<TargetResource> defaultResources) {\n+        this.defaultResources.clear();\n+        if (defaultResources != null && !defaultResources.isEmpty()) {\n+            this.defaultResources.addAll(defaultResources);\n+        }\n+    }\n+\n+    public boolean addDefaultRole(SyncopeRole role) {\n+        return role != null && !defaultRoles.contains(role)\n+                && defaultRoles.add(role);\n+    }\n+\n+    public boolean removeDefaultRole(SyncopeRole role) {\n+        return role != null && defaultRoles.remove(role);\n+    }\n+\n+    public List<SyncopeRole> getDefaultRoles() {\n+        return defaultRoles;\n+    }\n+\n+    public void setDefaultRoles(List<SyncopeRole> defaultRoles) {\n+        this.defaultRoles.clear();\n+        if (defaultRoles != null && !defaultRoles.isEmpty()) {\n+            this.defaultRoles.addAll(defaultRoles);\n+        }\n+    }\n+\n+    public boolean isUpdateIdentities() {\n+        return isBooleanAsInteger(updateIdentities);\n+    }\n+\n+    public void setUpdateIdentities(boolean updateIdentities) {\n+        this.updateIdentities = getBooleanAsInteger(updateIdentities);\n+    }\n+}"},{"sha":"f092ff772b1f086c783b05c44d79b5d6d1da9e51","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":2,"deletions":28,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -47,6 +47,8 @@\n @TargetResourceCheck\n public class TargetResource extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -6937712883512073278L;\n+\n     /**\n      * The resource identifier is the name.\n      */\n@@ -98,14 +100,6 @@ public class TargetResource extends AbstractBaseBean {\n     @Column(nullable = false)\n     private PropagationMode optionalPropagationMode;\n \n-    /**\n-     * Tasks associated to this resource.\n-     */\n-    @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true,\n-    mappedBy = \"resource\")\n-    @Valid\n-    private List<Task> tasks;\n-\n     /**\n      * Default constructor.\n      */\n@@ -117,7 +111,6 @@ public TargetResource() {\n         roles = new HashSet<SyncopeRole>();\n         mappings = new ArrayList<SchemaMapping>();\n         optionalPropagationMode = PropagationMode.ASYNC;\n-        tasks = new ArrayList<Task>();\n     }\n \n     public boolean isForceMandatoryConstraint() {\n@@ -147,25 +140,6 @@ public void setOptionalPropagationMode(\n         this.optionalPropagationMode = optionalPropagationMode;\n     }\n \n-    public List<Task> getTasks() {\n-        return tasks;\n-    }\n-\n-    public boolean addTask(Task task) {\n-        return this.tasks.add(task);\n-    }\n-\n-    public boolean removeTask(Task task) {\n-        return this.tasks.remove(task);\n-    }\n-\n-    public void setTasks(List<Task> tasks) {\n-        this.tasks.clear();\n-        if (tasks != null && !tasks.isEmpty()) {\n-            this.tasks.addAll(tasks);\n-        }\n-    }\n-\n     public List<SchemaMapping> getMappings() {\n         return mappings;\n     }"},{"sha":"a1d7e3c021518f5f4da17050f14ac9670b675340","filename":"core/src/main/java/org/syncope/core/persistence/beans/Task.java","status":"modified","additions":19,"deletions":150,"changes":169,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -1,198 +1,67 @@\n /*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n  *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n package org.syncope.core.persistence.beans;\n \n-import com.thoughtworks.xstream.XStream;\n-import java.net.URLDecoder;\n-import java.net.URLEncoder;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.CascadeType;\n-import javax.persistence.Column;\n import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n import javax.persistence.Id;\n-import javax.persistence.Lob;\n-import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n-import org.identityconnectors.framework.common.objects.Attribute;\n-import org.springframework.context.ConfigurableApplicationContext;\n-import org.syncope.core.util.ApplicationContextManager;\n-import org.syncope.types.PropagationMode;\n-import org.syncope.types.ResourceOperationType;\n \n-/**\n- * Encapsulate all information about a propagation task.\n- */\n @Entity\n public class Task extends AbstractBaseBean {\n \n-    private static final long serialVersionUID = 7086054884614511210L;\n+    private static final long serialVersionUID = 5837401178128177511L;\n \n     /**\n      * Id.\n      */\n     @Id\n     private Long id;\n \n-    /**\n-     * @see PropagationMode\n-     */\n-    @Enumerated(EnumType.STRING)\n-    @Column(nullable = false)\n-    private PropagationMode propagationMode;\n-\n-    /**\n-     * @see ResourceOperationType\n-     */\n-    @Enumerated(EnumType.STRING)\n-    @Column(nullable = false)\n-    private ResourceOperationType resourceOperationType;\n-\n-    /**\n-     * The accountId on the target resource.\n-     */\n-    private String accountId;\n-\n-    /**\n-     * The (optional) former accountId on the target resource.\n-     */\n-    private String oldAccountId;\n-\n-    /**\n-     * Attributes to be propagated.\n-     */\n-    @Lob\n-    @Column(nullable = false)\n-    private String xmlAttributes;\n-\n-    /**\n-     * TargetResource to which the propagation happens.\n-     */\n-    @ManyToOne\n-    private TargetResource resource;\n-\n-    /**\n-     * When this task has been (or will be) executed, what its result was.\n-     */\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true,\n     mappedBy = \"task\")\n-    private List<TaskExecution> executions;\n+    private List<TaskExec> executions;\n \n-    /**\n-     * Default constructor.\n-     */\n     public Task() {\n         super();\n \n-        executions = new ArrayList<TaskExecution>();\n+        executions = new ArrayList<TaskExec>();\n     }\n \n     public Long getId() {\n         return id;\n     }\n \n-    public String getAccountId() {\n-        return accountId;\n-    }\n-\n-    public void setAccountId(String accountId) {\n-        this.accountId = accountId;\n-    }\n-\n-    public String getOldAccountId() {\n-        return oldAccountId;\n-    }\n-\n-    public void setOldAccountId(String oldAccountId) {\n-        this.oldAccountId = oldAccountId;\n-    }\n-\n-    public Set<Attribute> getAttributes() {\n-        Set<Attribute> result = Collections.EMPTY_SET;\n-\n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n-        XStream xStream = context.getBean(XStream.class);\n-        try {\n-            result = (Set<Attribute>) xStream.fromXML(\n-                    URLDecoder.decode(xmlAttributes, \"UTF-8\"));\n-        } catch (Throwable t) {\n-            LOG.error(\"During attribute deserialization\", t);\n-        }\n-\n-        return result;\n-    }\n-\n-    public void setAttributes(final Set<Attribute> attributes) {\n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n-        XStream xStream = context.getBean(XStream.class);\n-        try {\n-            xmlAttributes = URLEncoder.encode(\n-                    xStream.toXML(attributes), \"UTF-8\");\n-        } catch (Throwable t) {\n-            LOG.error(\"During attribute serialization\", t);\n-        }\n-    }\n-\n-    public boolean addExecution(TaskExecution execution) {\n-        return executions.add(execution);\n+    public boolean addExec(TaskExec exec) {\n+        return exec != null && !executions.contains(exec)\n+                && executions.add(exec);\n     }\n \n-    public boolean removeExecution(TaskExecution execution) {\n-        return executions.remove(execution);\n+    public boolean removeExec(TaskExec exec) {\n+        return exec != null && executions.remove(exec);\n     }\n \n-    public List<TaskExecution> getExecutions() {\n+    public List<TaskExec> getExecs() {\n         return executions;\n     }\n \n-    public void setExecutions(List<TaskExecution> executions) {\n+    public void setExecs(List<TaskExec> executions) {\n         this.executions.clear();\n         if (executions != null && !executions.isEmpty()) {\n             this.executions.addAll(executions);\n         }\n     }\n-\n-    public PropagationMode getPropagationMode() {\n-        return propagationMode;\n-    }\n-\n-    public void setPropagationMode(PropagationMode propagationMode) {\n-        this.propagationMode = propagationMode;\n-    }\n-\n-    public ResourceOperationType getResourceOperationType() {\n-        return resourceOperationType;\n-    }\n-\n-    public void setResourceOperationType(\n-            final ResourceOperationType resourceOperationType) {\n-\n-        this.resourceOperationType = resourceOperationType;\n-    }\n-\n-    public TargetResource getResource() {\n-        return resource;\n-    }\n-\n-    public void setResource(TargetResource resource) {\n-        this.resource = resource;\n-    }\n }"},{"sha":"f3fe95efafdf07f7da36edea87a5ca892168df09","filename":"core/src/main/java/org/syncope/core/persistence/beans/TaskExec.java","status":"renamed","additions":17,"deletions":22,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -25,10 +25,12 @@\n \n /**\n  * An execution (with result) of a Task.\n- * @see Task\n+ * @see PropagationTask\n  */\n @Entity\n-public class TaskExecution extends AbstractBaseBean {\n+public class TaskExec extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 1909033231464074554L;\n \n     /**\n      * Id.\n@@ -48,9 +50,6 @@ public class TaskExecution extends AbstractBaseBean {\n     @Temporal(TemporalType.TIMESTAMP)\n     private Date endDate;\n \n-    @Column(nullable = true)\n-    private Long workflowId;\n-\n     /**\n      * Any information to be accompained to this execution's result.\n      */\n@@ -63,12 +62,8 @@ public class TaskExecution extends AbstractBaseBean {\n     @ManyToOne(optional = false)\n     private Task task;\n \n-    /**\n-     * Default constructor.\n-     */\n-    public TaskExecution() {\n-        super();\n-    }\n+    @Column(nullable = false)\n+    private String status;\n \n     public Long getId() {\n         return id;\n@@ -98,14 +93,6 @@ public void setStartDate(Date startDate) {\n         this.startDate = startDate;\n     }\n \n-    public Long getWorkflowId() {\n-        return workflowId;\n-    }\n-\n-    public void setWorkflowId(Long workflowId) {\n-        this.workflowId = workflowId;\n-    }\n-\n     public Task getTask() {\n         return task;\n     }\n@@ -114,14 +101,22 @@ public void setTask(Task task) {\n         this.task = task;\n     }\n \n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(String status) {\n+        this.status = status;\n+    }\n+\n     @Override\n     public String toString() {\n-        return \"TaskExecution{\"\n-                + \"id=\" + id + \", \"\n+        return getClass().getSimpleName() + \"{\"\n+                + \"id=\" + getId() + \", \"\n                 + \"startDate=\" + startDate + \", \"\n                 + \"endDate=\" + endDate + \", \"\n-                + \"workflowId=\" + workflowId + \", \"\n                 + \"task=\" + task + \", \"\n+                + \"status=\" + status + \", \"\n                 + \"message=\" + message + '}';\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/TaskExecution.java"},{"sha":"0f5f643fafce79f318b472380292a1fda835b7b4","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttr.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -32,6 +32,8 @@\n @Entity\n public class MAttr extends AbstractAttr {\n \n+    private static final long serialVersionUID = 3755864809152866489L;\n+\n     @Id\n     private Long id;\n "},{"sha":"08d95e881230980ecf705cff5d43f83b2c641075","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttrUniqueValue.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -25,6 +25,8 @@\n @Entity\n public class MAttrUniqueValue extends AbstractAttrUniqueValue {\n \n+    private static final long serialVersionUID = 3985867531873453718L;\n+\n     @Id\n     private Long id;\n "},{"sha":"76525f135bb4fa7a21970645e8323e6add3e78ad","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttr.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -32,6 +32,8 @@\n @Entity\n public class RAttr extends AbstractAttr {\n \n+    private static final long serialVersionUID = 2848159565890995780L;\n+\n     @Id\n     private Long id;\n "},{"sha":"8225f6644af1b01c89f30508c7ec7e29891eeef5","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttrUniqueValue.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -25,6 +25,8 @@\n @Entity\n public class RAttrUniqueValue extends AbstractAttrUniqueValue {\n \n+    private static final long serialVersionUID = 4681561795607192855L;\n+\n     @Id\n     private Long id;\n "},{"sha":"d2117667ede728e0a7da8507723c6b83837e9ab9","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttr.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -35,6 +35,8 @@\n @Entity\n public class UAttr extends AbstractAttr {\n \n+    private static final long serialVersionUID = 6333601983691157406L;\n+\n     /**\n      * Auto-generated id for this table.\n      */"},{"sha":"06adfad063982887849af99d5ff142bed0b2811e","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttrUniqueValue.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -25,6 +25,8 @@\n @Entity\n public class UAttrUniqueValue extends AbstractAttrUniqueValue {\n \n+    private static final long serialVersionUID = -64080804563305387L;\n+\n     @Id\n     private Long id;\n "},{"sha":"acbbdad04dd2e2fdd5a1a46e87411f6c47436660","filename":"core/src/main/java/org/syncope/core/persistence/dao/TaskDAO.java","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -16,22 +16,30 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface TaskDAO extends DAO {\n \n-    Task find(Long id);\n+     <T extends Task> T find(Long id);\n \n-    List<Task> findAll();\n+     <T extends Task> List<T> findAll(TargetResource resource,\n+            Class<T> reference);\n \n-    List<Task> findAll(int page, int itemsPerPage);\n+     <T extends Task> List<T> findAll(Class<T> reference);\n \n-    Integer count();\n+     <T extends Task> List<T> findAll(int page, int itemsPerPage,\n+            Class<T> reference);\n \n-    Task save(Task task)\n+     <T extends Task> Integer count(Class<T> reference);\n+\n+     <T extends Task> T save(T task)\n             throws InvalidEntityException;\n \n-    void delete(Long id);\n+     <T extends Task> void delete(Long id);\n+\n+     <T extends Task> void delete(T task);\n \n-    void delete(Task task);\n+     <T extends Task> void deleteAll(TargetResource resource,\n+            Class<T> reference);\n }"},{"sha":"0c76f239fba70d3648397b60309dc56c47772c4c","filename":"core/src/main/java/org/syncope/core/persistence/dao/TaskExecDAO.java","status":"renamed","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecDAO.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -15,19 +15,20 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import org.syncope.core.persistence.beans.TaskExecution;\n+import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n-public interface TaskExecutionDAO extends DAO {\n+public interface TaskExecDAO extends DAO {\n \n-    TaskExecution find(Long id);\n+    TaskExec find(Long id);\n \n-    List<TaskExecution> findAll();\n+     <T extends Task> List<TaskExec> findAll(Class<T> reference);\n \n-    TaskExecution save(TaskExecution execution)\n+    TaskExec save(TaskExec execution)\n             throws InvalidEntityException;\n \n     void delete(Long id);\n \n-    void delete(TaskExecution execution);\n+    void delete(TaskExec execution);\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/TaskExecutionDAO.java"},{"sha":"f775b7858b9b83cb362b2d5d799e784d57f02933","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -18,18 +18,25 @@\n import javax.persistence.CacheRetrieveMode;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.types.SourceMappingType;\n \n @Repository\n public class ResourceDAOImpl extends AbstractDAOImpl\n         implements ResourceDAO {\n \n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n     @Override\n     public TargetResource find(final String name) {\n         Query query = entityManager.createQuery(\n@@ -131,7 +138,8 @@ public void delete(final String name) {\n \n         deleteAllMappings(resource);\n \n-        resource.getTasks().clear();\n+        taskDAO.deleteAll(resource, PropagationTask.class);\n+        taskDAO.deleteAll(resource, SyncTask.class);\n \n         for (SyncopeUser user : resource.getUsers()) {\n             user.removeTargetResource(resource);"},{"sha":"9fc49f6cf448ad9c93a09cf898035e1befd9748b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":47,"deletions":16,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -14,29 +14,46 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.dao.TaskDAO;\n \n @Repository\n public class TaskDAOImpl extends AbstractDAOImpl\n         implements TaskDAO {\n \n     @Override\n-    public Task find(final Long id) {\n-        return entityManager.find(Task.class, id);\n+    public <T extends Task> T find(final Long id) {\n+        return (T) entityManager.find(Task.class, id);\n     }\n \n     @Override\n-    public List<Task> findAll() {\n-        return findAll(-1, -1);\n+    public <T extends Task> List<T> findAll(\n+            final TargetResource resource, final Class<T> reference) {\n+\n+        final Query query = entityManager.createQuery(\"SELECT e FROM \"\n+                + reference.getSimpleName() + \" e \"\n+                + \"WHERE e.resource=:resource\");\n+        query.setParameter(\"resource\", resource);\n+\n+        return query.getResultList();\n     }\n \n     @Override\n-    public List<Task> findAll(final int page, final int itemsPerPage) {\n-        final Query query = entityManager.createQuery(\"SELECT e FROM Task e\");\n+    public <T extends Task> List<T> findAll(final Class<T> reference) {\n+        return findAll(-1, -1, reference);\n+    }\n+\n+    @Override\n+    public <T extends Task> List<T> findAll(final int page,\n+            final int itemsPerPage, final Class<T> reference) {\n+\n+        final Query query = entityManager.createQuery(\"SELECT e FROM \"\n+                + reference.getSimpleName() + \" e\");\n \n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n \n@@ -48,21 +65,23 @@ public List<Task> findAll(final int page, final int itemsPerPage) {\n     }\n \n     @Override\n-    public final Integer count() {\n+    public <T extends Task> Integer count(final Class<T> reference) {\n         Query countQuery =\n-                entityManager.createNativeQuery(\"SELECT COUNT(id) FROM Task\");\n+                entityManager.createNativeQuery(\"SELECT COUNT(id) \"\n+                + \"FROM Task WHERE DTYPE=:dtype\");\n+        countQuery.setParameter(\"dtype\", reference.getSimpleName());\n \n         return ((Number) countQuery.getSingleResult()).intValue();\n     }\n \n     @Override\n-    public Task save(final Task task) {\n+    public <T extends Task> T save(final T task) {\n         return entityManager.merge(task);\n     }\n \n     @Override\n-    public void delete(final Long id) {\n-        Task task = find(id);\n+    public <T extends Task> void delete(final Long id) {\n+        T task = find(id);\n         if (task == null) {\n             return;\n         }\n@@ -71,11 +90,23 @@ public void delete(final Long id) {\n     }\n \n     @Override\n-    public void delete(final Task task) {\n-        if (task.getResource() != null) {\n-            task.getResource().removeTask(task);\n-        }\n-\n+    public <T extends Task> void delete(final T task) {\n         entityManager.remove(task);\n     }\n+\n+    @Override\n+    public <T extends Task> void deleteAll(\n+            final TargetResource resource, final Class<T> reference) {\n+\n+        List<T> tasks = findAll(resource, reference);\n+        if (tasks != null) {\n+            List<Long> taskIds = new ArrayList<Long>(tasks.size());\n+            for (T task : tasks) {\n+                taskIds.add(task.getId());\n+            }\n+            for (Long taskId : taskIds) {\n+                delete(taskId);\n+            }\n+        }\n+    }\n }"},{"sha":"950896148af88f851caa0662738f53b30398bbe8","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskExecDAOImpl.java","status":"renamed","additions":16,"deletions":13,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -17,33 +17,36 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.syncope.core.persistence.beans.TaskExecution;\n-import org.syncope.core.persistence.dao.TaskExecutionDAO;\n+import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.beans.TaskExec;\n+import org.syncope.core.persistence.dao.TaskExecDAO;\n \n @Repository\n-public class TaskExecutionDAOImpl extends AbstractDAOImpl\n-        implements TaskExecutionDAO {\n+public class TaskExecDAOImpl extends AbstractDAOImpl\n+        implements TaskExecDAO {\n \n     @Override\n-    public TaskExecution find(final Long id) {\n-        return entityManager.find(TaskExecution.class, id);\n+    public TaskExec find(final Long id) {\n+        return entityManager.find(TaskExec.class, id);\n     }\n \n     @Override\n-    public List<TaskExecution> findAll() {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM TaskExecution e\");\n+    public <T extends Task> List<TaskExec> findAll(Class<T> reference) {\n+        Query query = entityManager.createQuery(\"SELECT e \"\n+                + \"FROM \" + TaskExec.class.getSimpleName() + \" e \"\n+                + \"WHERE e.task.class=:taskClass\");\n+        query.setParameter(\"taskClass\", reference.getSimpleName());\n         return query.getResultList();\n     }\n \n     @Override\n-    public TaskExecution save(final TaskExecution execution) {\n+    public TaskExec save(final TaskExec execution) {\n         return entityManager.merge(execution);\n     }\n \n     @Override\n     public void delete(final Long id) {\n-        TaskExecution execution = find(id);\n+        TaskExec execution = find(id);\n         if (execution == null) {\n             return;\n         }\n@@ -52,9 +55,9 @@ public void delete(final Long id) {\n     }\n \n     @Override\n-    public void delete(final TaskExecution execution) {\n+    public void delete(final TaskExec execution) {\n         if (execution.getTask() != null) {\n-            execution.getTask().removeExecution(execution);\n+            execution.getTask().removeExec(execution);\n         }\n \n         entityManager.remove(execution);","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskExecutionDAOImpl.java"},{"sha":"e38a87137d92d83891af01c625f9a8e6d6749cfb","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":26,"deletions":52,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -14,8 +14,6 @@\n  */\n package org.syncope.core.persistence.propagation;\n \n-import com.opensymphony.workflow.Workflow;\n-import com.opensymphony.workflow.WorkflowException;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.util.ArrayList;\n@@ -26,7 +24,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Resource;\n import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -48,8 +45,8 @@\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.Task;\n-import org.syncope.core.persistence.beans.TaskExecution;\n+import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttr;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n@@ -61,16 +58,14 @@\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n-import org.syncope.core.persistence.dao.TaskExecutionDAO;\n+import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.core.persistence.dao.VirSchemaDAO;\n import org.syncope.core.util.JexlUtil;\n-import org.syncope.core.workflow.Constants;\n-import org.syncope.core.workflow.WFUtils;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.ResourceOperationType;\n import org.syncope.types.SourceMappingType;\n import org.syncope.types.SchemaType;\n-import org.syncope.types.TaskExecutionStatus;\n+import org.syncope.types.PropagationTaskExecStatus;\n \n /**\n  * Manage the data propagation to target resources.\n@@ -114,13 +109,7 @@ public class PropagationManager {\n      * Task execution DAO.\n      */\n     @Autowired\n-    private TaskExecutionDAO taskExecutionDAO;\n-\n-    /**\n-     * Task execution workflow.\n-     */\n-    @Resource(name = \"taskExecutionWorkflow\")\n-    private Workflow workflow;\n+    private TaskExecDAO taskExecDAO;\n \n     /**\n      * JEXL engine for evaluating connector's account link.\n@@ -240,17 +229,16 @@ protected void provision(\n         resourceOperations.purge();\n         LOG.debug(\"After purge: {}\", resourceOperations);\n \n-        Task task;\n-        TaskExecution execution;\n-        Long workflowId;\n+        PropagationTask task;\n+        TaskExec execution;\n         for (ResourceOperationType type : ResourceOperationType.values()) {\n             for (TargetResource resource : resourceOperations.get(type)) {\n                 Map<String, Set<Attribute>> preparedAttributes =\n                         prepareAttributes(user, password, resource);\n                 String accountId =\n                         preparedAttributes.keySet().iterator().next();\n \n-                task = new Task();\n+                task = new PropagationTask();\n                 task.setResource(resource);\n                 task.setResourceOperationType(type);\n                 task.setPropagationMode(\n@@ -263,23 +251,17 @@ protected void provision(\n                 task.setAttributes(\n                         preparedAttributes.values().iterator().next());\n \n-                execution = new TaskExecution();\n+                execution = new TaskExec();\n                 execution.setTask(task);\n+                execution.setStatus(\n+                        PropagationTaskExecStatus.CREATED.toString());\n \n-                task.addExecution(execution);\n+                task.addExec(execution);\n                 task = taskDAO.save(task);\n \n                 // Re-read execution to get the unique id\n-                execution = task.getExecutions().iterator().next();\n-\n-                try {\n-                    workflowId = workflow.initialize(\n-                            Constants.TASKEXECUTION_WORKFLOW, 0, null);\n-                    execution.setWorkflowId(workflowId);\n-                } catch (WorkflowException e) {\n-                    LOG.error(\"While initializing workflow for {}\",\n-                            execution, e);\n-                }\n+                execution = (TaskExec) task.getExecs().\n+                        iterator().next();\n \n                 LOG.debug(\"Execution started for {}\", task);\n \n@@ -290,8 +272,8 @@ protected void provision(\n                 // Propagation is interrupted as soon as the result of the\n                 // communication with a mandatory resource is in error\n                 if (mandatoryResourceNames.contains(resource.getName())\n-                        && WFUtils.getTaskExecutionStatus(workflow, execution)\n-                        != TaskExecutionStatus.SUCCESS) {\n+                        && !PropagationTaskExecStatus.SUCCESS.toString().\n+                        equals(execution.getStatus())) {\n \n                     throw new PropagationException(resource.getName(),\n                             execution.getMessage());\n@@ -604,11 +586,11 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n \n     }\n \n-    public void propagate(final TaskExecution execution) {\n+    public void propagate(final TaskExec execution) {\n         final Date startDate = new Date();\n         String taskExecutionMessage = null;\n \n-        final Task task = execution.getTask();\n+        final PropagationTask task = (PropagationTask) execution.getTask();\n \n         // Output parameter to verify the propagation request tryed\n         final Set<String> triedPropagationRequests = new HashSet<String>();\n@@ -699,14 +681,10 @@ public void propagate(final TaskExecution execution) {\n                 default:\n             }\n \n-            WFUtils.doExecuteAction(workflow,\n-                    Constants.TASKEXECUTION_WORKFLOW,\n-                    Constants.ACTION_OK,\n-                    execution.getWorkflowId(),\n+            execution.setStatus(\n                     task.getPropagationMode() == PropagationMode.SYNC\n-                    ? Collections.singletonMap(\n-                    PropagationMode.SYNC.toString(), null)\n-                    : null);\n+                    ? PropagationTaskExecStatus.SUCCESS.toString()\n+                    : PropagationTaskExecStatus.SUBMITTED.toString());\n \n             LOG.debug(\"Successfully propagated to resource {}\",\n                     task.getResource());\n@@ -724,14 +702,10 @@ public void propagate(final TaskExecution execution) {\n             }\n \n             try {\n-                WFUtils.doExecuteAction(workflow,\n-                        Constants.TASKEXECUTION_WORKFLOW,\n-                        Constants.ACTION_KO,\n-                        execution.getWorkflowId(),\n+                execution.setStatus(\n                         task.getPropagationMode() == PropagationMode.SYNC\n-                        ? Collections.singletonMap(\n-                        PropagationMode.SYNC.toString(), null)\n-                        : null);\n+                        ? PropagationTaskExecStatus.FAILURE.toString()\n+                        : PropagationTaskExecStatus.UNSUBMITTED.toString());\n             } catch (Throwable wft) {\n                 LOG.error(\"While executing KO action on {}\", execution, wft);\n             }\n@@ -746,11 +720,11 @@ public void propagate(final TaskExecution execution) {\n                 execution.setMessage(taskExecutionMessage);\n                 execution.setEndDate(new Date());\n \n-                taskExecutionDAO.save(execution);\n+                taskExecDAO.save(execution);\n \n                 LOG.debug(\"Execution finished: {}\", execution);\n             } else {\n-                taskExecutionDAO.delete(execution);\n+                taskExecDAO.delete(execution);\n \n                 LOG.debug(\"Execution removed: {}\", execution);\n             }"},{"sha":"84d2dd4758818734d099c7ec4095a09b7c5d2a6a","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/PropagationTaskCheck.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskCheck.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = PropagationTaskValidator.class)\n+@Documented\n+public @interface PropagationTaskCheck {\n+\n+    String message() default \"{org.syncope.core.validation.propagationtask}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"3657fdd5b65cbe0cae2978affdcad1494b54f983","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/PropagationTaskValidator.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -0,0 +1,69 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.util.List;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.TaskExec;\n+import org.syncope.types.EntityViolationType;\n+import org.syncope.types.PropagationTaskExecStatus;\n+\n+public class PropagationTaskValidator extends AbstractValidator\n+        implements ConstraintValidator<PropagationTaskCheck, PropagationTask> {\n+\n+    @Override\n+    public void initialize(final PropagationTaskCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(final PropagationTask object,\n+            final ConstraintValidatorContext context) {\n+\n+        boolean isValid;\n+\n+        if (object == null) {\n+            isValid = true;\n+        } else {\n+            isValid = object.getPropagationMode() != null\n+                    && object.getResourceOperationType() != null\n+                    && !object.getAttributes().isEmpty()\n+                    && object.getResource() != null;\n+\n+            if (isValid) {\n+                List<TaskExec> executions = object.getExecs();\n+                for (TaskExec execution : executions) {\n+                    try {\n+                        PropagationTaskExecStatus.valueOf(execution.getStatus());\n+                    } catch (IllegalArgumentException e) {\n+                        LOG.error(\"Invalid execution status '\"\n+                                + execution.getStatus() + \"'\", e);\n+                        isValid = false;\n+                    }\n+                }\n+            }\n+\n+            if (!isValid) {\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        EntityViolationType.InvalidPropagationTask.toString()).\n+                        addConstraintViolation();\n+            }\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"1a2290702d09b9e644bbe84397dd4036b6c16814","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SchedTaskCheck.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskCheck.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = SchedTaskValidator.class)\n+@Documented\n+public @interface SchedTaskCheck {\n+\n+    String message() default \"{org.syncope.core.validation.schedtask}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"bca5baa9882c8d662a4aca37bd5d4164ab19a52f","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SchedTaskValidator.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -0,0 +1,87 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.text.ParseException;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.quartz.CronExpression;\n+import org.syncope.core.persistence.beans.SchedTask;\n+import org.syncope.types.EntityViolationType;\n+\n+public class SchedTaskValidator extends AbstractValidator\n+        implements ConstraintValidator<SchedTaskCheck, SchedTask> {\n+\n+    @Override\n+    public void initialize(final SchedTaskCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(final SchedTask object,\n+            final ConstraintValidatorContext context) {\n+\n+        boolean isValid;\n+\n+        if (object == null) {\n+            isValid = true;\n+        } else {\n+            if (object.getJobClassName() == null) {\n+                isValid = false;\n+\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        EntityViolationType.InvalidSchedTask.toString()).\n+                        addNode(object + \".jobClassName is NULL\").\n+                        addConstraintViolation();\n+            } else {\n+                try {\n+                    Class.forName(object.getJobClassName());\n+                    isValid = true;\n+                } catch (ClassNotFoundException e) {\n+                    LOG.error(\"Job class \" + object.getJobClassName()\n+                            + \" not found\", e);\n+                    isValid = false;\n+\n+                    context.disableDefaultConstraintViolation();\n+                    context.buildConstraintViolationWithTemplate(\n+                            EntityViolationType.InvalidSchedTask.toString()).\n+                            addNode(object + \".jobClassName==\"\n+                            + object.getJobClassName()).\n+                            addConstraintViolation();\n+                }\n+\n+                if (isValid && object.getCronExpression() != null) {\n+                    try {\n+                        new CronExpression(object.getCronExpression());\n+                        isValid = true;\n+                    } catch (ParseException e) {\n+                        LOG.error(\"Invalid cron expression '\" + object.\n+                                getCronExpression() + \"'\", e);\n+                        isValid = false;\n+\n+                        context.disableDefaultConstraintViolation();\n+                        context.buildConstraintViolationWithTemplate(\n+                                EntityViolationType.InvalidSchedTask.toString()).\n+                                addNode(object + \".cronExpression==\"\n+                                + object.getCronExpression()).\n+                                addConstraintViolation();\n+                    }\n+                }\n+            }\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"7b47d8967176b83ddd808661ca6c2e1cf1573755","filename":"core/src/main/java/org/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -20,6 +20,11 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.TypeMismatchException;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.SchedTask;\n+import org.syncope.core.persistence.beans.SyncTask;\n+import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.util.TaskUtil;\n \n @Transactional(rollbackFor = {\n     Throwable.class\n@@ -45,4 +50,37 @@ protected AttributableUtil getAttributableUtil(final String kind) {\n \n         return result;\n     }\n+\n+    protected TaskUtil getTaskUtil(final String kind) {\n+        TaskUtil result = null;\n+\n+        try {\n+            result = TaskUtil.valueOf(kind.toUpperCase());\n+        } catch (Exception e) {\n+            LOG.error(\"Task not supported: \" + kind);\n+\n+            throw new TypeMismatchException(kind, TaskUtil.class, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    protected TaskUtil getTaskUtil(final Task task) {\n+        TaskUtil result = (task instanceof PropagationTask)\n+                ? TaskUtil.PROPAGATION\n+                : (task instanceof SchedTask)\n+                ? TaskUtil.SCHED\n+                : (task instanceof SyncTask)\n+                ? TaskUtil.SYNC\n+                : null;\n+\n+        if (result == null) {\n+            LOG.error(\"Task not supported: \" + task.getClass().getName());\n+\n+            throw new TypeMismatchException(task.getClass().getName(),\n+                    TaskUtil.class);\n+        }\n+\n+        return result;\n+    }\n }"},{"sha":"3ccce547d15e3b779c27ba70a8f85801c9ee0cae","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":105,"deletions":109,"changes":214,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -14,7 +14,6 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import com.opensymphony.workflow.Workflow;\n import com.opensymphony.workflow.WorkflowException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n@@ -24,27 +23,25 @@\n import java.util.ArrayList;\n import java.util.List;\n import javassist.NotFoundException;\n-import javax.annotation.Resource;\n-import jpasymphony.dao.JPAWorkflowEntryDAO;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.servlet.ModelAndView;\n-import org.syncope.client.to.TaskExecutionTO;\n+import org.syncope.client.to.TaskExecTO;\n import org.syncope.client.to.TaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.Task;\n-import org.syncope.core.persistence.beans.TaskExecution;\n+import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.dao.TaskDAO;\n-import org.syncope.core.persistence.dao.TaskExecutionDAO;\n+import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.core.persistence.propagation.PropagationManager;\n import org.syncope.core.rest.data.TaskDataBinder;\n-import org.syncope.core.workflow.Constants;\n-import org.syncope.core.workflow.WFUtils;\n+import org.syncope.core.util.TaskUtil;\n import org.syncope.types.PropagationMode;\n+import org.syncope.types.PropagationTaskExecStatus;\n import org.syncope.types.SyncopeClientExceptionType;\n-import org.syncope.types.TaskExecutionStatus;\n \n @Controller\n @RequestMapping(\"/task\")\n@@ -54,66 +51,69 @@ public class TaskController extends AbstractController {\n     private TaskDAO taskDAO;\n \n     @Autowired\n-    private TaskExecutionDAO taskExecutionDAO;\n+    private TaskExecDAO taskExecDAO;\n \n     @Autowired\n     private TaskDataBinder taskDataBinder;\n \n     @Autowired\n     private PropagationManager propagationManager;\n \n-    @Resource(name = \"taskExecutionWorkflow\")\n-    private Workflow workflow;\n-\n-    @Autowired\n-    private JPAWorkflowEntryDAO workflowEntryDAO;\n-\n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n-    value = \"/count\")\n-    public ModelAndView count() {\n-        return new ModelAndView().addObject(taskDAO.count());\n+    value = \"/{kind}/count\")\n+    public ModelAndView count(@PathVariable(\"kind\") final String kind) {\n+        return new ModelAndView().addObject(\n+                taskDAO.count(getTaskUtil(kind).taskClass()));\n     }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n-    value = \"/list\")\n-    public List<TaskTO> list() {\n-        List<Task> tasks = taskDAO.findAll();\n+    value = \"/{kind}/list\")\n+    public List<TaskTO> list(@PathVariable(\"kind\") final String kind) {\n+        TaskUtil taskUtil = getTaskUtil(kind);\n+\n+        List<Task> tasks = taskDAO.findAll(taskUtil.taskClass());\n         List<TaskTO> taskTOs = new ArrayList<TaskTO>(tasks.size());\n         for (Task task : tasks) {\n-            taskTOs.add(taskDataBinder.getTaskTO(workflow, task));\n+            taskTOs.add(taskDataBinder.getTaskTO(task, taskUtil));\n         }\n \n         return taskTOs;\n     }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n-    value = \"/list/{page}/{size}\")\n+    value = \"/{kind}/list/{page}/{size}\")\n     public List<TaskTO> list(\n+            @PathVariable(\"kind\") final String kind,\n             @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size) {\n \n-        List<Task> tasks = taskDAO.findAll(page, size);\n+        TaskUtil taskUtil = getTaskUtil(kind);\n+\n+        List<Task> tasks = taskDAO.findAll(page, size, taskUtil.taskClass());\n         List<TaskTO> taskTOs = new ArrayList<TaskTO>(tasks.size());\n         for (Task task : tasks) {\n-            taskTOs.add(taskDataBinder.getTaskTO(workflow, task));\n+            taskTOs.add(taskDataBinder.getTaskTO(task, taskUtil));\n         }\n \n         return taskTOs;\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n-    value = \"/execution/list\")\n-    public List<TaskExecutionTO> listExecutions() {\n-        List<TaskExecution> executions = taskExecutionDAO.findAll();\n-        List<TaskExecutionTO> executionTOs =\n-                new ArrayList<TaskExecutionTO>(executions.size());\n-        for (TaskExecution execution : executions) {\n+    value = \"/{kind}/execution/list\")\n+    public List<TaskExecTO> listExecutions(\n+            @PathVariable(\"kind\") final String kind) {\n+\n+        List<TaskExec> executions = taskExecDAO.findAll(\n+                getTaskUtil(kind).taskClass());\n+        List<TaskExecTO> executionTOs =\n+                new ArrayList<TaskExecTO>(executions.size());\n+        for (TaskExec execution : executions) {\n             executionTOs.add(\n-                    taskDataBinder.getTaskExecutionTO(workflow, execution));\n+                    taskDataBinder.getTaskExecutionTO(execution));\n         }\n \n         return executionTOs;\n@@ -130,80 +130,88 @@ public TaskTO read(@PathVariable(\"taskId\") final Long taskId)\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n \n-        return taskDataBinder.getTaskTO(workflow, task);\n+        return taskDataBinder.getTaskTO(task, getTaskUtil(task));\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/execution/read/{executionId}\")\n-    public TaskExecutionTO readExecution(\n+    public TaskExecTO readExecution(\n             @PathVariable(\"executionId\") final Long executionId)\n             throws NotFoundException {\n \n-        TaskExecution execution = taskExecutionDAO.find(executionId);\n+        TaskExec execution = taskExecDAO.find(executionId);\n         if (execution == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);\n         }\n \n-        return taskDataBinder.getTaskExecutionTO(workflow, execution);\n+        return taskDataBinder.getTaskExecutionTO(execution);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_EXECUTE')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/execute/{taskId}\")\n-    public TaskExecutionTO execute(@PathVariable(\"taskId\") final Long taskId)\n+    public TaskExecTO execute(\n+            @PathVariable(\"taskId\") final Long taskId)\n             throws NotFoundException {\n \n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n \n-        TaskExecution execution = new TaskExecution();\n+        TaskExec execution = new TaskExec();\n         execution.setTask(task);\n+        switch (getTaskUtil(task)) {\n+            case PROPAGATION:\n+                execution.setStatus(\n+                        PropagationTaskExecStatus.CREATED.toString());\n+                execution = taskExecDAO.save(execution);\n+\n+                LOG.debug(\"Execution started for {}\", task);\n+                propagationManager.propagate(execution);\n+                LOG.debug(\"Execution finished for {}, {}\", task, execution);\n+                break;\n \n-        try {\n-            Long workflowId = workflow.initialize(\n-                    Constants.TASKEXECUTION_WORKFLOW, 0, null);\n-            execution.setWorkflowId(workflowId);\n-        } catch (WorkflowException e) {\n-            LOG.error(\"While initializing workflow for {}\",\n-                    execution, e);\n-        }\n-\n-        execution = taskExecutionDAO.save(execution);\n-\n-        LOG.debug(\"Execution started for {}\", task);\n-\n-        propagationManager.propagate(execution);\n+            case SCHED:\n+                break;\n \n-        LOG.debug(\"Execution finished for {}, {}\", task, execution);\n+            case SYNC:\n+                break;\n+        }\n \n-        return taskDataBinder.getTaskExecutionTO(workflow, execution);\n+        return taskDataBinder.getTaskExecutionTO(execution);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/execution/report/{executionId}\")\n-    public TaskExecutionTO report(\n+    public TaskExecTO report(\n             @PathVariable(\"executionId\") final Long executionId,\n-            @RequestParam(\"executionStatus\") final TaskExecutionStatus status,\n+            @RequestParam(\"executionStatus\")\n+            final PropagationTaskExecStatus status,\n             @RequestParam(\"message\") final String message)\n             throws NotFoundException, SyncopeClientCompositeErrorException,\n             WorkflowException {\n \n-        TaskExecution execution = taskExecutionDAO.find(executionId);\n-        if (execution == null) {\n+        TaskExec exec = taskExecDAO.find(executionId);\n+        if (exec == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);\n         }\n \n         SyncopeClientException invalidReportException =\n                 new SyncopeClientException(\n-                SyncopeClientExceptionType.InvalidTaskExecutionReport);\n-\n-        if (execution.getTask().getPropagationMode() != PropagationMode.ASYNC) {\n-            invalidReportException.addElement(\"Propagation mode: \"\n-                    + execution.getTask().getPropagationMode());\n+                SyncopeClientExceptionType.InvalidPropagationTaskExecReport);\n+\n+        TaskUtil taskUtil = getTaskUtil(exec.getTask());\n+        if (taskUtil != TaskUtil.PROPAGATION) {\n+            invalidReportException.addElement(\"Task type: \" + taskUtil);\n+        } else {\n+            PropagationTask task = (PropagationTask) exec.getTask();\n+            if (task.getPropagationMode() != PropagationMode.ASYNC) {\n+                invalidReportException.addElement(\n+                        \"Propagation mode: \" + task.getPropagationMode());\n+            }\n         }\n \n         switch (status) {\n@@ -229,19 +237,11 @@ public TaskExecutionTO report(\n             throw scce;\n         }\n \n-        final String wfAction = status == TaskExecutionStatus.SUCCESS\n-                ? Constants.ACTION_OK : Constants.ACTION_KO;\n-\n-        WFUtils.doExecuteAction(workflow,\n-                Constants.TASKEXECUTION_WORKFLOW,\n-                wfAction,\n-                execution.getWorkflowId(),\n-                null);\n+        exec.setStatus(status.toString());\n+        exec.setMessage(message);\n+        exec = taskExecDAO.save(exec);\n \n-        execution.setMessage(message);\n-        execution = taskExecutionDAO.save(execution);\n-\n-        return taskDataBinder.getTaskExecutionTO(workflow, execution);\n+        return taskDataBinder.getTaskExecutionTO(exec);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n@@ -255,30 +255,28 @@ public void delete(@PathVariable(\"taskId\") Long taskId)\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n \n-        SyncopeClientException incompleteTaskExecution =\n-                new SyncopeClientException(\n-                SyncopeClientExceptionType.IncompleteTaskExecution);\n-\n-        int[] wfActions;\n-        for (TaskExecution execution : task.getExecutions()) {\n-            wfActions = workflow.getAvailableActions(\n-                    execution.getWorkflowId(), null);\n-            if (wfActions != null && wfActions.length > 1) {\n-                incompleteTaskExecution.addElement(\n-                        execution.getId().toString());\n-            }\n-        }\n-        if (!incompleteTaskExecution.getElements().isEmpty()) {\n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-            scce.addException(incompleteTaskExecution);\n-            throw scce;\n-        }\n+        TaskUtil taskUtil = getTaskUtil(task);\n+        if (taskUtil == TaskUtil.PROPAGATION) {\n+            SyncopeClientException incompleteTaskExecution =\n+                    new SyncopeClientException(\n+                    SyncopeClientExceptionType.IncompletePropagationTaskExec);\n+\n+            List<TaskExec> execs = task.getExecs();\n+            for (TaskExec exec : execs) {\n+                if (PropagationTaskExecStatus.CREATED.toString().equals(\n+                        exec.getStatus())\n+                        || PropagationTaskExecStatus.SUBMITTED.toString().equals(\n+                        exec.getStatus())) {\n \n-        for (TaskExecution execution : task.getExecutions()) {\n-            if (execution.getWorkflowId() != null) {\n-                workflowEntryDAO.delete(execution.getWorkflowId());\n+                    incompleteTaskExecution.addElement(exec.getId().toString());\n+                }\n+            }\n+            if (!incompleteTaskExecution.getElements().isEmpty()) {\n+                SyncopeClientCompositeErrorException scce =\n+                        new SyncopeClientCompositeErrorException(\n+                        HttpStatus.BAD_REQUEST);\n+                scce.addException(incompleteTaskExecution);\n+                throw scce;\n             }\n         }\n \n@@ -291,17 +289,19 @@ public void delete(@PathVariable(\"taskId\") Long taskId)\n     public void deleteExecution(@PathVariable(\"executionId\") Long executionId)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n-        TaskExecution execution = taskExecutionDAO.find(executionId);\n+        TaskExec execution = taskExecDAO.find(executionId);\n         if (execution == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);\n         }\n \n-        int[] wfActions = workflow.getAvailableActions(\n-                execution.getWorkflowId(), null);\n-        if (wfActions != null && wfActions.length > 1) {\n+        if (PropagationTaskExecStatus.CREATED.toString().equals(\n+                execution.getStatus())\n+                || PropagationTaskExecStatus.SUBMITTED.toString().equals(\n+                execution.getStatus())) {\n+\n             SyncopeClientException incompleteTaskExecution =\n                     new SyncopeClientException(\n-                    SyncopeClientExceptionType.IncompleteTaskExecution);\n+                    SyncopeClientExceptionType.IncompletePropagationTaskExec);\n             incompleteTaskExecution.addElement(\n                     execution.getId().toString());\n \n@@ -312,10 +312,6 @@ public void deleteExecution(@PathVariable(\"executionId\") Long executionId)\n             throw scce;\n         }\n \n-        if (execution.getWorkflowId() != null) {\n-            workflowEntryDAO.delete(execution.getWorkflowId());\n-        }\n-\n-        taskExecutionDAO.delete(execution);\n+        taskExecDAO.delete(execution);\n     }\n }"},{"sha":"93d1c85aa4f02065590a0a82ac16ad5f8cd907c4","filename":"core/src/main/java/org/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":46,"deletions":15,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -14,46 +14,77 @@\n  */\n package org.syncope.core.rest.data;\n \n-import com.opensymphony.workflow.Workflow;\n+import java.util.List;\n import org.springframework.beans.BeanUtils;\n import org.springframework.stereotype.Component;\n-import org.syncope.client.to.TaskExecutionTO;\n+import org.syncope.client.to.PropagationTaskTO;\n+import org.syncope.client.to.SyncTaskTO;\n+import org.syncope.client.to.TaskExecTO;\n import org.syncope.client.to.TaskTO;\n+import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.SyncTask;\n+import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.Task;\n-import org.syncope.core.persistence.beans.TaskExecution;\n-import org.syncope.core.workflow.WFUtils;\n+import org.syncope.core.persistence.beans.TaskExec;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.util.TaskUtil;\n \n @Component\n public class TaskDataBinder {\n \n     private static final String[] IGNORE_TASK_PROPERTIES = {\n-        \"executions\", \"resource\"};\n+        \"executions\", \"resource\", \"defaultResources\", \"defaultRoles\",\n+        \"updateIdentities\"};\n \n     private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\n         \"task\"};\n \n-    public TaskExecutionTO getTaskExecutionTO(final Workflow workflow,\n-            final TaskExecution execution) {\n+    public TaskExecTO getTaskExecutionTO(\n+            final TaskExec execution) {\n \n-        TaskExecutionTO executionTO = new TaskExecutionTO();\n+        TaskExecTO executionTO = new TaskExecTO();\n         BeanUtils.copyProperties(execution, executionTO,\n                 IGNORE_TASK_EXECUTION_PROPERTIES);\n-        executionTO.setStatus(\n-                WFUtils.getTaskExecutionStatus(workflow, execution));\n         executionTO.setTask(execution.getTask().getId());\n \n         return executionTO;\n     }\n \n-    public TaskTO getTaskTO(final Workflow workflow, final Task task) {\n-        TaskTO taskTO = new TaskTO();\n+    public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n+        TaskTO taskTO = taskUtil.newTaskTO();\n         BeanUtils.copyProperties(task, taskTO, IGNORE_TASK_PROPERTIES);\n \n-        for (TaskExecution execution : task.getExecutions()) {\n-            taskTO.addExecution(getTaskExecutionTO(workflow, execution));\n+        List<TaskExec> executions = task.getExecs();\n+        for (TaskExec execution : executions) {\n+            taskTO.addExecution(getTaskExecutionTO(execution));\n         }\n \n-        taskTO.setResource(task.getResource().getName());\n+        switch (taskUtil) {\n+            case PROPAGATION:\n+                ((PropagationTaskTO) taskTO).setResource(\n+                        ((PropagationTask) task).getResource().getName());\n+                break;\n+\n+            case SCHED:\n+                break;\n+\n+            case SYNC:\n+                ((SyncTaskTO) taskTO).setResource(\n+                        ((SyncTask) task).getResource().getName());\n+                for (TargetResource resource :\n+                        ((SyncTask) task).getDefaultResources()) {\n+\n+                    ((SyncTaskTO) taskTO).addDefaultResource(resource.getName());\n+                }\n+                for (SyncopeRole role :\n+                        ((SyncTask) task).getDefaultRoles()) {\n+\n+                    ((SyncTaskTO) taskTO).addDefaultRole(role.getId());\n+                }\n+                ((SyncTaskTO) taskTO).setUpdateIdentities(\n+                        ((SyncTask) task).isUpdateIdentities());\n+                break;\n+        }\n \n         return taskTO;\n     }"},{"sha":"a8470fed0300c8d0445e1bf099c35dbef09e03f7","filename":"core/src/main/java/org/syncope/core/util/AttributableUtil.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -49,7 +49,9 @@\n \n public enum AttributableUtil {\n \n-    USER, ROLE, MEMBERSHIP;\n+    USER,\n+    ROLE,\n+    MEMBERSHIP;\n \n     public SourceMappingType sourceMappingType() {\n         SourceMappingType result = null;"},{"sha":"a03d664dc8d2ae95b790bb29194afffe8ac13a61","filename":"core/src/main/java/org/syncope/core/util/TaskUtil.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -0,0 +1,85 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.util;\n+\n+import org.syncope.client.to.PropagationTaskTO;\n+import org.syncope.client.to.SchedTaskTO;\n+import org.syncope.client.to.SyncTaskTO;\n+import org.syncope.client.to.TaskTO;\n+import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.SchedTask;\n+import org.syncope.core.persistence.beans.SyncTask;\n+import org.syncope.core.persistence.beans.Task;\n+\n+public enum TaskUtil {\n+\n+    PROPAGATION,\n+    SCHED,\n+    SYNC;\n+\n+    public <T extends Task> Class<T> taskClass() {\n+        Class result = null;\n+\n+        switch (this) {\n+            case PROPAGATION:\n+                result = PropagationTask.class;\n+                break;\n+            case SCHED:\n+                result = SchedTask.class;\n+                break;\n+            case SYNC:\n+                result = SyncTask.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends TaskTO> Class<T> taskTOClass() {\n+        Class result = null;\n+\n+        switch (this) {\n+            case PROPAGATION:\n+                result = PropagationTaskTO.class;\n+                break;\n+            case SCHED:\n+                result = SchedTaskTO.class;\n+                break;\n+            case SYNC:\n+                result = SyncTaskTO.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends TaskTO> T newTaskTO() {\n+        T result = null;\n+\n+        switch (this) {\n+            case PROPAGATION:\n+                result = (T) new PropagationTaskTO();\n+                break;\n+            case SCHED:\n+                result = (T) new SchedTaskTO();\n+                break;\n+            case SYNC:\n+                result = (T) new SyncTaskTO();\n+                break;\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"de2adc42500b0a2e5412b054cc2521b5ffec7305","filename":"core/src/main/java/org/syncope/core/workflow/Constants.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -44,13 +44,6 @@ public final class Constants {\n \n     public static final String USER_WORKFLOW = \"userWorkflow\";\n \n-    // ----- Task execution workflow ------ //\n-    public static final String ACTION_OK = \"ok\";\n-\n-    public static final String ACTION_KO = \"ko\";\n-\n-    public static final String TASKEXECUTION_WORKFLOW = \"taskExecutionWorkflow\";\n-\n     private Constants() {\n     }\n }"},{"sha":"4e607c78b64674a523e50ccf339fde2324c76229","filename":"core/src/main/java/org/syncope/core/workflow/WFUtils.java","status":"modified","additions":13,"deletions":41,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWFUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWFUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWFUtils.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -18,16 +18,11 @@\n import com.opensymphony.workflow.Workflow;\n import com.opensymphony.workflow.WorkflowException;\n import com.opensymphony.workflow.loader.ActionDescriptor;\n-import com.opensymphony.workflow.loader.WorkflowDescriptor;\n-import com.opensymphony.workflow.spi.Step;\n-import java.util.HashMap;\n-import java.util.List;\n+import java.util.Collections;\n import java.util.Map;\n import javassist.NotFoundException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.syncope.core.persistence.beans.TaskExecution;\n-import org.syncope.types.TaskExecutionStatus;\n \n public class WFUtils {\n \n@@ -46,25 +41,26 @@ public static Integer findWorkflowAction(\n             final Long workflowId,\n             final String actionName) {\n \n-        WorkflowDescriptor workflowDescriptor =\n-                workflow.getWorkflowDescriptor(workflowName);\n-\n         int[] actions = workflow.getAvailableActions(workflowId, null);\n \n         Integer actionId = null;\n         for (int i = 0; i < actions.length && actionId == null; i++) {\n             if (actionName.equals(\n-                    workflowDescriptor.getAction(actions[i]).getName())) {\n+                    workflow.getWorkflowDescriptor(workflowName).\n+                    getAction(actions[i]).getName())) {\n \n                 actionId = actions[i];\n             }\n         }\n \n-        Map<Integer, ActionDescriptor> commonActions =\n-                workflowDescriptor.getCommonActions();\n-        for (Integer actionNumber : commonActions.keySet()) {\n-            if (actionName.equals(commonActions.get(actionNumber).getName())) {\n-                actionId = actionNumber;\n+        if (actionId == null) {\n+            Map<Integer, ActionDescriptor> commonActions = workflow.\n+                    getWorkflowDescriptor(workflowName).getCommonActions();\n+            for (Map.Entry<Integer, ActionDescriptor> action :\n+                    commonActions.entrySet()) {\n+                if (actionName.equals(action.getValue().getName())) {\n+                    actionId = action.getKey();\n+                }\n             }\n         }\n \n@@ -79,41 +75,17 @@ public static void doExecuteAction(\n             final Map<String, Object> moreInputs)\n             throws WorkflowException, NotFoundException {\n \n-        Map<String, Object> inputs = new HashMap<String, Object>();\n-        if (moreInputs != null && !moreInputs.isEmpty()) {\n-            inputs.putAll(moreInputs);\n-        }\n-\n         Integer actionId = findWorkflowAction(\n                 workflow, workflowName, workflowId, actionName);\n         if (actionId == null) {\n             throw new NotFoundException(\"Workflow action '\" + actionName + \"'\");\n         }\n \n         try {\n-            workflow.doAction(workflowId, actionId, inputs);\n+            workflow.doAction(workflowId, actionId, moreInputs == null\n+                    ? Collections.EMPTY_MAP : moreInputs);\n         } catch (InvalidActionException e) {\n             throw new WorkflowException(e);\n         }\n     }\n-\n-    public static TaskExecutionStatus getTaskExecutionStatus(\n-            final Workflow workflow,\n-            final TaskExecution execution) {\n-\n-        TaskExecutionStatus result = TaskExecutionStatus.FAILURE;\n-\n-        try {\n-            List<Step> steps =\n-                    workflow.getCurrentSteps(execution.getWorkflowId());\n-            if (steps != null && !steps.isEmpty()) {\n-                result = TaskExecutionStatus.valueOf(\n-                        steps.iterator().next().getStatus());\n-            }\n-        } catch (Throwable t) {\n-            LOG.error(\"While getting status of {}\", execution, t);\n-        }\n-\n-        return result;\n-    }\n }"},{"sha":"67b3bf7b28b837bffe57861c1758877af8785e92","filename":"core/src/main/resources/META-INF/orm.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -210,15 +210,15 @@\n             </id>\n         </attributes>\n     </entity>\n-    <entity class=\"org.syncope.core.persistence.beans.TaskExecution\">\n+    <entity class=\"org.syncope.core.persistence.beans.TaskExec\">\n         <attributes>\n             <id name=\"id\">\n-                <generated-value generator=\"SEQ_TaskExecution\" strategy=\"TABLE\"/>\n-                <table-generator name=\"SEQ_TaskExecution\" pk-column-value=\"SEQ_TaskExecution\" initial-value=\"10\"/>\n+                <generated-value generator=\"SEQ_TaskExec\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_TaskExec\" pk-column-value=\"SEQ_TaskExec\" initial-value=\"10\"/>\n             </id>\n         </attributes>\n     </entity>\n-\n+    \n     <entity class=\"jpasymphony.beans.JPACurrentStep\">\n         <attributes>\n             <id name=\"id\">"},{"sha":"de804af846f14261c406785853c08f7eb3bba96b","filename":"core/src/main/resources/META-INF/orm.xml.oracle","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -174,11 +174,11 @@\n             </id>\n         </attributes>\n     </entity>\n-    <entity class=\"org.syncope.core.persistence.beans.TaskExecution\">\n+    <entity class=\"org.syncope.core.persistence.beans.TaskExec\">\n         <attributes>\n             <id name=\"id\">\n-                <generated-value generator=\"SEQ_TaskExecution\" strategy=\"TABLE\"/>\n-                <table-generator name=\"SEQ_TaskExecution\" pk-column-value=\"SEQ_TaskExecution\" initial-value=\"10\"/>\n+                <generated-value generator=\"SEQ_TaskExec\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_TaskExec\" pk-column-value=\"SEQ_TaskExec\" initial-value=\"10\"/>\n             </id>\n         </attributes>\n     </entity>"},{"sha":"97fcf05050c3621c982bb4de511c19f028852e75","filename":"core/src/main/resources/content.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -29,7 +29,7 @@\n     <hibernate_sequences sequence_name=\"SEQ_RAttrValue\" sequence_next_hi_value=\"1000\"/>\n     <hibernate_sequences sequence_name=\"SEQ_MAttrValue\" sequence_next_hi_value=\"1000\"/>\n     <hibernate_sequences sequence_name=\"SEQ_Task\" sequence_next_hi_value=\"10\"/>\n-    <hibernate_sequences sequence_name=\"SEQ_TaskExecution\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_TaskExec\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_JPACurrentStep\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_JPAHistoryStep\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_JPAPropertySetItem\" sequence_next_hi_value=\"10\"/>\n@@ -93,6 +93,7 @@\n     <Entitlement name=\"CONFIGURATION_READ\"/>\n     <Entitlement name=\"CONFIGURATION_UPDATE\"/>\n     <Entitlement name=\"CONFIGURATION_DELETE\"/>\n+    <Entitlement name=\"TASK_CREATE\"/>\n     <Entitlement name=\"TASK_LIST\"/>\n     <Entitlement name=\"TASK_EXECUTE\"/>\n     <Entitlement name=\"TASK_READ\"/>"},{"sha":"110a5410d244ff08a89caacfc897cd295b10d99b","filename":"core/src/main/resources/indexes.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -52,7 +52,7 @@\n     <entry key=\"SyncopeUser_TargetResource_targetResources_nameIndex\">CREATE INDEX SyncopeUser_TargetResour2Index ON SyncopeUser_TargetResource(targetResources_name)</entry>\n     <entry key=\"TargetResource_connector_idIndex\">CREATE INDEX TargetResource_connector_Index ON TargetResource(connector_id)</entry>\n     <entry key=\"Task_resource_nameIndex\">CREATE INDEX Task_resource_nameIndex ON Task(resource_name)</entry>\n-    <entry key=\"TaskExecution_task_idIndex\">CREATE INDEX TaskExecution_task_idIndeIndex ON TaskExecution(task_id)</entry>\n+    <entry key=\"TaskExec_task_idIndex\">CREATE INDEX TaskExec_task_idIndeIndex ON TaskExec(task_id)</entry>\n     <entry key=\"UAttr_schema_nameIndex\">CREATE INDEX UAttr_schema_nameIndex ON UAttr(schema_name)</entry>\n     <entry key=\"UAttr_owner_idIndex\">CREATE INDEX UAttr_owner_idIndex ON UAttr(owner_id)</entry>\n     <entry key=\"UAttrValue_attribute_idIndex\">CREATE INDEX UAttrValue_attribute_idIndex ON UAttrValue(attribute_id)</entry>"},{"sha":"fb52acc22f1ebdc7ecb6ab0fd4b8c5a7af8dfd4f","filename":"core/src/main/resources/taskExecutionWorkflow.xml","status":"removed","additions":0,"deletions":96,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db392b1948e465f53123fb23dda714190f853c14/core%2Fsrc%2Fmain%2Fresources%2FtaskExecutionWorkflow.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db392b1948e465f53123fb23dda714190f853c14/core%2Fsrc%2Fmain%2Fresources%2FtaskExecutionWorkflow.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FtaskExecutionWorkflow.xml?ref=db392b1948e465f53123fb23dda714190f853c14","patch":"@@ -1,96 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!DOCTYPE workflow PUBLIC \"-//OpenSymphony Group//DTD OSWorkflow 2.8//EN\" \"http://www.opensymphony.com/osworkflow/workflow_2_8.dtd\">\n-<!--\n-  Licensed under the Apache License, Version 2.0 (the \"License\");\n-  you may not use this file except in compliance with the License.\n-  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-  Unless required by applicable law or agreed to in writing, software\n-  distributed under the License is distributed on an \"AS IS\" BASIS,\n-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-  See the License for the specific language governing permissions and\n-  limitations under the License.\n--->\n-<workflow>\n-    <initial-actions>\n-        <action name=\"start\" id=\"0\">\n-            <results>\n-                <unconditional-result old-status=\"n/a\" status=\"CREATED\" step=\"1\"/>\n-            </results>\n-        </action>\n-    </initial-actions>\n-    <common-actions>\n-        <action name=\"useless\" id=\"100\">\n-            <results>\n-                <unconditional-result old-status=\"n/a\" status=\"CREATED\" step=\"1\"/>\n-            </results>\n-        </action>\n-    </common-actions>\n-    <steps>\n-        <step name=\"CREATED\" id=\"1\">\n-            <actions>\n-                <action name=\"ok\" id=\"1001\">\n-                    <results>\n-                        <result old-status=\"CREATED\" status=\"SUCCESS\" step=\"4\">\n-                            <conditions>\n-                                <condition type=\"beanshell\">\n-                                    <arg name=\"script\">transientVars.containsKey(\"SYNC\")</arg>\n-                                </condition>\n-                            </conditions>\n-                        </result>\n-                        <unconditional-result old-status=\"CREATED\" status=\"SUBMITTED\" step=\"2\"/>\n-                    </results>\n-                </action>\n-                <action name=\"ko\" id=\"1002\">\n-                    <results>\n-                        <result old-status=\"CREATED\" status=\"FAILURE\" step=\"5\">\n-                            <conditions>\n-                                <condition type=\"beanshell\">\n-                                    <arg name=\"script\">transientVars.containsKey(\"SYNC\")</arg>\n-                                </condition>\n-                            </conditions>\n-                        </result>\n-                        <unconditional-result old-status=\"CREATED\" status=\"UNSUBMITTED\" step=\"3\"/>\n-                    </results>\n-                </action>\n-            </actions>\n-        </step>\n-\n-        <step name=\"SUBMITTED\" id=\"2\">\n-            <actions>\n-                <action name=\"ok\" id=\"2001\">\n-                    <results>\n-                        <unconditional-result old-status=\"SUBMITTED\" status=\"SUCCESS\" step=\"4\"/>\n-                    </results>\n-                </action>\n-                <action name=\"ko\" id=\"2002\">\n-                    <results>\n-                        <unconditional-result old-status=\"SUBMITTED\" status=\"FAILURE\" step=\"5\"/>\n-                    </results>\n-                </action>\n-            </actions>\n-        </step>\n-\n-        <step name=\"UNSUBMITTED\" id=\"3\">\n-            <actions>\n-                <common-action id=\"100\"/>\n-            </actions>\n-        </step>\n-\n-        <step name=\"SUCCESS\" id=\"4\">\n-            <actions>\n-                <common-action id=\"100\"/>\n-            </actions>\n-        </step>\n-\n-        <step name=\"FAILURE\" id=\"5\">\n-            <actions>\n-                <common-action id=\"100\"/>\n-            </actions>\n-        </step>\n-\n-    </steps>\n-\n-</workflow>"},{"sha":"987d5d6ff4c7f9f5c9172ed22363d6fc428b3950","filename":"core/src/main/resources/workflowContext.xml","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -64,19 +64,6 @@\n         </property>\n     </bean>\n \n-    <bean id=\"taskExecutionWorkflow\"\n-          class=\"com.opensymphony.workflow.basic.BasicWorkflow\">\n-        <constructor-arg>\n-            <value>taskExecutionWorkflow</value>\n-        </constructor-arg>\n-        <property name=\"configuration\">\n-            <ref local=\"osworkflowConfiguration\"/>\n-        </property>\n-        <property name=\"resolver\">\n-            <ref local=\"workflowTypeResolver\"/>\n-        </property>\n-    </bean>\n-\n     <bean id=\"velocityEngine\" class=\"org.springframework.ui.velocity.VelocityEngineFactoryBean\">\n         <property name=\"velocityProperties\">\n             <value>"},{"sha":"5a9a65fecfa537d9c27ad4136d033439f9a9f68f","filename":"core/src/main/resources/workflows.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fresources%2Fworkflows.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Fmain%2Fresources%2Fworkflows.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fworkflows.xml?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -14,5 +14,4 @@\n -->\n <workflows>\n     <workflow name=\"userWorkflow\" type=\"resource\" location=\"userWorkflow.xml\"/>\n-    <workflow name=\"taskExecutionWorkflow\" type=\"resource\" location=\"taskExecutionWorkflow.xml\"/>\n </workflows>"},{"sha":"4ce791d59964597f1f7e34775ec42f73a57b56af","filename":"core/src/test/java/org/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -34,9 +34,9 @@ public class EntitlementTest extends AbstractTest {\n     @Test\n     public final void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n-        // 40 real entitlements + 8 role entitlements\n+        // 41 real entitlements + 8 role entitlements\n         assertEquals(\"did not get expected number of entitlements \",\n-                48, list.size());\n+                49, list.size());\n     }\n \n     @Test"},{"sha":"3193ce05ab69b85662789697a4f1e1a7525b7fb1","filename":"core/src/test/java/org/syncope/core/persistence/dao/TaskExecTest.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.TaskExec;\n+\n+@Transactional\n+public class TaskExecTest extends AbstractTest {\n+\n+    @Autowired\n+    private TaskExecDAO taskExecDAO;\n+\n+    @Test\n+    public final void findAll() {\n+        List<TaskExec> list = taskExecDAO.findAll(PropagationTask.class);\n+        assertEquals(1, list.size());\n+    }\n+}"},{"sha":"ea5e13bdb35807cd2fd96dd2bbdd83522755aeb6","filename":"core/src/test/java/org/syncope/core/persistence/dao/TaskTest.java","status":"modified","additions":35,"deletions":7,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -26,7 +26,9 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.beans.TargetResource;\n-import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.SyncTask;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.ResourceOperationType;\n \n@@ -41,16 +43,16 @@ public class TaskTest extends AbstractTest {\n \n     @Test\n     public final void findAll() {\n-        List<Task> list = taskDAO.findAll();\n+        List<PropagationTask> list = taskDAO.findAll(PropagationTask.class);\n         assertEquals(3, list.size());\n     }\n \n     @Test\n-    public final void save() {\n+    public final void savePropagationTask() {\n         TargetResource resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertNotNull(resource);\n \n-        Task task = new Task();\n+        PropagationTask task = new PropagationTask();\n         task.setResource(resource);\n         task.setPropagationMode(PropagationMode.ASYNC);\n         task.setResourceOperationType(ResourceOperationType.CREATE);\n@@ -66,13 +68,38 @@ public final void save() {\n         task = taskDAO.save(task);\n         assertNotNull(task);\n \n-        Task actual = taskDAO.find(task.getId());\n+        PropagationTask actual = taskDAO.find(task.getId());\n+        assertEquals(task, actual);\n+    }\n+\n+    @Test\n+    public final void saveSyncTask() {\n+        TargetResource resource = resourceDAO.find(\"ws-target-resource-1\");\n+        assertNotNull(resource);\n+\n+        SyncTask task = new SyncTask();\n+        task.addDefaultResource(resource);\n+        task.setCronExpression(\"BLA BLA\");\n+\n+        InvalidEntityException exception = null;\n+        try {\n+            taskDAO.save(task);\n+        } catch (InvalidEntityException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+\n+        task.setCronExpression(null);\n+        task = taskDAO.save(task);\n+        assertNotNull(task);\n+\n+        SyncTask actual = taskDAO.find(task.getId());\n         assertEquals(task, actual);\n     }\n \n     @Test\n     public final void delete() {\n-        Task task = taskDAO.find(1L);\n+        PropagationTask task = taskDAO.find(1L);\n         assertNotNull(task);\n \n         TargetResource resource = task.getResource();\n@@ -84,6 +111,7 @@ public final void delete() {\n \n         resource = resourceDAO.find(resource.getName());\n         assertNotNull(resource);\n-        assertFalse(resource.getTasks().contains(task));\n+        assertFalse(taskDAO.findAll(resource, PropagationTask.class).\n+                contains(task));\n     }\n }"},{"sha":"70e0c493c75758a115d80eebf094900b52ba6537","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -37,7 +37,8 @@\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.rest.data.ResourceDataBinder;\n import org.syncope.core.persistence.AbstractTest;\n-import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n@@ -254,7 +255,12 @@ public final void delete() {\n         // -------------------------------------\n \n         // Get tasks\n-        List<Task> tasks = resource.getTasks();\n+        List<PropagationTask> propagationTasks = taskDAO.findAll(resource,\n+                PropagationTask.class);\n+        assertFalse(propagationTasks.isEmpty());\n+        List<SyncTask> syncTasks = taskDAO.findAll(resource,\n+                SyncTask.class);\n+        assertFalse(syncTasks.isEmpty());\n \n         // delete resource\n         resourceDAO.delete(resource.getName());\n@@ -288,7 +294,10 @@ public final void delete() {\n         }\n \n         // there must be no tasks\n-        for (Task task : tasks) {\n+        for (PropagationTask task : propagationTasks) {\n+            assertNull(taskDAO.find(task.getId()));\n+        }\n+        for (SyncTask task : syncTasks) {\n             assertNull(taskDAO.find(task.getId()));\n         }\n     }"},{"sha":"3e7a92c036f36f47d1880f46d0a431bdcdc54476","filename":"core/src/test/java/org/syncope/core/persistence/relationships/TaskTest.java","status":"modified","additions":54,"deletions":29,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -14,24 +14,26 @@\n  */\n package org.syncope.core.persistence.relationships;\n \n+import static org.junit.Assert.*;\n+\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Set;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n-import static org.junit.Assert.*;\n import org.junit.Test;\n-\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.beans.TargetResource;\n-import org.syncope.core.persistence.beans.Task;\n-import org.syncope.core.persistence.beans.TaskExecution;\n+import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.TaskExec;\n+import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n-import org.syncope.core.persistence.dao.TaskExecutionDAO;\n+import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.types.PropagationMode;\n+import org.syncope.types.PropagationTaskExecStatus;\n import org.syncope.types.ResourceOperationType;\n \n @Transactional\n@@ -41,27 +43,27 @@ public class TaskTest extends AbstractTest {\n     private TaskDAO taskDAO;\n \n     @Autowired\n-    private TaskExecutionDAO taskExecutionDAO;\n+    private TaskExecDAO taskExecDAO;\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n \n     @Test\n     public final void read() {\n-        Task task = taskDAO.find(1L);\n+        PropagationTask task = taskDAO.find(1L);\n         assertNotNull(task);\n \n-        assertNotNull(task.getExecutions());\n-        assertFalse(task.getExecutions().isEmpty());\n-        assertEquals(1, task.getExecutions().size());\n+        assertNotNull(task.getExecs());\n+        assertFalse(task.getExecs().isEmpty());\n+        assertEquals(1, task.getExecs().size());\n     }\n \n     @Test\n     public final void save() {\n         TargetResource resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertNotNull(resource);\n \n-        Task task = new Task();\n+        PropagationTask task = new PropagationTask();\n         task.setResource(resource);\n         task.setPropagationMode(PropagationMode.ASYNC);\n         task.setResourceOperationType(ResourceOperationType.CREATE);\n@@ -77,25 +79,27 @@ public final void save() {\n         task = taskDAO.save(task);\n         assertNotNull(task);\n \n-        Task actual = taskDAO.find(task.getId());\n+        PropagationTask actual = taskDAO.find(task.getId());\n         assertEquals(task, actual);\n \n         taskDAO.flush();\n \n         resource = resourceDAO.find(\"ws-target-resource-1\");\n-        assertTrue(resource.getTasks().contains(task));\n+        assertTrue(taskDAO.findAll(resource, PropagationTask.class).\n+                contains(task));\n     }\n \n     @Test\n-    public final void addTaskExecution() {\n-        Task task = taskDAO.find(1L);\n+    public final void addPropagationTaskExecution() {\n+        PropagationTask task = taskDAO.find(1L);\n         assertNotNull(task);\n \n-        int executionNumber = task.getExecutions().size();\n+        int executionNumber = task.getExecs().size();\n \n-        TaskExecution execution = new TaskExecution();\n+        TaskExec execution = new TaskExec();\n         execution.setTask(task);\n-        task.addExecution(execution);\n+        execution.setStatus(PropagationTaskExecStatus.CREATED.toString());\n+        task.addExec(execution);\n         execution.setStartDate(new Date());\n \n         task = taskDAO.save(task);\n@@ -105,7 +109,30 @@ public final void addTaskExecution() {\n         task = taskDAO.find(1L);\n         assertNotNull(task);\n \n-        assertEquals(executionNumber + 1, task.getExecutions().size());\n+        assertEquals(executionNumber + 1, task.getExecs().size());\n+    }\n+\n+    @Test\n+    public final void addSyncTaskExecution() {\n+        SyncTask task = taskDAO.find(4L);\n+        assertNotNull(task);\n+\n+        int executionNumber = task.getExecs().size();\n+\n+        TaskExec execution = new TaskExec();\n+        execution.setStatus(\"Text-free status\");\n+        execution.setTask(task);\n+        task.addExec(execution);\n+        execution.setMessage(\"A message\");\n+\n+        task = taskDAO.save(task);\n+\n+        taskDAO.flush();\n+\n+        task = taskDAO.find(4L);\n+        assertNotNull(task);\n+\n+        assertEquals(executionNumber + 1, task.getExecs().size());\n     }\n \n     @Test\n@@ -115,24 +142,22 @@ public final void deleteTask() {\n         taskDAO.flush();\n \n         assertNull(taskDAO.find(1L));\n-        assertNull(taskExecutionDAO.find(1L));\n+        assertNull(taskExecDAO.find(1L));\n     }\n \n     @Test\n     public final void deleteTaskExecution() {\n-        TaskExecution execution =\n-                taskExecutionDAO.find(1L);\n-        int executionNumber =\n-                execution.getTask().getExecutions().size();\n+        TaskExec execution = taskExecDAO.find(1L);\n+        int executionNumber = execution.getTask().getExecs().size();\n \n-        taskExecutionDAO.delete(1L);\n+        taskExecDAO.delete(1L);\n \n-        taskExecutionDAO.flush();\n+        taskExecDAO.flush();\n \n-        assertNull(taskExecutionDAO.find(1L));\n+        assertNull(taskExecDAO.find(1L));\n \n-        Task task = taskDAO.find(1L);\n-        assertEquals(task.getExecutions().size(),\n+        PropagationTask task = taskDAO.find(1L);\n+        assertEquals(task.getExecs().size(),\n                 executionNumber - 1);\n     }\n }"},{"sha":"2163c2d192bac4c4e6b0656ff758a39f64572fb0","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":30,"deletions":26,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -21,27 +21,28 @@\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.client.HttpStatusCodeException;\n-import org.syncope.client.to.TaskExecutionTO;\n+import org.syncope.client.to.TaskExecTO;\n+import org.syncope.client.to.PropagationTaskTO;\n import org.syncope.client.to.TaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.types.PropagationTaskExecStatus;\n import org.syncope.types.SyncopeClientExceptionType;\n-import org.syncope.types.TaskExecutionStatus;\n \n public class TaskTestITCase extends AbstractTest {\n \n     @Test\n     public final void count() {\n         Integer count = restTemplate.getForObject(\n-                BASE_URL + \"task/count.json\", Integer.class);\n+                BASE_URL + \"task/propagation/count.json\", Integer.class);\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }\n \n     @Test\n     public final void list() {\n-        List<TaskTO> tasks = Arrays.asList(\n+        List<PropagationTaskTO> tasks = Arrays.asList(\n                 restTemplate.getForObject(\n-                BASE_URL + \"task/list\", TaskTO[].class));\n+                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n         for (TaskTO task : tasks) {\n@@ -51,9 +52,9 @@ public final void list() {\n \n     @Test\n     public final void paginatedList() {\n-        List<TaskTO> tasks = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"task/list/{page}/{size}.json\",\n-                TaskTO[].class, 1, 2));\n+        List<PropagationTaskTO> tasks = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"task/propagation/list/{page}/{size}.json\",\n+                PropagationTaskTO[].class, 1, 2));\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -64,8 +65,8 @@ public final void paginatedList() {\n         }\n \n         tasks = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"task/list/{page}/{size}.json\",\n-                TaskTO[].class, 2, 2));\n+                BASE_URL + \"task/propagation/list/{page}/{size}.json\",\n+                PropagationTaskTO[].class, 2, 2));\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -76,29 +77,30 @@ public final void paginatedList() {\n         }\n \n         tasks = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"task/list/{page}/{size}.json\",\n-                TaskTO[].class, 100, 2));\n+                BASE_URL + \"task/propagation/list/{page}/{size}.json\",\n+                PropagationTaskTO[].class, 100, 2));\n \n         assertNotNull(tasks);\n         assertTrue(tasks.isEmpty());\n     }\n \n     @Test\n     public final void listExecutions() {\n-        List<TaskExecutionTO> executions = Arrays.asList(\n+        List<TaskExecTO> executions = Arrays.asList(\n                 restTemplate.getForObject(\n-                BASE_URL + \"task/execution/list\", TaskExecutionTO[].class));\n+                BASE_URL + \"task/propagation/execution/list\",\n+                TaskExecTO[].class));\n         assertNotNull(executions);\n         assertFalse(executions.isEmpty());\n-        for (TaskExecutionTO execution : executions) {\n+        for (TaskExecTO execution : executions) {\n             assertNotNull(execution);\n         }\n     }\n \n     @Test\n     public final void read() {\n-        TaskTO taskTO = restTemplate.getForObject(\n-                BASE_URL + \"task/read/{taskId}\", TaskTO.class, 1);\n+        PropagationTaskTO taskTO = restTemplate.getForObject(\n+                BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class, 1);\n \n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n@@ -107,9 +109,9 @@ public final void read() {\n \n     @Test\n     public final void readExecution() {\n-        TaskExecutionTO taskTO = restTemplate.getForObject(\n+        TaskExecTO taskTO = restTemplate.getForObject(\n                 BASE_URL + \"task/execution/read/{taskId}\",\n-                TaskExecutionTO.class, 1);\n+                TaskExecTO.class, 1);\n         assertNotNull(taskTO);\n     }\n \n@@ -121,33 +123,35 @@ public final void deal() {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n \n-        TaskExecutionTO execution = restTemplate.getForObject(\n+        TaskExecTO execution = restTemplate.getForObject(\n                 BASE_URL + \"task/execute/{taskId}\",\n-                TaskExecutionTO.class, 1);\n-        assertEquals(TaskExecutionStatus.SUBMITTED, execution.getStatus());\n+                TaskExecTO.class, 1);\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED.toString(),\n+                execution.getStatus());\n \n         Exception exception = null;\n         try {\n             restTemplate.delete(BASE_URL + \"task/delete/{taskId}\", 1);\n         } catch (SyncopeClientCompositeErrorException scce) {\n             assertTrue(scce.hasException(\n-                    SyncopeClientExceptionType.IncompleteTaskExecution));\n+                    SyncopeClientExceptionType.IncompletePropagationTaskExec));\n             exception = scce;\n         }\n         assertNotNull(exception);\n \n         execution = restTemplate.getForObject(\n                 BASE_URL + \"task/execution/report/{executionId}\"\n                 + \"?executionStatus=SUCCESS&message=OK\",\n-                TaskExecutionTO.class, execution.getId());\n-        assertEquals(TaskExecutionStatus.SUCCESS, execution.getStatus());\n+                TaskExecTO.class, execution.getId());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS.toString(),\n+                execution.getStatus());\n         assertEquals(\"OK\", execution.getMessage());\n \n         restTemplate.delete(BASE_URL + \"task/delete/{taskId}\", 1);\n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"task/execution/read/{executionId}\",\n-                    TaskExecutionTO.class, execution.getId());\n+                    TaskExecTO.class, execution.getId());\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }"},{"sha":"ac5bedd7a1dcac922542c3238d3eed5595c5f412","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -37,7 +37,7 @@\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.search.ResourceCond;\n-import org.syncope.client.to.TaskTO;\n+import org.syncope.client.to.PropagationTaskTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -106,16 +106,16 @@ public static UserTO getSampleTO(final String email) {\n     @Test\n     public final void createUserWithNoPropagation() {\n         // get task list\n-        List<TaskTO> tasks = Arrays.asList(\n+        List<PropagationTaskTO> tasks = Arrays.asList(\n                 restTemplate.getForObject(\n-                BASE_URL + \"task/list\", TaskTO[].class));\n+                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n         // get max task id\n         long maxId = Long.MIN_VALUE;\n-        for (TaskTO task : tasks) {\n+        for (PropagationTaskTO task : tasks) {\n             if (task.getId() > maxId) {\n                 maxId = task.getId();\n             }\n@@ -154,14 +154,14 @@ public final void createUserWithNoPropagation() {\n         // get the new task list\n         tasks = Arrays.asList(\n                 restTemplate.getForObject(\n-                BASE_URL + \"task/list\", TaskTO[].class));\n+                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n         // get max task id\n         long newMaxId = Long.MIN_VALUE;\n-        for (TaskTO task : tasks) {\n+        for (PropagationTaskTO task : tasks) {\n             if (task.getId() > newMaxId) {\n                 newMaxId = task.getId();\n             }\n@@ -170,8 +170,8 @@ public final void createUserWithNoPropagation() {\n         assertTrue(newMaxId > maxId);\n \n         // get last task\n-        TaskTO taskTO = restTemplate.getForObject(\n-                BASE_URL + \"task/read/{taskId}\", TaskTO.class, newMaxId);\n+        PropagationTaskTO taskTO = restTemplate.getForObject(\n+                BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class, newMaxId);\n \n         assertNotNull(taskTO);\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -226,16 +226,16 @@ public final void createWithException() {\n     @Test\n     public final void create() {\n         // get task list\n-        List<TaskTO> tasks = Arrays.asList(\n+        List<PropagationTaskTO> tasks = Arrays.asList(\n                 restTemplate.getForObject(\n-                BASE_URL + \"task/list\", TaskTO[].class));\n+                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n         // get max task id\n         long maxId = Long.MIN_VALUE;\n-        for (TaskTO task : tasks) {\n+        for (PropagationTaskTO task : tasks) {\n             if (task.getId() > maxId) {\n                 maxId = task.getId();\n             }\n@@ -306,14 +306,14 @@ public final void create() {\n         // get the new task list\n         tasks = Arrays.asList(\n                 restTemplate.getForObject(\n-                BASE_URL + \"task/list\", TaskTO[].class));\n+                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n         // get max task id\n         long newMaxId = Long.MIN_VALUE;\n-        for (TaskTO task : tasks) {\n+        for (PropagationTaskTO task : tasks) {\n             if (task.getId() > newMaxId) {\n                 newMaxId = task.getId();\n             }\n@@ -322,8 +322,8 @@ public final void create() {\n         assertTrue(newMaxId > maxId);\n \n         // get last task\n-        TaskTO taskTO = restTemplate.getForObject(\n-                BASE_URL + \"task/read/{taskId}\", TaskTO.class, newMaxId);\n+        PropagationTaskTO taskTO = restTemplate.getForObject(\n+                BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class, newMaxId);\n \n         assertNotNull(taskTO);\n         assertFalse(taskTO.getExecutions().isEmpty());"},{"sha":"faaf95e5dc44f0d041b7820bb0b276f61f50fa7d","filename":"core/src/test/resources/content.xml","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -29,7 +29,7 @@\n     <hibernate_sequences sequence_name=\"SEQ_RAttrValue\" sequence_next_hi_value=\"1000\"/>\n     <hibernate_sequences sequence_name=\"SEQ_MAttrValue\" sequence_next_hi_value=\"1000\"/>\n     <hibernate_sequences sequence_name=\"SEQ_Task\" sequence_next_hi_value=\"10\"/>\n-    <hibernate_sequences sequence_name=\"SEQ_TaskExecution\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_TaskExec\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_JPACurrentStep\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_JPAHistoryStep\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_JPAPropertySetItem\" sequence_next_hi_value=\"10\"/>\n@@ -340,16 +340,17 @@\n                    sourceAttrName=\"Password\" sourceMappingType=\"Password\" mandatoryCondition=\"true\"\n                    accountid=\"0\" password=\"1\"/>\n \n-    <Task id=\"1\" propagationMode=\"ASYNC\" resourceOperationType=\"UPDATE\"\n+    <Task DTYPE=\"PropagationTask\" id=\"1\" propagationMode=\"ASYNC\" resourceOperationType=\"UPDATE\"\n                  resource_name=\"ws-target-resource-2\"\n                  xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Efullname%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E%0A\"/>\n-    <TaskExecution id=\"1\" task_id=\"1\" workflowId=\"0\"/>\n-    <Task id=\"2\" propagationMode=\"SYNC\" resourceOperationType=\"CREATE\"\n+    <TaskExec id=\"1\" task_id=\"1\" status=\"SUCCESS\"/>\n+    <Task DTYPE=\"PropagationTask\" id=\"2\" propagationMode=\"SYNC\" resourceOperationType=\"CREATE\"\n                  resource_name=\"ws-target-resource-2\"\n                  xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Efullname%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E%0A\"/>\n-    <Task id=\"3\" propagationMode=\"ASYNC\" resourceOperationType=\"DELETE\"\n+    <Task DTYPE=\"PropagationTask\" id=\"3\" propagationMode=\"ASYNC\" resourceOperationType=\"DELETE\"\n                  resource_name=\"ws-target-resource-2\"\n                  xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>\n+    <Task DTYPE=\"SyncTask\" id=\"4\" resource_name=\"ws-target-resource-2\" updateIdentities=\"0\" jobClassName=\"java.lang.String\"/>\n \n     <RDerSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"/>\n \n@@ -391,6 +392,7 @@\n     <Entitlement name=\"CONFIGURATION_READ\"/>\n     <Entitlement name=\"CONFIGURATION_UPDATE\"/>\n     <Entitlement name=\"CONFIGURATION_DELETE\"/>\n+    <Entitlement name=\"TASK_CREATE\"/>\n     <Entitlement name=\"TASK_LIST\"/>\n     <Entitlement name=\"TASK_EXECUTE\"/>\n     <Entitlement name=\"TASK_READ\"/>"},{"sha":"b0c59d370e2a145dbe7705c67698ede28963ba9b","filename":"pom.xml","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/339c739744c7c0db63639b5cda9f56c0bc6b6b7f/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=339c739744c7c0db63639b5cda9f56c0bc6b6b7f","patch":"@@ -94,6 +94,7 @@\n         <xstream.version>1.3.1</xstream.version>\n         <aspectj.version>1.6.9</aspectj.version>\n         <velocity.version>1.7</velocity.version>\n+        <quartz.version>1.8.5</quartz.version>\n \n         <hibernate.version>3.6.5.Final</hibernate.version>\n         <hibernate-validator.version>4.2.0.Final</hibernate-validator.version>\n@@ -328,36 +329,45 @@\n                 <artifactId>aspectjrt</artifactId>\n                 <version>${aspectj.version}</version>\n             </dependency>\n+            \n+            <dependency>\n+                <groupId>org.quartz-scheduler</groupId>\n+                <artifactId>quartz</artifactId>\n+                <version>${quartz.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.quartz-scheduler</groupId>\n+                <artifactId>quartz-oracle</artifactId>\n+                <version>${quartz.version}</version>\n+            </dependency>\n \n+            <!-- Wicket -->\n             <dependency>\n                 <groupId>org.apache.wicket</groupId>\n                 <artifactId>wicket</artifactId>\n                 <version>${wicket.version}</version>\n             </dependency>\n-\n             <dependency>\n                 <groupId>org.apache.wicket</groupId>\n                 <artifactId>wicket-extensions</artifactId>\n                 <version>${wicket.version}</version>\n             </dependency>\n-\n             <dependency>\n                 <groupId>org.apache.wicket</groupId>\n                 <artifactId>wicket-datetime</artifactId>\n                 <version>${wicket.version}</version>\n             </dependency>\n-\n             <dependency>\n                 <groupId>org.apache.wicket</groupId>\n                 <artifactId>wicket-spring</artifactId>\n                 <version>${wicket.version}</version>\n             </dependency>\n-\n             <dependency>\n                 <groupId>org.apache.wicket</groupId>\n                 <artifactId>wicket-auth-roles</artifactId>\n                 <version>${wicket.version}</version>\n             </dependency>\n+            <!-- /Wicket -->\n \n             <dependency>\n                 <groupId>org.hsqldb</groupId>"}]}