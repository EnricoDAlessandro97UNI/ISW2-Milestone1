{"sha":"fa3b769df86cb43e5e08eb1b26cab617cd723267","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZhM2I3NjlkZjg2Y2I0M2U1ZTA4ZWIxYjI2Y2FiNjE3Y2Q3MjMyNjc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-07-12T12:05:23Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-07-12T12:05:32Z"},"message":"[SYNCOPE-1287] Pagination for Remediations too","tree":{"sha":"b8aa20f75a783d787d27adf2d91821709a6c8923","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b8aa20f75a783d787d27adf2d91821709a6c8923"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fa3b769df86cb43e5e08eb1b26cab617cd723267","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fa3b769df86cb43e5e08eb1b26cab617cd723267","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fa3b769df86cb43e5e08eb1b26cab617cd723267","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fa3b769df86cb43e5e08eb1b26cab617cd723267/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c3ce309a141379f54243f41a09a63d8ed320747a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c3ce309a141379f54243f41a09a63d8ed320747a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c3ce309a141379f54243f41a09a63d8ed320747a"}],"stats":{"total":211,"additions":151,"deletions":60},"files":[{"sha":"252ccf6d6cb6eb2138ac3f58f508a90e1c8d98c5","filename":"client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.rest.UserWorkflowRestClient;\n import org.apache.syncope.client.console.approvals.ApprovalDirectoryPanel.ApprovalProvider;\n-import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.layout.FormLayoutInfoUtils;\n import org.apache.syncope.client.console.layout.UserFormLayoutInfo;\n import org.apache.syncope.client.console.pages.BasePage;\n@@ -253,15 +252,12 @@ public static class ApprovalProvider extends DirectoryDataProvider<WorkflowFormT\n \n         private static final long serialVersionUID = -2311716167583335852L;\n \n-        private final SortableDataProviderComparator<WorkflowFormTO> comparator;\n-\n         private final UserWorkflowRestClient restClient = new UserWorkflowRestClient();\n \n         public ApprovalProvider(final int paginatorRows) {\n             super(paginatorRows);\n \n             setSort(\"createTime\", SortOrder.ASCENDING);\n-            comparator = new SortableDataProviderComparator<>(this);\n         }\n \n         @Override"},{"sha":"ab053bf8f2b2cffb9bf511aebc519320601ccd63","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnInstanceHistoryConfDirectoryPanel.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -213,14 +213,10 @@ public CHConfProvider(final int paginatorRows) {\n         public Iterator<ConnInstanceHistoryConfTO> iterator(final long first, final long count) {\n             final List<ConnInstanceHistoryConfTO> configurations = restClient.list(entityKey);\n \n-            Collections.sort(configurations, getComparator());\n+            Collections.sort(configurations, comparator);\n             return configurations.iterator();\n         }\n \n-        public SortableDataProviderComparator<ConnInstanceHistoryConfTO> getComparator() {\n-            return comparator;\n-        }\n-\n         @Override\n         public long size() {\n             return restClient.list(entityKey).size();\n@@ -230,6 +226,5 @@ public long size() {\n         public IModel<ConnInstanceHistoryConfTO> model(final ConnInstanceHistoryConfTO object) {\n             return new CompoundPropertyModel<>(object);\n         }\n-\n     }\n }"},{"sha":"1e3445427f1064d54aa2ee2842609054f0a5fda1","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RemediationDirectoryPanel.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n-import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.layout.AnyObjectFormLayoutInfo;\n import org.apache.syncope.client.console.layout.FormLayoutInfoUtils;\n import org.apache.syncope.client.console.layout.GroupFormLayoutInfo;\n@@ -311,26 +310,23 @@ public static class RemediationProvider extends DirectoryDataProvider<Remediatio\n \n         private static final long serialVersionUID = -2311716167583335852L;\n \n-        private final SortableDataProviderComparator<RemediationTO> comparator;\n-\n         private final RemediationRestClient restClient = new RemediationRestClient();\n \n         public RemediationProvider(final int paginatorRows) {\n             super(paginatorRows);\n+\n             setSort(\"instant\", SortOrder.ASCENDING);\n-            this.comparator = new SortableDataProviderComparator<>(this);\n         }\n \n         @Override\n         public Iterator<RemediationTO> iterator(final long first, final long count) {\n-            final List<RemediationTO> list = restClient.getRemediations();\n-            Collections.sort(list, comparator);\n-            return list.subList((int) first, (int) first + (int) count).iterator();\n+            int page = ((int) first / paginatorRows);\n+            return restClient.getRemediations((page < 0 ? 0 : page) + 1, paginatorRows, getSort()).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.getRemediations().size();\n+            return restClient.countRemediations();\n         }\n \n         @Override"},{"sha":"09a1cf9a981cd89ef8ad7a24d5b561b2e85a085b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -206,22 +206,18 @@ protected class RHConfProvider extends DirectoryDataProvider<ResourceHistoryConf\n         public RHConfProvider(final int paginatorRows) {\n             super(paginatorRows);\n \n-            setSort(\"creation\", SortOrder.ASCENDING); // sort by 'creation' property\n+            setSort(\"creation\", SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n \n         @Override\n         public Iterator<ResourceHistoryConfTO> iterator(final long first, final long count) {\n             final List<ResourceHistoryConfTO> configurations = restClient.list(entityKey);\n \n-            Collections.sort(configurations, getComparator());\n+            Collections.sort(configurations, comparator);\n             return configurations.iterator();\n         }\n \n-        public SortableDataProviderComparator<ResourceHistoryConfTO> getComparator() {\n-            return comparator;\n-        }\n-\n         @Override\n         public long size() {\n             return restClient.list(entityKey).size();\n@@ -231,6 +227,5 @@ public long size() {\n         public IModel<ResourceHistoryConfTO> model(final ResourceHistoryConfTO object) {\n             return new CompoundPropertyModel<>(object);\n         }\n-\n     }\n }"},{"sha":"381ee030497cdf3e9dcf7c806ea3d65460cde6c0","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/RemediationRestClient.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -25,14 +25,24 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RemediationTO;\n+import org.apache.syncope.common.rest.api.beans.RemediationQuery;\n import org.apache.syncope.common.rest.api.service.RemediationService;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n \n public class RemediationRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -7033745375669316378L;\n \n-    public List<RemediationTO> getRemediations() {\n-        return getService(RemediationService.class).list();\n+    public int countRemediations() {\n+        return getService(RemediationService.class).\n+                list(new RemediationQuery.Builder().page(1).size(1).build()).\n+                getTotalCount();\n+    }\n+\n+    public List<RemediationTO> getRemediations(final int page, final int size, final SortParam<String> sort) {\n+        return getService(RemediationService.class).\n+                list(new RemediationQuery.Builder().page(page).size(size).orderBy(toOrderBy(sort)).build()).\n+                getResult();\n     }\n \n     public RemediationTO getRemediation(final String key) {"},{"sha":"1494e3499b19700cb8d64fd4a5e670b7ac7f1cb0","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n-import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.panels.AjaxDataTablePanel;\n@@ -168,21 +167,15 @@ protected class ExecProvider extends DirectoryDataProvider<ExecTO> {\n \n         private static final long serialVersionUID = 8943636537120648961L;\n \n-        private final SortableDataProviderComparator<ExecTO> comparator;\n-\n         private final String taskKey;\n \n         public ExecProvider(final String taskKey, final int paginatorRows) {\n             super(paginatorRows);\n+\n             this.taskKey = taskKey;\n-            comparator = new SortableDataProviderComparator<>(this);\n             setSort(\"end\", SortOrder.DESCENDING);\n         }\n \n-        public SortableDataProviderComparator<ExecTO> getComparator() {\n-            return comparator;\n-        }\n-\n         @Override\n         public Iterator<ExecTO> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);"},{"sha":"35aabff42888fe3bdb85ed9091fac2ea078ba24f","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/TaskDirectoryPanel.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.tasks;\n \n import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n-import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.commons.TaskDataProvider;\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.panels.AjaxDataTablePanel;\n@@ -70,22 +69,15 @@ protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<T, Stri\n \n         private static final long serialVersionUID = -20112718133295756L;\n \n-        private final SortableDataProviderComparator<T> comparator;\n-\n         private final TaskType id;\n \n         public TasksProvider(final int paginatorRows, final TaskType id) {\n             super(paginatorRows);\n \n             setSort(\"key\", SortOrder.ASCENDING);\n-            this.comparator = new SortableDataProviderComparator<>(this);\n             this.id = id;\n         }\n \n-        public SortableDataProviderComparator<T> getComparator() {\n-            return comparator;\n-        }\n-\n         @Override\n         public long size() {\n             return restClient.count(id);"},{"sha":"9e888dba76ff2cb2c514d1ebf7a95835fdce9a0f","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/RemediationsWidget.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -22,9 +22,7 @@\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.icon.FontAwesomeIconTypeBuilder;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.List;\n-import java.util.stream.Collectors;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.pages.Remediations;\n@@ -35,6 +33,7 @@\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.markup.html.link.AbstractLink;\n import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n@@ -84,6 +83,14 @@ public final void refreshLatestAlerts(final AjaxRequestTarget target) {\n         lastRemediations.addAll(latestAlerts.getObject());\n     }\n \n+    @Override\n+    protected int getLatestAlertsSize() {\n+        return SyncopeConsoleSession.get().owns(StandardEntitlement.REMEDIATION_LIST)\n+                && SyncopeConsoleSession.get().owns(StandardEntitlement.REMEDIATION_READ)\n+                ? restClient.countRemediations()\n+                : 0;\n+    }\n+\n     @Override\n     protected IModel<List<RemediationTO>> getLatestAlerts() {\n         return new ListModel<RemediationTO>() {\n@@ -96,9 +103,7 @@ public List<RemediationTO> getObject() {\n                 if (SyncopeConsoleSession.get().owns(StandardEntitlement.REMEDIATION_LIST)\n                         && SyncopeConsoleSession.get().owns(StandardEntitlement.REMEDIATION_READ)) {\n \n-                    updatedRemediations = restClient.getRemediations().stream().\n-                            sorted(Comparator.comparing(RemediationTO::getInstant)).\n-                            collect(Collectors.toList());\n+                    updatedRemediations = restClient.getRemediations(1, MAX_SIZE, new SortParam<>(\"instant\", true));\n                 } else {\n                     updatedRemediations = Collections.<RemediationTO>emptyList();\n                 }"},{"sha":"f70858c3ebaa157949a3298be9b2bca41d4c2b77","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/RemediationQuery.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FRemediationQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FRemediationQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FRemediationQuery.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+public class RemediationQuery extends AbstractQuery {\n+\n+    private static final long serialVersionUID = 4000880445378096031L;\n+\n+    public static class Builder extends AbstractQuery.Builder<RemediationQuery, Builder> {\n+\n+        @Override\n+        protected RemediationQuery newInstance() {\n+            return new RemediationQuery();\n+        }\n+    }\n+}"},{"sha":"09d2b228e1b831f1d8af1730d5110cc5e97e2160","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RemediationService.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -28,8 +28,8 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import java.util.List;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n@@ -44,9 +44,11 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RemediationTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.RemediationQuery;\n \n /**\n  * REST operations for remediations.\n@@ -61,11 +63,12 @@ public interface RemediationService extends JAXRSService {\n     /**\n      * Returns a list of all remediations.\n      *\n+     * @param query query conditions\n      * @return list of all remediations.\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<RemediationTO> list();\n+    PagedResult<RemediationTO> list(@BeanParam RemediationQuery query);\n \n     /**\n      * Returns remediation with matching key."},{"sha":"19f6c8f0bddb56d060b385b4eaf9c579621ab165","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RemediationLogic.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -23,6 +23,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n@@ -36,6 +37,7 @@\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Remediation;\n import org.apache.syncope.core.provisioning.api.data.RemediationDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -63,8 +65,17 @@ public class RemediationLogic extends AbstractTransactionalLogic<RemediationTO>\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_LIST + \"')\")\n     @Transactional(readOnly = true)\n-    public List<RemediationTO> list() {\n-        return remediationDAO.findAll().stream().map(binder::getRemediationTO).collect(Collectors.toList());\n+    public Pair<Integer, List<RemediationTO>> list(\n+            final int page,\n+            final int size,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        int count = remediationDAO.count();\n+\n+        List<RemediationTO> result = remediationDAO.findAll(page, size, orderByClauses).stream().\n+                map(binder::getRemediationTO).collect(Collectors.toList());\n+\n+        return Pair.of(count, result);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_READ + \"')\")"},{"sha":"73216b30cff2c6bc4ecca6875145734edd7736ba","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RemediationDAO.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRemediationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRemediationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRemediationDAO.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Remediation;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n@@ -31,7 +32,9 @@ public interface RemediationDAO extends DAO<Remediation> {\n \n     List<Remediation> findByPullTask(PullTask pullTask);\n \n-    List<Remediation> findAll();\n+    int count();\n+\n+    List<Remediation> findAll(int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n \n     Remediation save(Remediation remediation);\n "},{"sha":"c0309b33313cc553c2be2e6226690d330f21ac89","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARemediationDAO.java","status":"modified","additions":55,"deletions":3,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -18,14 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.lang.reflect.Field;\n import java.util.List;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Remediation;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.jpa.entity.JPARemediation;\n import org.springframework.stereotype.Repository;\n+import org.springframework.util.ReflectionUtils;\n \n @Repository\n public class JPARemediationDAO extends AbstractDAO<Remediation> implements RemediationDAO {\n@@ -54,9 +58,57 @@ public List<Remediation> findByPullTask(final PullTask pullTask) {\n     }\n \n     @Override\n-    public List<Remediation> findAll() {\n-        TypedQuery<Remediation> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPARemediation.class.getSimpleName() + \" e \", Remediation.class);\n+    public int count() {\n+        Query query = entityManager().createNativeQuery(\"SELECT COUNT(id) FROM \" + JPARemediation.TABLE);\n+        return ((Number) query.getSingleResult()).intValue();\n+    }\n+\n+    @Override\n+    public List<Remediation> findAll(\n+            final int page,\n+            final int itemsPerPage,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        StringBuilder queryString = new StringBuilder(\n+                \"SELECT e FROM \" + JPARemediation.class.getSimpleName() + \" e\");\n+\n+        if (!orderByClauses.isEmpty()) {\n+            queryString.append(\" ORDER BY \");\n+            orderByClauses.forEach(clause -> {\n+                String field = clause.getField().trim();\n+                boolean ack = true;\n+                if (\"resource\".equals(field)) {\n+                    queryString.append(\"e.pullTask.resource.id\");\n+                } else {\n+                    Field beanField = ReflectionUtils.findField(JPARemediation.class, field);\n+                    if (beanField == null) {\n+                        ack = false;\n+                        LOG.warn(\"Remediation sort request by {}: unsupported, ignoring\", field);\n+                    } else {\n+                        queryString.append(\"e.\").append(field);\n+                    }\n+                }\n+                if (ack) {\n+                    if (clause.getDirection() == OrderByClause.Direction.ASC) {\n+                        queryString.append(\" ASC\");\n+                    } else {\n+                        queryString.append(\" DESC\");\n+                    }\n+                    queryString.append(',');\n+                }\n+            });\n+\n+            queryString.deleteCharAt(queryString.length() - 1);\n+        }\n+\n+        TypedQuery<Remediation> query = entityManager().createQuery(queryString.toString(), Remediation.class);\n+\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+\n+        if (itemsPerPage > 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n         return query.getResultList();\n     }\n "},{"sha":"fe4e571e0bbcf47335ee6c905f093ade47bcb314","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RemediationTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -24,6 +24,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n@@ -54,7 +55,7 @@ public class RemediationTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<Remediation> remediations = remediationDAO.findAll();\n+        List<Remediation> remediations = remediationDAO.findAll(1, 1, Collections.emptyList());\n         assertTrue(remediations.isEmpty());\n     }\n "},{"sha":"d4a402d0730da981226b758d13c7e9f81782129f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RemediationServiceImpl.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -21,10 +21,13 @@\n import java.util.Date;\n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RemediationTO;\n+import org.apache.syncope.common.rest.api.beans.RemediationQuery;\n import org.apache.syncope.common.rest.api.service.RemediationService;\n import org.apache.syncope.core.logic.RemediationLogic;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n@@ -51,8 +54,10 @@ public class RemediationServiceImpl extends AbstractServiceImpl implements Remed\n     private AnyObjectDAO anyObjectDAO;\n \n     @Override\n-    public List<RemediationTO> list() {\n-        return logic.list();\n+    public PagedResult<RemediationTO> list(final RemediationQuery query) {\n+        Pair<Integer, List<RemediationTO>> result = logic.list(\n+                query.getPage(), query.getSize(), getOrderByClauses(query.getOrderBy()));\n+        return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());\n     }\n \n     @Override"},{"sha":"7354a1c39e1ce86b0febd707a0d883ba4b86f07e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa3b769df86cb43e5e08eb1b26cab617cd723267/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa3b769df86cb43e5e08eb1b26cab617cd723267/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=fa3b769df86cb43e5e08eb1b26cab617cd723267","patch":"@@ -84,6 +84,7 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n+import org.apache.syncope.common.rest.api.beans.RemediationQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n@@ -710,7 +711,8 @@ public void remediation() {\n             }\n \n             // 3b. remediation was created\n-            Optional<RemediationTO> remediation = remediationService.list().stream().\n+            Optional<RemediationTO> remediation = remediationService.list(\n+                    new RemediationQuery.Builder().page(1).size(1000).build()).getResult().stream().\n                     filter(r -> \"uid=pullFromLDAP,ou=People,o=isp\".equalsIgnoreCase(r.getRemoteName())).\n                     findFirst();\n             assertTrue(remediation.isPresent());"}]}