{"sha":"9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlhMWJhNmRjYzQ3YWE2NWRkYWNiOTkwYmQ3NWQxYmI2OGFjZTA3YWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-03T12:18:36Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-04-15T14:37:30Z"},"message":"[SYNCOPE-1400] Adding support for MySQL 8 via OpenJPA 3.0.1 + [SYNCOPE-1401] Adding support for MySQL with JSON type","tree":{"sha":"a8216431d4f71e49f3faf9740aed0f9adbda0bdf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a8216431d4f71e49f3faf9740aed0f9adbda0bdf"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b2e67ab00c20ce71229382cdadc0520a5a9b91c6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b2e67ab00c20ce71229382cdadc0520a5a9b91c6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b2e67ab00c20ce71229382cdadc0520a5a9b91c6"}],"stats":{"total":2173,"additions":1708,"deletions":465},"files":[{"sha":"d210e29af8653bd40cba1090758bfd08528d87e8","filename":"core/persistence-jpa-json/pom.xml","status":"modified","additions":97,"deletions":41,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fpom.xml?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -230,82 +230,138 @@ under the License.\n             <directory>src/test/resources</directory>\n             <filtering>true</filtering>\n           </testResource>\n-          <testResource>\n-            <directory>src/test/resources/pgjsonb</directory>\n-            <filtering>true</filtering>\n-          </testResource>\n           <testResource>\n             <directory>src/main/resources</directory>\n             <filtering>true</filtering>\n+            <excludes>\n+              <exclude>domains/MasterContent.xml</exclude>\n+            </excludes>\n           </testResource>\n           <testResource>\n             <directory>src/main/resources/pgjsonb</directory>\n             <filtering>true</filtering>\n-            <excludes>\n-              <exclude>domains/MasterContent.xml</exclude>\n-            </excludes>\n           </testResource>\n         </testResources>\n       </build>\n     </profile>\n     \n     <profile>\n-      <id>sqlgen</id>\n-      \n-      <properties>\n-        <skipTests>true</skipTests>\n-      </properties>\n+      <id>mysql</id>\n       \n+      <dependencies>\n+        <dependency>\n+          <groupId>mysql</groupId>\n+          <artifactId>mysql-connector-java</artifactId>\n+          <version>${jdbc.mysql.version}</version>\n+          <scope>test</scope>\n+        </dependency>\n+      </dependencies>\n+\n       <build>\n         <defaultGoal>clean verify</defaultGoal>\n         \n         <plugins>\n           <plugin>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-maven-plugin</artifactId>\n-            <inherited>true</inherited>\n+            <groupId>org.codehaus.mojo</groupId>\n+            <artifactId>build-helper-maven-plugin</artifactId>\n             <executions>\n               <execution>\n-                <id>sqlgen</id>\n-                <phase>process-classes</phase>\n+                <id>add-test-source</id>\n+                <phase>generate-test-sources</phase>\n                 <goals>\n-                  <goal>sql</goal>\n+                  <goal>add-test-source</goal>\n                 </goals>\n+                <configuration>\n+                  <sources>\n+                    <source>${basedir}/../persistence-jpa/src/test/java</source>\n+                  </sources>\n+                </configuration>\n               </execution>\n             </executions>\n-          </plugin>          \n-        </plugins>\n-      </build>\n-    </profile>\n-    \n-    <profile>\n-      <id>schemagen</id>\n-      \n-      <properties>\n-        <skipTests>true</skipTests>\n-      </properties>\n+          </plugin>\n       \n-      <build>\n-        <defaultGoal>clean verify</defaultGoal>\n-        \n-        <plugins>\n           <plugin>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-maven-plugin</artifactId>\n-            <inherited>true</inherited>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-surefire-plugin</artifactId>\n+            <configuration>\n+              <skip>true</skip>\n+            </configuration>\n+          </plugin>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <configuration>\n+              <includes>\n+                <include>**/*Test.java</include>\n+              </includes>\n+              <excludedGroups>multitenancy,plainAttrTable</excludedGroups>\n+            </configuration>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>io.fabric8</groupId>\n+            <artifactId>docker-maven-plugin</artifactId>\n+            <configuration>\n+              <images>\n+                <image>\n+                  <name>mysql/mysql-server:${docker.mysql.version}</name>\n+                  <run>\n+                    <cmd>--skip-log-bin --server-id=1</cmd>\n+                    <env>\n+                      <MYSQL_ROOT_PASSWORD>password</MYSQL_ROOT_PASSWORD>\n+                      <MYSQL_DATABASE>syncope</MYSQL_DATABASE>\n+                      <MYSQL_USER>syncope</MYSQL_USER>\n+                      <MYSQL_PASSWORD>syncope</MYSQL_PASSWORD>\n+                    </env>\n+                    <ports>\n+                      <port>3306:3306</port>\n+                    </ports>\n+                    <wait>\n+                      <log>MySQL init process done. Ready for start up.</log>\n+                      <time>30000</time>\n+                    </wait>\n+                  </run>\n+                </image>\n+              </images>\n+            </configuration>\n             <executions>\n               <execution>\n-                <id>schemagen</id>\n-                <phase>process-classes</phase>\n+                <id>start-mysql</id>\n+                <phase>pre-integration-test</phase>\n+                <goals>\n+                  <goal>start</goal>\n+                </goals>\n+              </execution>\n+              <execution>\n+                <id>stop-mysql</id>\n+                <phase>post-integration-test</phase>\n                 <goals>\n-                  <goal>schema</goal>\n+                  <goal>stop</goal>\n+                  <goal>remove</goal>\n                 </goals>\n               </execution>\n             </executions>\n-          </plugin>          \n+          </plugin>\n         </plugins>\n+        \n+        <testResources>\n+          <testResource>\n+            <directory>src/test/resources</directory>\n+            <filtering>true</filtering>\n+          </testResource>\n+          <testResource>\n+            <directory>src/main/resources</directory>\n+            <filtering>true</filtering>\n+            <excludes>\n+              <exclude>domains/MasterContent.xml</exclude>\n+            </excludes>\n+          </testResource>\n+          <testResource>\n+            <directory>src/main/resources/myjson</directory>\n+            <filtering>true</filtering>\n+          </testResource>\n+        </testResources>\n       </build>\n     </profile>\n   </profiles>\n-\n </project>"},{"sha":"ca1af52b8b065b5e99de7ea37059bb9bfaf38569","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAnyDAO.java","status":"added","additions":324,"deletions":0,"changes":324,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -0,0 +1,324 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import javax.persistence.Query;\n+import org.apache.commons.jexl3.parser.Parser;\n+import org.apache.commons.jexl3.parser.ParserConstants;\n+import org.apache.commons.jexl3.parser.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n+import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+abstract class AbstractJPAJSONAnyDAO extends AbstractDAO<AbstractEntity> implements JPAJSONAnyDAO {\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n+    protected abstract String queryBegin(String table);\n+\n+    protected abstract String attrValueMatch(\n+            AnyUtils anyUtils,\n+            PlainSchema schema,\n+            PlainAttrValue attrValue,\n+            boolean ignoreCaseMatch);\n+\n+    protected Pair<String, Boolean> schemaInfo(final AttrSchemaType schemaType, final boolean ignoreCaseMatch) {\n+        String key;\n+        boolean lower = false;\n+\n+        switch (schemaType) {\n+            case Boolean:\n+                key = \"booleanValue\";\n+                break;\n+\n+            case Date:\n+                key = \"dateValue\";\n+                break;\n+\n+            case Double:\n+                key = \"doubleValue\";\n+                break;\n+\n+            case Long:\n+                key = \"longValue\";\n+                break;\n+\n+            case Binary:\n+                key = \"binaryValue\";\n+                break;\n+\n+            default:\n+                lower = ignoreCaseMatch;\n+                key = \"stringValue\";\n+        }\n+\n+        return Pair.of(key, lower);\n+    }\n+\n+    protected <A extends Any<?>> List<A> buildResult(final AnyUtils anyUtils, final List<Object> queryResult) {\n+        List<A> result = new ArrayList<>();\n+        queryResult.forEach(anyKey -> {\n+            A any = anyUtils.<A>dao().find(anyKey.toString());\n+            if (any == null) {\n+                LOG.error(\"Could not find any for key {}\", anyKey);\n+            } else {\n+                result.add(any);\n+            }\n+        });\n+        return result;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Transactional(readOnly = true)\n+    @Override\n+    public <A extends Any<?>> List<A> findByPlainAttrValue(\n+            final String table,\n+            final AnyUtils anyUtils,\n+            final PlainSchema schema,\n+            final PlainAttrValue attrValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        if (schema == null) {\n+            LOG.error(\"No PlainSchema\");\n+            return Collections.<A>emptyList();\n+        }\n+\n+        Query query = entityManager().createNativeQuery(\n+                queryBegin(table)\n+                + \"WHERE \" + attrValueMatch(anyUtils, schema, attrValue, ignoreCaseMatch));\n+        query.setParameter(1, schema.getKey());\n+        query.setParameter(2, attrValue.getValue());\n+\n+        return buildResult(anyUtils, query.getResultList());\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public <A extends Any<?>> A findByPlainAttrUniqueValue(\n+            final String table,\n+            final AnyUtils anyUtils,\n+            final PlainSchema schema,\n+            final PlainAttrValue attrUniqueValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        if (schema == null) {\n+            LOG.error(\"No PlainSchema\");\n+            return null;\n+        }\n+        if (!schema.isUniqueConstraint()) {\n+            LOG.error(\"This schema has not unique constraint: '{}'\", schema.getKey());\n+            return null;\n+        }\n+\n+        List<A> result = findByPlainAttrValue(table, anyUtils, schema, attrUniqueValue, ignoreCaseMatch);\n+        return result.isEmpty()\n+                ? null\n+                : result.get(0);\n+    }\n+\n+    /**\n+     * Split an attribute value recurring on provided literals/tokens.\n+     *\n+     * @param attrValue value to be split\n+     * @param literals literals/tokens\n+     * @return split value\n+     */\n+    private List<String> split(final String attrValue, final List<String> literals) {\n+        final List<String> attrValues = new ArrayList<>();\n+\n+        if (literals.isEmpty()) {\n+            attrValues.add(attrValue);\n+        } else {\n+            for (String token : attrValue.split(Pattern.quote(literals.get(0)))) {\n+                if (!token.isEmpty()) {\n+                    attrValues.addAll(split(token, literals.subList(1, literals.size())));\n+                }\n+            }\n+        }\n+\n+        return attrValues;\n+    }\n+\n+    protected abstract List<Object> findByDerAttrValue(String table, Map<String, List<Object>> clauses);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Transactional(readOnly = true)\n+    @Override\n+    public <A extends Any<?>> List<A> findByDerAttrValue(\n+            final String table,\n+            final AnyUtils anyUtils,\n+            final DerSchema derSchema,\n+            final String value,\n+            final boolean ignoreCaseMatch) {\n+\n+        if (derSchema == null) {\n+            LOG.error(\"No DerSchema\");\n+            return Collections.<A>emptyList();\n+        }\n+\n+        Parser parser = new Parser(new StringReader(derSchema.getExpression()));\n+\n+        // Schema keys\n+        List<String> identifiers = new ArrayList<>();\n+\n+        // Literals\n+        List<String> literals = new ArrayList<>();\n+\n+        // Get schema keys and literals\n+        for (Token token = parser.getNextToken(); token != null && StringUtils.isNotBlank(token.toString());\n+                token = parser.getNextToken()) {\n+\n+            if (token.kind == ParserConstants.STRING_LITERAL) {\n+                literals.add(token.toString().substring(1, token.toString().length() - 1));\n+            }\n+\n+            if (token.kind == ParserConstants.IDENTIFIER) {\n+                identifiers.add(token.toString());\n+            }\n+        }\n+\n+        // Sort literals in order to process later literals included into others\n+        Collections.sort(literals, (l1, l2) -> {\n+            if (l1 == null && l2 == null) {\n+                return 0;\n+            } else if (l1 != null && l2 == null) {\n+                return -1;\n+            } else if (l1 == null && l2 != null) {\n+                return 1;\n+            } else if (l1.length() == l2.length()) {\n+                return 0;\n+            } else if (l1.length() > l2.length()) {\n+                return -1;\n+            } else {\n+                return 1;\n+            }\n+        });\n+\n+        // Split value on provided literals\n+        List<String> attrValues = split(value, literals);\n+\n+        if (attrValues.size() != identifiers.size()) {\n+            LOG.error(\"Ambiguous JEXL expression resolution: literals and values have different size\");\n+            return Collections.emptyList();\n+        }\n+\n+        Map<String, List<Object>> clauses = new LinkedHashMap<>();\n+\n+        // builder to build the clauses\n+        StringBuilder bld = new StringBuilder();\n+\n+        // Contains used identifiers in order to avoid replications\n+        Set<String> used = new HashSet<>();\n+\n+        // Create several clauses: one for eanch identifiers\n+        for (int i = 0; i < identifiers.size(); i++) {\n+            if (!used.contains(identifiers.get(i))) {\n+                // verify schema existence and get schema type\n+                PlainSchema schema = plainSchemaDAO.find(identifiers.get(i));\n+                if (schema == null) {\n+                    LOG.error(\"Invalid schema '{}', ignoring\", identifiers.get(i));\n+                } else {\n+                    // clear builder\n+                    bld.delete(0, bld.length());\n+\n+                    PlainAttrValue attrValue;\n+                    if (schema.isUniqueConstraint()) {\n+                        attrValue = anyUtils.newPlainAttrUniqueValue();\n+                    } else {\n+                        attrValue = anyUtils.newPlainAttrValue();\n+                    }\n+                    attrValue.setStringValue(attrValues.get(i));\n+\n+                    bld.append('(').\n+                            append(queryBegin(table)).\n+                            append(\"WHERE \").\n+                            append(attrValueMatch(anyUtils, schema, attrValue, ignoreCaseMatch)).\n+                            append(')');\n+\n+                    used.add(identifiers.get(i));\n+\n+                    List<Object> queryParams = new ArrayList<>();\n+                    queryParams.add(schema.getKey());\n+                    queryParams.add(attrValues.get(i));\n+\n+                    clauses.put(bld.toString(), queryParams);\n+                }\n+            }\n+        }\n+\n+        LOG.debug(\"Generated where clauses {}\", clauses);\n+\n+        return buildResult(anyUtils, findByDerAttrValue(table, clauses));\n+    }\n+\n+    @Transactional\n+    @Override\n+    public <A extends Any<?>> void checkBeforeSave(final String table, final AnyUtils anyUtils, final A any) {\n+        // check UNIQUE constraints\n+        any.getPlainAttrs().stream().\n+                filter(attr -> attr.getUniqueValue() != null).\n+                map(JSONPlainAttr.class::cast).\n+                forEach(attr -> {\n+                    PlainSchema schema = attr.getSchema();\n+                    List<A> others = findByPlainAttrValue(table, anyUtils, schema, attr.getUniqueValue(), false);\n+                    if (others.isEmpty() || (others.size() == 1 && others.get(0).getKey().equals(any.getKey()))) {\n+                        LOG.debug(\"No duplicate value found for {}\", attr.getUniqueValue().getValueAsString());\n+                    } else {\n+                        throw new DuplicateException(\n+                                \"Value \" + attr.getUniqueValue().getValueAsString()\n+                                + \" existing for \" + schema.getKey());\n+                    }\n+                });\n+\n+        // update sysInfo - as org.apache.syncope.core.persistence.jpa.entity.PlainAttrListener is not invoked\n+        Date now = new Date();\n+        String username = AuthContextUtils.getUsername();\n+        LOG.debug(\"Set last change date '{}' and modifier '{}' for '{}'\", now, username, any);\n+        any.setLastModifier(username);\n+        any.setLastChangeDate(now);\n+    }\n+}"},{"sha":"7dbf95d1c3bd89a7fd49098b949af107fb32a11d","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAnySearchDAO.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnySearchDAO.java?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+\n+abstract class AbstractJPAJSONAnySearchDAO extends JPAAnySearchDAO {\n+\n+    protected static final FastDateFormat DATE_FORMAT =\n+            FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN);\n+\n+    @Override\n+    SearchSupport buildSearchSupport(final AnyTypeKind kind) {\n+        return new SearchSupport(kind);\n+    }\n+\n+    protected void appendOp(final StringBuilder query, final AttributeCond.Type condType, final boolean not) {\n+        switch (condType) {\n+            case LIKE:\n+            case ILIKE:\n+                if (not) {\n+                    query.append(\"NOT \");\n+                }\n+                query.append(\" LIKE \");\n+                break;\n+\n+            case GE:\n+                if (not) {\n+                    query.append('<');\n+                } else {\n+                    query.append(\">=\");\n+                }\n+                break;\n+\n+            case GT:\n+                if (not) {\n+                    query.append(\"<=\");\n+                } else {\n+                    query.append('>');\n+                }\n+                break;\n+\n+            case LE:\n+                if (not) {\n+                    query.append('>');\n+                } else {\n+                    query.append(\"<=\");\n+                }\n+                break;\n+\n+            case LT:\n+                if (not) {\n+                    query.append(\">=\");\n+                } else {\n+                    query.append('<');\n+                }\n+                break;\n+\n+            case EQ:\n+            case IEQ:\n+            default:\n+                if (not) {\n+                    query.append('!');\n+                }\n+                query.append('=');\n+        }\n+    }\n+}"},{"sha":"e15e6909a11f3785cddf3d0087c67df631d0d2b5","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnyDAO.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.persistence.Query;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n+\n+public class MyJPAJSONAnyDAO extends AbstractJPAJSONAnyDAO {\n+\n+    @Override\n+    protected String queryBegin(final String table) {\n+        String view = StringUtils.containsIgnoreCase(table, AnyTypeKind.USER.name())\n+                ? \"user_search\"\n+                : StringUtils.containsIgnoreCase(table, AnyTypeKind.GROUP.name())\n+                ? \"group_search\"\n+                : \"anyObject_search\";\n+        return \"SELECT DISTINCT id FROM \" + view + \" \";\n+    }\n+\n+    @Override\n+    protected String attrValueMatch(\n+            final AnyUtils anyUtils,\n+            final PlainSchema schema,\n+            final PlainAttrValue attrValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        Pair<String, Boolean> schemaInfo = schemaInfo(schema.getType(), ignoreCaseMatch);\n+        if (schemaInfo.getRight()) {\n+            return \"plainSchema = ? \"\n+                    + \"AND \"\n+                    + (schemaInfo.getRight() ? \"LOWER(\" : \"\")\n+                    + (schema.isUniqueConstraint()\n+                    ? \"attrUniqueValue ->> '$.\" + schemaInfo.getLeft() + \"'\"\n+                    : schemaInfo.getLeft())\n+                    + (schemaInfo.getRight() ? \")\" : \"\")\n+                    + \" = \"\n+                    + (schemaInfo.getRight() ? \"LOWER(\" : \"\")\n+                    + \"?\"\n+                    + (schemaInfo.getRight() ? \")\" : \"\");\n+        } else {\n+            PlainAttr<?> container = anyUtils.newPlainAttr();\n+            container.setSchema(schema);\n+            if (attrValue instanceof PlainAttrUniqueValue) {\n+                container.setUniqueValue((PlainAttrUniqueValue) attrValue);\n+            } else {\n+                ((JSONPlainAttr) container).add(attrValue);\n+            }\n+            return \"JSON_CONTAINS(plainAttrs, '\" + POJOHelper.serialize(Arrays.asList(container)) + \"')\";\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * This method is a workaround for a bug experienced with MySQL 8.0.13, where the correct implementation (as shown\n+     * in PGJPAJSONAnyDAO.findByDerAttrValue(String, Map&lt;String, List&lt;Object&gt;&gt;)) generates a core dump.\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected List<Object> findByDerAttrValue(\n+            final String table,\n+            final Map<String, List<Object>> clauses) {\n+\n+        if (clauses.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        Set<Object> result = new HashSet<>();\n+        AtomicReference<Boolean> first = new AtomicReference<>(Boolean.TRUE);\n+        clauses.forEach((clause, parameters) -> {\n+            Query query = entityManager().createNativeQuery(StringUtils.replaceIgnoreCase(clause, \"DISTINCT\", \"\"));\n+            for (int i = 0; i < parameters.size(); i++) {\n+                query.setParameter(i + 1, parameters.get(i));\n+            }\n+\n+            Set<Object> local = new HashSet<>(query.getResultList());\n+            if (first.get()) {\n+                result.addAll(local);\n+                first.set(Boolean.FALSE);\n+            } else {\n+                result.retainAll(local);\n+            }\n+        });\n+\n+        return new ArrayList<>(result);\n+    }\n+}"},{"sha":"d33701f64a2822e8ae9280a46476abd3422d49cb","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnySearchDAO.java","status":"added","additions":214,"deletions":0,"changes":214,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n+\n+public class MyJPAJSONAnySearchDAO extends AbstractJPAJSONAnySearchDAO {\n+\n+    @Override\n+    protected void processOBS(\n+            final SearchSupport svs,\n+            final Set<String> involvedPlainAttrs,\n+            final OrderBySupport obs,\n+            final StringBuilder where) {\n+\n+        Set<String> attrs = obs.items.stream().\n+                map(item -> item.orderBy.substring(0, item.orderBy.indexOf(\" \"))).collect(Collectors.toSet());\n+\n+        obs.views.forEach(searchView -> {\n+            if (searchView.name.equals(svs.field().name)) {\n+                StringBuilder attrWhere = new StringBuilder();\n+                StringBuilder nullAttrWhere = new StringBuilder();\n+\n+                where.append(\", (SELECT * FROM \").append(searchView.name);\n+\n+                if (svs.nonMandatorySchemas || obs.nonMandatorySchemas) {\n+                    attrs.forEach(field -> {\n+                        if (attrWhere.length() == 0) {\n+                            attrWhere.append(\" WHERE \");\n+                        } else {\n+                            attrWhere.append(\" OR \");\n+                        }\n+                        attrWhere.append(\"JSON_CONTAINS(plainAttrs, '[{\\\"schema\\\":\\\"\").append(field).append(\"\\\"}]'\");\n+\n+                        nullAttrWhere.append(\" UNION SELECT DISTINCT any_id,\").append(svs.table().alias).append(\".*, \").\n+                                append(\"JSON('{\\\"schema\\\": \\\"\").\n+                                append(field).\n+                                append(\"\\\"})' as attrs, JSON('{}') as attrValues\").\n+                                append(\" FROM \").append(svs.table().name).append(\" \").append(svs.table().alias).\n+                                append(\", \").append(svs.field().name).\n+                                append(\" WHERE \").\n+                                append(\"any_id NOT IN \").\n+                                append(\"(SELECT distinct any_id FROM \").\n+                                append(svs.field().name).\n+                                append(\" WHERE \").append(svs.table().alias).append(\".id=any_id AND \").\n+                                append(\"JSON_CONTAINS(plainAttrs, '[{\\\"schema\\\":\\\"\").append(field).append(\"\\\"}]')\");\n+                    });\n+                    where.append(attrWhere).append(nullAttrWhere);\n+                }\n+\n+                where.append(')');\n+            } else {\n+                where.append(',').append(searchView.name);\n+            }\n+            where.append(' ').append(searchView.alias);\n+        });\n+    }\n+\n+    @Override\n+    protected void parseOrderByForPlainSchema(\n+            final SearchSupport svs,\n+            final OrderBySupport obs,\n+            final OrderBySupport.Item item,\n+            final OrderByClause clause,\n+            final PlainSchema schema,\n+            final String fieldName) {\n+\n+        // keep track of involvement of non-mandatory schemas in the order by clauses\n+        obs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());\n+\n+        obs.views.add(svs.field());\n+\n+        item.select = svs.field().alias + \".\"\n+                + (schema.isUniqueConstraint() ? \"attrUniqueValue\" : key(schema.getType()))\n+                + \" AS \" + fieldName;\n+        item.where = \"plainSchema = '\" + fieldName + \"'\";\n+        item.orderBy = fieldName + \" \" + clause.getDirection().name();\n+    }\n+\n+    private void fillAttrQuery(\n+            final AnyUtils anyUtils,\n+            final StringBuilder query,\n+            final PlainAttrValue attrValue,\n+            final PlainSchema schema,\n+            final AttributeCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        // This first branch is required for handling with not conditions given on multivalue fields (SYNCOPE-1419)\n+        if (not && schema.isMultivalue()\n+                && !(cond instanceof AnyCond)\n+                && cond.getType() != AttributeCond.Type.ISNULL && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+\n+            query.append(\"id NOT IN (SELECT DISTINCT any_id FROM \");\n+            query.append(svs.field().name).append(\" WHERE \");\n+            fillAttrQuery(anyUtils, query, attrValue, schema, cond, false, parameters, svs);\n+            query.append(\")\");\n+        } else {\n+            if (!not && cond.getType() == AttributeCond.Type.EQ) {\n+                PlainAttr<?> container = anyUtils.newPlainAttr();\n+                container.setSchema(schema);\n+                if (attrValue instanceof PlainAttrUniqueValue) {\n+                    container.setUniqueValue((PlainAttrUniqueValue) attrValue);\n+                } else {\n+                    ((JSONPlainAttr) container).add(attrValue);\n+                }\n+\n+                query.append(\"JSON_CONTAINS(plainAttrs, '\").\n+                        append(POJOHelper.serialize(Arrays.asList(container))).\n+                        append(\"')\");\n+            } else {\n+                String key = key(schema.getType());\n+                boolean lower = (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum)\n+                        && (cond.getType() == AttributeCond.Type.IEQ || cond.getType() == AttributeCond.Type.ILIKE);\n+\n+                query.append(\"plainSchema = ?\").append(setParameter(parameters, cond.getSchema())).\n+                        append(\" AND \").\n+                        append(lower ? \"LOWER(\" : \"\").\n+                        append(schema.isUniqueConstraint()\n+                                ? \"attrUniqueValue ->> '$.\" + key + \"'\"\n+                                : key).\n+                        append(lower ? \")\" : \"\");\n+\n+                appendOp(query, cond.getType(), not);\n+\n+                query.append(lower ? \"LOWER(\" : \"\").\n+                        append(\"?\").append(setParameter(parameters, cond.getExpression())).\n+                        append(lower ? \")\" : \"\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected String getQuery(\n+            final AttributeCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        Pair<PlainSchema, PlainAttrValue> checked;\n+        try {\n+            checked = check(cond, svs.anyTypeKind);\n+        } catch (IllegalArgumentException e) {\n+            return EMPTY_QUERY;\n+        }\n+\n+        // normalize NULL / NOT NULL checks\n+        if (not) {\n+            if (cond.getType() == AttributeCond.Type.ISNULL) {\n+                cond.setType(AttributeCond.Type.ISNOTNULL);\n+            } else if (cond.getType() == AttributeCond.Type.ISNOTNULL) {\n+                cond.setType(AttributeCond.Type.ISNULL);\n+            }\n+        }\n+\n+        StringBuilder query =\n+                new StringBuilder(\"SELECT DISTINCT any_id FROM \").append(svs.field().name).append(\" WHERE \");\n+        switch (cond.getType()) {\n+            case ISNOTNULL:\n+                query.append(\"JSON_SEARCH(plainAttrs, 'one', '\").\n+                        append(checked.getLeft().getKey()).\n+                        append(\"', NULL, '$[*].schema') IS NOT NULL\");\n+                break;\n+\n+            case ISNULL:\n+                query.append(\"JSON_SEARCH(plainAttrs, 'one', '\").\n+                        append(checked.getLeft().getKey()).\n+                        append(\"', NULL, '$[*].schema') IS NULL\");\n+                break;\n+\n+            default:\n+                if (not && !(cond instanceof AnyCond) && checked.getLeft().isMultivalue()) {\n+                    query = new StringBuilder(\"SELECT DISTINCT id AS any_id FROM \").append(svs.table().name).\n+                            append(\" WHERE \");\n+                }\n+                fillAttrQuery(anyUtilsFactory.getInstance(svs.anyTypeKind),\n+                        query, checked.getRight(), checked.getLeft(), cond, not, parameters, svs);\n+        }\n+\n+        return query.toString();\n+    }\n+}"},{"sha":"ed1664b0832ac24206239c0e294142ae34cca4ee","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnyDAO.java","status":"modified","additions":24,"deletions":279,"changes":303,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -18,100 +18,49 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n+import java.util.Map;\n import java.util.StringJoiner;\n-import java.util.regex.Pattern;\n import javax.persistence.Query;\n-import org.apache.commons.jexl3.parser.Parser;\n-import org.apache.commons.jexl3.parser.ParserConstants;\n-import org.apache.commons.jexl3.parser.Token;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n-import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n \n-@Repository\n-public class PGJPAJSONAnyDAO extends AbstractDAO<AbstractEntity> implements JPAJSONAnyDAO {\n+public class PGJPAJSONAnyDAO extends AbstractJPAJSONAnyDAO {\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n-\n-    private String queryBegin(final String table) {\n+    @Override\n+    protected String queryBegin(final String table) {\n         return \"SELECT DISTINCT id FROM \" + table + \" u,\"\n                 + \"jsonb_array_elements(u.plainAttrs) attrs,\"\n                 + \"jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues \";\n     }\n \n-    private String attrValueMatch(\n+    @Override\n+    protected String attrValueMatch(\n             final AnyUtils anyUtils,\n             final PlainSchema schema,\n             final PlainAttrValue attrValue,\n             final boolean ignoreCaseMatch) {\n \n-        String key;\n-        boolean lower = false;\n-\n-        switch (schema.getType()) {\n-            case Boolean:\n-                key = \"booleanValue\";\n-                break;\n-\n-            case Date:\n-                key = \"dateValue\";\n-                break;\n-\n-            case Double:\n-                key = \"doubleValue\";\n-                break;\n-\n-            case Long:\n-                key = \"longValue\";\n-                break;\n-\n-            case Binary:\n-                key = \"binaryValue\";\n-                break;\n-\n-            default:\n-                lower = ignoreCaseMatch;\n-                key = \"stringValue\";\n-        }\n-\n-        if (lower) {\n+        Pair<String, Boolean> schemaInfo = schemaInfo(schema.getType(), ignoreCaseMatch);\n+        if (schemaInfo.getRight()) {\n             return \"attrs ->> 'schema' = ? \"\n                     + \"AND \"\n-                    + (lower ? \"LOWER(\" : \"\")\n-                    + (schema.isUniqueConstraint() ? \"attrs -> 'uniqueValue'\" : \"attrValues\") + \" ->> '\" + key\n-                    + \"'\" + (lower ? \")\" : \"\")\n+                    + (schemaInfo.getRight() ? \"LOWER(\" : \"\")\n+                    + (schema.isUniqueConstraint() ? \"attrs -> 'uniqueValue'\" : \"attrValues\")\n+                    + \" ->> '\" + schemaInfo.getLeft()\n+                    + \"'\" + (schemaInfo.getRight() ? \")\" : \"\")\n                     + \" = \"\n-                    + (lower ? \"LOWER(\" : \"\")\n+                    + (schemaInfo.getRight() ? \"LOWER(\" : \"\")\n                     + \"?\"\n-                    + (lower ? \")\" : \"\");\n+                    + (schemaInfo.getRight() ? \")\" : \"\");\n         } else {\n             PlainAttr<?> container = anyUtils.newPlainAttr();\n             container.setSchema(schema);\n@@ -124,230 +73,26 @@ private String attrValueMatch(\n         }\n     }\n \n-    private <A extends Any<?>> List<A> buildResult(final AnyUtils anyUtils, final List<Object> queryResult) {\n-        List<A> result = new ArrayList<>();\n-        queryResult.forEach(anyKey -> {\n-            A any = anyUtils.<A>dao().find(anyKey.toString());\n-            if (any == null) {\n-                LOG.error(\"Could not find any for key {}\", anyKey);\n-            } else {\n-                result.add(any);\n-            }\n-        });\n-        return result;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Transactional(readOnly = true)\n-    @Override\n-    public <A extends Any<?>> List<A> findByPlainAttrValue(\n-            final String table,\n-            final AnyUtils anyUtils,\n-            final PlainSchema schema,\n-            final PlainAttrValue attrValue,\n-            final boolean ignoreCaseMatch) {\n-\n-        if (schema == null) {\n-            LOG.error(\"No PlainSchema\");\n-            return Collections.<A>emptyList();\n-        }\n-\n-        Query query = entityManager().createNativeQuery(\n-                queryBegin(table)\n-                + \"WHERE \" + attrValueMatch(anyUtils, schema, attrValue, ignoreCaseMatch));\n-        query.setParameter(1, schema.getKey());\n-        query.setParameter(2, attrValue.getValue());\n-\n-        return buildResult(anyUtils, query.getResultList());\n-    }\n-\n-    @Transactional(readOnly = true)\n     @Override\n-    public <A extends Any<?>> A findByPlainAttrUniqueValue(\n-            final String table,\n-            final AnyUtils anyUtils,\n-            final PlainSchema schema,\n-            final PlainAttrValue attrUniqueValue,\n-            final boolean ignoreCaseMatch) {\n-\n-        if (schema == null) {\n-            LOG.error(\"No PlainSchema\");\n-            return null;\n-        }\n-        if (!schema.isUniqueConstraint()) {\n-            LOG.error(\"This schema has not unique constraint: '{}'\", schema.getKey());\n-            return null;\n-        }\n-\n-        List<A> result = findByPlainAttrValue(table, anyUtils, schema, attrUniqueValue, ignoreCaseMatch);\n-        return result.isEmpty()\n-                ? null\n-                : result.get(0);\n-    }\n-\n-    /**\n-     * Split an attribute value recurring on provided literals/tokens.\n-     *\n-     * @param attrValue value to be split\n-     * @param literals literals/tokens\n-     * @return split value\n-     */\n-    private List<String> split(final String attrValue, final List<String> literals) {\n-        final List<String> attrValues = new ArrayList<>();\n-\n-        if (literals.isEmpty()) {\n-            attrValues.add(attrValue);\n-        } else {\n-            for (String token : attrValue.split(Pattern.quote(literals.get(0)))) {\n-                if (!token.isEmpty()) {\n-                    attrValues.addAll(split(token, literals.subList(1, literals.size())));\n-                }\n-            }\n-        }\n-\n-        return attrValues;\n-    }\n-\n     @SuppressWarnings(\"unchecked\")\n-    @Transactional(readOnly = true)\n-    @Override\n-    public <A extends Any<?>> List<A> findByDerAttrValue(\n+    protected List<Object> findByDerAttrValue(\n             final String table,\n-            final AnyUtils anyUtils,\n-            final DerSchema derSchema,\n-            final String value,\n-            final boolean ignoreCaseMatch) {\n-\n-        if (derSchema == null) {\n-            LOG.error(\"No DerSchema\");\n-            return Collections.<A>emptyList();\n-        }\n-\n-        Parser parser = new Parser(new StringReader(derSchema.getExpression()));\n-\n-        // Schema keys\n-        List<String> identifiers = new ArrayList<>();\n-\n-        // Literals\n-        List<String> literals = new ArrayList<>();\n-\n-        // Get schema keys and literals\n-        for (Token token = parser.getNextToken(); token != null && StringUtils.isNotBlank(token.toString());\n-                token = parser.getNextToken()) {\n-\n-            if (token.kind == ParserConstants.STRING_LITERAL) {\n-                literals.add(token.toString().substring(1, token.toString().length() - 1));\n-            }\n-\n-            if (token.kind == ParserConstants.IDENTIFIER) {\n-                identifiers.add(token.toString());\n-            }\n-        }\n-\n-        // Sort literals in order to process later literals included into others\n-        Collections.sort(literals, (l1, l2) -> {\n-            if (l1 == null && l2 == null) {\n-                return 0;\n-            } else if (l1 != null && l2 == null) {\n-                return -1;\n-            } else if (l1 == null && l2 != null) {\n-                return 1;\n-            } else if (l1.length() == l2.length()) {\n-                return 0;\n-            } else if (l1.length() > l2.length()) {\n-                return -1;\n-            } else {\n-                return 1;\n-            }\n-        });\n-\n-        // Split value on provided literals\n-        List<String> attrValues = split(value, literals);\n-\n-        if (attrValues.size() != identifiers.size()) {\n-            LOG.error(\"Ambiguous JEXL expression resolution: literals and values have different size\");\n-            return Collections.emptyList();\n-        }\n-\n-        StringJoiner clauses = new StringJoiner(\" AND id IN \");\n-\n-        // builder to build the clauses\n-        StringBuilder bld = new StringBuilder();\n-\n-        // Contains used identifiers in order to avoid replications\n-        Set<String> used = new HashSet<>();\n+            final Map<String, List<Object>> clauses) {\n \n+        StringJoiner actualClauses = new StringJoiner(\" AND id IN \");\n         List<Object> queryParams = new ArrayList<>();\n \n-        // Create several clauses: one for eanch identifiers\n-        for (int i = 0; i < identifiers.size(); i++) {\n-            if (!used.contains(identifiers.get(i))) {\n-                // verify schema existence and get schema type\n-                PlainSchema schema = plainSchemaDAO.find(identifiers.get(i));\n-                if (schema == null) {\n-                    LOG.error(\"Invalid schema '{}', ignoring\", identifiers.get(i));\n-                } else {\n-                    // clear builder\n-                    bld.delete(0, bld.length());\n-\n-                    PlainAttrValue attrValue;\n-                    if (schema.isUniqueConstraint()) {\n-                        attrValue = anyUtils.newPlainAttrUniqueValue();\n-                    } else {\n-                        attrValue = anyUtils.newPlainAttrValue();\n-                    }\n-                    attrValue.setStringValue(attrValues.get(i));\n-\n-                    bld.append('(').\n-                            append(queryBegin(table)).\n-                            append(\"WHERE \").\n-                            append(attrValueMatch(anyUtils, schema, attrValue, ignoreCaseMatch)).\n-                            append(')');\n-                    queryParams.add(schema.getKey());\n-                    queryParams.add(attrValues.get(i));\n-\n-                    used.add(identifiers.get(i));\n-\n-                    clauses.add(bld.toString());\n-                }\n-            }\n-        }\n-\n-        LOG.debug(\"Generated where clauses {}\", clauses);\n+        clauses.forEach((clause, parameters) -> {\n+            actualClauses.add(clause);\n+            queryParams.addAll(parameters);\n+        });\n \n         Query query = entityManager().createNativeQuery(\n-                \"SELECT DISTINCT id FROM \" + table + \" u WHERE id IN \" + clauses.toString());\n+                \"SELECT DISTINCT id FROM \" + table + \" u WHERE id IN \" + actualClauses.toString());\n         for (int i = 0; i < queryParams.size(); i++) {\n             query.setParameter(i + 1, queryParams.get(i));\n         }\n \n-        return buildResult(anyUtils, query.getResultList());\n-    }\n-\n-    @Transactional\n-    @Override\n-    public <A extends Any<?>> void checkBeforeSave(final String table, final AnyUtils anyUtils, final A any) {\n-        // check UNIQUE constraints\n-        any.getPlainAttrs().stream().\n-                filter(attr -> attr.getUniqueValue() != null).\n-                map(JSONPlainAttr.class::cast).\n-                forEach(attr -> {\n-                    PlainSchema schema = attr.getSchema();\n-                    List<A> others = findByPlainAttrValue(table, anyUtils, schema, attr.getUniqueValue(), false);\n-                    if (others.isEmpty() || (others.size() == 1 && others.get(0).getKey().equals(any.getKey()))) {\n-                        LOG.debug(\"No duplicate value found for {}\", attr.getUniqueValue().getValueAsString());\n-                    } else {\n-                        throw new DuplicateException(\n-                                \"Value \" + attr.getUniqueValue().getValueAsString()\n-                                + \" existing for \" + schema.getKey());\n-                    }\n-                });\n-\n-        // update sysInfo - as org.apache.syncope.core.persistence.jpa.entity.PlainAttrListener is not invoked\n-        Date now = new Date();\n-        String username = AuthContextUtils.getUsername();\n-        LOG.debug(\"Set last change date '{}' and modifier '{}' for '{}'\", now, username, any);\n-        any.setLastModifier(username);\n-        any.setLastChangeDate(now);\n+        return query.getResultList();\n     }\n }"},{"sha":"bd29bf3e126cbb1e301fab3d5f117a35436044c9","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":2,"deletions":90,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -23,10 +23,7 @@\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n@@ -39,14 +36,7 @@\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n \n-public class PGJPAJSONAnySearchDAO extends JPAAnySearchDAO {\n-\n-    private static final FastDateFormat DATE_FORMAT = FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN);\n-\n-    @Override\n-    SearchSupport buildSearchSupport(final AnyTypeKind kind) {\n-        return new SearchSupport(kind);\n-    }\n+public class PGJPAJSONAnySearchDAO extends AbstractJPAJSONAnySearchDAO {\n \n     @Override\n     protected void processOBS(\n@@ -98,36 +88,6 @@ protected void processOBS(\n         });\n     }\n \n-    private String key(final AttrSchemaType schemaType) {\n-        String key;\n-        switch (schemaType) {\n-            case Boolean:\n-                key = \"booleanValue\";\n-                break;\n-\n-            case Date:\n-                key = \"dateValue\";\n-                break;\n-\n-            case Double:\n-                key = \"doubleValue\";\n-                break;\n-\n-            case Long:\n-                key = \"longValue\";\n-                break;\n-\n-            case Binary:\n-                key = \"binaryValue\";\n-                break;\n-\n-            default:\n-                key = \"stringValue\";\n-        }\n-\n-        return key;\n-    }\n-\n     @Override\n     protected void parseOrderByForPlainSchema(\n             final SearchSupport svs,\n@@ -192,55 +152,7 @@ private void fillAttrQuery(\n                         append(\" ->> '\").append(key).append(\"'\").\n                         append(lower ? \")\" : \"\");\n \n-                switch (cond.getType()) {\n-                    case LIKE:\n-                    case ILIKE:\n-                        if (not) {\n-                            query.append(\"NOT \");\n-                        }\n-                        query.append(\" LIKE \");\n-                        break;\n-\n-                    case GE:\n-                        if (not) {\n-                            query.append('<');\n-                        } else {\n-                            query.append(\">=\");\n-                        }\n-                        break;\n-\n-                    case GT:\n-                        if (not) {\n-                            query.append(\"<=\");\n-                        } else {\n-                            query.append('>');\n-                        }\n-                        break;\n-\n-                    case LE:\n-                        if (not) {\n-                            query.append('>');\n-                        } else {\n-                            query.append(\"<=\");\n-                        }\n-                        break;\n-\n-                    case LT:\n-                        if (not) {\n-                            query.append(\">=\");\n-                        } else {\n-                            query.append('<');\n-                        }\n-                        break;\n-\n-                    case EQ:\n-                    case IEQ:\n-                    default:\n-                        if (not) {\n-                            query.append('!');\n-                        }\n-                        query.append('=');\n-                }\n+                appendOp(query, cond.getType(), not);\n \n                 String value = cond.getExpression();\n                 if (schema.getType() == AttrSchemaType.Date) {"},{"sha":"a27e5e31c941141dea020ec6da24d06ce1bb1f7b","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAJSONEntityFactory.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityFactory.java?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -140,6 +140,7 @@ public void setBeanFactory(final BeanFactory beanFactory) {\n \n     @Override\n     public void afterPropertiesSet() throws Exception {\n-        beanFactory.createBean(jpaJSONAnyDAOClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+        beanFactory.registerSingleton(\"jpaJSONAnyDAO\",\n+                beanFactory.createBean(jpaJSONAnyDAOClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false));\n     }\n }"},{"sha":"ca17f7b846b1b1c4db6f54936246e2b5b72d8c72","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/MyJPAJSONEntityFactory.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FMyJPAJSONEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FMyJPAJSONEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FMyJPAJSONEntityFactory.java?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnySearchDAO;\n+\n+public class MyJPAJSONEntityFactory extends JPAJSONEntityFactory {\n+\n+    @Override\n+    public Class<? extends AnySearchDAO> anySearchDAOClass() {\n+        return MyJPAJSONAnySearchDAO.class;\n+    }\n+\n+    @Override\n+    protected Class<? extends JPAJSONAnyDAO> jpaJSONAnyDAOClass() {\n+        return MyJPAJSONAnyDAO.class;\n+    }\n+}"},{"sha":"1c397a0da4daa1f28d1dfcf6f67f09ad51dbc5ff","filename":"core/persistence-jpa-json/src/main/resources/META-INF/spring-orm-myjson.xml","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-myjson.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-myjson.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-myjson.xml?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -0,0 +1,137 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+                 xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm \n+                                     http://java.sun.com/xml/ns/persistence/orm_2_0.xsd\"\n+                 version=\"2.0\">\n+  \n+  <persistence-unit-metadata>\n+    <persistence-unit-defaults>\n+      <entity-listeners>\n+        <entity-listener class=\"org.apache.syncope.core.persistence.jpa.validation.entity.EntityValidationListener\">\n+          <pre-persist method-name=\"validate\"/>\n+          <pre-update method-name=\"validate\"/>\n+        </entity-listener>\n+      </entity-listeners>\n+    </persistence-unit-defaults>\n+  </persistence-unit-metadata>\n+ \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject\">\n+    <attributes>\n+      <basic name=\"plainAttrs\">\n+        <column column-definition=\"json\"/>\n+        <lob/>\n+      </basic>\n+    </attributes>\n+  </entity>\n+    \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\">\n+    <attributes>\n+      <basic name=\"plainAttrs\">\n+        <column column-definition=\"json\"/>\n+        <lob/>\n+      </basic>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser\">\n+    <attributes>\n+      <basic name=\"plainAttrs\">\n+        <column column-definition=\"json\"/>\n+        <lob/>\n+      </basic>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.conf.JPAJSONConf\">\n+    <attributes>\n+      <basic name=\"plainAttrs\">\n+        <column column-definition=\"json\"/>\n+        <lob/>\n+      </basic>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n+    <attributes>\n+      <many-to-one name=\"userOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser\"/>\n+      <many-to-one name=\"groupOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\"/>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">\n+    <attributes>\n+      <many-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\"/>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser\">\n+        <join-column name=\"user_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\">\n+        <join-column name=\"group_id\"/>\n+      </many-to-one>        \n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership\">\n+    <attributes>\n+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\"/>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser\">\n+        <join-column name=\"user_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject\">\n+        <join-column name=\"anyObject_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject\">\n+        <join-column name=\"anyObject_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\">\n+        <join-column name=\"group_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">\n+    <attributes>\n+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\"/>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject\">\n+        <join-column name=\"left_anyObject_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject\">\n+        <join-column name=\"right_anyObject_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+</entity-mappings>"},{"sha":"814b3c6255ec1711193db0e846d08a4b774d1c1d","filename":"core/persistence-jpa-json/src/main/resources/domains/MasterContent.xml","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","previous_filename":"core/persistence-jpa-json/src/main/resources/pgjsonb/domains/MasterContent.xml"},{"sha":"d945b5a361ef395dbf05c798be0340b609c9adff","filename":"core/persistence-jpa-json/src/main/resources/myjson/domains/Master.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fdomains%2FMaster.properties?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+Master.driverClassName=com.mysql.cj.jdbc.Driver\n+Master.url=jdbc:mysql://localhost:3306/syncope?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8\n+Master.schema=\n+Master.username=syncope\n+Master.password=syncope\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB,timestampTypeName=DATETIME(3))\n+Master.orm=META-INF/spring-orm-myjson.xml\n+\n+Master.pool.maxActive=10\n+Master.pool.minIdle=2\n+\n+Master.audit.sql=audit_mysql_innodb.sql"},{"sha":"b16004d42c06ea5664d24c363bbdfb50cafd3be9","filename":"core/persistence-jpa-json/src/main/resources/myjson/indexes.xml","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Findexes.xml?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n+<properties>\n+  <comment>Additional indexes (in respect to JPA's)</comment>\n+\n+  <entry key=\"UDynGroupMembers_any_id\">CREATE INDEX UDynGroupMembers_any_id ON UDynGroupMembers(any_id)</entry>\n+  <entry key=\"UDynGroupMembers_group_id\">CREATE INDEX UDynGroupMembers_group_id ON UDynGroupMembers(group_id)</entry>\n+  <entry key=\"ADynGroupMembers_any_id\">CREATE INDEX ADynGroupMembers_any_id ON ADynGroupMembers(any_id)</entry>\n+  <entry key=\"ADynGroupMembers_group_id\">CREATE INDEX ADynGroupMembers_group_id ON ADynGroupMembers(group_id)</entry>\n+\n+  <entry key=\"DynRoleMembers_any_id\">CREATE INDEX DynRoleMembers_any_id ON DynRoleMembers(any_id)</entry>\n+  <entry key=\"DynRoleMembers_role_id\">CREATE INDEX DynRoleMembers_role_id ON DynRoleMembers(role_id)</entry>\n+\n+  <entry key=\"DynRealmMembers_any_id\">CREATE INDEX DynRealmMembers_any_id ON DynRealmMembers(any_id)</entry>\n+  <entry key=\"DynRealmMembers_realm_id\">CREATE INDEX DynRealmMembers_dynRealm_id ON DynRealmMembers(dynRealm_id)</entry>\n+\n+  <entry key=\"CPlainAttrValue_stringvalueIndex\">CREATE INDEX CAttrValue_stringvalueIndex ON CPlainAttrValue(stringvalue)</entry>\n+  <entry key=\"CPlainAttrValue_datevalueIndex\">CREATE INDEX CAttrValue_datevalueIndex ON CPlainAttrValue(datevalue)</entry>\n+  <entry key=\"CPlainAttrValue_longvalueIndex\">CREATE INDEX CAttrValue_longvalueIndex ON CPlainAttrValue(longvalue)</entry>\n+  <entry key=\"CPlainAttrValue_doublevalueIndex\">CREATE INDEX CAttrValue_doublevalueIndex ON CPlainAttrValue(doublevalue)</entry>\n+  <entry key=\"CPlainAttrValue_booleanvalueIndex\">CREATE INDEX CAttrValue_booleanvalueIndex ON CPlainAttrValue(booleanvalue)</entry>\n+\n+  <entry key=\"UMembership_GroupIndex\">CREATE INDEX UMembership_GroupIndex ON UMembership(group_id)</entry>\n+  <entry key=\"UMembership_UserIndex\">CREATE INDEX UMembership_UserIndex ON UMembership(user_id)</entry>\n+  <entry key=\"AMembership_GroupIndex\">CREATE INDEX AMembership_GroupIndex ON AMembership(group_id)</entry>\n+  <entry key=\"AMembership_AnyObjectIndex\">CREATE INDEX AMembership_AnyObjectIndex ON AMembership(anyObject_id)</entry>\n+\n+  <entry key=\"URelationship_RightIndex\">CREATE INDEX URelationship_RightIndex ON URelationship(anyObject_id)</entry>\n+  <entry key=\"URelationship_LeftIndex\">CREATE INDEX URelationship_LeftIndex ON URelationship(user_id)</entry>\n+  <entry key=\"ARelationship_RightIndex\">CREATE INDEX ARelationship_RightIndex ON ARelationship(right_anyObject_id)</entry>\n+  <entry key=\"ARelationship_AnyObjectIndex\">CREATE INDEX ARelationship_AnyObjectIndex ON ARelationship(left_anyObject_id)</entry>\n+\n+  <entry key=\"CPlainAttrValue_attrIndex\">CREATE INDEX CPlainAttrValue_attrIndex on CPlainAttrValue(attribute_id)</entry>\n+  <entry key=\"CPAttrUniqueValue_attrIndex\">CREATE INDEX CPAttrUniqueValue_attrIndex on CPlainAttrUniqueValue(attribute_id)</entry>\n+\n+  <entry key=\"CPlainAttr_owner_Index\">CREATE INDEX CPlainAttr_owner_Index on CPlainAttr(owner_id)</entry>\n+  <entry key=\"CPlainAttr_schema_Index\">CREATE INDEX CPlainAttr_schema_Index on CPlainAttr(schema_id)</entry>\n+\n+  <entry key=\"Task_executedIndex\">CREATE INDEX Task_executedIndex ON Task(executed)</entry>\n+</properties>"},{"sha":"31a2dd86e5c00459e83075f5e2b1bde0da2f7d33","filename":"core/persistence-jpa-json/src/main/resources/myjson/persistence.properties","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -0,0 +1,27 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+content.directory=${conf.directory}\n+entity.factory=org.apache.syncope.core.persistence.jpa.entity.MyJPAJSONEntityFactory\n+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainSchemaDAO\n+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrDAO\n+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrValueDAO\n+any.search.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnySearchDAO\n+user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n+group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n+conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONConfDAO\n+openjpa.RemoteCommitProvider=sjvm"},{"sha":"aa0e3c0ae0c8d9c8b6010eaf5c30d6e3bb46ebc0","filename":"core/persistence-jpa-json/src/main/resources/myjson/views.xml","status":"added","additions":181,"deletions":0,"changes":181,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fviews.xml?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -0,0 +1,181 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n+<properties>\n+  \n+  <entry key=\"UDynGroupMembers\">\n+    CREATE TABLE UDynGroupMembers(\n+    any_id CHAR(36),\n+    group_id CHAR(36),\n+    UNIQUE(any_id, group_id))\n+  </entry>\n+  <entry key=\"ADynGroupMembers\">\n+    CREATE TABLE ADynGroupMembers(\n+    anyType_id VARCHAR(255),\n+    any_id CHAR(36),\n+    group_id CHAR(36),\n+    UNIQUE(anyType_id, any_id, group_id))\n+  </entry>\n+  <entry key=\"DynRoleMembers\">\n+    CREATE TABLE DynRoleMembers(\n+    any_id CHAR(36),\n+    role_id VARCHAR(255),\n+    UNIQUE(any_id, role_id))\n+  </entry>\n+  <entry key=\"DynRealmMembers\">\n+    CREATE TABLE DynRealmMembers(\n+    any_id CHAR(36),\n+    dynRealm_id VARCHAR(255),\n+    UNIQUE(any_id, dynRealm_id))\n+  </entry>\n+\n+  <!-- user -->\n+  <entry key=\"user_search\">\n+    CREATE VIEW user_search AS\n+\n+    SELECT u.id as any_id, u.*, attrs.*\n+    FROM SyncopeUser u, JSON_TABLE(COALESCE(plainAttrs, '[{}]'), '$[*]' COLUMNS (\n+    plainSchema VARCHAR(255) PATH '$.schema',\n+    NESTED PATH '$.values[*]' COLUMNS (\n+    binaryValue LONGBLOB PATH '$.binaryValue',\n+    booleanValue INT PATH '$.booleanValue',\n+    dateValue BIGINT(20) PATH '$.dateValue',\n+    doubleValue DOUBLE PATH '$.doubleValue',\n+    longValue BIGINT(20) PATH '$.longValue',\n+    stringValue VARCHAR(255) PATH '$.stringValue'),\n+    attrUniqueValue JSON PATH '$.uniqueValue')\n+    ) AS attrs\n+  </entry>\n+  <entry key=\"user_search_urelationship\">\n+    CREATE VIEW user_search_urelationship AS\n+\n+    SELECT m.user_id AS any_id, m.anyObject_id AS right_any_id, m.type_id AS type\n+    FROM URelationship m\n+  </entry>\n+  <entry key=\"user_search_umembership\">\n+    CREATE VIEW user_search_umembership AS\n+\n+    SELECT m.user_id AS any_id, g.id AS group_id, g.name AS group_name\n+    FROM UMembership m, SyncopeGroup g\n+    WHERE m.group_id = g.id\n+  </entry>\n+  <entry key=\"user_search_role\">\n+    CREATE VIEW user_search_role AS\n+\n+    SELECT ss.user_id AS any_id, ss.role_id AS role_id\n+    FROM SyncopeUser_SyncopeRole ss\n+  </entry>\n+  <entry key=\"user_search_priv\">\n+    CREATE VIEW user_search_priv AS\n+\n+    SELECT ss.user_id AS any_id, sp.privilege_id AS privilege_id\n+    FROM SyncopeUser_SyncopeRole ss, SyncopeRole_Privilege sp\n+    WHERE ss.role_id = sp.role_id\n+  </entry>\n+  <entry key=\"user_search_dynpriv\">\n+    CREATE VIEW user_search_dynpriv AS\n+\n+    SELECT any_id, privilege_id\n+    FROM DynRoleMembers drm, SyncopeRole_Privilege rp\n+    WHERE drm.role_id = rp.role_id\n+  </entry>\n+  <entry key=\"user_search_resource\">\n+    CREATE VIEW user_search_resource AS\n+\n+    SELECT st.user_id AS any_id, st.resource_id AS resource_id\n+    FROM SyncopeUser_ExternalResource st\n+  </entry>\n+  <entry key=\"user_search_group_res\">\n+    CREATE VIEW user_search_group_res AS\n+\n+    SELECT m.user_id AS any_id, st.resource_id AS resource_id\n+    FROM UMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st\n+    WHERE m.group_id = r.id AND st.group_id = r.id\n+  </entry>\n+\n+  <!-- anyObject -->\n+  <entry key=\"anyObject_search\">\n+    CREATE VIEW anyObject_search AS\n+ \n+    SELECT a.id as any_id, a.*, attrs.*\n+    FROM AnyObject a, JSON_TABLE(COALESCE(plainAttrs, '[{}]'), '$[*]' COLUMNS (\n+    plainSchema VARCHAR(255) PATH '$.schema',\n+    NESTED PATH '$.values[*]' COLUMNS (\n+    binaryValue LONGBLOB PATH '$.binaryValue',\n+    booleanValue INT PATH '$.booleanValue',\n+    dateValue BIGINT(20) PATH '$.dateValue',\n+    doubleValue DOUBLE PATH '$.doubleValue',\n+    longValue BIGINT(20) PATH '$.longValue',\n+    stringValue VARCHAR(255) PATH '$.stringValue'),\n+    attrUniqueValue JSON PATH '$.uniqueValue')\n+    ) AS attrs\n+  </entry>\n+  <entry key=\"anyObject_search_arelationship\">\n+    CREATE VIEW anyObject_search_arelationship AS\n+\n+    SELECT m.left_anyObject_id AS any_id, m.right_anyObject_id AS right_any_id, m.type_id AS type\n+    FROM ARelationship m\n+  </entry>\n+  <entry key=\"anyObject_search_amembership\">\n+    CREATE VIEW anyObject_search_amembership AS\n+\n+    SELECT m.anyObject_id AS any_id, g.id AS group_id, g.name AS group_name\n+    FROM AMembership m, SyncopeGroup g\n+    WHERE m.group_id = g.id\n+  </entry>\n+  <entry key=\"anyObject_search_resource\">\n+    CREATE VIEW anyObject_search_resource AS\n+\n+    SELECT st.anyObject_id AS any_id, st.resource_id AS resource_id\n+    FROM AnyObject_ExternalResource st\n+  </entry>\n+  <entry key=\"anyObject_search_group_res\">\n+    CREATE VIEW anyObject_search_group_res AS\n+\n+    SELECT m.anyObject_id AS any_id, st.resource_id AS resource_id\n+    FROM AMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st\n+    WHERE m.group_id = r.id AND st.group_id = r.id\n+  </entry>\n+\n+  <!-- group -->\n+  <entry key=\"group_search\">\n+    CREATE VIEW group_search AS\n+ \n+    SELECT g.id as any_id, g.*, attrs.*\n+    FROM SyncopeGroup g, JSON_TABLE(COALESCE(plainAttrs, '[{}]'), '$[*]' COLUMNS (\n+    plainSchema VARCHAR(255) PATH '$.schema',\n+    NESTED PATH '$.values[*]' COLUMNS (\n+    binaryValue LONGBLOB PATH '$.binaryValue',\n+    booleanValue INT PATH '$.booleanValue',\n+    dateValue BIGINT(20) PATH '$.dateValue',\n+    doubleValue DOUBLE PATH '$.doubleValue',\n+    longValue BIGINT(20) PATH '$.longValue',\n+    stringValue VARCHAR(255) PATH '$.stringValue'),\n+    attrUniqueValue JSON PATH '$.uniqueValue')\n+    ) AS attrs\n+  </entry>\n+  <entry key=\"group_search_resource\">\n+    CREATE VIEW group_search_resource AS\n+\n+    SELECT st.group_id AS any_id, st.resource_id AS resource_id\n+    FROM SyncopeGroup_ExternalResource st\n+  </entry>\n+\n+</properties>"},{"sha":"9bbfcbfa648297d195597d1aeb32a5d2c7ca9368","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","previous_filename":"core/persistence-jpa-json/src/test/resources/pgjsonb/domains/MasterContent.xml"},{"sha":"3e0ccf2006e29de5a2a1c654f42b13a60f65e012","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":37,"deletions":3,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -172,6 +172,8 @@ protected <T extends Any<?>> List<T> doSearch(\n \n             StringBuilder queryString = queryInfo.getLeft();\n \n+            LOG.debug(\"Query: {}, parameters: {}\", queryString, parameters);\n+\n             // 2. take into account realms and ordering\n             OrderBySupport obs = parseOrderBy(kind, svs, orderBy);\n             if (queryString.charAt(0) == '(') {\n@@ -185,6 +187,8 @@ protected <T extends Any<?>> List<T> doSearch(\n                     append(filter.getLeft()).\n                     append(buildOrderBy(obs));\n \n+            LOG.debug(\"Query with auth and order by statements: {}, parameters: {}\", queryString, parameters);\n+\n             // 3. prepare the search query\n             Query query = entityManager().createNativeQuery(queryString.toString());\n \n@@ -326,6 +330,36 @@ private StringBuilder buildOrderBy(final OrderBySupport obs) {\n         return orderBy;\n     }\n \n+    protected String key(final AttrSchemaType schemaType) {\n+        String key;\n+        switch (schemaType) {\n+            case Boolean:\n+                key = \"booleanValue\";\n+                break;\n+\n+            case Date:\n+                key = \"dateValue\";\n+                break;\n+\n+            case Double:\n+                key = \"doubleValue\";\n+                break;\n+\n+            case Long:\n+                key = \"longValue\";\n+                break;\n+\n+            case Binary:\n+                key = \"binaryValue\";\n+                break;\n+\n+            default:\n+                key = \"stringValue\";\n+        }\n+\n+        return key;\n+    }\n+\n     protected void parseOrderByForPlainSchema(\n             final SearchSupport svs,\n             final OrderBySupport obs,\n@@ -342,7 +376,7 @@ protected void parseOrderByForPlainSchema(\n \n             item.select = new StringBuilder().\n                     append(svs.asSearchViewSupport().uniqueAttr().alias).append('.').\n-                    append(svs.fieldName(schema.getType())).\n+                    append(key(schema.getType())).\n                     append(\" AS \").append(fieldName).toString();\n             item.where = new StringBuilder().\n                     append(svs.asSearchViewSupport().uniqueAttr().alias).\n@@ -352,7 +386,7 @@ protected void parseOrderByForPlainSchema(\n             obs.views.add(svs.asSearchViewSupport().attr());\n \n             item.select = new StringBuilder().\n-                    append(svs.asSearchViewSupport().attr().alias).append('.').append(svs.fieldName(schema.getType())).\n+                    append(svs.asSearchViewSupport().attr().alias).append('.').append(key(schema.getType())).\n                     append(\" AS \").append(fieldName).toString();\n             item.where = new StringBuilder().\n                     append(svs.asSearchViewSupport().attr().alias).\n@@ -844,7 +878,7 @@ private void fillAttrQuery(\n             // activate ignoreCase only for EQ and LIKE operators\n             boolean ignoreCase = AttributeCond.Type.ILIKE == cond.getType() || AttributeCond.Type.IEQ == cond.getType();\n \n-            String column = (cond instanceof AnyCond) ? cond.getSchema() : svs.fieldName(schema.getType());\n+            String column = (cond instanceof AnyCond) ? cond.getSchema() : key(schema.getType());\n             if ((schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) && ignoreCase) {\n                 column = \"LOWER (\" + column + \")\";\n             }"},{"sha":"84c1c914b584d08fea9d80b85bc0b37b9948e397","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -21,7 +21,6 @@\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n@@ -74,38 +73,6 @@ public SearchSupport(final AnyTypeKind anyTypeKind) {\n         this.anyTypeKind = anyTypeKind;\n     }\n \n-    public String fieldName(final AttrSchemaType attrSchemaType) {\n-        String result;\n-\n-        switch (attrSchemaType) {\n-            case Boolean:\n-                result = \"booleanvalue\";\n-                break;\n-\n-            case Date:\n-                result = \"datevalue\";\n-                break;\n-\n-            case Double:\n-                result = \"doublevalue\";\n-                break;\n-\n-            case Long:\n-                result = \"longvalue\";\n-                break;\n-\n-            case String:\n-            case Enum:\n-                result = \"stringvalue\";\n-                break;\n-\n-            default:\n-                result = null;\n-        }\n-\n-        return result;\n-    }\n-\n     public SearchView table() {\n         String result;\n "},{"sha":"4d8426c30abade83535028c082d563d6532ce7ac","filename":"core/persistence-jpa/src/main/resources/audit/audit_mysql_innodb.sql","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_mysql_innodb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_mysql_innodb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_mysql_innodb.sql?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -21,4 +21,4 @@ CREATE TABLE IF NOT EXISTS SYNCOPEAUDIT (\n   LOGGER VARCHAR(255) NOT NULL,\n   MESSAGE TEXT NOT NULL,\n   THROWABLE TEXT\n-) ENGINE=InnoDB\n+) ENGINE=InnoDB;"},{"sha":"26b1da947136bcdd74a7e91a5faf167faec89c9e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -90,6 +90,7 @@ public void saveInvalidKind() {\n             newType.setKey(\"new type\");\n             newType.setKind(AnyTypeKind.USER);\n             anyTypeDAO.save(newType);\n+            entityManager().flush();\n         });\n     }\n \n@@ -100,6 +101,7 @@ public void saveInvalidName() {\n             newType.setKey(\"group\");\n             newType.setKind(AnyTypeKind.ANY_OBJECT);\n             anyTypeDAO.save(newType);\n+            entityManager().flush();\n         });\n     }\n "},{"sha":"1fe29ab23ce97da5cc95312d877667af962b8bd0","filename":"fit/core-reference/pom.xml","status":"modified","additions":162,"deletions":2,"changes":164,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -646,7 +646,7 @@ under the License.\n             <filtering>true</filtering>\n           </resource>\n           <resource>\n-            <directory>${basedir}/../../core/persistence-jpa-json/src/test/resources/pgjsonb/domains</directory>\n+            <directory>${basedir}/../../core/persistence-jpa-json/src/test/resources/domains</directory>\n             <targetPath>${project.build.outputDirectory}/domains</targetPath>\n             <filtering>true</filtering>\n           </resource>\n@@ -761,7 +761,165 @@ under the License.\n         </testResources>\n       </build>\n     </profile>\n+\n+    <profile>\n+      <id>myjson-it</id>\n+\n+      <properties>\n+        <jdbcdriver.groupId>mysql</jdbcdriver.groupId>\n+        <jdbcdriver.artifactId>mysql-connector-java</jdbcdriver.artifactId>\n+      </properties>\n+\n+      <dependencies>\n+        <dependency>\n+          <groupId>org.apache.syncope.core</groupId>\n+          <artifactId>syncope-core-persistence-jpa-json</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n     \n+        <dependency>\n+          <groupId>mysql</groupId>\n+          <artifactId>mysql-connector-java</artifactId>\n+          <version>${jdbc.mysql.version}</version>\n+          <scope>test</scope>\n+        </dependency>\n+      </dependencies>\n+\n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-war-plugin</artifactId>\n+            <configuration>\n+              <packagingExcludes>WEB-INF/classes/domains/Two*</packagingExcludes>\n+            </configuration>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-antrun-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>remove-domain-Two</id>\n+                <phase>prepare-package</phase>\n+                <configuration>\n+                  <target>\n+                    <delete>\n+                      <fileset dir=\"${project.build.directory}/classes/domains\" includes=\"Two*\"/>\n+                    </delete>\n+                  </target>\n+                </configuration>\n+                <goals>\n+                  <goal>run</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>io.fabric8</groupId>\n+            <artifactId>docker-maven-plugin</artifactId>\n+            <configuration>\n+              <images>\n+                <image>\n+                  <name>mysql/mysql-server:${docker.mysql.version}</name>\n+                  <run>\n+                    <cmd>--skip-log-bin --server-id=1</cmd>\n+                    <env>\n+                      <MYSQL_ROOT_PASSWORD>password</MYSQL_ROOT_PASSWORD>\n+                      <MYSQL_DATABASE>syncope</MYSQL_DATABASE>\n+                      <MYSQL_USER>syncope</MYSQL_USER>\n+                      <MYSQL_PASSWORD>syncope</MYSQL_PASSWORD>\n+                    </env>\n+                    <ports>\n+                      <port>3306:3306</port>\n+                    </ports>\n+                    <wait>\n+                      <log>MySQL init process done. Ready for start up.</log>\n+                      <time>30000</time>\n+                    </wait>\n+                  </run>\n+                </image>\n+              </images>\n+            </configuration>\n+            <executions>\n+              <execution>\n+                <id>start-mysql</id>\n+                <phase>pre-integration-test</phase>\n+                <goals>\n+                  <goal>start</goal>\n+                </goals>\n+              </execution>\n+              <execution>\n+                <id>stop-mysql</id>\n+                <phase>post-integration-test</phase>\n+                <goals>\n+                  <goal>stop</goal>\n+                  <goal>remove</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>org.codehaus.cargo</groupId>\n+            <artifactId>cargo-maven2-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>start-container</id>\n+                <phase>pre-integration-test</phase>\n+                <goals>\n+                  <goal>start</goal>\n+                </goals>\n+              </execution>\n+              <execution>\n+                <id>stop-container</id>\n+                <phase>post-integration-test</phase>\n+                <goals>\n+                  <goal>stop</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+\n+        <resources>\n+          <resource>\n+            <directory>src/main/resources</directory>\n+            <filtering>true</filtering>\n+            <excludes>\n+              <exclude>provisioning.properties</exclude>\n+              <exclude>indexes.xml</exclude>\n+              <exclude>views.xml</exclude>\n+            </excludes>\n+          </resource>\n+          <resource>\n+            <directory>src/main/resources/myjson</directory>\n+            <filtering>true</filtering>\n+          </resource>\n+          <resource>\n+            <directory>${basedir}/../../core/persistence-jpa-json/src/test/resources/domains</directory>\n+            <targetPath>${project.build.directory}/classes/domains</targetPath>\n+            <filtering>true</filtering>\n+          </resource>\n+        </resources>\n+        <testResources>\n+          <testResource>\n+            <directory>${basedir}/../../core/persistence-jpa-json/src/main/resources/myjson</directory>\n+            <includes>\n+              <include>persistence.properties</include>\n+              <include>indexes.xml</include>\n+              <include>views.xml</include>\n+            </includes>            \n+          </testResource>\n+        </testResources>\n+      </build>\n+    </profile>\n+\n     <profile>\n       <id>mysql-it</id>\n \n@@ -789,9 +947,11 @@ under the License.\n             <configuration>\n               <images>\n                 <image>\n-                  <name>mysql/mysql-server:5.7</name>\n+                  <name>mysql/mysql-server:${docker.mysql.version}</name>\n                   <run>\n+                    <cmd>--skip-log-bin --server-id=1</cmd>\n                     <env>\n+                      <MYSQL_ROOT_PASSWORD>password</MYSQL_ROOT_PASSWORD>\n                       <MYSQL_DATABASE>syncope</MYSQL_DATABASE>\n                       <MYSQL_USER>syncope</MYSQL_USER>\n                       <MYSQL_PASSWORD>syncope</MYSQL_PASSWORD>"},{"sha":"d945b5a361ef395dbf05c798be0340b609c9adff","filename":"fit/core-reference/src/main/resources/myjson/domains/Master.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fdomains%2FMaster.properties?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+Master.driverClassName=com.mysql.cj.jdbc.Driver\n+Master.url=jdbc:mysql://localhost:3306/syncope?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8\n+Master.schema=\n+Master.username=syncope\n+Master.password=syncope\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB,timestampTypeName=DATETIME(3))\n+Master.orm=META-INF/spring-orm-myjson.xml\n+\n+Master.pool.maxActive=10\n+Master.pool.minIdle=2\n+\n+Master.audit.sql=audit_mysql_innodb.sql"},{"sha":"3883cb5e7b9d2ef6680b8c55cf13a5e2336e446b","filename":"fit/core-reference/src/main/resources/myjson/provisioning.properties","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fprovisioning.properties?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -0,0 +1,32 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+asyncConnectorFacadeExecutor.poolSize=10\n+\n+# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n+propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.queueCapacity=100\n+propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n+\n+userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager\n+groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\n+anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n+\n+quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n+quartz.sql=tables_mysql_innodb.sql\n+quartz.scheduler.idleWaitTime=5000\n+quartz.disableInstance=false"},{"sha":"f7a86136e4fa4964fa11dbc13ae473c85682ff24","filename":"fit/core-reference/src/main/resources/mysql/domains/Master.properties","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fdomains%2FMaster.properties?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -14,15 +14,15 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-Master.driverClassName=com.mysql.jdbc.Driver\n-Master.url=jdbc:mysql://localhost:3306/syncope?characterEncoding=UTF-8&useSSL=false&relaxAutoCommit=true\n+Master.driverClassName=com.mysql.cj.jdbc.Driver\n+Master.url=jdbc:mysql://localhost:3306/syncope?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8\n Master.schema=\n Master.username=syncope\n Master.password=syncope\n-Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB,timestampTypeName=DATETIME(3))\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB,dateFractionDigits=3)\n Master.orm=META-INF/spring-orm.xml\n \n Master.pool.maxActive=10\n Master.pool.minIdle=2\n \n-Master.audit.sql=audit.sql\n+Master.audit.sql=audit_mysql_innodb.sql"},{"sha":"0d0002b6c617a34b9274dafa9891144c80293cc1","filename":"fit/core-reference/src/main/resources/mysql/provisioning.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fprovisioning.properties?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -29,6 +29,6 @@ notificationManager=org.apache.syncope.core.provisioning.java.notification.Defau\n auditManager=org.apache.syncope.core.provisioning.java.DefaultAuditManager\n \n quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n-quartz.sql=tables_mysql.sql\n+quartz.sql=tables_mysql_innodb.sql\n quartz.scheduler.idleWaitTime=5000\n quartz.disableInstance=false"},{"sha":"a4a8905e5bb7b6cdbd9cb7a9f4a5383055be1b12","filename":"pom.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -515,10 +515,11 @@ under the License.\n     <tomcat.version>9.0.17</tomcat.version>\n \n     <docker.postgresql.version>11.2</docker.postgresql.version>\n+    <docker.mysql.version>8.0</docker.mysql.version>\n     <docker.mariadb.version>10.4</docker.mariadb.version>\n \n     <jdbc.postgresql.version>42.2.5</jdbc.postgresql.version>\n-    <jdbc.mysql.version>5.1.47</jdbc.mysql.version>\n+    <jdbc.mysql.version>8.0.13</jdbc.mysql.version>\n     <jdbc.mariadb.version>2.4.0</jdbc.mariadb.version>\n     <jdbc.mssql.version>7.2.1.jre</jdbc.mssql.version>\n "},{"sha":"871a25f090a46f669227523822a0d7cfe3e70412","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc","status":"modified","additions":101,"deletions":9,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc?ref=9a1ba6dcc47aa65ddacb990bd75d1bb68ace07af","patch":"@@ -118,10 +118,10 @@ database `syncope` fully accessible by user `syncope` with password `syncope`.\n \n Download\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa-json/src/main/resources/pgjsonb/domains/MasterContent.xml[MasterContent.xml^]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa-json/src/main/resources/domains/MasterContent.xml[MasterContent.xml^]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/core/persistence-jpa-json/src/main/resources/pgjsonb/domains/MasterContent.xml[MasterContent.xml^]\n+https://github.com/apache/syncope/blob/master/core/persistence-jpa-json/src/main/resources/domains/MasterContent.xml[MasterContent.xml^]\n endif::[]\n and save it under `core/src/main/resources/domains/`.\n \n@@ -143,17 +143,17 @@ then save both under `core/src/main/resources/`.\n \n Download\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa-json/src/test/resources/pgjsonb/domains/MasterContent.xml[MasterContent.xml^]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml[MasterContent.xml^]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/core/persistence-jpa-json/src/test/resources/pgjsonb/domains/MasterContent.xml[MasterContent.xml^]\n+https://github.com/apache/syncope/blob/master/core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml[MasterContent.xml^]\n endif::[]\n and save it under `core/src/test/resources/domains/`.\n \n ===== MySQL\n \n [NOTE]\n-Apache Syncope {docVersion} is verified with MySQL server >= 5.7 and JDBC driver >= {mysqlJDBC}.\n+Apache Syncope {docVersion} is verified with MySQL server >= 8.0 and JDBC driver >= {mysqlJDBC}.\n \n In `provisioning.properties`, replace as follows:\n \n@@ -169,12 +169,12 @@ for `quartz.sql` to `tables_mysql.sql`.\n In `domains/Master.properties` (for the `Master` domain), replace as follows:\n \n ....\n-Master.driverClassName=com.mysql.jdbc.Driver\n-Master.url=jdbc:mysql://localhost:3306/syncope?characterEncoding=UTF-8&relaxAutoCommit=true\n+Master.driverClassName=com.mysql.cj.jdbc.Driver\n+Master.url=jdbc:mysql://localhost:3306/syncope?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8\n Master.schema=\n Master.username=syncope\n Master.password=syncope\n-Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB,timestampTypeName=DATETIME(3))\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB,dateFractionDigits=3)\n Master.orm=META-INF/spring-orm.xml\n Master.audit.sql=audit_mysql_innodb.sql\n ....\n@@ -190,6 +190,98 @@ for `Master.audit` to `audit.sql`.\n This assumes that you have a MySQL instance running on localhost, listening on its default port 3306 with a database\n `syncope` fully accessible by user `syncope` with password `syncope`.\n \n+===== MySQL (JSON)\n+\n+[NOTE]\n+With the configurations reported below, Apache Syncope will leverage the\n+https://dev.mysql.com/doc/refman/8.0/en/json-table-functions.html[JSON_TABLE^] function.\n+\n+[CAUTION]\n+This MySQL feature does not appear yet to be production-ready, use it with caution.\n+\n+[NOTE]\n+Apache Syncope {docVersion} is verified with MySQL server >= 8.0 and JDBC driver >= {mysqlJDBC}.\n+\n+Add the following dependency to `core/pom.xml`:\n+\n+[source,xml,subs=\"verbatim,attributes\"]\n+----\n+<dependency>\n+  <groupId>org.apache.syncope.core</groupId>\n+  <artifactId>syncope-core-persistence-jpa-json</artifactId>\n+  <version>${syncope.version}</version>\n+</dependency>\n+----\n+\n+In `provisioning.properties`, replace as follows:\n+\n+....\n+quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n+quartz.sql=tables_mysql_innodb.sql\n+....\n+\n+[WARNING]\n+This assumes that the InnoDB engine is enabled in your MySQL instance - if this is not the case, then change the value\n+for `quartz.sql` to `tables_mysql.sql`.\n+\n+In `domains/Master.properties` (for the `Master` domain), replace as follows:\n+\n+....\n+Master.driverClassName=com.mysql.cj.jdbc.Driver\n+Master.url=jdbc:mysql://localhost:3306/syncope?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8\n+Master.schema=\n+Master.username=syncope\n+Master.password=syncope\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB,dateFractionDigits=3)\n+Master.orm=META-INF/spring-orm-myjson.xml\n+Master.audit.sql=audit_mysql_innodb.sql\n+....\n+\n+[CAUTION]\n+It is important to set the collation to `utf8_general_ci` after creation of `syncope` database.\n+\n+[WARNING]\n+This assumes that the InnoDB engine is enabled in your MySQL instance - if this is not the case, then change the value\n+for `Master.audit` to `audit.sql`.\n+\n+[WARNING]\n+This assumes that you have a MySQL instance running on localhost, listening on its default port 3306 with a database\n+`syncope` fully accessible by user `syncope` with password `syncope`.\n+\n+Download\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa-json/src/main/resources/domains/MasterContent.xml[MasterContent.xml^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/master/core/persistence-jpa-json/src/main/resources/domains/MasterContent.xml[MasterContent.xml^]\n+endif::[]\n+and save it under `core/src/main/resources/domains/`.\n+\n+Download\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa-json/src/main/resources/myjson/indexes.xml[indexes.xml^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/master/core/persistence-jpa-json/src/main/resources/myjson/indexes.xml[indexes.xml^]\n+endif::[]\n+and\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa-json/src/main/resources/myjson/views.xml[views.xml^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/master/core/persistence-jpa-json/src/main/resources/myjson/views.xml[views.xml^]\n+endif::[]\n+then save both under `core/src/main/resources/`.\n+\n+Download\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml[MasterContent.xml^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/master/core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml[MasterContent.xml^]\n+endif::[]\n+and save it under `core/src/test/resources/domains/`.\n+\n ===== MariaDB\n \n [NOTE]\n@@ -214,7 +306,7 @@ Master.url=jdbc:mariadb://localhost:3306/syncope?characterEncoding=UTF-8\n Master.schema=\n Master.username=syncope\n Master.password=syncope\n-Master.databasePlatform=org.apache.openjpa.jdbc.sql.MariaDBDictionary(blobTypeName=LONGBLOB,timestampTypeName=DATETIME(3))\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.MariaDBDictionary(blobTypeName=LONGBLOB,dateFractionDigits=3)\n Master.orm=META-INF/spring-orm.xml\n ....\n "}]}