{"sha":"4d71ff3c5d4d8f6df8fefb4647f79cd02dfd980d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRkNzFmZjNjNWQ0ZDhmNmRmOGZlZmI0NjQ3Zjc5Y2QwMmRmZDk4MGQ=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-20T12:59:00Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-20T12:59:00Z"},"message":"deleted class","tree":{"sha":"80875605568977870eb53435d8464ea52fdb16cb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/80875605568977870eb53435d8464ea52fdb16cb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4d71ff3c5d4d8f6df8fefb4647f79cd02dfd980d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d71ff3c5d4d8f6df8fefb4647f79cd02dfd980d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4d71ff3c5d4d8f6df8fefb4647f79cd02dfd980d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d71ff3c5d4d8f6df8fefb4647f79cd02dfd980d/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"f8d46d3cf1570cd46ed3b2cac368ef32dfd542ae","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f8d46d3cf1570cd46ed3b2cac368ef32dfd542ae","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f8d46d3cf1570cd46ed3b2cac368ef32dfd542ae"}],"stats":{"total":271,"additions":0,"deletions":271},"files":[{"sha":"4c6caf56fd41de6d082887ac1514655e694a7955","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/LoggerCommand.java","status":"removed","additions":0,"deletions":271,"changes":271,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f8d46d3cf1570cd46ed3b2cac368ef32dfd542ae/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f8d46d3cf1570cd46ed3b2cac368ef32dfd542ae/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java?ref=f8d46d3cf1570cd46ed3b2cac368ef32dfd542ae","patch":"@@ -1,271 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.ws.WebServiceException;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.cli.Command;\n-import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.Messages;\n-import org.apache.syncope.client.cli.util.CommandUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.common.rest.api.service.LoggerService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-@Command(name = \"logger\")\n-public class LoggerCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(LoggerCommand.class);\n-\n-    private static final String HELP_MESSAGE = \"Usage: logger [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    --help \\n\"\n-            + \"    --list \\n\"\n-            + \"    --read \\n\"\n-            + \"       Syntax: --read {LOG-NAME} {LOG-NAME} [...]\\n\"\n-            + \"    --update \\n\"\n-            + \"       Syntax: --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\\n\"\n-            + \"    --update-all \\n\"\n-            + \"       Syntax: --update-all {LOG-LEVEL} \\n\"\n-            + \"    --create \\n\"\n-            + \"       Syntax: --create {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\\n\"\n-            + \"    --delete \\n\"\n-            + \"       Syntax: --delete {LOG-NAME} {LOG-NAME} [...]\";\n-\n-    @Override\n-    public void execute(final Input input) {\n-        LOG.debug(\"Option: {}\", input.getOption());\n-        LOG.debug(\"Parameters:\");\n-        for (final String parameter : input.getParameters()) {\n-            LOG.debug(\"   > \" + parameter);\n-        }\n-\n-        final String[] parameters = input.getParameters();\n-\n-        if (StringUtils.isBlank(input.getOption())) {\n-            input.setOption(Options.HELP.getOptionName());\n-        }\n-\n-        final LoggerService loggerService = SyncopeServices.get(LoggerService.class);\n-        switch (Options.fromName(input.getOption())) {\n-            case LIST:\n-                try {\n-                    for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n-                        System.out.println(\" - \" + loggerTO.getKey() + \" -> \" + loggerTO.getLevel());\n-                        System.out.println(\"\");\n-                    }\n-                } catch (final SyncopeClientException ex) {\n-                    Messages.printMessage(\"Error: \" + ex.getMessage());\n-                }\n-                break;\n-            case READ:\n-                final String readErrorMessage = \"logger --read {LOG-NAME} {LOG-NAME} [...]\";\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, parameter);\n-                            System.out.println(\"\\n - Logger\");\n-                            System.out.println(\"   - key: \" + loggerTO.getKey());\n-                            System.out.println(\"   - level: \" + loggerTO.getLevel());\n-                            System.out.println(\"\");\n-                        } catch (final SyncopeClientException | WebServiceException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Logger\", parameter);\n-                            } else {\n-                                Messages.printMessage(\"Error: \" + ex.getMessage());\n-                            }\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(readErrorMessage);\n-                }\n-                break;\n-            case UPDATE:\n-                final String updateErrorMessage = \"logger --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\";\n-\n-                if (parameters.length >= 1) {\n-                    Input.PairParameter pairParameter;\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            pairParameter = input.toPairParameter(parameter);\n-                            final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, pairParameter.getKey());\n-                            loggerTO.setLevel(LoggerLevel.valueOf(pairParameter.getValue()));\n-                            loggerService.update(LoggerType.LOG, loggerTO);\n-                            System.out.\n-                                    println(\"\\n - Logger \" + loggerTO.getKey() + \" updated\");\n-                            System.out.println(\"   - new level: \" + loggerTO.getLevel());\n-                            System.out.println(\"\");\n-                        } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n-                            if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                                Messages.printTypeNotValidMessage(\n-                                        \"logger level\", input.firstParameter(),\n-                                        CommandUtils.fromEnumToArray(LoggerLevel.class));\n-                            } else if (\"Parameter syntax error!\".equalsIgnoreCase(ex.getMessage())) {\n-                                Messages.printMessage(ex.getMessage(), updateErrorMessage);\n-                            } else if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Logger\", parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage(), updateErrorMessage);\n-                            }\n-                            break;\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(updateErrorMessage);\n-                }\n-                break;\n-            case UPDATE_ALL:\n-                final String updateAllErrorMessage = \"logger --update-all {LOG-LEVEL}\";\n-\n-                if (parameters.length == 1) {\n-                    for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n-                        try {\n-                            loggerTO.setLevel(LoggerLevel.valueOf(parameters[0]));\n-                            loggerService.update(LoggerType.LOG, loggerTO);\n-                            System.out.\n-                                    println(\"\\n - Logger \" + loggerTO.getKey() + \" updated\");\n-                            System.out.println(\"   - new level: \" + loggerTO.getLevel());\n-                            System.out.println(\"\");\n-                        } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n-                            if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                                Messages.printTypeNotValidMessage(\n-                                        \"logger level\", input.firstParameter(),\n-                                        CommandUtils.fromEnumToArray(LoggerLevel.class));\n-                            } else {\n-                                Messages.printMessage(ex.getMessage(), updateAllErrorMessage);\n-                            }\n-                            break;\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(updateAllErrorMessage);\n-                }\n-                break;\n-            case CREATE:\n-                final String createErrorMessage = \"logger --create {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\";\n-\n-                if (parameters.length >= 1) {\n-                    Input.PairParameter pairParameter;\n-                    LoggerTO loggerTO;\n-                    for (final String parameter : parameters) {\n-                        loggerTO = new LoggerTO();\n-                        try {\n-                            pairParameter = input.toPairParameter(parameter);\n-                            loggerTO.setKey(pairParameter.getKey());\n-                            loggerTO.setLevel(LoggerLevel.valueOf(pairParameter.getValue()));\n-                            loggerService.update(LoggerType.LOG, loggerTO);\n-                            System.out.\n-                                    println(\"\\n - Logger \" + loggerTO.getKey() + \" updated\");\n-                            System.out.println(\"   - level: \" + loggerTO.getLevel());\n-                            System.out.println(\"\");\n-                        } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n-                            Messages.printTypeNotValidMessage(\n-                                    \"logger level\", input.firstParameter(),\n-                                    CommandUtils.fromEnumToArray(LoggerLevel.class));\n-                            break;\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(createErrorMessage);\n-                }\n-                break;\n-            case DELETE:\n-                final String deleteErrorMessage = \"logger --delete {LOG-NAME} {LOG-NAME} [...]\";\n-\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            loggerService.delete(LoggerType.LOG, parameter);\n-                            Messages.printDeletedMessage(\"Logger\", parameter);\n-                        } catch (final WebServiceException | SyncopeClientException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Logger\", parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(deleteErrorMessage);\n-                }\n-                break;\n-            case HELP:\n-                System.out.println(HELP_MESSAGE);\n-                break;\n-            default:\n-                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n-        }\n-    }\n-\n-    @Override\n-    public String getHelpMessage() {\n-        return HELP_MESSAGE;\n-    }\n-\n-    private enum Options {\n-\n-        HELP(\"--help\"),\n-        LIST(\"--list\"),\n-        READ(\"--read\"),\n-        UPDATE(\"--update\"),\n-        UPDATE_ALL(\"--update-all\"),\n-        CREATE(\"--create\"),\n-        DELETE(\"--delete\");\n-\n-        private final String optionName;\n-\n-        Options(final String optionName) {\n-            this.optionName = optionName;\n-        }\n-\n-        public String getOptionName() {\n-            return optionName;\n-        }\n-\n-        public boolean equalsOptionName(final String otherName) {\n-            return (otherName == null) ? false : optionName.equals(otherName);\n-        }\n-\n-        public static Options fromName(final String name) {\n-            Options optionToReturn = HELP;\n-            for (final Options option : Options.values()) {\n-                if (option.equalsOptionName(name)) {\n-                    optionToReturn = option;\n-                }\n-            }\n-            return optionToReturn;\n-        }\n-\n-        public static List<String> toList() {\n-            final List<String> options = new ArrayList<>();\n-            for (final Options value : values()) {\n-                options.add(value.getOptionName());\n-            }\n-            return options;\n-        }\n-    }\n-\n-}"}]}