{"sha":"dd88efbd0ec6fabb98728a84a6fe103f285433d7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRkODhlZmJkMGVjNmZhYmI5ODcyOGE4NGE2ZmUxMDNmMjg1NDMzZDc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-06-05T15:11:22Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-06-05T15:11:22Z"},"message":"[SYNCOPE-666] All tests are green, time to add more","tree":{"sha":"eea1d8d6d13df1eb6a786de5f56b480bd3103edf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/eea1d8d6d13df1eb6a786de5f56b480bd3103edf"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dd88efbd0ec6fabb98728a84a6fe103f285433d7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dd88efbd0ec6fabb98728a84a6fe103f285433d7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dd88efbd0ec6fabb98728a84a6fe103f285433d7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dd88efbd0ec6fabb98728a84a6fe103f285433d7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d8c9479dd1f14d8af8f2d5bd6ded992c40e2cfe6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d8c9479dd1f14d8af8f2d5bd6ded992c40e2cfe6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d8c9479dd1f14d8af8f2d5bd6ded992c40e2cfe6"}],"stats":{"total":4969,"additions":3540,"deletions":1429},"files":[{"sha":"0e6f5c43802c8a33ad0231a15cdee639e5474d9e","filename":".travis.yml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/.travis.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/.travis.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.travis.yml?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,7 +19,6 @@ jdk:\n # default install is mvn install --quiet -DskipTests=true\n install: mvn --show-version --quiet -P all,skipTests\n #invoker.streamLogs: we cannot access to log files through Travis web ui, so display everything in the console\n-#script: mvn --show-version --quiet clean install -Dinvoker.streamLogs=true\n-script: mvn --show-version --quiet -PskipTests -Dinvoker.streamLogs=true\n+script: mvn --show-version --quiet clean install -Dinvoker.streamLogs=true\n notifications:\n   webhooks: http://rovere.tirasa.net/cgi-bin/travis.cgi"},{"sha":"e6f8488ca86447f02694cc57b8c3376533b4fcf4","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -172,7 +172,7 @@ public boolean check(final ResourceTO resourceTO) {\n         try {\n             check = getService(ResourceService.class).check(resourceTO);\n         } catch (Exception e) {\n-            LOG.error(\"Connector not found {}\", resourceTO.getConnectorId(), e);\n+            LOG.error(\"Connector not found {}\", resourceTO.getConnector(), e);\n         }\n \n         return check;"},{"sha":"e8bcedbd37cf40c15396e314193eebc841890238","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -29,13 +29,17 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.mod.AnyObjectMod;\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.ReferenceMod;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n \n /**\n@@ -190,6 +194,63 @@ private static void diff(\n         }\n     }\n \n+    /**\n+     * Calculate modifications needed by first in order to be equal to second.\n+     *\n+     * @param updated updated AnyObjectTO\n+     * @param original original AnyObjectTO\n+     * @return AnyObjectMod containing differences\n+     */\n+    public static AnyObjectMod diff(final AnyObjectTO updated, final AnyObjectTO original) {\n+        return diff(updated, original, false);\n+    }\n+\n+    /**\n+     * Calculate modifications needed by first in order to be equal to second.\n+     *\n+     * @param updated updated AnyObjectTO\n+     * @param original original AnyObjectTO\n+     * @param incremental perform incremental diff (without removing existing info)\n+     * @return AnyObjectMod containing differences\n+     */\n+    public static AnyObjectMod diff(final AnyObjectTO updated, final AnyObjectTO original, final boolean incremental) {\n+        AnyObjectMod result = new AnyObjectMod();\n+\n+        diff(updated, original, result, incremental);\n+\n+        // 1. relationships\n+        Map<Long, RelationshipTO> updatedRels = updated.getRelationshipMap();\n+        Map<Long, RelationshipTO> originalRels = original.getRelationshipMap();\n+\n+        for (Map.Entry<Long, RelationshipTO> entry : updatedRels.entrySet()) {\n+            if (!originalRels.containsKey(entry.getKey())) {\n+                result.getRelationshipsToAdd().add(entry.getKey());\n+            }\n+        }\n+        if (!incremental) {\n+            Set<Long> originalGroups = new HashSet<>(originalRels.keySet());\n+            originalGroups.removeAll(updatedRels.keySet());\n+            result.getRelationshipsToRemove().addAll(originalGroups);\n+        }\n+\n+        // 2. memberships\n+        Map<Long, MembershipTO> updatedMembs = updated.getMembershipMap();\n+        Map<Long, MembershipTO> originalMembs = original.getMembershipMap();\n+\n+        for (Map.Entry<Long, MembershipTO> entry : updatedMembs.entrySet()) {\n+            if (!originalMembs.containsKey(entry.getKey())) {\n+                result.getMembershipsToAdd().add(entry.getKey());\n+            }\n+        }\n+        if (!incremental) {\n+            Set<Long> originalGroups = new HashSet<>(originalMembs.keySet());\n+            originalGroups.removeAll(updatedMembs.keySet());\n+            result.getMembershipsToRemove().addAll(originalGroups);\n+        }\n+\n+        return result;\n+    }\n+\n     /**\n      * Calculate modifications needed by first in order to be equal to second.\n      *\n@@ -248,6 +309,36 @@ public static UserMod diff(final UserTO updated, final UserTO original, final bo\n         result.getRolesToRemove().addAll(CollectionUtils.subtract(original.getRoles(), updated.getRoles()));\n         result.getRolesToAdd().addAll(CollectionUtils.subtract(updated.getRoles(), original.getRoles()));\n \n+        // 5. relationships\n+        Map<Long, RelationshipTO> updatedRels = updated.getRelationshipMap();\n+        Map<Long, RelationshipTO> originalRels = original.getRelationshipMap();\n+\n+        for (Map.Entry<Long, RelationshipTO> entry : updatedRels.entrySet()) {\n+            if (!originalRels.containsKey(entry.getKey())) {\n+                result.getRelationshipsToAdd().add(entry.getKey());\n+            }\n+        }\n+        if (!incremental) {\n+            Set<Long> originalGroups = new HashSet<>(originalRels.keySet());\n+            originalGroups.removeAll(updatedRels.keySet());\n+            result.getRelationshipsToRemove().addAll(originalGroups);\n+        }\n+\n+        // 6. memberships\n+        Map<Long, MembershipTO> updatedMembs = updated.getMembershipMap();\n+        Map<Long, MembershipTO> originalMembs = original.getMembershipMap();\n+\n+        for (Map.Entry<Long, MembershipTO> entry : updatedMembs.entrySet()) {\n+            if (!originalMembs.containsKey(entry.getKey())) {\n+                result.getMembershipsToAdd().add(entry.getKey());\n+            }\n+        }\n+        if (!incremental) {\n+            Set<Long> originalGroups = new HashSet<>(originalMembs.keySet());\n+            originalGroups.removeAll(updatedMembs.keySet());\n+            result.getMembershipsToRemove().addAll(originalGroups);\n+        }\n+\n         return result;\n     }\n "},{"sha":"ebdc5ae1e170d6164a4805c160bbb35e6bb0d17b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeClientCompositeException.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientCompositeException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientCompositeException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientCompositeException.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -21,6 +21,8 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n \n public class SyncopeClientCompositeException extends SyncopeClientException {\n@@ -66,7 +68,17 @@ public boolean addException(final SyncopeClientException exception) {\n                     + ClientExceptionType.class.getName() + \" set\");\n         }\n \n-        return exceptions.add(exception);\n+        SyncopeClientException alreadyAdded = CollectionUtils.find(exceptions, new Predicate<SyncopeClientException>() {\n+\n+            @Override\n+            public boolean evaluate(final SyncopeClientException ex) {\n+                return ex.getType() == exception.getType();\n+            }\n+        });\n+\n+        return alreadyAdded == null\n+                ? exceptions.add(exception)\n+                : alreadyAdded.getElements().addAll(exception.getElements());\n     }\n \n     @Override"},{"sha":"f17d5e5a65e70d99f297ff41427004e24d7752e4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeClientException.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientException.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.common.lib;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.HashSet;\n+import java.util.Set;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n \n public class SyncopeClientException extends RuntimeException {\n@@ -28,7 +28,7 @@ public class SyncopeClientException extends RuntimeException {\n \n     private ClientExceptionType type;\n \n-    private final List<String> elements = new ArrayList<>();\n+    private final Set<String> elements = new HashSet<>();\n \n     public static SyncopeClientException build(final ClientExceptionType type) {\n         if (type == ClientExceptionType.Composite) {\n@@ -66,7 +66,7 @@ public final void setType(final ClientExceptionType type) {\n         this.type = type;\n     }\n \n-    public List<String> getElements() {\n+    public Set<String> getElements() {\n         return elements;\n     }\n "},{"sha":"2d306126110443ad0b543947d43d3b415463d09a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/jaxb/GenericMapEntryType.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapEntryType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapEntryType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapEntryType.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2011 John Yeary <jyeary@bluelotussoftware.com>.\n+ * Copyright 2011 Bluelotus Software, LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * $Id: MapEntryType.java 399 2011-12-03 04:22:50Z jyeary $\n+ */\n+package org.apache.syncope.common.lib.jaxb;\n+\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+\n+@XmlAccessorType(XmlAccessType.PROPERTY)\n+public class GenericMapEntryType<K, V> {\n+\n+    private K key;\n+\n+    private V value;\n+\n+    public GenericMapEntryType() {\n+    }\n+\n+    public GenericMapEntryType(final Map.Entry<K, V> e) {\n+        key = e.getKey();\n+        value = e.getValue();\n+    }\n+\n+    @XmlElement\n+    public K getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final K key) {\n+        this.key = key;\n+    }\n+\n+    @XmlElement\n+    public V getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(final V value) {\n+        this.value = value;\n+    }\n+}"},{"sha":"491a860e674f07cb92b74d2c34a1c0a1caf77ac7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/jaxb/GenericMapType.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapType.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2011 John Yeary <jyeary@bluelotussoftware.com>.\n+ * Copyright 2011 Bluelotus Software, LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * $Id: MapType.java 399 2011-12-03 04:22:50Z jyeary $\n+ */\n+package org.apache.syncope.common.lib.jaxb;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class GenericMapType<K, V> {\n+\n+    private final List<GenericMapEntryType<K, V>> entry = new ArrayList<>();\n+\n+    public GenericMapType() {\n+    }\n+\n+    public GenericMapType(final Map<K, V> map) {\n+        for (Map.Entry<K, V> e : map.entrySet()) {\n+            entry.add(new GenericMapEntryType<>(e));\n+        }\n+    }\n+\n+    public List<GenericMapEntryType<K, V>> getEntry() {\n+        return entry;\n+    }\n+\n+    public void setEntry(final List<GenericMapEntryType<K, V>> entry) {\n+        this.entry.clear();\n+        if (entry != null) {\n+            this.entry.addAll(entry);\n+        }\n+    }\n+}"},{"sha":"1b10d5fc89796f024ede1353dd61ca7b4b76ae78","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/jaxb/XmlGenericMapAdapter.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FXmlGenericMapAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FXmlGenericMapAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FXmlGenericMapAdapter.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2011 John Yeary <jyeary@bluelotussoftware.com>.\n+ * Copyright 2011 Bluelotus Software, LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * $Id: XmlGenericMapAdapter.java 399 2011-12-03 04:22:50Z jyeary $\n+ */\n+package org.apache.syncope.common.lib.jaxb;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+\n+public class XmlGenericMapAdapter<K, V> extends XmlAdapter<GenericMapType<K, V>, Map<K, V>> {\n+\n+    @Override\n+    public Map<K, V> unmarshal(final GenericMapType<K, V> v) throws Exception {\n+        Map<K, V> map = new HashMap<>();\n+\n+        for (GenericMapEntryType<K, V> mapEntryType : v.getEntry()) {\n+            map.put(mapEntryType.getKey(), mapEntryType.getValue());\n+        }\n+\n+        return map;\n+    }\n+\n+    @Override\n+    public GenericMapType<K, V> marshal(final Map<K, V> v) throws Exception {\n+        GenericMapType<K, V> mapType = new GenericMapType<>();\n+\n+        for (Map.Entry<K, V> entry : v.entrySet()) {\n+            GenericMapEntryType<K, V> mapEntryType = new GenericMapEntryType<>();\n+            mapEntryType.setKey(entry.getKey());\n+            mapEntryType.setValue(entry.getValue());\n+            mapType.getEntry().add(mapEntryType);\n+        }\n+\n+        return mapType;\n+    }\n+}"},{"sha":"e5fcb85f7835c26ed2e8784467126e1273fda582","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/AnyMod.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyMod.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -35,6 +35,10 @@ public abstract class AnyMod extends AbstractBaseBean {\n \n     private String realm;\n \n+    protected final Set<String> auxClassesToAdd = new HashSet<>();\n+\n+    protected final Set<String> auxClassesToRemove = new HashSet<>();\n+\n     protected final Set<AttrMod> plainAttrsToUpdate = new HashSet<>();\n \n     protected final Set<String> plainAttrsToRemove = new HashSet<>();\n@@ -67,6 +71,20 @@ public void setRealm(final String realm) {\n         this.realm = realm;\n     }\n \n+    @XmlElementWrapper(name = \"auxClassesToAdd\")\n+    @XmlElement(name = \"class\")\n+    @JsonProperty(\"auxClassesToAdd\")\n+    public Set<String> getAuxClassesToAdd() {\n+        return auxClassesToAdd;\n+    }\n+\n+    @XmlElementWrapper(name = \"auxClassesToRemove\")\n+    @XmlElement(name = \"class\")\n+    @JsonProperty(\"auxClassesToRemove\")\n+    public Set<String> getAuxClassesToRemove() {\n+        return auxClassesToRemove;\n+    }\n+\n     @XmlElementWrapper(name = \"plainAttrsToRemove\")\n     @XmlElement(name = \"attribute\")\n     @JsonProperty(\"plainAttrsToRemove\")"},{"sha":"afc459e938ba5fe80f4083b475959a7a2e7d57fe","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/UserReportletConf.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -44,6 +44,7 @@ public enum Feature {\n         changePwdDate,\n         passwordHistorySize,\n         failedLoginCount,\n+        relationships,\n         memberships,\n         resources\n "},{"sha":"6443eea23ac817036df7bc371e9daced8531f493","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SearchableFields.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -25,10 +25,7 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n public final class SearchableFields {\n@@ -38,11 +35,7 @@ public final class SearchableFields {\n     };\n \n     public static List<String> get(final AnyTypeKind anyTypeKind) {\n-        return get(anyTypeKind == AnyTypeKind.USER\n-                ? UserTO.class\n-                : anyTypeKind == AnyTypeKind.GROUP\n-                        ? GroupTO.class\n-                        : AnyObjectTO.class);\n+        return get(anyTypeKind.getToClass());\n     }\n \n     public static List<String> get(final Class<? extends AnyTO> anyRef) {"},{"sha":"cd63bcdd6b842f43d12d577cf4e31ce23ec581bf","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractProvisioningTaskTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractProvisioningTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractProvisioningTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractProvisioningTaskTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.HashSet;\n+import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n@@ -50,7 +50,7 @@ public class AbstractProvisioningTaskTO extends SchedTaskTO {\n \n     private MatchingRule matchingRule;\n \n-    private final List<String> actionsClassNames = new ArrayList<>();\n+    private final Set<String> actionsClassNames = new HashSet<>();\n \n     public String getResource() {\n         return resource;\n@@ -95,7 +95,7 @@ public void setSyncStatus(final boolean syncStatus) {\n     @XmlElementWrapper(name = \"actionsClassNames\")\n     @XmlElement(name = \"actionsClassName\")\n     @JsonProperty(\"actionsClassNames\")\n-    public List<String> getActionsClassNames() {\n+    public Set<String> getActionsClassNames() {\n         return actionsClassNames;\n     }\n "},{"sha":"f5599de55db414ec88b894167ef465d920075256","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java","status":"modified","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,6 +18,15 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n@@ -27,4 +36,52 @@ public class AnyObjectTO extends AnyTO {\n \n     private static final long serialVersionUID = 8841697496476959639L;\n \n+    private final List<RelationshipTO> relationships = new ArrayList<>();\n+\n+    private final List<MembershipTO> memberships = new ArrayList<>();\n+\n+    private final List<Long> dynGroups = new ArrayList<>();\n+\n+    @XmlElementWrapper(name = \"relationships\")\n+    @XmlElement(name = \"relationship\")\n+    @JsonProperty(\"relationships\")\n+    public List<RelationshipTO> getRelationships() {\n+        return relationships;\n+    }\n+\n+    @JsonIgnore\n+    public Map<Long, RelationshipTO> getRelationshipMap() {\n+        Map<Long, RelationshipTO> result = new HashMap<>(getRelationships().size());\n+        for (RelationshipTO membership : getRelationships()) {\n+            result.put(membership.getRightKey(), membership);\n+        }\n+        result = Collections.unmodifiableMap(result);\n+\n+        return result;\n+    }\n+\n+    @XmlElementWrapper(name = \"memberships\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"memberships\")\n+    public List<MembershipTO> getMemberships() {\n+        return memberships;\n+    }\n+\n+    @JsonIgnore\n+    public Map<Long, MembershipTO> getMembershipMap() {\n+        Map<Long, MembershipTO> result = new HashMap<>(getMemberships().size());\n+        for (MembershipTO membership : getMemberships()) {\n+            result.put(membership.getRightKey(), membership);\n+        }\n+        result = Collections.unmodifiableMap(result);\n+\n+        return result;\n+    }\n+\n+    @XmlElementWrapper(name = \"dynGroups\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"dynGroups\")\n+    public List<Long> getDynGroups() {\n+        return dynGroups;\n+    }\n }"},{"sha":"56b1c445966334b464f054d0d7d461f0c58fc940","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"modified","additions":15,"deletions":44,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -20,6 +20,7 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -30,9 +31,14 @@\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n \n+@XmlRootElement(name = \"any\")\n @XmlType\n+@XmlSeeAlso({ UserTO.class, GroupTO.class, AnyObjectTO.class })\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n public abstract class AnyTO extends ConnObjectTO {\n \n     private static final long serialVersionUID = -754311920679872084L;\n@@ -45,6 +51,8 @@ public abstract class AnyTO extends ConnObjectTO {\n \n     private String status;\n \n+    private final List<String> auxClasses = new ArrayList<>();\n+\n     private final Set<AttrTO> derAttrs = new LinkedHashSet<>();\n \n     private final Set<AttrTO> virAttrs = new LinkedHashSet<>();\n@@ -53,12 +61,6 @@ public abstract class AnyTO extends ConnObjectTO {\n \n     private final List<PropagationStatus> propagationStatusTOs = new ArrayList<>();\n \n-    private final List<RelationshipTO> relationships = new ArrayList<>();\n-\n-    private final List<MembershipTO> memberships = new ArrayList<>();\n-\n-    private final List<Long> dynGroups = new ArrayList<>();\n-\n     public long getKey() {\n         return key;\n     }\n@@ -91,6 +93,13 @@ public void setStatus(final String status) {\n         this.status = status;\n     }\n \n+    @XmlElementWrapper(name = \"auxClasses\")\n+    @XmlElement(name = \"class\")\n+    @JsonProperty(\"auxClasses\")\n+    public List<String> getAuxClasses() {\n+        return auxClasses;\n+    }\n+\n     @XmlElementWrapper(name = \"derAttrs\")\n     @XmlElement(name = \"attribute\")\n     @JsonProperty(\"derAttrs\")\n@@ -139,42 +148,4 @@ public List<PropagationStatus> getPropagationStatusTOs() {\n         return propagationStatusTOs;\n     }\n \n-    @XmlElementWrapper(name = \"relationships\")\n-    @XmlElement(name = \"relationship\")\n-    @JsonProperty(\"relationships\")\n-    public List<RelationshipTO> getRelationships() {\n-        return relationships;\n-    }\n-\n-    @XmlElementWrapper(name = \"memberships\")\n-    @XmlElement(name = \"membership\")\n-    @JsonProperty(\"memberships\")\n-    public List<MembershipTO> getMemberships() {\n-        return memberships;\n-    }\n-\n-    @JsonIgnore\n-    public Map<Long, MembershipTO> getMembershipMap() {\n-        Map<Long, MembershipTO> result;\n-\n-        if (getMemberships() == null) {\n-            result = Collections.emptyMap();\n-        } else {\n-            result = new HashMap<>(getMemberships().size());\n-            for (MembershipTO membership : getMemberships()) {\n-                result.put(membership.getRightKey(), membership);\n-            }\n-            result = Collections.unmodifiableMap(result);\n-        }\n-\n-        return result;\n-    }\n-\n-    @XmlElementWrapper(name = \"dynGroups\")\n-    @XmlElement(name = \"role\")\n-    @JsonProperty(\"dynGroups\")\n-    public List<Long> getDynGroups() {\n-        return dynGroups;\n-    }\n-\n }"},{"sha":"1afbe4d8f54fb44715893d175a2a0a25a6fc6fc3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTypeClassTO.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeClassTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeClassTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeClassTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"anyTypeClass\")\n+@XmlType\n+public class AnyTypeClassTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -591757688607551266L;\n+\n+    private String name;\n+\n+    private final List<String> plainSchemas = new ArrayList<>();\n+\n+    private final List<String> derSchemas = new ArrayList<>();\n+\n+    private final List<String> virSchemas = new ArrayList<>();\n+\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    public void setKey(final String key) {\n+        this.name = key;\n+    }\n+\n+    @XmlElementWrapper(name = \"plainSchemas\")\n+    @XmlElement(name = \"schema\")\n+    @JsonProperty(\"plainSchemas\")\n+    public List<String> getPlainSchemas() {\n+        return plainSchemas;\n+    }\n+\n+    @XmlElementWrapper(name = \"derSchemas\")\n+    @XmlElement(name = \"schema\")\n+    @JsonProperty(\"derSchemas\")\n+    public List<String> getDerSchemas() {\n+        return derSchemas;\n+    }\n+\n+    @XmlElementWrapper(name = \"virSchemas\")\n+    @XmlElement(name = \"schema\")\n+    @JsonProperty(\"virSchemas\")\n+    public List<String> getVirSchemas() {\n+        return virSchemas;\n+    }\n+\n+}"},{"sha":"9618bf5f680e3d74d1f7f66cceea9d612c45b2fe","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTypeTO.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+\n+@XmlRootElement(name = \"anyType\")\n+@XmlType\n+public class AnyTypeTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 6771657557616874373L;\n+\n+    private String name;\n+\n+    private AnyTypeKind kind;\n+\n+    private final List<String> classes = new ArrayList<>();\n+\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    public void setKey(final String key) {\n+        this.name = key;\n+    }\n+\n+    public AnyTypeKind getKind() {\n+        return kind;\n+    }\n+\n+    public void setKind(final AnyTypeKind kind) {\n+        this.kind = kind;\n+    }\n+\n+    @XmlElementWrapper(name = \"classes\")\n+    @XmlElement(name = \"class\")\n+    @JsonProperty(\"classes\")\n+    public List<String> getClasses() {\n+        return classes;\n+    }\n+\n+}"},{"sha":"cf385b4b9622b474eff7fac255b076e506164703","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AttrTO.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -41,21 +41,12 @@ public class AttrTO extends AbstractBaseBean {\n     /**\n      * Set of (string) values of this attribute.\n      */\n-    private final List<String> values;\n+    private final List<String> values = new ArrayList<>();\n \n     /**\n      * Whether this attribute is read-only or not.\n      */\n-    private boolean readonly;\n-\n-    /**\n-     * Default constructor.\n-     */\n-    public AttrTO() {\n-        super();\n-        values = new ArrayList<String>();\n-        readonly = false;\n-    }\n+    private boolean readonly = false;\n \n     /**\n      * @return the name of the schema that this attribute is referring to"},{"sha":"9b44b3f7709f0500da114b6f6a7b268c08afc12f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkActionResult.java","status":"modified","additions":15,"deletions":73,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -25,15 +25,18 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n import javax.xml.bind.annotation.XmlEnum;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n \n @XmlRootElement(name = \"bulkActionResult\")\n @XmlType\n+@XmlAccessorType(XmlAccessType.FIELD)\n public class BulkActionResult extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 2868894178821778133L;\n@@ -52,86 +55,25 @@ public enum Status {\n \n     }\n \n-    private final List<Result> results = new ArrayList<>();\n-\n-    @XmlElementWrapper(name = \"result\")\n-    @XmlElement(name = \"item\")\n-    @JsonProperty(\"result\")\n-    public List<Result> getResult() {\n-        return results;\n-    }\n-\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n     @JsonIgnore\n-    public void add(final Object id, final Status status) {\n-        if (id != null) {\n-            results.add(new Result(id.toString(), status));\n-        }\n-    }\n+    private final Map<String, Status> results = new HashMap<>();\n \n-    @JsonIgnore\n-    public void add(final Object id, final String status) {\n-        if (id != null) {\n-            results.add(new Result(id.toString(), Status.valueOf(status.toUpperCase())));\n-        }\n-    }\n-\n-    @JsonIgnore\n-    public Map<String, Status> getResultMap() {\n-        final Map<String, Status> res = new HashMap<>();\n-\n-        for (Result result : results) {\n-            res.put(result.getKey(), result.getValue());\n-        }\n-\n-        return Collections.unmodifiableMap(res);\n+    @JsonProperty\n+    public Map<String, Status> getResults() {\n+        return results;\n     }\n \n     @JsonIgnore\n     public List<String> getResultByStatus(final Status status) {\n-        final List<String> res = new ArrayList<>();\n+        final List<String> result = new ArrayList<>();\n \n-        for (Result result : results) {\n-            if (result.getValue() == status) {\n-                res.add(result.getKey());\n+        for (Map.Entry<String, Status> entry : results.entrySet()) {\n+            if (entry.getValue() == status) {\n+                result.add(entry.getKey());\n             }\n         }\n \n-        return Collections.unmodifiableList(res);\n-    }\n-\n-    public static class Result extends AbstractBaseBean {\n-\n-        private static final long serialVersionUID = -1149681964161193232L;\n-\n-        private String key;\n-\n-        private Status value;\n-\n-        public Result() {\n-            super();\n-        }\n-\n-        public Result(final String key, final Status value) {\n-            super();\n-\n-            this.key = key;\n-            this.value = value;\n-        }\n-\n-        public String getKey() {\n-            return key;\n-        }\n-\n-        public Status getValue() {\n-            return value;\n-        }\n-\n-        public void setKey(final String key) {\n-            this.key = key;\n-        }\n-\n-        public void setValue(final Status value) {\n-            this.value = value;\n-        }\n+        return Collections.unmodifiableList(result);\n     }\n }"},{"sha":"a5a33ca17cb338b939997317ba5429a85353b812","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java","status":"modified","additions":35,"deletions":8,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,13 +18,13 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n @XmlRootElement(name = \"group\")\n @XmlType\n-@JsonIgnoreProperties({ \"displayName\" })\n public class GroupTO extends AnyTO {\n \n     private static final long serialVersionUID = -7785920258290147542L;\n@@ -35,9 +35,19 @@ public class GroupTO extends AnyTO {\n \n     private Long groupOwner;\n \n-    private String aDynMembershipCond;\n+    private String adynMembershipCond;\n \n-    private String uDynMembershipCond;\n+    private String udynMembershipCond;\n+\n+    @Override\n+    public String getType() {\n+        return AnyTypeKind.GROUP.name();\n+    }\n+\n+    @Override\n+    public void setType(final String type) {\n+        // fixed\n+    }\n \n     public String getName() {\n         return name;\n@@ -64,19 +74,36 @@ public void setGroupOwner(final Long groupOwner) {\n     }\n \n     public String getADynMembershipCond() {\n-        return aDynMembershipCond;\n+        return adynMembershipCond;\n     }\n \n     public void setADynMembershipCond(final String aDynMembershipCond) {\n-        this.aDynMembershipCond = aDynMembershipCond;\n+        this.adynMembershipCond = aDynMembershipCond;\n     }\n \n     public String getUDynMembershipCond() {\n-        return uDynMembershipCond;\n+        return udynMembershipCond;\n     }\n \n     public void setUDynMembershipCond(final String uDynMembershipCond) {\n-        this.uDynMembershipCond = uDynMembershipCond;\n+        this.udynMembershipCond = uDynMembershipCond;\n     }\n \n+    @JsonIgnore\n+    public String getDisplayName() {\n+        return getKey() + \" \" + getName();\n+    }\n+\n+    public static long fromDisplayName(final String displayName) {\n+        long result = 0;\n+        if (displayName != null && !displayName.isEmpty() && displayName.indexOf(' ') != -1) {\n+            try {\n+                result = Long.valueOf(displayName.split(\" \")[0]);\n+            } catch (NumberFormatException e) {\n+                // ignore\n+            }\n+        }\n+\n+        return result;\n+    }\n }"},{"sha":"ef70589f246c75fcb517678ccb3286f265a16ddc","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -20,6 +20,7 @@\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n @XmlRootElement(name = \"membership\")\n @XmlType\n@@ -29,9 +30,14 @@ public class MembershipTO extends RelationshipTO {\n \n     private String groupName;\n \n+    public MembershipTO() {\n+        super();\n+        super.setRightType(AnyTypeKind.GROUP.name());\n+    }\n+\n     @Override\n-    public String getRightType() {\n-        return \"group\";\n+    public void setRightType(final String rightType) {\n+        // ignore\n     }\n \n     public String getGroupName() {"},{"sha":"7cb65563781e150c579ab7ba1a0b0713684f003f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,21 +18,27 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n \n @XmlRootElement(name = \"notification\")\n @XmlType\n+@XmlAccessorType(XmlAccessType.FIELD)\n public class NotificationTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -6145117115632592612L;\n@@ -41,6 +47,8 @@ public class NotificationTO extends AbstractBaseBean {\n \n     private final List<String> events = new ArrayList<>();\n \n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n     private final Map<String, String> abouts = new HashMap<>();\n \n     private String recipients;\n@@ -63,6 +71,7 @@ public class NotificationTO extends AbstractBaseBean {\n \n     private boolean active;\n \n+    @JsonProperty\n     public Map<String, String> getAbouts() {\n         return abouts;\n     }"},{"sha":"dd3347a7110f0c09e4f51c55ee02a5bc17a2f5d8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PushTaskTO.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPushTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPushTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPushTaskTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,21 +18,30 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.HashMap;\n import java.util.Map;\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n \n @XmlRootElement(name = \"pushTask\")\n @XmlType\n+@XmlAccessorType(XmlAccessType.FIELD)\n public class PushTaskTO extends AbstractProvisioningTaskTO {\n \n     private static final long serialVersionUID = -2143537546915809018L;\n \n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n     private final Map<String, String> filters = new HashMap<>();\n \n+    @JsonProperty\n     public Map<String, String> getFilters() {\n         return filters;\n     }\n-\n }"},{"sha":"d76971965f86802adaa3dea44487924a4a9b93cf","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -28,8 +28,6 @@ public class RelationshipTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 360672942026613929L;\n \n-    private long key;\n-\n     private String leftType;\n \n     private long leftKey;\n@@ -38,14 +36,6 @@ public class RelationshipTO extends AbstractBaseBean {\n \n     private long rightKey;\n \n-    public long getKey() {\n-        return key;\n-    }\n-\n-    public void setKey(final long key) {\n-        this.key = key;\n-    }\n-\n     public String getLeftType() {\n         return leftType;\n     }"},{"sha":"dcec457f78624bffa200c0c6011f4df5b7e4685b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -48,7 +48,7 @@ public class ResourceTO extends AbstractAnnotatedBean {\n     /**\n      * The resource type is identified by the associated connector.\n      */\n-    private Long connectorId;\n+    private Long connector;\n \n     /**\n      * Convenience information: display name for the connector id.\n@@ -83,10 +83,6 @@ public class ResourceTO extends AbstractAnnotatedBean {\n \n     private final Set<ConnConfProperty> connConfProperties = new HashSet<>();\n \n-    private String usyncToken;\n-\n-    private String rsyncToken;\n-\n     private final List<String> propagationActionsClassNames = new ArrayList<>();\n \n     public ResourceTO() {\n@@ -117,12 +113,12 @@ public void setEnforceMandatoryCondition(final boolean enforceMandatoryCondition\n         this.enforceMandatoryCondition = enforceMandatoryCondition;\n     }\n \n-    public Long getConnectorId() {\n-        return connectorId;\n+    public Long getConnector() {\n+        return connector;\n     }\n \n-    public void setConnectorId(final Long connectorId) {\n-        this.connectorId = connectorId;\n+    public void setConnector(final Long connector) {\n+        this.connector = connector;\n     }\n \n     public String getConnectorDisplayName() {"},{"sha":"a6a7a8a49e3667abff5af386935761f5d9e579ed","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncTaskTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncTaskTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,19 +18,28 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.HashMap;\n import java.util.Map;\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n \n @XmlRootElement(name = \"syncTask\")\n @XmlType\n+@XmlAccessorType(XmlAccessType.FIELD)\n public class SyncTaskTO extends AbstractProvisioningTaskTO {\n \n     private static final long serialVersionUID = -2143537546915809017L;\n \n     private String destinationRealm;\n \n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n     private final Map<String, AnyTO> templates = new HashMap<>();\n \n     private boolean fullReconciliation;\n@@ -43,6 +52,7 @@ public void setDestinationRealm(final String destinationRealm) {\n         this.destinationRealm = destinationRealm;\n     }\n \n+    @JsonProperty\n     public Map<String, AnyTO> getTemplates() {\n         return templates;\n     }"},{"sha":"dd5ebeee05e1a34cbbf4a2c68fb1f953ebcad8b8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,17 +18,22 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Date;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n @XmlRootElement(name = \"user\")\n @XmlType\n@@ -58,6 +63,22 @@ public class UserTO extends AnyTO {\n \n     private String securityAnswer;\n \n+    private final List<RelationshipTO> relationships = new ArrayList<>();\n+\n+    private final List<MembershipTO> memberships = new ArrayList<>();\n+\n+    private final List<Long> dynGroups = new ArrayList<>();\n+\n+    @Override\n+    public String getType() {\n+        return AnyTypeKind.USER.name();\n+    }\n+\n+    @Override\n+    public void setType(final String type) {\n+        // fixed\n+    }\n+\n     public String getPassword() {\n         return password;\n     }\n@@ -148,6 +169,49 @@ public void setSecurityAnswer(final String securityAnswer) {\n         this.securityAnswer = securityAnswer;\n     }\n \n+    @XmlElementWrapper(name = \"relationships\")\n+    @XmlElement(name = \"relationship\")\n+    @JsonProperty(\"relationships\")\n+    public List<RelationshipTO> getRelationships() {\n+        return relationships;\n+    }\n+\n+    @JsonIgnore\n+    public Map<Long, RelationshipTO> getRelationshipMap() {\n+        Map<Long, RelationshipTO> result = new HashMap<>(getRelationships().size());\n+        for (RelationshipTO membership : getRelationships()) {\n+            result.put(membership.getRightKey(), membership);\n+        }\n+        result = Collections.unmodifiableMap(result);\n+\n+        return result;\n+    }\n+\n+    @XmlElementWrapper(name = \"memberships\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"memberships\")\n+    public List<MembershipTO> getMemberships() {\n+        return memberships;\n+    }\n+\n+    @JsonIgnore\n+    public Map<Long, MembershipTO> getMembershipMap() {\n+        Map<Long, MembershipTO> result = new HashMap<>(getMemberships().size());\n+        for (MembershipTO membership : getMemberships()) {\n+            result.put(membership.getRightKey(), membership);\n+        }\n+        result = Collections.unmodifiableMap(result);\n+\n+        return result;\n+    }\n+\n+    @XmlElementWrapper(name = \"dynGroups\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"dynGroups\")\n+    public List<Long> getDynGroups() {\n+        return dynGroups;\n+    }\n+\n     @Override\n     public String toString() {\n         return new ReflectionToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE) {"},{"sha":"9fa592847ce1345ffc7f3625e8d6eb5d25dce5ea","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/WorkflowFormPropertyTO.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FWorkflowFormPropertyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FWorkflowFormPropertyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FWorkflowFormPropertyTO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,11 +18,15 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.HashMap;\n import java.util.Map;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n import org.apache.syncope.common.lib.types.WorkflowFormPropertyType;\n \n @XmlRootElement(name = \"workflowFormProperty\")\n@@ -47,6 +51,8 @@ public class WorkflowFormPropertyTO extends AbstractBaseBean {\n \n     private String datePattern;\n \n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n     private final Map<String, String> enumValues = new HashMap<>();\n \n     public String getId() {\n@@ -113,6 +119,7 @@ public void setDatePattern(final String datePattern) {\n         this.datePattern = datePattern;\n     }\n \n+    @JsonProperty\n     public Map<String, String> getEnumValues() {\n         return enumValues;\n     }"},{"sha":"ee35e2857e19ecb1a684dff4fb1dfc3a0c55fc56","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AnyTypeKind.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,12 +19,26 @@\n package org.apache.syncope.common.lib.types;\n \n import javax.xml.bind.annotation.XmlEnum;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n \n @XmlEnum\n public enum AnyTypeKind {\n \n-    USER,\n-    GROUP,\n-    ANY_OBJECT;\n+    USER(UserTO.class),\n+    GROUP(GroupTO.class),\n+    ANY_OBJECT(AnyObjectTO.class);\n+\n+    private final Class<? extends AnyTO> toClass;\n+\n+    private AnyTypeKind(final Class<? extends AnyTO> toClass) {\n+        this.toClass = toClass;\n+    }\n+\n+    public Class<? extends AnyTO> getToClass() {\n+        return toClass;\n+    }\n \n }"},{"sha":"8e9694263a74c8dfbe7737fec286285e1da227ae","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -40,6 +40,7 @@ public enum ClientExceptionType {\n     InvalidProvision(Response.Status.BAD_REQUEST),\n     InvalidReport(Response.Status.BAD_REQUEST),\n     InvalidReportExec(Response.Status.BAD_REQUEST),\n+    InvalidAnyType(Response.Status.BAD_REQUEST),\n     InvalidAnyObject(Response.Status.BAD_REQUEST),\n     InvalidGroup(Response.Status.BAD_REQUEST),\n     InvalidSchemaDefinition(Response.Status.BAD_REQUEST),\n@@ -49,7 +50,7 @@ public enum ClientExceptionType {\n     InvalidPlainSchema(Response.Status.BAD_REQUEST),\n     InvalidDerSchema(Response.Status.BAD_REQUEST),\n     InvalidVirSchema(Response.Status.BAD_REQUEST),\n-    InvalidSchemaMapping(Response.Status.BAD_REQUEST),\n+    InvalidMapping(Response.Status.BAD_REQUEST),\n     InvalidRealm(Response.Status.BAD_REQUEST),\n     InvalidUser(Response.Status.BAD_REQUEST),\n     InvalidExternalResource(Response.Status.BAD_REQUEST),\n@@ -65,6 +66,7 @@ public enum ClientExceptionType {\n     GroupOwnership(Response.Status.BAD_REQUEST),\n     Scheduling(Response.Status.BAD_REQUEST),\n     Unauthorized(Response.Status.UNAUTHORIZED),\n+    UnallowedSchemas(Response.Status.BAD_REQUEST),\n     Unknown(Response.Status.BAD_REQUEST),\n     Workflow(Response.Status.BAD_REQUEST);\n "},{"sha":"6ffe3184ab160705b95ee3137012d4df35d9fc61","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/Entitlement.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -36,6 +36,26 @@ public final class Entitlement {\n \n     public static final String REALM_DELETE = \"REALM_DELETE\";\n \n+    public static final String ANYTYPECLASS_LIST = \"ANYTYPECLASS_LIST\";\n+\n+    public static final String ANYTYPECLASS_CREATE = \"ANYTYPECLASS_CREATE\";\n+\n+    public static final String ANYTYPECLASS_READ = \"ANYTYPECLASS_READ\";\n+\n+    public static final String ANYTYPECLASS_UPDATE = \"ANYTYPECLASS_UPDATE\";\n+\n+    public static final String ANYTYPECLASS_DELETE = \"ANYTYPECLASS_DELETE\";\n+\n+    public static final String ANYTYPE_LIST = \"ANYTYPE_LIST\";\n+\n+    public static final String ANYTYPE_CREATE = \"ANYTYPE_CREATE\";\n+\n+    public static final String ANYTYPE_READ = \"ANYTYPE_READ\";\n+\n+    public static final String ANYTYPE_UPDATE = \"ANYTYPE_UPDATE\";\n+\n+    public static final String ANYTYPE_DELETE = \"ANYTYPE_DELETE\";\n+\n     public static final String ROLE_LIST = \"ROLE_LIST\";\n \n     public static final String ROLE_CREATE = \"ROLE_CREATE\";"},{"sha":"21831cf5bc9f57409d9eb4b864c9d19bc37647dc","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+\n+/**\n+ * REST operations for any type classes.\n+ */\n+@Path(\"anyTypeClassClasses\")\n+public interface AnyTypeClassService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all anyTypeClasss.\n+     *\n+     * @return list of all anyTypeClasss.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<AnyTypeClassTO> list();\n+\n+    /**\n+     * Returns anyTypeClass with matching key.\n+     *\n+     * @param key anyTypeClass key to be read\n+     * @return anyTypeClass with matching key\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    AnyTypeClassTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Creates a new anyTypeClass.\n+     *\n+     * @param anyTypeClassTO anyTypeClass to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created anyTypeClass\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created anyTypeClass\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull AnyTypeClassTO anyTypeClassTO);\n+\n+    /**\n+     * Updates the anyTypeClass matching the provided key.\n+     *\n+     * @param key anyTypeClass key to be updated\n+     * @param anyTypeClassTO anyTypeClass to be stored\n+     */\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"key\") String key, @NotNull AnyTypeClassTO anyTypeClassTO);\n+\n+    /**\n+     * Deletes the anyTypeClass matching the provided key.\n+     *\n+     * @param key anyTypeClass key to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"ddedd25ac6d819793242bc2cb32365ba2573e244","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeService.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n+\n+/**\n+ * REST operations for any types.\n+ */\n+@Path(\"anyTypes\")\n+public interface AnyTypeService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all anyTypes.\n+     *\n+     * @return list of all anyTypes.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<AnyTypeTO> list();\n+\n+    /**\n+     * Returns anyType with matching key.\n+     *\n+     * @param key anyType key to be read\n+     * @return anyType with matching key\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    AnyTypeTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Creates a new anyType.\n+     *\n+     * @param anyTypeTO anyType to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created anyType\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created anyType\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull AnyTypeTO anyTypeTO);\n+\n+    /**\n+     * Updates the anyType matching the provided key.\n+     *\n+     * @param key anyType key to be updated\n+     * @param anyTypeTO anyType to be stored\n+     */\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"key\") String key, @NotNull AnyTypeTO anyTypeTO);\n+\n+    /**\n+     * Deletes the anyType matching the provided key.\n+     *\n+     * @param key anyType key to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"881e1bc05f4023d7fda41d65875d7fe1b076360d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -51,15 +51,15 @@ public interface RoleService extends JAXRSService {\n     List<RoleTO> list();\n \n     /**\n-     * Returns role with matching id.\n+     * Returns role with matching key.\n      *\n-     * @param roleKey role id to be read\n-     * @return role with matching id\n+     * @param key role key to be read\n+     * @return role with matching key\n      */\n     @GET\n-    @Path(\"{roleKey}\")\n+    @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    RoleTO read(@NotNull @PathParam(\"roleKey\") Long roleKey);\n+    RoleTO read(@NotNull @PathParam(\"key\") Long key);\n \n     /**\n      * Creates a new role.\n@@ -76,22 +76,22 @@ public interface RoleService extends JAXRSService {\n     Response create(@NotNull RoleTO roleTO);\n \n     /**\n-     * Updates the role matching the provided id.\n+     * Updates the role matching the provided key.\n      *\n-     * @param roleKey role id to be updated\n+     * @param key role key to be updated\n      * @param roleTO role to be stored\n      */\n     @PUT\n-    @Path(\"{roleKey}\")\n+    @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void update(@NotNull @PathParam(\"roleKey\") Long roleKey, @NotNull RoleTO roleTO);\n+    void update(@NotNull @PathParam(\"key\") Long key, @NotNull RoleTO roleTO);\n \n     /**\n-     * Deletes the role matching the provided id.\n+     * Deletes the role matching the provided key.\n      *\n-     * @param roleKey role id to be deleted\n+     * @param key role key to be deleted\n      */\n     @DELETE\n-    @Path(\"{roleKey}\")\n-    void delete(@NotNull @PathParam(\"roleKey\") Long roleKey);\n+    @Path(\"{key}\")\n+    void delete(@NotNull @PathParam(\"key\") Long key);\n }"},{"sha":"352e3102c5fb816058d05525b5bbb28b3c7a877f","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -39,7 +39,7 @@\n /**\n  * REST operations for attribute schemas.\n  */\n-@Path(\"schemas/{kind}/{type}\")\n+@Path(\"schemas/{type}\")\n public interface SchemaService extends JAXRSService {\n \n     /**"},{"sha":"8f9363cb83dafad73a51edf885a35fa0643a50d9","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -81,7 +81,7 @@ public interface UserService extends JAXRSService {\n     })\n     @OPTIONS\n     @Path(\"{username}/userKey\")\n-    Response getUserId(@NotNull @PathParam(\"username\") String username);\n+    Response getUserKey(@NotNull @PathParam(\"username\") String username);\n \n     /**\n      * Reads the user matching the provided userKey."},{"sha":"68858c72801e9c018266dc386a58464922411d5b","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -33,7 +33,7 @@\n /**\n  * REST operations for workflow definition management.\n  */\n-@Path(\"workflows/{kind}\")\n+@Path(\"workflows/{anyTypeKind}\")\n public interface WorkflowService extends JAXRSService {\n \n     /**"},{"sha":"8747631be7b12fa4e4e3026b6110b55b096662ce","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.provisioning.api.data.AnyTypeClassDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AnyTypeClassLogic extends AbstractTransactionalLogic<AnyTypeClassTO> {\n+\n+    @Autowired\n+    private AnyTypeClassDataBinder binder;\n+\n+    @Autowired\n+    private AnyTypeClassDAO anyTypeDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_READ + \"')\")\n+    public AnyTypeClassTO read(final String key) {\n+        AnyTypeClass anyType = anyTypeDAO.find(key);\n+        if (anyType == null) {\n+            LOG.error(\"Could not find anyType '\" + key + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(key));\n+        }\n+\n+        return binder.getAnyTypeClassTO(anyType);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_LIST + \"')\")\n+    public List<AnyTypeClassTO> list() {\n+        return CollectionUtils.collect(anyTypeDAO.findAll(), new Transformer<AnyTypeClass, AnyTypeClassTO>() {\n+\n+            @Override\n+            public AnyTypeClassTO transform(final AnyTypeClass input) {\n+                return binder.getAnyTypeClassTO(input);\n+            }\n+        }, new ArrayList<AnyTypeClassTO>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_CREATE + \"')\")\n+    public AnyTypeClassTO create(final AnyTypeClassTO anyTypeTO) {\n+        return binder.getAnyTypeClassTO(anyTypeDAO.save(binder.create(anyTypeTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_UPDATE + \"')\")\n+    public AnyTypeClassTO update(final AnyTypeClassTO anyTypeTO) {\n+        AnyTypeClass anyType = anyTypeDAO.find(anyTypeTO.getKey());\n+        if (anyType == null) {\n+            LOG.error(\"Could not find anyType '\" + anyTypeTO.getKey() + \"'\");\n+            throw new NotFoundException(String.valueOf(anyTypeTO.getKey()));\n+        }\n+\n+        binder.update(anyType, anyTypeTO);\n+        anyType = anyTypeDAO.save(anyType);\n+\n+        return binder.getAnyTypeClassTO(anyType);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_DELETE + \"')\")\n+    public AnyTypeClassTO delete(final String key) {\n+        AnyTypeClass anyType = anyTypeDAO.find(key);\n+        if (anyType == null) {\n+            LOG.error(\"Could not find anyType '\" + key + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(key));\n+        }\n+\n+        AnyTypeClassTO deleted = binder.getAnyTypeClassTO(anyType);\n+        anyTypeDAO.delete(key);\n+        return deleted;\n+    }\n+\n+    @Override\n+    protected AnyTypeClassTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof AnyTypeClassTO) {\n+                    key = ((AnyTypeClassTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (StringUtils.isNotBlank(key)) {\n+            try {\n+                return binder.getAnyTypeClassTO(anyTypeDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"93af622fb573a3fc41a0e8678ee19d737a71868d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.provisioning.api.data.AnyTypeDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AnyTypeLogic extends AbstractTransactionalLogic<AnyTypeTO> {\n+\n+    @Autowired\n+    private AnyTypeDataBinder binder;\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPE_READ + \"')\")\n+    public AnyTypeTO read(final String key) {\n+        AnyType anyType = anyTypeDAO.find(key);\n+        if (anyType == null) {\n+            LOG.error(\"Could not find anyType '\" + key + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(key));\n+        }\n+\n+        return binder.getAnyTypeTO(anyType);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPE_LIST + \"')\")\n+    public List<AnyTypeTO> list() {\n+        return CollectionUtils.collect(anyTypeDAO.findAll(), new Transformer<AnyType, AnyTypeTO>() {\n+\n+            @Override\n+            public AnyTypeTO transform(final AnyType input) {\n+                return binder.getAnyTypeTO(input);\n+            }\n+        }, new ArrayList<AnyTypeTO>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPE_CREATE + \"')\")\n+    public AnyTypeTO create(final AnyTypeTO anyTypeTO) {\n+        return binder.getAnyTypeTO(anyTypeDAO.save(binder.create(anyTypeTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPE_UPDATE + \"')\")\n+    public AnyTypeTO update(final AnyTypeTO anyTypeTO) {\n+        AnyType anyType = anyTypeDAO.find(anyTypeTO.getKey());\n+        if (anyType == null) {\n+            LOG.error(\"Could not find anyType '\" + anyTypeTO.getKey() + \"'\");\n+            throw new NotFoundException(String.valueOf(anyTypeTO.getKey()));\n+        }\n+\n+        binder.update(anyType, anyTypeTO);\n+        anyType = anyTypeDAO.save(anyType);\n+\n+        return binder.getAnyTypeTO(anyType);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPE_DELETE + \"')\")\n+    public AnyTypeTO delete(final String key) {\n+        AnyType anyType = anyTypeDAO.find(key);\n+        if (anyType == null) {\n+            LOG.error(\"Could not find anyType '\" + key + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(key));\n+        }\n+\n+        AnyTypeTO deleted = binder.getAnyTypeTO(anyType);\n+        anyTypeDAO.delete(key);\n+        return deleted;\n+    }\n+\n+    @Override\n+    protected AnyTypeTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof Long) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof AnyTypeTO) {\n+                    key = ((AnyTypeTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (StringUtils.isNotBlank(key)) {\n+            try {\n+                return binder.getAnyTypeTO(anyTypeDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"77ff7b586e0839abe71dc99cdeb2240d5c90753c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LogicInvocationHandler.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -34,9 +34,6 @@\n @Aspect\n public class LogicInvocationHandler {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(LogicInvocationHandler.class);\n \n     @Autowired\n@@ -47,16 +44,16 @@ public class LogicInvocationHandler {\n \n     @Around(\"execution(* org.apache.syncope.core.logic.AbstractLogic+.*(..))\")\n     public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n-        final Class<?> clazz = joinPoint.getTarget().getClass();\n+        Class<?> clazz = joinPoint.getTarget().getClass();\n \n-        final Object[] input = joinPoint.getArgs();\n+        Object[] input = joinPoint.getArgs();\n \n-        final String category = clazz.getSimpleName();\n+        String category = clazz.getSimpleName();\n \n-        final MethodSignature ms = (MethodSignature) joinPoint.getSignature();\n+        MethodSignature ms = (MethodSignature) joinPoint.getSignature();\n         Method method = ms.getMethod();\n \n-        final String event = joinPoint.getSignature().getName();\n+        String event = joinPoint.getSignature().getName();\n \n         AuditElements.Result result = null;\n         Object output = null;"},{"sha":"863af128d0ec7262d82db399d739d7f2f1dddcd8","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -217,7 +217,7 @@ public ConnObjectTO readConnObject(final String resourceKey, final String anyTyp\n                 connector.getOperationOptions(attrUtils.getMappingItems(provision, MappingPurpose.BOTH)));\n         if (connectorObject == null) {\n             throw new NotFoundException(\"Object \" + connObjectKeyValue + \" with class \" + provision.getObjectClass()\n-                    + \"not found on resource \" + resourceKey);\n+                    + \" not found on resource \" + resourceKey);\n         }\n \n         final Set<Attribute> attributes = connectorObject.getAttributes();"},{"sha":"4ecab47b5777bca735b7317abcb2aa8d8699e9d8","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -50,12 +50,12 @@\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.java.VirAttrHandler;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.UnauthorizedException;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.provisioning.api.AnyTransformer;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -205,7 +205,7 @@ protected UserTO doCreate(final UserTO userTO, final boolean storePassword) {\n \n         Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(actual, storePassword);\n \n-        final UserTO savedTO = binder.getUserTO(created.getKey());\n+        UserTO savedTO = binder.getUserTO(created.getKey());\n         savedTO.getPropagationStatusTOs().addAll(created.getValue());\n         return savedTO;\n     }"},{"sha":"6a8289a7336eed1be3b7090a82010a35553a07bf","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/JobInstanceLoaderImpl.java","status":"modified","additions":29,"deletions":7,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -57,6 +57,7 @@\n import org.quartz.impl.triggers.CronTriggerImpl;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.BeanCreationException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n@@ -126,6 +127,30 @@ private void registerJob(final String jobName, final Job jobInstance, final Stri\n         }\n     }\n \n+    private Job createSpringBean(final Class<?> jobClass) {\n+        Job jobInstance = null;\n+        for (int i = 0; i < 5 && jobInstance == null; i++) {\n+            LOG.debug(\"{} attempt to create Spring bean for {}\", i, jobClass);\n+            try {\n+                jobInstance = (Job) ApplicationContextProvider.getBeanFactory().\n+                        createBean(jobClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                LOG.debug(\"{} attempt to create Spring bean for {} succeeded\", i, jobClass);\n+            } catch (BeanCreationException e) {\n+                LOG.error(\"Could not create Spring bean for {}\", jobClass, e);\n+                try {\n+                    Thread.sleep(1000);\n+                } catch (final InterruptedException ex) {\n+                    // ignore\n+                }\n+            }\n+        }\n+        if (jobInstance == null) {\n+            throw new NotFoundException(\"Spring bean for \" + jobClass);\n+        }\n+\n+        return jobInstance;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void registerJob(final Task task, final String jobClassName, final String cronExpression)\n@@ -137,8 +162,8 @@ public void registerJob(final Task task, final String jobClassName, final String\n         } else if (PushJob.class.equals(jobClass)) {\n             jobClass = PushJobImpl.class;\n         }\n-        Job jobInstance = (Job) ApplicationContextProvider.getBeanFactory().\n-                createBean(jobClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+\n+        Job jobInstance = createSpringBean(jobClass);\n         if (jobInstance instanceof TaskJob) {\n             ((TaskJob) jobInstance).setTaskId(task.getKey());\n         }\n@@ -151,10 +176,8 @@ public void registerJob(final Task task, final String jobClassName, final String\n                 try {\n                     Class<?> actionsClass = Class.forName(className);\n \n-                    final SyncActions syncActions =\n-                            (SyncActions) ApplicationContextProvider.getBeanFactory().\n+                    SyncActions syncActions = (SyncActions) ApplicationContextProvider.getBeanFactory().\n                             createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-\n                     actions.add(syncActions);\n                 } catch (Exception e) {\n                     LOG.info(\"Class '{}' not found\", className, e);\n@@ -182,8 +205,7 @@ public void registerTaskJob(final Long taskKey)\n \n     @Override\n     public void registerJob(final Report report) throws SchedulerException, ParseException {\n-        Job jobInstance = (Job) ApplicationContextProvider.getBeanFactory().\n-                createBean(ReportJob.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+        Job jobInstance = createSpringBean(ReportJob.class);\n         ((ReportJob) jobInstance).setReportKey(report.getKey());\n \n         registerJob(JobNamer.getJobName(report), jobInstance, report.getCronExpression());"},{"sha":"b05c4e63b9278505798def4eb90b1892df888990","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":35,"deletions":4,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -38,6 +39,8 @@\n import org.apache.syncope.core.misc.DataFormat;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n+import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -62,6 +65,9 @@ public class UserReportlet extends AbstractReportlet<UserReportletConf> {\n     @Autowired\n     private GroupDataBinder groupDataBinder;\n \n+    @Autowired\n+    private AnyObjectDataBinder anyObjectDataBinder;\n+\n     private List<User> getPagedUsers(final int page) {\n         List<User> result;\n \n@@ -264,23 +270,48 @@ private void doExtract(final ContentHandler handler, final List<User> users) thr\n \n             doExtractAttributes(handler, userTO, conf.getPlainAttrs(), conf.getDerAttrs(), conf.getVirAttrs());\n \n+            if (conf.getFeatures().contains(Feature.relationships)) {\n+                handler.startElement(\"\", \"\", \"relationships\", null);\n+\n+                for (RelationshipTO rel : userTO.getRelationships()) {\n+                    atts.clear();\n+\n+                    atts.addAttribute(\"\", \"\", \"anyObjectKey\",\n+                            ReportXMLConst.XSD_LONG, String.valueOf(rel.getRightKey()));\n+                    handler.startElement(\"\", \"\", \"relationship\", atts);\n+\n+                    if (conf.getFeatures().contains(Feature.resources)) {\n+                        URelationship actualRel = user.getRelationship(rel.getRightKey());\n+                        if (actualRel == null) {\n+                            LOG.warn(\"Unexpected: cannot find relationship for any object {} for user {}\",\n+                                    rel.getRightKey(), user);\n+                        } else {\n+                            doExtractResources(handler, anyObjectDataBinder.getAnyObjectTO(actualRel.getRightEnd()));\n+                        }\n+                    }\n+\n+                    handler.endElement(\"\", \"\", \"relationship\");\n+                }\n+\n+                handler.endElement(\"\", \"\", \"relationships\");\n+            }\n             if (conf.getFeatures().contains(Feature.memberships)) {\n                 handler.startElement(\"\", \"\", \"memberships\", null);\n \n                 for (MembershipTO memb : userTO.getMemberships()) {\n                     atts.clear();\n \n-                    atts.addAttribute(\"\", \"\", \"id\", ReportXMLConst.XSD_LONG, String.valueOf(memb.getKey()));\n-                    atts.addAttribute(\"\", \"\", \"groupId\", ReportXMLConst.XSD_LONG, String.valueOf(memb.getRightKey()));\n+                    atts.addAttribute(\"\", \"\", \"groupKey\",\n+                            ReportXMLConst.XSD_LONG, String.valueOf(memb.getRightKey()));\n                     atts.addAttribute(\"\", \"\", \"groupName\", ReportXMLConst.XSD_STRING, String.\n                             valueOf(memb.getGroupName()));\n                     handler.startElement(\"\", \"\", \"membership\", atts);\n \n                     if (conf.getFeatures().contains(Feature.resources)) {\n                         UMembership actualMemb = user.getMembership(memb.getRightKey());\n                         if (actualMemb == null) {\n-                            LOG.warn(\"Unexpected: cannot find membership for group {} for user {}\", memb.getRightKey(),\n-                                    user);\n+                            LOG.warn(\"Unexpected: cannot find membership for group {} for user {}\",\n+                                    memb.getRightKey(), user);\n                         } else {\n                             doExtractResources(handler, groupDataBinder.getGroupTO(actualMemb.getRightEnd()));\n                         }"},{"sha":"766c5cf5ec39285c490e1d68e8518c1ca6ee4119","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ConnObjectUtils.java","status":"modified","additions":58,"deletions":211,"changes":269,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -25,23 +25,21 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n@@ -54,37 +52,23 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.Connector;\n-import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n-import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n-import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheValue;\n import org.apache.syncope.core.misc.security.Encryptor;\n-import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.OperationOptions;\n-import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -99,9 +83,6 @@ public class ConnObjectUtils {\n     @Autowired\n     private UserDAO userDAO;\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n-\n     @Autowired\n     private GroupDAO groupDAO;\n \n@@ -114,17 +95,8 @@ public class ConnObjectUtils {\n     @Autowired\n     private PasswordGenerator pwdGen;\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n     private final Encryptor encryptor = Encryptor.getInstance();\n \n-    /**\n-     * Virtual attribute cache.\n-     */\n-    @Autowired\n-    private VirAttrCache virAttrCache;\n-\n     /**\n      * Build a UserTO / GroupTO / AnyObjectTO out of connector object attributes and schema mapping.\n      *\n@@ -213,6 +185,8 @@ public <T extends AnyMod> T getAnyMod(final Long key, final ConnectorObject obj,\n             return (T) AnyOperations.diff(((UserTO) updated), ((UserTO) original), true);\n         } else if (AnyTypeKind.GROUP == anyUtils.getAnyTypeKind()) {\n             return (T) AnyOperations.diff(((GroupTO) updated), ((GroupTO) original), true);\n+        } else if (AnyTypeKind.ANY_OBJECT == anyUtils.getAnyTypeKind()) {\n+            return (T) AnyOperations.diff(((AnyObjectTO) updated), ((AnyObjectTO) original), true);\n         }\n \n         return null;\n@@ -348,12 +322,14 @@ private <T extends AnyTO> T getAnyTOFromConnObject(final ConnectorObject obj,\n         AnyTemplate anyTypeTemplate = syncTask.getTemplate(provision.getAnyType());\n         if (anyTypeTemplate != null) {\n             AnyTO template = anyTypeTemplate.get();\n+            fillFromTemplate(anyTO, template);\n \n-            if (template.getRealm() != null) {\n-                anyTO.setRealm(template.getRealm());\n-            }\n-\n-            if (template instanceof UserTO) {\n+            if (template instanceof AnyObjectTO) {\n+                fillRelationshipsFromTemplate(((AnyObjectTO) anyTO).getRelationshipMap(),\n+                        ((AnyObjectTO) anyTO).getRelationships(), ((AnyObjectTO) template).getRelationships());\n+                fillMembershipsFromTemplate(((AnyObjectTO) anyTO).getMembershipMap(),\n+                        ((AnyObjectTO) anyTO).getMemberships(), ((AnyObjectTO) template).getMemberships());\n+            } else if (template instanceof UserTO) {\n                 if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n                     String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), anyTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n@@ -367,8 +343,12 @@ private <T extends AnyTO> T getAnyTOFromConnObject(final ConnectorObject obj,\n                         ((UserTO) anyTO).setPassword(evaluated);\n                     }\n                 }\n-            }\n-            if (template instanceof GroupTO) {\n+\n+                fillRelationshipsFromTemplate(((UserTO) anyTO).getRelationshipMap(),\n+                        ((UserTO) anyTO).getRelationships(), ((UserTO) template).getRelationships());\n+                fillMembershipsFromTemplate(((UserTO) anyTO).getMembershipMap(),\n+                        ((UserTO) anyTO).getMemberships(), ((UserTO) template).getMemberships());\n+            } else if (template instanceof GroupTO) {\n                 if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n                     String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), anyTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n@@ -389,12 +369,6 @@ private <T extends AnyTO> T getAnyTOFromConnObject(final ConnectorObject obj,\n                     }\n                 }\n             }\n-\n-            fillFromTemplate(anyTO, template);\n-\n-            for (String resource : template.getResources()) {\n-                anyTO.getResources().add(resource);\n-            }\n         }\n \n         return anyTO;\n@@ -467,171 +441,34 @@ public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n         return connObjectTO;\n     }\n \n-    /**\n-     * Query connected external resources for values to populated virtual attributes associated with the given owner.\n-     *\n-     * @param any any object\n-     */\n-    public void retrieveVirAttrValues(final Any<?, ?, ?> any) {\n-        ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-        ConnectorFactory connFactory = context.getBean(ConnectorFactory.class);\n-\n-        IntMappingType type = any.getType().getKind() == AnyTypeKind.USER\n-                ? IntMappingType.UserVirtualSchema\n-                : any.getType().getKind() == AnyTypeKind.GROUP\n-                        ? IntMappingType.GroupVirtualSchema\n-                        : IntMappingType.AnyVirtualSchema;\n-\n-        Map<String, ConnectorObject> resources = new HashMap<>();\n-\n-        // -----------------------\n-        // Retrieve virtual attribute values if and only if they have not been retrieved yet\n-        // -----------------------\n-        for (VirAttr<?> virAttr : any.getVirAttrs()) {\n-            // reset value set\n-            if (virAttr.getValues().isEmpty()) {\n-                retrieveVirAttrValue(any, virAttr, type, resources, connFactory);\n-            }\n-        }\n-        // -----------------------\n-    }\n-\n-    private void retrieveVirAttrValue(\n-            final Any<?, ?, ?> any,\n-            final VirAttr<?> virAttr,\n-            final IntMappingType type,\n-            final Map<String, ConnectorObject> externalResources,\n-            final ConnectorFactory connFactory) {\n-\n-        String schemaName = virAttr.getSchema().getKey();\n-        VirAttrCacheValue virAttrCacheValue = virAttrCache.get(any.getType().getKey(), any.getKey(), schemaName);\n-\n-        LOG.debug(\"Retrieve values for virtual attribute {} ({})\", schemaName, type);\n-\n-        if (virAttrCache.isValidEntry(virAttrCacheValue)) {\n-            // cached ...\n-            LOG.debug(\"Values found in cache {}\", virAttrCacheValue);\n-            virAttr.getValues().clear();\n-            virAttr.getValues().addAll(new ArrayList<>(virAttrCacheValue.getValues()));\n-        } else {\n-            // not cached ...\n-            LOG.debug(\"Need one or more remote connections\");\n-\n-            VirAttrCacheValue toBeCached = new VirAttrCacheValue();\n-\n-            AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-            Collection<ExternalResource> targetResources = getTargetResources(virAttr, type, anyUtils, any.getType());\n-\n-            for (ExternalResource resource : targetResources) {\n-                Provision provision = resource.getProvision(any.getType());\n-                LOG.debug(\"Search values into {},{}\", resource, provision);\n-\n-                if (provision != null) {\n-                    try {\n-                        List<MappingItem> mappings = anyUtils.getMappingItems(provision, MappingPurpose.BOTH);\n-\n-                        ConnectorObject connectorObject;\n-                        if (externalResources.containsKey(resource.getKey())) {\n-                            connectorObject = externalResources.get(resource.getKey());\n-                        } else {\n-                            LOG.debug(\"Perform connection to {}\", resource.getKey());\n-                            String connObjectKey = anyUtils.getConnObjectKeyItem(provision) == null\n-                                    ? null\n-                                    : MappingUtils.getConnObjectKeyValue(any, provision);\n-\n-                            if (StringUtils.isBlank(connObjectKey)) {\n-                                throw new IllegalArgumentException(\"No ConnObjectKey found for \" + resource.getKey());\n-                            }\n-\n-                            Connector connector = connFactory.getConnector(resource);\n-\n-                            OperationOptions oo =\n-                                    connector.getOperationOptions(MappingUtils.getMatchingMappingItems(mappings, type));\n-\n-                            connectorObject =\n-                                    connector.getObject(provision.getObjectClass(), new Uid(connObjectKey), oo);\n-                            externalResources.put(resource.getKey(), connectorObject);\n-                        }\n-\n-                        if (connectorObject != null) {\n-                            // ask for searched virtual attribute value\n-                            Collection<MappingItem> virAttrMappings =\n-                                    MappingUtils.getMatchingMappingItems(mappings, schemaName, type);\n-\n-                            // the same virtual attribute could be mapped with one or more external attribute \n-                            for (MappingItem mapping : virAttrMappings) {\n-                                Attribute attribute = connectorObject.getAttributeByName(mapping.getExtAttrName());\n-\n-                                if (attribute != null && attribute.getValue() != null) {\n-                                    for (Object obj : attribute.getValue()) {\n-                                        if (obj != null) {\n-                                            virAttr.getValues().add(obj.toString());\n-                                        }\n-                                    }\n-                                }\n-                            }\n-\n-                            toBeCached.setResourceValues(resource.getKey(), new HashSet<>(virAttr.getValues()));\n+    private AttrTO evaluateAttrFromTemplate(final AnyTO anyTO, final AttrTO template) {\n+        AttrTO result = new AttrTO();\n+        result.setSchema(template.getSchema());\n \n-                            LOG.debug(\"Retrieved values {}\", virAttr.getValues());\n-                        }\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error reading connector object from {}\", resource.getKey(), e);\n-\n-                        if (virAttrCacheValue != null) {\n-                            toBeCached.forceExpiring();\n-                            LOG.debug(\"Search for a cached value (even expired!) ...\");\n-                            final Set<String> cachedValues = virAttrCacheValue.getValues(resource.getKey());\n-                            if (cachedValues != null) {\n-                                LOG.debug(\"Use cached value {}\", cachedValues);\n-                                virAttr.getValues().addAll(cachedValues);\n-                                toBeCached.setResourceValues(resource.getKey(), new HashSet<>(cachedValues));\n-                            }\n-                        }\n-                    }\n+        if (template.getValues() != null && !template.getValues().isEmpty()) {\n+            for (String value : template.getValues()) {\n+                String evaluated = JexlUtils.evaluate(value, anyTO);\n+                if (StringUtils.isNotBlank(evaluated)) {\n+                    result.getValues().add(evaluated);\n                 }\n             }\n-\n-            virAttrCache.put(any.getType().getKey(), any.getKey(), schemaName, toBeCached);\n         }\n-    }\n-\n-    private Collection<ExternalResource> getTargetResources(\n-            final VirAttr<?> attr, final IntMappingType type, final AnyUtils anyUtils, final AnyType anyType) {\n-\n-        Iterable<? extends ExternalResource> iterable = attr.getOwner() instanceof User\n-                ? userDAO.findAllResources((User) attr.getOwner())\n-                : attr.getOwner() instanceof AnyObject\n-                        ? anyObjectDAO.findAllResources((AnyObject) attr.getOwner())\n-                        : attr.getOwner() instanceof Group\n-                                ? ((Group) attr.getOwner()).getResources()\n-                                : Collections.<ExternalResource>emptySet();\n-        return getTargetResources(attr, type, anyUtils, iterable, anyType);\n-    }\n-\n-    private Collection<ExternalResource> getTargetResources(final VirAttr<?> attr, final IntMappingType type,\n-            final AnyUtils anyUtils, final Iterable<? extends ExternalResource> ownerResources, final AnyType anyType) {\n-\n-        return CollectionUtils.select(ownerResources, new Predicate<ExternalResource>() {\n \n-            @Override\n-            public boolean evaluate(final ExternalResource resource) {\n-                return resource.getProvision(anyType) != null\n-                        && !MappingUtils.getMatchingMappingItems(\n-                                anyUtils.getMappingItems(resource.getProvision(anyType), MappingPurpose.BOTH),\n-                                attr.getSchema().getKey(), type).isEmpty();\n-            }\n-        });\n+        return result;\n     }\n \n     private void fillFromTemplate(final AnyTO anyTO, final AnyTO template) {\n+        if (template.getRealm() != null) {\n+            anyTO.setRealm(template.getRealm());\n+        }\n+\n         Map<String, AttrTO> currentAttrMap = anyTO.getPlainAttrMap();\n-        for (AttrTO templateAttr : template.getPlainAttrs()) {\n-            if (templateAttr.getValues() != null && !templateAttr.getValues().isEmpty()\n-                    && (!currentAttrMap.containsKey(templateAttr.getSchema())\n-                    || currentAttrMap.get(templateAttr.getSchema()).getValues().isEmpty())) {\n+        for (AttrTO templatePlainAttr : template.getPlainAttrs()) {\n+            if (!templatePlainAttr.getValues().isEmpty()\n+                    && (!currentAttrMap.containsKey(templatePlainAttr.getSchema())\n+                    || currentAttrMap.get(templatePlainAttr.getSchema()).getValues().isEmpty())) {\n \n-                anyTO.getPlainAttrs().add(evaluateAttrTemplate(anyTO, templateAttr));\n+                anyTO.getPlainAttrs().add(evaluateAttrFromTemplate(anyTO, templatePlainAttr));\n             }\n         }\n \n@@ -644,29 +481,39 @@ private void fillFromTemplate(final AnyTO anyTO, final AnyTO template) {\n \n         currentAttrMap = anyTO.getVirAttrMap();\n         for (AttrTO templateVirAttr : template.getVirAttrs()) {\n-            if (templateVirAttr.getValues() != null && !templateVirAttr.getValues().isEmpty()\n+            if (!templateVirAttr.getValues().isEmpty()\n                     && (!currentAttrMap.containsKey(templateVirAttr.getSchema())\n                     || currentAttrMap.get(templateVirAttr.getSchema()).getValues().isEmpty())) {\n \n-                anyTO.getVirAttrs().add(evaluateAttrTemplate(anyTO, templateVirAttr));\n+                anyTO.getVirAttrs().add(evaluateAttrFromTemplate(anyTO, templateVirAttr));\n             }\n         }\n+\n+        for (String resource : template.getResources()) {\n+            anyTO.getResources().add(resource);\n+        }\n+\n+        anyTO.getAuxClasses().addAll(template.getAuxClasses());\n     }\n \n-    private AttrTO evaluateAttrTemplate(final AnyTO anyTO, final AttrTO template) {\n-        AttrTO result = new AttrTO();\n-        result.setSchema(template.getSchema());\n+    private void fillRelationshipsFromTemplate(final Map<Long, RelationshipTO> anyRelMap,\n+            final List<RelationshipTO> anyRels, final List<RelationshipTO> templateRels) {\n \n-        if (template.getValues() != null && !template.getValues().isEmpty()) {\n-            for (String value : template.getValues()) {\n-                String evaluated = JexlUtils.evaluate(value, anyTO);\n-                if (StringUtils.isNotBlank(evaluated)) {\n-                    result.getValues().add(evaluated);\n-                }\n+        for (RelationshipTO memb : templateRels) {\n+            if (!anyRelMap.containsKey(memb.getRightKey())) {\n+                anyRels.add(memb);\n             }\n         }\n+    }\n \n-        return result;\n+    private void fillMembershipsFromTemplate(final Map<Long, MembershipTO> anyMembMap,\n+            final List<MembershipTO> anyMembs, final List<MembershipTO> templateMembs) {\n+\n+        for (MembershipTO memb : templateMembs) {\n+            if (!anyMembMap.containsKey(memb.getRightKey())) {\n+                anyMembs.add(memb);\n+            }\n+        }\n     }\n \n     /**"},{"sha":"2efae81be78a68072e96b56b29f68c125a48af26","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -64,6 +64,7 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -230,7 +231,7 @@ private static Pair<String, Attribute> prepareAttr(\n \n         ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n         AnyUtilsFactory anyUtilsFactory = context.getBean(AnyUtilsFactory.class);\n-        ConnObjectUtils connObjectUtils = context.getBean(ConnObjectUtils.class);\n+        VirAttrHandler virAttrHandler = context.getBean(VirAttrHandler.class);\n \n         switch (mapItem.getIntMappingType().getAnyTypeKind()) {\n             case USER:\n@@ -243,7 +244,7 @@ private static Pair<String, Attribute> prepareAttr(\n                 if (any instanceof User) {\n                     UserDAO userDAO = context.getBean(UserDAO.class);\n                     for (Group group : userDAO.findAllGroups((User) any)) {\n-                        connObjectUtils.retrieveVirAttrValues(group);\n+                        virAttrHandler.retrieveVirAttrValues(group);\n                         anys.add(group);\n                     }\n                 } else if (any instanceof Group) {\n@@ -266,7 +267,7 @@ private static Pair<String, Attribute> prepareAttr(\n         PlainSchema schema = null;\n         boolean readOnlyVirSchema = false;\n         AttrSchemaType schemaType;\n-        final Pair<String, Attribute> result;\n+        Pair<String, Attribute> result;\n \n         switch (mapItem.getIntMappingType()) {\n             case UserPlainSchema:\n@@ -290,7 +291,7 @@ private static Pair<String, Attribute> prepareAttr(\n                 schemaType = AttrSchemaType.String;\n         }\n \n-        final String extAttrName = mapItem.getExtAttrName();\n+        String extAttrName = mapItem.getExtAttrName();\n \n         LOG.debug(\"Define mapping for: \"\n                 + \"\\n* ExtAttrName \" + extAttrName\n@@ -389,7 +390,7 @@ public static Name evaluateNAME(final Any<?, ?, ?> any,\n         if (StringUtils.isNotBlank(anyUtils.getConnObjectLink(provision))) {\n             final JexlContext jexlContext = new MapContext();\n             JexlUtils.addFieldsToContext(any, jexlContext);\n-            JexlUtils.addAttrsToContext(any.getPlainAttrs(), jexlContext);\n+            JexlUtils.addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n             JexlUtils.addDerAttrsToContext(any.getDerAttrs(), any.getPlainAttrs(), jexlContext);\n             evalConnObjectLink = JexlUtils.evaluate(anyUtils.getConnObjectLink(provision), jexlContext);\n         }\n@@ -443,6 +444,8 @@ public static List<PlainAttrValue> getIntValues(final Provision provision,\n \n         EntityFactory entityFactory =\n                 ApplicationContextProvider.getApplicationContext().getBean(EntityFactory.class);\n+        AnyUtilsFactory anyUtilsFactory =\n+                ApplicationContextProvider.getApplicationContext().getBean(AnyUtilsFactory.class);\n         List<PlainAttrValue> values = new ArrayList<>();\n         PlainAttrValue attrValue;\n         switch (mappingItem.getIntMappingType()) {\n@@ -472,6 +475,7 @@ public static List<PlainAttrValue> getIntValues(final Provision provision,\n             case GroupVirtualSchema:\n             case AnyVirtualSchema:\n                 for (Any<?, ?, ?> any : anys) {\n+                    AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n                     VirAttr<?> virAttr = any.getVirAttr(mappingItem.getIntAttrName());\n                     if (virAttr != null) {\n                         if (vAttrsToBeRemoved != null && vAttrsToBeUpdated != null) {\n@@ -488,7 +492,7 @@ public static List<PlainAttrValue> getIntValues(final Provision provision,\n                         }\n                         if (virAttr.getValues() != null) {\n                             for (String value : virAttr.getValues()) {\n-                                attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n+                                attrValue = anyUtils.newPlainAttrValue();\n                                 attrValue.setStringValue(value);\n                                 values.add(attrValue);\n                             }\n@@ -508,11 +512,10 @@ public static List<PlainAttrValue> getIntValues(final Provision provision,\n             case GroupDerivedSchema:\n             case AnyDerivedSchema:\n                 for (Any<?, ?, ?> any : anys) {\n+                    AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n                     DerAttr<?> derAttr = any.getDerAttr(mappingItem.getIntAttrName());\n                     if (derAttr != null) {\n-                        attrValue = any instanceof Group\n-                                ? entityFactory.newEntity(GPlainAttrValue.class)\n-                                : entityFactory.newEntity(UPlainAttrValue.class);\n+                        attrValue = anyUtils.newPlainAttrValue();\n                         attrValue.setStringValue(derAttr.getValue(any.getPlainAttrs()));\n                         values.add(attrValue);\n                     }\n@@ -529,7 +532,8 @@ public static List<PlainAttrValue> getIntValues(final Provision provision,\n             case GroupId:\n             case AnyId:\n                 for (Any<?, ?, ?> any : anys) {\n-                    attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n+                    AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+                    attrValue = anyUtils.newPlainAttrValue();\n                     attrValue.setStringValue(any.getKey().toString());\n                     values.add(attrValue);\n                 }\n@@ -600,7 +604,6 @@ public static List<PlainAttrValue> getIntValues(final Provision provision,\n      * @return connObjectKey internal value\n      */\n     public static String getConnObjectKeyValue(final Any<?, ?, ?> any, final Provision provision) {\n-\n         List<PlainAttrValue> values = getIntValues(provision, provision.getMapping().getConnObjectKeyItem(),\n                 Collections.<Any<?, ?, ?>>singletonList(any), null, null);\n         return values == null || values.isEmpty()"},{"sha":"9aad07941edd98ec25d8fdbdd2e8c80a1fe09416","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/jexl/JexlUtils.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -146,7 +146,7 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n         return context;\n     }\n \n-    public static JexlContext addAttrsToContext(final Collection<? extends PlainAttr<?>> attrs,\n+    public static JexlContext addPlainAttrsToContext(final Collection<? extends PlainAttr<?>> attrs,\n             final JexlContext jexlContext) {\n \n         JexlContext context = jexlContext == null\n@@ -215,11 +215,9 @@ public static JexlContext addVirAttrsToContext(final Collection<? extends VirAtt\n         return context;\n     }\n \n-    public static boolean evaluateMandatoryCondition(\n-            final String mandatoryCondition, final Any<?, ?, ?> any) {\n-\n+    public static boolean evaluateMandatoryCondition(final String mandatoryCondition, final Any<?, ?, ?> any) {\n         JexlContext jexlContext = new MapContext();\n-        addAttrsToContext(any.getPlainAttrs(), jexlContext);\n+        addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n         addDerAttrsToContext(any.getDerAttrs(), any.getPlainAttrs(), jexlContext);\n         addVirAttrsToContext(any.getVirAttrs(), jexlContext);\n \n@@ -229,8 +227,8 @@ public static boolean evaluateMandatoryCondition(\n     public static String evaluate(final String expression,\n             final Any<?, ?, ?> any, final Collection<? extends PlainAttr<?>> attributes) {\n \n-        final JexlContext jexlContext = new MapContext();\n-        JexlUtils.addAttrsToContext(attributes, jexlContext);\n+        JexlContext jexlContext = new MapContext();\n+        JexlUtils.addPlainAttrsToContext(attributes, jexlContext);\n         JexlUtils.addFieldsToContext(any, jexlContext);\n \n         // Evaluate expression using the context prepared before"},{"sha":"04f67dd99d253b1d70188b1c132d7e32531454b3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UnallowedSchemaException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUnallowedSchemaException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUnallowedSchemaException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUnallowedSchemaException.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+public class UnallowedSchemaException extends RuntimeException {\n+\n+    private static final long serialVersionUID = -9206535191442808016L;\n+\n+    public UnallowedSchemaException(final String schemaName) {\n+        super(schemaName + \" not allowed\");\n+    }\n+\n+}"},{"sha":"19d0f6b4435799643a004cdee300b0bd0a0031e6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/AnyObject.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -27,15 +27,15 @@ public interface AnyObject extends Any<APlainAttr, ADerAttr, AVirAttr> {\n \n     boolean remove(ARelationship relationship);\n \n-    ARelationship getRelationship(AnyObject rightEnd);\n+    ARelationship getRelationship(Long relationshipKey);\n \n     List<? extends ARelationship> getRelationships();\n \n     boolean add(AMembership membership);\n \n     boolean remove(AMembership membership);\n \n-    AMembership getMembership(Long groupKey);\n+    AMembership getMembership(Long membershipKey);\n \n     List<? extends AMembership> getMemberships();\n "},{"sha":"296de849504259c7bfcfef20ccf32f680202704a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/ProvisioningTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FProvisioningTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FProvisioningTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FProvisioningTask.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.task;\n \n-import java.util.List;\n+import java.util.Set;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -29,7 +29,7 @@ public interface ProvisioningTask extends SchedTask {\n \n     void setResource(ExternalResource resource);\n \n-    List<String> getActionsClassNames();\n+    Set<String> getActionsClassNames();\n \n     MatchingRule getMatchingRule();\n "},{"sha":"f02c55575de4d6c7f1c036319aca90ea0fbe213a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -23,7 +23,6 @@\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.Role;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n \n public interface User extends Any<UPlainAttr, UDerAttr, UVirAttr> {\n \n@@ -133,7 +132,7 @@ public interface User extends Any<UPlainAttr, UDerAttr, UVirAttr> {\n \n     boolean remove(URelationship relationship);\n \n-    URelationship getRelationship(AnyObject rightEnd);\n+    URelationship getRelationship(Long anyObjectKey);\n \n     List<? extends URelationship> getRelationships();\n "},{"sha":"ef2161e6228ccbfc04000fd9159c0ffee0f6f03f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -89,7 +89,8 @@ public A authFind(final Long key) {\n \n         A any = find(key);\n         if (any == null) {\n-            throw new NotFoundException(\"Any \" + key);\n+            throw new NotFoundException(StringUtils.substringBefore(\n+                    StringUtils.substringAfter(getClass().getSimpleName(), \"JPA\"), \"DAO\") + \" \" + key);\n         }\n \n         securityChecks(any);"},{"sha":"18b6636b82865a72e0f9024492ab0bf677f2ec05","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -102,7 +102,9 @@ public void delete(final String key) {\n             resourceDAO.deleteMapping(key, anyUtils.derIntMappingType());\n         }\n \n-        schema.getAnyTypeClass().remove(schema);\n+        if (schema.getAnyTypeClass() != null) {\n+            schema.getAnyTypeClass().remove(schema);\n+        }\n \n         entityManager.remove(schema);\n     }"},{"sha":"c3c94ce2390468e42ac527230e2f48af8480ad4e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -102,7 +102,9 @@ public void delete(final String key) {\n             resourceDAO.deleteMapping(key, anyUtils.plainIntMappingType());\n         }\n \n-        schema.getAnyTypeClass().remove(schema);\n+        if (schema.getAnyTypeClass() != null) {\n+            schema.getAnyTypeClass().remove(schema);\n+        }\n \n         entityManager.remove(schema);\n     }"},{"sha":"dae6afcbd771f3c10316a35c287686d3ded0855e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -102,7 +102,9 @@ public void delete(final String key) {\n             resourceDAO.deleteMapping(key, anyUtils.virIntMappingType());\n         }\n \n-        schema.getAnyTypeClass().remove(schema);\n+        if (schema.getAnyTypeClass() != null) {\n+            schema.getAnyTypeClass().remove(schema);\n+        }\n \n         entityManager.remove(schema);\n     }"},{"sha":"ec376492cd8ce623b67b33be476615228ccf71c5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAttr.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collections;\n import java.util.Set;\n+import org.apache.syncope.core.persistence.api.dao.UnallowedSchemaException;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.Attr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n@@ -53,7 +54,7 @@ protected void checkSchema(final S schema) {\n         }\n \n         if (!getAllowedSchemas(getOwner()).contains(schema)) {\n-            throw new IllegalArgumentException(schema + \" not allowed for this instance\");\n+            throw new UnallowedSchemaException(schema.getKey());\n         }\n     }\n }"},{"sha":"4500a4e724df4983109cde44a9745d83fe20a5a4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDerAttr.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -21,9 +21,6 @@\n import java.util.Collection;\n import javax.persistence.Column;\n import javax.persistence.FetchType;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n@@ -38,19 +35,10 @@\n \n     private static final long serialVersionUID = 4740924251090424771L;\n \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.AUTO)\n-    protected Long id;\n-\n     @ManyToOne(fetch = FetchType.EAGER)\n     @Column(name = \"schema_name\")\n     private JPADerSchema schema;\n \n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n     @Override\n     public DerSchema getSchema() {\n         return schema;"},{"sha":"aebc8da60eca8ee2b08b1e159b7661d7d4f07fd7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractVirAttr.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -22,9 +22,6 @@\n import java.util.List;\n import javax.persistence.Column;\n import javax.persistence.FetchType;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Transient;\n@@ -38,22 +35,13 @@\n \n     private static final long serialVersionUID = 5023204776925954907L;\n \n-    @Id\n-    @GeneratedValue(strategy = GenerationType.AUTO)\n-    protected Long id;\n-\n     @Transient\n     protected List<String> values = new ArrayList<>();\n \n     @ManyToOne(fetch = FetchType.EAGER)\n     @Column(name = \"schema_name\")\n     private JPAVirSchema schema;\n \n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n     @Override\n     public List<String> getValues() {\n         return values;"},{"sha":"1525de9554ef48f54d0554d463c6f6cfa5e33d61","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAADerAttr.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADerAttr.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n import javax.persistence.Entity;\n+import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADerAttr;\n@@ -33,9 +34,17 @@ public class JPAADerAttr extends AbstractDerAttr<AnyObject> implements ADerAttr\n \n     public static final String TABLE = \"ADerAttr\";\n \n+    @Id\n+    private Long id;\n+\n     @ManyToOne\n     private JPAAnyObject owner;\n \n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n     @Override\n     public AnyObject getOwner() {\n         return owner;"},{"sha":"62e2ea5f933773e3ac88f2e33be0445840e6a1b0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAVirAttr.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAVirAttr.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n import javax.persistence.Entity;\n+import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AVirAttr;\n@@ -33,9 +34,17 @@ public class JPAAVirAttr extends AbstractVirAttr<AnyObject> implements AVirAttr\n \n     public static final String TABLE = \"AVirAttr\";\n \n+    @Id\n+    private Long id;\n+\n     @ManyToOne\n     private JPAAnyObject owner;\n \n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n     @Override\n     public AnyObject getOwner() {\n         return owner;"},{"sha":"a8e842bfe1dce14c10c94288fdd7ff1cf696bf4d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -198,12 +198,12 @@ public boolean remove(final ARelationship relationship) {\n     }\n \n     @Override\n-    public ARelationship getRelationship(final AnyObject rightEnd) {\n+    public ARelationship getRelationship(final Long anyObjectKey) {\n         return CollectionUtils.find(getRelationships(), new Predicate<ARelationship>() {\n \n             @Override\n             public boolean evaluate(final ARelationship relationship) {\n-                return rightEnd != null && rightEnd.equals(relationship.getRightEnd());\n+                return anyObjectKey != null && anyObjectKey.equals(relationship.getRightEnd().getKey());\n             }\n         });\n     }"},{"sha":"73911f847b6cec23684cc4bba8a5e39d143898be","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGDerAttr.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerAttr.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.entity.group;\n \n import javax.persistence.Entity;\n+import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n@@ -33,9 +34,17 @@ public class JPAGDerAttr extends AbstractDerAttr<Group> implements GDerAttr {\n \n     public static final String TABLE = \"GDerAttr\";\n \n+    @Id\n+    private Long id;\n+\n     @ManyToOne\n     private JPAGroup owner;\n \n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n     @Override\n     public Group getOwner() {\n         return owner;"},{"sha":"47b8886b3bcdf8353d8eec099288b4b4798e5e6d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGVirAttr.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttr.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.entity.group;\n \n import javax.persistence.Entity;\n+import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n@@ -33,9 +34,17 @@ public class JPAGVirAttr extends AbstractVirAttr<Group> implements GVirAttr {\n \n     public static final String TABLE = \"GVirAttr\";\n \n+    @Id\n+    private Long id;\n+\n     @ManyToOne\n     private JPAGroup owner;\n \n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n     @Override\n     public Group getOwner() {\n         return owner;"},{"sha":"7af8491104cf286aa834e593a081195483421a72","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAAnyTemplate.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplate.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -87,7 +87,9 @@ public AnyTO get() {\n                 ? anyType == null\n                         ? null\n                         : new JPAAnyUtilsFactory().getInstance(anyType.getKind()).newAnyTO()\n-                : POJOHelper.deserialize(template, AnyTO.class);\n+                : anyType == null\n+                        ? null\n+                        : POJOHelper.deserialize(template, anyType.getKind().getToClass());\n     }\n \n     @Override"},{"sha":"0592a9d4c6225cf0a79f3874b2993a7a001de78e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTask.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javax.persistence.CascadeType;\n import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n@@ -48,7 +50,7 @@ public class JPAPushTask extends AbstractProvisioningTask implements PushTask {\n     @CollectionTable(name = \"PushTask_actionsClassNames\",\n             joinColumns =\n             @JoinColumn(name = \"pushTask_id\", referencedColumnName = \"id\"))\n-    private List<String> actionsClassNames = new ArrayList<>();\n+    private Set<String> actionsClassNames = new HashSet<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"pushTask\")\n     private List<JPAAnyFilter> filters = new ArrayList<>();\n@@ -61,7 +63,7 @@ public JPAPushTask() {\n     }\n \n     @Override\n-    public List<String> getActionsClassNames() {\n+    public Set<String> getActionsClassNames() {\n         return actionsClassNames;\n     }\n "},{"sha":"41eb4ea9f116f336287f80eb37833471af817774","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASyncTask.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.CollectionTable;\n@@ -57,7 +59,7 @@ public class JPASyncTask extends AbstractProvisioningTask implements SyncTask {\n     @CollectionTable(name = \"SyncTask_actionsClassNames\",\n             joinColumns =\n             @JoinColumn(name = \"syncTask_id\", referencedColumnName = \"id\"))\n-    private List<String> actionsClassNames = new ArrayList<>();\n+    private Set<String> actionsClassNames = new HashSet<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"syncTask\")\n     private List<JPAAnyTemplate> templates = new ArrayList<>();\n@@ -86,7 +88,7 @@ public void setDestinationRealm(final Realm destinationRealm) {\n     }\n \n     @Override\n-    public List<String> getActionsClassNames() {\n+    public Set<String> getActionsClassNames() {\n         return actionsClassNames;\n     }\n "},{"sha":"754fd59286fd4178a1d5e6845350cbf4d5f4495b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDerAttr.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerAttr.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.entity.user;\n \n import javax.persistence.Entity;\n+import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n@@ -33,9 +34,17 @@ public class JPAUDerAttr extends AbstractDerAttr<User> implements UDerAttr {\n \n     public static final String TABLE = \"UDerAttr\";\n \n+    @Id\n+    private Long id;\n+\n     @ManyToOne\n     private JPAUser owner;\n \n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n     @Override\n     public User getOwner() {\n         return owner;"},{"sha":"50ce967f4025f86c288b191e55aaa824205f9afe","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUPlainAttr.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -45,9 +45,6 @@ public class JPAUPlainAttr extends AbstractPlainAttr<User> implements UPlainAttr\n \n     public static final String TABLE = \"UPlainAttr\";\n \n-    /**\n-     * Auto-generated id for this table.\n-     */\n     @Id\n     private Long id;\n "},{"sha":"a6931cef98b1ee23743cfbd1c1384427f79579d2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUVirAttr.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.entity.user;\n \n import javax.persistence.Entity;\n+import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n@@ -33,9 +34,17 @@ public class JPAUVirAttr extends AbstractVirAttr<User> implements UVirAttr {\n \n     public static final String TABLE = \"UVirAttr\";\n \n+    @Id\n+    private Long id;\n+\n     @ManyToOne\n     private JPAUser owner;\n \n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n     @Override\n     public User getOwner() {\n         return owner;"},{"sha":"06d8f04011e11ef468d938789e287f4dfc91a08c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -65,7 +65,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Role;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractAny;\n@@ -538,12 +537,12 @@ public boolean remove(final URelationship relationship) {\n     }\n \n     @Override\n-    public URelationship getRelationship(final AnyObject rightEnd) {\n+    public URelationship getRelationship(final Long anyObjectKey) {\n         return CollectionUtils.find(getRelationships(), new Predicate<URelationship>() {\n \n             @Override\n             public boolean evaluate(final URelationship relationship) {\n-                return rightEnd != null && rightEnd.equals(relationship.getRightEnd());\n+                return anyObjectKey != null && anyObjectKey.equals(relationship.getRightEnd().getKey());\n             }\n         });\n     }"},{"sha":"a75e4b6a5d1292413c759387fd15870edbc37904","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -312,6 +312,56 @@ under the License.\n     </attributes>\n   </entity>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_ADerAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_ADerAttr\" pk-column-value=\"SEQ_ADerAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_UDerAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UDerAttr\" pk-column-value=\"SEQ_UDerAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_GDerAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_GDerAttr\" pk-column-value=\"SEQ_GDerAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AVirAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AVirAttr\" pk-column-value=\"SEQ_AVirAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_UVirAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UVirAttr\" pk-column-value=\"SEQ_UVirAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_GVirAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_GVirAttr\" pk-column-value=\"SEQ_GVirAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplate\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"a75e4b6a5d1292413c759387fd15870edbc37904","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -312,6 +312,56 @@ under the License.\n     </attributes>\n   </entity>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_ADerAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_ADerAttr\" pk-column-value=\"SEQ_ADerAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_UDerAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UDerAttr\" pk-column-value=\"SEQ_UDerAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_GDerAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_GDerAttr\" pk-column-value=\"SEQ_GDerAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AVirAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AVirAttr\" pk-column-value=\"SEQ_AVirAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_UVirAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UVirAttr\" pk-column-value=\"SEQ_UVirAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_GVirAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_GVirAttr\" pk-column-value=\"SEQ_GVirAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplate\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"6f835439de7c877a3bee72e3c2c6e96afc570fb5","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -360,6 +360,56 @@ under the License.\n     </attributes>\n   </entity>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_ADerAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_ADerAttr\" pk-column-value=\"SEQ_ADerAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_UDerAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UDerAttr\" pk-column-value=\"SEQ_UDerAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_GDerAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_GDerAttr\" pk-column-value=\"SEQ_GDerAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AVirAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AVirAttr\" pk-column-value=\"SEQ_AVirAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_UVirAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UVirAttr\" pk-column-value=\"SEQ_UVirAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_GVirAttr\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_GVirAttr\" pk-column-value=\"SEQ_GVirAttr\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplate\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"02815b813313036fed4e25169d07da1d37722613","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/VirAttrTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FVirAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FVirAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FVirAttrTest.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -60,7 +60,7 @@ public void findAll() {\n \n     @Test\n     public void findById() {\n-        UVirAttr attribute = virAttrDAO.find(1000L, UVirAttr.class);\n+        UVirAttr attribute = virAttrDAO.find(100L, UVirAttr.class);\n         assertNotNull(\"did not find expected attribute schema\", attribute);\n     }\n \n@@ -104,7 +104,7 @@ public void saveGVirAttribute() {\n \n     @Test\n     public void delete() {\n-        UVirAttr attribute = virAttrDAO.find(1000L, UVirAttr.class);\n+        UVirAttr attribute = virAttrDAO.find(100L, UVirAttr.class);\n         String attributeSchemaName = attribute.getSchema().getKey();\n \n         virAttrDAO.delete(attribute.getKey(), UVirAttr.class);"},{"sha":"60ff0417726dde6922ce279227f168de000ca13c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/AnyTypeTest.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAnyTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAnyTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAnyTypeTest.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -52,13 +52,8 @@ public void delete() {\n \n         anyTypeClassDAO.delete(\"other\");\n \n-        try {\n         anyTypeDAO.flush();\n-        } catch(Exception e) {\n-            System.err.println(\"EEEEEEEEEEEE\");\n-            e.printStackTrace();\n-        }\n-        \n+\n         userType = anyTypeDAO.findUser();\n         assertNotNull(userType);\n         assertEquals(before, userType.getClasses().size() + 1);"},{"sha":"7c123a7fa4c7e11ca6875381d18090de2c36b912","filename":"core/persistence-jpa/src/test/resources/content.xml","status":"modified","additions":24,"deletions":25,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -94,23 +94,23 @@ under the License.\n   \n   <!-- sample policies -->\n   <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"a sync policy\" type=\"SYNC\" \n-          specification='{\"userJavaRule\":null,\"groupJavaRule\":null,\"conflictResolutionAction\":\"IGNORE\",\"userAltSearchSchemas\":[],\"groupAltSearchSchemas\":[]}'/>\n+          specification='{\"conflictResolutionAction\":\"IGNORE\",\"items\":[]}'/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"2\" description=\"a password policy\" type=\"PASSWORD\" \n           specification='{\"historyLength\":1,\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[],\"allowNullPassword\":true}'/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" \n-          specification='{\"userJavaRule\":null,\"groupJavaRule\":null,\"conflictResolutionAction\":\"ALL\",\"userAltSearchSchemas\":[\"username\",\"firstname\"],\"groupAltSearchSchemas\":[]}'/>\n+          specification='{\"conflictResolutionAction\":\"ALL\",\"items\":[{\"anyTypeKey\":\"USER\",\"javaRule\":null,\"altSearchSchemas\":[\"username\",\"firstname\"]}]}'/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" \n           specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[], \"allowNullPassword\":true}'/>\n   <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"an account policy\" type=\"ACCOUNT\" \n           specification='{\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"maxAuthenticationAttempts\":0,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n   <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" \n           specification='{\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"maxAuthenticationAttempts\":3,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" \n-          specification='{\"userJavaRule\":null,\"groupJavaRule\":null,\"conflictResolutionAction\":\"IGNORE\",\"userAltSearchSchemas\":[],\"groupAltSearchSchemas\":[]}'/>\n+          specification='{\"conflictResolutionAction\":\"IGNORE\",\"items\":[]}'/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" \n           specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[],\"allowNullPassword\":false}'/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"9\" description=\"sync policy for java rule\" type=\"SYNC\" \n-          specification='{\"userJavaRule\":null,\"groupJavaRule\":null,\"conflictResolutionAction\":\"IGNORE\",\"userAltSearchSchemas\":[],\"groupAltSearchSchemas\":[]}'/>\n+          specification='{\"conflictResolutionAction\":\"IGNORE\",\"items\":[]}'/>\n \n   <AnyTypeClass name=\"generic membership\"/>\n \n@@ -307,6 +307,7 @@ under the License.\n   <DerSchema name=\"noschema\" expression=\"surname + ', ' + notfound\" anyTypeClass_name=\"other\"/>\n \n   <VirSchema name=\"virtualdata\" anyTypeClass_name=\"minimal user\"/>\n+  <VirSchema name=\"virtualReadOnly\" READONLY=\"1\"  anyTypeClass_name=\"minimal user\"/>\n \n   <PlainSchema name=\"icon\" type=\"String\" anyTypeClass_name=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>                \n@@ -328,7 +329,7 @@ under the License.\n \n   <VirSchema name=\"rvirtualdata\" anyTypeClass_name=\"minimal group\"/>\n \n-  <DerSchema name=\"rderivedschema\" expression=\"rderived_sx + '-' + rderived_dx\"/>\n+  <DerSchema name=\"rderivedschema\" expression=\"rderived_sx + '-' + rderived_dx\"  anyTypeClass_name=\"minimal group\"/>\n \n   <PlainSchema name=\"subscriptionDate\" type=\"Date\" anyTypeClass_name=\"generic membership\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n@@ -412,9 +413,7 @@ under the License.\n   <UPlainAttr id=\"126\" owner_id=\"3\" schema_name=\"type\"/>\n   <UPlainAttrValue id=\"37\" attribute_id=\"126\" stringValue=\"F\"/>\n     \n-  <UVirAttr id=\"1000\" schema_name=\"virtualdata\" owner_id=\"3\"/>\n-\n-  <VirSchema name=\"virtualReadOnly\" READONLY=\"1\"/>\n+  <UVirAttr id=\"100\" schema_name=\"virtualdata\" owner_id=\"3\"/>\n   \n   <UDerAttr id=\"100\" schema_name=\"cn\" owner_id=\"3\"/>\n   <UDerAttr id=\"101\" schema_name=\"cn\" owner_id=\"1\"/>\n@@ -446,13 +445,13 @@ under the License.\n   <GPlainAttr id=\"995\" owner_id=\"13\" schema_name=\"title\"/>\n   <GPlainAttrValue attribute_id=\"995\" id=\"95\" stringValue=\"r13\"/>\n \n-  <GDerAttr id=\"1000\" owner_id=\"1\" schema_name=\"rderiveddata\"/>\n+  <GDerAttr id=\"100\" owner_id=\"1\" schema_name=\"rderiveddata\"/>\n     \n-  <GDerAttr id=\"1001\" owner_id=\"1\" schema_name=\"displayProperty\"/>\n+  <GDerAttr id=\"101\" owner_id=\"1\" schema_name=\"displayProperty\"/>\n   \n-  <GDerAttr id=\"1002\" owner_id=\"4\" schema_name=\"displayProperty\"/>\n+  <GDerAttr id=\"102\" owner_id=\"4\" schema_name=\"displayProperty\"/>\n \n-  <GDerAttr id=\"1003\" owner_id=\"1\" schema_name=\"rderToBePropagated\"/>    \n+  <GDerAttr id=\"103\" owner_id=\"1\" schema_name=\"rderToBePropagated\"/>    \n \n   <GVirAttr id=\"98\" owner_id=\"4\" schema_name=\"rvirtualdata\"/>\n \n@@ -816,10 +815,10 @@ under the License.\n                connObjectKey=\"1\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"208\" extAttrName=\"theirgroup\" mapping_id=\"9\"\n                intAttrName=\"rderToBePropagated\" intMappingType=\"GroupDerivedSchema\" mandatoryCondition=\"false\"\n-               connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n+               connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"209\" extAttrName=\"membership\" mapping_id=\"9\"\n                intAttrName=\"mderToBePropagated\" intMappingType=\"AnyDerivedSchema\" mandatoryCondition=\"false\"\n-               connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n+               connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n                          \n   <Provision id=\"10\" resource_name=\"ws-target-resource-update-resetsynctoken\" anyType_name=\"USER\" objectClass=\"__ACCOUNT__\"\n              serializedSyncToken='{\"value\":null}'/>\n@@ -853,7 +852,7 @@ under the License.\n                extAttrName=\"title\" intAttrName=\"title\" intMappingType=\"GroupPlainSchema\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <MappingItem id=\"317\" connObjectKey=\"0\" password=\"0\" mapping_id=\"11\"\n-               extAttrName=\"postalAddress\" intAttrName=\"postalAddress\" intMappingType=\"AnyPlainSchema\"\n+               extAttrName=\"postalAddress\" intAttrName=\"postalAddress\" intMappingType=\"UserPlainSchema\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <MappingItem id=\"318\" connObjectKey=\"0\" password=\"0\" mapping_id=\"11\"\n                extAttrName=\"mail\" intAttrName=\"userId\" intMappingType=\"UserPlainSchema\"\n@@ -940,9 +939,9 @@ under the License.\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\"/>\n   <AnyTemplate id=\"41\" syncTask_id=\"4\" anyType_name=\"USER\"\n-               template='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[null]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"groupKey\":8,\"groupName\":null,\"plainAttrs\":[{\"schema\":\"subscriptionDate\",\"readonly\":false,\"values\":[\"&apos;2009-08-18T16:33:12.203+0200&apos;\"]}],\"derAttrs\":[],\"virAttrs\":[]}]}'/>\n+               template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[\"csv\"],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[\"\"]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[{\"leftType\":null,\"leftKey\":0,\"rightType\":\"GROUP\",\"rightKey\":8,\"groupName\":null}],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}]}'/>\n   <AnyTemplate id=\"42\" syncTask_id=\"4\" anyType_name=\"GROUP\"\n-               template='{\"creator\": null,\"creationDate\": null,\"lastModifier\": null,\"lastChangeDate\": null,\"key\": 0,\"name\": null,\"userOwner\": null,\"groupOwner\": null,\"plainAttrs\": [], \"derAttrs\": [],\"virAttrs\": [],\"resources\": [],\"propagationStatuses\": []}'/>\n+               template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"SchedTask\" type=\"SCHEDULED\" id=\"5\" name=\"SampleJob Task\" jobClassName=\"org.apache.syncope.core.provisioning.java.job.SampleJob\" cronExpression=\"0 0 0 1 * ?\"/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"6\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" anyKey=\"1\"\n@@ -951,10 +950,10 @@ under the License.\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"7\" name=\"TestDB Task\" resource_name=\"resource-testdb\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n-  <AnyTemplate id=\"61\" syncTask_id=\"7\" anyType_name=\"USER\"\n-               template='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[null]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"groupKey\":8,\"groupName\":null,\"plainAttrs\":[{\"schema\":\"subscriptionDate\",\"readonly\":false,\"values\":[\"&apos;2009-08-18T16:33:12.203+0200&apos;\"]}],\"derAttrs\":[],\"virAttrs\":[]}]}'/>\n-  <AnyTemplate id=\"62\" syncTask_id=\"7\" anyType_name=\"GROUP\"\n-               template='{\"creator\": null,\"creationDate\": null,\"lastModifier\": null,\"lastChangeDate\": null,\"key\": 0,\"name\": null,\"userOwner\": null,\"groupOwner\": null,\"plainAttrs\": [], \"derAttrs\": [],\"virAttrs\": [],\"resources\": [],\"propagationStatuses\": []}'/>\n+  <AnyTemplate id=\"71\" syncTask_id=\"7\" anyType_name=\"USER\"\n+               template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;surname&apos;\"]}]}'/>\n+  <AnyTemplate id=\"72\" syncTask_id=\"7\" anyType_name=\"GROUP\"\n+               template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"NotificationTask\" type=\"NOTIFICATION\" id=\"8\" sender=\"admin@prova.org\" subject=\"Notification for SYNCOPE-81\" \n         textBody=\"NOTIFICATION-81\" htmlBody=\"NOTIFICATION-81\" traceLevel=\"ALL\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"9\" name=\"TestDB2 Task\" resource_name=\"resource-testdb2\"\n@@ -967,9 +966,9 @@ under the License.\n         destinationRealm_id=\"1\" fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <AnyTemplate id=\"1\" syncTask_id=\"11\" anyType_name=\"USER\"\n-               template='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[null]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"groupKey\":8,\"groupName\":null,\"plainAttrs\":[{\"schema\":\"subscriptionDate\",\"readonly\":false,\"values\":[\"&apos;2009-08-18T16:33:12.203+0200&apos;\"]}],\"derAttrs\":[],\"virAttrs\":[]}]}'/>\n+               template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[{\"schema\":\"virtualReadOnly\",\"readonly\":true,\"values\":[\"\"]}],\"resources\":[\"resource-ldap\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[]}'/>\n   <AnyTemplate id=\"2\" syncTask_id=\"11\" anyType_name=\"GROUP\"\n-               template='{\"creator\": null,\"creationDate\": null,\"lastModifier\": null,\"lastChangeDate\": null,\"key\": 0,\"name\": null,\"userOwner\": null,\"groupOwner\": null,\"plainAttrs\": [], \"derAttrs\": [],\"virAttrs\": [],\"resources\": [],\"propagationStatuses\": []}'/>\n+               template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[{\"schema\":\"show\",\"readonly\":false,\"values\":[\"true\"]}]}'/>\n   <SyncTask_actionsClassNames SyncTask_id=\"11\" actionClassName=\"org.apache.syncope.core.provisioning.java.sync.LDAPMembershipSyncActions\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"12\" name=\"VirAttrCache test\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"0\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" fullReconciliation=\"1\"\n@@ -1044,9 +1043,9 @@ under the License.\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <AnyTemplate id=\"3\" syncTask_id=\"24\" anyType_name=\"USER\"\n-               template='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[null]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"groupKey\":8,\"groupName\":null,\"plainAttrs\":[{\"schema\":\"subscriptionDate\",\"readonly\":false,\"values\":[\"&apos;2009-08-18T16:33:12.203+0200&apos;\"]}],\"derAttrs\":[],\"virAttrs\":[]}]}'/>\n+               template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[{\"schema\":\"firstname\",\"readonly\":false,\"values\":[\"\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]}]}'/>\n   <AnyTemplate id=\"4\" syncTask_id=\"24\" anyType_name=\"GROUP\"\n-               template='{\"creator\": null,\"creationDate\": null,\"lastModifier\": null,\"lastChangeDate\": null,\"key\": 0,\"name\": null,\"userOwner\": null,\"groupOwner\": null,\"plainAttrs\": [], \"derAttrs\": [],\"virAttrs\": [],\"resources\": [],\"propagationStatuses\": []}'/>\n+               template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"25\" name=\"CSV (unlink matching; ignore unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\"/>"},{"sha":"4cec074a1b2e941296d9978a72c31e825d9ed2ec","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/VirAttrHandler.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api;\n+\n+import java.util.Collection;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+\n+public interface VirAttrHandler {\n+\n+    PropagationByResource fillVirtual(Any any, Set<String> vAttrsToBeRemoved, Set<AttrMod> vAttrsToBeUpdated);\n+\n+    /**\n+     * Add virtual attributes and specify values to be propagated.\n+     *\n+     * @param any any.\n+     * @param vAttrs virtual attributes to be added.\n+     */\n+    void fillVirtual(Any any, Collection<AttrTO> vAttrs);\n+\n+    /**\n+     * SYNCOPE-459: build virtual attribute changes in case no other changes were made.\n+     *\n+     * @param key any key\n+     * @param anyTypeKind type kind\n+     * @param vAttrsToBeRemoved virtual attributes to be removed.\n+     * @param vAttrsToBeUpdated virtual attributes to be updated.\n+     * @return operations to be performed on external resources for virtual attributes changes\n+     */\n+    PropagationByResource fillVirtual(\n+            Long key, AnyTypeKind anyTypeKind, Set<String> vAttrsToBeRemoved, Set<AttrMod> vAttrsToBeUpdated);\n+\n+    VirSchema getVirSchema(String virSchemaName);\n+\n+    /**\n+     * Query connected external resources for values to populated virtual attributes associated with the given owner.\n+     *\n+     * @param any any object\n+     */\n+    void retrieveVirAttrValues(Any<?, ?, ?> any);\n+\n+    void updateOnResourcesIfMappingMatches(\n+            Any<?, ?, ?> any, AnyUtils anyUtils, String schemaKey,\n+            Iterable<? extends ExternalResource> resources, IntMappingType mappingType,\n+            PropagationByResource propByRes);\n+\n+}"},{"sha":"18187be7a23a276fa2e0123523634ae4e0c5ac6c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AnyTypeClassDataBinder.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyTypeClassDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyTypeClassDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyTypeClassDataBinder.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+\n+public interface AnyTypeClassDataBinder {\n+\n+    AnyTypeClass create(AnyTypeClassTO anyTypeClassTO);\n+\n+    void update(AnyTypeClass anyTypeClass, AnyTypeClassTO anyTypeClassTO);\n+\n+    AnyTypeClassTO getAnyTypeClassTO(AnyTypeClass anyTypeClass);\n+}"},{"sha":"c29c2acaf4b12401ff65d1f0537a5f0c5dc111aa","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AnyTypeDataBinder.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyTypeDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyTypeDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyTypeDataBinder.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+\n+public interface AnyTypeDataBinder {\n+\n+    AnyType create(AnyTypeTO anyTypeTO);\n+\n+    void update(AnyType anyType, AnyTypeTO anyTypeTO);\n+\n+    AnyTypeTO getAnyTypeTO(AnyType anyType);\n+}"},{"sha":"fd6bcf1e7d7af9ebf269d07252120fb18f1e9f55","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -30,6 +30,8 @@\n import org.apache.syncope.common.lib.mod.AnyObjectMod;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n@@ -40,6 +42,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -102,6 +105,18 @@ public Pair<Long, List<PropagationStatus>> update(\n \n         List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(updated,\n                 anyObjectMod.getVirAttrsToRemove(), anyObjectMod.getVirAttrsToUpdate(), null);\n+        if (tasks.isEmpty()) {\n+            // SYNCOPE-459: take care of user virtual attributes ...\n+            PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n+                    updated.getResult(),\n+                    AnyTypeKind.ANY_OBJECT,\n+                    anyObjectMod.getVirAttrsToRemove(),\n+                    anyObjectMod.getVirAttrsToUpdate());\n+            tasks.addAll(!propByResVirAttr.isEmpty()\n+                    ? propagationManager.getAnyObjectUpdateTasks(updated, null, null, null)\n+                    : Collections.<PropagationTask>emptyList());\n+        }\n+\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {"},{"sha":"5661df4a207305480f1ed4b277a254786a7390eb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -47,6 +48,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n \n public class DefaultGroupProvisioningManager implements GroupProvisioningManager {\n@@ -65,6 +67,9 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager\n     @Autowired\n     protected GroupDAO groupDAO;\n \n+    @Autowired\n+    protected VirAttrHandler virtAttrHandler;\n+\n     @Override\n     public Pair<Long, List<PropagationStatus>> create(final GroupTO group) {\n         return create(group, Collections.<String>emptySet());\n@@ -119,6 +124,18 @@ public Pair<Long, List<PropagationStatus>> update(\n \n         List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(updated,\n                 groupMod.getVirAttrsToRemove(), groupMod.getVirAttrsToUpdate(), excludedResources);\n+        if (tasks.isEmpty()) {\n+            // SYNCOPE-459: take care of user virtual attributes ...\n+            PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n+                    updated.getResult(),\n+                    AnyTypeKind.GROUP,\n+                    groupMod.getVirAttrsToRemove(),\n+                    groupMod.getVirAttrsToUpdate());\n+            tasks.addAll(!propByResVirAttr.isEmpty()\n+                    ? propagationManager.getGroupUpdateTasks(updated, null, null, null)\n+                    : Collections.<PropagationTask>emptyList());\n+        }\n+\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {"},{"sha":"656bc7588bd4bbb64309108e92bf9da46944502f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -42,6 +43,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -120,6 +122,7 @@ public Pair<Long, List<PropagationStatus>> update(final UserMod userMod) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n             PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n                     updated.getResult().getKey().getKey(),\n+                    AnyTypeKind.USER,\n                     userMod.getVirAttrsToRemove(),\n                     userMod.getVirAttrsToUpdate());\n             tasks.addAll(!propByResVirAttr.isEmpty()"},{"sha":"6c11f8a46fb6607ba99818a96a765285ce023f46","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandler.java","status":"removed","additions":0,"deletions":238,"changes":238,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d8c9479dd1f14d8af8f2d5bd6ded992c40e2cfe6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d8c9479dd1f14d8af8f2d5bd6ded992c40e2cfe6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java?ref=d8c9479dd1f14d8af8f2d5bd6ded992c40e2cfe6","patch":"@@ -1,238 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n-import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Component\n-@Transactional(rollbackFor = { Throwable.class })\n-public class VirAttrHandler {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(VirAttrHandler.class);\n-\n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n-\n-    @Autowired\n-    private VirAttrDAO virAttrDAO;\n-\n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n-    public VirSchema getVirSchema(final String virSchemaName) {\n-        VirSchema virtualSchema = null;\n-        if (StringUtils.isNotBlank(virSchemaName)) {\n-            virtualSchema = virSchemaDAO.find(virSchemaName);\n-\n-            if (virtualSchema == null) {\n-                LOG.debug(\"Ignoring invalid virtual schema {}\", virSchemaName);\n-            }\n-        }\n-\n-        return virtualSchema;\n-    }\n-\n-    public void updateOnResourcesIfMappingMatches(final Any<?, ?, ?> any, final AnyUtils anyUtils,\n-            final String schemaKey, final Set<ExternalResource> resources, final IntMappingType mappingType,\n-            final PropagationByResource propByRes) {\n-\n-        for (ExternalResource resource : resources) {\n-            for (MappingItem mapItem : anyUtils.getMappingItems(\n-                    resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n-\n-                if (schemaKey.equals(mapItem.getIntAttrName()) && mapItem.getIntMappingType() == mappingType) {\n-                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-                }\n-            }\n-        }\n-    }\n-\n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    public PropagationByResource fillVirtual(final Any any,\n-            final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated, final AnyUtils anyUtils) {\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-\n-        Set<ExternalResource> externalResources = new HashSet<>();\n-        if (any instanceof User) {\n-            externalResources.addAll(userDAO.findAllResources((User) any));\n-        } else if (any instanceof Group) {\n-            externalResources.addAll(((Group) any).getResources());\n-        } else if (any instanceof AnyObject) {\n-            externalResources.addAll(anyObjectDAO.findAllResources((AnyObject) any));\n-        }\n-\n-        // 1. virtual attributes to be removed\n-        for (String vAttrToBeRemoved : vAttrsToBeRemoved) {\n-            VirSchema virSchema = getVirSchema(vAttrToBeRemoved);\n-            if (virSchema != null) {\n-                VirAttr virAttr = any.getVirAttr(virSchema.getKey());\n-                if (virAttr == null) {\n-                    LOG.debug(\"No virtual attribute found for schema {}\", virSchema.getKey());\n-                } else {\n-                    any.remove(virAttr);\n-                    virAttrDAO.delete(virAttr);\n-                }\n-\n-                for (ExternalResource resource : externalResources) {\n-                    for (MappingItem mapItem : anyUtils.getMappingItems(\n-                            resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n-\n-                        if (virSchema.getKey().equals(mapItem.getIntAttrName())\n-                                && mapItem.getIntMappingType() == anyUtils.virIntMappingType()) {\n-\n-                            propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-\n-                            // Using virtual attribute as ConnObjectKey must be avoided\n-                            if (mapItem.isConnObjectKey() && virAttr != null && !virAttr.getValues().isEmpty()) {\n-                                propByRes.addOldConnObjectKey(resource.getKey(), virAttr.getValues().get(0).toString());\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        LOG.debug(\"Virtual attributes to be removed:\\n{}\", propByRes);\n-\n-        // 2. virtual attributes to be updated\n-        for (AttrMod vAttrToBeUpdated : vAttrsToBeUpdated) {\n-            VirSchema virSchema = getVirSchema(vAttrToBeUpdated.getSchema());\n-            VirAttr virAttr = null;\n-            if (virSchema != null) {\n-                virAttr = any.getVirAttr(virSchema.getKey());\n-                if (virAttr == null) {\n-                    virAttr = anyUtils.newVirAttr();\n-                    virAttr.setSchema(virSchema);\n-                    if (virAttr.getSchema() == null) {\n-                        LOG.debug(\"Ignoring {} because no valid schema was found\", vAttrToBeUpdated);\n-                    } else {\n-                        any.add(virAttr);\n-                    }\n-                }\n-            }\n-\n-            if (virSchema != null && virAttr != null && virAttr.getSchema() != null) {\n-                updateOnResourcesIfMappingMatches(any, anyUtils, virSchema.getKey(),\n-                        externalResources, anyUtils.derIntMappingType(), propByRes);\n-\n-                List<String> values = new ArrayList<>(virAttr.getValues());\n-                values.removeAll(vAttrToBeUpdated.getValuesToBeRemoved());\n-                values.addAll(vAttrToBeUpdated.getValuesToBeAdded());\n-\n-                virAttr.getValues().clear();\n-                virAttr.getValues().addAll(values);\n-\n-                // Owner cannot be specified before otherwise a virtual attribute remove will be invalidated.\n-                virAttr.setOwner(any);\n-            }\n-        }\n-\n-        LOG.debug(\"Virtual attributes to be added:\\n{}\", propByRes);\n-\n-        return propByRes;\n-    }\n-\n-    /**\n-     * Add virtual attributes and specify values to be propagated.\n-     *\n-     * @param any any.\n-     * @param vAttrs virtual attributes to be added.\n-     * @param anyUtils utils\n-     */\n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    public void fillVirtual(final Any any, final Collection<AttrTO> vAttrs, final AnyUtils anyUtils) {\n-        for (AttrTO attrTO : vAttrs) {\n-            VirAttr virAttr = any.getVirAttr(attrTO.getSchema());\n-            if (virAttr == null) {\n-                VirSchema virSchema = getVirSchema(attrTO.getSchema());\n-                if (virSchema != null) {\n-                    virAttr = anyUtils.newVirAttr();\n-                    virAttr.setSchema(virSchema);\n-                    if (virAttr.getSchema() == null) {\n-                        LOG.debug(\"Ignoring {} because no valid schema was found\", attrTO);\n-                    } else {\n-                        virAttr.setOwner(any);\n-                        any.add(virAttr);\n-                        virAttr.getValues().clear();\n-                        virAttr.getValues().addAll(attrTO.getValues());\n-                    }\n-                }\n-            } else {\n-                virAttr.getValues().clear();\n-                virAttr.getValues().addAll(attrTO.getValues());\n-            }\n-        }\n-    }\n-\n-    /**\n-     * SYNCOPE-459: build virtual attribute changes in case no other changes were made.\n-     *\n-     * @param key user id\n-     * @param vAttrsToBeRemoved virtual attributes to be removed.\n-     * @param vAttrsToBeUpdated virtual attributes to be updated.\n-     * @return operations to be performed on external resources for virtual attributes changes\n-     */\n-    public PropagationByResource fillVirtual(\n-            final Long key, final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated) {\n-\n-        return fillVirtual(\n-                anyObjectDAO.authFind(key),\n-                vAttrsToBeRemoved,\n-                vAttrsToBeUpdated,\n-                anyUtilsFactory.getInstance(AnyTypeKind.USER));\n-    }\n-}"},{"sha":"21626f5aa91ec6cb6c73a821f77cff1579e56f0c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"added","additions":411,"deletions":0,"changes":411,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,411 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java;\n+\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.misc.MappingUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheValue;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+@Transactional(rollbackFor = { Throwable.class })\n+public class VirAttrHandlerImpl implements VirAttrHandler {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(VirAttrHandler.class);\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    private VirAttrDAO virAttrDAO;\n+\n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    @Autowired\n+    private ConnectorFactory connFactory;\n+\n+    /**\n+     * Virtual attribute cache.\n+     */\n+    @Autowired\n+    private VirAttrCache virAttrCache;\n+\n+    @Override\n+    public VirSchema getVirSchema(final String virSchemaName) {\n+        VirSchema virtualSchema = null;\n+        if (StringUtils.isNotBlank(virSchemaName)) {\n+            virtualSchema = virSchemaDAO.find(virSchemaName);\n+\n+            if (virtualSchema == null) {\n+                LOG.debug(\"Ignoring invalid virtual schema {}\", virSchemaName);\n+            }\n+        }\n+\n+        return virtualSchema;\n+    }\n+\n+    @Override\n+    public void updateOnResourcesIfMappingMatches(final Any<?, ?, ?> any, final AnyUtils anyUtils,\n+            final String schemaKey, final Iterable<? extends ExternalResource> resources,\n+            final IntMappingType mappingType, final PropagationByResource propByRes) {\n+\n+        for (ExternalResource resource : resources) {\n+            for (MappingItem mapItem : anyUtils.getMappingItems(\n+                    resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n+\n+                if (schemaKey.equals(mapItem.getIntAttrName()) && mapItem.getIntMappingType() == mappingType) {\n+                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+                }\n+            }\n+        }\n+    }\n+\n+    private Iterable<? extends ExternalResource> getAllResources(final Any<?, ?, ?> any) {\n+        return any instanceof User\n+                ? userDAO.findAllResources((User) any)\n+                : any instanceof AnyObject\n+                        ? anyObjectDAO.findAllResources((AnyObject) any)\n+                        : any instanceof Group\n+                                ? ((Group) any).getResources()\n+                                : Collections.<ExternalResource>emptySet();\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    @Override\n+    public PropagationByResource fillVirtual(final Any any,\n+            final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated) {\n+\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+\n+        Iterable<? extends ExternalResource> externalResources = getAllResources(any);\n+\n+        // 1. virtual attributes to be removed\n+        for (String vAttrToBeRemoved : vAttrsToBeRemoved) {\n+            VirSchema virSchema = getVirSchema(vAttrToBeRemoved);\n+            if (virSchema != null) {\n+                VirAttr virAttr = any.getVirAttr(virSchema.getKey());\n+                if (virAttr == null) {\n+                    LOG.debug(\"No virtual attribute found for schema {}\", virSchema.getKey());\n+                } else {\n+                    any.remove(virAttr);\n+                    virAttrDAO.delete(virAttr);\n+                }\n+\n+                for (ExternalResource resource : externalResources) {\n+                    for (MappingItem mapItem : anyUtils.getMappingItems(\n+                            resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n+\n+                        if (virSchema.getKey().equals(mapItem.getIntAttrName())\n+                                && mapItem.getIntMappingType() == anyUtils.virIntMappingType()) {\n+\n+                            propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+\n+                            // Using virtual attribute as ConnObjectKey must be avoided\n+                            if (mapItem.isConnObjectKey() && virAttr != null && !virAttr.getValues().isEmpty()) {\n+                                propByRes.addOldConnObjectKey(resource.getKey(), virAttr.getValues().get(0).toString());\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        LOG.debug(\"Virtual attributes to be removed:\\n{}\", propByRes);\n+\n+        // 2. virtual attributes to be updated\n+        for (AttrMod vAttrToBeUpdated : vAttrsToBeUpdated) {\n+            VirSchema virSchema = getVirSchema(vAttrToBeUpdated.getSchema());\n+            if (virSchema != null) {\n+                VirAttr virAttr = any.getVirAttr(virSchema.getKey());\n+                if (virAttr == null) {\n+                    virAttr = anyUtils.newVirAttr();\n+                    virAttr.setOwner(any);\n+                    virAttr.setSchema(virSchema);\n+\n+                    any.add(virAttr);\n+                }\n+\n+                updateOnResourcesIfMappingMatches(any, anyUtils, virSchema.getKey(),\n+                        externalResources, anyUtils.derIntMappingType(), propByRes);\n+\n+                List<String> values = new ArrayList<>(virAttr.getValues());\n+                values.removeAll(vAttrToBeUpdated.getValuesToBeRemoved());\n+                values.addAll(vAttrToBeUpdated.getValuesToBeAdded());\n+\n+                virAttr.getValues().clear();\n+                virAttr.getValues().addAll(values);\n+            }\n+        }\n+\n+        LOG.debug(\"Virtual attributes to be added:\\n{}\", propByRes);\n+\n+        return propByRes;\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    @Override\n+    public void fillVirtual(final Any any, final Collection<AttrTO> vAttrs) {\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+\n+        for (AttrTO attrTO : vAttrs) {\n+            VirAttr virAttr = any.getVirAttr(attrTO.getSchema());\n+            if (virAttr == null) {\n+                VirSchema virSchema = getVirSchema(attrTO.getSchema());\n+                if (virSchema != null) {\n+                    virAttr = anyUtils.newVirAttr();\n+                    virAttr.setSchema(virSchema);\n+                    if (virAttr.getSchema() == null) {\n+                        LOG.debug(\"Ignoring {} because no valid schema was found\", attrTO);\n+                    } else {\n+                        virAttr.setOwner(any);\n+                        any.add(virAttr);\n+                        virAttr.getValues().clear();\n+                        virAttr.getValues().addAll(attrTO.getValues());\n+                    }\n+                }\n+            } else {\n+                virAttr.getValues().clear();\n+                virAttr.getValues().addAll(attrTO.getValues());\n+            }\n+        }\n+    }\n+\n+    private Any<?, ?, ?> find(final Long key, final AnyTypeKind anyTypeKind) {\n+        Any<?, ?, ?> result;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = userDAO.authFind(key);\n+                break;\n+\n+            case GROUP:\n+                result = groupDAO.authFind(key);\n+                break;\n+\n+            case ANY_OBJECT:\n+            default:\n+                result = anyObjectDAO.authFind(key);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Transactional\n+    @Override\n+    public PropagationByResource fillVirtual(\n+            final Long key, final AnyTypeKind anyTypeKind,\n+            final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated) {\n+\n+        return fillVirtual(\n+                find(key, anyTypeKind),\n+                vAttrsToBeRemoved,\n+                vAttrsToBeUpdated);\n+    }\n+\n+    @Override\n+    public void retrieveVirAttrValues(final Any<?, ?, ?> any) {\n+        IntMappingType type = any.getType().getKind() == AnyTypeKind.USER\n+                ? IntMappingType.UserVirtualSchema\n+                : any.getType().getKind() == AnyTypeKind.GROUP\n+                        ? IntMappingType.GroupVirtualSchema\n+                        : IntMappingType.AnyVirtualSchema;\n+\n+        Map<String, ConnectorObject> resources = new HashMap<>();\n+\n+        // -----------------------\n+        // Retrieve virtual attribute values if and only if they have not been retrieved yet\n+        // -----------------------\n+        for (VirAttr<?> virAttr : any.getVirAttrs()) {\n+            // reset value set\n+            if (virAttr.getValues().isEmpty()) {\n+                retrieveVirAttrValue(any, virAttr, type, resources);\n+            }\n+        }\n+        // -----------------------\n+    }\n+\n+    private void retrieveVirAttrValue(\n+            final Any<?, ?, ?> any,\n+            final VirAttr<?> virAttr,\n+            final IntMappingType type,\n+            final Map<String, ConnectorObject> externalResources) {\n+\n+        String schemaName = virAttr.getSchema().getKey();\n+        VirAttrCacheValue virAttrCacheValue = virAttrCache.get(any.getType().getKey(), any.getKey(), schemaName);\n+\n+        LOG.debug(\"Retrieve values for virtual attribute {} ({})\", schemaName, type);\n+\n+        if (virAttrCache.isValidEntry(virAttrCacheValue)) {\n+            // cached ...\n+            LOG.debug(\"Values found in cache {}\", virAttrCacheValue);\n+            virAttr.getValues().clear();\n+            virAttr.getValues().addAll(new ArrayList<>(virAttrCacheValue.getValues()));\n+        } else {\n+            // not cached ...\n+            LOG.debug(\"Need one or more remote connections\");\n+\n+            VirAttrCacheValue toBeCached = new VirAttrCacheValue();\n+\n+            AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+\n+            for (ExternalResource resource : getTargetResources(virAttr, type, anyUtils, any.getType())) {\n+                Provision provision = resource.getProvision(any.getType());\n+                LOG.debug(\"Search values into {},{}\", resource, provision);\n+\n+                try {\n+                    List<MappingItem> mappings = anyUtils.getMappingItems(provision, MappingPurpose.BOTH);\n+\n+                    ConnectorObject connectorObject;\n+                    if (externalResources.containsKey(resource.getKey())) {\n+                        connectorObject = externalResources.get(resource.getKey());\n+                    } else {\n+                        LOG.debug(\"Perform connection to {}\", resource.getKey());\n+                        String connObjectKey = anyUtils.getConnObjectKeyItem(provision) == null\n+                                ? null\n+                                : MappingUtils.getConnObjectKeyValue(any, provision);\n+\n+                        if (StringUtils.isBlank(connObjectKey)) {\n+                            throw new IllegalArgumentException(\"No ConnObjectKey found for \" + resource.getKey());\n+                        }\n+\n+                        Connector connector = connFactory.getConnector(resource);\n+\n+                        OperationOptions oo =\n+                                connector.getOperationOptions(MappingUtils.getMatchingMappingItems(mappings, type));\n+\n+                        connectorObject =\n+                                connector.getObject(provision.getObjectClass(), new Uid(connObjectKey), oo);\n+                        externalResources.put(resource.getKey(), connectorObject);\n+                    }\n+\n+                    if (connectorObject != null) {\n+                        // ask for searched virtual attribute value\n+                        Collection<MappingItem> virAttrMappings =\n+                                MappingUtils.getMatchingMappingItems(mappings, schemaName, type);\n+\n+                        // the same virtual attribute could be mapped with one or more external attribute \n+                        for (MappingItem mapping : virAttrMappings) {\n+                            Attribute attribute = connectorObject.getAttributeByName(mapping.getExtAttrName());\n+\n+                            if (attribute != null && attribute.getValue() != null) {\n+                                for (Object obj : attribute.getValue()) {\n+                                    if (obj != null) {\n+                                        virAttr.getValues().add(obj.toString());\n+                                    }\n+                                }\n+                            }\n+                        }\n+\n+                        toBeCached.setResourceValues(resource.getKey(), new HashSet<>(virAttr.getValues()));\n+\n+                        LOG.debug(\"Retrieved values {}\", virAttr.getValues());\n+                    }\n+                } catch (Exception e) {\n+                    LOG.error(\"Error reading connector object from {}\", resource.getKey(), e);\n+\n+                    if (virAttrCacheValue != null) {\n+                        toBeCached.forceExpiring();\n+                        LOG.debug(\"Search for a cached value (even expired!) ...\");\n+                        final Set<String> cachedValues = virAttrCacheValue.getValues(resource.getKey());\n+                        if (cachedValues != null) {\n+                            LOG.debug(\"Use cached value {}\", cachedValues);\n+                            virAttr.getValues().addAll(cachedValues);\n+                            toBeCached.setResourceValues(resource.getKey(), new HashSet<>(cachedValues));\n+                        }\n+                    }\n+                }\n+            }\n+\n+            virAttrCache.put(any.getType().getKey(), any.getKey(), schemaName, toBeCached);\n+        }\n+    }\n+\n+    private Collection<ExternalResource> getTargetResources(\n+            final VirAttr<?> attr, final IntMappingType type, final AnyUtils anyUtils, final AnyType anyType) {\n+\n+        return CollectionUtils.select(getAllResources(attr.getOwner()), new Predicate<ExternalResource>() {\n+\n+            @Override\n+            public boolean evaluate(final ExternalResource resource) {\n+                return resource.getProvision(anyType) != null\n+                        && !MappingUtils.getMatchingMappingItems(\n+                                anyUtils.getMappingItems(resource.getProvision(anyType), MappingPurpose.BOTH),\n+                                attr.getSchema().getKey(), type).isEmpty();\n+            }\n+        });\n+    }\n+}"},{"sha":"4a8a35b9291a9cb1ee7cafb575f62f325e629576","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":162,"deletions":100,"changes":262,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,21 +18,26 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.mod.AnyMod;\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n@@ -60,21 +65,25 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.misc.ConnObjectUtils;\n-import org.apache.syncope.core.provisioning.java.VirAttrHandler;\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.Relationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -83,9 +92,17 @@ abstract class AbstractAnyDataBinder {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractAnyDataBinder.class);\n \n+    private static final IntMappingType[] FOR_MANDATORY = new IntMappingType[] {\n+        IntMappingType.AnyPlainSchema, IntMappingType.AnyDerivedSchema,\n+        IntMappingType.UserPlainSchema, IntMappingType.UserDerivedSchema,\n+        IntMappingType.GroupPlainSchema, IntMappingType.GroupDerivedSchema };\n+\n     @Autowired\n     protected RealmDAO realmDAO;\n \n+    @Autowired\n+    protected AnyTypeClassDAO anyTypeClassDAO;\n+\n     @Autowired\n     protected AnyObjectDAO anyObjectDAO;\n \n@@ -129,7 +146,7 @@ abstract class AbstractAnyDataBinder {\n     protected AnyUtilsFactory anyUtilsFactory;\n \n     @Autowired\n-    protected VirAttrHandler virtAttrHander;\n+    protected VirAttrHandler virAttrHander;\n \n     @Autowired\n     protected ConnObjectUtils connObjectUtils;\n@@ -138,7 +155,7 @@ protected void setRealm(final Any<?, ?, ?> any, final AnyMod anyMod) {\n         if (StringUtils.isNotBlank(anyMod.getRealm())) {\n             Realm newRealm = realmDAO.find(anyMod.getRealm());\n             if (newRealm == null) {\n-                LOG.warn(\"Invalid realm specified: {}, ignoring\", anyMod.getRealm());\n+                LOG.debug(\"Invalid realm specified: {}, ignoring\", anyMod.getRealm());\n             } else {\n                 any.setRealm(newRealm);\n             }\n@@ -155,7 +172,6 @@ protected PlainSchema getPlainSchema(final String schemaName) {\n                 LOG.debug(\"Ignoring invalid schema {}\", schemaName);\n             } else if (schema.isReadonly()) {\n                 schema = null;\n-\n                 LOG.debug(\"Ignoring readonly schema {}\", schemaName);\n             }\n         }\n@@ -175,7 +191,7 @@ private DerSchema getDerSchema(final String derSchemaName) {\n         return schema;\n     }\n \n-    protected void fillAttribute(final List<String> values, final AnyUtils anyUtils,\n+    private void fillAttribute(final List<String> values, final AnyUtils anyUtils,\n             final PlainSchema schema, final PlainAttr<?> attr, final SyncopeClientException invalidValues) {\n \n         // if schema is multivalue, all values are considered for addition;\n@@ -201,85 +217,79 @@ protected void fillAttribute(final List<String> values, final AnyUtils anyUtils,\n         }\n     }\n \n-    private boolean evaluateMandatoryCondition(final AnyUtils anyUtils, final ExternalResource resource,\n-            final Any<?, ?, ?> any, final String intAttrName, final IntMappingType intMappingType) {\n+    private List<String> evaluateMandatoryCondition(final Provision provision, final Any<?, ?, ?> any) {\n+        List<String> missingAttrNames = new ArrayList<>();\n+\n+        if (provision != null) {\n+            for (MappingItem item : provision.getMapping().getItems()) {\n+                if (ArrayUtils.contains(FOR_MANDATORY, item.getIntMappingType())\n+                        && (item.getPurpose() == MappingPurpose.PROPAGATION\n+                        || item.getPurpose() == MappingPurpose.BOTH)) {\n \n-        boolean result = false;\n+                    List<PlainAttrValue> values = MappingUtils.getIntValues(\n+                            provision, item, Collections.<Any<?, ?, ?>>singletonList(any), null, null);\n+                    if ((values == null || values.isEmpty())\n+                            && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any)) {\n \n-        Collection<MappingItem> mappings = MappingUtils.getMatchingMappingItems(\n-                anyUtils.getMappingItems(resource.getProvision(any.getType()), MappingPurpose.PROPAGATION),\n-                intAttrName, intMappingType);\n-        for (Iterator<MappingItem> itor = mappings.iterator(); itor.hasNext() && !result;) {\n-            MappingItem mapping = itor.next();\n-            result |= JexlUtils.evaluateMandatoryCondition(mapping.getMandatoryCondition(), any);\n+                        missingAttrNames.add(item.getIntAttrName());\n+                    }\n+                }\n+            }\n         }\n \n-        return result;\n+        return missingAttrNames;\n     }\n \n-    private boolean evaluateMandatoryCondition(final AnyUtils anyUtils,\n-            final Any<?, ?, ?> any, final String intAttrName, final IntMappingType intMappingType) {\n+    private SyncopeClientException checkMandatoryOnResources(\n+            final Any<?, ?, ?> any, final Set<ExternalResource> resources) {\n \n-        boolean result = false;\n+        SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n-        Iterable<? extends ExternalResource> iterable = any instanceof User\n-                ? userDAO.findAllResources((User) any)\n-                : any instanceof Group\n-                        ? ((Group) any).getResources()\n-                        : Collections.<ExternalResource>emptySet();\n-\n-        for (Iterator<? extends ExternalResource> itor = iterable.iterator(); itor.hasNext() && !result;) {\n-            ExternalResource resource = itor.next();\n-            if (resource.isEnforceMandatoryCondition()) {\n-                result |= evaluateMandatoryCondition(\n-                        anyUtils, resource, any, intAttrName, intMappingType);\n+        for (ExternalResource resource : resources) {\n+            Provision provision = resource.getProvision(any.getType());\n+            if (resource.isEnforceMandatoryCondition() && provision != null) {\n+                List<String> missingAttrNames = evaluateMandatoryCondition(provision, any);\n+                if (!missingAttrNames.isEmpty()) {\n+                    LOG.error(\"Mandatory schemas {} not provided with values\", missingAttrNames);\n+\n+                    reqValMissing.getElements().addAll(missingAttrNames);\n+                }\n             }\n         }\n \n-        return result;\n+        return reqValMissing;\n     }\n \n-    private SyncopeClientException checkMandatory(final AnyUtils anyUtils, final Any<?, ?, ?> any) {\n+    private SyncopeClientException checkMandatory(final Any<?, ?, ?> any) {\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n         for (PlainSchema schema : any.getAllowedPlainSchemas()) {\n             if (any.getPlainAttr(schema.getKey()) == null\n                     && !schema.isReadonly()\n-                    && (JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any)\n-                    || evaluateMandatoryCondition(anyUtils, any, schema.getKey(),\n-                            anyUtils.plainIntMappingType()))) {\n+                    && (JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any))) {\n \n                 LOG.error(\"Mandatory schema \" + schema.getKey() + \" not provided with values\");\n \n                 reqValMissing.getElements().add(schema.getKey());\n             }\n         }\n \n-        for (DerSchema derSchema : any.getAllowedDerSchemas()) {\n-            if (any.getDerAttr(derSchema.getKey()) == null\n-                    && evaluateMandatoryCondition(anyUtils, any, derSchema.getKey(),\n-                            anyUtils.derIntMappingType())) {\n-\n-                LOG.error(\"Mandatory derived schema \" + derSchema.getKey() + \" does not evaluate to any value\");\n-\n-                reqValMissing.getElements().add(derSchema.getKey());\n-            }\n-        }\n-\n-        for (VirSchema virSchema : any.getAllowedVirSchemas()) {\n-            if (any.getVirAttr(virSchema.getKey()) == null\n-                    && !virSchema.isReadonly()\n-                    && evaluateMandatoryCondition(anyUtils, any, virSchema.getKey(),\n-                            anyUtils.virIntMappingType())) {\n+        return reqValMissing;\n+    }\n \n-                LOG.error(\"Mandatory virtual schema \" + virSchema.getKey() + \" not provided with values\");\n+    private Set<ExternalResource> getAllResources(final Any<?, ?, ?> any) {\n+        Set<ExternalResource> resources = new HashSet<>();\n \n-                reqValMissing.getElements().add(virSchema.getKey());\n-            }\n+        if (any instanceof User) {\n+            resources.addAll(userDAO.findAllResources((User) any));\n+        } else if (any instanceof Group) {\n+            resources.addAll(((Group) any).getResources());\n+        } else if (any instanceof AnyObject) {\n+            resources.addAll(anyObjectDAO.findAllResources((AnyObject) any));\n         }\n \n-        return reqValMissing;\n+        return resources;\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n@@ -288,9 +298,29 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n+        // 1. anyTypeClass to be removed\n+        for (String className : anyMod.getAuxClassesToRemove()) {\n+            AnyTypeClass auxClass = anyTypeClassDAO.find(className);\n+            if (auxClass == null) {\n+                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", auxClass);\n+            } else {\n+                any.remove(auxClass);\n+            }\n+        }\n+\n+        // 2. anyTypeClass to be added\n+        for (String className : anyMod.getAuxClassesToAdd()) {\n+            AnyTypeClass auxClass = anyTypeClassDAO.find(className);\n+            if (auxClass == null) {\n+                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", auxClass);\n+            } else {\n+                any.add(auxClass);\n+            }\n+        }\n+\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n-        // 1. resources to be removed\n+        // 3. resources to be removed\n         for (String resourceToBeRemoved : anyMod.getResourcesToRemove()) {\n             ExternalResource resource = resourceDAO.find(resourceToBeRemoved);\n             if (resource != null) {\n@@ -301,7 +331,7 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n \n         LOG.debug(\"Resources to be removed:\\n{}\", propByRes);\n \n-        // 2. resources to be added\n+        // 4. resources to be added\n         for (String resourceToBeAdded : anyMod.getResourcesToAdd()) {\n             ExternalResource resource = resourceDAO.find(resourceToBeAdded);\n             if (resource != null) {\n@@ -312,16 +342,9 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n \n         LOG.debug(\"Resources to be added:\\n{}\", propByRes);\n \n-        Set<ExternalResource> externalResources = new HashSet<>();\n-        if (any instanceof User) {\n-            externalResources.addAll(userDAO.findAllResources((User) any));\n-        } else if (any instanceof Group) {\n-            externalResources.addAll(((Group) any).getResources());\n-        } else if (any instanceof AnyObject) {\n-            externalResources.addAll(anyObjectDAO.findAllResources((AnyObject) any));\n-        }\n+        Set<ExternalResource> resources = getAllResources(any);\n \n-        // 3. attributes to be removed\n+        // 5. attributes to be removed\n         for (String attributeToBeRemoved : anyMod.getPlainAttrsToRemove()) {\n             PlainSchema schema = getPlainSchema(attributeToBeRemoved);\n             if (schema != null) {\n@@ -344,7 +367,7 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n                     }\n                 }\n \n-                for (ExternalResource resource : externalResources) {\n+                for (ExternalResource resource : resources) {\n                     for (MappingItem mapItem : anyUtils.getMappingItems(\n                             resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n \n@@ -364,27 +387,23 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n \n         LOG.debug(\"Attributes to be removed:\\n{}\", propByRes);\n \n-        // 4. attributes to be updated\n+        // 6. attributes to be updated\n         for (AttrMod attributeMod : anyMod.getPlainAttrsToUpdate()) {\n             PlainSchema schema = getPlainSchema(attributeMod.getSchema());\n             PlainAttr attr = null;\n             if (schema != null) {\n                 attr = any.getPlainAttr(schema.getKey());\n                 if (attr == null) {\n                     attr = anyUtils.newPlainAttr();\n+                    attr.setOwner(any);\n                     attr.setSchema(schema);\n-                    if (attr.getSchema() == null) {\n-                        LOG.debug(\"Ignoring {} because no valid schema or template was found\", attributeMod);\n-                    } else {\n-                        attr.setOwner(any);\n-                        any.add(attr);\n-                    }\n+                    any.add(attr);\n                 }\n             }\n \n             if (schema != null && attr != null && attr.getSchema() != null) {\n-                virtAttrHander.updateOnResourcesIfMappingMatches(any, anyUtils, schema.getKey(),\n-                        externalResources, anyUtils.plainIntMappingType(), propByRes);\n+                virAttrHander.updateOnResourcesIfMappingMatches(any, anyUtils, schema.getKey(),\n+                        resources, anyUtils.plainIntMappingType(), propByRes);\n \n                 // 1.1 remove values\n                 Set<Long> valuesToBeRemoved = new HashSet<>();\n@@ -429,7 +448,7 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n \n         LOG.debug(\"Attributes to be updated:\\n{}\", propByRes);\n \n-        // 5. derived attributes to be removed\n+        // 7. derived attributes to be removed\n         for (String derAttrToBeRemoved : anyMod.getDerAttrsToRemove()) {\n             DerSchema derSchema = getDerSchema(derAttrToBeRemoved);\n             if (derSchema != null) {\n@@ -440,7 +459,7 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n                     derAttrDAO.delete(derAttr);\n                 }\n \n-                for (ExternalResource resource : externalResources) {\n+                for (ExternalResource resource : resources) {\n                     for (MappingItem mapItem : anyUtils.getMappingItems(\n                             resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n \n@@ -463,28 +482,30 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n \n         LOG.debug(\"Derived attributes to be removed:\\n{}\", propByRes);\n \n-        // 6. derived attributes to be added\n+        // 8. derived attributes to be added\n         for (String derAttrToBeAdded : anyMod.getDerAttrsToAdd()) {\n             DerSchema derSchema = getDerSchema(derAttrToBeAdded);\n             if (derSchema != null) {\n-                virtAttrHander.updateOnResourcesIfMappingMatches(any, anyUtils, derSchema.getKey(),\n-                        externalResources, anyUtils.derIntMappingType(), propByRes);\n+                virAttrHander.updateOnResourcesIfMappingMatches(any, anyUtils, derSchema.getKey(),\n+                        resources, anyUtils.derIntMappingType(), propByRes);\n \n-                DerAttr derAttr = anyUtils.newDerAttr();\n-                derAttr.setSchema(derSchema);\n-                if (derAttr.getSchema() == null) {\n-                    LOG.debug(\"Ignoring {} because no valid schema or template was found\", derAttrToBeAdded);\n-                } else {\n+                DerAttr derAttr = any.getDerAttr(derSchema.getKey());\n+                if (derAttr == null) {\n+                    derAttr = anyUtils.newDerAttr();\n                     derAttr.setOwner(any);\n+                    derAttr.setSchema(derSchema);\n                     any.add(derAttr);\n                 }\n             }\n         }\n \n         LOG.debug(\"Derived attributes to be added:\\n{}\", propByRes);\n \n-        // Finally, check if mandatory values are missing\n-        SyncopeClientException requiredValuesMissing = checkMandatory(anyUtils, any);\n+        SyncopeClientException requiredValuesMissing = checkMandatory(any);\n+        if (!requiredValuesMissing.isEmpty()) {\n+            scce.addException(requiredValuesMissing);\n+        }\n+        requiredValuesMissing = checkMandatoryOnResources(any, resources);\n         if (!requiredValuesMissing.isEmpty()) {\n             scce.addException(requiredValuesMissing);\n         }\n@@ -501,14 +522,24 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n     protected void fill(final Any any, final AnyTO anyTO,\n             final AnyUtils anyUtils, final SyncopeClientCompositeException scce) {\n \n+        // 0. aux classes\n+        any.getAuxClasses().clear();\n+        for (String className : anyTO.getAuxClasses()) {\n+            AnyTypeClass auxClass = anyTypeClassDAO.find(className);\n+            if (auxClass == null) {\n+                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", auxClass);\n+            } else {\n+                any.add(auxClass);\n+            }\n+        }\n+\n         // 1. attributes\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // Only consider attributeTO with values\n         for (AttrTO attributeTO : anyTO.getPlainAttrs()) {\n             if (attributeTO.getValues() != null && !attributeTO.getValues().isEmpty()) {\n                 PlainSchema schema = getPlainSchema(attributeTO.getSchema());\n-\n                 if (schema != null) {\n                     PlainAttr attr = any.getPlainAttr(schema.getKey());\n                     if (attr == null) {\n@@ -534,7 +565,6 @@ protected void fill(final Any any, final AnyTO anyTO,\n         // 2. derived attributes\n         for (AttrTO attributeTO : anyTO.getDerAttrs()) {\n             DerSchema derSchema = getDerSchema(attributeTO.getSchema());\n-\n             if (derSchema != null) {\n                 DerAttr derAttr = anyUtils.newDerAttr();\n                 derAttr.setOwner(any);\n@@ -545,8 +575,7 @@ protected void fill(final Any any, final AnyTO anyTO,\n \n         // 3. virtual attributes\n         for (AttrTO vattrTO : anyTO.getVirAttrs()) {\n-            VirSchema virSchema = virtAttrHander.getVirSchema(vattrTO.getSchema());\n-\n+            VirSchema virSchema = virAttrHander.getVirSchema(vattrTO.getSchema());\n             if (virSchema != null) {\n                 VirAttr virAttr = anyUtils.newVirAttr();\n                 virAttr.setOwner(any);\n@@ -555,27 +584,32 @@ protected void fill(final Any any, final AnyTO anyTO,\n             }\n         }\n \n-        virtAttrHander.fillVirtual(any, anyTO.getVirAttrs(), anyUtils);\n+        SyncopeClientException requiredValuesMissing = checkMandatory(any);\n+        if (!requiredValuesMissing.isEmpty()) {\n+            scce.addException(requiredValuesMissing);\n+        }\n+\n+        virAttrHander.fillVirtual(any, anyTO.getVirAttrs());\n \n         // 4. realm & resources\n         Realm realm = realmDAO.find(anyTO.getRealm());\n         if (realm == null) {\n             SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n-            noRealm.getElements().add(\n-                    \"Invalid or null realm specified: \" + anyTO.getRealm());\n+            noRealm.getElements().add(\"Invalid or null realm specified: \" + anyTO.getRealm());\n             scce.addException(noRealm);\n         }\n         any.setRealm(realm);\n \n         for (String resourceName : anyTO.getResources()) {\n             ExternalResource resource = resourceDAO.find(resourceName);\n-\n-            if (resource != null) {\n+            if (resource == null) {\n+                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", resourceName);\n+            } else {\n                 any.add(resource);\n             }\n         }\n \n-        SyncopeClientException requiredValuesMissing = checkMandatory(anyUtils, any);\n+        requiredValuesMissing = checkMandatoryOnResources(any, getAllResources(any));\n         if (!requiredValuesMissing.isEmpty()) {\n             scce.addException(requiredValuesMissing);\n         }\n@@ -588,11 +622,22 @@ protected void fill(final Any any, final AnyTO anyTO,\n \n     protected void fillTO(final AnyTO anyTO,\n             final String realmFullPath,\n+            final Collection<? extends AnyTypeClass> auxClasses,\n             final Collection<? extends PlainAttr<?>> attrs,\n             final Collection<? extends DerAttr<?>> derAttrs,\n             final Collection<? extends VirAttr<?>> virAttrs,\n             final Collection<? extends ExternalResource> resources) {\n \n+        anyTO.setRealm(realmFullPath);\n+\n+        CollectionUtils.collect(auxClasses, new Transformer<AnyTypeClass, String>() {\n+\n+            @Override\n+            public String transform(final AnyTypeClass role) {\n+                return role.getKey();\n+            }\n+        }, anyTO.getAuxClasses());\n+\n         AttrTO attributeTO;\n         for (PlainAttr<?> attr : attrs) {\n             attributeTO = new AttrTO();\n@@ -621,12 +666,29 @@ protected void fillTO(final AnyTO anyTO,\n             anyTO.getVirAttrs().add(attributeTO);\n         }\n \n-        anyTO.setRealm(realmFullPath);\n         for (ExternalResource resource : resources) {\n             anyTO.getResources().add(resource.getKey());\n         }\n     }\n \n+    protected RelationshipTO getRelationshipTO(final Relationship<? extends Any<?, ?, ?>, AnyObject> relationship) {\n+        RelationshipTO relationshipTO = new RelationshipTO();\n+        relationshipTO.setLeftKey(relationship.getLeftEnd().getKey());\n+        relationshipTO.setLeftType(relationship.getLeftEnd().getType().getKey());\n+        relationshipTO.setRightKey(relationship.getRightEnd().getKey());\n+        relationshipTO.setRightType(relationship.getRightEnd().getType().getKey());\n+        return relationshipTO;\n+    }\n+\n+    protected MembershipTO getMembershipTO(final Membership<? extends Any<?, ?, ?>> membership) {\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setLeftKey(membership.getLeftEnd().getKey());\n+        membershipTO.setLeftType(membership.getLeftEnd().getType().getKey());\n+        membershipTO.setRightKey(membership.getRightEnd().getKey());\n+        membershipTO.setGroupName(membership.getRightEnd().getName());\n+        return membershipTO;\n+    }\n+\n     protected Map<String, String> getConnObjectKeys(final Any<?, ?, ?> any) {\n         Map<String, String> connObjectKeys = new HashMap<>();\n \n@@ -637,7 +699,7 @@ protected Map<String, String> getConnObjectKeys(final Any<?, ?, ?> any) {\n                         : ((Group) any).getResources();\n         for (ExternalResource resource : iterable) {\n             Provision provision = resource.getProvision(any.getType());\n-            if (provision.getMapping() != null) {\n+            if (provision != null && provision.getMapping() != null) {\n                 MappingItem connObjectKeyItem = anyUtilsFactory.getInstance(any).getConnObjectKeyItem(provision);\n                 if (connObjectKeyItem == null) {\n                     throw new NotFoundException("},{"sha":"462a488832b1fe5458226619afb2af79a968d895","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":83,"deletions":16,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -31,11 +31,13 @@\n import org.apache.syncope.common.lib.mod.AnyObjectMod;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n@@ -47,7 +49,8 @@\n public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements AnyObjectDataBinder {\n \n     private static final String[] IGNORE_PROPERTIES = {\n-        \"realm\", \"memberships\", \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\"\n+        \"type\", \"realm\", \"auxClasses\", \"relationships\", \"memberships\", \"dynGroups\",\n+        \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\"\n     };\n \n     @Transactional(readOnly = true)\n@@ -62,20 +65,29 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject) {\n \n         BeanUtils.copyProperties(anyObject, anyObjectTO, IGNORE_PROPERTIES);\n \n-        connObjectUtils.retrieveVirAttrValues(anyObject);\n-        fillTO(anyObjectTO, anyObject.getRealm().getFullPath(),\n+        virAttrHander.retrieveVirAttrValues(anyObject);\n+        fillTO(anyObjectTO, anyObject.getRealm().getFullPath(), anyObject.getAuxClasses(),\n                 anyObject.getPlainAttrs(), anyObject.getDerAttrs(), anyObject.getVirAttrs(),\n                 anyObjectDAO.findAllResources(anyObject));\n \n-        for (AMembership membership : anyObject.getMemberships()) {\n-            MembershipTO membershipTO = new MembershipTO();\n+        // relationships\n+        CollectionUtils.collect(anyObject.getRelationships(), new Transformer<ARelationship, RelationshipTO>() {\n \n-            membershipTO.setKey(membership.getKey());\n-            membershipTO.setRightKey(membership.getRightEnd().getKey());\n-            membershipTO.setGroupName(membership.getRightEnd().getName());\n+            @Override\n+            public RelationshipTO transform(final ARelationship relationship) {\n+                return AnyObjectDataBinderImpl.this.getRelationshipTO(relationship);\n+            }\n \n-            anyObjectTO.getMemberships().add(membershipTO);\n-        }\n+        }, anyObjectTO.getRelationships());\n+\n+        // memberships\n+        CollectionUtils.collect(anyObject.getMemberships(), new Transformer<AMembership, MembershipTO>() {\n+\n+            @Override\n+            public MembershipTO transform(final AMembership membership) {\n+                return AnyObjectDataBinderImpl.this.getMembershipTO(membership);\n+            }\n+        }, anyObjectTO.getMemberships());\n \n         // dynamic memberships\n         CollectionUtils.collect(anyObjectDAO.findDynGroupMemberships(anyObject), new Transformer<Group, Long>() {\n@@ -93,6 +105,29 @@ public Long transform(final Group group) {\n     public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n+        // relationships\n+        for (RelationshipTO relationshipTO : anyObjectTO.getRelationships()) {\n+            AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n+\n+            if (otherEnd == null) {\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n+                }\n+            } else {\n+                ARelationship relationship = null;\n+                if (anyObject.getKey() != null) {\n+                    relationship = anyObject.getRelationship(otherEnd.getKey());\n+                }\n+                if (relationship == null) {\n+                    relationship = entityFactory.newEntity(ARelationship.class);\n+                    relationship.setRightEnd(otherEnd);\n+                    relationship.setLeftEnd(anyObject);\n+\n+                    anyObject.add(relationship);\n+                }\n+            }\n+        }\n+\n         // memberships\n         for (MembershipTO membershipTO : anyObjectTO.getMemberships()) {\n             Group group = groupDAO.find(membershipTO.getRightKey());\n@@ -137,11 +172,44 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         // attributes, derived attributes, virtual attributes and resources\n         propByRes.merge(fill(anyObject, anyObjectMod, anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT), scce));\n \n-        // store the group ids of membership required to be added\n-        Set<Long> membershipToBeAddedGroupKeys = new HashSet<>(anyObjectMod.getMembershipsToAdd());\n+        Set<String> toBeDeprovisioned = new HashSet<>();\n+        Set<String> toBeProvisioned = new HashSet<>();\n+\n+        // relationships to be removed\n+        for (Long anyObjectKey : anyObjectMod.getRelationshipsToRemove()) {\n+            LOG.debug(\"Relationship to be removed for any object {}\", anyObjectKey);\n+\n+            ARelationship relationship = anyObject.getRelationship(anyObjectKey);\n+            if (relationship == null) {\n+                LOG.warn(\"Invalid anyObject key specified for relationship to be removed: {}\", anyObjectKey);\n+            } else {\n+                if (!anyObjectMod.getRelationshipsToAdd().contains(anyObjectKey)) {\n+                    anyObject.remove(relationship);\n+                    toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n+                }\n+            }\n+        }\n+\n+        // relationships to be added\n+        for (Long anyObjectKey : anyObjectMod.getRelationshipsToAdd()) {\n+            LOG.debug(\"Relationship to be added for any object {}\", anyObjectKey);\n+\n+            AnyObject otherEnd = anyObjectDAO.find(anyObjectKey);\n+            if (otherEnd == null) {\n+                LOG.debug(\"Ignoring invalid any object {}\", anyObjectKey);\n+            } else {\n+                ARelationship relationship = anyObject.getRelationship(otherEnd.getKey());\n+                if (relationship == null) {\n+                    relationship = entityFactory.newEntity(ARelationship.class);\n+                    relationship.setRightEnd(otherEnd);\n+                    relationship.setLeftEnd(anyObject);\n+\n+                    anyObject.add(relationship);\n \n-        final Set<String> toBeDeprovisioned = new HashSet<>();\n-        final Set<String> toBeProvisioned = new HashSet<>();\n+                    toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                }\n+            }\n+        }\n \n         // memberships to be removed\n         for (Long groupKey : anyObjectMod.getMembershipsToRemove()) {\n@@ -151,9 +219,8 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n             if (membership == null) {\n                 LOG.warn(\"Invalid group key specified for membership to be removed: {}\", groupKey);\n             } else {\n-                if (membershipToBeAddedGroupKeys.contains(membership.getRightEnd().getKey())) {\n+                if (!anyObjectMod.getMembershipsToAdd().contains(groupKey)) {\n                     anyObject.remove(membership);\n-                } else {\n                     toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n                 }\n             }"},{"sha":"5917190c165b6ed499756414e3707233f46eefdf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeClassDataBinderImpl.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.provisioning.api.data.AnyTypeClassDataBinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AnyTypeClassDataBinderImpl implements AnyTypeClassDataBinder {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AnyTypeClassDataBinder.class);\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public AnyTypeClass create(final AnyTypeClassTO anyTypeClassTO) {\n+        AnyTypeClass anyTypeClass = entityFactory.newEntity(AnyTypeClass.class);\n+        update(anyTypeClass, anyTypeClassTO);\n+        return anyTypeClass;\n+    }\n+\n+    @Override\n+    public void update(final AnyTypeClass anyTypeClass, final AnyTypeClassTO anyTypeClassTO) {\n+        if (anyTypeClass.getKey() == null) {\n+            anyTypeClass.setKey(anyTypeClassTO.getKey());\n+        }\n+\n+        anyTypeClass.getPlainSchemas().clear();\n+        for (String schemaName : anyTypeClassTO.getPlainSchemas()) {\n+            PlainSchema schema = plainSchemaDAO.find(schemaName);\n+            if (schema == null) {\n+                LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName() + \"{}, ignoring...\", schemaName);\n+            } else {\n+                anyTypeClass.add(schema);\n+            }\n+        }\n+\n+        anyTypeClass.getDerSchemas().clear();\n+        for (String schemaName : anyTypeClassTO.getDerSchemas()) {\n+            DerSchema schema = derSchemaDAO.find(schemaName);\n+            if (schema == null) {\n+                LOG.debug(\"Invalid \" + DerSchema.class.getSimpleName() + \"{}, ignoring...\", schemaName);\n+            } else {\n+                anyTypeClass.add(schema);\n+            }\n+        }\n+\n+        anyTypeClass.getVirSchemas().clear();\n+        for (String schemaName : anyTypeClassTO.getVirSchemas()) {\n+            VirSchema schema = virSchemaDAO.find(schemaName);\n+            if (schema == null) {\n+                LOG.debug(\"Invalid \" + VirSchema.class.getSimpleName() + \"{}, ignoring...\", schemaName);\n+            } else {\n+                anyTypeClass.add(schema);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public AnyTypeClassTO getAnyTypeClassTO(final AnyTypeClass anyTypeClass) {\n+        AnyTypeClassTO anyTypeClassTO = new AnyTypeClassTO();\n+\n+        anyTypeClassTO.setKey(anyTypeClass.getKey());\n+        for (PlainSchema schema : anyTypeClass.getPlainSchemas()) {\n+            anyTypeClassTO.getPlainSchemas().add(schema.getKey());\n+        }\n+        for (DerSchema schema : anyTypeClass.getDerSchemas()) {\n+            anyTypeClassTO.getDerSchemas().add(schema.getKey());\n+        }\n+        for (VirSchema schema : anyTypeClass.getVirSchemas()) {\n+            anyTypeClassTO.getVirSchemas().add(schema.getKey());\n+        }\n+\n+        return anyTypeClassTO;\n+    }\n+\n+}"},{"sha":"0e85d3a8f8e7590e40d1337068d836728bb859e8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.provisioning.api.data.AnyTypeDataBinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AnyTypeDataBinderImpl implements AnyTypeDataBinder {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AnyTypeDataBinder.class);\n+\n+    @Autowired\n+    private AnyTypeClassDAO anyTypeClassDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public AnyType create(final AnyTypeTO anyTypeTO) {\n+        AnyType anyType = entityFactory.newEntity(AnyType.class);\n+        update(anyType, anyTypeTO);\n+        return anyType;\n+    }\n+\n+    @Override\n+    public void update(final AnyType anyType, final AnyTypeTO anyTypeTO) {\n+        if (anyType.getKey() == null) {\n+            anyType.setKey(anyTypeTO.getKey());\n+        }\n+        if (anyType.getKind() == null) {\n+            anyType.setKind(anyTypeTO.getKind());\n+        }\n+        if (anyType.getKind() != anyTypeTO.getKind()) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n+            sce.getElements().add(\"AnyTypeKind cannot be changed\");\n+            throw sce;\n+        }\n+\n+        anyType.getClasses().clear();\n+        for (String anyTypeClassName : anyTypeTO.getClasses()) {\n+            AnyTypeClass anyTypeClass = anyTypeClassDAO.find(anyTypeClassName);\n+            if (anyTypeClass == null) {\n+                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", anyTypeClassName);\n+            } else {\n+                anyType.add(anyTypeClass);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public AnyTypeTO getAnyTypeTO(final AnyType anyType) {\n+        AnyTypeTO anyTypeTO = new AnyTypeTO();\n+\n+        anyTypeTO.setKey(anyType.getKey());\n+        anyTypeTO.setKind(anyType.getKind());\n+        for (AnyTypeClass anyTypeClass : anyType.getClasses()) {\n+            anyTypeTO.getClasses().add(anyTypeClass.getKey());\n+        }\n+\n+        return anyTypeTO;\n+    }\n+\n+}"},{"sha":"3cf65fdee418a7a4b53e2386e269bdbad27f5e1b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -47,8 +47,8 @@ public ConfTO getConfTO(final Conf conf) {\n         ConfTO confTO = new ConfTO();\n         confTO.setKey(conf.getKey());\n \n-        fillTO(confTO, null, conf.getPlainAttrs(),\n-                conf.getDerAttrs(), conf.getVirAttrs(), Collections.<ExternalResource>emptySet());\n+        fillTO(confTO, null, conf.getAuxClasses(),\n+                conf.getPlainAttrs(), conf.getDerAttrs(), conf.getVirAttrs(), Collections.<ExternalResource>emptySet());\n \n         return confTO;\n     }"},{"sha":"a393fda35899f1d31c2451d03e4f257b4df43e81","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -105,7 +105,7 @@ public Group create(final Group group, final GroupTO groupTO) {\n         if (groupTO.getADynMembershipCond() != null) {\n             setDynMembership(group, AnyTypeKind.ANY_OBJECT, groupTO.getADynMembershipCond());\n         }\n-        if (groupTO.getADynMembershipCond() != null) {\n+        if (groupTO.getUDynMembershipCond() != null) {\n             setDynMembership(group, AnyTypeKind.USER, groupTO.getUDynMembershipCond());\n         }\n \n@@ -188,7 +188,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupMod grou\n     @Transactional(readOnly = true)\n     @Override\n     public GroupTO getGroupTO(final Group group) {\n-        connObjectUtils.retrieveVirAttrValues(group);\n+        virAttrHander.retrieveVirAttrValues(group);\n \n         GroupTO groupTO = new GroupTO();\n \n@@ -208,7 +208,7 @@ public GroupTO getGroupTO(final Group group) {\n             groupTO.setGroupOwner(group.getGroupOwner().getKey());\n         }\n \n-        fillTO(groupTO, group.getRealm().getFullPath(),\n+        fillTO(groupTO, group.getRealm().getFullPath(), group.getAuxClasses(),\n                 group.getPlainAttrs(), group.getDerAttrs(), group.getVirAttrs(), group.getResources());\n \n         if (group.getADynMembership() != null) {"},{"sha":"0d7ee47d0aa8719c610c7f3bfe7456ec9c1e0b35","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.provisioning.api.data.NotificationDataBinder;\n import org.apache.syncope.common.lib.to.NotificationTO;\n@@ -72,23 +74,35 @@ public Notification create(final NotificationTO notificationTO) {\n     @Override\n     public void update(final Notification notification, final NotificationTO notificationTO) {\n         BeanUtils.copyProperties(notificationTO, notification, IGNORE_PROPERTIES);\n+        notification.setRecipients(notificationTO.getRecipients());\n \n-        notification.getAbouts().clear();\n+        // 1. add or update all (valid) abouts from TO\n         for (Map.Entry<String, String> entry : notificationTO.getAbouts().entrySet()) {\n             if (StringUtils.isNotBlank(entry.getValue())) {\n                 AnyType anyType = anyTypeDAO.find(entry.getKey());\n                 if (anyType == null) {\n-                    LOG.warn(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n+                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n                 } else {\n-                    AnyAbout about = entityFactory.newEntity(AnyAbout.class);\n-                    about.setAnyType(anyType);\n-                    about.setNotification(notification);\n-\n-                    notification.add(about);\n+                    AnyAbout about = notification.getAbout(anyType);\n+                    if (about == null) {\n+                        about = entityFactory.newEntity(AnyAbout.class);\n+                        about.setAnyType(anyType);\n+                        about.setNotification(notification);\n+\n+                        notification.add(about);\n+                    }\n+                    about.set(entry.getValue());\n                 }\n             }\n         }\n \n-        notification.setRecipients(notificationTO.getRecipients());\n+        // 2. remove all abouts not contained in the TO\n+        CollectionUtils.filter(notification.getAbouts(), new Predicate<AnyAbout>() {\n+\n+            @Override\n+            public boolean evaluate(final AnyAbout anyAbout) {\n+                return notificationTO.getAbouts().containsKey(anyAbout.getAnyType().getKey());\n+            }\n+        });\n     }\n }"},{"sha":"cb8f979f81d9ab46d76b142e60c6e66893c8606b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":29,"deletions":11,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -22,6 +22,8 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -89,8 +91,8 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n \n         resource.setKey(resourceTO.getKey());\n \n-        if (resourceTO.getConnectorId() != null) {\n-            ConnInstance connector = connInstanceDAO.find(resourceTO.getConnectorId());\n+        if (resourceTO.getConnector() != null) {\n+            ConnInstance connector = connInstanceDAO.find(resourceTO.getConnector());\n             resource.setConnector(connector);\n \n             if (!connector.getResources().contains(resource)) {\n@@ -108,10 +110,11 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n \n         resource.setPropagationMode(resourceTO.getPropagationMode());\n \n+        // 1. add or update all (valid) provisions from TO\n         for (ProvisionTO provisionTO : resourceTO.getProvisions()) {\n             AnyType anyType = anyTypeDAO.find(provisionTO.getAnyType());\n             if (anyType == null) {\n-                LOG.warn(\"Invalid type specified {}, ignoring...\", provisionTO.getAnyType());\n+                LOG.debug(\"Invalid AnyType specified {}, ignoring...\", provisionTO.getAnyType());\n             } else {\n                 Provision provision = resource.getProvision(anyType);\n                 if (provision == null) {\n@@ -135,14 +138,28 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                 if (provisionTO.getMapping() == null) {\n                     provision.setMapping(null);\n                 } else {\n-                    Mapping mapping = entityFactory.newEntity(Mapping.class);\n-                    mapping.setProvision(provision);\n-                    provision.setMapping(mapping);\n+                    Mapping mapping = provision.getMapping();\n+                    if (mapping == null) {\n+                        mapping = entityFactory.newEntity(Mapping.class);\n+                        mapping.setProvision(provision);\n+                        provision.setMapping(mapping);\n+                    } else {\n+                        mapping.getItems().clear();\n+                    }\n                     populateMapping(provisionTO.getMapping(), mapping, entityFactory.newEntity(MappingItem.class));\n                 }\n             }\n         }\n \n+        // 2. remove all abouts not contained in the TO\n+        CollectionUtils.filter(resource.getProvisions(), new Predicate<Provision>() {\n+\n+            @Override\n+            public boolean evaluate(final Provision provision) {\n+                return resourceTO.getProvision(provision.getAnyType().getKey()) != null;\n+            }\n+        });\n+\n         resource.setCreateTraceLevel(resourceTO.getCreateTraceLevel());\n         resource.setUpdateTraceLevel(resourceTO.getUpdateTraceLevel());\n         resource.setDeleteTraceLevel(resourceTO.getDeleteTraceLevel());\n@@ -207,8 +224,7 @@ private MappingItem getMappingItem(final MappingItemTO itemTO, final MappingItem\n             }\n         }\n \n-        // Throw composite exception if there is at least one element set\n-        // in the composing exceptions\n+        // Throw composite exception if there is at least one element set in the composing exceptions\n         if (!requiredValuesMissing.isEmpty()) {\n             scce.addException(requiredValuesMissing);\n         }\n@@ -234,9 +250,9 @@ private MappingItem getMappingItem(final MappingItemTO itemTO, final MappingItem\n \n     @Override\n     public ConnInstance getConnInstance(final ResourceTO resourceTO) {\n-        ConnInstance connInstance = connInstanceDAO.find(resourceTO.getConnectorId());\n+        ConnInstance connInstance = connInstanceDAO.find(resourceTO.getConnector());\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + resourceTO.getConnectorId() + \"'\");\n+            throw new NotFoundException(\"Connector '\" + resourceTO.getConnector() + \"'\");\n         }\n \n         final ConnInstance connInstanceClone = SerializationUtils.clone(connInstance);\n@@ -279,7 +295,7 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         // set the connector instance\n         ConnInstance connector = resource.getConnector();\n \n-        resourceTO.setConnectorId(connector == null ? null : connector.getKey());\n+        resourceTO.setConnector(connector == null ? null : connector.getKey());\n         resourceTO.setConnectorDisplayName(connector == null ? null : connector.getDisplayName());\n \n         // set the provision information\n@@ -295,6 +311,8 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n                 provisionTO.setMapping(mappingTO);\n                 populateMappingTO(provision.getMapping(), mappingTO);\n             }\n+\n+            resourceTO.getProvisions().add(provisionTO);\n         }\n \n         resourceTO.setEnforceMandatoryCondition(resource.isEnforceMandatoryCondition());"},{"sha":"124bb7f41489a06cc9935e9462245c82c26ce5f6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -84,7 +84,7 @@ public void update(final Role role, final RoleTO roleTO) {\n         for (String realmFullPath : roleTO.getRealms()) {\n             Realm realm = realmDAO.find(realmFullPath);\n             if (realm == null) {\n-                LOG.warn(\"Invalid realm full path {}, ignoring\", realmFullPath);\n+                LOG.debug(\"Invalid realm full path {}, ignoring\", realmFullPath);\n             } else {\n                 role.addRealm(realm);\n             }"},{"sha":"f20a26586300145fdbbfb4f8978109ebd06bcbfc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -70,7 +70,7 @@ public <T extends PlainSchema> void update(final PlainSchemaTO schemaTO, final T\n         boolean hasAttrs = false;\n         for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n             AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n-            hasAttrs &= schemaDAO.findAttrs(schema, anyUtils.plainAttrClass()).isEmpty();\n+            hasAttrs |= schemaDAO.findAttrs(schema, anyUtils.plainAttrClass()).isEmpty();\n         }\n \n         if (hasAttrs) {"},{"sha":"762cca511d9fbbdd3405db4154bc6351c4ba2f81","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":100,"deletions":77,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -72,13 +74,10 @@\n @Component\n public class TaskDataBinderImpl implements TaskDataBinder {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n     private static final String[] IGNORE_TASK_PROPERTIES = {\n-        \"destinationRealm\", \"executions\", \"resource\", \"matchingRule\", \"unmatchingRule\" };\n+        \"destinationRealm\", \"templates\", \"filters\", \"executions\", \"resource\", \"matchingRule\", \"unmatchingRule\" };\n \n     private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = { \"key\", \"task\" };\n \n@@ -100,40 +99,82 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n     @Autowired\n     private SchedulerFactoryBean scheduler;\n \n-    private void checkJexl(final AnyTO anyTO, final SyncopeClientException sce) {\n-        for (AttrTO attrTO : anyTO.getPlainAttrs()) {\n-            if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n-                sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n+    private void checkTemplateJEXL(final SyncTaskTO syncTaskTO) {\n+        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSyncTask);\n+\n+        for (Map.Entry<String, AnyTO> entry : syncTaskTO.getTemplates().entrySet()) {\n+            for (AttrTO attrTO : entry.getValue().getPlainAttrs()) {\n+                if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n+                    sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n+                }\n+            }\n+\n+            for (AttrTO attrTO : entry.getValue().getVirAttrs()) {\n+                if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n+                    sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n+                }\n             }\n-        }\n \n-        for (AttrTO attrTO : anyTO.getVirAttrs()) {\n-            if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n-                sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n+            if (entry.getValue() instanceof UserTO) {\n+                UserTO template = (UserTO) entry.getValue();\n+                if (StringUtils.isNotBlank(template.getUsername())\n+                        && !JexlUtils.isExpressionValid(template.getUsername())) {\n+\n+                    sce.getElements().add(\"Invalid JEXL: \" + template.getUsername());\n+                }\n+                if (StringUtils.isNotBlank(template.getPassword())\n+                        && !JexlUtils.isExpressionValid(template.getPassword())) {\n+\n+                    sce.getElements().add(\"Invalid JEXL: \" + template.getPassword());\n+                }\n+            } else if (entry.getValue() instanceof GroupTO) {\n+                GroupTO template = (GroupTO) entry.getValue();\n+                if (StringUtils.isNotBlank(template.getName())\n+                        && !JexlUtils.isExpressionValid(template.getName())) {\n+\n+                    sce.getElements().add(\"Invalid JEXL: \" + template.getName());\n+                }\n             }\n         }\n+\n+        if (!sce.isEmpty()) {\n+            throw sce;\n+        }\n     }\n \n     private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO taskTO) {\n         if (task instanceof PushTask && taskTO instanceof PushTaskTO) {\n-            PushTask pushTask = (PushTask) task;\n-            PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n-\n-            for (Map.Entry<String, String> entry : pushTaskTO.getFilters().entrySet()) {\n-                AnyFilter filter = entityFactory.newEntity(AnyFilter.class);\n-                filter.setAnyType(anyTypeDAO.find(entry.getKey()));\n-                filter.set(entry.getValue());\n-\n-                filter.setPushTask(pushTask);\n-                pushTask.add(filter);\n-            }\n+            final PushTask pushTask = (PushTask) task;\n+            final PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n \n             pushTask.setMatchingRule(pushTaskTO.getMatchingRule() == null\n                     ? MatchingRule.LINK : pushTaskTO.getMatchingRule());\n-\n             pushTask.setUnmatchingRule(pushTaskTO.getUnmatchingRule() == null\n                     ? UnmatchingRule.ASSIGN : pushTaskTO.getUnmatchingRule());\n \n+            for (Map.Entry<String, String> entry : pushTaskTO.getFilters().entrySet()) {\n+                AnyType type = anyTypeDAO.find(entry.getKey());\n+                if (type == null) {\n+                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n+                } else {\n+                    AnyFilter filter = pushTask.getFilter(type);\n+                    if (filter == null) {\n+                        filter = entityFactory.newEntity(AnyFilter.class);\n+                        filter.setAnyType(anyTypeDAO.find(entry.getKey()));\n+                        filter.setPushTask(pushTask);\n+                        pushTask.add(filter);\n+                    }\n+                    filter.set(entry.getValue());\n+                }\n+            }\n+            // remove all filters not contained in the TO\n+            CollectionUtils.filter(pushTask.getFilters(), new Predicate<AnyFilter>() {\n+\n+                @Override\n+                public boolean evaluate(final AnyFilter anyFilter) {\n+                    return pushTaskTO.getFilters().containsKey(anyFilter.getAnyType().getKey());\n+                }\n+            });\n         } else if (task instanceof SyncTask && taskTO instanceof SyncTaskTO) {\n             final SyncTask syncTask = (SyncTask) task;\n             final SyncTaskTO syncTaskTO = (SyncTaskTO) taskTO;\n@@ -142,52 +183,35 @@ private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO\n \n             syncTask.setMatchingRule(syncTaskTO.getMatchingRule() == null\n                     ? MatchingRule.UPDATE : syncTaskTO.getMatchingRule());\n-\n             syncTask.setUnmatchingRule(syncTaskTO.getUnmatchingRule() == null\n                     ? UnmatchingRule.PROVISION : syncTaskTO.getUnmatchingRule());\n \n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSyncTask);\n-            // 1. validate JEXL expressions in user and group templates\n+            // validate JEXL expressions from templates and proceed if fine\n+            checkTemplateJEXL(syncTaskTO);\n             for (Map.Entry<String, AnyTO> entry : syncTaskTO.getTemplates().entrySet()) {\n-                checkJexl(entry.getValue(), sce);\n-\n-                if (entry.getValue() instanceof UserTO) {\n-                    UserTO template = (UserTO) entry.getValue();\n-                    if (StringUtils.isNotBlank(template.getUsername())\n-                            && !JexlUtils.isExpressionValid(template.getUsername())) {\n-\n-                        sce.getElements().add(\"Invalid JEXL: \" + template.getUsername());\n-                    }\n-                    if (StringUtils.isNotBlank(template.getPassword())\n-                            && !JexlUtils.isExpressionValid(template.getPassword())) {\n-\n-                        sce.getElements().add(\"Invalid JEXL: \" + template.getPassword());\n-                    }\n-                } else if (entry.getValue() instanceof GroupTO) {\n-                    GroupTO template = (GroupTO) entry.getValue();\n-                    if (StringUtils.isNotBlank(template.getName())\n-                            && !JexlUtils.isExpressionValid(template.getName())) {\n-\n-                        sce.getElements().add(\"Invalid JEXL: \" + template.getName());\n+                AnyType type = anyTypeDAO.find(entry.getKey());\n+                if (type == null) {\n+                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n+                } else {\n+                    AnyTemplate anyTemplate = syncTask.getTemplate(type);\n+                    if (anyTemplate == null) {\n+                        anyTemplate = entityFactory.newEntity(AnyTemplate.class);\n+                        anyTemplate.setAnyType(type);\n+                        anyTemplate.setSyncTask(syncTask);\n+\n+                        syncTask.add(anyTemplate);\n                     }\n+                    anyTemplate.set(entry.getValue());\n                 }\n             }\n-            if (!sce.isEmpty()) {\n-                throw sce;\n-            }\n+            // remove all templates not contained in the TO\n+            CollectionUtils.filter(syncTask.getTemplates(), new Predicate<AnyTemplate>() {\n \n-            // 2. all JEXL expressions are valid: accept user and group templates\n-            for (Map.Entry<String, AnyTO> entry : syncTaskTO.getTemplates().entrySet()) {\n-                AnyType type = anyTypeDAO.find(entry.getKey());\n-                if (type != null) {\n-                    AnyTemplate anyTemplate = entityFactory.newEntity(AnyTemplate.class);\n-                    anyTemplate.setAnyType(type);\n-                    anyTemplate.set(entry.getValue());\n-                    anyTemplate.setSyncTask(syncTask);\n-\n-                    syncTask.add(anyTemplate);\n+                @Override\n+                public boolean evaluate(final AnyTemplate anyTemplate) {\n+                    return syncTaskTO.getTemplates().containsKey(anyTemplate.getAnyType().getKey());\n                 }\n-            }\n+            });\n \n             syncTask.setFullReconciliation(syncTaskTO.isFullReconciliation());\n         }\n@@ -197,18 +221,13 @@ private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO\n         task.setPerformUpdate(taskTO.isPerformUpdate());\n         task.setPerformDelete(taskTO.isPerformDelete());\n         task.setSyncStatus(taskTO.isSyncStatus());\n-        task.getActionsClassNames()\n-                .clear();\n-        task.getActionsClassNames()\n-                .addAll(taskTO.getActionsClassNames());\n+        task.getActionsClassNames().clear();\n+        task.getActionsClassNames().addAll(taskTO.getActionsClassNames());\n     }\n \n     @Override\n-    public SchedTask createSchedTask(final SchedTaskTO taskTO,\n-            final TaskUtils taskUtils\n-    ) {\n-        final Class<? extends AbstractTaskTO> taskTOClass = taskUtils.taskTOClass();\n-\n+    public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtils taskUtils) {\n+        Class<? extends AbstractTaskTO> taskTOClass = taskUtils.taskTOClass();\n         if (taskTOClass == null || !taskTOClass.equals(taskTO.getClass())) {\n             throw new IllegalArgumentException(\n                     String.format(\"taskUtils is type %s but task is not: %s\", taskTOClass, taskTO.getClass()));\n@@ -222,7 +241,7 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO,\n         if (taskUtils.getType() == TaskType.SCHEDULED) {\n             task.setJobClassName(taskTO.getJobClassName());\n         } else if (taskTO instanceof AbstractProvisioningTaskTO) {\n-            final AbstractProvisioningTaskTO provisioningTaskTO = (AbstractProvisioningTaskTO) taskTO;\n+            AbstractProvisioningTaskTO provisioningTaskTO = (AbstractProvisioningTaskTO) taskTO;\n \n             ExternalResource resource = resourceDAO.find(provisioningTaskTO.getResource());\n             if (resource == null) {\n@@ -237,10 +256,7 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO,\n     }\n \n     @Override\n-    public void updateSchedTask(final SchedTask task,\n-            final SchedTaskTO taskTO,\n-            final TaskUtils taskUtils\n-    ) {\n+    public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, final TaskUtils taskUtils) {\n         Class<? extends Task> taskClass = taskUtils.taskClass();\n         Class<? extends AbstractTaskTO> taskTOClass = taskUtils.taskTOClass();\n \n@@ -268,8 +284,7 @@ public void updateSchedTask(final SchedTask task,\n     }\n \n     @Override\n-    public TaskExecTO getTaskExecTO(final TaskExec execution\n-    ) {\n+    public TaskExecTO getTaskExecTO(final TaskExec execution) {\n         TaskExecTO executionTO = new TaskExecTO();\n         BeanUtils.copyProperties(execution, executionTO, IGNORE_TASK_EXECUTION_PROPERTIES);\n \n@@ -347,6 +362,10 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n                         ? MatchingRule.UPDATE : ((SyncTask) task).getMatchingRule());\n                 ((SyncTaskTO) taskTO).setUnmatchingRule(((SyncTask) task).getUnmatchingRule() == null\n                         ? UnmatchingRule.PROVISION : ((SyncTask) task).getUnmatchingRule());\n+\n+                for (AnyTemplate template : ((SyncTask) task).getTemplates()) {\n+                    ((SyncTaskTO) taskTO).getTemplates().put(template.getAnyType().getKey(), template.get());\n+                }\n                 break;\n \n             case PUSH:\n@@ -362,6 +381,10 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n                         ? MatchingRule.LINK : ((PushTask) task).getMatchingRule());\n                 ((PushTaskTO) taskTO).setUnmatchingRule(((PushTask) task).getUnmatchingRule() == null\n                         ? UnmatchingRule.ASSIGN : ((PushTask) task).getUnmatchingRule());\n+\n+                for (AnyFilter filter : ((PushTask) task).getFilters()) {\n+                    ((PushTaskTO) taskTO).getFilters().put(filter.getAnyType().getKey(), filter.get());\n+                }\n                 break;\n \n             case NOTIFICATION:"},{"sha":"6c5e0d6768ee2e94397207dac7a71175a18d31ab","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":98,"deletions":24,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -49,7 +50,9 @@\n import org.apache.syncope.core.misc.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -58,9 +61,9 @@\n @Transactional(rollbackFor = { Throwable.class })\n public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDataBinder {\n \n-    private static final String[] IGNORE_USER_PROPERTIES = {\n-        \"realm\", \"roles\", \"memberships\", \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\",\n-        \"securityQuestion\", \"securityAnswer\"\n+    private static final String[] IGNORE_PROPERTIES = {\n+        \"type\", \"realm\", \"auxClasses\", \"roles\", \"dynRoles\", \"relationships\", \"memberships\", \"dynGroups\",\n+        \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\", \"securityQuestion\", \"securityAnswer\"\n     };\n \n     @Autowired\n@@ -144,6 +147,29 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             }\n         }\n \n+        // relationships\n+        for (RelationshipTO relationshipTO : userTO.getRelationships()) {\n+            AnyObject anyObject = anyObjectDAO.find(relationshipTO.getRightKey());\n+\n+            if (anyObject == null) {\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n+                }\n+            } else {\n+                URelationship relationship = null;\n+                if (user.getKey() != null) {\n+                    relationship = user.getRelationship(anyObject.getKey());\n+                }\n+                if (relationship == null) {\n+                    relationship = entityFactory.newEntity(URelationship.class);\n+                    relationship.setRightEnd(anyObject);\n+                    relationship.setLeftEnd(user);\n+\n+                    user.add(relationship);\n+                }\n+            }\n+        }\n+\n         // memberships\n         for (MembershipTO membershipTO : userTO.getMemberships()) {\n             Group group = groupDAO.find(membershipTO.getRightKey());\n@@ -266,23 +292,55 @@ public void execute(final Long roleKey) {\n         // attributes, derived attributes, virtual attributes and resources\n         propByRes.merge(fill(user, userMod, anyUtilsFactory.getInstance(AnyTypeKind.USER), scce));\n \n-        // store the group ids of membership required to be added\n-        Set<Long> membershipToBeAddedGroupKeys = new HashSet<>(userMod.getMembershipsToAdd());\n+        Set<String> toBeDeprovisioned = new HashSet<>();\n+        Set<String> toBeProvisioned = new HashSet<>();\n+\n+        // relationships to be removed\n+        for (Long anyObjectKey : userMod.getRelationshipsToRemove()) {\n+            LOG.debug(\"Relationship to be removed for any object {}\", anyObjectKey);\n+\n+            URelationship relationship = user.getRelationship(anyObjectKey);\n+            if (relationship == null) {\n+                LOG.warn(\"Invalid anyObject key specified for relationship to be removed: {}\", anyObjectKey);\n+            } else {\n+                if (!userMod.getRelationshipsToAdd().contains(anyObjectKey)) {\n+                    user.remove(relationship);\n+                    toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n+                }\n+            }\n+        }\n+\n+        // relationships to be added\n+        for (Long anyObjectKey : userMod.getRelationshipsToAdd()) {\n+            LOG.debug(\"Relationship to be added for any object {}\", anyObjectKey);\n+\n+            AnyObject otherEnd = anyObjectDAO.find(anyObjectKey);\n+            if (otherEnd == null) {\n+                LOG.debug(\"Ignoring invalid any object {}\", anyObjectKey);\n+            } else {\n+                URelationship relationship = user.getRelationship(otherEnd.getKey());\n+                if (relationship == null) {\n+                    relationship = entityFactory.newEntity(URelationship.class);\n+                    relationship.setRightEnd(otherEnd);\n+                    relationship.setLeftEnd(user);\n+\n+                    user.add(relationship);\n \n-        final Set<String> toBeDeprovisioned = new HashSet<>();\n-        final Set<String> toBeProvisioned = new HashSet<>();\n+                    toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                }\n+            }\n+        }\n \n         // memberships to be removed\n         for (Long groupKey : userMod.getMembershipsToRemove()) {\n             LOG.debug(\"Membership to be removed for group {}\", groupKey);\n \n             UMembership membership = user.getMembership(groupKey);\n             if (membership == null) {\n-                LOG.warn(\"Invalid group key specified for membership to be removed: {}\", groupKey);\n+                LOG.debug(\"Invalid group key specified for membership to be removed: {}\", groupKey);\n             } else {\n-                if (membershipToBeAddedGroupKeys.contains(membership.getRightEnd().getKey())) {\n+                if (!userMod.getMembershipsToAdd().contains(groupKey)) {\n                     user.remove(membership);\n-                } else {\n                     toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n                 }\n             }\n@@ -312,10 +370,8 @@ public void execute(final Long roleKey) {\n         propByRes.addAll(ResourceOperation.DELETE, toBeDeprovisioned);\n         propByRes.addAll(ResourceOperation.UPDATE, toBeProvisioned);\n \n-        /**\n-         * In case of new memberships all the current resources have to be updated in order to propagate new group and\n-         * membership attribute values.\n-         */\n+        // In case of new memberships all current resources need to be updated in order to propagate new group\n+        // attribute values.\n         if (!toBeDeprovisioned.isEmpty() || !toBeProvisioned.isEmpty()) {\n             currentResources.removeAll(toBeDeprovisioned);\n             propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n@@ -340,25 +396,43 @@ public void execute(final Long roleKey) {\n     public UserTO getUserTO(final User user) {\n         UserTO userTO = new UserTO();\n \n-        BeanUtils.copyProperties(user, userTO, IGNORE_USER_PROPERTIES);\n+        BeanUtils.copyProperties(user, userTO, IGNORE_PROPERTIES);\n \n         if (user.getSecurityQuestion() != null) {\n             userTO.setSecurityQuestion(user.getSecurityQuestion().getKey());\n         }\n \n-        connObjectUtils.retrieveVirAttrValues(user);\n-        fillTO(userTO, user.getRealm().getFullPath(),\n+        virAttrHander.retrieveVirAttrValues(user);\n+        fillTO(userTO, user.getRealm().getFullPath(), user.getAuxClasses(),\n                 user.getPlainAttrs(), user.getDerAttrs(), user.getVirAttrs(), userDAO.findAllResources(user));\n \n-        for (UMembership membership : user.getMemberships()) {\n-            MembershipTO membershipTO = new MembershipTO();\n+        // roles\n+        CollectionUtils.collect(user.getRoles(), new Transformer<Role, Long>() {\n+\n+            @Override\n+            public Long transform(final Role role) {\n+                return role.getKey();\n+            }\n+        }, userTO.getRoles());\n+\n+        // relationships\n+        CollectionUtils.collect(user.getRelationships(), new Transformer<URelationship, RelationshipTO>() {\n \n-            membershipTO.setKey(membership.getKey());\n-            membershipTO.setRightKey(membership.getRightEnd().getKey());\n-            membershipTO.setGroupName(membership.getRightEnd().getName());\n+            @Override\n+            public RelationshipTO transform(final URelationship relationship) {\n+                return UserDataBinderImpl.this.getRelationshipTO(relationship);\n+            }\n \n-            userTO.getMemberships().add(membershipTO);\n-        }\n+        }, userTO.getRelationships());\n+\n+        // memberships\n+        CollectionUtils.collect(user.getMemberships(), new Transformer<UMembership, MembershipTO>() {\n+\n+            @Override\n+            public MembershipTO transform(final UMembership membership) {\n+                return UserDataBinderImpl.this.getMembershipTO(membership);\n+            }\n+        }, userTO.getMemberships());\n \n         // dynamic memberships\n         CollectionUtils.collect(userDAO.findDynRoleMemberships(user), new Transformer<Role, Long>() {"},{"sha":"cdc540cb26a9387e3fd4daba54fe7de5395c8508","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -54,14 +54,13 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n-import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.velocity.VelocityContext;\n import org.apache.velocity.app.VelocityEngine;\n import org.apache.velocity.context.Context;\n@@ -143,7 +142,7 @@ public class NotificationManagerImpl implements NotificationManager {\n     private ToolManager velocityToolManager;\n \n     @Autowired\n-    private ConnObjectUtils connObjectUtils;\n+    private VirAttrHandler virAttrHander;\n \n     @Autowired\n     private UserDataBinder userDataBinder;\n@@ -154,9 +153,6 @@ public class NotificationManagerImpl implements NotificationManager {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n     @Transactional(readOnly = true)\n     @Override\n     public long getMaxRetries() {\n@@ -177,10 +173,10 @@ private NotificationTask getNotificationTask(\n             final Map<String, Object> model) {\n \n         if (any != null) {\n-            connObjectUtils.retrieveVirAttrValues(any);\n+            virAttrHander.retrieveVirAttrValues(any);\n         }\n \n-        final List<User> recipients = new ArrayList<>();\n+        List<User> recipients = new ArrayList<>();\n \n         if (notification.getRecipients() != null) {\n             recipients.addAll(searchDAO.<User>search(SyncopeConstants.FULL_ADMIN_REALMS,\n@@ -192,10 +188,10 @@ private NotificationTask getNotificationTask(\n             recipients.add((User) any);\n         }\n \n-        final Set<String> recipientEmails = new HashSet<>();\n-        final List<UserTO> recipientTOs = new ArrayList<>(recipients.size());\n+        Set<String> recipientEmails = new HashSet<>();\n+        List<UserTO> recipientTOs = new ArrayList<>(recipients.size());\n         for (User recipient : recipients) {\n-            connObjectUtils.retrieveVirAttrValues(recipient);\n+            virAttrHander.retrieveVirAttrValues(recipient);\n \n             String email = getRecipientEmail(notification.getRecipientAttrType(),\n                     notification.getRecipientAttrName(), recipient);"},{"sha":"6a67ccfd38bb6695ee9119fbb62c28c2e04f1b03","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":7,"deletions":13,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -51,6 +51,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -72,9 +73,6 @@\n @Transactional(rollbackFor = { Throwable.class })\n public abstract class AbstractPropagationTaskExecutor implements PropagationTaskExecutor {\n \n-    /**\n-     * Logger.\n-     */\n     protected static final Logger LOG = LoggerFactory.getLogger(PropagationTaskExecutor.class);\n \n     /**\n@@ -299,9 +297,11 @@ protected void delete(final PropagationTask task, final ConnectorObject beforeOb\n             Any<?, ?, ?> any = getAny(task);\n             Collection<String> resources = any instanceof User\n                     ? userDAO.findAllResourceNames((User) any)\n-                    : any instanceof Group\n-                            ? ((Group) any).getResourceNames()\n-                            : Collections.<String>emptySet();\n+                    : any instanceof AnyObject\n+                            ? anyObjectDAO.findAllResourceNames((AnyObject) any)\n+                            : any instanceof Group\n+                                    ? ((Group) any).getResourceNames()\n+                                    : Collections.<String>emptySet();\n             if (!resources.contains(task.getResource().getKey())) {\n                 LOG.debug(\"Delete {} on {}\", beforeObj.getUid(), task.getResource().getKey());\n \n@@ -339,13 +339,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n         Connector connector = null;\n         Result result;\n         try {\n-            Any<?, ?, ?> any = getAny(task);\n-            provision = task.getResource().getProvision(any.getType());\n-            if (provision == null) {\n-                throw new IllegalArgumentException(\"No provision found for \" + any.getType() + \" on \" + task.\n-                        getResource());\n-            }\n-\n+            provision = task.getResource().getProvision(new ObjectClass(task.getObjectClassName()));\n             connector = connFactory.getConnector(task.getResource());\n \n             // Try to read remote object BEFORE any actual operation"},{"sha":"6dbd0eb6a51e334d62d69814a0243659204abd43","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -46,7 +46,7 @@\n  * Simple action for propagating group memberships to LDAP groups, when the same resource is configured for both users\n  * and groups.\n  *\n- * @see org.apache.syncope.core.sync.impl.LDAPMembershipSyncActions\n+ * @see org.apache.syncope.core.provisioning.java.sync.LDAPMembershipSyncActions\n  */\n public class LDAPMembershipPropagationActions extends DefaultPropagationActions {\n \n@@ -85,7 +85,7 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n \n                         JexlContext jexlContext = new MapContext();\n                         JexlUtils.addFieldsToContext(group, jexlContext);\n-                        JexlUtils.addAttrsToContext(group.getPlainAttrs(), jexlContext);\n+                        JexlUtils.addPlainAttrsToContext(group.getPlainAttrs(), jexlContext);\n                         JexlUtils.addDerAttrsToContext(group.getDerAttrs(), group.getPlainAttrs(), jexlContext);\n \n                         String groupConnObjectLinkLink ="},{"sha":"2649623d526b7d109bcd28910fc5da1d0ac253b7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -45,7 +44,6 @@\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.java.VirAttrHandler;\n import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n@@ -57,6 +55,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n@@ -71,9 +70,6 @@\n @Transactional(rollbackFor = { Throwable.class })\n public class PropagationManagerImpl implements PropagationManager {\n \n-    /**\n-     * Logger.\n-     */\n     protected static final Logger LOG = LoggerFactory.getLogger(PropagationManager.class);\n \n     protected AnyObjectDAO anyObjectDAO;\n@@ -129,7 +125,7 @@ public List<PropagationTask> getAnyObjectCreateTasks(\n \n         AnyObject anyObject = anyObjectDAO.authFind(key);\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n-            virAttrHandler.fillVirtual(anyObject, vAttrs, anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT));\n+            virAttrHandler.fillVirtual(anyObject, vAttrs);\n         }\n \n         return getCreateTaskIds(anyObject, null, null, propByRes, noPropResourceNames);\n@@ -146,7 +142,7 @@ public List<PropagationTask> getUserCreateTasks(\n \n         User user = userDAO.authFind(key);\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n-            virAttrHandler.fillVirtual(user, vAttrs, anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+            virAttrHandler.fillVirtual(user, vAttrs);\n         }\n         return getCreateTaskIds(user, password, enable, propByRes, noPropResourceNames);\n     }\n@@ -169,7 +165,7 @@ public List<PropagationTask> getGroupCreateTasks(\n \n         Group group = groupDAO.authFind(key);\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n-            virAttrHandler.fillVirtual(group, vAttrs, anyUtilsFactory.getInstance(AnyTypeKind.GROUP));\n+            virAttrHandler.fillVirtual(group, vAttrs);\n         }\n \n         return getCreateTaskIds(group, null, null, propByRes, noPropResourceNames);\n@@ -287,11 +283,13 @@ public List<PropagationTask> getUpdateTasks(final Any<?, ?, ?> any,\n             final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated,\n             final PropagationByResource propByRes, final Collection<String> noPropResourceNames) {\n \n-        PropagationByResource localPropByRes = virAttrHandler.fillVirtual(any, vAttrsToBeRemoved == null\n-                ? Collections.<String>emptySet()\n-                : vAttrsToBeRemoved, vAttrsToBeUpdated == null\n+        PropagationByResource localPropByRes = virAttrHandler.fillVirtual(\n+                any,\n+                vAttrsToBeRemoved == null\n+                        ? Collections.<String>emptySet()\n+                        : vAttrsToBeRemoved, vAttrsToBeUpdated == null\n                         ? Collections.<AttrMod>emptySet()\n-                        : vAttrsToBeUpdated, anyUtilsFactory.getInstance(any));\n+                        : vAttrsToBeUpdated);\n \n         if (propByRes == null || propByRes.isEmpty()) {\n             localPropByRes.addAll(ResourceOperation.UPDATE, any.getResourceNames());\n@@ -419,7 +417,7 @@ protected List<PropagationTask> createTasks(final Any<?, ?, ?> any,\n         if (!propByRes.get(ResourceOperation.CREATE).isEmpty()\n                 && vAttrsToBeRemoved != null && vAttrsToBeUpdated != null) {\n \n-            connObjectUtils.retrieveVirAttrValues(any);\n+            virAttrHandler.retrieveVirAttrValues(any);\n \n             // update vAttrsToBeUpdated as well\n             for (VirAttr<?> virAttr : any.getVirAttrs()) {"},{"sha":"8f80ac053161e4967deb11450aa2fe4811dc2d7a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractProvisioningJob.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -302,7 +302,8 @@ protected String createReport(final Collection<ProvisioningResult> provResults,\n                 append(' ').\n                 append(\"[deleted/failures]: \").append(gSuccDelete.size()).append('/').append(gFailDelete.size()).\n                 append(' ').\n-                append(\"[no operation/ignored]: \").append(gSuccNone.size()).append('/').append(gIgnore.size());\n+                append(\"[no operation/ignored]: \").append(gSuccNone.size()).append('/').append(gIgnore.size()).\n+                append('\\n');\n         report.append(\"Any objects \").\n                 append(\"[created/failures]: \").append(aSuccCreate.size()).append('/').append(aFailCreate.size()).\n                 append(' ')."},{"sha":"fd5a482b7baace2427814c7a0bdfd752ce70089e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -116,14 +116,13 @@ protected final void doHandle(final Any<?, ?, ?> any)\n \n         Object output = null;\n         Result resultStatus = null;\n-        ConnectorObject beforeObj = null;\n         String operation = null;\n \n-        // Try to read remote object (user / group) BEFORE any actual operation\n+        // Try to read remote object BEFORE any actual operation\n         Provision provision = profile.getTask().getResource().getProvision(any.getType());\n         String connObjecKey = MappingUtils.getConnObjectKeyValue(any, provision);\n \n-        beforeObj = getRemoteObject(connObjecKey, provision.getObjectClass());\n+        ConnectorObject beforeObj = getRemoteObject(connObjecKey, provision.getObjectClass());\n \n         Boolean status = profile.getTask().isSyncStatus() ? enabled : null;\n \n@@ -186,7 +185,6 @@ protected final void doHandle(final Any<?, ?, ?> any)\n                         default:\n                         // do nothing\n                     }\n-\n                 } else {\n                     operation = MatchingRule.toEventName(profile.getTask().getMatchingRule());\n                     result.setOperation(getResourceOperation(profile.getTask().getMatchingRule()));"},{"sha":"6d8986a738f18f12842f635ef5ed153d7ed79685","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -109,7 +109,7 @@ protected List<ProvisioningResult> assign(\n \n         anyTO.getResources().add(profile.getTask().getResource().getKey());\n \n-        final ProvisioningResult result = new ProvisioningResult();\n+        ProvisioningResult result = new ProvisioningResult();\n         result.setOperation(ResourceOperation.CREATE);\n         result.setAnyType(provision.getAnyType().getKey());\n         result.setStatus(ProvisioningResult.Status.SUCCESS);\n@@ -149,7 +149,7 @@ protected List<ProvisioningResult> provision(\n         AnyTO transformed = anyTransformer.transform(anyTO);\n         LOG.debug(\"Transformed: {}\", transformed);\n \n-        final ProvisioningResult result = new ProvisioningResult();\n+        ProvisioningResult result = new ProvisioningResult();\n         result.setOperation(ResourceOperation.CREATE);\n         result.setAnyType(provision.getAnyType().getKey());\n         result.setStatus(ProvisioningResult.Status.SUCCESS);\n@@ -270,7 +270,7 @@ protected List<ProvisioningResult> update(final SyncDelta delta, final List<Long\n                             workingDelta = action.beforeUpdate(this.getProfile(), workingDelta, before, anyMod);\n                         }\n \n-                        final AnyTO updated = doUpdate(before, anyMod, workingDelta, result);\n+                        AnyTO updated = doUpdate(before, anyMod, workingDelta, result);\n \n                         for (SyncActions action : profile.getActions()) {\n                             action.after(this.getProfile(), workingDelta, updated, result);\n@@ -335,13 +335,13 @@ protected List<ProvisioningResult> deprovision(\n             Object output;\n             Result resultStatus;\n \n-            final ProvisioningResult result = new ProvisioningResult();\n+            ProvisioningResult result = new ProvisioningResult();\n             result.setOperation(ResourceOperation.DELETE);\n             result.setAnyType(provision.getAnyType().getKey());\n             result.setStatus(ProvisioningResult.Status.SUCCESS);\n             result.setKey(id);\n \n-            final AnyTO before = getAnyTO(id);\n+            AnyTO before = getAnyTO(id);\n \n             if (before == null) {\n                 result.setStatus(ProvisioningResult.Status.FAILURE);\n@@ -427,8 +427,8 @@ protected List<ProvisioningResult> link(\n \n         final List<ProvisioningResult> updResults = new ArrayList<>();\n \n-        for (Long id : anys) {\n-            LOG.debug(\"About to unassign resource {}\", id);\n+        for (Long key : anys) {\n+            LOG.debug(\"About to unassign resource {}\", key);\n \n             Object output;\n             Result resultStatus;\n@@ -437,13 +437,13 @@ protected List<ProvisioningResult> link(\n             result.setOperation(ResourceOperation.NONE);\n             result.setAnyType(provision.getAnyType().getKey());\n             result.setStatus(ProvisioningResult.Status.SUCCESS);\n-            result.setKey(id);\n+            result.setKey(key);\n \n-            final AnyTO before = getAnyTO(id);\n+            AnyTO before = getAnyTO(key);\n \n             if (before == null) {\n                 result.setStatus(ProvisioningResult.Status.FAILURE);\n-                result.setMessage(String.format(\"Any '%s(%d)' not found\", provision.getAnyType().getKey(), id));\n+                result.setMessage(String.format(\"Any '%s(%d)' not found\", provision.getAnyType().getKey(), key));\n             }\n \n             if (!profile.isDryRun()) {\n@@ -471,7 +471,7 @@ protected List<ProvisioningResult> link(\n                         }\n \n                         resultStatus = Result.SUCCESS;\n-                        LOG.debug(\"{} {} successfully updated\", provision.getAnyType().getKey(), id);\n+                        LOG.debug(\"{} {} successfully updated\", provision.getAnyType().getKey(), key);\n                     } catch (IgnoreProvisionException e) {\n                         throw e;\n                     } catch (PropagationException e) {\n@@ -527,11 +527,10 @@ protected List<ProvisioningResult> delete(\n             Object output;\n             Result resultStatus = Result.FAILURE;\n \n-            AnyTO before = null;\n-            final ProvisioningResult result = new ProvisioningResult();\n+            ProvisioningResult result = new ProvisioningResult();\n \n             try {\n-                before = getAnyTO(id);\n+                AnyTO before = getAnyTO(id);\n \n                 result.setKey(id);\n                 result.setName(getName(before));\n@@ -590,7 +589,7 @@ private List<ProvisioningResult> ignore(\n         LOG.debug(\"Any to ignore {}\", delta.getObject().getUid().getUidValue());\n \n         final List<ProvisioningResult> ignoreResults = new ArrayList<>();\n-        final ProvisioningResult result = new ProvisioningResult();\n+        ProvisioningResult result = new ProvisioningResult();\n \n         result.setKey(null);\n         result.setName(delta.getObject().getUid().getUidValue());"},{"sha":"cf08d8d192447282d8173d46aae3586c7dfca567","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncopeResultHandler.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -49,10 +49,7 @@\n public abstract class AbstractSyncopeResultHandler<T extends ProvisioningTask, A extends ProvisioningActions>\n         implements SyncopeResultHandler<T, A> {\n \n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(AbstractSyncopeResultHandler.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeResultHandler.class);\n \n     @Autowired\n     protected AnyObjectDAO anyObjectDAO;"},{"sha":"860e10b606f89d376b2f08b824f32fdcd2b83a84","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupSyncResultHandlerImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -36,7 +36,7 @@\n \n public class GroupSyncResultHandlerImpl extends AbstractSyncResultHandler implements GroupSyncResultHandler {\n \n-    protected Map<Long, String> groupOwnerMap = new HashMap<>();\n+    protected final Map<Long, String> groupOwnerMap = new HashMap<>();\n \n     @Override\n     public Map<Long, String> getGroupOwnerMap() {\n@@ -107,15 +107,15 @@ protected AnyTO doUpdate(\n         // moved after group provisioning manager\n         String groupOwner = null;\n         for (AttrMod attrMod : groupMod.getPlainAttrsToUpdate()) {\n-            if (attrMod.getSchema().isEmpty()) {\n+            if (attrMod.getSchema().isEmpty() && !attrMod.getValuesToBeAdded().isEmpty()) {\n                 groupOwner = attrMod.getValuesToBeAdded().iterator().next();\n             }\n         }\n         if (groupOwner != null) {\n             groupOwnerMap.put(updated.getKey(), groupOwner);\n         }\n \n-        final GroupTO after = groupDataBinder.getGroupTO(updated.getKey());\n+        GroupTO after = groupDataBinder.getGroupTO(updated.getKey());\n \n         result.setName(getName(after));\n "},{"sha":"873232f81b3a541be94ace8758d318b1d678f6be","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPMembershipSyncActions.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -46,6 +46,7 @@\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.misc.AuditManager;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n@@ -63,7 +64,7 @@\n  * Simple action for synchronizing LDAP groups memberships to Syncope group memberships, when the same resource is\n  * configured for both users and groups.\n  *\n- * @see org.apache.syncope.core.propagation.impl.LDAPMembershipPropagationActions\n+ * @see org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions\n  */\n public class LDAPMembershipSyncActions extends DefaultSyncActions {\n \n@@ -72,6 +73,9 @@ public class LDAPMembershipSyncActions extends DefaultSyncActions {\n     @Autowired\n     protected AnyTypeDAO anyTypeDAO;\n \n+    @Autowired\n+    protected UserDAO userDAO;\n+\n     @Autowired\n     protected GroupDAO groupDAO;\n \n@@ -182,7 +186,7 @@ protected List<Object> getMembAttrValues(final SyncDelta delta, final Connector\n         Attribute membAttr = delta.getObject().getAttributeByName(groupMemberName);\n         // if not found, perform an additional read on the underlying connector for the same connector object\n         if (membAttr == null) {\n-            final OperationOptionsBuilder oob = new OperationOptionsBuilder();\n+            OperationOptionsBuilder oob = new OperationOptionsBuilder();\n             oob.setAttributesToGet(groupMemberName);\n             membAttr = connector.getObjectAttribute(ObjectClass.GROUP, delta.getUid(), oob.build(), groupMemberName);\n         }"},{"sha":"b658bc4865e41a598abfc7d9eceea8994678439b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/PushJobImpl.java","status":"modified","additions":29,"deletions":7,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -27,7 +27,6 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n import org.apache.syncope.core.provisioning.api.sync.PushActions;\n@@ -39,7 +38,9 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.job.PushJob;\n+import org.apache.syncope.core.provisioning.api.sync.AnyObjectPushResultHandler;\n import org.apache.syncope.core.provisioning.api.sync.GroupPushResultHandler;\n+import org.apache.syncope.core.provisioning.api.sync.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.api.sync.UserPushResultHandler;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -111,15 +112,20 @@ protected String executeWithSecurityContext(\n         profile.setDryRun(dryRun);\n         profile.setResAct(null);\n \n+        AnyObjectPushResultHandler ahandler =\n+                (AnyObjectPushResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n+                createBean(AnyObjectPushResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+        ahandler.setProfile(profile);\n+\n         UserPushResultHandler uhandler =\n                 (UserPushResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n                 createBean(UserPushResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n         uhandler.setProfile(profile);\n \n-        GroupPushResultHandler rhandler =\n+        GroupPushResultHandler ghandler =\n                 (GroupPushResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n                 createBean(GroupPushResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n-        rhandler.setProfile(profile);\n+        ghandler.setProfile(profile);\n \n         if (actions != null && !profile.isDryRun()) {\n             for (PushActions action : actions) {\n@@ -138,16 +144,32 @@ protected String executeWithSecurityContext(\n                 for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n                     List<? extends Any<?, ?, ?>> localAnys = StringUtils.isBlank(filter)\n                             ? anyDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE)\n-                            : searchDAO.<User>search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                            : searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n                                     SearchCondConverter.convert(filter),\n                                     Collections.<OrderByClause>emptyList(), provision.getAnyType().getKind());\n \n                     for (Any<?, ?, ?> any : localAnys) {\n+                        SyncopePushResultHandler handler;\n+                        switch (provision.getAnyType().getKind()) {\n+                            case USER:\n+                                handler = uhandler;\n+                                break;\n+\n+                            case GROUP:\n+                                handler = ghandler;\n+                                break;\n+\n+                            case ANY_OBJECT:\n+                            default:\n+                                handler = ahandler;\n+                        }\n+\n                         try {\n-                            uhandler.handle(any.getKey());\n+                            handler.handle(any.getKey());\n                         } catch (Exception e) {\n-                            LOG.warn(\"Failure pushing user '{}' on '{}'\", any, pushTask.getResource(), e);\n-                            throw new JobExecutionException(\"While pushing users on connector\", e);\n+                            LOG.warn(\"Failure pushing '{}' on '{}'\", any, pushTask.getResource(), e);\n+                            throw new JobExecutionException(\n+                                    \"While pushing \" + any + \" on \" + pushTask.getResource(), e);\n                         }\n                     }\n                 }"},{"sha":"479d3421d8b32350203a7c8125535ecb891c5876","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncJobImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -60,8 +60,8 @@ public class SyncJobImpl extends AbstractProvisioningJob<SyncTask, SyncActions>\n     @Autowired\n     protected SyncUtils syncUtils;\n \n-    protected void setGroupOwners(final GroupSyncResultHandler rhandler) {\n-        for (Map.Entry<Long, String> entry : rhandler.getGroupOwnerMap().entrySet()) {\n+    protected void setGroupOwners(final GroupSyncResultHandler ghandler) {\n+        for (Map.Entry<Long, String> entry : ghandler.getGroupOwnerMap().entrySet()) {\n             GroupMod groupMod = new GroupMod();\n             groupMod.setKey(entry.getKey());\n \n@@ -72,15 +72,15 @@ protected void setGroupOwners(final GroupSyncResultHandler rhandler) {\n                 Long userKey = syncUtils.findMatchingAnyKey(\n                         anyTypeDAO.findUser(),\n                         entry.getValue(),\n-                        rhandler.getProfile().getTask().getResource(),\n-                        rhandler.getProfile().getConnector());\n+                        ghandler.getProfile().getTask().getResource(),\n+                        ghandler.getProfile().getConnector());\n \n                 if (userKey == null) {\n                     Long groupKey = syncUtils.findMatchingAnyKey(\n                             anyTypeDAO.findGroup(),\n                             entry.getValue(),\n-                            rhandler.getProfile().getTask().getResource(),\n-                            rhandler.getProfile().getConnector());\n+                            ghandler.getProfile().getTask().getResource(),\n+                            ghandler.getProfile().getConnector());\n \n                     if (groupKey != null) {\n                         groupMod.setGroupOwner(new ReferenceMod(groupKey));"},{"sha":"b748345aaa0907da6036f0473d42ae10522d9d6d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"modified","additions":23,"deletions":39,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -32,9 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n@@ -69,52 +67,40 @@\n @Component\n public class SyncUtils {\n \n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(SyncUtils.class);\n-\n-    /**\n-     * Policy DAO.\n-     */\n-    @Autowired\n-    protected PolicyDAO policyDAO;\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncUtils.class);\n \n     /**\n      * Schema DAO.\n      */\n     @Autowired\n-    protected PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    protected AnyTypeDAO anyTypeDAO;\n+    private PlainSchemaDAO plainSchemaDAO;\n \n     /**\n      * Any Object DAO.\n      */\n     @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n+    private AnyObjectDAO anyObjectDAO;\n \n     /**\n      * User DAO.\n      */\n     @Autowired\n-    protected UserDAO userDAO;\n+    private UserDAO userDAO;\n \n     /**\n      * Group DAO.\n      */\n     @Autowired\n-    protected GroupDAO groupDAO;\n+    private GroupDAO groupDAO;\n \n     /**\n      * Search DAO.\n      */\n     @Autowired\n-    protected AnySearchDAO searchDAO;\n+    private AnySearchDAO searchDAO;\n \n     @Autowired\n-    protected AnyUtilsFactory anyUtilsFactory;\n+    private AnyUtilsFactory anyUtilsFactory;\n \n     public Long findMatchingAnyKey(\n             final AnyType anyType,\n@@ -180,7 +166,8 @@ private List<Long> findByConnObjectKeyItem(\n         switch (connObjectKeyItem.getIntMappingType()) {\n             case UserPlainSchema:\n             case GroupPlainSchema:\n-                final PlainAttrValue value = anyUtils.newPlainAttrValue();\n+            case AnyPlainSchema:\n+                PlainAttrValue value = anyUtils.newPlainAttrValue();\n \n                 PlainSchema schema = plainSchemaDAO.find(connObjectKeyItem.getIntAttrName());\n                 if (schema == null) {\n@@ -203,21 +190,24 @@ private List<Long> findByConnObjectKeyItem(\n \n             case UserDerivedSchema:\n             case GroupDerivedSchema:\n+            case AnyDerivedSchema:\n                 anys = getAnyDAO(connObjectKeyItem).findByDerAttrValue(connObjectKeyItem.getIntAttrName(), uid);\n                 for (Any<?, ?, ?> any : anys) {\n                     result.add(any.getKey());\n                 }\n                 break;\n \n-            case Username:\n-                User user = userDAO.find(uid);\n-                if (user != null) {\n-                    result.add(user.getKey());\n+            case UserId:\n+            case GroupId:\n+            case AnyId:\n+                Any<?, ?, ?> any = getAnyDAO(connObjectKeyItem).find(Long.parseLong(uid));\n+                if (any != null) {\n+                    result.add(any.getKey());\n                 }\n                 break;\n \n-            case UserId:\n-                user = userDAO.find(Long.parseLong(uid));\n+            case Username:\n+                User user = userDAO.find(uid);\n                 if (user != null) {\n                     result.add(user.getKey());\n                 }\n@@ -230,13 +220,6 @@ private List<Long> findByConnObjectKeyItem(\n                 }\n                 break;\n \n-            case GroupId:\n-                group = groupDAO.find(Long.parseLong(uid));\n-                if (group != null) {\n-                    result.add(group.getKey());\n-                }\n-                break;\n-\n             default:\n                 LOG.error(\"Invalid connObjectKey type '{}'\", connObjectKeyItem.getIntMappingType());\n         }\n@@ -354,7 +337,7 @@ private List<String> getAltSearchSchemas(final Provision provision, final SyncPo\n     }\n \n     /**\n-     * Find users / groups based on mapped uid value (or previous uid value, if updated).\n+     * Find any objects based on mapped uid value (or previous uid value, if updated).\n      *\n      * @param uid for finding by connObjectKey\n      * @param connObj for finding by attribute value\n@@ -381,9 +364,10 @@ public List<Long> findExisting(\n             altSearchSchemas = getAltSearchSchemas(provision, syncPolicySpec);\n         }\n \n-        return syncRule == null ? altSearchSchemas == null || altSearchSchemas.isEmpty()\n-                ? findByConnObjectKeyItem(uid, provision, anyUtils)\n-                : findByAnySearch(connObj, altSearchSchemas, provision, anyUtils)\n+        return syncRule == null\n+                ? altSearchSchemas == null || altSearchSchemas.isEmpty()\n+                        ? findByConnObjectKeyItem(uid, provision, anyUtils)\n+                        : findByAnySearch(connObj, altSearchSchemas, provision, anyUtils)\n                 : findByCorrelationRule(connObj, syncRule, anyUtils.getAnyTypeKind());\n     }\n "},{"sha":"f2eb83903c822459251fcacd271e3a75dae41446","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -79,7 +79,7 @@ public void issue42() {\n \n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setKey(\"resource-issue42\");\n-        resourceTO.setConnectorId(100L);\n+        resourceTO.setConnector(100L);\n         resourceTO.setPropagationMode(PropagationMode.ONE_PHASE);\n         resourceTO.setEnforceMandatoryCondition(true);\n "},{"sha":"18f6101022770577c481bc228c368a7315d2e154","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -51,6 +51,7 @@\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.UnallowedSchemaException;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.identityconnectors.framework.common.exceptions.ConfigurationException;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n@@ -114,6 +115,8 @@ public Response toResponse(final Exception ex) {\n                     header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED);\n         } else if (ex instanceof UnauthorizedException) {\n             builder = builder(ClientExceptionType.Unauthorized, ExceptionUtils.getRootCauseMessage(ex));\n+        } else if (ex instanceof UnallowedSchemaException) {\n+            builder = builder(ClientExceptionType.UnallowedSchemas, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof EntityExistsException || ex instanceof DuplicateException) {\n             builder = builder(ClientExceptionType.EntityExists, getJPAMessage(ex));\n         } else if (ex instanceof DataIntegrityViolationException || ex instanceof JpaSystemException) {"},{"sha":"47cdde2bfc7f8a33f48d1fde17b6ec5323b79dc5","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeClassServiceImpl.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyTypeClassServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyTypeClassServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyTypeClassServiceImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n+import org.apache.syncope.core.logic.AnyTypeClassLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class AnyTypeClassServiceImpl extends AbstractServiceImpl implements AnyTypeClassService {\n+\n+    @Autowired\n+    private AnyTypeClassLogic logic;\n+\n+    @Override\n+    public List<AnyTypeClassTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public AnyTypeClassTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response create(final AnyTypeClassTO anyTypeTO) {\n+        AnyTypeClassTO created = logic.create(anyTypeTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getKey())).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID, created.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void update(final String key, final AnyTypeClassTO anyTypeTO) {\n+        anyTypeTO.setKey(key);\n+        logic.update(anyTypeTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+}"},{"sha":"9b289d5da6a0d9857d243b88af2fcf32ee3c02d2","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeServiceImpl.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyTypeServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyTypeServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyTypeServiceImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.AnyTypeService;\n+import org.apache.syncope.core.logic.AnyTypeLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class AnyTypeServiceImpl extends AbstractServiceImpl implements AnyTypeService {\n+\n+    @Autowired\n+    private AnyTypeLogic logic;\n+\n+    @Override\n+    public List<AnyTypeTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public AnyTypeTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response create(final AnyTypeTO anyTypeTO) {\n+        AnyTypeTO created = logic.create(anyTypeTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getKey())).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID, created.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void update(final String key, final AnyTypeTO anyTypeTO) {\n+        anyTypeTO.setKey(key);\n+        logic.update(anyTypeTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+}"},{"sha":"9f6099c580c3ca0cd7cefb86236ad88cdedfbf64","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -135,12 +135,13 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n         BulkActionResult result = new BulkActionResult();\n \n         if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n-            for (String id : bulkAction.getTargets()) {\n+            for (String key : bulkAction.getTargets()) {\n                 try {\n-                    result.add(logic.delete(Long.valueOf(id)).getKey(), BulkActionResult.Status.SUCCESS);\n+                    result.getResults().put(\n+                            String.valueOf(logic.delete(Long.valueOf(key)).getKey()), BulkActionResult.Status.SUCCESS);\n                 } catch (Exception e) {\n-                    LOG.error(\"Error performing delete for connector {}\", id, e);\n-                    result.add(id, BulkActionResult.Status.FAILURE);\n+                    LOG.error(\"Error performing delete for connector {}\", key, e);\n+                    result.getResults().put(key, BulkActionResult.Status.FAILURE);\n                 }\n             }\n         }"},{"sha":"5c640f0fc72e27883eee98c11dae7d543aadf604","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":20,"deletions":14,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -155,21 +155,23 @@ public Response bulkDeassociation(\n                 updated = logic.read(groupKey);\n         }\n \n-        final BulkActionResult res = new BulkActionResult();\n+        BulkActionResult result = new BulkActionResult();\n \n         if (type == ResourceDeassociationActionType.UNLINK) {\n             for (ResourceName resourceName : resourceNames) {\n-                res.add(resourceName.getElement(), updated.getResources().contains(resourceName.getElement())\n-                        ? BulkActionResult.Status.FAILURE\n-                        : BulkActionResult.Status.SUCCESS);\n+                result.getResults().put(resourceName.getElement(),\n+                        updated.getResources().contains(resourceName.getElement())\n+                                ? BulkActionResult.Status.FAILURE\n+                                : BulkActionResult.Status.SUCCESS);\n             }\n         } else {\n             for (PropagationStatus propagationStatusTO : updated.getPropagationStatusTOs()) {\n-                res.add(propagationStatusTO.getResource(), propagationStatusTO.getStatus().toString());\n+                result.getResults().put(propagationStatusTO.getResource(),\n+                        BulkActionResult.Status.valueOf(propagationStatusTO.getStatus().toString()));\n             }\n         }\n \n-        return modificationResponse(res);\n+        return modificationResponse(result);\n     }\n \n     @Override\n@@ -198,21 +200,23 @@ public Response bulkAssociation(\n                 updated = logic.read(groupKey);\n         }\n \n-        final BulkActionResult res = new BulkActionResult();\n+        BulkActionResult result = new BulkActionResult();\n \n         if (type == ResourceAssociationActionType.LINK) {\n             for (ResourceName resourceName : resourceNames) {\n-                res.add(resourceName.getElement(), updated.getResources().contains(resourceName.getElement())\n-                        ? BulkActionResult.Status.FAILURE\n-                        : BulkActionResult.Status.SUCCESS);\n+                result.getResults().put(resourceName.getElement(),\n+                        updated.getResources().contains(resourceName.getElement())\n+                                ? BulkActionResult.Status.FAILURE\n+                                : BulkActionResult.Status.SUCCESS);\n             }\n         } else {\n             for (PropagationStatus propagationStatusTO : updated.getPropagationStatusTOs()) {\n-                res.add(propagationStatusTO.getResource(), propagationStatusTO.getStatus().toString());\n+                result.getResults().put(propagationStatusTO.getResource(),\n+                        BulkActionResult.Status.valueOf(propagationStatusTO.getStatus().toString()));\n             }\n         }\n \n-        return modificationResponse(res);\n+        return modificationResponse(result);\n     }\n \n     @Override\n@@ -222,10 +226,12 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n         if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n             for (String groupKey : bulkAction.getTargets()) {\n                 try {\n-                    result.add(logic.delete(Long.valueOf(groupKey)).getKey(), BulkActionResult.Status.SUCCESS);\n+                    result.getResults().put(\n+                            String.valueOf(logic.delete(Long.valueOf(groupKey)).getKey()),\n+                            BulkActionResult.Status.SUCCESS);\n                 } catch (Exception e) {\n                     LOG.error(\"Error performing delete for group {}\", groupKey, e);\n-                    result.add(groupKey, BulkActionResult.Status.FAILURE);\n+                    result.getResults().put(groupKey, BulkActionResult.Status.FAILURE);\n                 }\n             }\n         } else {"},{"sha":"28b834b44efb526e9f9a8aee9d84cc4ae35da860","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -107,7 +107,7 @@ public BulkActionResult bulkDeassociation(\n                         ? groupLogic\n                         : anyObjectLogic;\n \n-        BulkActionResult res = new BulkActionResult();\n+        BulkActionResult result = new BulkActionResult();\n \n         for (AnyKey key : keys) {\n             Set<String> resources = Collections.singleton(resourceKey);\n@@ -128,14 +128,14 @@ public BulkActionResult bulkDeassociation(\n                     default:\n                 }\n \n-                res.add(key, BulkActionResult.Status.SUCCESS);\n+                result.getResults().put(String.valueOf(key.getElement()), BulkActionResult.Status.SUCCESS);\n             } catch (Exception e) {\n                 LOG.warn(\"While executing {} on {} {}\", type, anyTypeKey, key.getElement(), e);\n-                res.add(key, BulkActionResult.Status.FAILURE);\n+                result.getResults().put(String.valueOf(key.getElement()), BulkActionResult.Status.FAILURE);\n             }\n         }\n \n-        return res;\n+        return result;\n     }\n \n     @Override\n@@ -145,10 +145,10 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n         if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n             for (String name : bulkAction.getTargets()) {\n                 try {\n-                    result.add(logic.delete(name).getKey(), BulkActionResult.Status.SUCCESS);\n+                    result.getResults().put(logic.delete(name).getKey(), BulkActionResult.Status.SUCCESS);\n                 } catch (Exception e) {\n                     LOG.error(\"Error performing delete for resource {}\", name, e);\n-                    result.add(name, BulkActionResult.Status.FAILURE);\n+                    result.getResults().put(name, BulkActionResult.Status.FAILURE);\n                 }\n             }\n         }"},{"sha":"d42ed6a73c73623e79dabeff2170254c200d94d0","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -129,10 +129,12 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n             case DELETE:\n                 for (String taskKey : bulkAction.getTargets()) {\n                     try {\n-                        result.add(logic.delete(Long.valueOf(taskKey)).getKey(), BulkActionResult.Status.SUCCESS);\n+                        result.getResults().put(\n+                                String.valueOf(logic.delete(Long.valueOf(taskKey)).getKey()),\n+                                BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing delete for task {}\", taskKey, e);\n-                        result.add(taskKey, BulkActionResult.Status.FAILURE);\n+                        result.getResults().put(taskKey, BulkActionResult.Status.FAILURE);\n                     }\n                 }\n                 break;\n@@ -141,10 +143,10 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n                 for (String taskKey : bulkAction.getTargets()) {\n                     try {\n                         logic.execute(Long.valueOf(taskKey), true);\n-                        result.add(taskKey, BulkActionResult.Status.SUCCESS);\n+                        result.getResults().put(taskKey, BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing dryrun for task {}\", taskKey, e);\n-                        result.add(taskKey, BulkActionResult.Status.FAILURE);\n+                        result.getResults().put(taskKey, BulkActionResult.Status.FAILURE);\n                     }\n                 }\n                 break;\n@@ -153,10 +155,10 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n                 for (String taskKey : bulkAction.getTargets()) {\n                     try {\n                         logic.execute(Long.valueOf(taskKey), false);\n-                        result.add(taskKey, BulkActionResult.Status.SUCCESS);\n+                        result.getResults().put(taskKey, BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing execute for task {}\", taskKey, e);\n-                        result.add(taskKey, BulkActionResult.Status.FAILURE);\n+                        result.getResults().put(taskKey, BulkActionResult.Status.FAILURE);\n                     }\n                 }\n                 break;"},{"sha":"83f09a47487854525cd36f18ebf8f905595b92ad","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":27,"deletions":19,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -60,7 +60,7 @@ public Response getUsername(final Long userKey) {\n     }\n \n     @Override\n-    public Response getUserId(final String username) {\n+    public Response getUserKey(final String username) {\n         return Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW).\n                 header(RESTHeaders.USER_ID, logic.getKey(username)).\n                 build();\n@@ -179,21 +179,23 @@ public Response bulkDeassociation(\n                 updated = logic.read(userKey);\n         }\n \n-        final BulkActionResult res = new BulkActionResult();\n+        BulkActionResult result = new BulkActionResult();\n \n         if (type == ResourceDeassociationActionType.UNLINK) {\n             for (ResourceName resourceName : resourceNames) {\n-                res.add(resourceName.getElement(), updated.getResources().contains(resourceName.getElement())\n-                        ? BulkActionResult.Status.FAILURE\n-                        : BulkActionResult.Status.SUCCESS);\n+                result.getResults().put(\n+                        resourceName.getElement(), updated.getResources().contains(resourceName.getElement())\n+                                ? BulkActionResult.Status.FAILURE\n+                                : BulkActionResult.Status.SUCCESS);\n             }\n         } else {\n             for (PropagationStatus propagationStatusTO : updated.getPropagationStatusTOs()) {\n-                res.add(propagationStatusTO.getResource(), propagationStatusTO.getStatus().toString());\n+                result.getResults().put(propagationStatusTO.getResource(),\n+                        BulkActionResult.Status.valueOf(propagationStatusTO.getStatus().toString()));\n             }\n         }\n \n-        return modificationResponse(res);\n+        return modificationResponse(result);\n     }\n \n     @Override\n@@ -232,21 +234,23 @@ public Response bulkAssociation(\n                 updated = logic.read(userKey);\n         }\n \n-        final BulkActionResult res = new BulkActionResult();\n+        BulkActionResult result = new BulkActionResult();\n \n         if (type == ResourceAssociationActionType.LINK) {\n             for (ResourceName resourceName : associationMod.getTargetResources()) {\n-                res.add(resourceName.getElement(), updated.getResources().contains(resourceName.getElement())\n-                        ? BulkActionResult.Status.FAILURE\n-                        : BulkActionResult.Status.SUCCESS);\n+                result.getResults().put(resourceName.getElement(),\n+                        updated.getResources().contains(resourceName.getElement())\n+                                ? BulkActionResult.Status.FAILURE\n+                                : BulkActionResult.Status.SUCCESS);\n             }\n         } else {\n             for (PropagationStatus propagationStatusTO : updated.getPropagationStatusTOs()) {\n-                res.add(propagationStatusTO.getResource(), propagationStatusTO.getStatus().toString());\n+                result.getResults().put(propagationStatusTO.getResource(),\n+                        BulkActionResult.Status.valueOf(propagationStatusTO.getStatus().toString()));\n             }\n         }\n \n-        return modificationResponse(res);\n+        return modificationResponse(result);\n     }\n \n     @Override\n@@ -257,10 +261,12 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n             case DELETE:\n                 for (String key : bulkAction.getTargets()) {\n                     try {\n-                        result.add(logic.delete(Long.valueOf(key)).getKey(), BulkActionResult.Status.SUCCESS);\n+                        result.getResults().put(\n+                                String.valueOf(logic.delete(Long.valueOf(key)).getKey()),\n+                                BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing delete for user {}\", key, e);\n-                        result.add(key, BulkActionResult.Status.FAILURE);\n+                        result.getResults().put(key, BulkActionResult.Status.FAILURE);\n                     }\n                 }\n                 break;\n@@ -271,10 +277,11 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n                     statusMod.setKey(Long.valueOf(key));\n                     statusMod.setType(StatusMod.ModType.SUSPEND);\n                     try {\n-                        result.add(logic.status(statusMod).getKey(), BulkActionResult.Status.SUCCESS);\n+                        result.getResults().put(\n+                                String.valueOf(logic.status(statusMod).getKey()), BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing suspend for user {}\", key, e);\n-                        result.add(key, BulkActionResult.Status.FAILURE);\n+                        result.getResults().put(key, BulkActionResult.Status.FAILURE);\n                     }\n                 }\n                 break;\n@@ -285,10 +292,11 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n                     statusMod.setKey(Long.valueOf(key));\n                     statusMod.setType(StatusMod.ModType.REACTIVATE);\n                     try {\n-                        result.add(logic.status(statusMod).getKey(), BulkActionResult.Status.SUCCESS);\n+                        result.getResults().put(\n+                                String.valueOf(logic.status(statusMod).getKey()), BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing reactivate for user {}\", key, e);\n-                        result.add(key, BulkActionResult.Status.FAILURE);\n+                        result.getResults().put(key, BulkActionResult.Status.FAILURE);\n                     }\n                 }\n                 break;"},{"sha":"2e00cb9a5e8eec829844d45c9f4c81cd68f2fea0","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -84,15 +84,10 @@\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n- * Activiti {\n- *\n- * @see http://www.activiti.org/} based implementation.\n+ * Activiti {@link http://www.activiti.org/} based implementation.\n  */\n public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(ActivitiUserWorkflowAdapter.class);\n \n     private static final String[] PROPERTY_IGNORE_PROPS = { \"type\" };\n@@ -258,7 +253,7 @@ public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boo\n     public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n             final Boolean enabled, final boolean storePassword) {\n \n-        final Map<String, Object> variables = new HashMap<>();\n+        Map<String, Object> variables = new HashMap<>();\n         variables.put(WF_EXECUTOR, AuthContextUtils.getAuthenticatedUsername());\n         variables.put(USER_TO, userTO);\n         variables.put(ENABLED, enabled);\n@@ -271,8 +266,7 @@ public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boo\n             throwException(e, \"While starting \" + WF_PROCESS_ID + \" instance\");\n         }\n \n-        User user =\n-                runtimeService.getVariable(processInstance.getProcessInstanceId(), USER, User.class);\n+        User user = runtimeService.getVariable(processInstance.getProcessInstanceId(), USER, User.class);\n \n         Boolean updatedEnabled =\n                 runtimeService.getVariable(processInstance.getProcessInstanceId(), ENABLED, Boolean.class);"},{"sha":"f598410acc941f0c3c334b88629cc1e5aff7d071","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUtils.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUtils.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.activiti;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class ActivitiUtils {\n+\n+    @Transactional(readOnly = true)\n+    public boolean isUserIngroup(final User user, final Long groupKey) {\n+        return CollectionUtils.exists(user.getMemberships(), new Predicate<UMembership>() {\n+\n+            @Override\n+            public boolean evaluate(final UMembership membership) {\n+                return groupKey != null && groupKey.equals(membership.getRightEnd().getKey());\n+            }\n+        });\n+    }\n+}"},{"sha":"658795c16ec9e32b55bd76636db458282ca0bcc8","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeUserManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserManager.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -75,8 +75,8 @@ public List<Group> findGroupsByUser(final String userKey) {\n         org.apache.syncope.core.persistence.api.entity.user.User user = userDAO.find(userKey);\n         if (user != null) {\n             result = new ArrayList<>();\n-            for (Long groupId : userDAO.findAllGroupKeys(user)) {\n-                result.add(new GroupEntity(groupId.toString()));\n+            for (Long groupKey : userDAO.findAllGroupKeys(user)) {\n+                result.add(new GroupEntity(groupKey.toString()));\n             }\n         }\n "},{"sha":"75f0c38fc89ba3a71ed2d9247d95f72f3ef4bffe","filename":"core/workflow-activiti/src/main/resources/workflowActivitiContext.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fresources%2FworkflowActivitiContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fresources%2FworkflowActivitiContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fresources%2FworkflowActivitiContext.xml?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -30,6 +30,8 @@ under the License.\n     <property name=\"fallback\" value=\"classpath:userWorkflow.bpmn20.xml\"/>\n   </bean>\n \n+  <bean id=\"activitiUtils\" class=\"org.apache.syncope.core.workflow.activiti.ActivitiUtils\"/>\n+\n   <bean id=\"syncopeActivitiUserManager\" class=\"org.apache.syncope.core.workflow.activiti.SyncopeUserManager\"/>\n   <bean id=\"syncopeActivitiGroupManager\" class=\"org.apache.syncope.core.workflow.activiti.SyncopeGroupManager\"/>\n "},{"sha":"2aaec2aa98b9917369394ebb7c62673d6073306b","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupUpdateProcessor.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,14 +18,18 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n+import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n@@ -47,15 +51,30 @@ public class GroupUpdateProcessor implements Processor {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n+    @Autowired\n+    protected VirAttrHandler virtAttrHandler;\n+\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void process(final Exchange exchange) {\n         WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n-        GroupMod anyMod = exchange.getProperty(\"anyMod\", GroupMod.class);\n+        GroupMod groupMod = exchange.getProperty(\"anyMod\", GroupMod.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n         List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(updated,\n-                anyMod.getVirAttrsToRemove(), anyMod.getVirAttrsToUpdate(), excludedResources);\n+                groupMod.getVirAttrsToRemove(), groupMod.getVirAttrsToUpdate(), excludedResources);\n+        if (tasks.isEmpty()) {\n+            // SYNCOPE-459: take care of user virtual attributes ...\n+            PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n+                    updated.getResult(),\n+                    AnyTypeKind.GROUP,\n+                    groupMod.getVirAttrsToRemove(),\n+                    groupMod.getVirAttrsToUpdate());\n+            tasks.addAll(!propByResVirAttr.isEmpty()\n+                    ? propagationManager.getGroupUpdateTasks(updated, null, null, null)\n+                    : Collections.<PropagationTask>emptyList());\n+        }\n+\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {"},{"sha":"e71a15aad08bf5fc47b6da628ad7f2aba9b4682c","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateProcessor.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -25,15 +25,16 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.java.VirAttrHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -57,15 +58,16 @@ public class UserUpdateProcessor implements Processor {\n     @SuppressWarnings(\"unchecked\")\n     public void process(final Exchange exchange) {\n         WorkflowResult<Pair<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n-        UserMod actual = exchange.getProperty(\"actual\", UserMod.class);\n+        UserMod userMod = exchange.getProperty(\"actual\", UserMod.class);\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n-            final PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n+            PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n                     updated.getResult().getKey().getKey(),\n-                    actual.getVirAttrsToRemove(),\n-                    actual.getVirAttrsToUpdate());\n+                    AnyTypeKind.USER,\n+                    userMod.getVirAttrsToRemove(),\n+                    userMod.getVirAttrsToUpdate());\n             tasks.addAll(!propByResVirAttr.isEmpty()\n                     ? propagationManager.getUserUpdateTasks(updated, false, null)\n                     : Collections.<PropagationTask>emptyList());"},{"sha":"4d0ecaf357f6625b0e52f0c902f05208bb740a56","filename":"fit/core-reference/src/main/resources/all/provisioning.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,4 +18,4 @@ camel.directory=${conf.directory}\n userProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelUserProvisioningManager\n groupProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelGroupProvisioningManager\n anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n-virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n\\ No newline at end of file"},{"sha":"df292b8bdbe4b090367fc9463235cbb520f5a6d0","filename":"fit/core-reference/src/main/resources/userWorkflow.bpmn20.xml","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -34,10 +34,14 @@ under the License.\n     <sequenceFlow id=\"flow2\" sourceRef=\"create\" targetRef=\"createGW\"/>\n     <exclusiveGateway id=\"createGW\"/>\n     <sequenceFlow id=\"createAsAnonymous2Approval\" sourceRef=\"createGW\" targetRef=\"createApproval\">\n-      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${wfExecutor == 'anonymous' || user.getStaticGroupKeys().contains(9)}]]></conditionExpression>\n+      <conditionExpression xsi:type=\"tFormalExpression\">\n+        <![CDATA[${wfExecutor == 'anonymous' || activitiUtils.isUserIngroup(user, 9)}]]>\n+      </conditionExpression>\n     </sequenceFlow>\n     <sequenceFlow id=\"create2Activate\" sourceRef=\"createGW\" targetRef=\"enableGW\">\n-      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${!user.getStaticGroupKeys().contains(9)}]]></conditionExpression>\n+      <conditionExpression xsi:type=\"tFormalExpression\">\n+        <![CDATA[${!activitiUtils.isUserIngroup(user, 9)}]]>\n+      </conditionExpression>\n     </sequenceFlow>\n     <userTask id=\"createApproval\" name=\"Create approval\" activiti:candidateGroups=\"7\" activiti:formKey=\"createApproval\">\n       <extensionElements>\n@@ -56,7 +60,9 @@ under the License.\n     </sequenceFlow>\n     <exclusiveGateway id=\"enableGW\"/>\n     <sequenceFlow id=\"createApprovalGW2OptIn\" sourceRef=\"enableGW\" targetRef=\"generateToken\">\n-      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${user.getStaticGroupKeys().contains(11)}]]></conditionExpression>\n+      <conditionExpression xsi:type=\"tFormalExpression\">\n+        <![CDATA[${activitiUtils.isUserIngroup(user, 11)}]]>\n+      </conditionExpression>\n     </sequenceFlow>\n     <sequenceFlow id=\"createApprovalGW2Activate\" sourceRef=\"enableGW\" targetRef=\"activate\">\n       <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${enabled == null}]]></conditionExpression>"},{"sha":"97fc9d08364943c5982b19805b28197f78941591","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractITCase.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -48,6 +48,8 @@\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n+import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.syncope.common.rest.api.service.CamelRouteService;\n import org.apache.syncope.common.rest.api.service.ConfigurationService;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n@@ -147,6 +149,10 @@ public abstract class AbstractITCase {\n \n     protected static SyncopeService syncopeService;\n \n+    protected static AnyTypeClassService anyTypeClassService;\n+\n+    protected static AnyTypeService anyTypeService;\n+\n     protected static RealmService realmService;\n \n     protected static RoleService roleService;\n@@ -217,6 +223,8 @@ public static void restSetup() {\n         adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n \n         syncopeService = adminClient.getService(SyncopeService.class);\n+        anyTypeClassService = adminClient.getService(AnyTypeClassService.class);\n+        anyTypeService = adminClient.getService(AnyTypeService.class);\n         realmService = adminClient.getService(RealmService.class);\n         roleService = adminClient.getService(RoleService.class);\n         userService = adminClient.getService(UserService.class);\n@@ -272,7 +280,7 @@ protected UserTO createUser(final UserTO userTO, final boolean storePassword) {\n \n     protected UserTO readUser(final String username) {\n         return userService.read(Long.valueOf(\n-                userService.getUserId(username).getHeaderString(RESTHeaders.USER_ID)));\n+                userService.getUserKey(username).getHeaderString(RESTHeaders.USER_ID)));\n     }\n \n     protected UserTO updateUser(final UserMod userMod) {\n@@ -361,7 +369,7 @@ protected InitialDirContext getLdapResourceDirContext(final String bindDn, final\n             throws NamingException {\n         ResourceTO ldapRes = resourceService.read(RESOURCE_NAME_LDAP);\n         final Map<String, ConnConfProperty> ldapConnConf =\n-                connectorService.read(ldapRes.getConnectorId()).getConfigurationMap();\n+                connectorService.read(ldapRes.getConnector()).getConfigurationMap();\n \n         Properties env = new Properties();\n         env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");"},{"sha":"37bf12c2bd8c2610b763c1612491b4b1ca33da98","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -57,7 +57,9 @@ protected static class ThreadExec implements Callable<TaskExecTO> {\n \n         private final boolean dryRun;\n \n-        public ThreadExec(AbstractTaskITCase test, Long taskKey, int maxWaitSeconds, boolean dryRun) {\n+        public ThreadExec(\n+                final AbstractTaskITCase test, final Long taskKey, final int maxWaitSeconds, final boolean dryRun) {\n+\n             this.test = test;\n             this.taskKey = taskKey;\n             this.maxWaitSeconds = maxWaitSeconds;\n@@ -66,7 +68,7 @@ public ThreadExec(AbstractTaskITCase test, Long taskKey, int maxWaitSeconds, boo\n \n         @Override\n         public TaskExecTO call() throws Exception {\n-            return test.execSyncTask(taskKey, maxWaitSeconds, dryRun);\n+            return test.execProvisioningTask(taskKey, maxWaitSeconds, dryRun);\n         }\n     }\n \n@@ -85,7 +87,7 @@ protected void removeTestUsers() {\n         }\n     }\n \n-    protected TaskExecTO execSyncTask(final Long taskKey, final int maxWaitSeconds, final boolean dryRun) {\n+    protected TaskExecTO execProvisioningTask(final Long taskKey, final int maxWaitSeconds, final boolean dryRun) {\n         AbstractTaskTO taskTO = taskService.read(taskKey);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n@@ -117,17 +119,17 @@ protected TaskExecTO execSyncTask(final Long taskKey, final int maxWaitSeconds,\n         return taskTO.getExecutions().get(taskTO.getExecutions().size() - 1);\n     }\n \n-    protected Map<Long, TaskExecTO> execSyncTasks(\n+    protected Map<Long, TaskExecTO> execProvisioningTasks(\n             final Set<Long> taskKeys, final int maxWaitSeconds, final boolean dryRun) throws Exception {\n \n-        final ExecutorService service = Executors.newFixedThreadPool(taskKeys.size());\n-        final List<Future<TaskExecTO>> futures = new ArrayList<>();\n+        ExecutorService service = Executors.newFixedThreadPool(taskKeys.size());\n+        List<Future<TaskExecTO>> futures = new ArrayList<>();\n \n         for (Long key : taskKeys) {\n             futures.add(service.submit(new ThreadExec(this, key, maxWaitSeconds, dryRun)));\n         }\n \n-        final Map<Long, TaskExecTO> res = new HashMap<>();\n+        Map<Long, TaskExecTO> res = new HashMap<>();\n \n         for (Future<TaskExecTO> future : futures) {\n             TaskExecTO taskExecTO = future.get(100, TimeUnit.SECONDS);"},{"sha":"1a086e24fe10b84bce4eb0821b14617a12a14b44","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/CamelRouteITCase.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,12 +18,14 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import static org.apache.syncope.fit.core.reference.AbstractITCase.anyTypeClassService;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -147,8 +149,14 @@ public void scriptingUpdate() {\n             schemaTO.setType(AttrSchemaType.String);\n             createSchema(SchemaType.PLAIN, schemaTO);\n \n+            AnyTypeClassTO typeClass = new AnyTypeClassTO();\n+            typeClass.setKey(\"camelAttribute\");\n+            typeClass.getPlainSchemas().add(schemaTO.getKey());\n+            anyTypeClassService.create(typeClass);\n+\n             UserTO userTO = new UserTO();\n             userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+            userTO.getAuxClasses().add(typeClass.getKey());\n             String userId = getUUIDString() + \"camelUser@syncope.apache.org\";\n             userTO.setUsername(userId);\n             userTO.setPassword(\"password123\");"},{"sha":"e311e41f23a93691b401ba810762b94f48979b4d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConfigurationITCase.java","status":"modified","additions":0,"deletions":92,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -27,20 +27,15 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.UnsupportedEncodingException;\n-import java.util.ArrayList;\n-import java.util.List;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConfTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n@@ -153,91 +148,4 @@ public void issueSYNCOPE418() {\n             assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n         }\n     }\n-\n-    private static String[] substringsBetween(final String str, final String open, final String close) {\n-        if (str == null || StringUtils.isEmpty(open) || StringUtils.isEmpty(close)) {\n-            return null;\n-        }\n-        final int strLen = str.length();\n-        if (strLen == 0) {\n-            return ArrayUtils.EMPTY_STRING_ARRAY;\n-        }\n-        final int closeLen = close.length();\n-        final int openLen = open.length();\n-        final List<String> list = new ArrayList<>();\n-        int pos = 0;\n-        while (pos < strLen - closeLen) {\n-            int start = StringUtils.indexOfIgnoreCase(str, open, pos);\n-            if (start < 0) {\n-                break;\n-            }\n-            start += openLen;\n-            final int end = StringUtils.indexOfIgnoreCase(str, close, start);\n-            if (end < 0) {\n-                break;\n-            }\n-            list.add(str.substring(start, end));\n-            pos = end + closeLen;\n-        }\n-        if (list.isEmpty()) {\n-            return null;\n-        }\n-        return list.toArray(new String[list.size()]);\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE629() throws IOException {\n-        PlainSchemaTO membershipKey = new PlainSchemaTO();\n-        membershipKey.setKey(\"membershipKey\" + getUUIDString());\n-        membershipKey.setType(AttrSchemaType.String);\n-        createSchema(SchemaType.PLAIN, membershipKey);\n-\n-        PlainSchemaTO groupKey = new PlainSchemaTO();\n-        groupKey.setKey(\"group\"\n-                + \"Key\" + getUUIDString());\n-        groupKey.setType(AttrSchemaType.String);\n-        createSchema(SchemaType.PLAIN, groupKey);\n-\n-        GroupTO groupTO = new GroupTO();\n-        groupTO.setRealm(\"/\");\n-        groupTO.setName(\"aGroup\" + getUUIDString());\n-        groupTO = createGroup(groupTO);\n-\n-        try {\n-            Response response = configurationService.export();\n-            assertNotNull(response);\n-            assertEquals(Response.Status.OK.getStatusCode(), response.getStatusInfo().getStatusCode());\n-            assertTrue(response.getMediaType().toString().startsWith(MediaType.TEXT_XML));\n-            String contentDisposition = response.getHeaderString(HttpHeaders.CONTENT_DISPOSITION);\n-            assertNotNull(contentDisposition);\n-\n-            Object entity = response.getEntity();\n-            assertTrue(entity instanceof InputStream);\n-            String configExport = IOUtils.toString((InputStream) entity, SyncopeConstants.DEFAULT_ENCODING);\n-            assertFalse(configExport.isEmpty());\n-            assertTrue(configExport.length() > 1000);\n-\n-            String[] result = substringsBetween(configExport, \"<GPLAINATTRTEMPLATE\", \"/>\");\n-            assertNotNull(result);\n-            boolean rattrExists = false;\n-            for (String entry : result) {\n-                if (entry.contains(groupKey.getKey())) {\n-                    rattrExists = true;\n-                }\n-            }\n-            assertTrue(rattrExists);\n-\n-            result = substringsBetween(configExport, \"<MPLAINATTRTEMPLATE\", \"/>\");\n-            assertNotNull(result);\n-            boolean mattrExists = false;\n-            for (String entry : result) {\n-                if (entry.contains(membershipKey.getKey())) {\n-                    mattrExists = true;\n-                }\n-            }\n-            assertTrue(mattrExists);\n-        } finally {\n-            deleteGroup(groupTO.getKey());\n-        }\n-    }\n }"},{"sha":"2cd33a552fea167766abf8dc1fcd0dc7f5700c9c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConnectorITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -273,7 +273,7 @@ private List<ResourceTO> filter(final List<ResourceTO> input, final Long connect\n         List<ResourceTO> result = new ArrayList<>();\n \n         for (ResourceTO resource : input) {\n-            if (connectorKey.equals(resource.getConnectorId())) {\n+            if (connectorKey.equals(resource.getConnector())) {\n                 result.add(resource);\n             }\n         }\n@@ -320,7 +320,7 @@ public void issueSYNCOPE10() {\n         long connId = connInstanceTO.getKey();\n \n         // Link resourceTO to the new connector instance.\n-        resourceTO.setConnectorId(connId);\n+        resourceTO.setConnector(connId);\n         // ----------------------------------\n \n         // ----------------------------------\n@@ -639,7 +639,7 @@ public void issueSYNCOPE112() {\n             ResourceTO resourceTO = new ResourceTO();\n \n             resourceTO.setKey(resourceName);\n-            resourceTO.setConnectorId(connectorTO.getKey());\n+            resourceTO.setConnector(connectorTO.getKey());\n \n             conf = new HashSet<>();\n             endpoint.getValues().clear();"},{"sha":"ae823e1851f6948b823fe059bf6c8e2d95b6a8d0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ExceptionMapperITCase.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import static org.apache.syncope.fit.core.reference.AbstractITCase.anyTypeClassService;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n \n@@ -27,6 +28,7 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -65,9 +67,15 @@ public void uniqueSchemaConstraint() {\n         schemaTO.setUniqueConstraint(true);\n         createSchema(SchemaType.PLAIN, schemaTO);\n \n+        AnyTypeClassTO typeClass = new AnyTypeClassTO();\n+        typeClass.setKey(\"camelAttribute\");\n+        typeClass.getPlainSchemas().add(schemaTO.getKey());\n+        anyTypeClassService.create(typeClass);\n+\n         // 2. create an user with mandatory attributes and unique\n         UserTO userTO1 = new UserTO();\n         userTO1.setRealm(SyncopeConstants.ROOT_REALM);\n+        userTO1.getAuxClasses().add(typeClass.getKey());\n         String userId1 = getUUIDString() + \"issue654_1@syncope.apache.org\";\n         userTO1.setUsername(userId1);\n         userTO1.setPassword(\"password123\");\n@@ -82,6 +90,7 @@ public void uniqueSchemaConstraint() {\n         // 3. create an other user with mandatory attributes and unique with the same value of userTO1\n         UserTO userTO2 = new UserTO();\n         userTO2.setRealm(SyncopeConstants.ROOT_REALM);\n+        userTO2.getAuxClasses().add(typeClass.getKey());\n         String userId2 = getUUIDString() + \"issue654_2@syncope.apache.org\";\n         userTO2.setUsername(userId2);\n         userTO2.setPassword(\"password123\");"},{"sha":"391e8e77ec60283aa035547d8e79e5f49aec2e31","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":35,"deletions":16,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -44,6 +44,8 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.ReferenceMod;\n import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n@@ -418,6 +420,7 @@ public void assign() {\n     public void deprovision() {\n         GroupTO actual = createGroup(getSampleTO(\"deprovision\"));\n         assertNotNull(actual);\n+        assertNotNull(actual.getKey());\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n \n@@ -507,8 +510,8 @@ public void deprovisionUnlinked() {\n     }\n \n     @Test\n-    public void createWithMandatorySchemaNotTemplate() {\n-        // 1. create a group mandatory schema\n+    public void createWithMandatorySchema() {\n+        // 1. create a mandatory schema\n         PlainSchemaTO badge = new PlainSchemaTO();\n         badge.setKey(\"badge\" + getUUIDString());\n         badge.setMandatoryCondition(\"true\");\n@@ -521,24 +524,40 @@ public void createWithMandatorySchemaNotTemplate() {\n         assertNotNull(groupTO);\n         assertFalse(groupTO.getPlainAttrMap().containsKey(badge.getKey()));\n \n-        // 3. add a template for badge to the group just created - \n-        // failure since no values are provided and it is mandatory\n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(groupTO.getKey());\n+        // 3. add the new mandatory schema to the default group type\n+        AnyTypeTO type = anyTypeService.read(AnyTypeKind.GROUP.name());\n+        String typeClassName = type.getClasses().get(0);\n+        AnyTypeClassTO typeClass = anyTypeClassService.read(typeClassName);\n+        typeClass.getPlainSchemas().add(badge.getKey());\n+        anyTypeClassService.update(typeClassName, typeClass);\n+        typeClass = anyTypeClassService.read(typeClassName);\n+        assertTrue(typeClass.getPlainSchemas().contains(badge.getKey()));\n \n         try {\n-            updateGroup(groupMod);\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n-        }\n+            // 4. update group: failure since no values are provided and it is mandatory\n+            GroupMod groupMod = new GroupMod();\n+            groupMod.setKey(groupTO.getKey());\n+\n+            try {\n+                updateGroup(groupMod);\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+            }\n \n-        // 4. also add an actual attribute for badge - it will work        \n-        groupMod.getPlainAttrsToUpdate().add(attrMod(badge.getKey(), \"xxxxxxxxxx\"));\n+            // 5. also add an actual attribute for badge - it will work        \n+            groupMod.getPlainAttrsToUpdate().add(attrMod(badge.getKey(), \"xxxxxxxxxx\"));\n \n-        groupTO = updateGroup(groupMod);\n-        assertNotNull(groupTO);\n-        assertTrue(groupTO.getPlainAttrMap().containsKey(badge.getKey()));\n+            groupTO = updateGroup(groupMod);\n+            assertNotNull(groupTO);\n+            assertTrue(groupTO.getPlainAttrMap().containsKey(badge.getKey()));\n+        } finally {\n+            // restore the original group class\n+            typeClass.getPlainSchemas().remove(badge.getKey());\n+            anyTypeClassService.update(typeClassName, typeClass);\n+            typeClass = anyTypeClassService.read(typeClassName);\n+            assertFalse(typeClass.getPlainSchemas().contains(badge.getKey()));\n+        }\n     }\n \n     @Test"},{"sha":"e6e450c24b4569f52fc014e277cea54c9932f352","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PlainSchemaITCase.java","status":"modified","additions":26,"deletions":4,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -63,8 +64,12 @@ public void create() {\n         PlainSchemaTO newPlainSchemaTO = createSchema(SchemaType.PLAIN, schemaTO);\n         assertEquals(schemaTO, newPlainSchemaTO);\n \n-        newPlainSchemaTO = createSchema(SchemaType.PLAIN, schemaTO);\n-        assertEquals(schemaTO, newPlainSchemaTO);\n+        try {\n+            createSchema(SchemaType.PLAIN, schemaTO);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.EntityExists, e.getType());\n+        }\n     }\n \n     @Test\n@@ -79,8 +84,7 @@ public void createWithNotPermittedName() {\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidPlainSchema, e.getType());\n \n-            assertTrue(e.getElements().iterator().next().toString().\n-                    contains(EntityViolationType.InvalidName.name()));\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n         }\n     }\n \n@@ -202,7 +206,13 @@ public void issue258() {\n         schemaTO = createSchema(SchemaType.PLAIN, schemaTO);\n         assertNotNull(schemaTO);\n \n+        AnyTypeClassTO typeClass = new AnyTypeClassTO();\n+        typeClass.setKey(\"issue258\");\n+        typeClass.getPlainSchemas().add(schemaTO.getKey());\n+        anyTypeClassService.create(typeClass);\n+\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"issue258@syncope.apache.org\");\n+        userTO.getAuxClasses().add(typeClass.getKey());\n         userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1.2\"));\n \n         userTO = createUser(userTO);\n@@ -225,7 +235,13 @@ public void issue259() {\n         schemaTO = createSchema(SchemaType.PLAIN, schemaTO);\n         assertNotNull(schemaTO);\n \n+        AnyTypeClassTO typeClass = new AnyTypeClassTO();\n+        typeClass.setKey(\"issue259\");\n+        typeClass.getPlainSchemas().add(schemaTO.getKey());\n+        anyTypeClassService.create(typeClass);\n+\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"issue259@syncope.apache.org\");\n+        userTO.getAuxClasses().add(typeClass.getKey());\n         userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1\"));\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n@@ -249,7 +265,13 @@ public void issue260() {\n         schemaTO = createSchema(SchemaType.PLAIN, schemaTO);\n         assertNotNull(schemaTO);\n \n+        AnyTypeClassTO typeClass = new AnyTypeClassTO();\n+        typeClass.setKey(\"issue260\");\n+        typeClass.getPlainSchemas().add(schemaTO.getKey());\n+        anyTypeClassService.create(typeClass);\n+\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"issue260@syncope.apache.org\");\n+        userTO.getAuxClasses().add(typeClass.getKey());\n         userTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"1.2\"));\n         userTO = createUser(userTO);\n         assertNotNull(userTO);"},{"sha":"9a169c32e60981500d0bc7699a5a546b105787a4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":38,"deletions":32,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import static org.apache.syncope.fit.core.reference.AbstractITCase.anyTypeClassService;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -31,6 +32,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n@@ -120,12 +122,12 @@ public void createPushTask() {\n     public void pushMatchingUnmatchingGroups() {\n         assertFalse(groupService.read(3L).getResources().contains(RESOURCE_NAME_LDAP));\n \n-        execSyncTask(23L, 50, false);\n+        execProvisioningTask(23L, 50, false);\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), 3L));\n         assertTrue(groupService.read(3L).getResources().contains(RESOURCE_NAME_LDAP));\n \n-        execSyncTask(23L, 50, false);\n+        execProvisioningTask(23L, 50, false);\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), 3L));\n         assertFalse(groupService.read(3L).getResources().contains(RESOURCE_NAME_LDAP));\n@@ -144,17 +146,17 @@ public void pushUnmatchingUsers() throws Exception {\n         // ------------------------------------------\n         // Unmatching --> Assign --> dryRuyn\n         // ------------------------------------------\n-        execSyncTask(13L, 50, true);\n+        execProvisioningTask(13L, 50, true);\n         assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='vivaldi'\").size());\n         assertFalse(userService.read(3L).getResources().contains(RESOURCE_NAME_TESTDB2));\n         // ------------------------------------------\n \n-        final Set<Long> pushTaskIds = new HashSet<>();\n+        Set<Long> pushTaskIds = new HashSet<>();\n         pushTaskIds.add(13L);\n         pushTaskIds.add(14L);\n         pushTaskIds.add(15L);\n         pushTaskIds.add(16L);\n-        execSyncTasks(pushTaskIds, 50, false);\n+        execProvisioningTasks(pushTaskIds, 50, false);\n \n         // ------------------------------------------\n         // Unatching --> Ignore\n@@ -199,17 +201,17 @@ public void pushMatchingUser() throws Exception {\n         // ------------------------------------------\n         // Matching --> Deprovision --> dryRuyn\n         // ------------------------------------------\n-        execSyncTask(19L, 50, true);\n+        execProvisioningTask(19L, 50, true);\n         assertTrue(userService.read(1L).getResources().contains(RESOURCE_NAME_TESTDB2));\n         assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='rossini'\").size());\n         // ------------------------------------------\n \n-        final Set<Long> pushTaskIds = new HashSet<>();\n-        pushTaskIds.add(18L);\n-        pushTaskIds.add(19L);\n-        pushTaskIds.add(16L);\n+        Set<Long> pushTaskKeys = new HashSet<>();\n+        pushTaskKeys.add(18L);\n+        pushTaskKeys.add(19L);\n+        pushTaskKeys.add(16L);\n \n-        execSyncTasks(pushTaskIds, 50, false);\n+        execProvisioningTasks(pushTaskKeys, 50, false);\n \n         // ------------------------------------------\n         // Matching --> Deprovision && Ignore\n@@ -230,16 +232,16 @@ public void pushMatchingUser() throws Exception {\n         // ------------------------------------------\n         // Matching --> Link\n         // ------------------------------------------\n-        execSyncTask(20L, 50, false);\n+        execProvisioningTask(20L, 50, false);\n         assertTrue(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n         assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n         // ------------------------------------------\n \n-        pushTaskIds.clear();\n-        pushTaskIds.add(21L);\n-        pushTaskIds.add(22L);\n+        pushTaskKeys.clear();\n+        pushTaskKeys.add(21L);\n+        pushTaskKeys.add(22L);\n \n-        execSyncTasks(pushTaskIds, 50, false);\n+        execProvisioningTasks(pushTaskKeys, 50, false);\n \n         // ------------------------------------------\n         // Matching --> Unlink && Update\n@@ -257,15 +259,21 @@ public void issueSYNCOPE598() {\n         schemaTO.setType(AttrSchemaType.String);\n         schemaTO.setMandatoryCondition(\"true\");\n \n-        PlainSchemaTO newPlainSchemaTO = createSchema(SchemaType.PLAIN, schemaTO);\n-        assertEquals(schemaTO, newPlainSchemaTO);\n+        schemaTO = createSchema(SchemaType.PLAIN, schemaTO);\n+        assertNotNull(schemaTO);\n+\n+        AnyTypeClassTO typeClass = new AnyTypeClassTO();\n+        typeClass.setKey(\"SYNCOPE-598\");\n+        typeClass.getPlainSchemas().add(schemaTO.getKey());\n+        anyTypeClassService.create(typeClass);\n \n         // create a new sample group\n         GroupTO groupTO = new GroupTO();\n         groupTO.setName(\"all\" + getUUIDString());\n         groupTO.setRealm(\"/even\");\n+        groupTO.getAuxClasses().add(typeClass.getKey());\n \n-        groupTO.getPlainAttrs().add(attrTO(newPlainSchemaTO.getKey(), \"all\"));\n+        groupTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"all\"));\n \n         groupTO = createGroup(groupTO);\n         assertNotNull(groupTO);\n@@ -277,29 +285,28 @@ public void issueSYNCOPE598() {\n             // Create resource ad-hoc\n             ResourceTO resourceTO = new ResourceTO();\n             resourceTO.setKey(resourceName);\n-            resourceTO.setConnectorId(105L);\n+            resourceTO.setConnector(105L);\n \n             ProvisionTO provisionTO = new ProvisionTO();\n             provisionTO.setAnyType(AnyTypeKind.GROUP.name());\n             provisionTO.setObjectClass(ObjectClass.GROUP_NAME);\n             resourceTO.getProvisions().add(provisionTO);\n \n-            MappingTO rmapping = new MappingTO();\n-            provisionTO.setMapping(rmapping);\n+            MappingTO mapping = new MappingTO();\n+            provisionTO.setMapping(mapping);\n \n             MappingItemTO item = new MappingItemTO();\n             item.setIntMappingType(IntMappingType.GroupPlainSchema);\n             item.setExtAttrName(\"cn\");\n-            item.setIntAttrName(newPlainSchemaTO.getKey());\n+            item.setIntAttrName(schemaTO.getKey());\n             item.setConnObjectKey(true);\n             item.setPurpose(MappingPurpose.BOTH);\n-            rmapping.setConnObjectKeyItem(item);\n+            mapping.setConnObjectKeyItem(item);\n \n-            rmapping.setConnObjectLink(\"'cn=' + \" + newPlainSchemaTO.getKey() + \" + ',ou=groups,o=isp'\");\n+            mapping.setConnObjectLink(\"'cn=' + \" + schemaTO.getKey() + \" + ',ou=groups,o=isp'\");\n \n             Response response = resourceService.create(resourceTO);\n             newResourceTO = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n-\n             assertNotNull(newResourceTO);\n             assertNull(newResourceTO.getProvision(AnyTypeKind.USER.name()));\n             assertNotNull(newResourceTO.getProvision(AnyTypeKind.GROUP.name()).getMapping());\n@@ -316,11 +323,10 @@ public void issueSYNCOPE598() {\n \n             response = taskService.create(task);\n             PushTaskTO push = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n-\n             assertNotNull(push);\n \n             // execute the new task\n-            TaskExecTO pushExec = execSyncTask(push.getKey(), 50, false);\n+            TaskExecTO pushExec = execProvisioningTask(push.getKey(), 50, false);\n             assertTrue(PropagationTaskExecStatus.valueOf(pushExec.getStatus()).isSuccessful());\n         } finally {\n             groupService.delete(groupTO.getKey());\n@@ -332,7 +338,7 @@ public void issueSYNCOPE598() {\n \n     @Test\n     public void issueSYNCOPE648() {\n-        //1. Create Push Task\n+        // 1. Create Push Task\n         PushTaskTO task = new PushTaskTO();\n         task.setName(\"Test create Push\");\n         task.setResource(RESOURCE_NAME_LDAP);\n@@ -343,8 +349,8 @@ public void issueSYNCOPE648() {\n         task.setMatchingRule(MatchingRule.IGNORE);\n         task.setUnmatchingRule(UnmatchingRule.IGNORE);\n \n-        final Response response = taskService.create(task);\n-        final PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n+        Response response = taskService.create(task);\n+        PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n         assertNotNull(actual);\n \n         // 2. Create notification\n@@ -368,7 +374,7 @@ public void issueSYNCOPE648() {\n         notification = getObject(responseNotification.getLocation(), NotificationService.class, NotificationTO.class);\n         assertNotNull(notification);\n \n-        execSyncTask(actual.getKey(), 50, false);\n+        execProvisioningTask(actual.getKey(), 50, false);\n \n         NotificationTaskTO taskTO = findNotificationTaskBySender(\"syncope648@syncope.apache.org\");\n         assertNotNull(taskTO);"},{"sha":"faf47018d552f0753af2e6a616a6de6428bd475c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ResourceITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -58,7 +58,7 @@ private ResourceTO buildResourceTO(final String resourceName) {\n         ResourceTO resourceTO = new ResourceTO();\n \n         resourceTO.setKey(resourceName);\n-        resourceTO.setConnectorId(102L);\n+        resourceTO.setConnector(102L);\n \n         ProvisionTO provisionTO = new ProvisionTO();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n@@ -151,7 +151,7 @@ public void createOverridingProps() {\n         mapping.add(item);\n \n         resourceTO.setKey(resourceName);\n-        resourceTO.setConnectorId(102L);\n+        resourceTO.setConnector(102L);\n \n         ConnConfProperty p = new ConnConfProperty();\n         ConnConfPropSchema schema = new ConnConfPropSchema();\n@@ -178,7 +178,7 @@ public void createWithSingleMappingItem() {\n         String resourceName = RESOURCE_NAME_CREATE_SINGLE;\n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setKey(resourceName);\n-        resourceTO.setConnectorId(102L);\n+        resourceTO.setConnector(102L);\n \n         ProvisionTO provisionTO = new ProvisionTO();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n@@ -228,7 +228,7 @@ public void createWithInvalidMapping() {\n         String resourceName = RESOURCE_NAME_CREATE_WRONG;\n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setKey(resourceName);\n-        resourceTO.setConnectorId(102L);\n+        resourceTO.setConnector(102L);\n \n         ProvisionTO provisionTO = new ProvisionTO();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n@@ -264,7 +264,7 @@ public void createWithoutExtAttr() {\n         String resourceName = RESOURCE_NAME_CREATE_WRONG;\n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setKey(resourceName);\n-        resourceTO.setConnectorId(102L);\n+        resourceTO.setConnector(102L);\n \n         ProvisionTO provisionTO = new ProvisionTO();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n@@ -294,7 +294,7 @@ public void createWithPasswordPolicy() {\n         String resourceName = \"res-with-password-policy\";\n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setKey(resourceName);\n-        resourceTO.setConnectorId(102L);\n+        resourceTO.setConnector(102L);\n         resourceTO.setPasswordPolicy(4L);\n \n         ProvisionTO provisionTO = new ProvisionTO();\n@@ -342,7 +342,7 @@ public void update() {\n         String resourceName = RESOURCE_NAME_UPDATE;\n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setKey(resourceName);\n-        resourceTO.setConnectorId(101L);\n+        resourceTO.setConnector(101L);\n \n         ProvisionTO provisionTO = new ProvisionTO();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n@@ -510,7 +510,7 @@ public void issueSYNCOPE360() {\n         assertNotNull(resource);\n         assertNotNull(resource.getProvision(AnyTypeKind.USER.name()).getMapping());\n \n-        resource.getProvision(AnyTypeKind.USER.name()).setMapping(new MappingTO());\n+        resource.getProvision(AnyTypeKind.USER.name()).setMapping(null);\n         resourceService.update(name, resource);\n \n         resource = resourceService.read(name);\n@@ -525,7 +525,7 @@ public void issueSYNCOPE368() {\n         ResourceTO resourceTO = new ResourceTO();\n \n         resourceTO.setKey(name);\n-        resourceTO.setConnectorId(105L);\n+        resourceTO.setConnector(105L);\n \n         ProvisionTO provisionTO = new ProvisionTO();\n         provisionTO.setAnyType(AnyTypeKind.GROUP.name());\n@@ -586,7 +586,7 @@ public void issueSYNCOPE493() {\n         String resourceName = RESOURCE_NAME_CREATE_NONE;\n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setKey(resourceName);\n-        resourceTO.setConnectorId(102L);\n+        resourceTO.setConnector(102L);\n \n         ProvisionTO provisionTO = new ProvisionTO();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());"},{"sha":"1d809ea8112a80681c3c121bc5573f8282428678","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":25,"deletions":30,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -126,7 +126,7 @@ public void create() {\n         assertEquals(actual.getKey(), task.getKey());\n         assertEquals(actual.getJobClassName(), task.getJobClassName());\n         assertEquals(userTemplate, task.getTemplates().get(AnyTypeKind.USER.name()));\n-        assertEquals(groupTemplate, task.getTemplates().get(AnyTypeKind.USER.name()));\n+        assertEquals(groupTemplate, task.getTemplates().get(AnyTypeKind.GROUP.name()));\n     }\n \n     @Test\n@@ -147,6 +147,7 @@ public void sync() throws Exception {\n         inUserTO.getPlainAttrs().add(attrTO(\"fullname\", \"nome cognome\"));\n         inUserTO.getPlainAttrs().add(attrTO(\"userId\", \"puccini@syncope.apache.org\"));\n         inUserTO.getPlainAttrs().add(attrTO(\"email\", \"puccini@syncope.apache.org\"));\n+        inUserTO.getAuxClasses().add(\"csv\");\n         inUserTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n         inUserTO = createUser(inUserTO);\n@@ -160,7 +161,7 @@ public void sync() throws Exception {\n                     page(1).size(1).build()).getTotalCount();\n             assertNotNull(usersPre);\n \n-            execSyncTask(SYNC_TASK_ID, 50, false);\n+            execProvisioningTask(SYNC_TASK_ID, 50, false);\n \n             // after execution of the sync task the user data should have been synced from CSV\n             // and processed by user template\n@@ -229,13 +230,13 @@ public boolean evaluate(final AttrTO attributeTO) {\n             assertEquals(\"active\", userTO.getStatus());\n \n             // SYNCOPE-317\n-            execSyncTask(SYNC_TASK_ID, 50, false);\n+            execProvisioningTask(SYNC_TASK_ID, 50, false);\n \n             final Set<Long> pushTaskIds = new HashSet<>();\n             pushTaskIds.add(25L);\n             pushTaskIds.add(26L);\n \n-            execSyncTasks(pushTaskIds, 50, false);\n+            execProvisioningTasks(pushTaskIds, 50, false);\n             // Matching --> UNLINK\n             assertFalse(readUser(\"test9\").getResources().contains(RESOURCE_NAME_CSV));\n             assertFalse(readUser(\"test7\").getResources().contains(RESOURCE_NAME_CSV));\n@@ -246,15 +247,15 @@ public boolean evaluate(final AttrTO attributeTO) {\n \n     @Test\n     public void dryRun() {\n-        TaskExecTO execution = execSyncTask(SYNC_TASK_ID, 50, true);\n+        TaskExecTO execution = execProvisioningTask(SYNC_TASK_ID, 50, true);\n         assertEquals(\"Execution of task \" + execution.getTask() + \" failed with message \" + execution.getMessage(),\n                 \"SUCCESS\", execution.getStatus());\n     }\n \n     @Test\n     public void reconcileFromDB() {\n         // update sync task\n-        TaskExecTO execution = execSyncTask(7L, 50, false);\n+        TaskExecTO execution = execProvisioningTask(7L, 50, false);\n         assertNotNull(execution.getStatus());\n         assertTrue(PropagationTaskExecStatus.valueOf(execution.getStatus()).isSuccessful());\n \n@@ -268,7 +269,7 @@ public void reconcileFromDB() {\n         jdbcTemplate.execute(\"UPDATE TEST SET STATUS=TRUE\");\n \n         // re-execute the same SyncTask: now user must be active\n-        execution = execSyncTask(7L, 50, false);\n+        execution = execProvisioningTask(7L, 50, false);\n         assertNotNull(execution.getStatus());\n         assertTrue(PropagationTaskExecStatus.valueOf(execution.getStatus()).isSuccessful());\n \n@@ -312,8 +313,8 @@ public void reconcileFromLDAP() {\n         // First of all, clear any potential conflict with existing user / group\n         ldapCleanup();\n \n-        // Update sync task\n-        TaskExecTO execution = execSyncTask(11L, 50, false);\n+        // 0. synchronize\n+        TaskExecTO execution = execProvisioningTask(11L, 50, false);\n \n         // 1. verify execution status\n         String status = execution.getStatus();\n@@ -343,19 +344,12 @@ public void reconcileFromLDAP() {\n         // Check for SYNCOPE-123\n         assertNotNull(matchingUsers.getResult().get(0).getPlainAttrMap().get(\"photo\"));\n \n-        final GroupTO groupTO = matchingGroups.getResult().iterator().next();\n+        GroupTO groupTO = matchingGroups.getResult().iterator().next();\n         assertNotNull(groupTO);\n         assertEquals(\"testLDAPGroup\", groupTO.getName());\n         assertEquals(\"true\", groupTO.getPlainAttrMap().get(\"show\").getValues().get(0));\n         assertEquals(matchingUsers.getResult().iterator().next().getKey(), groupTO.getUserOwner(), 0);\n         assertNull(groupTO.getGroupOwner());\n-\n-        // 3. verify that LDAP group membership is propagated as Syncope group membership\n-        PagedResult<UserTO> members = userService.search(\n-                SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()).query()).build());\n-        assertNotNull(members);\n-        assertEquals(1, members.getResult().size());\n     }\n \n     @Test\n@@ -415,9 +409,9 @@ public void issueSYNCOPE68() {\n             assertNotNull(actual);\n             assertEquals(task.getKey(), actual.getKey());\n             assertFalse(actual.getTemplates().get(AnyTypeKind.USER.name()).getResources().isEmpty());\n-            assertFalse(actual.getTemplates().get(AnyTypeKind.USER.name()).getMemberships().isEmpty());\n+            assertFalse(((UserTO) actual.getTemplates().get(AnyTypeKind.USER.name())).getMemberships().isEmpty());\n \n-            TaskExecTO execution = execSyncTask(actual.getKey(), 50, false);\n+            TaskExecTO execution = execProvisioningTask(actual.getKey(), 50, false);\n             final String status = execution.getStatus();\n             assertNotNull(status);\n             assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n@@ -436,7 +430,7 @@ public void issueSYNCOPE68() {\n     @Test\n     public void issueSYNCOPE230() {\n         // 1. read SyncTask for resource-db-sync (table TESTSYNC on external H2)\n-        execSyncTask(10L, 50, false);\n+        execProvisioningTask(10L, 50, false);\n \n         // 3. read e-mail address for user created by the SyncTask first execution\n         UserTO userTO = readUser(\"issuesyncope230\");\n@@ -449,7 +443,7 @@ public void issueSYNCOPE230() {\n         jdbcTemplate.execute(\"UPDATE TESTSYNC SET email='updatedSYNCOPE230@syncope.apache.org'\");\n \n         // 5. re-execute the SyncTask\n-        execSyncTask(10L, 50, false);\n+        execProvisioningTask(10L, 50, false);\n \n         // 6. verify that the e-mail was updated\n         userTO = readUser(\"issuesyncope230\");\n@@ -511,7 +505,7 @@ public void issueSYNCOPE258() {\n \n         userService.update(userMod.getKey(), userMod);\n \n-        execSyncTask(actual.getKey(), 50, false);\n+        execProvisioningTask(actual.getKey(), 50, false);\n \n         SyncTaskTO executed = taskService.read(actual.getKey());\n         assertEquals(1, executed.getExecutions().size());\n@@ -535,7 +529,7 @@ public void issueSYNCOPE272() {\n             assertEquals(1, userTO.getPropagationStatusTOs().size());\n             assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n \n-            TaskExecTO taskExecTO = execSyncTask(24L, 50, false);\n+            TaskExecTO taskExecTO = execProvisioningTask(24L, 50, false);\n \n             assertNotNull(taskExecTO.getStatus());\n             assertTrue(PropagationTaskExecStatus.valueOf(taskExecTO.getStatus()).isSuccessful());\n@@ -551,6 +545,7 @@ public void issueSYNCOPE272() {\n     @Test\n     public void issueSYNCOPE307() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"s307@apache.org\");\n+        userTO.getAuxClasses().add(\"csv\");\n \n         AttrTO csvuserid = new AttrTO();\n         csvuserid.setSchema(\"csvuserid\");\n@@ -583,7 +578,7 @@ public void issueSYNCOPE307() {\n         task.getTemplates().put(AnyTypeKind.USER.name(), template);\n \n         taskService.update(task.getKey(), task);\n-        execSyncTask(task.getKey(), 50, false);\n+        execProvisioningTask(task.getKey(), 50, false);\n \n         // check for sync policy\n         userTO = userService.read(userTO.getKey());\n@@ -640,7 +635,7 @@ public void issueSYNCOPE313DB() throws Exception {\n         assertEquals(actual.getKey(), syncTask.getKey());\n         assertEquals(actual.getJobClassName(), syncTask.getJobClassName());\n \n-        TaskExecTO execution = execSyncTask(syncTask.getKey(), 50, false);\n+        TaskExecTO execution = execProvisioningTask(syncTask.getKey(), 50, false);\n         final String status = execution.getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n@@ -692,11 +687,11 @@ public void issueSYNCOPE313LDAP() throws Exception {\n \n         // 5. Update the LDAP Connector to retrieve passwords\n         ResourceTO ldapResource = resourceService.read(RESOURCE_NAME_LDAP);\n-        ConnInstanceTO resourceConnector = connectorService.read(ldapResource.getConnectorId());\n+        ConnInstanceTO resourceConnector = connectorService.read(ldapResource.getConnector());\n         ConnConfProperty property = resourceConnector.getConfigurationMap().get(\"retrievePasswordsWithSearch\");\n         property.getValues().clear();\n         property.getValues().add(Boolean.TRUE);\n-        connectorService.update(ldapResource.getConnectorId(), resourceConnector);\n+        connectorService.update(ldapResource.getConnector(), resourceConnector);\n \n         // 6. Sync the user from the resource\n         SyncTaskTO syncTask = new SyncTaskTO();\n@@ -717,8 +712,8 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         assertEquals(actual.getKey(), syncTask.getKey());\n         assertEquals(actual.getJobClassName(), syncTask.getJobClassName());\n \n-        TaskExecTO execution = execSyncTask(syncTask.getKey(), 50, false);\n-        final String status = execution.getStatus();\n+        TaskExecTO execution = execProvisioningTask(syncTask.getKey(), 50, false);\n+        String status = execution.getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n@@ -731,7 +726,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         taskService.delete(syncTask.getKey());\n         property.getValues().clear();\n         property.getValues().add(Boolean.FALSE);\n-        connectorService.update(ldapResource.getConnectorId(), resourceConnector);\n+        connectorService.update(ldapResource.getConnector(), resourceConnector);\n         deleteUser(updatedUser.getKey());\n     }\n }"},{"sha":"4574b5bbeeb9b2fb648d82276c680ac2f9475281","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":35,"deletions":16,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -95,12 +95,18 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class UserITCase extends AbstractITCase {\n \n-    private String getStringAttribute(final ConnObjectTO connObjectTO, final String attrName) {\n-        return connObjectTO.getPlainAttrMap().get(attrName).getValues().get(0);\n-    }\n+    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n+\n+        @Override\n+        protected SimpleDateFormat initialValue() {\n+            SimpleDateFormat sdf = new SimpleDateFormat();\n+            sdf.applyPattern(\"yyyy-MM-dd\");\n+            return sdf;\n+        }\n+    };\n \n     private boolean getBooleanAttribute(final ConnObjectTO connObjectTO, final String attrName) {\n-        return Boolean.parseBoolean(getStringAttribute(connObjectTO, attrName));\n+        return Boolean.parseBoolean(connObjectTO.getPlainAttrMap().get(attrName).getValues().get(0));\n     }\n \n     public static UserTO getUniqueSampleTO(final String email) {\n@@ -120,7 +126,7 @@ public static UserTO getSampleTO(final String email) {\n         userTO.getPlainAttrs().add(attrTO(\"type\", \"a type\"));\n         userTO.getPlainAttrs().add(attrTO(\"userId\", uid));\n         userTO.getPlainAttrs().add(attrTO(\"email\", uid));\n-        userTO.getPlainAttrs().add(attrTO(\"loginDate\", new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())));\n+        userTO.getPlainAttrs().add(attrTO(\"loginDate\", DATE_FORMAT.get().format(new Date())));\n         userTO.getDerAttrs().add(attrTO(\"cn\", null));\n         userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n         return userTO;\n@@ -261,6 +267,7 @@ public void enforceMandatoryConditionOnDerived() {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n \n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n         userTO = createUser(userTO);\n@@ -655,7 +662,7 @@ public void update() {\n \n         userMod.getDerAttrsToAdd().add(\"cn\");\n         userMod.getMembershipsToAdd().add(8L);\n-        userMod.getMembershipsToRemove().add(userTO.getMemberships().iterator().next().getKey());\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().get(0).getRightKey());\n \n         userTO = updateUser(userMod);\n         assertNotNull(userTO);\n@@ -1102,6 +1109,7 @@ public void groupAttrPropagation() {\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n \n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n         MembershipTO membershipTO = new MembershipTO();\n@@ -1157,6 +1165,7 @@ public void issueSYNCOPE108() {\n         userTO.getMemberships().clear();\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n         MembershipTO memb12 = new MembershipTO();\n@@ -1186,7 +1195,7 @@ public void issueSYNCOPE108() {\n         UserMod userMod = new UserMod();\n         userMod.setKey(actual.getKey());\n \n-        userMod.getMembershipsToRemove().add(actual.getMemberships().get(0).getKey());\n+        userMod.getMembershipsToRemove().add(actual.getMemberships().get(0).getRightKey());\n \n         actual = updateUser(userMod);\n         assertNotNull(actual);\n@@ -1219,7 +1228,7 @@ public void issueSYNCOPE108() {\n         userMod = new UserMod();\n         userMod.setKey(actual.getKey());\n \n-        userMod.getMembershipsToRemove().add(actual.getMemberships().get(0).getKey());\n+        userMod.getMembershipsToRemove().add(actual.getMemberships().get(0).getRightKey());\n \n         actual = updateUser(userMod);\n         assertNotNull(actual);\n@@ -1490,6 +1499,7 @@ public void isseSYNCOPE136Random() {\n     @Test\n     public void mappingPurpose() {\n         UserTO userTO = getUniqueSampleTO(\"mpurpose@apache.org\");\n+        userTO.getAuxClasses().add(\"csv\");\n \n         AttrTO csvuserid = new AttrTO();\n         csvuserid.setSchema(\"csvuserid\");\n@@ -1526,7 +1536,7 @@ public void issueSYNCOPE265() {\n \n     @Test\n     public void bulkActions() {\n-        final BulkAction bulkAction = new BulkAction();\n+        BulkAction bulkAction = new BulkAction();\n \n         for (int i = 0; i < 10; i++) {\n             UserTO userTO = getUniqueSampleTO(\"bulk_\" + i + \"@apache.org\");\n@@ -1598,7 +1608,7 @@ public void issueSYNCOPE354() {\n         // 4. remove membership\n         UserMod userMod = new UserMod();\n         userMod.setKey(userTO.getKey());\n-        userMod.getMembershipsToRemove().add(userTO.getMemberships().iterator().next().getKey());\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().get(0).getRightKey());\n \n         userTO = updateUser(userMod);\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n@@ -1746,6 +1756,7 @@ public void unlink() {\n         userTO.getMemberships().clear();\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n@@ -1772,6 +1783,7 @@ public void link() {\n         userTO.getMemberships().clear();\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n         UserTO actual = createUser(userTO);\n@@ -1810,6 +1822,7 @@ public void unassign() {\n         userTO.getMemberships().clear();\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n@@ -1841,6 +1854,7 @@ public void assign() {\n         userTO.getMemberships().clear();\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n         UserTO actual = createUser(userTO);\n@@ -1875,6 +1889,7 @@ public void deprovision() {\n         userTO.getMemberships().clear();\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n@@ -1906,6 +1921,7 @@ public void provision() {\n         userTO.getMemberships().clear();\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n         UserTO actual = createUser(userTO);\n@@ -1941,6 +1957,7 @@ public void deprovisionUnlinked() {\n         userTO.getMemberships().clear();\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n         UserTO actual = createUser(userTO);\n@@ -2280,6 +2297,7 @@ public void issueSYNCOPE391() {\n         userTO.getPlainAttrs().add(attrTO(\"email\", \"syncope391@syncope.apache.org\"));\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n         userTO = createUser(userTO, false);\n         assertNotNull(userTO);\n@@ -2299,6 +2317,7 @@ public void issueSYNCOPE391() {\n         userTO.setPassword(\"passwordTESTNULL1\");\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n@@ -2319,6 +2338,7 @@ public void issueSYNCOPE391() {\n         userTO.setPassword(\"passwordTESTNULL1\");\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n@@ -2347,6 +2367,7 @@ public void issueSYNCOPE391() {\n             userTO.setPassword(null);\n             userTO.getDerAttrs().clear();\n             userTO.getVirAttrs().clear();\n+            userTO.getAuxClasses().add(\"csv\");\n             userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n             userTO.getResources().add(RESOURCE_NAME_CSV);\n@@ -2369,11 +2390,11 @@ public void issueSYNCOPE647() {\n         userTO.getMemberships().clear();\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(12L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getAuxClasses().add(\"generic membership\");\n+        userTO.getPlainAttrs().add(attrTO(\"postalAddress\", \"postalAddress\"));\n \n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n \n@@ -2388,9 +2409,7 @@ public void issueSYNCOPE647() {\n \n         UserMod userMod = new UserMod();\n         userMod.setKey(actual.getKey());\n-\n-        userMod.getMembershipsToAdd().add(12L);\n-        userMod.getMembershipsToRemove().add(actual.getMemberships().iterator().next().getKey());\n+        userMod.getPlainAttrsToUpdate().add(attrMod(\"postalAddress\", \"newPostalAddress\"));\n \n         actual = updateUser(userMod);\n "},{"sha":"3bbb7e1274867c85049a011c0a4c0de323e3ac5e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserWorkflowITCase.java","status":"modified","additions":18,"deletions":11,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -74,21 +74,29 @@ public void createWithReject() {\n         assertNotNull(form.getTaskId());\n         assertNull(form.getOwner());\n \n-        // 3. claim task from rossini, not in group 7 (designated for approval in workflow definition): fail\n-        UserWorkflowService userService2 = clientFactory.create(\n-                \"rossini\", ADMIN_PWD).getService(UserWorkflowService.class);\n+        // 3. claim task as rossini, with role 2 granting entitlement to claim forms but not in group 7,\n+        // designated for approval in workflow definition: fail\n+        UserTO rossini = userService.read(1L);\n+        if (!rossini.getRoles().contains(2L)) {\n+            UserMod userMod = new UserMod();\n+            userMod.setKey(1L);\n+            userMod.getRolesToAdd().add(2L);\n+            rossini = updateUser(userMod);\n+        }\n+        assertTrue(rossini.getRoles().contains(2L));\n \n+        UserWorkflowService userService2 = clientFactory.create(\"rossini\", ADMIN_PWD).\n+                getService(UserWorkflowService.class);\n         try {\n             userService2.claimForm(form.getTaskId());\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.Workflow, e.getType());\n         }\n \n-        // 4. claim task from bellini, in role 2\n-        UserWorkflowService userService3 = clientFactory.create(\n-                \"bellini\", ADMIN_PWD).getService(UserWorkflowService.class);\n-\n+        // 4. claim task from bellini, with role 2 and in group 7\n+        UserWorkflowService userService3 = clientFactory.create(\"bellini\", ADMIN_PWD).\n+                getService(UserWorkflowService.class);\n         form = userService3.claimForm(form.getTaskId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n@@ -237,9 +245,8 @@ public void issueSYNCOPE15() {\n         assertNotNull(form);\n \n         // 3. first claim ny bellini ....\n-        UserWorkflowService userService3 = clientFactory.create(\n-                \"bellini\", ADMIN_PWD).getService(UserWorkflowService.class);\n-\n+        UserWorkflowService userService3 = clientFactory.create(\"bellini\", ADMIN_PWD).\n+                getService(UserWorkflowService.class);\n         form = userService3.claimForm(form.getTaskId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n@@ -250,7 +257,7 @@ public void issueSYNCOPE15() {\n         assertNotNull(form);\n \n         // 5. approve user\n-        final Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n         props.get(\"approve\").setValue(Boolean.TRUE.toString());\n         form.getProperties().clear();\n         form.getProperties().addAll(props.values());"},{"sha":"2c2065fa2eecce3d8047576c627849b83111e148","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirAttrITCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd88efbd0ec6fabb98728a84a6fe103f285433d7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java?ref=dd88efbd0ec6fabb98728a84a6fe103f285433d7","patch":"@@ -228,7 +228,7 @@ public void virAttrCache() {\n         assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n \n         // 3. update virtual attribute directly\n-        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n         String value = jdbcTemplate.queryForObject(\n                 \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, actual.getKey());\n@@ -296,6 +296,7 @@ public void issueSYNCOPE397() {\n \n             // create a new user\n             UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope397@syncope.apache.org\");\n+            userTO.getAuxClasses().add(\"csv\");\n             userTO.getResources().clear();\n             userTO.getMemberships().clear();\n             userTO.getDerAttrs().clear();\n@@ -450,7 +451,7 @@ public void issueSYNCOPE453() {\n         ResourceTO resourceTO = new ResourceTO();\n \n         resourceTO.setKey(resourceName);\n-        resourceTO.setConnectorId(107L);\n+        resourceTO.setConnector(107L);\n \n         ProvisionTO provisionTO = new ProvisionTO();\n         provisionTO.setAnyType(AnyTypeKind.USER.name());\n@@ -463,7 +464,7 @@ public void issueSYNCOPE453() {\n         MappingItemTO item = new MappingItemTO();\n         item.setIntAttrName(\"aLong\");\n         item.setIntMappingType(IntMappingType.UserPlainSchema);\n-        item.setExtAttrName(groupName);\n+        item.setExtAttrName(\"ID\");\n         item.setPurpose(MappingPurpose.PROPAGATION);\n         item.setConnObjectKey(true);\n         mapping.setConnObjectKeyItem(item);"}]}