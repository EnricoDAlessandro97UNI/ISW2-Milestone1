{"sha":"6583c746d7418b992c0615d57f1228d37fece5ce","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY1ODNjNzQ2ZDc0MThiOTkyYzA2MTVkNTdmMTIyOGQzN2ZlY2U1Y2U=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-14T11:36:08Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-14T11:36:19Z"},"message":"[SYNCOPE-1417] Raise exception when more than one plain attribute is requested for ordering","tree":{"sha":"a063ab796769a63741a4d6ee4d748ad9a7fc00ac","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a063ab796769a63741a4d6ee4d748ad9a7fc00ac"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6583c746d7418b992c0615d57f1228d37fece5ce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6583c746d7418b992c0615d57f1228d37fece5ce","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6583c746d7418b992c0615d57f1228d37fece5ce","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6583c746d7418b992c0615d57f1228d37fece5ce/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c789b1f90fc74291ca3e6c4f66f127a10ff4765c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c789b1f90fc74291ca3e6c4f66f127a10ff4765c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c789b1f90fc74291ca3e6c4f66f127a10ff4765c"}],"stats":{"total":116,"additions":92,"deletions":24},"files":[{"sha":"ee20e8d7b376089b4dda80be55c44640b76aba9e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6583c746d7418b992c0615d57f1228d37fece5ce/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6583c746d7418b992c0615d57f1228d37fece5ce/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=6583c746d7418b992c0615d57f1228d37fece5ce","patch":"@@ -194,6 +194,8 @@ protected <T extends Any<?>> List<T> doSearch(\n \n             // 6. Prepare the result (avoiding duplicates)\n             return buildResult(query.getResultList(), kind);\n+        } catch (SyncopeClientException e) {\n+            throw e;\n         } catch (Exception e) {\n             LOG.error(\"While searching for {}\", kind, e);\n         }\n@@ -324,12 +326,27 @@ private OrderBySupport parseOrderBy(\n \n         OrderBySupport obs = new OrderBySupport();\n \n+        Set<String> orderByUniquePlainSchemas = new HashSet<>();\n+        Set<String> orderByNonUniquePlainSchemas = new HashSet<>();\n         orderBy.forEach(clause -> {\n             OrderBySupport.Item item = new OrderBySupport.Item();\n \n             if (anyUtils.getField(clause.getField()) == null) {\n                 PlainSchema schema = schemaDAO.find(clause.getField());\n                 if (schema != null) {\n+                    if (schema.isUniqueConstraint()) {\n+                        orderByUniquePlainSchemas.add(schema.getKey());\n+                    } else {\n+                        orderByNonUniquePlainSchemas.add(schema.getKey());\n+                    }\n+                    if (orderByUniquePlainSchemas.size() > 1 || orderByNonUniquePlainSchemas.size() > 1) {\n+                        SyncopeClientException invalidSearch =\n+                                SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+                        invalidSearch.getElements().add(\"Order by more than one attribute is not allowed; \"\n+                                + \"remove one from \" + (orderByUniquePlainSchemas.size() > 1\n+                                ? orderByUniquePlainSchemas : orderByNonUniquePlainSchemas));\n+                        throw invalidSearch;\n+                    }\n                     parseOrderByForPlainSchema(svs, obs, item, clause, schema, clause.getField());\n                 }\n             } else {"},{"sha":"6d91b572b7a42d84be93d70a4a8b2bfad4396a20","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":56,"deletions":22,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6583c746d7418b992c0615d57f1228d37fece5ce/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6583c746d7418b992c0615d57f1228d37fece5ce/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=6583c746d7418b992c0615d57f1228d37fece5ce","patch":"@@ -21,20 +21,25 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n+import java.util.ArrayList;\n import java.util.List;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n import org.apache.syncope.core.persistence.api.entity.Role;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n@@ -56,27 +61,6 @@ public class AnySearchTest extends AbstractTest {\n     @Autowired\n     private RoleDAO roleDAO;\n \n-    @Test\n-    public void issueSYNCOPE95() {\n-        for (Group group : groupDAO.findAll(1, 100)) {\n-            groupDAO.delete(group.getKey());\n-        }\n-        entityManager().flush();\n-\n-        AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n-        coolLeafCond.setSchema(\"cool\");\n-        coolLeafCond.setExpression(\"true\");\n-\n-        SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n-        assertTrue(cond.isValid());\n-\n-        List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n-        assertNotNull(users);\n-        assertEquals(1, users.size());\n-\n-        assertEquals(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", users.get(0).getKey());\n-    }\n-\n     @Test\n     public void searchByDynMembership() {\n         // 1. create role with dynamic membership\n@@ -107,4 +91,54 @@ public void searchByDynMembership() {\n         assertEquals(1, users.size());\n         assertEquals(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", users.get(0).getKey());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE95() {\n+        groupDAO.findAll(1, 100).forEach(group -> {\n+            groupDAO.delete(group.getKey());\n+        });\n+        entityManager().flush();\n+\n+        AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n+        coolLeafCond.setSchema(\"cool\");\n+        coolLeafCond.setExpression(\"true\");\n+\n+        SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n+        assertTrue(cond.isValid());\n+\n+        List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+\n+        assertEquals(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", users.get(0).getKey());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE1417() {\n+        AnyCond usernameLeafCond = new AnyCond(AnyCond.Type.EQ);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"rossini\");\n+        AttributeCond idRightCond = new AttributeCond(AttributeCond.Type.LIKE);\n+        idRightCond.setSchema(\"fullname\");\n+        idRightCond.setExpression(\"Giuseppe V%\");\n+        SearchCond searchCondition = SearchCond.getOrCond(\n+                SearchCond.getLeafCond(usernameLeafCond), SearchCond.getLeafCond(idRightCond));\n+\n+        List<OrderByClause> orderByClauses = new ArrayList<>();\n+        OrderByClause orderByClause = new OrderByClause();\n+        orderByClause.setField(\"surname\");\n+        orderByClause.setDirection(OrderByClause.Direction.DESC);\n+        orderByClauses.add(orderByClause);\n+        orderByClause = new OrderByClause();\n+        orderByClause.setField(\"firstname\");\n+        orderByClause.setDirection(OrderByClause.Direction.ASC);\n+        orderByClauses.add(orderByClause);\n+\n+        try {\n+            searchDAO.search(searchCondition, orderByClauses, AnyTypeKind.USER);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+        }\n+    }\n }"},{"sha":"f11de5318bc93d94787cf6e2b3dc4beee017036a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6583c746d7418b992c0615d57f1228d37fece5ce/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6583c746d7418b992c0615d57f1228d37fece5ce/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=6583c746d7418b992c0615d57f1228d37fece5ce","patch":"@@ -23,10 +23,12 @@\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n@@ -43,6 +45,7 @@\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -432,9 +435,9 @@ public void orderBy() {\n         assertNotNull(matchingUsers);\n \n         assertFalse(matchingUsers.getResult().isEmpty());\n-        for (UserTO user : matchingUsers.getResult()) {\n+        matchingUsers.getResult().forEach(user -> {\n             assertNotNull(user);\n-        }\n+        });\n     }\n \n     @Test\n@@ -541,4 +544,18 @@ public void issueSYNCOPE1304() {\n         assertNotNull(groups);\n         assertFalse(groups.getResult().isEmpty());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1417() {\n+        try {\n+            userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                    fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query()).\n+                    orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"surname\").desc(\"firstname\").build()).build());\n+            if (!ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+                fail();\n+            }\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+        }\n+    }\n }"}]}