{"sha":"418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQxOGJjMDdmZjNjZGJkNGFhZjI1MmY1YjYwMmEyMzUyZWMxZWFlOTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-29T14:01:34Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-29T14:01:34Z"},"message":"[SYNCOPE-430] Prefer / Preference-Applied headers enabled for user, role and userSelf services\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1546565 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"260783b44146763667d8897e9eebd9729536c4e7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/260783b44146763667d8897e9eebd9729536c4e7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"03cf4bf515c2b9a70ba833d600bd836cbcbff193","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/03cf4bf515c2b9a70ba833d600bd836cbcbff193","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/03cf4bf515c2b9a70ba833d600bd836cbcbff193"}],"stats":{"total":414,"additions":299,"deletions":115},"files":[{"sha":"d761d6765bb9516974acca28b5f91537daa85edf","filename":"client/src/main/java/org/apache/syncope/client/SyncopeClient.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.services.UserSelfService;\n import org.apache.syncope.common.services.WorkflowService;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.Preference;\n import org.apache.syncope.common.types.RESTHeaders;\n \n /**\n@@ -66,6 +67,16 @@ public <T> T getService(final Class<T> serviceClass) {\n         return (T) services.get(serviceClass);\n     }\n \n+    public <T> T prefer(final Class<T> serviceClass, final Preference preference) {\n+        return header(serviceClass, RESTHeaders.PREFER, preference.literal());\n+    }\n+\n+    public <T> T header(final Class<T> serviceClass, final String key, final Object... values) {\n+        T service = getService(serviceClass);\n+        WebClient.client(getService(serviceClass)).header(key, values);\n+        return service;\n+    }\n+\n     public <T> T getObject(final URI location, final Class<?> serviceClass, final Class<T> resultClass) {\n         WebClient webClient = WebClient.fromClient(WebClient.client(getService(serviceClass)));\n         webClient.accept(mediaType).to(location.toASCIIString(), false);"},{"sha":"4dbc51b340bca24f58d7c520a4d8e4e4e6b3340e","filename":"common/src/main/java/org/apache/syncope/common/types/Preference.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPreference.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPreference.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPreference.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+/**\n+ * Preferences available to be specified during requests.\n+ *\n+ * @see RESTHeaders#PREFER\n+ * @see RESTHeaders#PREFERENCE_APPLIED\n+ */\n+public enum Preference {\n+\n+    NONE(\"\"),\n+    RETURN_CONTENT(\"return-content\"),\n+    RETURN_NO_CONTENT(\"return-no-content\");\n+\n+    private String literal;\n+\n+    private Preference(final String literal) {\n+        this.literal = literal;\n+    }\n+\n+    public String literal() {\n+        return literal;\n+    }\n+\n+    public static Preference fromLiteral(final String literal) {\n+        Preference result = null;\n+\n+        for (Preference preference : values()) {\n+            if (preference.literal().equalsIgnoreCase(literal)) {\n+                result = preference;\n+            }\n+        }\n+\n+        if (result == null) {\n+            result = NONE;\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"6ee735d872ddc41be13937c0bd50b779865de3c1","filename":"common/src/main/java/org/apache/syncope/common/types/RESTHeaders.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -72,6 +72,22 @@ public final class RESTHeaders {\n      */\n     public static final String MEDIATYPE_IMAGE_PNG = \"image/png\";\n \n+    /**\n+     * Allows the client to specify a preference for the result to be returned from the server.\n+     *\n+     * @see Preference\n+     * @see http://msdn.microsoft.com/en-us/library/hh537533.aspx\n+     */\n+    public static final String PREFER = \"Prefer\";\n+\n+    /**\n+     * Allowd the server to inform the client about the fact that a specified preference was applied.\n+     *\n+     * @see Preference\n+     * @see http://msdn.microsoft.com/en-us/library/hh554623.aspx\n+     */\n+    public static final String PREFERENCE_APPLIED = \"Preference-Applied\";\n+\n     private RESTHeaders() {\n         // Empty constructor for static utility class.\n     }"},{"sha":"9c9ef4825c3113d5c7bc7ff00342c4ea3c983452","filename":"core/src/main/java/org/apache/syncope/core/services/AbstractServiceImpl.java","status":"modified","additions":77,"deletions":4,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -18,21 +18,94 @@\n  */\n package org.apache.syncope.core.services;\n \n+import java.net.URI;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n import javax.ws.rs.core.UriInfo;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.syncope.common.types.Preference;\n+import org.apache.syncope.common.types.RESTHeaders;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-abstract class AbstractServiceImpl implements ContextAware {\n+abstract class AbstractServiceImpl {\n \n     /**\n      * Logger.\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractServiceImpl.class);\n \n+    @Context\n     protected UriInfo uriInfo;\n \n-    @Override\n-    public void setUriInfo(final UriInfo uriInfo) {\n-        this.uriInfo = uriInfo;\n+    @Context\n+    protected MessageContext context;\n+\n+    /**\n+     * Reads <tt>Prefer</tt> header from request and parses into a <tt>Preference</tt> instance.\n+     *\n+     * @return a <tt>Preference</tt> instance matching the passed <tt>Prefer</tt> header,\n+     * or <tt>Preference.NONE</tt> if missing.\n+     */\n+    protected Preference getPreference() {\n+        return Preference.fromLiteral(context.getHttpHeaders().getHeaderString(RESTHeaders.PREFER));\n+    }\n+\n+    /**\n+     * Builds response to successful <tt>create</tt> request, taking into account any <tt>Prefer</tt> header.\n+     *\n+     * @param id identifier of the created entity\n+     * @param entity the entity just created\n+     * @return response to successful <tt>create</tt> request\n+     */\n+    protected Response.ResponseBuilder createResponse(final Object id, final Object entity) {\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(id)).build();\n+\n+        Response.ResponseBuilder builder = Response.\n+                created(location).\n+                header(RESTHeaders.RESOURCE_ID, id);\n+\n+        switch (getPreference()) {\n+            case RETURN_NO_CONTENT:\n+                break;\n+\n+            case RETURN_CONTENT:\n+            case NONE:\n+            default:\n+                builder = builder.entity(entity);\n+                break;\n+\n+        }\n+        if (getPreference() == Preference.RETURN_CONTENT || getPreference() == Preference.RETURN_NO_CONTENT) {\n+            builder = builder.header(RESTHeaders.PREFERENCE_APPLIED, getPreference().literal());\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Builds response to successful modification request, taking into account any <tt>Prefer</tt> header.\n+     *\n+     * @param entity the entity just modified\n+     * @return response to successful modification request\n+     */\n+    protected Response.ResponseBuilder updateResponse(final Object entity) {\n+        Response.ResponseBuilder builder;\n+        switch (getPreference()) {\n+            case RETURN_NO_CONTENT:\n+                builder = Response.noContent();\n+                break;\n+\n+            case RETURN_CONTENT:\n+            case NONE:\n+            default:\n+                builder = Response.ok(entity);\n+                break;\n+        }\n+        if (getPreference() == Preference.RETURN_CONTENT || getPreference() == Preference.RETURN_NO_CONTENT) {\n+            builder = builder.header(RESTHeaders.PREFERENCE_APPLIED, getPreference().literal());\n+        }\n+\n+        return builder;\n     }\n }"},{"sha":"0cd91c154f3963596ab836fff3d3e58b682912c8","filename":"core/src/main/java/org/apache/syncope/core/services/ConfigurationServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -39,7 +39,7 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class ConfigurationServiceImpl extends AbstractServiceImpl implements ConfigurationService, ContextAware {\r\n+public class ConfigurationServiceImpl extends AbstractServiceImpl implements ConfigurationService {\r\n \r\n     @Autowired\r\n     private ConfigurationController controller;\r"},{"sha":"e35e1960d61c7b8bb7db8371b8ebe1b98a3edc84","filename":"core/src/main/java/org/apache/syncope/core/services/ConnectorServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -36,7 +36,7 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class ConnectorServiceImpl extends AbstractServiceImpl implements ConnectorService, ContextAware {\r\n+public class ConnectorServiceImpl extends AbstractServiceImpl implements ConnectorService {\r\n \r\n     @Autowired\r\n     private ConnectorController controller;\r"},{"sha":"82bf2b6aac93704f89152c184da23f5f82497a4c","filename":"core/src/main/java/org/apache/syncope/core/services/ContextAware.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03cf4bf515c2b9a70ba833d600bd836cbcbff193/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FContextAware.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03cf4bf515c2b9a70ba833d600bd836cbcbff193/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FContextAware.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FContextAware.java?ref=03cf4bf515c2b9a70ba833d600bd836cbcbff193","patch":"@@ -1,28 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.services;\r\n-\r\n-import javax.ws.rs.core.Context;\r\n-import javax.ws.rs.core.UriInfo;\r\n-\r\n-public interface ContextAware {\r\n-\r\n-    @Context\r\n-    void setUriInfo(UriInfo uriInfo);\r\n-}\r"},{"sha":"d4311f943c30b6940efdaca837eafadbce9bb944","filename":"core/src/main/java/org/apache/syncope/core/services/EntitlementServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -28,7 +28,7 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class EntitlementServiceImpl extends AbstractServiceImpl implements EntitlementService, ContextAware {\r\n+public class EntitlementServiceImpl extends AbstractServiceImpl implements EntitlementService {\r\n \r\n     @Autowired\r\n     private EntitlementController controller;\r"},{"sha":"45e47ed22d882e1e21a433d7ea4bd25eb58a3609","filename":"core/src/main/java/org/apache/syncope/core/services/LoggerServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -35,7 +35,7 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class LoggerServiceImpl extends AbstractServiceImpl implements LoggerService, ContextAware {\r\n+public class LoggerServiceImpl extends AbstractServiceImpl implements LoggerService {\r\n \r\n     @Autowired\r\n     private LoggerController controller;\r"},{"sha":"696357ba931cff2a38e15b84c94f983db6839e64","filename":"core/src/main/java/org/apache/syncope/core/services/NotificationServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -31,7 +31,7 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class NotificationServiceImpl extends AbstractServiceImpl implements NotificationService, ContextAware {\n+public class NotificationServiceImpl extends AbstractServiceImpl implements NotificationService {\n \n     @Autowired\n     private NotificationController controller;"},{"sha":"8a662683a032b6424f6839c88bf0bcbc7033830c","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -36,7 +36,7 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyService, ContextAware {\r\n+public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyService {\r\n \r\n     @Autowired\r\n     private PolicyController policyController;\r"},{"sha":"7a26caae100df3cfeb2952bd37b59173cc613f68","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -37,7 +37,7 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class ReportServiceImpl extends AbstractServiceImpl implements ReportService, ContextAware {\n+public class ReportServiceImpl extends AbstractServiceImpl implements ReportService {\n \n     @Autowired\n     private ReportController controller;"},{"sha":"1cb5a1a3c3f093011d36075c88d832c41bb99a22","filename":"core/src/main/java/org/apache/syncope/core/services/ResourceServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -45,7 +45,7 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class ResourceServiceImpl extends AbstractServiceImpl implements ResourceService, ContextAware {\r\n+public class ResourceServiceImpl extends AbstractServiceImpl implements ResourceService {\r\n \r\n     @Autowired\r\n     private ResourceController controller;\r"},{"sha":"54a73ba86641c5e7d66c075982279a13664fafcb","filename":"core/src/main/java/org/apache/syncope/core/services/RoleServiceImpl.java","status":"modified","additions":6,"deletions":14,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -18,7 +18,6 @@\n  */\r\n package org.apache.syncope.core.services;\r\n \r\n-import java.net.URI;\r\n import java.util.List;\r\n \r\n import javax.ws.rs.ServiceUnavailableException;\r\n@@ -30,15 +29,14 @@\n import org.apache.syncope.common.services.RoleService;\r\n import org.apache.syncope.common.to.ResourceNameTO;\r\n import org.apache.syncope.common.to.RoleTO;\r\n-import org.apache.syncope.common.types.RESTHeaders;\r\n import org.apache.syncope.common.types.ResourceAssociationActionType;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n import org.apache.syncope.core.rest.controller.RoleController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class RoleServiceImpl extends AbstractServiceImpl implements RoleService, ContextAware {\r\n+public class RoleServiceImpl extends AbstractServiceImpl implements RoleService {\r\n \r\n     @Autowired\r\n     private RoleController controller;\r\n@@ -56,18 +54,13 @@ public int count() {\n     @Override\r\n     public Response create(final RoleTO roleTO) {\r\n         RoleTO created = controller.create(roleTO);\r\n-        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getId())).build();\r\n-        return Response.created(location).\r\n-                header(RESTHeaders.RESOURCE_ID, created.getId()).\r\n-                entity(created).\r\n-                build();\r\n+        return createResponse(created.getId(), created).build();\r\n     }\r\n \r\n     @Override\r\n     public Response delete(final Long roleId) {\r\n         RoleTO deleted = controller.delete(roleId);\r\n-        return Response.ok(deleted).\r\n-                build();\r\n+        return updateResponse(deleted).build();\r\n     }\r\n \r\n     @Override\r\n@@ -114,9 +107,9 @@ public RoleTO readSelf(final Long roleId) {\n \r\n     @Override\r\n     public Response update(final Long roleId, final RoleMod roleMod) {\r\n+        roleMod.setId(roleId);\r\n         RoleTO updated = controller.update(roleMod);\r\n-        return Response.ok(updated).\r\n-                build();\r\n+        return updateResponse(updated).build();\r\n     }\r\n \r\n     @Override\r\n@@ -142,7 +135,6 @@ public Response associate(final Long roleId, final ResourceAssociationActionType\n                 updated = controller.read(roleId);\r\n         }\r\n \r\n-        return Response.ok(updated).\r\n-                build();\r\n+        return updateResponse(updated).build();\r\n     }\r\n }\r"},{"sha":"b014805650605eff2bf08d12d1fb00c231cf467c","filename":"core/src/main/java/org/apache/syncope/core/services/SchemaServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -33,7 +33,7 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class SchemaServiceImpl extends AbstractServiceImpl implements SchemaService, ContextAware {\r\n+public class SchemaServiceImpl extends AbstractServiceImpl implements SchemaService {\r\n \r\n     @Autowired\r\n     private SchemaController controller;\r"},{"sha":"f7d3ba290cd62d9a50c2e0ebc85e695eaf622c61","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -41,7 +41,7 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class TaskServiceImpl extends AbstractServiceImpl implements TaskService, ContextAware {\r\n+public class TaskServiceImpl extends AbstractServiceImpl implements TaskService {\r\n \r\n     @Autowired\r\n     private TaskController controller;\r"},{"sha":"776707ba5821427a0595e733384a9eed781f50e8","filename":"core/src/main/java/org/apache/syncope/core/services/UserSelfServiceImpl.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.services;\n \n-import java.net.URI;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.mod.UserMod;\n@@ -30,7 +29,7 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelfService, ContextAware {\n+public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelfService {\n \n     @Autowired\n     private UserController controller;\n@@ -45,11 +44,7 @@ public Response getOptions() {\n     @Override\n     public Response create(final UserTO userTO) {\n         UserTO created = controller.createSelf(userTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getId())).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_ID, created.getId()).\n-                entity(created).\n-                build();\n+        return createResponse(created.getId(), created).build();\n     }\n \n     @Override\n@@ -61,16 +56,13 @@ public UserTO read() {\n     public Response update(final Long userId, final UserMod userMod) {\n         userMod.setId(userId);\n         UserTO updated = controller.updateSelf(userMod);\n-        return Response.ok(updated).\n-                build();\n-\n+        return updateResponse(updated).build();\n     }\n \n     @Override\n     public Response delete() {\n         UserTO deleted = controller.deleteSelf();\n-        return Response.ok(deleted).\n-                build();\n+        return updateResponse(deleted).build();\n     }\n \n }"},{"sha":"6787d4af2743e726425b26827386d67518b6ffa5","filename":"core/src/main/java/org/apache/syncope/core/services/UserServiceImpl.java","status":"modified","additions":6,"deletions":15,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.services;\n \n-import java.net.URI;\n import java.util.List;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n@@ -39,7 +38,7 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class UserServiceImpl extends AbstractServiceImpl implements UserService, ContextAware {\n+public class UserServiceImpl extends AbstractServiceImpl implements UserService {\n \n     @Autowired\n     private UserController controller;\n@@ -66,18 +65,13 @@ public int count() {\n     @Override\n     public Response create(final UserTO userTO) {\n         UserTO created = controller.create(userTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getId())).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_ID, created.getId()).\n-                entity(created).\n-                build();\n+        return createResponse(created.getId(), created).build();\n     }\n \n     @Override\n     public Response delete(final Long userId) {\n         UserTO deleted = controller.delete(userId);\n-        return Response.ok(deleted).\n-                build();\n+        return updateResponse(deleted).build();\n     }\n \n     @Override\n@@ -116,16 +110,14 @@ public int searchCount(final NodeCond searchCondition) throws InvalidSearchCondi\n     public Response update(final Long userId, final UserMod userMod) {\n         userMod.setId(userId);\n         UserTO updated = controller.update(userMod);\n-        return Response.ok(updated).\n-                build();\n+        return updateResponse(updated).build();\n     }\n \n     @Override\n     public Response status(final Long userId, final StatusMod statusMod) {\n         statusMod.setId(userId);\n         UserTO updated = controller.status(statusMod);\n-        return Response.ok(updated).\n-                build();\n+        return updateResponse(updated).build();\n     }\n \n     @Override\n@@ -156,7 +148,6 @@ public Response associate(final Long userId, final ResourceAssociationActionType\n                 updated = controller.read(userId);\n         }\n \n-        return Response.ok(updated).\n-                build();\n+        return updateResponse(updated).build();\n     }\n }"},{"sha":"dd4f8765be17e535d4c3f7222ba577d942a8e2e2","filename":"core/src/main/java/org/apache/syncope/core/services/WorkflowServiceImpl.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -21,16 +21,11 @@\n import java.io.IOException;\r\n import java.io.OutputStream;\r\n import javax.ws.rs.BadRequestException;\r\n-import org.apache.syncope.common.types.RESTHeaders;\r\n-import org.apache.syncope.core.rest.controller.WorkflowController;\r\n-import org.springframework.beans.factory.annotation.Autowired;\r\n-import javax.ws.rs.core.Context;\r\n import javax.ws.rs.core.HttpHeaders;\r\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.StreamingOutput;\r\n \r\n-import org.apache.cxf.jaxrs.ext.MessageContext;\r\n import org.apache.syncope.common.services.WorkflowService;\r\n import org.apache.syncope.common.types.AttributableType;\r\n import org.apache.syncope.common.types.RESTHeaders;\r\n@@ -40,10 +35,7 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class WorkflowServiceImpl extends AbstractServiceImpl implements WorkflowService, ContextAware {\r\n-\r\n-    @Context\r\n-    private MessageContext context;\r\n+public class WorkflowServiceImpl extends AbstractServiceImpl implements WorkflowService {\r\n \r\n     @Autowired\r\n     private WorkflowController controller;\r"},{"sha":"11fbbb132109a1624e8c6caef28da14e53b178de","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -18,16 +18,22 @@\n  */\n package org.apache.syncope.core.rest;\n \n+import static org.apache.syncope.core.rest.AbstractTest.clientFactory;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import java.security.AccessControlException;\n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.syncope.client.SyncopeClient;\n \n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.services.RoleService;\n@@ -39,6 +45,8 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.ClientExceptionType;\n+import org.apache.syncope.common.types.Preference;\n+import org.apache.syncope.common.types.RESTHeaders;\n import org.apache.syncope.common.types.ResourceAssociationActionType;\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.validation.SyncopeClientException;\n@@ -511,4 +519,33 @@ public void anonymous() {\n         RoleService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(RoleService.class);\n         assertFalse(anonymous.list().isEmpty());\n     }\n+\n+    @Test\n+    public void noContent() throws IOException {\n+        SyncopeClient noContentclient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        RoleService noContentService = noContentclient.prefer(RoleService.class, Preference.RETURN_NO_CONTENT);\n+\n+        RoleTO role = buildRoleTO(\"noContent\");\n+\n+        Response response = noContentService.create(role);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+\n+        role = noContentclient.getObject(response.getLocation(), RoleService.class, RoleTO.class);\n+        assertNotNull(role);\n+\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.getAttrsToUpdate().add(attributeMod(\"badge\", \"xxxxxxxxxx\"));\n+\n+        response = noContentService.update(role.getId(), roleMod);\n+        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+\n+        response = noContentService.delete(role.getId());\n+        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+    }\n }"},{"sha":"548ec6b7be7137638cb83e1cd39c67d15a1b6194","filename":"core/src/test/java/org/apache/syncope/core/rest/UserSelfTestITCase.java","status":"modified","additions":26,"deletions":3,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -18,14 +18,21 @@\n  */\n package org.apache.syncope.core.rest;\n \n+import static org.apache.syncope.core.rest.AbstractTest.clientFactory;\n+import static org.apache.syncope.core.rest.UserTestITCase.getUniqueSampleTO;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import java.security.AccessControlException;\n import java.util.Map;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n@@ -39,6 +46,8 @@\n import org.apache.syncope.common.to.WorkflowFormTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ClientExceptionType;\n+import org.apache.syncope.common.types.Preference;\n+import org.apache.syncope.common.types.RESTHeaders;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.junit.Assume;\n@@ -57,7 +66,7 @@ public void selfRegistrationAllowed() {\n     @Test\n     public void create() {\n         Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n-        \n+\n         // 1. self-registration as admin: failure\n         try {\n             userSelfService.create(UserTestITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"));\n@@ -145,7 +154,7 @@ public void updateWithoutApproval() {\n         UserTO updated = authClient.getService(UserSelfService.class).update(created.getId(), userMod).\n                 readEntity(UserTO.class);\n         assertNotNull(updated);\n-        assertEquals(ActivitiDetector.isActivitiEnabledForUsers()? \"active\": \"created\", updated.getStatus());\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? \"active\" : \"created\", updated.getStatus());\n         assertTrue(updated.getUsername().endsWith(\"XX\"));\n     }\n \n@@ -218,7 +227,7 @@ public void delete() {\n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n         UserTO deleted = authClient.getService(UserSelfService.class).delete().readEntity(UserTO.class);\n         assertNotNull(deleted);\n-        assertEquals(ActivitiDetector.isActivitiEnabledForUsers()? \"deleteApproval\": null, deleted.getStatus());\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? \"deleteApproval\" : null, deleted.getStatus());\n     }\n \n     @Test\n@@ -227,4 +236,18 @@ public void issueSYNCOPE373() {\n         assertEquals(ADMIN_UNAME, userTO.getUsername());\n     }\n \n+    @Test\n+    public void noContent() throws IOException {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        UserSelfService noContentService = anonClient.prefer(UserSelfService.class, Preference.RETURN_NO_CONTENT);\n+\n+        UserTO user = getUniqueSampleTO(\"nocontent-anonymous@syncope.apache.org\");\n+\n+        Response response = noContentService.create(user);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+    }\n }"},{"sha":"d5aead4d9f82875fd6c2649e1a970850e2c825f9","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":47,"deletions":20,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/418bc07ff3cdbd4aaf252f5b602a2352ec1eae96/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=418bc07ff3cdbd4aaf252f5b602a2352ec1eae96","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n@@ -67,18 +66,26 @@\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n import static org.apache.syncope.core.rest.AbstractTest.attributeTO;\n+import static org.junit.Assert.assertEquals;\n import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.syncope.client.SyncopeClient;\n+import org.apache.syncope.common.services.UserService;\n+import org.apache.syncope.common.types.Preference;\n+import org.apache.syncope.common.types.RESTHeaders;\n import org.junit.Assume;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n import org.springframework.dao.EmptyResultDataAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.util.StringUtils;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class UserTestITCase extends AbstractTest {\n@@ -234,7 +241,7 @@ public void issue186() {\n     }\n \n     @Test\n-    public void testEnforceMandatoryCondition() {\n+    public void enforceMandatoryCondition() {\n         UserTO userTO = getUniqueSampleTO(\"enforce@apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_WS2);\n         userTO.setPassword(\"newPassword\");\n@@ -261,7 +268,7 @@ public void testEnforceMandatoryCondition() {\n     }\n \n     @Test\n-    public void testEnforceMandatoryConditionOnDerived() {\n+    public void enforceMandatoryConditionOnDerived() {\n         ResourceTO resourceTO = resourceService.read(RESOURCE_NAME_CSV);\n         assertNotNull(resourceTO);\n         resourceTO.setName(\"resource-csv-enforcing\");\n@@ -449,7 +456,7 @@ public void create() {\n \n         // 4. try (and fail) to create another user with same (unique) values\n         userTO = getSampleTO(userTO.getUsername());\n-        AttributeTO userIdAttr = getManadatoryAttrByName(userTO.getAttrs(), \"userId\");\n+        AttributeTO userIdAttr = userTO.getAttrMap().get(\"userId\");\n         userIdAttr.getValues().clear();\n         userIdAttr.getValues().add(\"a.b@c.com\");\n \n@@ -461,20 +468,11 @@ public void create() {\n         }\n     }\n \n-    private AttributeTO getManadatoryAttrByName(List<AttributeTO> attributes, String attrName) {\n-        for (AttributeTO attr : attributes) {\n-            if (attrName.equals(attr.getSchema())) {\n-                return attr;\n-            }\n-        }\n-        throw new NotFoundException(\"Mandatory attribute \" + attrName + \" not found\");\n-    }\n-\n     @Test\n     public void createWithRequiredValueMissing() {\n         UserTO userTO = getSampleTO(\"a.b@c.it\");\n \n-        AttributeTO type = getManadatoryAttrByName(userTO.getAttrs(), \"type\");\n+        AttributeTO type = userTO.getAttrMap().get(\"type\");\n         userTO.getAttrs().remove(type);\n \n         MembershipTO membershipTO = new MembershipTO();\n@@ -491,7 +489,7 @@ public void createWithRequiredValueMissing() {\n \n         userTO.getAttrs().add(attributeTO(\"type\", \"F\"));\n \n-        AttributeTO surname = getManadatoryAttrByName(userTO.getAttrs(), \"surname\");\n+        AttributeTO surname = userTO.getAttrMap().get(\"surname\");\n         userTO.getAttrs().remove(surname);\n \n         // 2. create user without surname (mandatory when type == 'F')\n@@ -721,10 +719,10 @@ public void update() {\n         assertEquals(1, userTO.getMemberships().iterator().next().getAttrs().size());\n         assertFalse(userTO.getDerAttrs().isEmpty());\n \n-        AttributeTO userIdAttr = getManadatoryAttrByName(userTO.getAttrs(), \"userId\");\n+        AttributeTO userIdAttr = userTO.getAttrMap().get(\"userId\");\n         assertEquals(Collections.singletonList(newUserId), userIdAttr.getValues());\n \n-        AttributeTO fullNameAttr = getManadatoryAttrByName(userTO.getAttrs(), \"fullname\");\n+        AttributeTO fullNameAttr = userTO.getAttrMap().get(\"fullname\");\n         assertEquals(Collections.singletonList(newFullName), fullNameAttr.getValues());\n     }\n \n@@ -1196,6 +1194,35 @@ public void membershipAttrPropagation() {\n         assertEquals(\"sx-dx\", connObjectTO.getAttrMap().get(\"MEMBERSHIP\").getValues().get(0));\n     }\n \n+    @Test\n+    public void noContent() throws IOException {\n+        SyncopeClient noContentclient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        UserService noContentService = noContentclient.prefer(UserService.class, Preference.RETURN_NO_CONTENT);\n+\n+        UserTO user = getUniqueSampleTO(\"nocontent@syncope.apache.org\");\n+\n+        Response response = noContentService.create(user);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+\n+        user = noContentclient.getObject(response.getLocation(), UserService.class, UserTO.class);\n+        assertNotNull(user);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setPassword(\"password321\");\n+\n+        response = noContentService.update(user.getId(), userMod);\n+        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+\n+        response = noContentService.delete(user.getId());\n+        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n+        assertEquals(Preference.RETURN_NO_CONTENT.literal(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n+        assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n+    }\n+\n     @Test\n     public void issueSYNCOPE108() {\n         UserTO userTO = getUniqueSampleTO(\"syncope108@syncope.apache.org\");\n@@ -1339,7 +1366,7 @@ public void issueSYNCOPE111() {\n \n         postalAddress = connObjectTO.getAttrMap().get(\"postalAddress\");\n         assertTrue(postalAddress == null || postalAddress.getValues().isEmpty()\n-                || StringUtils.hasText(postalAddress.getValues().get(0)));\n+                || StringUtils.isNotBlank(postalAddress.getValues().get(0)));\n \n         title = connObjectTO.getAttrMap().get(\"title\");\n         assertNotNull(title);"}]}