{"sha":"adc2f7f5229d716e282b71ad3f6d987dc9f32423","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFkYzJmN2Y1MjI5ZDcxNmUyODJiNzFhZDNmNmQ5ODdkYzlmMzI0MjM=","commit":{"author":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-04-14T14:33:45Z"},"committer":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-04-14T15:56:28Z"},"message":"[SYNCOPE-654] JPA error messages and Syncope client exceptions are correctly displayed","tree":{"sha":"b0426d55dcfbe4647d5874c4aa1644caeae69dca","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b0426d55dcfbe4647d5874c4aa1644caeae69dca"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/adc2f7f5229d716e282b71ad3f6d987dc9f32423","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/adc2f7f5229d716e282b71ad3f6d987dc9f32423","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/adc2f7f5229d716e282b71ad3f6d987dc9f32423","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/adc2f7f5229d716e282b71ad3f6d987dc9f32423/comments","author":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"committer":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"parents":[{"sha":"a685073a0bf59efbce27061c31f02807d3597ab0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a685073a0bf59efbce27061c31f02807d3597ab0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a685073a0bf59efbce27061c31f02807d3597ab0"}],"stats":{"total":204,"additions":187,"deletions":17},"files":[{"sha":"b78ad17b08b670f546610048b8055eceac6280e3","filename":"client/src/main/java/org/apache/syncope/client/rest/RestClientExceptionMapper.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adc2f7f5229d716e282b71ad3f6d987dc9f32423/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adc2f7f5229d716e282b71ad3f6d987dc9f32423/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java?ref=adc2f7f5229d716e282b71ad3f6d987dc9f32423","patch":"@@ -76,17 +76,18 @@ else if (statusCode == Response.Status.BAD_REQUEST.getStatusCode()) {\n     }\n \n     private SyncopeClientCompositeException checkSyncopeClientCompositeException(final Response response) {\n-        List<Object> exTypesInHeaders = response.getHeaders().get(RESTHeaders.ERROR_CODE);\n+        List<String> exTypesInHeaders = response.getStringHeaders().get(RESTHeaders.ERROR_CODE);\n         if (exTypesInHeaders == null) {\n             LOG.debug(\"No \" + RESTHeaders.ERROR_CODE + \" provided\");\n             return null;\n         }\n+        List<String> exInfos = response.getStringHeaders().get(RESTHeaders.ERROR_INFO);\n \n         final SyncopeClientCompositeException compException = SyncopeClientException.buildComposite();\n \n         final Set<String> handledExceptions = new HashSet<String>();\n-        for (Object exceptionTypeValue : exTypesInHeaders) {\n-            final String exTypeAsString = (String) exceptionTypeValue;\n+        for (int i = 0; i < exTypesInHeaders.size(); i++) {\n+            String exTypeAsString = exTypesInHeaders.get(i);\n             ClientExceptionType exceptionType = null;\n             try {\n                 exceptionType = ClientExceptionType.fromHeaderValue(exTypeAsString);\n@@ -98,13 +99,10 @@ private SyncopeClientCompositeException checkSyncopeClientCompositeException(fin\n \n                 final SyncopeClientException clientException = SyncopeClientException.build(exceptionType);\n \n-                if (response.getHeaders().get(RESTHeaders.ERROR_INFO) != null\n-                        && !response.getHeaders().get(RESTHeaders.ERROR_INFO).isEmpty()) {\n-\n-                    for (Object value : response.getHeaders().get(RESTHeaders.ERROR_INFO)) {\n-                        final String element = value.toString();\n+                if (exInfos != null && !exInfos.isEmpty()) {\n+                    for (String element : exInfos) {\n                         if (element.startsWith(exceptionType.getHeaderValue())) {\n-                            clientException.getElements().add(StringUtils.substringAfter(value.toString(), \":\"));\n+                            clientException.getElements().add(StringUtils.substringAfter(element, \":\"));\n                         }\n                     }\n                 }"},{"sha":"97bb732eee5f7a5056703f0a1ae4de4702c02aaf","filename":"client/src/main/java/org/apache/syncope/client/rest/RestClientFactoryBean.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adc2f7f5229d716e282b71ad3f6d987dc9f32423/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adc2f7f5229d716e282b71ad3f6d987dc9f32423/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientFactoryBean.java?ref=adc2f7f5229d716e282b71ad3f6d987dc9f32423","patch":"@@ -62,6 +62,8 @@ public <T> T createServiceInstance(\n         setServiceClass(serviceClass);\n         final T serviceInstance = create(serviceClass);\n         WebClient.client(serviceInstance).type(mediaType).accept(mediaType);\n+        WebClient.getConfig(WebClient.client(serviceInstance)).getRequestContext().\n+                put(\"org.apache.cxf.http.header.split\", true);\n         return serviceInstance;\n     }\n }"},{"sha":"3d9d630923b6d9803692da3cd97f9081dbb2db4e","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adc2f7f5229d716e282b71ad3f6d987dc9f32423/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adc2f7f5229d716e282b71ad3f6d987dc9f32423/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=adc2f7f5229d716e282b71ad3f6d987dc9f32423","patch":"@@ -111,7 +111,7 @@ public SyncopeUser findByWorkflowId(final String workflowId) {\n     @Override\n     public SyncopeUser findByToken(final String token) {\n         TypedQuery<SyncopeUser> query = entityManager.createQuery(\"SELECT e FROM \" + SyncopeUser.class.getSimpleName()\n-                + \" e WHERE e.token = :token\", SyncopeUser.class);\n+                + \" e WHERE e.token LIKE :token\", SyncopeUser.class);\n         query.setParameter(\"token\", token);\n \n         SyncopeUser result = null;"},{"sha":"92c2034417fc45aa183da7453421fa1b93420991","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":41,"deletions":5,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adc2f7f5229d716e282b71ad3f6d987dc9f32423/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adc2f7f5229d716e282b71ad3f6d987dc9f32423/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=adc2f7f5229d716e282b71ad3f6d987dc9f32423","patch":"@@ -18,7 +18,9 @@\n  */\n package org.apache.syncope.core.rest.utils;\n \n+import java.sql.SQLException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -33,6 +35,7 @@\n import javax.ws.rs.core.Response.ResponseBuilder;\n import javax.ws.rs.ext.ExceptionMapper;\n import javax.ws.rs.ext.Provider;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\n import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n import org.apache.cxf.jaxrs.validation.ValidationExceptionMapper;\n@@ -50,11 +53,17 @@\n import org.identityconnectors.framework.common.exceptions.ConfigurationException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.core.env.Environment;\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.orm.jpa.JpaSystemException;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.transaction.TransactionSystemException;\n \n+@Configuration\n+@PropertySource(\"classpath:errorMessages.properties\")\n @Provider\n public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\n \n@@ -64,6 +73,17 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, R\n \n     private final ValidationExceptionMapper validationEM = new ValidationExceptionMapper();\n \n+    @Autowired\n+    private Environment env;\n+\n+    private static final Map<String, String> exceptionCodeMap;\n+\n+    static {\n+        exceptionCodeMap = new HashMap<String, String>();\n+        exceptionCodeMap.put(\"23000\", \"UniqueConstraintViolation\");\n+        exceptionCodeMap.put(\"23505\", \"UniqueConstraintViolation\");\n+    }\n+\n     @Override\n     public Response toResponse(final Exception ex) {\n         LOG.error(\"Exception thrown by REST method: \" + ex.getMessage(), ex);\n@@ -90,9 +110,11 @@ public Response toResponse(final Exception ex) {\n         } else if (ex instanceof UnauthorizedRoleException) {\n             builder = builder(Response.Status.UNAUTHORIZED, ClientExceptionType.UnauthorizedRole, getExMessage(ex));\n         } else if (ex instanceof EntityExistsException) {\n-            builder = builder(Response.Status.CONFLICT, ClientExceptionType.EntityExists, getExMessage(ex));\n+            builder = builder(Response.Status.CONFLICT, ClientExceptionType.EntityExists, getJPAMessage(ex));\n         } else if (ex instanceof DataIntegrityViolationException) {\n-            builder = builder(Response.Status.CONFLICT, ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\n+            builder = builder(Response.Status.CONFLICT, ClientExceptionType.DataIntegrityViolation, getJPAMessage(ex));\n+        } else if (ex instanceof JpaSystemException) {\n+            builder = builder(Response.Status.CONFLICT, ClientExceptionType.DataIntegrityViolation, getJPAMessage(ex));\n         } else {\n             builder = processNotFoundExceptions(ex);\n             if (builder == null) {\n@@ -169,7 +191,7 @@ private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final Syncope\n             error.setType(sce.getType());\n \n             for (String element : sce.getElements()) {\n-                builder.header(RESTHeaders.ERROR_INFO, ex.getType().getInfoHeaderValue(element));\n+                builder.header(RESTHeaders.ERROR_INFO, sce.getType().getInfoHeaderValue(element));\n                 error.getElements().add(element);\n             }\n \n@@ -202,8 +224,8 @@ private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n         if (iee != null) {\n             ClientExceptionType exType =\n                     iee.getEntityClassSimpleName().endsWith(\"Policy\")\n-                    ? ClientExceptionType.InvalidPolicy\n-                    : ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\n+                            ? ClientExceptionType.InvalidPolicy\n+                            : ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\n \n             ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\n             builder.header(RESTHeaders.ERROR_CODE, exType.getHeaderValue());\n@@ -273,4 +295,18 @@ private String getMessage(final Throwable ex, final String msg) {\n     private String getExMessage(final Throwable ex) {\n         return (ex.getCause() == null) ? ex.getMessage() : ex.getCause().getMessage();\n     }\n+\n+    private String getJPAMessage(final Throwable ex) {\n+        Throwable throwable = ExceptionUtils.getRootCause(ex);\n+        String message = null;\n+        if (throwable instanceof SQLException) {\n+            String SQLState = ((SQLException) throwable).getSQLState();\n+            String messageKey = exceptionCodeMap.get(SQLState);\n+            if (messageKey != null) {\n+                message = env.getProperty(\"errMessage.\" + messageKey);\n+            }\n+        }\n+\n+        return message == null ? getExMessage(ex) : message;\n+    }\n }"},{"sha":"4e942db888873896d31e4479123dfbf76983d397","filename":"core/src/main/resources/errorMessages.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adc2f7f5229d716e282b71ad3f6d987dc9f32423/core%2Fsrc%2Fmain%2Fresources%2FerrorMessages.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adc2f7f5229d716e282b71ad3f6d987dc9f32423/core%2Fsrc%2Fmain%2Fresources%2FerrorMessages.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FerrorMessages.properties?ref=adc2f7f5229d716e282b71ad3f6d987dc9f32423","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+errMessage.UniqueConstraintViolation=A violation of the constraint imposed by a unique index or a unique constraint occurred"},{"sha":"34d275b7ab0268a1dbd58117b8e2c1182a57a435","filename":"core/src/test/java/org/apache/syncope/core/rest/ExceptionMapperTestITCase.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adc2f7f5229d716e282b71ad3f6d987dc9f32423/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FExceptionMapperTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adc2f7f5229d716e282b71ad3f6d987dc9f32423/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FExceptionMapperTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FExceptionMapperTestITCase.java?ref=adc2f7f5229d716e282b71ad3f6d987dc9f32423","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Properties;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.SchemaTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n+import org.apache.syncope.common.types.SchemaType;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class ExceptionMapperTestITCase extends AbstractTest {\n+\n+    private static final Properties props = new Properties();\n+\n+    @BeforeClass\n+    public static void setUpErrorMessages() throws IOException {\n+        InputStream propStream = null;\n+        try {\n+            propStream = ExceptionMapperTestITCase.class.getResourceAsStream(\"/errorMessages.properties\");\n+            props.load(propStream);\n+        } catch (Exception e) {\n+            LOG.error(\"Could not load /errorMessages.properties\", e);\n+        } finally {\n+            IOUtils.closeQuietly(propStream);\n+        }\n+    }\n+\n+    @Test\n+    public void uniqueSchemaConstraint() {\n+        // 1. create an user schema with unique constraint\n+        SchemaTO schemaTO = new SchemaTO();\n+        String schema_UID = getUUIDString();\n+        schemaTO.setName(\"unique\" + schema_UID);\n+        schemaTO.setType(AttributeSchemaType.String);\n+        schemaTO.setUniqueConstraint(true);\n+        createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n+\n+        // 2. create an user with mandatory attributes and unique\n+        UserTO userTO_1 = new UserTO();\n+        String userId_1 = getUUIDString() + \"issue654_1@syncope.apache.org\";\n+        userTO_1.setUsername(userId_1);\n+        userTO_1.setPassword(\"password\");\n+\n+        userTO_1.getAttrs().add(attributeTO(\"userId\", userId_1));\n+        userTO_1.getAttrs().add(attributeTO(\"fullname\", userId_1));\n+        userTO_1.getAttrs().add(attributeTO(\"surname\", userId_1));\n+        userTO_1.getAttrs().add(attributeTO(\"unique\" + schema_UID, \"unique\" + schema_UID));\n+\n+        createUser(userTO_1);\n+\n+        // 3. create an other user with mandatory attributes and unique with the same value of userTO_1\n+        UserTO userTO_2 = new UserTO();\n+        String userId_2 = getUUIDString() + \"issue654_2@syncope.apache.org\";\n+        userTO_2.setUsername(userId_2);\n+        userTO_2.setPassword(\"password\");\n+\n+        userTO_2.getAttrs().add(attributeTO(\"userId\", userId_2));\n+        userTO_2.getAttrs().add(attributeTO(\"fullname\", userId_2));\n+        userTO_2.getAttrs().add(attributeTO(\"surname\", userId_2));\n+        userTO_2.getAttrs().add(attributeTO(\"unique\" + schema_UID, \"unique\" + schema_UID));\n+\n+        try {\n+            createUser(userTO_2);\n+        } catch (Exception e) {\n+            String message = props.getProperty(\"errMessage.UniqueConstraintViolation\");\n+            Assert.assertEquals(e.getMessage(), \"DataIntegrityViolation [\" + message + \"]\");\n+        }\n+    }\n+\n+    @Test\n+    public void sameRoleName() {\n+        //Create the first role\n+        RoleTO roleTO_1 = new RoleTO();\n+        String role_UUID = getUUIDString();\n+        roleTO_1.setName(\"child1\" + role_UUID);\n+        roleTO_1.setParent(1L);\n+        createRole(roleTO_1);\n+        //Create the second role, with the same parent and the same role of roleTO_1\n+        RoleTO roleTO_2 = new RoleTO();\n+        roleTO_2.setName(\"child1\" + role_UUID);\n+        roleTO_2.setParent(1L);\n+        try {\n+            createRole(roleTO_2);\n+        } catch (Exception e) {\n+            String message = props.getProperty(\"errMessage.UniqueConstraintViolation\");\n+            Assert.assertEquals(e.getMessage(), \"DataIntegrityViolation [\" + message + \"]\");\n+        }\n+    }\n+\n+}"},{"sha":"2ac376a520afe7e758f6dd039c1eaab2febf480b","filename":"core/src/test/resources/oracle/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adc2f7f5229d716e282b71ad3f6d987dc9f32423/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adc2f7f5229d716e282b71ad3f6d987dc9f32423/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties?ref=adc2f7f5229d716e282b71ad3f6d987dc9f32423","patch":"@@ -15,7 +15,7 @@\n # specific language governing permissions and limitations\n # under the License.\n jpa.driverClassName=oracle.jdbc.OracleDriver\n-jpa.url=jdbc:oracle:thin:@localhost:1521:xe\n+jpa.url=jdbc:oracle:thin:@pioppo:1521:orcl\n jpa.username=syncope\n jpa.password=syncope\n jpa.dialect=org.apache.openjpa.jdbc.sql.OracleDictionary"},{"sha":"a940c2dee3cd0a647c599b39109cbaf2443d1257","filename":"core/src/test/resources/sqlserver/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adc2f7f5229d716e282b71ad3f6d987dc9f32423/core%2Fsrc%2Ftest%2Fresources%2Fsqlserver%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adc2f7f5229d716e282b71ad3f6d987dc9f32423/core%2Fsrc%2Ftest%2Fresources%2Fsqlserver%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fsqlserver%2Fpersistence.properties?ref=adc2f7f5229d716e282b71ad3f6d987dc9f32423","patch":"@@ -15,7 +15,7 @@\n # specific language governing permissions and limitations\n # under the License.\n jpa.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver\n-jpa.url=jdbc:sqlserver://localhost:1433;database=syncope;selectMethod=cursor;sendStringParametersAsUnicode=false\n+jpa.url=jdbc:sqlserver://acacia:1433;database=syncope;selectMethod=cursor;sendStringParametersAsUnicode=false\n jpa.username=syncope\n jpa.password=syncope\n jpa.dialect=org.apache.openjpa.jdbc.sql.SQLServerDictionary"}]}