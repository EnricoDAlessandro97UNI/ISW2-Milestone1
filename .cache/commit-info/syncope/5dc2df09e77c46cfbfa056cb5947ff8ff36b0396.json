{"sha":"5dc2df09e77c46cfbfa056cb5947ff8ff36b0396","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVkYzJkZjA5ZTc3YzQ2Y2ZiZmEwNTZjYjU5NDdmZjhmZjM2YjAzOTY=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2014-05-09T06:55:48Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2014-05-09T06:55:48Z"},"message":"improved management of page number sent to rest services that allow pagination\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1593492 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"967bebcb64b8c9b52cbe2645b1da037330dd1665","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/967bebcb64b8c9b52cbe2645b1da037330dd1665"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5dc2df09e77c46cfbfa056cb5947ff8ff36b0396","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5dc2df09e77c46cfbfa056cb5947ff8ff36b0396","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5dc2df09e77c46cfbfa056cb5947ff8ff36b0396","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5dc2df09e77c46cfbfa056cb5947ff8ff36b0396/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"8dfe9c1bc0df70b9835a384c037c634a2131125d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8dfe9c1bc0df70b9835a384c037c634a2131125d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8dfe9c1bc0df70b9835a384c037c634a2131125d"}],"stats":{"total":16,"additions":11,"deletions":5},"files":[{"sha":"528fd70c32ee46c27b9e617c4ff5d548541dd8ff","filename":"console/src/main/java/org/apache/syncope/console/commons/AttributableDataProvider.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5dc2df09e77c46cfbfa056cb5947ff8ff36b0396/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5dc2df09e77c46cfbfa056cb5947ff8ff36b0396/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java?ref=5dc2df09e77c46cfbfa056cb5947ff8ff36b0396","patch":"@@ -69,12 +69,14 @@ public void setFIQL(final String fiql) {\n     public Iterator<? extends AbstractAttributableTO> iterator(final long first, final long count) {\n         List<? extends AbstractAttributableTO> result;\n \n+        final int page = ((int) first / paginatorRows);\n+\n         if (filtered) {\n             result = fiql == null\n                     ? Collections.<AbstractAttributableTO>emptyList()\n-                    : restClient.search(fiql, ((int) first / paginatorRows) + 1, paginatorRows, getSort());\n+                    : restClient.search(fiql, (page < 0 ? 0 : page) + 1, paginatorRows, getSort());\n         } else {\n-            result = restClient.list(((int) first / paginatorRows) + 1, paginatorRows, getSort());\n+            result = restClient.list((page < 0 ? 0 : page) + 1, paginatorRows, getSort());\n         }\n \n         Collections.sort(result, comparator);"},{"sha":"b47e434b6e04b690fdbbb5d58ff7dec606dbd8e9","filename":"console/src/main/java/org/apache/syncope/console/pages/Reports.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5dc2df09e77c46cfbfa056cb5947ff8ff36b0396/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5dc2df09e77c46cfbfa056cb5947ff8ff36b0396/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java?ref=5dc2df09e77c46cfbfa056cb5947ff8ff36b0396","patch":"@@ -384,8 +384,10 @@ public ReportProvider() {\n \n         @Override\n         public Iterator<ReportTO> iterator(final long first, final long count) {\n+            final int page = ((int) first / paginatorRows);\n+            \n             final List<ReportTO> list =\n-                    reportRestClient.list(((int) first / paginatorRows) + 1, paginatorRows, getSort());\n+                    reportRestClient.list((page < 0 ? 0 : page) + 1, paginatorRows, getSort());\n             Collections.sort(list, comparator);\n             return list.iterator();\n         }"},{"sha":"109387f13750e79c1d7c3010706f4bbb40c3d157","filename":"console/src/main/java/org/apache/syncope/console/pages/Tasks.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5dc2df09e77c46cfbfa056cb5947ff8ff36b0396/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5dc2df09e77c46cfbfa056cb5947ff8ff36b0396/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=5dc2df09e77c46cfbfa056cb5947ff8ff36b0396","patch":"@@ -150,8 +150,10 @@ public TasksProvider(\n         @Override\n         public Iterator<T> iterator(final long first, final long count) {\n             final List<T> tasks = new ArrayList<T>();\n-\n-            for (T task : restClient.list(reference, ((int) first / paginatorRows) + 1, paginatorRows, getSort())) {\n+            \n+            final int page = ((int) first / paginatorRows);\n+            \n+            for (T task : restClient.list(reference, (page < 0 ? 0 : page)  + 1, paginatorRows, getSort())) {\n                 if (task instanceof SchedTaskTO && ((SchedTaskTO) task).getLastExec() == null\n                         && task.getExecutions() != null && !task.getExecutions().isEmpty()) {\n "}]}