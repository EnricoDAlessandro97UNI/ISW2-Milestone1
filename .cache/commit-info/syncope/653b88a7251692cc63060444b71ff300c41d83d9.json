{"sha":"653b88a7251692cc63060444b71ff300c41d83d9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY1M2I4OGE3MjUxNjkyY2M2MzA2MDQ0NGI3MWZmMzAwYzQxZDgzZDk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-29T12:09:31Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-29T12:10:04Z"},"message":"Cleaning up unused R/O maps from TOs","tree":{"sha":"93836c0200459ffa19ad14733833c9e71942dd63","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/93836c0200459ffa19ad14733833c9e71942dd63"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/653b88a7251692cc63060444b71ff300c41d83d9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/653b88a7251692cc63060444b71ff300c41d83d9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/653b88a7251692cc63060444b71ff300c41d83d9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/653b88a7251692cc63060444b71ff300c41d83d9/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e19910c2e011b7066f8cd259483603fdf889ec85","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e19910c2e011b7066f8cd259483603fdf889ec85","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e19910c2e011b7066f8cd259483603fdf889ec85"}],"stats":{"total":865,"additions":402,"deletions":463},"files":[{"sha":"0ea89e5c17420bc2aa674dbf927cc2844ddb894a","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.ListUtils;\n@@ -159,10 +158,10 @@ public boolean evaluate(final MembershipTO object) {\n             }\n \n             // set group names in membership TOs\n-            Map<String, MembershipTO> membershipMap = GroupableRelatableTO.class.cast(anyTO).getMembershipMap();\n             for (GroupTO group : groups) {\n-                if (membershipMap.containsKey(group.getKey())) {\n-                    membershipMap.get(group.getKey()).setGroupName(group.getName());\n+                MembershipTO membership = GroupableRelatableTO.class.cast(anyTO).getMembership(group.getKey());\n+                if (membership != null) {\n+                    membership.setGroupName(group.getName());\n                 }\n             }\n \n@@ -180,7 +179,7 @@ public List<MembershipTO> execute(final String filter) {\n                             : groupRestClient.search(\n                                     realm,\n                                     SyncopeClient.getGroupSearchConditionBuilder().\n-                                    isAssignable().and().is(\"name\").equalTo(filter).query(),\n+                                            isAssignable().and().is(\"name\").equalTo(filter).query(),\n                                     1, MAX_GROUP_LIST_CARDINALITY,\n                                     new SortParam<>(\"name\", true),\n                                     null),\n@@ -267,6 +266,6 @@ public boolean evaluate() {\n                 ? CollectionUtils.isNotEmpty(allDynRealms)\n                 : CollectionUtils.isNotEmpty(allDynRealms) || CollectionUtils.isNotEmpty(allGroups))\n                 && SyncopeConsoleApplication.get().getSecuritySettings().getAuthorizationStrategy().\n-                isActionAuthorized(this, RENDER);\n+                        isActionAuthorized(this, RENDER);\n     }\n }"},{"sha":"037b1fbddf361b79bd3c1c737d5f976aa2cce037","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -196,14 +196,13 @@ public boolean evaluate(final MembershipTO item) {\n     private void completeUserObject(final UserTO userTO, final UserTO selfTO) {\n         // memberships plain and virtual attrs\n         for (final MembershipTO updatedTOMemb : userTO.getMemberships()) {\n-            MembershipTO oldTOMatchedMemb =\n-                    IterableUtils.find(selfTO.getMemberships(), new Predicate<MembershipTO>() {\n+            MembershipTO oldTOMatchedMemb = IterableUtils.find(selfTO.getMemberships(), new Predicate<MembershipTO>() {\n \n-                        @Override\n-                        public boolean evaluate(final MembershipTO oldTOMemb) {\n-                            return updatedTOMemb.getGroupKey().equals(oldTOMemb.getGroupKey());\n-                        }\n-                    });\n+                @Override\n+                public boolean evaluate(final MembershipTO oldTOMemb) {\n+                    return updatedTOMemb.getGroupKey().equals(oldTOMemb.getGroupKey());\n+                }\n+            });\n             if (oldTOMatchedMemb != null) {\n                 if (!updatedTOMemb.getPlainAttrs().isEmpty()) {\n                     completeAttrs(updatedTOMemb.getPlainAttrs(), oldTOMatchedMemb.getPlainAttrs());"},{"sha":"c0b211f57b9362d567734d60fa4cf306287fb3a5","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":24,"deletions":67,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -89,40 +89,8 @@ private static void diff(\n         result.setGroup(updated.getGroupKey());\n \n         // 1. plain attributes\n-        Map<String, AttrTO> updatedAttrs = EntityTOUtils.buildAttrMap(updated.getPlainAttrs());\n-        Map<String, AttrTO> originalAttrs = EntityTOUtils.buildAttrMap(original.getPlainAttrs());\n-\n         result.getPlainAttrs().clear();\n-\n-        if (!incremental) {\n-            IterableUtils.forEach(CollectionUtils.subtract(originalAttrs.keySet(), updatedAttrs.keySet()),\n-                    new Closure<String>() {\n-\n-                @Override\n-                public void execute(final String schema) {\n-                    result.getPlainAttrs().add(new AttrPatch.Builder().\n-                            operation(PatchOperation.DELETE).\n-                            attrTO(new AttrTO.Builder().schema(schema).build()).\n-                            build());\n-                }\n-            });\n-        }\n-\n-        for (AttrTO attrTO : updatedAttrs.values()) {\n-            if (attrTO.getValues().isEmpty()) {\n-                if (!incremental) {\n-                    result.getPlainAttrs().add(new AttrPatch.Builder().\n-                            operation(PatchOperation.DELETE).\n-                            attrTO(new AttrTO.Builder().schema(attrTO.getSchema()).build()).\n-                            build());\n-                }\n-            } else {\n-                AttrPatch patch = new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).attrTO(attrTO).build();\n-                if (!patch.isEmpty()) {\n-                    result.getPlainAttrs().add(patch);\n-                }\n-            }\n-        }\n+        result.getPlainAttrs().addAll(updated.getPlainAttrs());\n \n         // 2. virtual attributes\n         result.getVirAttrs().clear();\n@@ -236,8 +204,10 @@ public static AnyObjectPatch diff(\n         result.setName(replacePatchItem(updated.getName(), original.getName(), new StringReplacePatchItem()));\n \n         // 2. relationships\n-        Map<Pair<String, String>, RelationshipTO> updatedRels = updated.getRelationshipMap();\n-        Map<Pair<String, String>, RelationshipTO> originalRels = original.getRelationshipMap();\n+        Map<Pair<String, String>, RelationshipTO> updatedRels =\n+                EntityTOUtils.buildRelationshipMap(updated.getRelationships());\n+        Map<Pair<String, String>, RelationshipTO> originalRels =\n+                EntityTOUtils.buildRelationshipMap(original.getRelationships());\n \n         for (Map.Entry<Pair<String, String>, RelationshipTO> entry : updatedRels.entrySet()) {\n             if (!originalRels.containsKey(entry.getKey())) {\n@@ -256,8 +226,8 @@ public static AnyObjectPatch diff(\n         }\n \n         // 3. memberships\n-        Map<String, MembershipTO> updatedMembs = updated.getMembershipMap();\n-        Map<String, MembershipTO> originalMembs = original.getMembershipMap();\n+        Map<String, MembershipTO> updatedMembs = EntityTOUtils.buildMembershipMap(updated.getMemberships());\n+        Map<String, MembershipTO> originalMembs = EntityTOUtils.buildMembershipMap(original.getMemberships());\n \n         for (Map.Entry<String, MembershipTO> entry : updatedMembs.entrySet()) {\n             if (!originalMembs.containsKey(entry.getKey())) {\n@@ -332,8 +302,10 @@ public static UserPatch diff(final UserTO updated, final UserTO original, final\n         }\n \n         // 5. relationships\n-        Map<Pair<String, String>, RelationshipTO> updatedRels = updated.getRelationshipMap();\n-        Map<Pair<String, String>, RelationshipTO> originalRels = original.getRelationshipMap();\n+        Map<Pair<String, String>, RelationshipTO> updatedRels =\n+                EntityTOUtils.buildRelationshipMap(updated.getRelationships());\n+        Map<Pair<String, String>, RelationshipTO> originalRels =\n+                EntityTOUtils.buildRelationshipMap(original.getRelationships());\n \n         for (Map.Entry<Pair<String, String>, RelationshipTO> entry : updatedRels.entrySet()) {\n             if (!originalRels.containsKey(entry.getKey())) {\n@@ -352,8 +324,8 @@ public static UserPatch diff(final UserTO updated, final UserTO original, final\n         }\n \n         // 6. memberships\n-        Map<String, MembershipTO> updatedMembs = updated.getMembershipMap();\n-        Map<String, MembershipTO> originalMembs = original.getMembershipMap();\n+        Map<String, MembershipTO> updatedMembs = EntityTOUtils.buildMembershipMap(updated.getMemberships());\n+        Map<String, MembershipTO> originalMembs = EntityTOUtils.buildMembershipMap(original.getMemberships());\n \n         for (Map.Entry<String, MembershipTO> entry : updatedMembs.entrySet()) {\n             MembershipPatch membershipPatch = new MembershipPatch.Builder().\n@@ -365,8 +337,7 @@ public static UserPatch diff(final UserTO updated, final UserTO original, final\n                 omemb = originalMembs.get(entry.getKey());\n             } else {\n                 // create an empty one to generate the patch\n-                omemb = new MembershipTO();\n-                omemb.setGroupKey(entry.getKey());\n+                omemb = new MembershipTO.Builder().group(entry.getKey()).build();\n             }\n \n             diff(entry.getValue(), omemb, membershipPatch, incremental);\n@@ -553,19 +524,12 @@ public boolean evaluate(final MembershipTO object) {\n                 }\n \n                 if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    MembershipTO newMembershipTO = new MembershipTO();\n-                    newMembershipTO.setGroupKey(membPatch.getGroup());\n-\n-                    if (memb == null) {\n-                        for (AttrPatch attrPatch : membPatch.getPlainAttrs()) {\n-                            newMembershipTO.getPlainAttrs().add(attrPatch.getAttrTO());\n-                        }\n-                    } else {\n-                        newMembershipTO.getPlainAttrs().addAll(\n-                                patch(EntityTOUtils.buildAttrMap(memb.getPlainAttrs()), membPatch.getPlainAttrs()));\n-                    }\n+                    MembershipTO newMembershipTO = new MembershipTO.Builder().group(membPatch.getGroup()).build();\n+\n+                    // 3. plain attributes\n+                    newMembershipTO.getPlainAttrs().addAll(membPatch.getPlainAttrs());\n \n-                    // 3. virtual attributes\n+                    // 4. virtual attributes\n                     newMembershipTO.getVirAttrs().addAll(membPatch.getVirAttrs());\n \n                     result.getMemberships().add(newMembershipTO);\n@@ -619,19 +583,12 @@ public boolean evaluate(final MembershipTO object) {\n                 }\n \n                 if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    MembershipTO newMembershipTO = new MembershipTO();\n-                    newMembershipTO.setGroupKey(membPatch.getGroup());\n-\n-                    if (memb == null) {\n-                        for (AttrPatch attrPatch : membPatch.getPlainAttrs()) {\n-                            newMembershipTO.getPlainAttrs().add(attrPatch.getAttrTO());\n-                        }\n-                    } else {\n-                        newMembershipTO.getPlainAttrs().addAll(\n-                                patch(EntityTOUtils.buildAttrMap(memb.getPlainAttrs()), membPatch.getPlainAttrs()));\n-                    }\n+                    MembershipTO newMembershipTO = new MembershipTO.Builder().group(membPatch.getGroup()).build();\n+\n+                    // 3. plain attributes\n+                    newMembershipTO.getPlainAttrs().addAll(membPatch.getPlainAttrs());\n \n-                    // 3. virtual attributes\n+                    // 4. virtual attributes\n                     newMembershipTO.getVirAttrs().addAll(membPatch.getVirAttrs());\n \n                     result.getMemberships().add(newMembershipTO);"},{"sha":"dfc0a1e6298f5d6817b76db5b715af7473cf020d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/EntityTOUtils.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -19,11 +19,15 @@\n package org.apache.syncope.common.lib;\n \n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n \n public final class EntityTOUtils {\n \n@@ -43,7 +47,27 @@ public static Map<String, AttrTO> buildAttrMap(final Collection<AttrTO> attrs) {\n             result.put(attributeTO.getSchema(), attributeTO);\n         }\n \n-        return result;\n+        return Collections.unmodifiableMap(result);\n+    }\n+\n+    public static Map<Pair<String, String>, RelationshipTO> buildRelationshipMap(\n+            final Collection<RelationshipTO> relationships) {\n+\n+        Map<Pair<String, String>, RelationshipTO> result = new HashMap<>(relationships.size());\n+        for (RelationshipTO relationship : relationships) {\n+            result.put(Pair.of(relationship.getType(), relationship.getRightKey()), relationship);\n+        }\n+\n+        return Collections.unmodifiableMap(result);\n+    }\n+\n+    public static Map<String, MembershipTO> buildMembershipMap(final Collection<MembershipTO> memberships) {\n+        Map<String, MembershipTO> result = new HashMap<>(memberships.size());\n+        for (MembershipTO membership : memberships) {\n+            result.put(membership.getRightKey(), membership);\n+        }\n+\n+        return Collections.unmodifiableMap(result);\n     }\n \n     /**"},{"sha":"f2dcab57cb3ecf0868b3c00d4dcdcfbd29090e82","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/MembershipPatch.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FMembershipPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FMembershipPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FMembershipPatch.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -29,7 +29,7 @@\n \n @XmlRootElement(name = \"membershipPatch\")\n @XmlType\n-public class MembershipPatch extends AbstractPatch implements AttributablePatch {\n+public class MembershipPatch extends AbstractPatch {\n \n     private static final long serialVersionUID = -6783121761221554433L;\n \n@@ -48,7 +48,7 @@ public Builder group(final String group) {\n \n     private String group;\n \n-    private final Set<AttrPatch> plainAttrs = new HashSet<>();\n+    private final Set<AttrTO> plainAttrs = new HashSet<>();\n \n     private final Set<AttrTO> virAttrs = new HashSet<>();\n \n@@ -63,15 +63,13 @@ public void setGroup(final String group) {\n     @XmlElementWrapper(name = \"plainAttrs\")\n     @XmlElement(name = \"attribute\")\n     @JsonProperty(\"plainAttrs\")\n-    @Override\n-    public Set<AttrPatch> getPlainAttrs() {\n+    public Set<AttrTO> getPlainAttrs() {\n         return plainAttrs;\n     }\n \n     @XmlElementWrapper(name = \"virAttrs\")\n     @XmlElement(name = \"attribute\")\n     @JsonProperty(\"virAttrs\")\n-    @Override\n     public Set<AttrTO> getVirAttrs() {\n         return virAttrs;\n     }"},{"sha":"231504b7a5212d8cd87d8854ae4123e2ebfd843a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java","status":"modified","additions":22,"deletions":24,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -21,15 +21,13 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n \n @XmlRootElement(name = \"anyObject\")\n @XmlType\n@@ -53,6 +51,18 @@ public void setName(final String name) {\n         this.name = name;\n     }\n \n+    @JsonIgnore\n+    @Override\n+    public RelationshipTO getRelationship(final String type, final String rightKey) {\n+        return IterableUtils.find(relationships, new Predicate<RelationshipTO>() {\n+\n+            @Override\n+            public boolean evaluate(final RelationshipTO object) {\n+                return type.equals(object.getType()) && rightKey.equals(object.getRightKey());\n+            }\n+        });\n+    }\n+\n     @XmlElementWrapper(name = \"relationships\")\n     @XmlElement(name = \"relationship\")\n     @JsonProperty(\"relationships\")\n@@ -63,14 +73,14 @@ public List<RelationshipTO> getRelationships() {\n \n     @JsonIgnore\n     @Override\n-    public Map<Pair<String, String>, RelationshipTO> getRelationshipMap() {\n-        Map<Pair<String, String>, RelationshipTO> result = new HashMap<>(getRelationships().size());\n-        for (RelationshipTO relationship : getRelationships()) {\n-            result.put(Pair.of(relationship.getType(), relationship.getRightKey()), relationship);\n-        }\n-        result = Collections.unmodifiableMap(result);\n-\n-        return result;\n+    public MembershipTO getMembership(final String groupKey) {\n+        return IterableUtils.find(memberships, new Predicate<MembershipTO>() {\n+\n+            @Override\n+            public boolean evaluate(final MembershipTO object) {\n+                return groupKey.equals(object.getGroupKey());\n+            }\n+        });\n     }\n \n     @XmlElementWrapper(name = \"memberships\")\n@@ -81,18 +91,6 @@ public List<MembershipTO> getMemberships() {\n         return memberships;\n     }\n \n-    @JsonIgnore\n-    @Override\n-    public Map<String, MembershipTO> getMembershipMap() {\n-        Map<String, MembershipTO> result = new HashMap<>(getMemberships().size());\n-        for (MembershipTO membership : getMemberships()) {\n-            result.put(membership.getRightKey(), membership);\n-        }\n-        result = Collections.unmodifiableMap(result);\n-\n-        return result;\n-    }\n-\n     @XmlElementWrapper(name = \"dynGroups\")\n     @XmlElement(name = \"role\")\n     @JsonProperty(\"dynGroups\")"},{"sha":"0dba26d82b39f4f9b50a758b5b49b6e04d4a87d7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupableRelatableTO.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupableRelatableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupableRelatableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupableRelatableTO.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -19,18 +19,16 @@\n package org.apache.syncope.common.lib.to;\n \n import java.util.List;\n-import java.util.Map;\n-import org.apache.commons.lang3.tuple.Pair;\n \n public interface GroupableRelatableTO {\n \n-    Map<String, MembershipTO> getMembershipMap();\n+    MembershipTO getMembership(String groupKey);\n \n     List<MembershipTO> getMemberships();\n \n     List<String> getDynGroups();\n \n-    Map<Pair<String, String>, RelationshipTO> getRelationshipMap();\n+    RelationshipTO getRelationship(String type, String rightKey);\n \n     List<RelationshipTO> getRelationships();\n }"},{"sha":"40ebee587f53dfe7e088a4adb392a329329292f9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":22,"deletions":22,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -22,18 +22,16 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n @XmlRootElement(name = \"user\")\n@@ -197,6 +195,18 @@ public void setMustChangePassword(final boolean mustChangePassword) {\n         this.mustChangePassword = mustChangePassword;\n     }\n \n+    @JsonIgnore\n+    @Override\n+    public RelationshipTO getRelationship(final String type, final String rightKey) {\n+        return IterableUtils.find(relationships, new Predicate<RelationshipTO>() {\n+\n+            @Override\n+            public boolean evaluate(final RelationshipTO object) {\n+                return type.equals(object.getType()) && rightKey.equals(object.getRightKey());\n+            }\n+        });\n+    }\n+\n     @XmlElementWrapper(name = \"relationships\")\n     @XmlElement(name = \"relationship\")\n     @JsonProperty(\"relationships\")\n@@ -207,12 +217,14 @@ public List<RelationshipTO> getRelationships() {\n \n     @JsonIgnore\n     @Override\n-    public Map<Pair<String, String>, RelationshipTO> getRelationshipMap() {\n-        Map<Pair<String, String>, RelationshipTO> result = new HashMap<>(getRelationships().size());\n-        for (RelationshipTO relationship : getRelationships()) {\n-            result.put(Pair.of(relationship.getType(), relationship.getRightKey()), relationship);\n-        }\n-        return Collections.unmodifiableMap(result);\n+    public MembershipTO getMembership(final String groupKey) {\n+        return IterableUtils.find(memberships, new Predicate<MembershipTO>() {\n+\n+            @Override\n+            public boolean evaluate(final MembershipTO object) {\n+                return groupKey.equals(object.getGroupKey());\n+            }\n+        });\n     }\n \n     @XmlElementWrapper(name = \"memberships\")\n@@ -223,18 +235,6 @@ public List<MembershipTO> getMemberships() {\n         return memberships;\n     }\n \n-    @JsonIgnore\n-    @Override\n-    public Map<String, MembershipTO> getMembershipMap() {\n-        Map<String, MembershipTO> result = new HashMap<>(getMemberships().size());\n-        for (MembershipTO membership : getMemberships()) {\n-            result.put(membership.getRightKey(), membership);\n-        }\n-        result = Collections.unmodifiableMap(result);\n-\n-        return result;\n-    }\n-\n     @XmlElementWrapper(name = \"dynGroups\")\n     @XmlElement(name = \"role\")\n     @JsonProperty(\"dynGroups\")"},{"sha":"0e80be6142d971f63fefb9677be11f3521d029e8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/WorkflowFormTO.java","status":"modified","additions":13,"deletions":35,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FWorkflowFormTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FWorkflowFormTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FWorkflowFormTO.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -21,15 +21,14 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.patch.UserPatch;\n \n@@ -135,42 +134,21 @@ public void setUserPatch(final UserPatch userPatch) {\n         this.userPatch = userPatch;\n     }\n \n+    @JsonIgnore\n+    public WorkflowFormPropertyTO getProperty(final String id) {\n+        return IterableUtils.find(properties, new Predicate<WorkflowFormPropertyTO>() {\n+\n+            @Override\n+            public boolean evaluate(final WorkflowFormPropertyTO object) {\n+                return id.equals(object.getId());\n+            }\n+        });\n+    }\n+\n     @XmlElementWrapper(name = \"workflowFormProperties\")\n     @XmlElement(name = \"workflowFormProperty\")\n     @JsonProperty(\"workflowFormProperties\")\n     public List<WorkflowFormPropertyTO> getProperties() {\n         return properties;\n     }\n-\n-    public boolean addProperty(final WorkflowFormPropertyTO property) {\n-        return properties.contains(property)\n-                ? true\n-                : properties.add(property);\n-    }\n-\n-    public boolean removeProperty(final WorkflowFormPropertyTO property) {\n-        return properties.remove(property);\n-    }\n-\n-    @JsonIgnore\n-    public Map<String, WorkflowFormPropertyTO> getPropertyMap() {\n-        Map<String, WorkflowFormPropertyTO> result = new HashMap<>();\n-        for (WorkflowFormPropertyTO prop : getProperties()) {\n-            result.put(prop.getId(), prop);\n-        }\n-\n-        return Collections.unmodifiableMap(result);\n-    }\n-\n-    @JsonIgnore\n-    public Map<String, String> getPropertiesForSubmit() {\n-        Map<String, String> props = new HashMap<>();\n-        for (WorkflowFormPropertyTO prop : getProperties()) {\n-            if (prop.isWritable()) {\n-                props.put(prop.getId(), prop.getValue());\n-            }\n-        }\n-\n-        return Collections.unmodifiableMap(props);\n-    }\n }"},{"sha":"38c895e1d0f251f9a67c0e1e6b9d055bae844183","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -626,7 +626,7 @@ public void setIntValues(\n                     if (groupableTO == null || group == null) {\n                         anyTO.getPlainAttrs().add(attrTO);\n                     } else {\n-                        MembershipTO membership = groupableTO.getMembershipMap().get(group.getKey());\n+                        MembershipTO membership = groupableTO.getMembership(group.getKey());\n                         if (membership == null) {\n                             membership = new MembershipTO.Builder().group(group.getKey(), group.getName()).build();\n                             groupableTO.getMemberships().add(membership);\n@@ -641,7 +641,7 @@ public void setIntValues(\n                     if (groupableTO == null || group == null) {\n                         anyTO.getDerAttrs().add(attrTO);\n                     } else {\n-                        MembershipTO membership = groupableTO.getMembershipMap().get(group.getKey());\n+                        MembershipTO membership = groupableTO.getMembership(group.getKey());\n                         if (membership == null) {\n                             membership = new MembershipTO.Builder().group(group.getKey(), group.getName()).build();\n                             groupableTO.getMemberships().add(membership);\n@@ -666,7 +666,7 @@ public void setIntValues(\n                     if (groupableTO == null || group == null) {\n                         anyTO.getVirAttrs().add(attrTO);\n                     } else {\n-                        MembershipTO membership = groupableTO.getMembershipMap().get(group.getKey());\n+                        MembershipTO membership = groupableTO.getMembership(group.getKey());\n                         if (membership == null) {\n                             membership = new MembershipTO.Builder().group(group.getKey(), group.getName()).build();\n                             groupableTO.getMemberships().add(membership);"},{"sha":"a2ba7e76ca319980f6e84f2a9120eb711ef525eb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":22,"deletions":24,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.RelationshipPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -374,30 +375,27 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n \n                         anyObject.add(membership);\n \n-                        for (AttrPatch patch : membPatch.getPlainAttrs()) {\n-                            if (patch.getAttrTO() != null) {\n-                                PlainSchema schema = getPlainSchema(patch.getAttrTO().getSchema());\n-                                if (schema == null) {\n-                                    LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n-                                            + \"{}, ignoring...\", patch.getAttrTO().getSchema());\n-                                } else {\n-                                    APlainAttr attr = anyObject.getPlainAttr(schema.getKey(), membership);\n-                                    if (attr == null) {\n-                                        LOG.debug(\"No plain attribute found for {} and membership of {}\",\n-                                                schema, membership.getRightEnd());\n-\n-                                        if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                                            attr = anyUtils.newPlainAttr();\n-                                            attr.setOwner(anyObject);\n-                                            attr.setMembership(membership);\n-                                            attr.setSchema(schema);\n-                                            anyObject.add(attr);\n-\n-                                            processAttrPatch(\n-                                                    anyObject, patch, schema, attr, anyUtils,\n-                                                    resources, propByRes, invalidValues);\n-                                        }\n-                                    }\n+                        for (AttrTO attrTO : membPatch.getPlainAttrs()) {\n+                            PlainSchema schema = getPlainSchema(attrTO.getSchema());\n+                            if (schema == null) {\n+                                LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n+                                        + \"{}, ignoring...\", attrTO.getSchema());\n+                            } else {\n+                                APlainAttr attr = anyObject.getPlainAttr(schema.getKey(), membership);\n+                                if (attr == null) {\n+                                    LOG.debug(\"No plain attribute found for {} and membership of {}\",\n+                                            schema, membership.getRightEnd());\n+\n+                                    attr = anyUtils.newPlainAttr();\n+                                    attr.setOwner(anyObject);\n+                                    attr.setMembership(membership);\n+                                    attr.setSchema(schema);\n+                                    anyObject.add(attr);\n+\n+                                    AttrPatch patch = new AttrPatch.Builder().attrTO(attrTO).build();\n+                                    processAttrPatch(\n+                                            anyObject, patch, schema, attr, anyUtils,\n+                                            resources, propByRes, invalidValues);\n                                 }\n                             }\n                         }"},{"sha":"38c411b6c931e56ce5e1769eb22b9f38f066d3b0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":22,"deletions":24,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.common.lib.patch.RelationshipPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -476,30 +477,27 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n \n                         user.add(membership);\n \n-                        for (AttrPatch patch : membPatch.getPlainAttrs()) {\n-                            if (patch.getAttrTO() != null) {\n-                                PlainSchema schema = getPlainSchema(patch.getAttrTO().getSchema());\n-                                if (schema == null) {\n-                                    LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n-                                            + \"{}, ignoring...\", patch.getAttrTO().getSchema());\n-                                } else {\n-                                    UPlainAttr attr = user.getPlainAttr(schema.getKey(), membership);\n-                                    if (attr == null) {\n-                                        LOG.debug(\"No plain attribute found for {} and membership of {}\",\n-                                                schema, membership.getRightEnd());\n-\n-                                        if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                                            attr = anyUtils.newPlainAttr();\n-                                            attr.setOwner(user);\n-                                            attr.setMembership(membership);\n-                                            attr.setSchema(schema);\n-                                            user.add(attr);\n-\n-                                            processAttrPatch(\n-                                                    user, patch, schema, attr, anyUtils,\n-                                                    resources, propByRes, invalidValues);\n-                                        }\n-                                    }\n+                        for (AttrTO attrTO : membPatch.getPlainAttrs()) {\n+                            PlainSchema schema = getPlainSchema(attrTO.getSchema());\n+                            if (schema == null) {\n+                                LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n+                                        + \"{}, ignoring...\", attrTO.getSchema());\n+                            } else {\n+                                UPlainAttr attr = user.getPlainAttr(schema.getKey(), membership);\n+                                if (attr == null) {\n+                                    LOG.debug(\"No plain attribute found for {} and membership of {}\",\n+                                            schema, membership.getRightEnd());\n+\n+                                    attr = anyUtils.newPlainAttr();\n+                                    attr.setOwner(user);\n+                                    attr.setMembership(membership);\n+                                    attr.setSchema(schema);\n+                                    user.add(attr);\n+\n+                                    AttrPatch patch = new AttrPatch.Builder().attrTO(attrTO).build();\n+                                    processAttrPatch(\n+                                            user, patch, schema, attr, anyUtils,\n+                                            resources, propByRes, invalidValues);\n                                 }\n                             }\n                         }"},{"sha":"d56f6510693290e0687e4f7a585197114beadc7e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java","status":"modified","additions":13,"deletions":22,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -18,17 +18,16 @@\n  */\n package org.apache.syncope.core.provisioning.java.utils;\n \n-import java.util.List;\n import java.util.Map;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -108,22 +107,18 @@ private void fill(final AnyTO anyTO, final AnyTO template) {\n         anyTO.getAuxClasses().addAll(template.getAuxClasses());\n     }\n \n-    private void fillRelationships(final Map<Pair<String, String>, RelationshipTO> anyRelMap,\n-            final List<RelationshipTO> anyRels, final List<RelationshipTO> templateRels) {\n-\n-        for (RelationshipTO memb : templateRels) {\n-            if (!anyRelMap.containsKey(Pair.of(memb.getRightType(), memb.getRightKey()))) {\n-                anyRels.add(memb);\n+    private void fillRelationships(final GroupableRelatableTO any, final GroupableRelatableTO template) {\n+        for (RelationshipTO relationship : template.getRelationships()) {\n+            if (any.getRelationship(relationship.getRightKey(), relationship.getRightKey()) == null) {\n+                any.getRelationships().add(relationship);\n             }\n         }\n     }\n \n-    private void fillMemberships(final Map<String, MembershipTO> anyMembMap,\n-            final List<MembershipTO> anyMembs, final List<MembershipTO> templateMembs) {\n-\n-        for (MembershipTO memb : templateMembs) {\n-            if (!anyMembMap.containsKey(memb.getRightKey())) {\n-                anyMembs.add(memb);\n+    private void fillMemberships(final GroupableRelatableTO any, final GroupableRelatableTO template) {\n+        for (MembershipTO membership : template.getMemberships()) {\n+            if (any.getMembership(membership.getGroupKey()) == null) {\n+                any.getMemberships().add(membership);\n             }\n         }\n     }\n@@ -135,10 +130,8 @@ public <T extends AnyTO> void apply(final T anyTO, final AnyTemplate anyTemplate\n             fill(anyTO, template);\n \n             if (template instanceof AnyObjectTO) {\n-                fillRelationships(((AnyObjectTO) anyTO).getRelationshipMap(),\n-                        ((AnyObjectTO) anyTO).getRelationships(), ((AnyObjectTO) template).getRelationships());\n-                fillMemberships(((AnyObjectTO) anyTO).getMembershipMap(),\n-                        ((AnyObjectTO) anyTO).getMemberships(), ((AnyObjectTO) template).getMemberships());\n+                fillRelationships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n+                fillMemberships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n             } else if (template instanceof UserTO) {\n                 if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n                     String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), anyTO, new MapContext());\n@@ -154,10 +147,8 @@ public <T extends AnyTO> void apply(final T anyTO, final AnyTemplate anyTemplate\n                     }\n                 }\n \n-                fillRelationships(((UserTO) anyTO).getRelationshipMap(),\n-                        ((UserTO) anyTO).getRelationships(), ((UserTO) template).getRelationships());\n-                fillMemberships(((UserTO) anyTO).getMembershipMap(),\n-                        ((UserTO) anyTO).getMemberships(), ((UserTO) template).getMemberships());\n+                fillRelationships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n+                fillMemberships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n             } else if (template instanceof GroupTO) {\n                 if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n                     String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), anyTO, new MapContext());"},{"sha":"8ce6d1be6c564d1b9f4166d7349bf72c4667c937","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -535,7 +535,7 @@ protected WorkflowFormTO getHistoricFormTO(\n             propertyTO.setId(prop.getPropertyId());\n             propertyTO.setName(prop.getPropertyId());\n             propertyTO.setValue(prop.getPropertyValue());\n-            formTO.addProperty(propertyTO);\n+            formTO.getProperties().add(propertyTO);\n         }\n \n         return formTO;\n@@ -574,7 +574,7 @@ protected WorkflowFormTO getFormTO(\n                 propertyTO.getEnumValues().putAll((Map<String, String>) fProp.getType().getInformation(\"values\"));\n             }\n \n-            formTO.addProperty(propertyTO);\n+            formTO.getProperties().add(propertyTO);\n         }\n \n         return formTO;\n@@ -712,6 +712,17 @@ public WorkflowFormTO claimForm(final String taskId) {\n         return getFormTO(task, checked.getValue());\n     }\n \n+    private Map<String, String> getPropertiesForSubmit(final WorkflowFormTO form) {\n+        Map<String, String> props = new HashMap<>();\n+        for (WorkflowFormPropertyTO prop : form.getProperties()) {\n+            if (prop.isWritable()) {\n+                props.put(prop.getId(), prop.getValue());\n+            }\n+        }\n+\n+        return Collections.unmodifiableMap(props);\n+    }\n+\n     @Override\n     public WorkflowResult<UserPatch> submitForm(final WorkflowFormTO form) {\n         String authUser = AuthContextUtils.getUsername();\n@@ -729,7 +740,7 @@ public WorkflowResult<UserPatch> submitForm(final WorkflowFormTO form) {\n \n         Set<String> preTasks = getPerformedTasks(user);\n         try {\n-            engine.getFormService().submitTaskFormData(form.getTaskId(), form.getPropertiesForSubmit());\n+            engine.getFormService().submitTaskFormData(form.getTaskId(), getPropertiesForSubmit(form));\n             engine.getRuntimeService().setVariable(user.getWorkflowId(), FORM_SUBMITTER, authUser);\n         } catch (ActivitiException e) {\n             throwException(e, \"While submitting form for task \" + form.getTaskId());"},{"sha":"a3251fe7fe4f63337ec9dfd2b4c60603caf0c7fa","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -92,7 +92,7 @@ public void createInvalidMembership() {\n         anyObjectTO.setRealm(\"/even/two\");\n \n         anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n-        assertTrue(anyObjectTO.getMembershipMap().containsKey(\"034740a9-fa10-453b-af37-dc7897e98fb1\"));\n+        assertNotNull(anyObjectTO.getMembership(\"034740a9-fa10-453b-af37-dc7897e98fb1\"));\n     }\n \n     @Test"},{"sha":"01df4f5a9f946d268830b6087f1dddc32ca273e9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -60,7 +60,6 @@\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n@@ -524,10 +523,7 @@ public void issueSYNCOPE434() {\n         // 3. approve user\n         WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getKey());\n         form = userWorkflowService.claimForm(form.getTaskId());\n-        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n-        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n-        form.getProperties().clear();\n-        form.getProperties().addAll(props.values());\n+        form.getProperty(\"approve\").setValue(Boolean.TRUE.toString());\n         userTO = userWorkflowService.submitForm(form);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());"},{"sha":"8b7b0f86da185cf8b5db87e92e93c7fbd08e2a46","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -187,8 +187,8 @@ public void selfRead() {\n         UserTO userTO = userService.read(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n         assertNotNull(userTO);\n \n-        assertTrue(userTO.getMembershipMap().containsKey(\"37d15e4c-cdc1-460b-a591-8505c8133806\"));\n-        assertFalse(userTO.getMembershipMap().containsKey(\"29f96485-729e-4d31-88a1-6fc60e4677f3\"));\n+        assertNotNull(userTO.getMembership(\"37d15e4c-cdc1-460b-a591-8505c8133806\"));\n+        assertNull(userTO.getMembership(\"29f96485-729e-4d31-88a1-6fc60e4677f3\"));\n \n         GroupService groupService2 = clientFactory.create(\"rossini\", ADMIN_PWD).getService(GroupService.class);\n "},{"sha":"3a9ee3644c728b979086d1c54ba359ba2e4a80ae","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/IdentityRecertificationITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FIdentityRecertificationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FIdentityRecertificationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FIdentityRecertificationITCase.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -39,7 +39,7 @@ public void recertification() {\n         assertFalse(forms.isEmpty());\r\n         for (WorkflowFormTO form : forms) {\r\n             userWorkflowService.claimForm(form.getTaskId());\r\n-            WorkflowFormPropertyTO approve = form.getPropertyMap().get(\"approve\");\r\n+            WorkflowFormPropertyTO approve = form.getProperty(\"approve\");\r\n             approve.setValue(\"true\");\r\n             userWorkflowService.submitForm(form);\r\n         }\r"},{"sha":"3c7f929da4819836337ec9efd0fe902b291da8a4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -113,7 +113,7 @@ public boolean evaluate(final AttrTO object) {\n \n             // 2. verify that 'aLong' is correctly populated for user's membership\n             assertEquals(1, user.getMemberships().size());\n-            membership = user.getMembershipMap().get(\"034740a9-fa10-453b-af37-dc7897e98fb1\");\n+            membership = user.getMembership(\"034740a9-fa10-453b-af37-dc7897e98fb1\");\n             assertNotNull(membership);\n             assertEquals(1, membership.getPlainAttr(\"aLong\").getValues().size());\n             assertEquals(\"1977\", membership.getPlainAttr(\"aLong\").getValues().get(0));\n@@ -130,10 +130,10 @@ public boolean evaluate(final AttrTO object) {\n                     attrTO(new AttrTO.Builder().schema(\"aLong\").value(\"1977\").build()).build());\n \n             MembershipPatch membershipPatch = new MembershipPatch.Builder().group(membership.getGroupKey()).build();\n-            membershipPatch.getPlainAttrs().add(new AttrPatch.Builder().\n-                    attrTO(new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build()).build());\n-            membershipPatch.getPlainAttrs().add(new AttrPatch.Builder().\n-                    attrTO(new AttrTO.Builder().schema(\"ctype\").value(\"membership type\").build()).build());\n+            membershipPatch.getPlainAttrs().add(\n+                    new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build());\n+            membershipPatch.getPlainAttrs().add(\n+                    new AttrTO.Builder().schema(\"ctype\").value(\"membership type\").build());\n             userPatch.getMemberships().add(membershipPatch);\n \n             user = updateUser(userPatch).getEntity();\n@@ -145,7 +145,7 @@ public boolean evaluate(final AttrTO object) {\n \n             // 5. verify that 'aLong' is correctly populated for user's membership\n             assertEquals(1, user.getMemberships().size());\n-            membership = user.getMembershipMap().get(\"034740a9-fa10-453b-af37-dc7897e98fb1\");\n+            membership = user.getMembership(\"034740a9-fa10-453b-af37-dc7897e98fb1\");\n             assertNotNull(membership);\n             assertEquals(1, membership.getPlainAttr(\"aLong\").getValues().size());\n             assertEquals(\"1976\", membership.getPlainAttr(\"aLong\").getValues().get(0));\n@@ -211,7 +211,7 @@ public void onGroupDelete() {\n \n         // verify that 'aLong' is correctly populated for user's membership\n         assertEquals(1, user.getMemberships().size());\n-        membership = user.getMembershipMap().get(groupTO.getKey());\n+        membership = user.getMembership(groupTO.getKey());\n         assertNotNull(membership);\n         assertEquals(1, membership.getPlainAttr(\"aLong\").getValues().size());\n         assertEquals(\"1454\", membership.getPlainAttr(\"aLong\").getValues().get(0));"},{"sha":"f1d1a22632c0bcf2de84ba7fd0b80d6a102f2408","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":0,"deletions":148,"changes":148,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -31,32 +31,16 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n-import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n-import org.apache.syncope.common.lib.to.MappingTO;\n-import org.apache.syncope.common.lib.to.NotificationTO;\n-import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n-import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n-import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n-import org.apache.syncope.common.rest.api.service.NotificationService;\n-import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -297,136 +281,4 @@ public void orgUnit() {\n         assertNotNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=even,o=isp\"));\n         assertNotNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=two,ou=even,o=isp\"));\n     }\n-\n-    @Test\n-    public void issueSYNCOPE598() {\n-        // create a new group schema\n-        PlainSchemaTO schemaTO = new PlainSchemaTO();\n-        schemaTO.setKey(\"LDAPGroupName\" + getUUIDString());\n-        schemaTO.setType(AttrSchemaType.String);\n-        schemaTO.setMandatoryCondition(\"true\");\n-\n-        schemaTO = createSchema(SchemaType.PLAIN, schemaTO);\n-        assertNotNull(schemaTO);\n-\n-        AnyTypeClassTO typeClass = new AnyTypeClassTO();\n-        typeClass.setKey(\"SYNCOPE-598\" + getUUIDString());\n-        typeClass.getPlainSchemas().add(schemaTO.getKey());\n-        anyTypeClassService.create(typeClass);\n-\n-        // create a new sample group\n-        GroupTO groupTO = new GroupTO();\n-        groupTO.setName(\"all\" + getUUIDString());\n-        groupTO.setRealm(\"/even\");\n-        groupTO.getAuxClasses().add(typeClass.getKey());\n-\n-        groupTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"all\"));\n-\n-        groupTO = createGroup(groupTO).getEntity();\n-        assertNotNull(groupTO);\n-\n-        String resourceName = \"resource-ldap-grouponly\";\n-        ResourceTO newResourceTO = null;\n-\n-        try {\n-            // Create resource ad-hoc\n-            ResourceTO resourceTO = new ResourceTO();\n-            resourceTO.setKey(resourceName);\n-            resourceTO.setConnector(\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\");\n-\n-            ProvisionTO provisionTO = new ProvisionTO();\n-            provisionTO.setAnyType(AnyTypeKind.GROUP.name());\n-            provisionTO.setObjectClass(ObjectClass.GROUP_NAME);\n-            provisionTO.getAuxClasses().add(typeClass.getKey());\n-            resourceTO.getProvisions().add(provisionTO);\n-\n-            MappingTO mapping = new MappingTO();\n-            provisionTO.setMapping(mapping);\n-\n-            MappingItemTO item = new MappingItemTO();\n-            item.setExtAttrName(\"cn\");\n-            item.setIntAttrName(schemaTO.getKey());\n-            item.setConnObjectKey(true);\n-            item.setPurpose(MappingPurpose.BOTH);\n-            mapping.setConnObjectKeyItem(item);\n-\n-            mapping.setConnObjectLink(\"'cn=' + \" + schemaTO.getKey() + \" + ',ou=groups,o=isp'\");\n-\n-            Response response = resourceService.create(resourceTO);\n-            newResourceTO = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n-            assertNotNull(newResourceTO);\n-            assertNull(newResourceTO.getProvision(AnyTypeKind.USER.name()));\n-            assertNotNull(newResourceTO.getProvision(AnyTypeKind.GROUP.name()).getMapping());\n-\n-            // create push task ad-hoc\n-            PushTaskTO task = new PushTaskTO();\n-            task.setName(\"issueSYNCOPE598\");\n-            task.setActive(true);\n-            task.setResource(resourceName);\n-            task.setPerformCreate(true);\n-            task.setPerformDelete(true);\n-            task.setPerformUpdate(true);\n-            task.setUnmatchingRule(UnmatchingRule.ASSIGN);\n-            task.setMatchingRule(MatchingRule.UPDATE);\n-            task.getFilters().put(AnyTypeKind.GROUP.name(),\n-                    SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(groupTO.getName()).query());\n-\n-            response = taskService.create(task);\n-            PushTaskTO push = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n-            assertNotNull(push);\n-\n-            // execute the new task\n-            ExecTO exec = execProvisioningTask(taskService, push.getKey(), 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(exec.getStatus()));\n-        } finally {\n-            groupService.delete(groupTO.getKey());\n-            if (newResourceTO != null) {\n-                resourceService.delete(resourceName);\n-            }\n-        }\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE648() {\n-        // 1. Create Push Task\n-        PushTaskTO task = new PushTaskTO();\n-        task.setName(\"Test create Push\");\n-        task.setActive(true);\n-        task.setResource(RESOURCE_NAME_LDAP);\n-        task.getFilters().put(AnyTypeKind.USER.name(),\n-                SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"_NO_ONE_\").query());\n-        task.getFilters().put(AnyTypeKind.GROUP.name(),\n-                SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"citizen\").query());\n-        task.setMatchingRule(MatchingRule.IGNORE);\n-        task.setUnmatchingRule(UnmatchingRule.IGNORE);\n-\n-        Response response = taskService.create(task);\n-        PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n-        assertNotNull(actual);\n-\n-        // 2. Create notification\n-        NotificationTO notification = new NotificationTO();\n-        notification.setTraceLevel(TraceLevel.FAILURES);\n-        notification.getEvents().add(\"[PushTask]:[group]:[resource-ldap]:[matchingrule_ignore]:[SUCCESS]\");\n-        notification.getEvents().add(\"[PushTask]:[group]:[resource-ldap]:[unmatchingrule_ignore]:[SUCCESS]\");\n-\n-        notification.getStaticRecipients().add(\"issueyncope648@syncope.apache.org\");\n-        notification.setSelfAsRecipient(false);\n-        notification.setRecipientAttrName(\"email\");\n-\n-        notification.setSender(\"syncope648@syncope.apache.org\");\n-        String subject = \"Test notification\";\n-        notification.setSubject(subject);\n-        notification.setTemplate(\"optin\");\n-        notification.setActive(true);\n-\n-        Response responseNotification = notificationService.create(notification);\n-        notification = getObject(responseNotification.getLocation(), NotificationService.class, NotificationTO.class);\n-        assertNotNull(notification);\n-\n-        execProvisioningTask(taskService, actual.getKey(), 50, false);\n-\n-        NotificationTaskTO taskTO = findNotificationTask(notification.getKey(), 50);\n-        assertNotNull(taskTO);\n-    }\n }"},{"sha":"95d648eb12a6a0034249995219df8e09208f6ce6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskIssuesITCase.java","status":"added","additions":185,"deletions":0,"changes":185,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskIssuesITCase.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.lib.to.NotificationTaskTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.junit.Test;\n+\n+public class PushTaskIssuesITCase extends AbstractTaskITCase {\n+\n+    @Test\n+    public void issueSYNCOPE598() {\n+        // create a new group schema\n+        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        schemaTO.setKey(\"LDAPGroupName\" + getUUIDString());\n+        schemaTO.setType(AttrSchemaType.String);\n+        schemaTO.setMandatoryCondition(\"true\");\n+\n+        schemaTO = createSchema(SchemaType.PLAIN, schemaTO);\n+        assertNotNull(schemaTO);\n+\n+        AnyTypeClassTO typeClass = new AnyTypeClassTO();\n+        typeClass.setKey(\"SYNCOPE-598\" + getUUIDString());\n+        typeClass.getPlainSchemas().add(schemaTO.getKey());\n+        anyTypeClassService.create(typeClass);\n+\n+        // create a new sample group\n+        GroupTO groupTO = new GroupTO();\n+        groupTO.setName(\"all\" + getUUIDString());\n+        groupTO.setRealm(\"/even\");\n+        groupTO.getAuxClasses().add(typeClass.getKey());\n+\n+        groupTO.getPlainAttrs().add(attrTO(schemaTO.getKey(), \"all\"));\n+\n+        groupTO = createGroup(groupTO).getEntity();\n+        assertNotNull(groupTO);\n+\n+        String resourceName = \"resource-ldap-grouponly\";\n+        ResourceTO newResourceTO = null;\n+\n+        try {\n+            // Create resource ad-hoc\n+            ResourceTO resourceTO = new ResourceTO();\n+            resourceTO.setKey(resourceName);\n+            resourceTO.setConnector(\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\");\n+\n+            ProvisionTO provisionTO = new ProvisionTO();\n+            provisionTO.setAnyType(AnyTypeKind.GROUP.name());\n+            provisionTO.setObjectClass(ObjectClass.GROUP_NAME);\n+            provisionTO.getAuxClasses().add(typeClass.getKey());\n+            resourceTO.getProvisions().add(provisionTO);\n+\n+            MappingTO mapping = new MappingTO();\n+            provisionTO.setMapping(mapping);\n+\n+            MappingItemTO item = new MappingItemTO();\n+            item.setExtAttrName(\"cn\");\n+            item.setIntAttrName(schemaTO.getKey());\n+            item.setConnObjectKey(true);\n+            item.setPurpose(MappingPurpose.BOTH);\n+            mapping.setConnObjectKeyItem(item);\n+\n+            mapping.setConnObjectLink(\"'cn=' + \" + schemaTO.getKey() + \" + ',ou=groups,o=isp'\");\n+\n+            Response response = resourceService.create(resourceTO);\n+            newResourceTO = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+            assertNotNull(newResourceTO);\n+            assertNull(newResourceTO.getProvision(AnyTypeKind.USER.name()));\n+            assertNotNull(newResourceTO.getProvision(AnyTypeKind.GROUP.name()).getMapping());\n+\n+            // create push task ad-hoc\n+            PushTaskTO task = new PushTaskTO();\n+            task.setName(\"issueSYNCOPE598\");\n+            task.setActive(true);\n+            task.setResource(resourceName);\n+            task.setPerformCreate(true);\n+            task.setPerformDelete(true);\n+            task.setPerformUpdate(true);\n+            task.setUnmatchingRule(UnmatchingRule.ASSIGN);\n+            task.setMatchingRule(MatchingRule.UPDATE);\n+            task.getFilters().put(AnyTypeKind.GROUP.name(),\n+                    SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(groupTO.getName()).query());\n+\n+            response = taskService.create(task);\n+            PushTaskTO push = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n+            assertNotNull(push);\n+\n+            // execute the new task\n+            ExecTO exec = execProvisioningTask(taskService, push.getKey(), 50, false);\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(exec.getStatus()));\n+        } finally {\n+            groupService.delete(groupTO.getKey());\n+            if (newResourceTO != null) {\n+                resourceService.delete(resourceName);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE648() {\n+        // 1. Create Push Task\n+        PushTaskTO task = new PushTaskTO();\n+        task.setName(\"Test create Push\");\n+        task.setActive(true);\n+        task.setResource(RESOURCE_NAME_LDAP);\n+        task.getFilters().put(AnyTypeKind.USER.name(),\n+                SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"_NO_ONE_\").query());\n+        task.getFilters().put(AnyTypeKind.GROUP.name(),\n+                SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"citizen\").query());\n+        task.setMatchingRule(MatchingRule.IGNORE);\n+        task.setUnmatchingRule(UnmatchingRule.IGNORE);\n+\n+        Response response = taskService.create(task);\n+        PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n+        assertNotNull(actual);\n+\n+        // 2. Create notification\n+        NotificationTO notification = new NotificationTO();\n+        notification.setTraceLevel(TraceLevel.FAILURES);\n+        notification.getEvents().add(\"[PushTask]:[group]:[resource-ldap]:[matchingrule_ignore]:[SUCCESS]\");\n+        notification.getEvents().add(\"[PushTask]:[group]:[resource-ldap]:[unmatchingrule_ignore]:[SUCCESS]\");\n+\n+        notification.getStaticRecipients().add(\"issueyncope648@syncope.apache.org\");\n+        notification.setSelfAsRecipient(false);\n+        notification.setRecipientAttrName(\"email\");\n+\n+        notification.setSender(\"syncope648@syncope.apache.org\");\n+        String subject = \"Test notification\";\n+        notification.setSubject(subject);\n+        notification.setTemplate(\"optin\");\n+        notification.setActive(true);\n+\n+        Response responseNotification = notificationService.create(notification);\n+        notification = getObject(responseNotification.getLocation(), NotificationService.class, NotificationTO.class);\n+        assertNotNull(notification);\n+\n+        execProvisioningTask(taskService, actual.getKey(), 50, false);\n+\n+        NotificationTaskTO taskTO = findNotificationTask(notification.getKey(), 50);\n+        assertNotNull(taskTO);\n+    }\n+}"},{"sha":"3ba48e85e04070985f0cf4f720b860f98016ac3c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":3,"deletions":28,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -39,7 +39,6 @@\n import org.apache.commons.collections4.MapUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.time.DateFormatUtils;\n-import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -90,8 +89,6 @@\n \n public class UserITCase extends AbstractITCase {\n \n-    private static final FastDateFormat DATE_FORMAT = DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT;\n-\n     private boolean getBooleanAttribute(final ConnObjectTO connObjectTO, final String attrName) {\n         return Boolean.parseBoolean(connObjectTO.getAttr(attrName).getValues().get(0));\n     }\n@@ -112,8 +109,9 @@ public static UserTO getSampleTO(final String email) {\n         userTO.getPlainAttrs().add(attrTO(\"ctype\", \"a type\"));\n         userTO.getPlainAttrs().add(attrTO(\"userId\", email));\n         userTO.getPlainAttrs().add(attrTO(\"email\", email));\n-        userTO.getPlainAttrs().add(attrTO(\"loginDate\", DATE_FORMAT.format(new Date())));\n-        userTO.getDerAttrs().add(attrTO(\"cn\", null));\n+        userTO.getPlainAttrs().add(\n+                attrTO(\"loginDate\", DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.format(new Date())));\n+\n         return userTO;\n     }\n \n@@ -444,18 +442,6 @@ public void deleteByUsername() {\n \n     @Test\n     public void list() {\n-        PagedResult<UserTO> users = userService.search(\n-                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n-        assertNotNull(users);\n-        assertFalse(users.getResult().isEmpty());\n-\n-        for (UserTO user : users.getResult()) {\n-            assertNotNull(user);\n-        }\n-    }\n-\n-    @Test\n-    public void paginatedList() {\n         PagedResult<UserTO> users = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).page(1).size(2).build());\n         assertNotNull(users);\n@@ -488,13 +474,6 @@ public void read() {\n         assertFalse(userTO.getPlainAttrs().isEmpty());\n     }\n \n-    @Test\n-    public void readWithMailAddressAsUserName() {\n-        UserTO userTO = createUser(getUniqueSampleTO(\"mail@domain.org\")).getEntity();\n-        userTO = userService.read(userTO.getKey());\n-        assertNotNull(userTO);\n-    }\n-\n     @Test\n     public void updateWithoutPassword() {\n         UserTO userTO = getUniqueSampleTO(\"updatewithout@password.com\");\n@@ -1000,10 +979,6 @@ public void mappingPurpose() {\n         UserTO userTO = getUniqueSampleTO(\"mpurpose@apache.org\");\n         userTO.getAuxClasses().add(\"csv\");\n \n-        AttrTO csvuserid = new AttrTO();\n-        csvuserid.setSchema(\"csvuserid\");\n-        userTO.getDerAttrs().add(csvuserid);\n-\n         userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n "},{"sha":"aba92efeab0f2ac448076bfa30aa21f6738ecf76","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -46,7 +46,6 @@\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -127,10 +126,7 @@ public void createAndApprove() {\n         // now approve and verify that propagation has happened\n         WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getKey());\n         form = userWorkflowService.claimForm(form.getTaskId());\n-        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n-        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n-        form.getProperties().clear();\n-        form.getProperties().addAll(props.values());\n+        form.getProperty(\"approve\").setValue(Boolean.TRUE.toString());\n         userTO = userWorkflowService.submitForm(form);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n@@ -228,10 +224,7 @@ public void updateWithApproval() {\n         // 3. approve self-update as admin\n         WorkflowFormTO form = userWorkflowService.getFormForUser(updated.getKey());\n         form = userWorkflowService.claimForm(form.getTaskId());\n-        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n-        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n-        form.getProperties().clear();\n-        form.getProperties().addAll(props.values());\n+        form.getProperty(\"approve\").setValue(Boolean.TRUE.toString());\n         updated = userWorkflowService.submitForm(form);\n         assertNotNull(updated);\n         assertEquals(\"active\", updated.getStatus());"},{"sha":"e21929ea408ff4631061abfc732ce701a050d76c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserWorkflowITCase.java","status":"modified","additions":4,"deletions":15,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/653b88a7251692cc63060444b71ff300c41d83d9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserWorkflowITCase.java?ref=653b88a7251692cc63060444b71ff300c41d83d9","patch":"@@ -29,7 +29,6 @@\n \n import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n import javax.sql.DataSource;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -41,7 +40,6 @@\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n@@ -120,11 +118,8 @@ public void createWithReject() {\n         assertNotNull(form.getOwner());\n \n         // 5. reject user\n-        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n-        props.get(\"approve\").setValue(Boolean.FALSE.toString());\n-        props.get(\"rejectReason\").setValue(\"I don't like him.\");\n-        form.getProperties().clear();\n-        form.getProperties().addAll(props.values());\n+        form.getProperty(\"approve\").setValue(Boolean.FALSE.toString());\n+        form.getProperty(\"rejectReason\").setValue(\"I don't like him.\");\n         userTO = userService3.submitForm(form);\n         assertNotNull(userTO);\n         assertEquals(\"rejected\", userTO.getStatus());\n@@ -196,10 +191,7 @@ public void createWithApproval() {\n         assertNotNull(form.getOwner());\n \n         // 5. approve user (and verify that propagation occurred)\n-        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n-        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n-        form.getProperties().clear();\n-        form.getProperties().addAll(props.values());\n+        form.getProperty(\"approve\").setValue(Boolean.TRUE.toString());\n         userTO = userWorkflowService.submitForm(form);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n@@ -300,10 +292,7 @@ public void issueSYNCOPE15() {\n         assertNotNull(form);\n \n         // 5. approve user\n-        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n-        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n-        form.getProperties().clear();\n-        form.getProperties().addAll(props.values());\n+        form.getProperty(\"approve\").setValue(Boolean.TRUE.toString());\n \n         // 6. submit approve\n         userTO = userWorkflowService.submitForm(form);"}]}