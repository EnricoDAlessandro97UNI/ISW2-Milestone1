{"sha":"b1d11bd9f1e7a9e8a5f836376879e22cec07fae0","node_id":"C_kwDOJfYA1toAKGIxZDExYmQ5ZjFlN2E5ZThhNWY4MzYzNzY4NzllMjJjZWMwN2ZhZTA","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-01-27T15:07:56Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-01-27T15:07:56Z"},"message":"[SYNCOPE-1660] Using SyncopeAuthenticationDetailsSource with AnonymousAuthenticationFilter","tree":{"sha":"1a4446613b5035365d10fa285f1c2bd4fbf04f60","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1a4446613b5035365d10fa285f1c2bd4fbf04f60"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b1d11bd9f1e7a9e8a5f836376879e22cec07fae0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b1d11bd9f1e7a9e8a5f836376879e22cec07fae0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b1d11bd9f1e7a9e8a5f836376879e22cec07fae0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b1d11bd9f1e7a9e8a5f836376879e22cec07fae0/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3e694ca3a2764001f64a43660ee408d08d55bf3c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3e694ca3a2764001f64a43660ee408d08d55bf3c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3e694ca3a2764001f64a43660ee408d08d55bf3c"}],"stats":{"total":69,"additions":43,"deletions":26},"files":[{"sha":"6117375848b754edd170514958e5696d557f220a","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/WebSecurityContext.java","status":"modified","additions":43,"deletions":26,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b1d11bd9f1e7a9e8a5f836376879e22cec07fae0/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b1d11bd9f1e7a9e8a5f836376879e22cec07fae0/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java?ref=b1d11bd9f1e7a9e8a5f836376879e22cec07fae0","patch":"@@ -37,16 +37,19 @@\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.authentication.AnonymousAuthenticationProvider;\n import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.builders.WebSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n import org.springframework.security.config.http.SessionCreationPolicy;\n+import org.springframework.security.core.authority.AuthorityUtils;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.web.access.AccessDeniedHandler;\n import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;\n+import org.springframework.security.web.authentication.AnonymousAuthenticationFilter;\n import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;\n import org.springframework.security.web.context.NullSecurityContextRepository;\n import org.springframework.security.web.firewall.DefaultHttpFirewall;\n@@ -57,6 +60,8 @@\n @Configuration(proxyBeanMethods = false)\n public class WebSecurityContext {\n \n+    private static final String ANONYMOUS_BEAN_KEY = \"doesNotMatter\";\n+\n     public WebSecurityContext() {\n         SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_INHERITABLETHREADLOCAL);\n     }\n@@ -70,51 +75,63 @@ public HttpFirewall allowUrlEncodedSlashHttpFirewall() {\n \n     @Bean\n     public WebSecurityConfigurerAdapter webSecurityConfigurerAdapter(\n-        final ApplicationContext ctx,\n-        final SecurityProperties securityProperties,\n-        final HttpFirewall allowUrlEncodedSlashHttpFirewall) {\n+            final ApplicationContext ctx,\n+            final SecurityProperties securityProperties,\n+            final HttpFirewall allowUrlEncodedSlashHttpFirewall) {\n+\n         return new WebSecurityConfigurerAdapter(true) {\n+\n             @Override\n             public void configure(final WebSecurity web) {\n                 web.httpFirewall(allowUrlEncodedSlashHttpFirewall);\n             }\n \n             @Override\n             protected void configure(final HttpSecurity http) throws Exception {\n+                SyncopeAuthenticationDetailsSource authenticationDetailsSource =\n+                        new SyncopeAuthenticationDetailsSource();\n+\n+                AnonymousAuthenticationProvider anonymousAuthenticationProvider =\n+                        new AnonymousAuthenticationProvider(ANONYMOUS_BEAN_KEY);\n+                AnonymousAuthenticationFilter anonymousAuthenticationFilter =\n+                        new AnonymousAuthenticationFilter(\n+                                ANONYMOUS_BEAN_KEY,\n+                                securityProperties.getAnonymousUser(),\n+                                AuthorityUtils.createAuthorityList(\"ROLE_ANONYMOUS\"));\n+                anonymousAuthenticationFilter.setAuthenticationDetailsSource(authenticationDetailsSource);\n+\n                 SyncopeBasicAuthenticationEntryPoint basicAuthenticationEntryPoint =\n-                    new SyncopeBasicAuthenticationEntryPoint();\n+                        new SyncopeBasicAuthenticationEntryPoint();\n                 basicAuthenticationEntryPoint.setRealmName(\"Apache Syncope authentication\");\n \n-                SyncopeAuthenticationDetailsSource authenticationDetailsSource =\n-                    new SyncopeAuthenticationDetailsSource();\n-\n                 JWTAuthenticationFilter jwtAuthenticationFilter = new JWTAuthenticationFilter(\n-                    authenticationManager(),\n-                    basicAuthenticationEntryPoint,\n-                    authenticationDetailsSource,\n-                    ctx.getBean(AuthDataAccessor.class),\n-                    ctx.getBean(DefaultCredentialChecker.class));\n+                        authenticationManager(),\n+                        basicAuthenticationEntryPoint,\n+                        authenticationDetailsSource,\n+                        ctx.getBean(AuthDataAccessor.class),\n+                        ctx.getBean(DefaultCredentialChecker.class));\n \n                 http.authorizeRequests().\n-                    antMatchers(\"/**\").permitAll().and().\n-                    sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().\n-                    securityContext().securityContextRepository(new NullSecurityContextRepository()).and().\n-                    anonymous().principal(securityProperties.getAnonymousUser()).and().\n-                    httpBasic().authenticationEntryPoint(basicAuthenticationEntryPoint).\n-                    authenticationDetailsSource(authenticationDetailsSource).and().\n-                    exceptionHandling().accessDeniedHandler(accessDeniedHandler()).and().\n-                    addFilterBefore(jwtAuthenticationFilter, BasicAuthenticationFilter.class).\n-                    addFilterBefore(new MustChangePasswordFilter(), FilterSecurityInterceptor.class).\n-                    headers().disable().\n-                    csrf().disable();\n+                        antMatchers(\"/**\").permitAll().and().\n+                        sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().\n+                        securityContext().securityContextRepository(new NullSecurityContextRepository()).and().\n+                        anonymous().\n+                        authenticationProvider(anonymousAuthenticationProvider).\n+                        authenticationFilter(anonymousAuthenticationFilter).and().\n+                        httpBasic().authenticationEntryPoint(basicAuthenticationEntryPoint).\n+                        authenticationDetailsSource(authenticationDetailsSource).and().\n+                        exceptionHandling().accessDeniedHandler(accessDeniedHandler()).and().\n+                        addFilterBefore(jwtAuthenticationFilter, BasicAuthenticationFilter.class).\n+                        addFilterBefore(new MustChangePasswordFilter(), FilterSecurityInterceptor.class).\n+                        headers().disable().\n+                        csrf().disable();\n             }\n \n-\n             @Override\n             protected void configure(final AuthenticationManagerBuilder builder) throws Exception {\n                 builder.\n-                    authenticationProvider(ctx.getBean(UsernamePasswordAuthenticationProvider.class)).\n-                    authenticationProvider(ctx.getBean(JWTAuthenticationProvider.class));\n+                        authenticationProvider(ctx.getBean(UsernamePasswordAuthenticationProvider.class)).\n+                        authenticationProvider(ctx.getBean(JWTAuthenticationProvider.class));\n             }\n         };\n     }"}]}