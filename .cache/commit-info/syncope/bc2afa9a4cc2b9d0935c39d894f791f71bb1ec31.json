{"sha":"bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJjMmFmYTlhNGNjMmI5ZDA5MzVjMzlkODk0Zjc5MWY3MWJiMWVjMzE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-23T08:02:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-23T15:06:17Z"},"message":"[SYNCOPE-661] No more overloaded list / search REST methods + helpers provided for Java client invocation","tree":{"sha":"aeb71ee1e4ed333cd7998ec697fc103060423351","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/aeb71ee1e4ed333cd7998ec697fc103060423351"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"39f8a0696c465a5d170c4f37a36ea093743a60d1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/39f8a0696c465a5d170c4f37a36ea093743a60d1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/39f8a0696c465a5d170c4f37a36ea093743a60d1"}],"stats":{"total":1457,"additions":711,"deletions":746},"files":[{"sha":"c2ed1fa5c6c871067198811ef9941b72b4835b00","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ReportCommand.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -28,6 +28,7 @@\n import javax.xml.transform.TransformerException;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.cli.util.XmlUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n@@ -97,7 +98,7 @@ public void execute() {\n         } else if (list) {\n             LOG.debug(\"- report list command\");\n             try {\n-                for (final ReportTO reportTO : reportService.list().getResult()) {\n+                for (ReportTO reportTO : reportService.list(SyncopeClient.getListQueryBuilder().build()).getResult()) {\n                     System.out.println(reportTO);\n                 }\n             } catch (final SyncopeClientException ex) {"},{"sha":"8b11b358bf32c847fffb9cb0206cea731d1a5098","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractSubjectRestClient.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractSubjectRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractSubjectRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractSubjectRestClient.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -36,12 +37,12 @@ public abstract List<? extends AbstractAttributableTO> list(\n \n     public abstract int searchCount(String realm, String fiql);\n \n-    public abstract List<? extends AbstractAttributableTO> search(\n-            String realm, String fiql,            int page, int size, final SortParam<String> sort);\n+    public abstract List<? extends AbstractSubjectTO> search(\n+            String realm, String fiql, int page, int size, final SortParam<String> sort);\n \n     public abstract ConnObjectTO getConnectorObject(String resourceName, Long key);\n \n-    public abstract AbstractAttributableTO delete(String etag, Long key);\n+    public abstract AbstractSubjectTO delete(String etag, Long key);\n \n     public abstract BulkActionResult bulkAction(BulkAction action);\n }"},{"sha":"64138bb3c1349732c0345dcde1ca4353a34b5f98","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import java.util.Collections;\n import java.util.List;\n \n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.commons.status.StatusUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -49,30 +49,34 @@ public class GroupRestClient extends AbstractSubjectRestClient {\n \n     @Override\n     public int count(final String realm) {\n-        return getService(GroupService.class).list(Collections.singletonList(realm), 1, 1).getTotalCount();\n-    }\n-\n-    public List<GroupTO> list(final String realm) {\n-        return getService(GroupService.class).list(Collections.singletonList(realm), 1, 1000).getResult();\n+        return getService(GroupService.class).\n+                list(SyncopeClient.getSubjectListQueryBuilder().realm(realm).page(1).size(1).build()).\n+                getTotalCount();\n     }\n \n     @Override\n     public List<GroupTO> list(final String realm, final int page, final int size, final SortParam<String> sort) {\n         return getService(GroupService.class).\n-                list(Collections.singletonList(realm), page, size, toOrderBy(sort)).getResult();\n+                list(SyncopeClient.getSubjectListQueryBuilder().realm(realm).page(page).size(size).\n+                        orderBy(toOrderBy(sort)).build()).\n+                getResult();\n     }\n \n     @Override\n     public int searchCount(final String realm, final String fiql) {\n-        return getService(GroupService.class).search(Collections.singletonList(realm), fiql, 1, 1).getTotalCount();\n+        return getService(GroupService.class).\n+                search(SyncopeClient.getSubjectSearchQueryBuilder().realm(realm).fiql(fiql).page(1).size(1).build()).\n+                getTotalCount();\n     }\n \n     @Override\n     public List<GroupTO> search(\n             final String realm, final String fiql, final int page, final int size, final SortParam<String> sort) {\n \n         return getService(GroupService.class).\n-                search(Collections.singletonList(realm), fiql, page, size, toOrderBy(sort)).getResult();\n+                search(SyncopeClient.getSubjectSearchQueryBuilder().realm(realm).fiql(fiql).page(page).size(size).\n+                        orderBy(toOrderBy(sort)).build()).\n+                getResult();\n     }\n \n     @Override"},{"sha":"617a2c71c4afc06c16f94fb3e858d4dd5548cdf2","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n@@ -54,15 +55,21 @@ public ReportTO read(final Long reportId) {\n     }\n \n     public List<ReportTO> list() {\n-        return getService(ReportService.class).list().getResult();\n+        return getService(ReportService.class).\n+                list(SyncopeClient.getListQueryBuilder().build()).\n+                getResult();\n     }\n \n     public List<ReportTO> list(final int page, final int size, final SortParam<String> sort) {\n-        return getService(ReportService.class).list(page, size, toOrderBy(sort)).getResult();\n+        return getService(ReportService.class).\n+                list(SyncopeClient.getListQueryBuilder().page(page).size(size).orderBy(toOrderBy(sort)).build()).\n+                getResult();\n     }\n \n     public int count() {\n-        return getService(ReportService.class).list(1, 1).getTotalCount();\n+        return getService(ReportService.class).\n+                list(SyncopeClient.getListQueryBuilder().page(1).size(1).build()).\n+                getTotalCount();\n     }\n \n     public void create(final ReportTO reportTO) {"},{"sha":"cea466e6ae26cf45e85c0e1e24f8c720cfb3674a","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -60,14 +61,18 @@ public List<String> getPushActionsClasses() {\n      * @return number of stored tasks.\n      */\n     public int count(final String kind) {\n-        return getService(TaskService.class).list(TaskType.fromString(kind), 1, 1).getTotalCount();\n+        return getService(TaskService.class).\n+                list(TaskType.fromString(kind), SyncopeClient.getListQueryBuilder().page(1).size(1).build()).\n+                getTotalCount();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractTaskTO> List<T> list(final Class<T> reference,\n             final int page, final int size, final SortParam<String> sort) {\n \n-        return (List<T>) getService(TaskService.class).list(getTaskType(reference), page, size, toOrderBy(sort)).\n+        return (List<T>) getService(TaskService.class).\n+                list(getTaskType(reference), SyncopeClient.getListQueryBuilder().page(page).size(size).\n+                        orderBy(toOrderBy(sort)).build()).\n                 getResult();\n     }\n "},{"sha":"a39df68a9acea6a936a89546a33be22f94e0b6db","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import java.util.Collections;\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.commons.status.StatusUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n@@ -51,13 +51,17 @@ public class UserRestClient extends AbstractSubjectRestClient {\n \n     @Override\n     public int count(final String realm) {\n-        return getService(UserService.class).list(Collections.singletonList(realm), 1, 1).getTotalCount();\n+        return getService(UserService.class).\n+                list(SyncopeClient.getSubjectListQueryBuilder().realm(realm).page(1).size(1).build()).\n+                getTotalCount();\n     }\n \n     @Override\n     public List<UserTO> list(final String realm, final int page, final int size, final SortParam<String> sort) {\n         return getService(UserService.class).\n-                list(Collections.singletonList(realm), page, size, toOrderBy(sort)).getResult();\n+                list(SyncopeClient.getSubjectListQueryBuilder().realm(realm).page(page).size(size).\n+                        orderBy(toOrderBy(sort)).build()).\n+                getResult();\n     }\n \n     public UserTO create(final UserTO userTO, final boolean storePassword) {\n@@ -98,15 +102,19 @@ public UserTO read(final Long id) {\n \n     @Override\n     public int searchCount(final String realm, final String fiql) {\n-        return getService(UserService.class).search(Collections.singletonList(realm), fiql, 1, 1).getTotalCount();\n+        return getService(UserService.class).\n+                search(SyncopeClient.getSubjectSearchQueryBuilder().realm(realm).fiql(fiql).page(1).size(1).build()).\n+                getTotalCount();\n     }\n \n     @Override\n     public List<UserTO> search(\n             final String realm, final String fiql, final int page, final int size, final SortParam<String> sort) {\n-        \n+\n         return getService(UserService.class).\n-                search(Collections.singletonList(realm), fiql, page, size, toOrderBy(sort)).getResult();\n+                search(SyncopeClient.getSubjectSearchQueryBuilder().realm(realm).fiql(fiql).page(page).size(size).\n+                        orderBy(toOrderBy(sort)).build()).\n+                getResult();\n     }\n \n     @Override"},{"sha":"1bfbb4f70a69f014f39984fcae34be8956bff555","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":59,"deletions":25,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -30,6 +30,9 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.lib.builders.ListQueryBuilder;\n+import org.apache.syncope.client.lib.builders.SubjectListQueryBuilder;\n+import org.apache.syncope.client.lib.builders.SubjectSearchQueryBuilder;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n@@ -68,32 +71,63 @@ public SyncopeClient(\n     }\n \n     /**\n-     * Returns a new instance of <tt>UserFiqlSearchConditionBuilder</tt>, for assisted building of FIQL queries.\n+     * Returns a new instance of {@link UserFiqlSearchConditionBuilder}, for assisted building of FIQL queries.\n      *\n-     * @return default instance of <tt>UserFiqlSearchConditionBuilder</tt>\n+     * @return default instance of {@link UserFiqlSearchConditionBuilder}\n      */\n     public static UserFiqlSearchConditionBuilder getUserSearchConditionBuilder() {\n         return new UserFiqlSearchConditionBuilder();\n     }\n \n     /**\n-     * Returns a new instance of <tt>GroupFiqlSearchConditionBuilder</tt>, for assisted building of FIQL queries.\n+     * Returns a new instance of {@link GroupFiqlSearchConditionBuilder}, for assisted building of FIQL queries.\n      *\n-     * @return default instance of <tt>GroupFiqlSearchConditionBuilder</tt>\n+     * @return default instance of {@link GroupFiqlSearchConditionBuilder}\n      */\n     public static GroupFiqlSearchConditionBuilder getGroupSearchConditionBuilder() {\n         return new GroupFiqlSearchConditionBuilder();\n     }\n \n     /**\n-     * Returns a new instance of <tt>OrderByClauseBuilder</tt>, for assisted building of <tt>orderby</tt> clauses.\n+     * Returns a new instance of {@link OrderByClauseBuilder}, for assisted building of {@link orderby} clauses.\n      *\n-     * @return default instance of <tt>OrderByClauseBuilder</tt>\n+     * @return default instance of {@link OrderByClauseBuilder}\n      */\n     public static OrderByClauseBuilder getOrderByClauseBuilder() {\n         return new OrderByClauseBuilder();\n     }\n \n+    /**\n+     * Returns a new instance of {@link ListQueryBuilder}, for assisted building of some service's {@code list()}\n+     * arguments.\n+     *\n+     * @return default instance of {@link ListQueryBuilder}\n+     */\n+    public static ListQueryBuilder getListQueryBuilder() {\n+        return new ListQueryBuilder();\n+    }\n+\n+    /**\n+     * Returns a new instance of {@link SubjectListQueryBuilder}, for assisted building of some service's {@code list()}\n+     * arguments.\n+     *\n+     * @return default instance of {@link SubjectListQueryBuilder}\n+     */\n+    public static SubjectListQueryBuilder getSubjectListQueryBuilder() {\n+        return new SubjectListQueryBuilder();\n+    }\n+\n+    /**\n+     * Returns a new instance of {@link SubjectSearchQueryBuilder}, for assisted building of some service's\n+     * {@code search()}\n+     * arguments.\n+     *\n+     * @return default instance of {@link SubjectSearchQueryBuilder}\n+     */\n+    public static SubjectSearchQueryBuilder getSubjectSearchQueryBuilder() {\n+        return new SubjectSearchQueryBuilder();\n+    }\n+\n     /**\n      * Creates an instance of the given service class, with configured content type and authentication.\n      *\n@@ -162,97 +196,97 @@ public <T> T header(final Class<T> serviceClass, final String key, final Object.\n     }\n \n     /**\n-     * Sets the <tt>Prefer</tt> header on the give service instance.\n+     * Sets the {@code Prefer} header on the give service instance.\n      *\n      * @param <T> any service class\n      * @param service service class instance\n-     * @param preference preference to be set via <tt>Prefer</tt> header\n-     * @return given service instance, with <tt>Prefer</tt> header set\n+     * @param preference preference to be set via {@code Prefer} header\n+     * @return given service instance, with {@code Prefer} header set\n      */\n     public <T> T prefer(final T service, final Preference preference) {\n         return header(service, RESTHeaders.PREFER, preference.toString());\n     }\n \n     /**\n-     * Creates an instance of the given service class, with <tt>Prefer</tt> header set.\n+     * Creates an instance of the given service class, with {@code Prefer} header set.\n      *\n      * @param <T> any service class\n      * @param serviceClass service class reference\n-     * @param preference preference to be set via <tt>Prefer</tt> header\n-     * @return service instance of the given reference class, with <tt>Prefer</tt> header set\n+     * @param preference preference to be set via {@code Prefer} header\n+     * @return service instance of the given reference class, with {@code Prefer} header set\n      */\n     public <T> T prefer(final Class<T> serviceClass, final Preference preference) {\n         return header(serviceClass, RESTHeaders.PREFER, preference.toString());\n     }\n \n     /**\n-     * Sets the <tt>If-Match</tt> or <tt>If-None-Match</tt> header on the given service instance.\n+     * Sets the {@code If-Match} or {@code If-None-Match} header on the given service instance.\n      *\n      * @param <T> any service class\n      * @param service service class instance\n      * @param etag ETag value\n-     * @param ifNot if true then <tt>If-None-Match</tt> is set, <tt>If-Match</tt> otherwise\n-     * @return given service instance, with <tt>If-Match</tt> or <tt>If-None-Match</tt> set\n+     * @param ifNot if true then {@code If-None-Match} is set, {@code If-Match} otherwise\n+     * @return given service instance, with {@code If-Match} or {@code If-None-Match} set\n      */\n     private <T> T match(final T service, final EntityTag etag, final boolean ifNot) {\n         WebClient.client(service).match(etag, ifNot);\n         return service;\n     }\n \n     /**\n-     * Sets the <tt>If-Match</tt> header on the given service instance.\n+     * Sets the {@code If-Match} header on the given service instance.\n      *\n      * @param <T> any service class\n      * @param service service class instance\n      * @param etag ETag value\n-     * @return given service instance, with <tt>If-Match</tt> set\n+     * @return given service instance, with {@code If-Match} set\n      */\n     public <T> T ifMatch(final T service, final EntityTag etag) {\n         return match(service, etag, false);\n     }\n \n     /**\n-     * Creates an instance of the given service class, with <tt>If-Match</tt> header set.\n+     * Creates an instance of the given service class, with {@code If-Match} header set.\n      *\n      * @param <T> any service class\n      * @param serviceClass service class reference\n      * @param etag ETag value\n-     * @return given service instance, with <tt>If-Match</tt> set\n+     * @return given service instance, with {@code If-Match} set\n      */\n     public <T> T ifMatch(final Class<T> serviceClass, final EntityTag etag) {\n         return match(getService(serviceClass), etag, false);\n     }\n \n     /**\n-     * Sets the <tt>If-None-Match</tt> header on the given service instance.\n+     * Sets the {@code If-None-Match} header on the given service instance.\n      *\n      * @param <T> any service class\n      * @param service service class instance\n      * @param etag ETag value\n-     * @return given service instance, with <tt>If-None-Match</tt> set\n+     * @return given service instance, with {@code If-None-Match} set\n      */\n     public <T> T ifNoneMatch(final T service, final EntityTag etag) {\n         return match(service, etag, true);\n     }\n \n     /**\n-     * Creates an instance of the given service class, with <tt>If-None-Match</tt> header set.\n+     * Creates an instance of the given service class, with {@code If-None-Match} header set.\n      *\n      * @param <T> any service class\n      * @param serviceClass service class reference\n      * @param etag ETag value\n-     * @return given service instance, with <tt>If-None-Match</tt> set\n+     * @return given service instance, with {@code If-None-Match} set\n      */\n     public <T> T ifNoneMatch(final Class<T> serviceClass, final EntityTag etag) {\n         return match(getService(serviceClass), etag, true);\n     }\n \n     /**\n-     * Fetches <tt>ETag</tt> header value from latest service run (if available).\n+     * Fetches {@code ETag} header value from latest service run (if available).\n      *\n      * @param <T> any service class\n      * @param service service class instance\n-     * @return <tt>ETag</tt> header value from latest service run (if available)\n+     * @return {@code ETag} header value from latest service run (if available)\n      */\n     public <T> EntityTag getLatestEntityTag(final T service) {\n         return WebClient.client(service).getResponse().getEntityTag();"},{"sha":"5d6202a1ce5695b50947f472f9ad2968d811ae5d","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/ListQueryBuilder.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FListQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FListQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FListQueryBuilder.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib.builders;\n+\n+import org.apache.syncope.common.rest.api.beans.ListQuery;\n+\n+public class ListQueryBuilder {\n+\n+    private final ListQuery instance = new ListQuery();\n+\n+    public ListQueryBuilder page(final Integer page) {\n+        instance.setPage(page);\n+\n+        return this;\n+    }\n+\n+    public ListQueryBuilder size(final Integer size) {\n+        instance.setSize(size);\n+\n+        return this;\n+    }\n+\n+    public ListQueryBuilder orderBy(final String orderBy) {\n+        instance.setOrderBy(orderBy);\n+\n+        return this;\n+    }\n+\n+    public ListQuery build() {\n+        return instance;\n+    }\n+}"},{"sha":"6aec945708f12c294c15778887182c10e596181c","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/SubjectListQueryBuilder.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FSubjectListQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FSubjectListQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FSubjectListQueryBuilder.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib.builders;\n+\n+import java.util.ArrayList;\n+import org.apache.syncope.common.rest.api.beans.ListQuery;\n+import org.apache.syncope.common.rest.api.beans.SubjectListQuery;\n+\n+public class SubjectListQueryBuilder extends ListQueryBuilder {\n+\n+    private final SubjectListQuery instance = new SubjectListQuery();\n+\n+    @Override\n+    public SubjectListQueryBuilder page(final Integer page) {\n+        return SubjectListQueryBuilder.class.cast(super.page(page));\n+    }\n+\n+    @Override\n+    public SubjectListQueryBuilder size(final Integer size) {\n+        return SubjectListQueryBuilder.class.cast(super.size(size));\n+    }\n+\n+    @Override\n+    public SubjectListQueryBuilder orderBy(final String orderBy) {\n+        return SubjectListQueryBuilder.class.cast(super.orderBy(orderBy));\n+    }\n+\n+    public SubjectListQueryBuilder realm(final String realm) {\n+        if (instance.getRealms() == null) {\n+            instance.setRealms(new ArrayList<String>());\n+        }\n+\n+        return this;\n+    }\n+\n+    @Override\n+    public SubjectListQuery build() {\n+        ListQuery lq = super.build();\n+        instance.setPage(lq.getPage());\n+        instance.setSize(lq.getSize());\n+        instance.setOrderBy(lq.getOrderBy());\n+\n+        return instance;\n+    }\n+}"},{"sha":"b74860e06aad980742e3f0acdc1b6d544b04526a","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/builders/SubjectSearchQueryBuilder.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FSubjectSearchQueryBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FSubjectSearchQueryBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbuilders%2FSubjectSearchQueryBuilder.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib.builders;\n+\n+import org.apache.syncope.common.rest.api.beans.SubjectListQuery;\n+import org.apache.syncope.common.rest.api.beans.SubjectSearchQuery;\n+\n+public class SubjectSearchQueryBuilder extends SubjectListQueryBuilder {\n+\n+    private final SubjectSearchQuery instance = new SubjectSearchQuery();\n+\n+    @Override\n+    public SubjectSearchQueryBuilder realm(final String realm) {\n+        return SubjectSearchQueryBuilder.class.cast(super.realm(realm));\n+    }\n+\n+    @Override\n+    public SubjectSearchQueryBuilder page(final Integer page) {\n+        return SubjectSearchQueryBuilder.class.cast(super.page(page));\n+    }\n+\n+    @Override\n+    public SubjectSearchQueryBuilder size(final Integer size) {\n+        return SubjectSearchQueryBuilder.class.cast(super.size(size));\n+    }\n+\n+    @Override\n+    public SubjectSearchQueryBuilder orderBy(final String orderBy) {\n+        return SubjectSearchQueryBuilder.class.cast(super.orderBy(orderBy));\n+    }\n+\n+    public SubjectSearchQueryBuilder fiql(final String fiql) {\n+        instance.setFiql(fiql);\n+\n+        return this;\n+    }\n+\n+    @Override\n+    public SubjectSearchQuery build() {\n+        SubjectListQuery slq = super.build();\n+        instance.setRealms(slq.getRealms());\n+        instance.setPage(slq.getPage());\n+        instance.setSize(slq.getSize());\n+        instance.setOrderBy(slq.getOrderBy());\n+\n+        return instance;\n+    }\n+}"},{"sha":"b17db6d5ff99bd69946e3013b64f9e0c6da6967f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PagedResult.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPagedResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPagedResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPagedResult.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -39,7 +39,7 @@\n \n     private URI next;\n \n-    private final List<T> result = new ArrayList<T>();\n+    private final List<T> result = new ArrayList<>();\n \n     private int page;\n "},{"sha":"a448c031f9e78a87a1f0230d96da52a901320f8d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/Preference.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPreference.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPreference.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPreference.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -30,7 +30,7 @@ public enum Preference {\n     RETURN_CONTENT(\"return-content\"),\n     RETURN_NO_CONTENT(\"return-no-content\");\n \n-    private String literal;\n+    private final String literal;\n \n     private Preference(final String literal) {\n         this.literal = literal;"},{"sha":"1a85fe4ccc63da8a2dd9daf230e4133152b300ed","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ListQuery.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FListQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FListQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FListQuery.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import java.io.Serializable;\n+import javax.validation.constraints.Min;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.QueryParam;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+public class ListQuery implements Serializable {\n+\n+    private static final long serialVersionUID = -371488230250055359L;\n+\n+    private Integer page;\n+\n+    private Integer size;\n+\n+    private String orderBy;\n+\n+    public Integer getPage() {\n+        return page;\n+    }\n+\n+    @Min(1)\n+    @QueryParam(JAXRSService.PARAM_PAGE)\n+    @DefaultValue(\"1\")\n+    public void setPage(final Integer page) {\n+        this.page = page;\n+    }\n+\n+    public Integer getSize() {\n+        return size;\n+    }\n+\n+    @Min(1)\n+    @QueryParam(JAXRSService.PARAM_SIZE)\n+    @DefaultValue(\"25\")\n+    public void setSize(final Integer size) {\n+        this.size = size;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_ORDERBY)\n+    public String getOrderBy() {\n+        return orderBy;\n+    }\n+\n+    public void setOrderBy(final String orderBy) {\n+        this.orderBy = orderBy;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+}"},{"sha":"47ff0058956cc18187a5a12395f9f270414f5ced","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SubjectListQuery.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSubjectListQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSubjectListQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSubjectListQuery.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import java.util.List;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.MatrixParam;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+\n+public class SubjectListQuery extends ListQuery {\n+\n+    private static final long serialVersionUID = -5197167078435619636L;\n+\n+    private List<String> realms;\n+\n+    public List<String> getRealms() {\n+        return realms;\n+    }\n+\n+    @DefaultValue(SyncopeConstants.ROOT_REALM)\n+    @MatrixParam(\"realm\")\n+    public void setRealms(final List<String> realms) {\n+        this.realms = realms;\n+    }\n+}"},{"sha":"d7f73445fd52d7c0b77ae870306d4e1b65c29124","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SubjectSearchQuery.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSubjectSearchQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSubjectSearchQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSubjectSearchQuery.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+public class SubjectSearchQuery extends SubjectListQuery {\n+\n+    private static final long serialVersionUID = -6736562952418964707L;\n+\n+    private String fiql;\n+\n+    public String getFiql() {\n+        return fiql;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_FIQL)\n+    public void setFiql(final String fiql) {\n+        this.fiql = fiql;\n+    }\n+\n+}"},{"sha":"b612a6eccdc75f0507c52f9c3927fb96aa6619fa","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":11,"deletions":115,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -19,23 +19,20 @@\n package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n-import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n-import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.cxf.jaxrs.model.wadl.Description;\n import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -44,6 +41,8 @@\n import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.wrap.ResourceName;\n+import org.apache.syncope.common.rest.api.beans.SubjectListQuery;\n+import org.apache.syncope.common.rest.api.beans.SubjectSearchQuery;\n \n /**\n  * REST operations for groups.\n@@ -79,128 +78,25 @@ public interface GroupService extends JAXRSService {\n     List<GroupTO> own();\n \n     /**\n-     * Returns a paged list of existing groups.\n+     * Returns a paged list of existing groups matching the given query.\n      *\n-     * @param realms realms under which groups are defined\n-     * @return paged list of all existing groups\n+     * @param listQuery query conditions\n+     * @return paged list of existing groups matching the given query\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> list(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms);\n+    PagedResult<GroupTO> list(@BeanParam SubjectListQuery listQuery);\n \n     /**\n-     * Returns a paged list of existing groups.\n+     * Returns a paged list of groups matching the given query.\n      *\n-     * @param realms realms under which groups are defined\n-     * @param orderBy list of ordering clauses, separated by comma\n-     * @return paged list of all existing groups\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> list(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\n-\n-    /**\n-     * Returns a paged list of existing groups matching page/size conditions.\n-     *\n-     * @param realms realms under which groups are defined\n-     * @param page result page number\n-     * @param size number of entries per page\n-     * @return paged list of existing groups matching page/size conditions\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> list(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n-\n-    /**\n-     * Returns a paged list of existing groups matching page/size conditions.\n-     *\n-     * @param realms realms under which groups are defined\n-     * @param page result page number\n-     * @param size number of entries per page\n-     * @param orderBy list of ordering clauses, separated by comma\n-     * @return paged list of existing groups matching page/size conditions\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> list(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\n-\n-    /**\n-     * Returns a paged list of groups matching the provided FIQL search condition.\n-     *\n-     * @param realms realms under which groups are defined\n-     * @param fiql FIQL search expression\n-     * @return paged list of groups matching the provided FIQL search condition\n-     */\n-    @GET\n-    @Path(\"search\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> search(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @NotNull @QueryParam(PARAM_FIQL) String fiql);\n-\n-    /**\n-     * Returns a paged list of groups matching the provided FIQL search condition.\n-     *\n-     * @param realms realms under which groups are defined\n-     * @param fiql FIQL search expression\n-     * @param orderBy list of ordering clauses, separated by comma\n-     * @return paged list of groups matching the provided FIQL search condition\n-     */\n-    @GET\n-    @Path(\"search\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> search(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @NotNull @QueryParam(PARAM_FIQL) String fiql,\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\n-\n-    /**\n-     * Returns a paged list of groups matching the provided FIQL search condition.\n-     *\n-     * @param realms realms under which groups are defined\n-     * @param fiql FIQL search expression\n-     * @param page result page number\n-     * @param size number of entries per page\n-     * @return paged list of groups matching the provided FIQL search condition\n-     */\n-    @GET\n-    @Path(\"search\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> search(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @QueryParam(PARAM_FIQL) String fiql,\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n-\n-    /**\n-     * Returns a paged list of groups matching the provided FIQL search condition.\n-     *\n-     * @param realms realms under which groups are defined\n-     * @param fiql FIQL search expression\n-     * @param page result page number\n-     * @param size number of entries per page\n-     * @param orderBy list of ordering clauses, separated by comma\n-     * @return paged list of groups matching the provided FIQL search condition\n+     * @param searchQuery query conditions\n+     * @return paged list of groups matching the given query\n      */\n     @GET\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> search(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @QueryParam(PARAM_FIQL) String fiql,\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\n+    PagedResult<GroupTO> search(@BeanParam SubjectSearchQuery searchQuery);\n \n     /**\n      * Creates a new group."},{"sha":"bfd166a1a612d4cd45bfddb0bc1f5f263b1ed24b","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -24,16 +24,8 @@ public interface JAXRSService {\n \n     String PARAM_PAGE = \"page\";\n \n-    String DEFAULT_PARAM_PAGE = \"1\";\n-\n-    int DEFAULT_PARAM_PAGE_VALUE = Integer.valueOf(DEFAULT_PARAM_PAGE);\n-\n     String PARAM_SIZE = \"size\";\n \n-    String DEFAULT_PARAM_SIZE = \"25\";\n-\n-    int DEFAULT_PARAM_SIZE_VALUE = Integer.valueOf(DEFAULT_PARAM_SIZE);\n-\n     String PARAM_ORDERBY = \"orderby\";\n \n }"},{"sha":"0037d0a19edfce8804c867dbac4ffe09f1150bd8","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":6,"deletions":43,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -19,11 +19,10 @@\n package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n-import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n-import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.PUT;\n@@ -41,6 +40,7 @@\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n+import org.apache.syncope.common.rest.api.beans.ListQuery;\n \n /**\n  * REST operations for reports.\n@@ -81,51 +81,14 @@ public interface ReportService extends JAXRSService {\n     ReportExecTO readExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n \n     /**\n-     * Returns a paged list of all existing reports.\n+     * Returns a paged list of all existing reports matching the given query;\n      *\n-     * @return paged list of all existing reports\n+     * @param listQuery query conditions\n+     * @return paged list of existing reports matching the given query\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<ReportTO> list();\n-\n-    /**\n-     * Returns a paged list of all existing reports.\n-     *\n-     * @param orderBy list of ordering clauses, separated by comma\n-     * @return paged list of all existing reports\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<ReportTO> list(@QueryParam(PARAM_ORDERBY) String orderBy);\n-\n-    /**\n-     * Returns a paged list of all existing reports matching page/size conditions.\n-     *\n-     * @param page selected page in relation to size\n-     * @param size number of entries per page\n-     * @return paged list of existing reports matching page/size conditions\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<ReportTO> list(\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n-\n-    /**\n-     * Returns a paged list of all existing reports matching page/size conditions.\n-     *\n-     * @param page selected page in relation to size\n-     * @param size number of entries per page\n-     * @param orderBy list of ordering clauses, separated by comma\n-     * @return paged list of existing reports matching page/size conditions\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<ReportTO> list(\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\n+    PagedResult<ReportTO> list(@BeanParam ListQuery listQuery);\n \n     /**\n      * Creates a new report."},{"sha":"8240a23c06d10641d54e1ea1316af67f83235100","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":8,"deletions":49,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.DefaultValue;\n@@ -44,6 +44,7 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.ListQuery;\n \n /**\n  * REST operations for tasks.\n@@ -75,60 +76,18 @@ public interface TaskService extends JAXRSService {\n     TaskExecTO readExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n \n     /**\n-     * Returns a list of tasks with matching type.\n+     * Returns a paged list of existing tasks matching type and the given query.\n      *\n      * @param taskType type of tasks to be listed\n+     * @param listQuery query conditions\n      * @param <T> type of taskTO\n-     * @return list of tasks with matching type\n+     * @return paged list of existing tasks matching type and the given query\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractTaskTO> PagedResult<T> list(@NotNull @MatrixParam(\"type\") TaskType taskType);\n-\n-    /**\n-     * Returns a list of tasks with matching type.\n-     *\n-     * @param taskType type of tasks to be listed\n-     * @param orderBy list of ordering clauses, separated by comma\n-     * @param <T> type of taskTO\n-     * @return list of tasks with matching type\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractTaskTO> PagedResult<T> list(@NotNull @MatrixParam(\"type\") TaskType taskType,\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\n-\n-    /**\n-     * Returns a paged list of existing tasks matching type and page/size conditions.\n-     *\n-     * @param taskType type of tasks to be listed\n-     * @param page page number of tasks in relation to page size\n-     * @param size number of tasks listed per page\n-     * @param orderBy list of ordering clauses, separated by comma\n-     * @param <T> type of taskTO\n-     * @return paged list of existing tasks matching type and page/size conditions\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractTaskTO> PagedResult<T> list(@NotNull @MatrixParam(\"type\") TaskType taskType,\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\n-\n-    /**\n-     * Returns a paged list of existing tasks matching type and page/size conditions.\n-     *\n-     * @param taskType type of tasks to be listed\n-     * @param page page number of tasks in relation to page size\n-     * @param size number of tasks listed per page\n-     * @param <T> type of taskTO\n-     * @return paged list of existing tasks matching type and page/size conditions\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractTaskTO> PagedResult<T> list(@MatrixParam(\"type\") TaskType taskType,\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n+    <T extends AbstractTaskTO> PagedResult<T> list(\n+            @NotNull @MatrixParam(\"type\") TaskType taskType,\n+            @BeanParam ListQuery listQuery);\n \n     /**\n      * Creates a new task."},{"sha":"8c13935876a80563339cae2fd1747d5f31935b53","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":11,"deletions":113,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n-import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.DefaultValue;\n@@ -36,7 +36,6 @@\n import org.apache.cxf.jaxrs.model.wadl.Description;\n import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n@@ -47,6 +46,8 @@\n import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.wrap.ResourceName;\n+import org.apache.syncope.common.rest.api.beans.SubjectListQuery;\n+import org.apache.syncope.common.rest.api.beans.SubjectSearchQuery;\n \n /**\n  * REST operations for users.\n@@ -94,128 +95,25 @@ public interface UserService extends JAXRSService {\n     UserTO read(@NotNull @PathParam(\"userKey\") Long userKey);\n \n     /**\n-     * Returns a paged list of existing users.\n+     * Returns a paged list of existing users matching the given query.\n      *\n-     * @param realms realms under which users are defined\n-     * @return paged list of all existing users\n+     * @param listQuery query conditions\n+     * @return paged list of existing users matching the given query\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> list(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms);\n+    PagedResult<UserTO> list(@BeanParam SubjectListQuery listQuery);\n \n     /**\n-     * Returns a paged list of existing users.\n+     * Returns a paged list of users matching the given query.\n      *\n-     * @param realms realms under which users are defined\n-     * @param orderBy list of ordering clauses, separated by comma\n-     * @return paged list of all existing users\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> list(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\n-\n-    /**\n-     * Returns a paged list of existing users matching page/size conditions.\n-     *\n-     * @param realms realms under which users are defined\n-     * @param page result page number\n-     * @param size number of entries per page\n-     * @return paged list of existing users matching page/size conditions\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> list(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n-\n-    /**\n-     * Returns a paged list of existing users matching page/size conditions.\n-     *\n-     * @param realms realms under which users are defined\n-     * @param page result page number\n-     * @param size number of entries per page\n-     * @param orderBy list of ordering clauses, separated by comma\n-     * @return paged list of existing users matching page/size conditions\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> list(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\n-\n-    /**\n-     * Returns a paged list of users matching the provided FIQL search condition.\n-     *\n-     * @param realms realms under which users are defined\n-     * @param fiql FIQL search expression\n-     * @return paged list of users matching the provided FIQL search condition\n-     */\n-    @GET\n-    @Path(\"search\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> search(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @NotNull @QueryParam(PARAM_FIQL) String fiql);\n-\n-    /**\n-     * Returns a paged list of users matching the provided FIQL search condition.\n-     *\n-     * @param realms realms under which users are defined\n-     * @param fiql FIQL search expression\n-     * @param orderBy list of ordering clauses, separated by comma\n-     * @return paged list of users matching the provided FIQL search condition\n-     */\n-    @GET\n-    @Path(\"search\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> search(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @NotNull @QueryParam(PARAM_FIQL) String fiql,\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\n-\n-    /**\n-     * Returns a paged list of users matching the provided FIQL search condition.\n-     *\n-     * @param realms realms under which users are defined\n-     * @param fiql FIQL search expression\n-     * @param page result page number\n-     * @param size number of entries per page\n-     * @return paged list of users matching the provided FIQL search condition\n-     */\n-    @GET\n-    @Path(\"search\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> search(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @QueryParam(PARAM_FIQL) String fiql,\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n-\n-    /**\n-     * Returns a paged list of users matching the provided FIQL search condition.\n-     *\n-     * @param realms realms under which users are defined\n-     * @param fiql FIQL search expression\n-     * @param page result page number\n-     * @param size number of entries per page\n-     * @param orderBy list of ordering clauses, separated by comma\n-     * @return paged list of users matching the provided FIQL search condition\n+     * @param searchQuery query conditions\n+     * @return paged list of users matching the given query\n      */\n     @GET\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> search(\n-            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n-            @QueryParam(PARAM_FIQL) String fiql,\n-            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n-            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n-            @QueryParam(PARAM_ORDERBY) String orderBy);\n+    PagedResult<UserTO> search(@BeanParam SubjectSearchQuery searchQuery);\n \n     /**\n      * Creates a new user."},{"sha":"d0a6d0c7fd6f93d87018589fd4d54fdc19ed7700","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/SubjectSearchTest.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FSubjectSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FSubjectSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FSubjectSearchTest.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -49,7 +49,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class AttributableSearchTest extends AbstractTest {\n+public class SubjectSearchTest extends AbstractTest {\n \n     @Autowired\n     private UserDAO userDAO;","previous_filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/AttributableSearchTest.java"},{"sha":"d3eb0be045b593845b46efe9baa966dc0720d55d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/SubjectSearchTest.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FSubjectSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FSubjectSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FSubjectSearchTest.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -39,7 +39,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class AttributableSearchTest extends AbstractTest {\n+public class SubjectSearchTest extends AbstractTest {\n \n     @Autowired\n     private GroupDAO groupDAO;","previous_filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/AttributableSearchTest.java"},{"sha":"a45e275ebe7e8643921e3fbcc501cfab2b537e23","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/QueryResourceInfoComparator.java","status":"removed","additions":0,"deletions":114,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39f8a0696c465a5d170c4f37a36ea093743a60d1/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FQueryResourceInfoComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39f8a0696c465a5d170c4f37a36ea093743a60d1/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FQueryResourceInfoComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FQueryResourceInfoComparator.java?ref=39f8a0696c465a5d170c4f37a36ea093743a60d1","patch":"@@ -1,114 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.cxf.jaxrs.ext.ResourceComparator;\n-import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n-import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n-import org.apache.cxf.jaxrs.model.OperationResourceInfoComparator;\n-import org.apache.cxf.jaxrs.model.Parameter;\n-import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n-import org.apache.cxf.message.Message;\n-\n-public class QueryResourceInfoComparator extends OperationResourceInfoComparator implements ResourceComparator {\n-\n-    public QueryResourceInfoComparator() {\n-        super(null, null);\n-    }\n-\n-    @Override\n-    public int compare(final ClassResourceInfo cri1, final ClassResourceInfo cri2, final Message message) {\n-        // Leave Class selection to CXF\n-        return 0;\n-    }\n-\n-    @Override\n-    public int compare(final OperationResourceInfo oper1, final OperationResourceInfo oper2, final Message message) {\n-        // Check if CXF can make a decision\n-        int cxfResult = super.compare(oper1, oper2);\n-        if (cxfResult != 0) {\n-            return cxfResult;\n-        }\n-\n-        int op1Counter = getMatchingRate(oper1, message);\n-        int op2Counter = getMatchingRate(oper2, message);\n-\n-        return op1Counter == op2Counter\n-                ? 0\n-                : op1Counter < op2Counter\n-                ? 1\n-                : -1;\n-    }\n-\n-    /**\n-     * This method calculates a number indicating a good or bad match between values provided within the request and\n-     * expected method parameters. A higher number means a better match.\n-     *\n-     * @param operation The operation to be rated, based on contained parameterInfo values.\n-     * @param message A message containing query and header values from user request\n-     * @return A positive or negative number, indicating a good match between query and method\n-     */\n-    protected int getMatchingRate(final OperationResourceInfo operation, final Message message) {\n-        List<Parameter> params = operation.getParameters();\n-        if (params == null || params.isEmpty()) {\n-            return 0;\n-        }\n-\n-        // Get Request QueryParams\n-        String query = (String) message.get(Message.QUERY_STRING);\n-        String path = (String) message.get(Message.REQUEST_URI);\n-        Map<String, List<String>> qParams = JAXRSUtils.getStructuredParams(query, \"&\", true, false);\n-        Map<String, List<String>> mParams = JAXRSUtils.getMatrixParams(path, true);\n-        // Get Request Headers\n-        Map<?, ?> qHeader = (java.util.Map<?, ?>) message.get(Message.PROTOCOL_HEADERS);\n-\n-        int rate = 0;\n-        for (Parameter p : params) {\n-            switch (p.getType()) {\n-                case QUERY:\n-                    if (qParams.containsKey(p.getName())) {\n-                        rate += 2;\n-                    } else if (p.getDefaultValue() == null) {\n-                        rate -= 1;\n-                    }\n-                    break;\n-                case MATRIX:\n-                    if (mParams.containsKey(p.getName())) {\n-                        rate += 2;\n-                    } else if (p.getDefaultValue() == null) {\n-                        rate -= 1;\n-                    }\n-                    break;\n-                case HEADER:\n-                    if (qHeader.containsKey(p.getName())) {\n-                        rate += 2;\n-                    } else if (p.getDefaultValue() == null) {\n-                        rate -= 1;\n-                    }\n-                    break;\n-                default:\n-                    break;\n-            }\n-        }\n-        return rate;\n-    }\n-}"},{"sha":"ee4825e308a67dc5c89c7d3aaa313ae43d64e741","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":24,"deletions":48,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -34,9 +34,10 @@\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.wrap.ResourceName;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.beans.SubjectListQuery;\n+import org.apache.syncope.common.rest.api.beans.SubjectSearchQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.core.logic.GroupLogic;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -64,36 +65,24 @@ public Response delete(final Long groupKey) {\n     }\n \n     @Override\n-    public PagedResult<GroupTO> list(final List<String> realms) {\n-        return list(realms, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n-    }\n-\n-    @Override\n-    public PagedResult<GroupTO> list(final List<String> realms, final String orderBy) {\n-        return list(realms, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n-    }\n-\n-    @Override\n-    public PagedResult<GroupTO> list(final List<String> realms, final Integer page, final Integer size) {\n-        return list(realms, page, size, null);\n-    }\n-\n-    @Override\n-    public PagedResult<GroupTO> list(\n-            final List<String> realms, final Integer page, final Integer size, final String orderBy) {\n-\n-        CollectionUtils.transform(realms, new Transformer<String, String>() {\n+    public PagedResult<GroupTO> list(final SubjectListQuery listQuery) {\n+        CollectionUtils.transform(listQuery.getRealms(), new Transformer<String, String>() {\n \n             @Override\n             public String transform(final String input) {\n                 return StringUtils.prependIfMissing(input, SyncopeConstants.ROOT_REALM);\n             }\n         });\n \n-        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n         return buildPagedResult(\n-                logic.list(page, size, orderByClauses, realms), page, size,\n-                logic.count(realms));\n+                logic.list(\n+                        listQuery.getPage(),\n+                        listQuery.getSize(),\n+                        getOrderByClauses(listQuery.getOrderBy()),\n+                        listQuery.getRealms()),\n+                listQuery.getPage(),\n+                listQuery.getSize(),\n+                logic.count(listQuery.getRealms()));\n     }\n \n     @Override\n@@ -102,39 +91,26 @@ public GroupTO read(final Long groupKey) {\n     }\n \n     @Override\n-    public PagedResult<GroupTO> search(final List<String> realms, final String fiql) {\n-        return search(realms, fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n-    }\n-\n-    @Override\n-    public PagedResult<GroupTO> search(final List<String> realms, final String fiql, final String orderBy) {\n-        return search(realms, fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n-    }\n-\n-    @Override\n-    public PagedResult<GroupTO> search(\n-            final List<String> realms, final String fiql, final Integer page, final Integer size) {\n-\n-        return search(realms, fiql, page, size, null);\n-    }\n-\n-    @Override\n-    public PagedResult<GroupTO> search(final List<String> realms, final String fiql,\n-            final Integer page, final Integer size, final String orderBy) {\n-\n-        CollectionUtils.transform(realms, new Transformer<String, String>() {\n+    public PagedResult<GroupTO> search(final SubjectSearchQuery searchQuery) {\n+        CollectionUtils.transform(searchQuery.getRealms(), new Transformer<String, String>() {\n \n             @Override\n             public String transform(final String input) {\n                 return StringUtils.prependIfMissing(input, SyncopeConstants.ROOT_REALM);\n             }\n         });\n \n-        SearchCond cond = getSearchCond(fiql);\n-        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+        SearchCond cond = getSearchCond(searchQuery.getFiql());\n         return buildPagedResult(\n-                logic.search(cond, page, size, orderByClauses, realms), page, size,\n-                logic.searchCount(cond, realms));\n+                logic.search(\n+                        cond,\n+                        searchQuery.getPage(),\n+                        searchQuery.getSize(),\n+                        getOrderByClauses(searchQuery.getOrderBy()),\n+                        searchQuery.getRealms()),\n+                searchQuery.getPage(),\n+                searchQuery.getSize(),\n+                logic.searchCount(cond, searchQuery.getRealms()));\n     }\n \n     @Override"},{"sha":"dfde009fe1880b2aef8edda6965edffb98bafc1a","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":11,"deletions":20,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -32,9 +32,9 @@\n import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.ListQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.syncope.core.logic.ReportLogic;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -50,7 +50,7 @@ public Response create(final ReportTO reportTO) {\n         ReportTO createdReportTO = logic.create(reportTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(createdReportTO.getKey())).build();\n         return Response.created(location).\n-                header(RESTHeaders.RESOURCE_ID.toString(), createdReportTO.getKey()).\n+                header(RESTHeaders.RESOURCE_ID, createdReportTO.getKey()).\n                 build();\n     }\n \n@@ -61,24 +61,15 @@ public void update(final Long reportKey, final ReportTO reportTO) {\n     }\n \n     @Override\n-    public PagedResult<ReportTO> list() {\n-        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n-    }\n-\n-    @Override\n-    public PagedResult<ReportTO> list(final String orderBy) {\n-        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n-    }\n-\n-    @Override\n-    public PagedResult<ReportTO> list(final Integer page, final Integer size) {\n-        return list(page, size, null);\n-    }\n-\n-    @Override\n-    public PagedResult<ReportTO> list(final Integer page, final Integer size, final String orderBy) {\n-        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n-        return buildPagedResult(logic.list(page, size, orderByClauses), page, size, logic.count());\n+    public PagedResult<ReportTO> list(final ListQuery listQuery) {\n+        return buildPagedResult(\n+                logic.list(\n+                        listQuery.getPage(),\n+                        listQuery.getSize(),\n+                        getOrderByClauses(listQuery.getOrderBy())),\n+                listQuery.getPage(),\n+                listQuery.getSize(),\n+                logic.count());\n     }\n \n     @Override"},{"sha":"83edcc0c3be961ebd85fb995bb37fd46c5105dcd","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":11,"deletions":25,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.net.URI;\n-import java.util.List;\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n@@ -34,9 +33,9 @@\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.ListQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.logic.TaskLogic;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n@@ -76,31 +75,18 @@ public TaskExecTO execute(final Long taskKey, final boolean dryRun) {\n         return logic.execute(taskKey, dryRun);\n     }\n \n-    @Override\n-    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType) {\n-        return list(taskType, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n-    }\n-\n-    @Override\n-    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType, final String orderBy) {\n-        return list(taskType, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n-    }\n-\n-    @Override\n-    public <T extends AbstractTaskTO> PagedResult<T> list(\n-            final TaskType taskType, final Integer page, final Integer size) {\n-\n-        return list(taskType, page, size, null);\n-    }\n-\n-    @Override\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType,\n-            final Integer page, final Integer size, final String orderBy) {\n-\n-        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+    @Override\n+    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType, final ListQuery listQuery) {\n         return (PagedResult<T>) buildPagedResult(\n-                logic.list(taskType, page, size, orderByClauses), page, size, logic.count(taskType));\n+                logic.list(\n+                        taskType,\n+                        listQuery.getPage(),\n+                        listQuery.getSize(),\n+                        getOrderByClauses(listQuery.getOrderBy())),\n+                listQuery.getPage(),\n+                listQuery.getSize(),\n+                logic.count(taskType));\n     }\n \n     @Override"},{"sha":"a758993d66d5e41b917daa8bef02f6b0f502468e","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":24,"deletions":48,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -38,9 +38,10 @@\n import org.apache.syncope.common.lib.wrap.ResourceName;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.SubjectListQuery;\n+import org.apache.syncope.common.rest.api.beans.SubjectSearchQuery;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.core.logic.UserLogic;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -82,36 +83,24 @@ public Response delete(final Long userKey) {\n     }\n \n     @Override\n-    public PagedResult<UserTO> list(final List<String> realms) {\n-        return list(realms, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n-    }\n-\n-    @Override\n-    public PagedResult<UserTO> list(final List<String> realms, final String orderBy) {\n-        return list(realms, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n-    }\n-\n-    @Override\n-    public PagedResult<UserTO> list(final List<String> realms, final Integer page, final Integer size) {\n-        return list(realms, page, size, null);\n-    }\n-\n-    @Override\n-    public PagedResult<UserTO> list(\n-            final List<String> realms, final Integer page, final Integer size, final String orderBy) {\n-\n-        CollectionUtils.transform(realms, new Transformer<String, String>() {\n+    public PagedResult<UserTO> list(final SubjectListQuery listQuery) {\n+        CollectionUtils.transform(listQuery.getRealms(), new Transformer<String, String>() {\n \n             @Override\n             public String transform(final String input) {\n                 return StringUtils.prependIfMissing(input, SyncopeConstants.ROOT_REALM);\n             }\n         });\n \n-        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n         return buildPagedResult(\n-                logic.list(page, size, orderByClauses, realms), page, size,\n-                logic.count(realms));\n+                logic.list(\n+                        listQuery.getPage(),\n+                        listQuery.getSize(),\n+                        getOrderByClauses(listQuery.getOrderBy()),\n+                        listQuery.getRealms()),\n+                listQuery.getPage(),\n+                listQuery.getSize(),\n+                logic.count(listQuery.getRealms()));\n     }\n \n     @Override\n@@ -120,39 +109,26 @@ public UserTO read(final Long userKey) {\n     }\n \n     @Override\n-    public PagedResult<UserTO> search(final List<String> realms, final String fiql) {\n-        return search(realms, fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n-    }\n-\n-    @Override\n-    public PagedResult<UserTO> search(final List<String> realms, final String fiql, final String orderBy) {\n-        return search(realms, fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n-    }\n-\n-    @Override\n-    public PagedResult<UserTO> search(\n-            final List<String> realms, final String fiql, final Integer page, final Integer size) {\n-\n-        return search(realms, fiql, page, size, null);\n-    }\n-\n-    @Override\n-    public PagedResult<UserTO> search(final List<String> realms, final String fiql,\n-            final Integer page, final Integer size, final String orderBy) {\n-\n-        CollectionUtils.transform(realms, new Transformer<String, String>() {\n+    public PagedResult<UserTO> search(final SubjectSearchQuery searchQuery) {\n+        CollectionUtils.transform(searchQuery.getRealms(), new Transformer<String, String>() {\n \n             @Override\n             public String transform(final String input) {\n                 return StringUtils.prependIfMissing(input, SyncopeConstants.ROOT_REALM);\n             }\n         });\n \n-        SearchCond cond = getSearchCond(fiql);\n-        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+        SearchCond cond = getSearchCond(searchQuery.getFiql());\n         return buildPagedResult(\n-                logic.search(cond, page, size, orderByClauses, realms), page, size,\n-                logic.searchCount(cond, realms));\n+                logic.search(\n+                        cond,\n+                        searchQuery.getPage(),\n+                        searchQuery.getSize(),\n+                        getOrderByClauses(searchQuery.getOrderBy()),\n+                        searchQuery.getRealms()),\n+                searchQuery.getPage(),\n+                searchQuery.getSize(),\n+                logic.searchCount(cond, searchQuery.getRealms()));\n     }\n \n     @Override"},{"sha":"c6a472eb6f27073a4ae1452ce9840cc23fab3927","filename":"core/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -93,9 +93,6 @@ under the License.\n   <jaxrs:server id=\"restContainer\" address=\"/\" \n                 basePackages=\"org.apache.syncope.common.rest.api.service, org.apache.syncope.core.rest.cxf.service\" \n                 staticSubresourceResolution=\"true\">\n-    <jaxrs:resourceComparator>\n-      <bean class=\"org.apache.syncope.core.rest.cxf.QueryResourceInfoComparator\"/>\n-    </jaxrs:resourceComparator>\n     <jaxrs:properties> \n       <entry key=\"search.lax.property.match\" value=\"true\"/> \n     </jaxrs:properties> "},{"sha":"6545be5466f5e774dc7934262393f0cea8c2a1a6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -34,6 +34,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -140,7 +141,8 @@ protected Map<Long, TaskExecTO> execSyncTasks(\n     }\n \n     protected NotificationTaskTO findNotificationTaskBySender(final String sender) {\n-        PagedResult<NotificationTaskTO> tasks = taskService.list(TaskType.NOTIFICATION);\n+        PagedResult<NotificationTaskTO> tasks =\n+                taskService.list(TaskType.NOTIFICATION, SyncopeClient.getListQueryBuilder().build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n         NotificationTaskTO taskTO = null;"},{"sha":"84b78cd1a3b417e3145f985c888783e479ee5ee2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -25,7 +25,6 @@\n import static org.junit.Assert.fail;\n \n import java.security.AccessControlException;\n-import java.util.Collections;\n import java.util.Map;\n import java.util.Set;\n \n@@ -34,6 +33,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -200,8 +200,8 @@ public void testUserSearch() {\n                 getService(UserService.class);\n \n         PagedResult<UserTO> matchedUsers = userService2.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query());\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query()).build());\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.getResult().isEmpty());\n         assertTrue(CollectionUtils.exists(matchedUsers.getResult(), new Predicate<UserTO>() {\n@@ -215,8 +215,8 @@ public boolean evaluate(final UserTO user) {\n         UserService userService3 = clientFactory.create(\"verdi\", \"password\").getService(UserService.class);\n \n         matchedUsers = userService3.search(\n-                Collections.singletonList(\"/even/two\"),\n-                SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query());\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(\"/even/two\").\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query()).build());\n         assertNotNull(matchedUsers);\n         assertFalse(CollectionUtils.exists(matchedUsers.getResult(), new Predicate<UserTO>() {\n "},{"sha":"7071c225dd4397a6e3e5e9988f506ec5e0c4c3fb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -28,7 +28,6 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.security.AccessControlException;\n-import java.util.Collections;\n import java.util.List;\n import javax.naming.NamingEnumeration;\n import javax.naming.NamingException;\n@@ -40,6 +39,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.ReferenceMod;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -148,7 +148,8 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        PagedResult<GroupTO> groupTOs = groupService.list(Collections.singletonList(\"/\"));\n+        PagedResult<GroupTO> groupTOs =\n+                groupService.list(SyncopeClient.getSubjectListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).build());\n         assertNotNull(groupTOs);\n         assertTrue(groupTOs.getResult().size() >= 8);\n         for (GroupTO groupTO : groupTOs.getResult()) {\n@@ -548,14 +549,15 @@ public void createWithMandatorySchemaNotTemplate() {\n     public void anonymous() {\n         GroupService unauthenticated = clientFactory.createAnonymous().getService(GroupService.class);\n         try {\n-            unauthenticated.list(Collections.singletonList(\"/\"));\n+            unauthenticated.list(SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).build());\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n         GroupService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(GroupService.class);\n-        assertFalse(anonymous.list(Collections.singletonList(\"/\")).getResult().isEmpty());\n+        assertFalse(anonymous.list(SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).build()).\n+                getResult().isEmpty());\n     }\n \n     @Test"},{"sha":"66185f5765cbac2cbdfbd6ca4b514384c6bc6546","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PropagationTaskITCase.java","status":"modified","additions":22,"deletions":17,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -26,6 +26,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n@@ -45,27 +46,30 @@ public class PropagationTaskITCase extends AbstractTaskITCase {\n \n     @Test\n     public void paginatedList() {\n-        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION, 1, 2);\n-\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(1).size(2).build());\n         assertNotNull(tasks);\n-        assertFalse(tasks.getResult().isEmpty());\n         assertEquals(2, tasks.getResult().size());\n \n         for (AbstractTaskTO task : tasks.getResult()) {\n             assertNotNull(task);\n         }\n \n-        tasks = taskService.list(TaskType.PROPAGATION, 2, 2);\n-\n+        tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(2).size(2).build());\n         assertNotNull(tasks);\n-        assertFalse(tasks.getResult().isEmpty());\n+        assertEquals(2, tasks.getPage());\n+        assertEquals(2, tasks.getResult().size());\n \n         for (AbstractTaskTO task : tasks.getResult()) {\n             assertNotNull(task);\n         }\n \n-        tasks = taskService.list(TaskType.PROPAGATION, 1000, 2);\n-\n+        tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(1000).size(2).build());\n         assertNotNull(tasks);\n         assertTrue(tasks.getResult().isEmpty());\n     }\n@@ -122,29 +126,30 @@ public void issue196() {\n \n     @Test\n     public void bulkAction() {\n-        final PagedResult<PropagationTaskTO> before = taskService.list(TaskType.PROPAGATION);\n+        PagedResult<PropagationTaskTO> before = taskService.list(\n+                TaskType.PROPAGATION, SyncopeClient.getListQueryBuilder().build());\n \n         // create user with testdb resource\n-        final UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         createUser(userTO);\n \n-        final List<PropagationTaskTO> after = new ArrayList<>(\n-                taskService.<PropagationTaskTO>list(TaskType.PROPAGATION).getResult());\n-\n+        List<PropagationTaskTO> after = new ArrayList<>(\n+                taskService.<PropagationTaskTO>list(TaskType.PROPAGATION, SyncopeClient.getListQueryBuilder().build()).\n+                getResult());\n         after.removeAll(before.getResult());\n-\n         assertFalse(after.isEmpty());\n \n-        final BulkAction bulkAction = new BulkAction();\n+        BulkAction bulkAction = new BulkAction();\n         bulkAction.setOperation(BulkAction.Type.DELETE);\n \n-        for (AbstractTaskTO taskTO : after) {\n+        for (PropagationTaskTO taskTO : after) {\n             bulkAction.getTargets().add(String.valueOf(taskTO.getKey()));\n         }\n \n         taskService.bulk(bulkAction);\n \n-        assertFalse(taskService.list(TaskType.PROPAGATION).getResult().containsAll(after));\n+        assertFalse(taskService.list(TaskType.PROPAGATION, SyncopeClient.getListQueryBuilder().build()).getResult().\n+                containsAll(after));\n     }\n }"},{"sha":"33ee57a71496e474b93952ecaa724688bb43c684","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -78,7 +78,8 @@ public void read() {\n \n     @Test\n     public void list() {\n-        final PagedResult<PushTaskTO> tasks = taskService.list(TaskType.PUSH);\n+        PagedResult<PushTaskTO> tasks = taskService.list(\n+                TaskType.PUSH, SyncopeClient.getListQueryBuilder().build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof PushTaskTO)) {"},{"sha":"2199bc8cc5f9a30e3c2727607cf256ec4d9426f7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ReportITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -30,6 +30,7 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n@@ -62,7 +63,7 @@ public void getReportletClasses() {\n \n     @Test\n     public void list() {\n-        PagedResult<ReportTO> reports = reportService.list();\n+        PagedResult<ReportTO> reports = reportService.list(SyncopeClient.getListQueryBuilder().build());\n         assertNotNull(reports);\n         assertFalse(reports.getResult().isEmpty());\n         for (ReportTO report : reports.getResult()) {"},{"sha":"437bca5a39acabb19d28e587e96d1894ab3ea9c2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -26,6 +26,7 @@\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -50,7 +51,8 @@ public void getJobClasses() {\n \n     @Test\n     public void list() {\n-        final PagedResult<SchedTaskTO> tasks = taskService.list(TaskType.SCHEDULED);\n+        PagedResult<SchedTaskTO> tasks =\n+                taskService.list(TaskType.SCHEDULED, SyncopeClient.getListQueryBuilder().build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SchedTaskTO) || task instanceof SyncTaskTO || task instanceof PushTaskTO) {\n@@ -64,7 +66,7 @@ public void update() {\n         SchedTaskTO task = taskService.read(SCHED_TASK_ID);\n         assertNotNull(task);\n \n-        final SchedTaskTO taskMod = new SchedTaskTO();\n+        SchedTaskTO taskMod = new SchedTaskTO();\n         taskMod.setKey(5);\n         taskMod.setCronExpression(null);\n "},{"sha":"b17d7f349d8410be9eca302e07efadff89fd2b6a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SearchITCase.java","status":"modified","additions":45,"deletions":41,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -23,12 +23,12 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.Collection;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.CollectionUtils2;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -43,9 +43,9 @@ public class SearchITCase extends AbstractITCase {\n     public void searchUser() {\n         // LIKE\n         PagedResult<UserTO> matchedUsers = userService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getUserSearchConditionBuilder().\n-                is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query());\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                        is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query()).build());\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.getResult().isEmpty());\n \n@@ -55,25 +55,27 @@ public void searchUser() {\n \n         // ISNULL\n         matchedUsers = userService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getUserSearchConditionBuilder().isNull(\"loginDate\").query());\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().isNull(\"loginDate\").query()).build());\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.getResult().isEmpty());\n \n-        Set<Long> userIds = new HashSet<Long>(matchedUsers.getResult().size());\n-        for (UserTO user : matchedUsers.getResult()) {\n-            userIds.add(user.getKey());\n-        }\n-        assertTrue(userIds.contains(2L));\n-        assertTrue(userIds.contains(3L));\n+        Collection<UserTO> found = CollectionUtils2.find(matchedUsers.getResult(), new Predicate<UserTO>() {\n+\n+            @Override\n+            public boolean evaluate(final UserTO user) {\n+                return user.getKey() == 2L || user.getKey() == 3L;\n+            }\n+        });\n+        assertEquals(2, found.size());\n     }\n \n     @Test\n     public void searchByUsernameAndKey() {\n-        final PagedResult<UserTO> matchingUsers = userService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getUserSearchConditionBuilder().\n-                is(\"username\").equalTo(\"rossini\").and(\"key\").lessThan(2).query());\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                        is(\"username\").equalTo(\"rossini\").and(\"key\").lessThan(2).query()).build());\n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.getResult().size());\n         assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n@@ -82,10 +84,10 @@ public void searchByUsernameAndKey() {\n \n     @Test\n     public void searchByGroupNameAndKey() {\n-        final PagedResult<GroupTO> matchingGroups = groupService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getGroupSearchConditionBuilder().\n-                is(\"name\").equalTo(\"root\").and(\"key\").lessThan(2).query());\n+        PagedResult<GroupTO> matchingGroups = groupService.search(\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                        is(\"name\").equalTo(\"root\").and(\"key\").lessThan(2).query()).build());\n         assertNotNull(matchingGroups);\n         assertEquals(1, matchingGroups.getResult().size());\n         assertEquals(\"root\", matchingGroups.getResult().iterator().next().getName());\n@@ -95,8 +97,9 @@ public void searchByGroupNameAndKey() {\n     @Test\n     public void searchUserByResourceName() {\n         PagedResult<UserTO> matchedUsers = userService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getUserSearchConditionBuilder().hasResources(RESOURCE_NAME_MAPPINGS2).query());\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().hasResources(RESOURCE_NAME_MAPPINGS2).query()).\n+                build());\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.getResult().isEmpty());\n \n@@ -113,9 +116,9 @@ public boolean evaluate(final UserTO user) {\n     public void paginatedSearch() {\n         // LIKE\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getUserSearchConditionBuilder().\n-                is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query(), 1, 2);\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                        is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query()).page(1).size(2).build());\n         assertNotNull(matchingUsers);\n \n         assertFalse(matchingUsers.getResult().isEmpty());\n@@ -125,27 +128,28 @@ public void paginatedSearch() {\n \n         // ISNULL\n         matchingUsers = userService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getUserSearchConditionBuilder().isNull(\"loginDate\").query(), 1, 2);\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().isNull(\"loginDate\").query()).page(2).size(2).\n+                build());\n         assertNotNull(matchingUsers);\n-        assertFalse(matchingUsers.getResult().isEmpty());\n+        assertEquals(2, matchingUsers.getPage());\n         assertEquals(2, matchingUsers.getResult().size());\n     }\n \n     @Test\n     public void searchByBooleanSubjectCond() {\n-        final PagedResult<GroupTO> matchingGroups = groupService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getGroupSearchConditionBuilder().is(\"show\").equalTo(\"true\").query());\n+        PagedResult<GroupTO> matchingGroups = groupService.search(\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"show\").equalTo(\"true\").query()).build());\n         assertNotNull(matchingGroups);\n         assertFalse(matchingGroups.getResult().isEmpty());\n     }\n \n     @Test\n     public void searchByRelationshipSubjectCond() {\n-        final PagedResult<GroupTO> matchingGroups = groupService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getGroupSearchConditionBuilder().is(\"userOwner\").equalTo(5).query());\n+        PagedResult<GroupTO> matchingGroups = groupService.search(\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"userOwner\").equalTo(5).query()).build());\n         assertNotNull(matchingGroups);\n         assertEquals(1, matchingGroups.getResult().size());\n         assertEquals(6L, matchingGroups.getResult().iterator().next().getKey());\n@@ -154,8 +158,8 @@ public void searchByRelationshipSubjectCond() {\n     @Test\n     public void nested() {\n         PagedResult<UserTO> matchedUsers = userService.search(\n-                Collections.singletonList(\"/\"),\n-                \"((fullname==*o*,fullname==*i*);$resources!=ws-target-resource-1)\", 1, 2);\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(\"((fullname==*o*,fullname==*i*);$resources!=ws-target-resource-1)\").page(1).size(2).build());\n         assertNotNull(matchedUsers);\n \n         assertFalse(matchedUsers.getResult().isEmpty());\n@@ -167,9 +171,9 @@ public void nested() {\n     @Test\n     public void orderBy() {\n         PagedResult<UserTO> matchedUsers = userService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query(),\n-                SyncopeClient.getOrderByClauseBuilder().asc(\"status\").desc(\"firstname\").build());\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query()).\n+                orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"status\").desc(\"firstname\").build()).build());\n         assertNotNull(matchedUsers);\n \n         assertFalse(matchedUsers.getResult().isEmpty());"},{"sha":"7fd817aae8a5710de66603ed50d3af1a7c5a27ed","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":26,"deletions":18,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -25,7 +25,6 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -87,7 +86,8 @@ public void getSyncActionsClasses() {\n \n     @Test\n     public void list() {\n-        final PagedResult<SyncTaskTO> tasks = taskService.list(TaskType.SYNCHRONIZATION);\n+        PagedResult<SyncTaskTO> tasks =\n+                taskService.list(TaskType.SYNCHRONIZATION, SyncopeClient.getListQueryBuilder().build());\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n             if (!(task instanceof SyncTaskTO)) {\n@@ -153,7 +153,9 @@ public void sync() throws Exception {\n \n         // -----------------------------\n         try {\n-            int usersPre = userService.list(Collections.singletonList(\"/\"), 1, 1).getTotalCount();\n+            int usersPre = userService.list(\n+                    SyncopeClient.getSubjectListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                    page(1).size(1).build()).getTotalCount();\n             assertNotNull(usersPre);\n \n             execSyncTask(SYNC_TASK_ID, 50, false);\n@@ -200,7 +202,9 @@ public boolean evaluate(final AttrTO attributeTO) {\n             assertEquals(\"TYPE_8\", userTO.getPlainAttrMap().get(\"type\").getValues().get(0));\n \n             // check for sync results\n-            int usersPost = userService.list(Collections.singletonList(\"/\"), 1, 1).getTotalCount();\n+            int usersPost = userService.list(\n+                    SyncopeClient.getSubjectListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                    page(1).size(1).build()).getTotalCount();\n             assertNotNull(usersPost);\n             assertEquals(usersPre + 9, usersPost);\n \n@@ -269,8 +273,9 @@ public void reconcileFromDB() {\n      */\n     private void ldapCleanup() {\n         PagedResult<GroupTO> matchingGroups = groupService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query());\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query()).\n+                build());\n         if (matchingGroups.getSize() > 0) {\n             for (GroupTO group : matchingGroups.getResult()) {\n                 groupService.bulkDeassociation(group.getKey(),\n@@ -280,8 +285,9 @@ private void ldapCleanup() {\n             }\n         }\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query());\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query()).\n+                build());\n         if (matchingUsers.getSize() > 0) {\n             for (UserTO user : matchingUsers.getResult()) {\n                 userService.bulkDeassociation(user.getKey(),\n@@ -301,20 +307,22 @@ public void reconcileFromLDAP() {\n         TaskExecTO execution = execSyncTask(11L, 50, false);\n \n         // 1. verify execution status\n-        final String status = execution.getStatus();\n+        String status = execution.getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n         // 2. verify that synchronized group is found, with expected attributes\n-        final PagedResult<GroupTO> matchingGroups = groupService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query());\n+        PagedResult<GroupTO> matchingGroups = groupService.search(\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query()).\n+                build());\n         assertNotNull(matchingGroups);\n         assertEquals(1, matchingGroups.getResult().size());\n \n-        final PagedResult<UserTO> matchingUsers = userService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query());\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query()).\n+                build());\n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.getResult().size());\n \n@@ -334,9 +342,9 @@ public void reconcileFromLDAP() {\n         assertNull(groupTO.getGroupOwner());\n \n         // 3. verify that LDAP group membership is propagated as Syncope group membership\n-        final PagedResult<UserTO> members = userService.search(\n-                Collections.singletonList(\"/\"),\n-                SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()).query());\n+        PagedResult<UserTO> members = userService.search(\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()).query()).build());\n         assertNotNull(members);\n         assertEquals(1, members.getResult().size());\n     }"},{"sha":"43f0ffbf0a32bf3bbb15b504fde8c0f6bff6b172","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":37,"deletions":16,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -128,10 +128,11 @@ public static UserTO getSampleTO(final String email) {\n     }\n \n     @Test\n-    @SuppressWarnings(\"unchecked\")\n     public void createUserWithNoPropagation() {\n         // get task list\n-        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -146,7 +147,9 @@ public void createUserWithNoPropagation() {\n         createUser(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -327,7 +330,9 @@ public void createWithException() {\n     @Test\n     public void create() {\n         // get task list\n-        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -381,7 +386,9 @@ public void create() {\n         assertEquals(\"virtualvalue\", newUserTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n \n         // get the new task list\n-        tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -527,7 +534,8 @@ public void deleteByUsername() {\n \n     @Test\n     public void list() {\n-        PagedResult<UserTO> users = userService.list(Collections.singletonList(\"/\"));\n+        PagedResult<UserTO> users = userService.list(\n+                SyncopeClient.getSubjectListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).build());\n         assertNotNull(users);\n         assertFalse(users.getResult().isEmpty());\n \n@@ -538,7 +546,8 @@ public void list() {\n \n     @Test\n     public void paginatedList() {\n-        PagedResult<UserTO> users = userService.list(Collections.singletonList(\"/\"), 1, 2);\n+        PagedResult<UserTO> users = userService.list(\n+                SyncopeClient.getSubjectListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).page(1).size(2).build());\n         assertNotNull(users);\n         assertFalse(users.getResult().isEmpty());\n         assertEquals(2, users.getResult().size());\n@@ -547,12 +556,14 @@ public void paginatedList() {\n             assertNotNull(user);\n         }\n \n-        users = userService.list(Collections.singletonList(\"/\"), 2, 2);\n+        users = userService.list(SyncopeClient.getSubjectListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                page(2).size(2).build());\n         assertNotNull(users);\n-        assertFalse(users.getResult().isEmpty());\n+        assertEquals(2, users.getPage());\n         assertEquals(2, users.getResult().size());\n \n-        users = userService.list(Collections.singletonList(\"/\"), 100, 2);\n+        users = userService.list(SyncopeClient.getSubjectListQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                page(100).size(2).build());\n         assertNotNull(users);\n         assertTrue(users.getResult().isEmpty());\n     }\n@@ -678,7 +689,8 @@ public void update() {\n \n     @Test\n     public void updatePasswordOnly() {\n-        int beforeTasks = taskService.list(TaskType.PROPAGATION, 1, 1).getTotalCount();\n+        int beforeTasks = taskService.list(TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n         UserTO userTO = getUniqueSampleTO(\"pwdonly@t.com\");\n@@ -698,7 +710,8 @@ public void updatePasswordOnly() {\n         // check for changePwdDate\n         assertNotNull(userTO.getChangePwdDate());\n \n-        int afterTasks = taskService.list(TaskType.PROPAGATION, 1, 1).getTotalCount();\n+        int afterTasks = taskService.list(TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(1).size(1).build()).getTotalCount();\n         assertFalse(beforeTasks <= 0);\n \n         assertTrue(beforeTasks < afterTasks);\n@@ -708,7 +721,9 @@ public void updatePasswordOnly() {\n     @Test\n     public void verifyTaskRegistration() {\n         // get task list\n-        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        PagedResult<PropagationTaskTO> tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -729,7 +744,9 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n         assertNotNull(tasks);\n         assertFalse(tasks.getResult().isEmpty());\n \n@@ -753,7 +770,9 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();\n@@ -773,7 +792,9 @@ public void verifyTaskRegistration() {\n         userService.delete(userTO.getKey());\n \n         // get the new task list\n-        tasks = taskService.list(TaskType.PROPAGATION, 1, 1);\n+        tasks = taskService.list(\n+                TaskType.PROPAGATION,\n+                SyncopeClient.getListQueryBuilder().page(1).size(1).build());\n \n         maxKey = newMaxKey;\n         newMaxKey = tasks.getResult().iterator().next().getKey();"},{"sha":"a86ca777fb78f5b90ca8937935c6597870d16a19","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=bc2afa9a4cc2b9d0935c39d894f791f71bb1ec31","patch":"@@ -326,7 +326,7 @@ under the License.\n     <connid.ldap.version>1.4.0</connid.ldap.version>\n     <connid.ad.version>1.2.2</connid.ad.version>\n \n-    <cxf.version>3.0.4</cxf.version>\n+    <cxf.version>3.0.5-SNAPSHOT</cxf.version>\n \n     <camel.version>2.15.1</camel.version>\t\n "}]}