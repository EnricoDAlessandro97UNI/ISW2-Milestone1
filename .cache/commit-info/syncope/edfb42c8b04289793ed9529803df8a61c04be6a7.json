{"sha":"edfb42c8b04289793ed9529803df8a61c04be6a7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmVkZmI0MmM4YjA0Mjg5NzkzZWQ5NTI5ODAzZGY4YTYxYzA0YmU2YTc=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2019-09-04T10:43:51Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@users.noreply.github.com","date":"2019-09-04T10:43:51Z"},"message":"SYNCOPE-1332: Java 11 language features; use Optional where possible (#108)","tree":{"sha":"6cac0edda877977312b780591e576962daef2f63","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6cac0edda877977312b780591e576962daef2f63"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/edfb42c8b04289793ed9529803df8a61c04be6a7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/edfb42c8b04289793ed9529803df8a61c04be6a7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/edfb42c8b04289793ed9529803df8a61c04be6a7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/edfb42c8b04289793ed9529803df8a61c04be6a7/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ac69701ffa8de228575349c28396f6113849ffeb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ac69701ffa8de228575349c28396f6113849ffeb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ac69701ffa8de228575349c28396f6113849ffeb"}],"stats":{"total":863,"additions":425,"deletions":438},"files":[{"sha":"e7006c7cacaad19e8934e0436d3e5f4158421c8b","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjectListViewPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -69,7 +69,7 @@ protected Component getValueComponent(final String key, final ConnObjectTO bean)\n                 Optional<Attr> attrTO =\n                         bean.getAttrs().stream().filter(object -> object.getSchema().equals(key)).findAny();\n \n-                return !attrTO.isPresent() || attrTO.get().getValues().isEmpty()\n+                return attrTO.isEmpty() || attrTO.get().getValues().isEmpty()\n                         ? new Label(\"field\", StringUtils.EMPTY)\n                         : new CollectionPanel(\"field\", attrTO.get().getValues());\n             }"},{"sha":"07cdc8557d7d6015e990460f713fb3884a1b5ee0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -24,6 +24,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -373,7 +374,7 @@ public void setAnyType(final String anyType) {\n         }\n \n         public String getImplKey() {\n-            return impl == null ? null : impl.getKey();\n+            return Optional.ofNullable(impl).map(ImplementationTO::getKey).orElse(null);\n         }\n \n         public void setImplKey(final String key) {"},{"sha":"fbaf8b3fa68d4faf62ea733d03fd8895b783dc81","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n@@ -293,9 +294,7 @@ protected List<StatusBean> getStatusBeans(final long first, final long count) {\n \n         @Override\n         public long size() {\n-            return fiql == null\n-                    ? 0\n-                    : restClient.count(SyncopeConstants.ROOT_REALM, fiql, type);\n+            return Optional.ofNullable(fiql).map(s -> restClient.count(SyncopeConstants.ROOT_REALM, s, type)).orElse(0);\n         }\n     }\n }"},{"sha":"d4ee2434ef33b62bb52a0e55b82e4974d7d0aee0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -28,6 +28,7 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n@@ -339,9 +340,9 @@ protected void populateItem(final ListItem<ConnInstanceTO> item) {\n                             hpos = 0.0;\n                         }\n \n-                        int x = (int) Math.round((parent == null ? origX : parent.getX())\n+                        int x = (int) Math.round((Optional.ofNullable(parent).map(TopologyNode::getX).orElse(origX))\n                                 + kx * Math.cos(hpos + Math.PI * (item.getIndex() + 1) / size));\n-                        int y = (int) Math.round((parent == null ? origY : parent.getY())\n+                        int y = (int) Math.round((Optional.ofNullable(parent).map(TopologyNode::getY).orElse(origY))\n                                 + 100 * Math.sin(hpos + Math.PI * (item.getIndex() + 1) / size));\n \n                         topologynode.setConnectionDisplayName(conn.getBundleName());\n@@ -435,9 +436,9 @@ protected void populateItem(final ListItem<TopologyNode> item) {\n                             hpos = 0.0;\n                         }\n \n-                        int x = (int) Math.round((parent == null ? origX : parent.getX())\n+                        int x = (int) Math.round((Optional.ofNullable(parent).map(TopologyNode::getX).orElse(origX))\n                                 + kx * Math.cos(hpos + Math.PI * (item.getIndex() + 1) / size));\n-                        int y = (int) Math.round((parent == null ? origY : parent.getY())\n+                        int y = (int) Math.round((Optional.ofNullable(parent).map(TopologyNode::getY).orElse(origY))\n                                 + ky * Math.sin(hpos + Math.PI * (item.getIndex() + 1) / size));\n \n                         topologynode.setX(x);"},{"sha":"81971ba468c79e1b5587756acd9b99c20ad14cce","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvision.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvision.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,8 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n@@ -87,9 +89,7 @@ public final void setOrgUnitTO(final OrgUnitTO orgUnitTO) {\n     @Override\n     public String getKey() {\n         return provisionTO == null\n-                ? orgUnitTO == null\n-                        ? null\n-                        : orgUnitTO.getKey()\n+                ? Optional.ofNullable(orgUnitTO).map(OrgUnitTO::getKey).orElse(null)\n                 : provisionTO.getKey();\n     }\n \n@@ -113,9 +113,7 @@ public void setAnyType(final String anyType) {\n \n     public String getObjectClass() {\n         return provisionTO == null\n-                ? orgUnitTO == null\n-                        ? null\n-                        : orgUnitTO.getObjectClass() : provisionTO.getObjectClass();\n+                ? Optional.ofNullable(orgUnitTO).map(OrgUnitTO::getObjectClass).orElse(null) : provisionTO.getObjectClass();\n     }\n \n     public void setObjectClass(final String objectClass) {\n@@ -131,7 +129,7 @@ public List<String> getAuxClasses() {\n     }\n \n     public boolean isIgnoreCaseMatch() {\n-        return provisionTO == null ? orgUnitTO.isIgnoreCaseMatch() : provisionTO.isIgnoreCaseMatch();\n+        return Optional.ofNullable(provisionTO).map(ProvisionTO::isIgnoreCaseMatch).orElseGet(() -> orgUnitTO.isIgnoreCaseMatch());\n     }\n \n     public void setIgnoreCaseMatch(final boolean ignoreCaseMatch) {\n@@ -144,9 +142,7 @@ public void setIgnoreCaseMatch(final boolean ignoreCaseMatch) {\n \n     public String getConnObjectLink() {\n         return provisionTO == null\n-                ? orgUnitTO == null\n-                        ? null\n-                        : orgUnitTO.getConnObjectLink()\n+                ? Optional.ofNullable(orgUnitTO).map(OrgUnitTO::getConnObjectLink).orElse(null)\n                 : provisionTO.getMapping().getConnObjectLink();\n     }\n "},{"sha":"7836652f5b7d2c7e58966e8ae145762553010496","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -95,13 +96,11 @@ public ResourceProvisionPanel(\n             protected ResourceProvision getActualItem(\n                     final ResourceProvision item, final List<ResourceProvision> list) {\n \n-                return item == null\n-                        ? null\n-                        : list.stream().filter(in -> ((item.getKey() == null && in.getKey() == null)\n-                        || (in.getKey() != null && in.getKey().equals(item.getKey())))\n-                        && ((item.getAnyType() == null && in.getAnyType() == null)\n-                        || (in.getAnyType() != null && in.getAnyType().equals(item.getAnyType())))).\n-                                findAny().orElse(null);\n+                return Optional.ofNullable(item).map(resourceProvision -> list.stream().filter(in -> ((resourceProvision.getKey() == null && in.getKey() == null)\n+                    || (in.getKey() != null && in.getKey().equals(resourceProvision.getKey())))\n+                    && ((resourceProvision.getAnyType() == null && in.getAnyType() == null)\n+                    || (in.getAnyType() != null && in.getAnyType().equals(resourceProvision.getAnyType())))).\n+                    findAny().orElse(null)).orElse(null);\n             }\n \n             @Override\n@@ -315,7 +314,7 @@ private LoadableDetachableModel<List<String>> getAnyTypes() {\n             @Override\n             protected List<String> load() {\n                 List<String> anyTypes = new AnyTypeRestClient().list().stream().\n-                        filter(anyType -> !resourceTO.getProvision(anyType).isPresent()).\n+                        filter(anyType -> resourceTO.getProvision(anyType).isEmpty()).\n                         collect(Collectors.toList());\n                 if (resourceTO.getOrgUnit() == null) {\n                     anyTypes.add(SyncopeConstants.REALM_ANYTYPE);"},{"sha":"d3ffd91663f9f9ba585bb65e4ece3851fdb3384d","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/HttpResourceStream.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FHttpResourceStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FHttpResourceStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FHttpResourceStream.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,8 @@\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Optional;\n+\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n@@ -90,9 +92,7 @@ public String locationAsString() {\n \n     @Override\n     public String getContentType() {\n-        return contentType == null\n-                ? MediaType.APPLICATION_OCTET_STREAM\n-                : contentType;\n+        return Optional.ofNullable(contentType).orElse(MediaType.APPLICATION_OCTET_STREAM);\n     }\n \n     public String getFilename() {"},{"sha":"ce17bb6ef4df94bd149050a9a86dfd3a0ad22a9f","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/ajax/markup/html/LabelInfo.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fajax%2Fmarkup%2Fhtml%2FLabelInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fajax%2Fmarkup%2Fhtml%2FLabelInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fajax%2Fmarkup%2Fhtml%2FLabelInfo.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.client.ui.commons.ajax.markup.html;\n \n import java.util.Collection;\n+import java.util.Optional;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -32,7 +34,7 @@ public class LabelInfo extends Label {\n \n     public LabelInfo(final String id, final String title) {\n         super(id, StringUtils.EMPTY);\n-        this.title = title == null ? StringUtils.EMPTY : StringUtils.abbreviate(title, 30);\n+        this.title = Optional.ofNullable(title).map(s -> StringUtils.abbreviate(s, 30)).orElse(StringUtils.EMPTY);\n     }\n \n     public LabelInfo(final String id, final Collection<String> title) {"},{"sha":"d2967c1e550982175957b0b0de43c8f32b5a75e6","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxCheckBoxPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import java.io.Serializable;\n import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.common.lib.Attributable;\n@@ -114,7 +116,7 @@ public Boolean getObject() {\n             @Override\n             @SuppressWarnings(\"unchecked\")\n             public void setObject(final Boolean object) {\n-                item.setModelObject(object == null ? Boolean.FALSE.toString() : object.toString());\n+                item.setModelObject(Optional.ofNullable(object).map(Object::toString).orElseGet(Boolean.FALSE::toString));\n             }\n         };\n "},{"sha":"3074dbf16bc07389a94f91ed286a85a499a2b16b","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxSpinnerFieldPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -26,6 +26,8 @@\n import com.googlecode.wicket.jquery.ui.form.spinner.SpinnerBehavior;\n import java.io.Serializable;\n import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -167,7 +169,7 @@ public T getObject() {\n             @Override\n             @SuppressWarnings(\"unchecked\")\n             public void setObject(final T object) {\n-                item.setModelObject(object == null ? null : object.toString());\n+                item.setModelObject(Optional.ofNullable(object).map(Object::toString).orElse(null));\n             }\n         });\n "},{"sha":"d651784faa5015762f238a3d582e1314a0824ea2","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/DateFieldPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,8 @@\n import java.text.ParseException;\n import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.syncope.common.lib.Attributable;\n import org.apache.wicket.markup.head.IHeaderResponse;\n@@ -113,7 +115,7 @@ public Date getObject() {\n             @Override\n             @SuppressWarnings(\"unchecked\")\n             public void setObject(final Date object) {\n-                item.setModelObject(object != null ? fmt.format(object) : null);\n+                item.setModelObject(Optional.ofNullable(object).map(fmt::format).orElse(null));\n             }\n         };\n "},{"sha":"af762a5c5a07f9cef94a8f1cd5fd8cc8d43772c4","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/FieldPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,8 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.components.TooltipConfig;\n import java.io.Serializable;\n import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.Attributable;\n@@ -69,7 +71,7 @@ public FieldPanel<T> setTitle(final String title, final boolean html) {\n         this.title = title;\n         field.add(new PopoverBehavior(\n                 Model.<String>of(),\n-                title == null ? Model.<String>of() : Model.of(title),\n+            Optional.ofNullable(title).map(Model::of).orElseGet(Model::<String>of),\n                 new PopoverConfig().withHtml(html).withHoverTrigger().withPlacement(\n                         index.getObject() != null && index.getObject() == 0\n                         ? TooltipConfig.Placement.bottom"},{"sha":"dd0f335dfa3e56415ca75d6f7382d2dc26f5d44f","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/status/StatusUtils.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fstatus%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fstatus%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fstatus%2FStatusUtils.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -49,11 +49,9 @@ public static StatusBean getStatusBean(\n \n         if (connObjectTO != null) {\n             Boolean enabled = isEnabled(connObjectTO);\n-            statusBean.setStatus(enabled == null\n-                    ? (notUser ? Status.ACTIVE : Status.UNDEFINED)\n-                    : enabled\n-                            ? Status.ACTIVE\n-                            : Status.SUSPENDED);\n+            statusBean.setStatus(Optional.ofNullable(enabled).map(aBoolean -> aBoolean\n+                ? Status.ACTIVE\n+                : Status.SUSPENDED).orElseGet(() -> (notUser ? Status.ACTIVE : Status.UNDEFINED)));\n \n             statusBean.setConnObjectLink(getConnObjectLink(connObjectTO));\n         }\n@@ -70,11 +68,7 @@ public static StatusBean getStatusBean(\n \n         if (connObjectTO != null) {\n             Boolean enabled = isEnabled(connObjectTO);\n-            statusBean.setStatus(enabled == null\n-                    ? Status.ACTIVE\n-                    : enabled\n-                            ? Status.ACTIVE\n-                            : Status.SUSPENDED);\n+            statusBean.setStatus(Optional.ofNullable(enabled).filter(aBoolean -> !aBoolean).map(aBoolean -> Status.SUSPENDED).orElse(Status.ACTIVE));\n \n             statusBean.setConnObjectLink(getConnObjectLink(connObjectTO));\n         }\n@@ -90,7 +84,7 @@ public static Boolean isEnabled(final ConnObjectTO objectTO) {\n     }\n \n     private static String getConnObjectLink(final ConnObjectTO objectTO) {\n-        Optional<Attr> name = objectTO == null ? null : objectTO.getAttr(ConnIdSpecialName.NAME);\n+        Optional<Attr> name = Optional.ofNullable(objectTO).map(to -> to.getAttr(ConnIdSpecialName.NAME)).orElse(null);\n         return name != null && name.isPresent() && name.get().getValues() != null && !name.get().getValues().isEmpty()\n                 ? name.get().getValues().get(0)\n                 : null;"},{"sha":"4d7cd0b749aef3ec147f24ea7e997ff31e2e0b06","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/BookmarkablePageLinkBuilder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FBookmarkablePageLinkBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FBookmarkablePageLinkBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FBookmarkablePageLinkBuilder.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,8 @@\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n \n+import java.util.Optional;\n+\n public final class BookmarkablePageLinkBuilder {\n \n     public static <T extends BasePage> BookmarkablePageLink<T> build(\n@@ -36,7 +38,7 @@ public static <T extends BasePage> BookmarkablePageLink<T> build(\n         Class<T> pageClass = (Class<T>) SyncopeWebApplication.get().getPageClass(key);\n         return new BookmarkablePageLink<>(\n                 id,\n-                pageClass == null ? defaultPageClass : pageClass);\n+            Optional.ofNullable(pageClass).orElse(defaultPageClass));\n     }\n \n     private BookmarkablePageLinkBuilder() {"},{"sha":"1577765e382bf6384ab0b2566b25cc4014a08275","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -26,6 +26,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.Callable;\n import java.util.concurrent.CompletableFuture;\n@@ -156,7 +157,7 @@ public String getDomain() {\n     }\n \n     public String getJWT() {\n-        return client == null ? null : client.getJWT();\n+        return Optional.ofNullable(client).map(SyncopeClient::getJWT).orElse(null);\n     }\n \n     @Override"},{"sha":"b4b72bc5f1d58f1fbe4120b199b9c24598348623","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -110,9 +110,7 @@ public Iterator<A> iterator(final long first, final long count) {\n             SyncopeConsoleSession.get().error(e.getMessage());\n \n             Optional<AjaxRequestTarget> target = RequestCycle.get().find(AjaxRequestTarget.class);\n-            if (target.isPresent()) {\n-                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target.get());\n-            }\n+            target.ifPresent(ajaxRequestTarget -> ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(ajaxRequestTarget));\n         }\n \n         Collections.sort(result, comparator);\n@@ -125,7 +123,7 @@ public long size() {\n \n         try {\n             if (filtered) {\n-                result = fiql == null ? 0 : restClient.count(realm, fiql, type);\n+                result = Optional.ofNullable(fiql).map(s -> restClient.count(realm, s, type)).orElse(0);\n             } else {\n                 result = restClient.count(realm, null, type);\n             }\n@@ -134,9 +132,7 @@ public long size() {\n             SyncopeConsoleSession.get().error(e.getMessage());\n \n             Optional<AjaxRequestTarget> target = RequestCycle.get().find(AjaxRequestTarget.class);\n-            if (target.isPresent()) {\n-                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target.get());\n-            }\n+            target.ifPresent(ajaxRequestTarget -> ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(ajaxRequestTarget));\n         }\n \n         return result;"},{"sha":"3dc07ff314042d98df221697d51639b17a7aecdd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoImplementationInfoProvider.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -63,9 +63,7 @@ public List<String> getClasses(final ImplementationTO implementation, final View\n         if (viewMode == ViewMode.JAVA_CLASS) {\n             Optional<JavaImplInfo> javaClasses = SyncopeConsoleSession.get().getPlatformInfo().\n                     getJavaImplInfo(implementation.getType());\n-            classes = javaClasses.isPresent()\n-                    ? new ArrayList<>(javaClasses.get().getClasses())\n-                    : new ArrayList<>();\n+            classes = javaClasses.map(javaImplInfo -> new ArrayList<>(javaImplInfo.getClasses())).orElseGet(ArrayList::new);\n         } else if (viewMode == ViewMode.JSON_BODY) {\n             switch (implementation.getType()) {\n                 case IdRepoImplementationType.REPORTLET:"},{"sha":"83a6d67e601813ef8c3def8598bfb7b84f3317f7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/SortableAnyProviderComparator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,7 @@\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.Attr;\n@@ -103,7 +104,7 @@ public Comparable getObject() {\n \n             Comparable result = null;\n \n-            List<String> values = attr == null ? null : attr.getValues();\n+            List<String> values = Optional.ofNullable(attr).map(Attr::getValues).orElse(null);\n             if (values != null && !values.isEmpty()) {\n                 result = values.iterator().next();\n             }"},{"sha":"b39ae9adc4587d6f1a170c396bd22f02726ea3cc","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -399,9 +400,7 @@ private List<String> getSchemas() {\n             LOG.error(\"While reading all any types\", e);\n         }\n \n-        String[] anyTypeClasses = type == null\n-                ? new String[0]\n-                : type.getClasses().toArray(new String[] {});\n+        String[] anyTypeClasses = Optional.ofNullable(type).map(anyTypeTO -> anyTypeTO.getClasses().toArray(new String[]{})).orElseGet(() -> new String[0]);\n \n         List<String> result = new ArrayList<>();\n         result.add(\"username\");"},{"sha":"23f87cfb1ae5ad17fdc55601df4112d7c4d36642","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DirectoryPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,8 @@\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.syncope.client.console.PreferenceManager;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n@@ -276,8 +278,7 @@ private void updateResultTable(final boolean create) {\n     private void updateResultTable(final boolean create, final int rows) {\n         dataProvider = dataProvider();\n \n-        final int currentPage = resultTable != null\n-                ? (create ? (int) resultTable.getPageCount() - 1 : (int) resultTable.getCurrentPage()) : 0;\n+        final int currentPage = Optional.ofNullable(resultTable).map(table -> (create ? (int) table.getPageCount() - 1 : (int) table.getCurrentPage())).orElse(0);\n \n         // take care of restClient handle: maybe not useful to keep into\n         AjaxDataTablePanel.Builder<T, String> resultTableBuilder = new AjaxDataTablePanel.Builder<T, String>("},{"sha":"58a4b951975ab53ec847883cfde511b2238202e2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ListViewPanel.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -384,15 +384,11 @@ protected Component getValueComponent(final String key, final T bean) {\n \n             LOG.debug(\"Field value {}\", value);\n \n-            return value == null\n-                    ? new Label(\"field\", StringUtils.EMPTY)\n-                    : new Label(\"field\", new ResourceModel(value.toString(), value.toString()));\n+            return Optional.ofNullable(value).map(o -> new Label(\"field\", new ResourceModel(o.toString(), o.toString()))).orElseGet(() -> new Label(\"field\", StringUtils.EMPTY));\n         }\n \n         protected T getActualItem(final T item, final List<T> list) {\n-            return item == null\n-                    ? null\n-                    : list.stream().filter(object -> item.equals(object)).findAny().orElse(null);\n+            return Optional.ofNullable(item).map(t -> list.stream().filter(t::equals).findAny().orElse(null)).orElse(null);\n         }\n \n         @Override"},{"sha":"ba370405c056a2a061b69069f3052de686bbf1d6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -222,7 +222,7 @@ protected Component getValueComponent(final String key, final PropagationStatus\n                     ConnObjectTO afterObj = bean.getAfterObj();\n                     String remoteId = afterObj == null\n                             || afterObj.getAttrs().isEmpty()\n-                            || !afterObj.getAttr(ConnIdSpecialName.NAME).isPresent()\n+                            || afterObj.getAttr(ConnIdSpecialName.NAME).isEmpty()\n                             || afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues() == null\n                             || afterObj.getAttr(ConnIdSpecialName.NAME).get().getValues().isEmpty()\n                             ? StringUtils.EMPTY"},{"sha":"5408f65b017d24885644e1e96cda1985cff78b56","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.client.console.panels;\n \n import java.io.Serializable;\n+import java.util.Optional;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.status.StatusBean;\n@@ -151,9 +153,7 @@ public TogglePanel<T> addInnerObject(final Component... childs) {\n     }\n \n     protected void setHeader(final AjaxRequestTarget target, final String header) {\n-        this.header.setDefaultModelObject(header == null\n-                ? StringUtils.EMPTY\n-                : header.length() >= 40 ? (header.substring(0, 30) + \" ... \") : header);\n+        this.header.setDefaultModelObject(Optional.ofNullable(header).map(s -> s.length() >= 40 ? (s.substring(0, 30) + \" ... \") : s).orElse(StringUtils.EMPTY));\n         target.add(this.header);\n     }\n "},{"sha":"d85813053d296cd7a82d5b927cedbba14c518793","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -24,6 +24,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.regex.Pattern;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -453,7 +454,7 @@ public static String buildFIQL(\n             notTheFirst = true;\n         }\n \n-        String fiql = condition == null ? null : condition.query();\n+        String fiql = Optional.ofNullable(condition).map(CompleteCondition::query).orElse(null);\n         LOG.debug(\"Generated FIQL: {}\", fiql);\n \n         return fiql;"},{"sha":"bb5df33923980d545c7d52daf1fd28eae3c0dd9f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportExecutionDetails.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -35,6 +35,8 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.util.resource.IResourceStream;\n \n+import java.util.Optional;\n+\n /**\n  * Modal window with report executions.\n  */\n@@ -165,7 +167,7 @@ private void createResourceStream() {\n         @Override\n         protected String getFileName() {\n             createResourceStream();\n-            return stream == null ? null : stream.getFilename();\n+            return Optional.ofNullable(stream).map(HttpResourceStream::getFilename).orElse(null);\n         }\n \n         @Override"},{"sha":"838a3ed755bd0473be7d4c9b27a2ac771b9f153e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/BaseRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.client.console.rest;\n \n import java.net.URI;\n+import java.util.Optional;\n+\n import javax.ws.rs.core.HttpHeaders;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -86,8 +88,6 @@ protected static <E extends JAXRSService, T> T getObject(\n \n     protected static String getStatus(final int httpStatus) {\n         ExecStatus execStatus = ExecStatus.fromHttpStatus(httpStatus);\n-        return execStatus == null\n-                ? Constants.UNKNOWN\n-                : execStatus.name();\n+        return Optional.ofNullable(execStatus).map(Enum::name).orElse(Constants.UNKNOWN);\n     }\n }"},{"sha":"39a25ac33429d7bbb0023a265580790b08569b73","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -76,7 +77,7 @@ private static class PolicyComparator implements Comparator<PolicyTO>, Serializa\n \n         @Override\n         public int compare(final PolicyTO left, final PolicyTO right) {\n-            return left == null ? -1 : right == null ? 1 : left.getDescription().compareTo(right.getDescription());\n+            return Optional.ofNullable(left).map(to -> Optional.ofNullable(right).map(policyTO -> to.getDescription().compareTo(policyTO.getDescription())).orElse(1)).orElse(-1);\n         }\n \n     }"},{"sha":"27e2684bc490cb701453e7920a643f1904e7dc24","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/ConnObjectAttrColumn.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -50,7 +50,7 @@ public void populateItem(\n             final IModel<ConnObjectTO> rowModel) {\n \n         Optional<Attr> attr = rowModel.getObject().getAttr(name);\n-        List<String> values = attr.isPresent() ? attr.get().getValues() : null;\n+        List<String> values = attr.map(Attr::getValues).orElse(null);\n \n         if (values == null || values.isEmpty()) {\n             cellItem.add(new Label(componentId, \"\"));"},{"sha":"4e86dda8a3cd5d6c67108eea0d94e3cd5c5d5a2c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -270,7 +270,7 @@ private Pair<List<ProgressBean>, ReconciliationReport> parseReconciliationReport\n             exec = restClient.listRecentExecutions(ROWS).stream().\n                     filter(e -> reconciliationReportKey.equals(e.getRefKey())).findFirst();\n         }\n-        if (!exec.isPresent()) {\n+        if (exec.isEmpty()) {\n             LOG.error(\"Could not find the last execution of reconciliation report\");\n         } else {\n             Object entity = restClient.exportExecutionResult(\n@@ -312,7 +312,7 @@ private Pair<List<ProgressBean>, ReconciliationReport> parseReconciliationReport\n             }\n         }\n \n-        return Pair.of(beans, report == null ? new ReconciliationReport(new Date()) : report);\n+        return Pair.of(beans, Optional.ofNullable(report).orElseGet(() -> new ReconciliationReport(new Date())));\n     }\n \n     private class AnysReconciliationPanel extends DirectoryPanel<Any, Any, AnysReconciliationProvider, BaseRestClient> {\n@@ -400,7 +400,7 @@ public void populateItem(\n                                 filter(object -> resource.equals(object.getResource())).collect(Collectors.toList());\n \n                         Component content;\n-                        if (!missing.isPresent()) {\n+                        if (missing.isEmpty()) {\n                             if (misaligned == null || misaligned.isEmpty()) {\n                                 content = new Label(componentId, StringUtils.EMPTY);\n                             } else {"},{"sha":"5e6a15f5453a975d1fbac02464e8b17249780b84","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/reconciliation/ReconciliationReport.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReport.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n \n public class ReconciliationReport implements Serializable {\n \n@@ -44,7 +45,7 @@ public ReconciliationReport(final Date run) {\n     }\n \n     public Date getRun() {\n-        return run == null ? null : new Date(run.getTime());\n+        return Optional.ofNullable(run).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public Anys getUsers() {"},{"sha":"b04e0421415795c022ef644a0c426d00a43f5074","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/reconciliation/ReconciliationReportParser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReportParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReportParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2Freconciliation%2FReconciliationReportParser.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -130,7 +130,7 @@ public static ReconciliationReport parse(final Date run, final InputStream in) t\n                         break;\n \n                     case \"value\":\n-                        Set<String> set = onSyncope == null ? onResource : onSyncope;\n+                        Set<String> set = Optional.ofNullable(onSyncope).orElse(onResource);\n                         set.add(streamReader.getElementText());\n                         break;\n "},{"sha":"8d028cac16a0a5bc5eaffd56955fc1e7b60833b3","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectWizardBuilder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import java.io.Serializable;\n import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.syncope.client.console.layout.AnyObjectForm;\n import org.apache.syncope.client.console.layout.AnyObjectFormLayoutInfo;\n import org.apache.syncope.client.console.rest.AnyObjectRestClient;\n@@ -45,7 +47,7 @@ public AnyObjectWizardBuilder(\n             final AnyObjectFormLayoutInfo formLayoutInfo,\n             final PageReference pageRef) {\n \n-        super(anyObjectTO == null ? null : new AnyObjectWrapper(anyObjectTO), anyTypeClasses, formLayoutInfo, pageRef);\n+        super(Optional.ofNullable(anyObjectTO).map(AnyObjectWrapper::new).orElse(null), anyTypeClasses, formLayoutInfo, pageRef);\n     }\n \n     /**"},{"sha":"db5be3af510c9a05274ab66b1621c1a263274ce2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyWizardBuilder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -184,12 +184,12 @@ protected void fixPlainAndVirAttrs(final AnyTO updated, final AnyTO original) {\n         // re-add to the updated object any missing plain or virtual attribute (compared to original): this to cope with\n         // form layout, which might have not included some plain or virtual attributes\n         for (Attr plainAttr : original.getPlainAttrs()) {\n-            if (!updated.getPlainAttr(plainAttr.getSchema()).isPresent()) {\n+            if (updated.getPlainAttr(plainAttr.getSchema()).isEmpty()) {\n                 updated.getPlainAttrs().add(plainAttr);\n             }\n         }\n         for (Attr virAttr : original.getVirAttrs()) {\n-            if (!updated.getVirAttr(virAttr.getSchema()).isPresent()) {\n+            if (updated.getVirAttr(virAttr.getSchema()).isEmpty()) {\n                 updated.getVirAttrs().add(virAttr);\n             }\n         }\n@@ -198,10 +198,10 @@ protected void fixPlainAndVirAttrs(final AnyTO updated, final AnyTO original) {\n             GroupableRelatableTO.class.cast(original).getMemberships().forEach(oMemb -> {\n                 GroupableRelatableTO.class.cast(updated).getMembership(oMemb.getGroupKey()).ifPresent(uMemb -> {\n                     oMemb.getPlainAttrs().stream().\n-                            filter(attr -> !uMemb.getPlainAttr(attr.getSchema()).isPresent()).\n+                            filter(attr -> uMemb.getPlainAttr(attr.getSchema()).isEmpty()).\n                             forEach(attr -> uMemb.getPlainAttrs().add(attr));\n                     oMemb.getVirAttrs().stream().\n-                            filter(attr -> !uMemb.getVirAttr(attr.getSchema()).isPresent()).\n+                            filter(attr -> uMemb.getVirAttr(attr.getSchema()).isEmpty()).\n                             forEach(attr -> uMemb.getVirAttrs().add(attr));\n                 });\n             });"},{"sha":"2cf449f6aca9b5d00afb2e1b1f5d43eb967a3c89","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/ConnObjectPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.ListUtils;\n@@ -95,8 +96,8 @@ protected void populateItem(final ListItem<String> item) {\n                 final String prop = item.getModelObject();\n \n                 final Fragment valueFragment;\n-                final Attr left = leftProfile == null ? null : leftProfile.get(prop);\n-                final Attr right = rightProfile == null ? null : rightProfile.get(prop);\n+                final Attr left = Optional.ofNullable(leftProfile).map(stringAttrMap -> stringAttrMap.get(prop)).orElse(null);\n+                final Attr right = Optional.ofNullable(rightProfile).map(profile -> profile.get(prop)).orElse(null);\n \n                 valueFragment = new Fragment(\"value\", \"doubleValue\", ConnObjectPanel.this);\n                 valueFragment.add(getValuePanel(\"leftAttribute\", prop, left)."},{"sha":"9f701398ce118fbc38334ee26b176fddb1a84125","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWizardBuilder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,8 @@\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import java.io.Serializable;\n import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.common.util.CollectionUtils;\n import org.apache.syncope.client.console.layout.GroupForm;\n@@ -48,7 +50,7 @@ public GroupWizardBuilder(\n             final GroupFormLayoutInfo formLayoutInfo,\n             final PageReference pageRef) {\n \n-        super(groupTO == null ? null : new GroupWrapper(groupTO), anyTypeClasses, formLayoutInfo, pageRef);\n+        super(Optional.ofNullable(groupTO).map(GroupWrapper::new).orElse(null), anyTypeClasses, formLayoutInfo, pageRef);\n     }\n \n     /**"},{"sha":"e7abff7b384027a6f442d2dedd98cbe9c9e2ca33","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -502,7 +502,7 @@ protected void setExternalAction(final Attr attrTO, final AbstractFieldPanel<?>\n                     ? Optional.empty()\n                     : previousObject.getPlainAttr(attrTO.getSchema());\n             if (previousObject != null\n-                    && ((!prevAttr.isPresent() && attrTO.getValues().stream().anyMatch(StringUtils::isNotBlank))\n+                    && ((prevAttr.isEmpty() && attrTO.getValues().stream().anyMatch(StringUtils::isNotBlank))\n                     || (prevAttr.isPresent() && !ListUtils.isEqualList(\n                     prevAttr.get().getValues().stream().\n                             filter(StringUtils::isNotBlank).collect(Collectors.toList()),"},{"sha":"214e5730e41da60408f1a20eb575bf6bffec6679","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -26,6 +26,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -273,7 +274,7 @@ public AnyTypeTO getObject() {\n \n                 @Override\n                 public void setObject(final AnyTypeTO object) {\n-                    rel.setOtherEndType(object == null ? null : object.getKey());\n+                    rel.setOtherEndType(Optional.ofNullable(object).map(AnyTypeTO::getKey).orElse(null));\n                 }\n             }, false);\n             otherType.setChoices(availableTypes);"},{"sha":"40f46f10ecb8dffa221b76ed6c73e4e1272823bf","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserWizardBuilder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import java.io.Serializable;\n import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.rest.UserRestClient;\n import org.apache.syncope.client.ui.commons.layout.UserForm;\n@@ -129,7 +131,7 @@ protected Details<UserTO> addOptionalDetailsPanel(final AnyWrapper<UserTO> model\n      */\n     @Override\n     public UserWizardBuilder setItem(final AnyWrapper<UserTO> item) {\n-        super.setItem(item == null ? null : new UserWrapper(item.getInnerObject()));\n+        super.setItem(Optional.ofNullable(item).map(userTOAnyWrapper -> new UserWrapper(userTOAnyWrapper.getInnerObject())).orElse(null));\n         return this;\n     }\n }"},{"sha":"c1d45c8b616aeedeec71401aeb3f45b1cac93cf2","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.concurrent.Callable;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n@@ -97,7 +98,7 @@ public void cleanup() {\n     }\n \n     public String getJWT() {\n-        return client == null ? null : client.getJWT();\n+        return Optional.ofNullable(client).map(SyncopeClient::getJWT).orElse(null);\n     }\n \n     @Override"},{"sha":"27c30f6f2a372c688b0449f7fb500b2858efa3ba","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/navigation/Navbar.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -142,17 +142,15 @@ public void setActiveNavItem(final String id) {\n         Optional<WebMarkupContainer> found = navbarItems.stream().filter(containingLI -> {\n             return containingLI.getMarkupId().equals(id);\n         }).findFirst();\n-        if (found.isPresent()) {\n-            found.get().add(new Behavior() {\n+        found.ifPresent(components -> components.add(new Behavior() {\n \n-                private static final long serialVersionUID = -5775607340182293596L;\n+            private static final long serialVersionUID = -5775607340182293596L;\n \n-                @Override\n-                public void onComponentTag(final Component component, final ComponentTag tag) {\n-                    tag.put(\"class\", \"active\");\n-                }\n-            });\n-        }\n+            @Override\n+            public void onComponentTag(final Component component, final ComponentTag tag) {\n+                tag.put(\"class\", \"active\");\n+            }\n+        }));\n     }\n \n }"},{"sha":"bd1402488e6a6c691ed7aee54fb44a483ddc842e","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/UserWizardBuilder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserWizardBuilder.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import java.io.Serializable;\n import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.ui.commons.layout.UserForm;\n import org.apache.syncope.client.enduser.layout.UserFormLayoutInfo;\n@@ -123,7 +125,7 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n      */\n     @Override\n     public UserWizardBuilder setItem(final AnyWrapper<UserTO> item) {\n-        super.setItem(item == null ? null : new UserWrapper(item.getInnerObject()));\n+        super.setItem(Optional.ofNullable(item).map(userTOAnyWrapper -> new UserWrapper(userTOAnyWrapper.getInnerObject())).orElse(null));\n         return this;\n     }\n "},{"sha":"ed3879ab53b668fa26692be2135fd75e548cd32f","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -26,6 +26,8 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n+\n import javax.ws.rs.core.MediaType;\n import javax.xml.bind.Marshaller;\n import org.apache.commons.lang3.StringUtils;\n@@ -149,9 +151,7 @@ protected JAXRSClientFactoryBean defaultRestClientFactoryBean() {\n     }\n \n     public JacksonJaxbJsonProvider getJsonProvider() {\n-        return jsonProvider == null\n-                ? defaultJsonProvider()\n-                : jsonProvider;\n+        return Optional.ofNullable(jsonProvider).orElseGet(this::defaultJsonProvider);\n     }\n \n     public void setJsonProvider(final JacksonJaxbJsonProvider jsonProvider) {\n@@ -170,9 +170,7 @@ public SyncopeClientFactoryBean setJaxbProvider(final JAXBElementProvider<?> jax\n     }\n \n     public RestClientExceptionMapper getExceptionMapper() {\n-        return exceptionMapper == null\n-                ? defaultExceptionMapper()\n-                : exceptionMapper;\n+        return Optional.ofNullable(exceptionMapper).orElseGet(this::defaultExceptionMapper);\n     }\n \n     public SyncopeClientFactoryBean setExceptionMapper(final RestClientExceptionMapper exceptionMapper) {\n@@ -190,9 +188,7 @@ public SyncopeClientFactoryBean setAddress(final String address) {\n     }\n \n     public ContentType getContentType() {\n-        return contentType == null\n-                ? ContentType.JSON\n-                : contentType;\n+        return Optional.ofNullable(contentType).orElse(ContentType.JSON);\n     }\n \n     public SyncopeClientFactoryBean setContentType(final ContentType contentType) {\n@@ -243,9 +239,7 @@ public TLSClientParameters getTlsClientParameters() {\n     }\n \n     public JAXRSClientFactoryBean getRestClientFactoryBean() {\n-        return restClientFactoryBean == null\n-                ? defaultRestClientFactoryBean()\n-                : restClientFactoryBean;\n+        return Optional.ofNullable(restClientFactoryBean).orElseGet(this::defaultRestClientFactoryBean);\n     }\n \n     public SyncopeClientFactoryBean setRestClientFactoryBean(final JAXRSClientFactoryBean restClientFactoryBean) {"},{"sha":"5f5097f63d000db37222a1c54ff2a4662a2fd08b","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractHistoryConf.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractHistoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractHistoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractHistoryConf.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.common.lib.to;\n \n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n@@ -57,14 +59,10 @@ public void setCreator(final String creator) {\n     }\n \n     public Date getCreation() {\n-        return creation == null\n-                ? null\n-                : new Date(creation.getTime());\n+        return Optional.ofNullable(creation).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public void setCreation(final Date creation) {\n-        this.creation = creation == null\n-                ? null\n-                : new Date(creation.getTime());\n+        this.creation = Optional.ofNullable(creation).map(date -> new Date(date.getTime())).orElse(null);\n     }\n }"},{"sha":"d5f7426e2efb344cb14dccccb606bc17f6a92dac","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,8 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n+\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n@@ -61,9 +63,7 @@ protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n \n     @Override\n     public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n-        return connObjectKeyItem == null\n-                ? remove(getConnObjectKeyItem())\n-                : addConnObjectKeyItem(connObjectKeyItem);\n+        return Optional.ofNullable(connObjectKeyItem).map(this::addConnObjectKeyItem).orElseGet(() -> remove(getConnObjectKeyItem()));\n     }\n \n     @XmlElementWrapper(name = \"items\")\n@@ -76,7 +76,7 @@ public List<ItemTO> getItems() {\n \n     @Override\n     public boolean add(final ItemTO item) {\n-        return item == null ? false : this.items.contains(item) || this.items.add(item);\n+        return Optional.ofNullable(item).filter(itemTO -> this.items.contains(itemTO) || this.items.add(itemTO)).isPresent();\n     }\n \n     public boolean remove(final ItemTO item) {"},{"sha":"5e3e1f10436c17b8ef0fdfd46b0a891f4cd79b06","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/OrgUnitTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,8 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n+\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n@@ -100,9 +102,7 @@ protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n \n     @Override\n     public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n-        return connObjectKeyItem == null\n-                ? remove(getConnObjectKeyItem())\n-                : addConnObjectKeyItem(connObjectKeyItem);\n+        return Optional.ofNullable(connObjectKeyItem).map(this::addConnObjectKeyItem).orElseGet(() -> remove(getConnObjectKeyItem()));\n     }\n \n     @XmlElementWrapper(name = \"items\")\n@@ -115,7 +115,7 @@ public List<ItemTO> getItems() {\n \n     @Override\n     public boolean add(final ItemTO item) {\n-        return item == null ? false : this.items.contains(item) || this.items.add(item);\n+        return Optional.ofNullable(item).filter(itemTO -> this.items.contains(itemTO) || this.items.add(itemTO)).isPresent();\n     }\n \n     public boolean remove(final ItemTO item) {"},{"sha":"0cdd0330ed39d42f2ce9ed8a0ada68abc8bd69dc","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/RemediationTO.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n@@ -123,15 +125,11 @@ public void setError(final String error) {\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public Date getInstant() {\n-        return instant == null\n-                ? null\n-                : new Date(instant.getTime());\n+        return Optional.ofNullable(instant).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public void setInstant(final Date instant) {\n-        this.instant = instant == null\n-                ? null\n-                : new Date(instant.getTime());\n+        this.instant = Optional.ofNullable(instant).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)"},{"sha":"6a7a1411b98bf432242c5fd8904ea34bdb689b28","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/SyncopeClientCompositeException.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientCompositeException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientCompositeException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeClientCompositeException.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -70,9 +70,7 @@ public boolean addException(final SyncopeClientException exception) {\n         Optional<SyncopeClientException> alreadyAdded =\n                 exceptions.stream().filter(ex -> ex.getType() == exception.getType()).findFirst();\n \n-        return alreadyAdded.isPresent()\n-                ? alreadyAdded.get().getElements().addAll(exception.getElements())\n-                : exceptions.add(exception);\n+        return alreadyAdded.map(e -> e.getElements().addAll(exception.getElements())).orElseGet(() -> exceptions.add(exception));\n     }\n \n     @Override"},{"sha":"cc904474a8726ede29ef095a7c10171d91720390","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/log/EventCategory.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FEventCategory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FEventCategory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FEventCategory.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,8 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n+\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n@@ -64,7 +66,7 @@ public AuditElements.EventCategoryType getType() {\n     }\n \n     public void setType(final AuditElements.EventCategoryType type) {\n-        this.type = type == null ? AuditElements.EventCategoryType.CUSTOM : type;\n+        this.type = Optional.ofNullable(type).orElse(AuditElements.EventCategoryType.CUSTOM);\n     }\n \n     public String getCategory() {"},{"sha":"a494c13b549a22feb5ce0b49298d7676d9f994e6","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/ProvisioningPolicyTO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FProvisioningPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FProvisioningPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FProvisioningPolicyTO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,8 @@\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Optional;\n+\n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n@@ -41,9 +43,7 @@ public abstract class ProvisioningPolicyTO extends PolicyTO {\n     private final Map<String, String> correlationRules = new HashMap<>();\n \n     public ConflictResolutionAction getConflictResolutionAction() {\n-        return conflictResolutionAction == null\n-                ? ConflictResolutionAction.IGNORE\n-                : conflictResolutionAction;\n+        return Optional.ofNullable(conflictResolutionAction).orElse(ConflictResolutionAction.IGNORE);\n     }\n \n     public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {"},{"sha":"68158c093714bbf509da2fca7d032d03fd61ce9d","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/report/StaticReportletConf.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,8 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n+\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n@@ -55,15 +57,11 @@ public StaticReportletConf(final String name) {\n     }\n \n     public Date getDateField() {\n-        return dateField == null\n-                ? null\n-                : new Date(dateField.getTime());\n+        return Optional.ofNullable(dateField).map(field -> new Date(field.getTime())).orElse(null);\n     }\n \n     public void setDateField(final Date dateField) {\n-        this.dateField = dateField == null\n-                ? null\n-                : new Date(dateField.getTime());\n+        this.dateField = Optional.ofNullable(dateField).map(field -> new Date(field.getTime())).orElse(null);\n     }\n \n     public Double getDoubleField() {"},{"sha":"40ddfbfcf1da0363da40209541f9b590d65d22fb","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractAnnotatedBean.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAnnotatedBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAnnotatedBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAnnotatedBean.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n@@ -116,9 +118,7 @@ public void setLastChangeDate(final Date lastChangeDate) {\n     public String getETagValue() {\n         Date etagDate = getLastChangeDate() == null\n                 ? getCreationDate() : getLastChangeDate();\n-        return etagDate == null\n-                ? StringUtils.EMPTY\n-                : String.valueOf(etagDate.getTime());\n+        return Optional.ofNullable(etagDate).map(date -> String.valueOf(date.getTime())).orElse(StringUtils.EMPTY);\n     }\n \n     @Override"},{"sha":"b5a68110faf778424cea0e37359a4c844d3dd37c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractStartEndBean.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n@@ -36,28 +38,20 @@ public class AbstractStartEndBean extends BaseBean {\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public Date getStart() {\n-        return start == null\n-                ? null\n-                : new Date(start.getTime());\n+        return Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public void setStart(final Date start) {\n-        this.start = start == null\n-                ? null\n-                : new Date(start.getTime());\n+        this.start = Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public Date getEnd() {\n-        return end == null\n-                ? null\n-                : new Date(end.getTime());\n+        return Optional.ofNullable(end).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public void setEnd(final Date end) {\n-        this.end = end == null\n-                ? null\n-                : new Date(end.getTime());\n+        this.end = Optional.ofNullable(end).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Override"},{"sha":"e3e00f652b878b513abae61b19ae59a19f15b7f9","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AccessTokenTO.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.common.lib.to;\n \n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.BaseBean;\n@@ -56,15 +58,11 @@ public void setBody(final String body) {\n     }\n \n     public Date getExpiryTime() {\n-        return expiryTime == null\n-                ? null\n-                : new Date(expiryTime.getTime());\n+        return Optional.ofNullable(expiryTime).map(time -> new Date(time.getTime())).orElse(null);\n     }\n \n     public void setExpiryTime(final Date expiryTime) {\n-        this.expiryTime = expiryTime == null\n-                ? null\n-                : new Date(expiryTime.getTime());\n+        this.expiryTime = Optional.ofNullable(expiryTime).map(time -> new Date(time.getTime())).orElse(null);\n     }\n \n     public String getOwner() {"},{"sha":"66ceed9dc2d6a52dd11568f1dd2b3435add52322","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/JobTO.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import java.io.Serializable;\n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.types.JobType;\n@@ -85,15 +87,11 @@ public void setScheduled(final boolean scheduled) {\n     }\n \n     public Date getStart() {\n-        return start == null\n-                ? null\n-                : new Date(start.getTime());\n+        return Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public void setStart(final Date start) {\n-        this.start = start == null\n-                ? null\n-                : new Date(start.getTime());\n+        this.start = Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public String getStatus() {"},{"sha":"ec4eaeb8b46febf02cdb7cf5d37f36e6a0cfe7f5","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ReportTO.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,8 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n+\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n@@ -108,19 +110,19 @@ public void setLatestExecStatus(final String latestExecStatus) {\n     }\n \n     public Date getLastExec() {\n-        return lastExec == null ? null : new Date(lastExec.getTime());\n+        return Optional.ofNullable(lastExec).map(exec -> new Date(exec.getTime())).orElse(null);\n     }\n \n     public void setLastExec(final Date lastExec) {\n-        this.lastExec = lastExec == null ? null : new Date(lastExec.getTime());\n+        this.lastExec = Optional.ofNullable(lastExec).map(exec -> new Date(exec.getTime())).orElse(null);\n     }\n \n     public Date getNextExec() {\n-        return nextExec == null ? null : new Date(nextExec.getTime());\n+        return Optional.ofNullable(nextExec).map(exec -> new Date(exec.getTime())).orElse(null);\n     }\n \n     public void setNextExec(final Date nextExec) {\n-        this.nextExec = nextExec == null ? null : new Date(nextExec.getTime());\n+        this.nextExec = Optional.ofNullable(nextExec).map(exec -> new Date(exec.getTime())).orElse(null);\n     }\n \n     public boolean isActive() {"},{"sha":"3bb8162b5393580cb48a11014cbd9ce3cd148bc4","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/SchedTaskTO.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,8 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n@@ -62,11 +64,11 @@ public String getDiscriminator() {\n     }\n \n     public Date getStartAt() {\n-        return startAt == null ? null : new Date(startAt.getTime());\n+        return Optional.ofNullable(startAt).map(at -> new Date(at.getTime())).orElse(null);\n     }\n \n     public void setStartAt(final Date start) {\n-        this.startAt = start == null ? null : new Date(start.getTime());\n+        this.startAt = Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public String getCronExpression() {\n@@ -87,20 +89,20 @@ public void setJobDelegate(final String jobDelegate) {\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public Date getLastExec() {\n-        return lastExec == null ? null : new Date(lastExec.getTime());\n+        return Optional.ofNullable(lastExec).map(exec -> new Date(exec.getTime())).orElse(null);\n     }\n \n     public void setLastExec(final Date lastExec) {\n-        this.lastExec = lastExec == null ? null : new Date(lastExec.getTime());\n+        this.lastExec = Optional.ofNullable(lastExec).map(exec -> new Date(exec.getTime())).orElse(null);\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n     public Date getNextExec() {\n-        return nextExec == null ? null : new Date(nextExec.getTime());\n+        return Optional.ofNullable(nextExec).map(exec -> new Date(exec.getTime())).orElse(null);\n     }\n \n     public void setNextExec(final Date nextExec) {\n-        this.nextExec = nextExec == null ? null : new Date(nextExec.getTime());\n+        this.nextExec = Optional.ofNullable(nextExec).map(exec -> new Date(exec.getTime())).orElse(null);\n     }\n \n     public String getDescription() {"},{"sha":"bebcb4d032fca0226082336820e82575cc97b6e7","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,8 @@\n import java.io.Serializable;\n import java.text.ParseException;\n import java.util.Map;\n+import java.util.Optional;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n@@ -63,11 +65,11 @@ public AuditLoggerName(\n \n         super();\n \n-        this.type = type == null ? AuditElements.EventCategoryType.CUSTOM : type;\n+        this.type = Optional.ofNullable(type).orElse(EventCategoryType.CUSTOM);\n         this.category = category;\n         this.subcategory = subcategory;\n         this.event = event;\n-        this.result = result == null ? Result.SUCCESS : result;\n+        this.result = Optional.ofNullable(result).orElse(Result.SUCCESS);\n     }\n \n     public AuditElements.EventCategoryType getType() {"},{"sha":"1043edb9a319f7c3e4b3f250e077b99002895f55","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadLineReader.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadLineReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadLineReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadLineReader.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -25,6 +25,8 @@\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n+\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -133,9 +135,7 @@ private String readLine() throws IOException {\n \n             if (currentLine.startsWith(HttpHeaders.CONTENT_TYPE)) {\n                 String charsetString = multipartMixed.getParameters().get(MediaType.CHARSET_PARAMETER);\n-                currentCharset = charsetString == null\n-                        ? DEFAULT_CHARSET\n-                        : Charset.forName(charsetString);\n+                currentCharset = Optional.ofNullable(charsetString).map(Charset::forName).orElse(DEFAULT_CHARSET);\n \n                 currentBoundary = SyncopeConstants.DOUBLE_DASH + multipartMixed.getParameters().\n                         get(RESTHeaders.BOUNDARY_PARAMETER);"},{"sha":"104efa7a03f8a843a6590cfdc92e8e707514fed3","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyQuery.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,8 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n+import java.util.Optional;\n+\n public class AnyQuery extends AbstractQuery {\n \n     private static final long serialVersionUID = -6736562952418964707L;\n@@ -68,7 +70,7 @@ public void setRealm(final String realm) {\n     }\n \n     public Boolean getDetails() {\n-        return details == null ? Boolean.TRUE : details;\n+        return Optional.ofNullable(details).orElse(Boolean.TRUE);\n     }\n \n     @QueryParam(JAXRSService.PARAM_DETAILS)"},{"sha":"9c8d172c8d794906ba15917b88635b9b44419975","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ConnObjectTOListQuery.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOListQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOListQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOListQuery.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.common.rest.api.beans;\n \n import java.io.Serializable;\n+import java.util.Optional;\n+\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.ws.rs.DefaultValue;\n@@ -63,11 +65,9 @@ public ConnObjectTOListQuery build() {\n     private String orderBy;\n \n     public Integer getSize() {\n-        return size == null\n-                ? 25\n-                : size > MAX_SIZE\n-                        ? MAX_SIZE\n-                        : size;\n+        return Optional.ofNullable(size).map(integer -> integer > MAX_SIZE\n+            ? MAX_SIZE\n+            : integer).orElse(25);\n     }\n \n     @Min(1)"},{"sha":"19472067c52b59420013a506ff8cd54d0705bd89","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecuteQuery.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecuteQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecuteQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecuteQuery.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import java.io.Serializable;\n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.PathParam;\n@@ -86,7 +88,7 @@ public void setStartAt(final Date startAt) {\n     }\n \n     public Boolean getDryRun() {\n-        return dryRun == null ? Boolean.FALSE : dryRun;\n+        return Optional.ofNullable(dryRun).orElse(Boolean.FALSE);\n     }\n \n     @QueryParam(\"dryRun\")"},{"sha":"6b57ac5a24707d3ef5e68c729aefa15679c3f2ab","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/TaskQuery.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -27,6 +27,8 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n+import java.util.Optional;\n+\n public class TaskQuery extends AbstractQuery {\n \n     private static final long serialVersionUID = -8792519310029596796L;\n@@ -129,7 +131,7 @@ public void setEntityKey(final String entityKey) {\n     }\n \n     public Boolean getDetails() {\n-        return details == null ? Boolean.TRUE : details;\n+        return Optional.ofNullable(details).orElse(Boolean.TRUE);\n     }\n \n     @QueryParam(JAXRSService.PARAM_DETAILS)"},{"sha":"44c56cd16a9084f717d604c22ec0cc3e029f1d5f","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperConfParamOps.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOps.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,7 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.TreeMap;\n import org.apache.curator.framework.CuratorFramework;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n@@ -76,7 +77,7 @@ public <T> T get(final String domain, final String key, final T defaultValue, fi\n             throw new KeymasterException(e);\n         }\n \n-        return value == null ? defaultValue : value;\n+        return Optional.ofNullable(value).orElse(defaultValue);\n     }\n \n     @Override"},{"sha":"abf07d629c41b6fc38c2b8487e96e562b94db09a","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -192,7 +192,7 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n                 throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n             }\n             Optional<? extends Provision> provision = resource.getProvision(anyType);\n-            if (!provision.isPresent()) {\n+            if (provision.isEmpty()) {\n                 throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + \"'\");\n             }\n \n@@ -225,7 +225,7 @@ public void removeSyncToken(final String key, final String anyTypeKey) {\n                 throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n             }\n             Optional<? extends Provision> provision = resource.getProvision(anyType);\n-            if (!provision.isPresent()) {\n+            if (provision.isEmpty()) {\n                 throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + \"'\");\n             }\n \n@@ -288,7 +288,7 @@ private Triple<ExternalResource, AnyType, Provision> connObjectInit(\n             throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n         }\n         Optional<? extends Provision> provision = resource.getProvision(anyType);\n-        if (!provision.isPresent()) {\n+        if (provision.isEmpty()) {\n             throw new NotFoundException(\"Provision on resource '\" + resourceKey + \"' for type '\" + anyTypeKey + \"'\");\n         }\n "},{"sha":"e5bd1cfcfc1beb00bf780dbf77515acb29524a1b","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -25,6 +25,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n@@ -161,11 +162,11 @@ public Pair<Integer, List<GroupTO>> search(\n \n         int count = searchDAO.count(\n                 RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n-                searchCond == null ? groupDAO.getAllMatchingCond() : searchCond, AnyTypeKind.GROUP);\n+            Optional.ofNullable(searchCond).orElseGet(() -> groupDAO.getAllMatchingCond()), AnyTypeKind.GROUP);\n \n         List<Group> matching = searchDAO.search(\n                 RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n-                searchCond == null ? groupDAO.getAllMatchingCond() : searchCond,\n+            Optional.ofNullable(searchCond).orElseGet(() -> groupDAO.getAllMatchingCond()),\n                 page, size, orderBy, AnyTypeKind.GROUP);\n         List<GroupTO> result = matching.stream().\n                 map(group -> binder.getGroupTO(group, details)).collect(Collectors.toList());"},{"sha":"86aea3dbcfa83ec12fe589cff621a32599936585","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -28,6 +28,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import java.util.zip.ZipInputStream;\n import javax.ws.rs.core.Response;\n@@ -372,9 +373,7 @@ protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n         String key = JobNamer.getReportKeyFromJobName(jobKey.getName());\n \n         Report report = reportDAO.find(key);\n-        return report == null\n-                ? null\n-                : Triple.of(JobType.REPORT, key, binder.buildRefDesc(report));\n+        return Optional.ofNullable(report).map(report1 -> Triple.of(JobType.REPORT, key, binder.buildRefDesc(report1))).orElse(null);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_LIST + \"')\")"},{"sha":"3e3048be66f9504f87c3f79a22e8306bf2af7e27","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,7 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -150,7 +151,7 @@ public void delete(final SchemaType schemaType, final String schemaKey) {\n     public <T extends SchemaTO> List<T> search(\n             final SchemaType schemaType, final List<String> anyTypeClasses, final String keyword) {\n \n-        List<AnyTypeClass> classes = new ArrayList<>(anyTypeClasses == null ? 0 : anyTypeClasses.size());\n+        List<AnyTypeClass> classes = new ArrayList<>(Optional.ofNullable(anyTypeClasses).map(List::size).orElse(0));\n         if (anyTypeClasses != null) {\n             anyTypeClasses.remove(AnyTypeKind.USER.name());\n             anyTypeClasses.remove(AnyTypeKind.GROUP.name());"},{"sha":"5e004cba81c7af752def4edd8589a1d5a99ac0b8","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -486,7 +486,7 @@ public TypeExtensionTO readTypeExtension(final String groupName) {\n             throw new NotFoundException(\"Group \" + groupName);\n         }\n         Optional<? extends TypeExtension> typeExt = group.getTypeExtension(anyTypeDAO.findUser());\n-        if (!typeExt.isPresent()) {\n+        if (typeExt.isEmpty()) {\n             throw new NotFoundException(\"TypeExtension in \" + groupName + \" for users\");\n         }\n "},{"sha":"af026df1714c7e02ddec11c0e380963808e86e1b","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -24,6 +24,7 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -113,11 +114,11 @@ public Pair<Integer, List<UserTO>> search(\n \n         int count = searchDAO.count(RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_SEARCH), realm),\n-                searchCond == null ? userDAO.getAllMatchingCond() : searchCond, AnyTypeKind.USER);\n+            Optional.ofNullable(searchCond).orElseGet(() -> userDAO.getAllMatchingCond()), AnyTypeKind.USER);\n \n         List<User> matching = searchDAO.search(RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_SEARCH), realm),\n-                searchCond == null ? userDAO.getAllMatchingCond() : searchCond,\n+            Optional.ofNullable(searchCond).orElseGet(() -> userDAO.getAllMatchingCond()),\n                 page, size, orderBy, AnyTypeKind.USER);\n         List<UserTO> result = matching.stream().\n                 map(user -> binder.returnUserTO(binder.getUserTO(user, details)))."},{"sha":"83f3f39962cd40b8e73fa62f70cdc534b69c8285","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.persistence.EntityExistsException;\n@@ -150,7 +151,7 @@ public Response toResponse(final Exception ex) {\n             }\n         }\n \n-        return builder == null ? null : builder.build();\n+        return Optional.ofNullable(builder).map(ResponseBuilder::build).orElse(null);\n     }\n \n     private ResponseBuilder getSyncopeClientExceptionResponse(final SyncopeClientException ex) {\n@@ -318,8 +319,6 @@ private String getPersistenceErrorMessage(final Throwable ex) {\n             message = env.getProperty(\"errMessage.\" + UNIQUE_MSG_KEY);\n         }\n \n-        return message == null\n-                ? (ex.getCause() == null) ? ex.getMessage() : ex.getCause().getMessage()\n-                : message;\n+        return Optional.ofNullable(message).orElseGet(() -> (ex.getCause() == null) ? ex.getMessage() : ex.getCause().getMessage());\n     }\n }"},{"sha":"9a8a8292951b9cf6d60bc500ff455b6b5e8ecd91","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -115,7 +115,7 @@ protected void addParameters(final List<Parameter> parameters) {\n         Optional<Parameter> domainHeaderParameter = parameters.stream().filter(parameter\n                 -> parameter instanceof HeaderParameter && RESTHeaders.DOMAIN.equals(parameter.getName())).\n                 findFirst();\n-        if (!domainHeaderParameter.isPresent()) {\n+        if (domainHeaderParameter.isEmpty()) {\n             HeaderParameter parameter = new HeaderParameter();\n             parameter.setName(RESTHeaders.DOMAIN);\n             parameter.setRequired(true);"},{"sha":"ba6a35fad9ce7b84f5008ddbf78911a498e6e69e","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WadlGenerator.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -118,9 +118,7 @@ public String getWadl() {\n                     } else {\n                         cri = Optional.ofNullable(ResourceUtils.createClassResourceInfo(\n                                 beanClass, beanClass, true, true, BusFactory.getDefaultBus()));\n-                        if (cri.isPresent()) {\n-                            classResourceInfos.add(cri.get());\n-                        }\n+                        cri.ifPresent(classResourceInfos::add);\n                     }\n                 }\n "},{"sha":"5ec0de046089b67e877569a583eabdbe03996acc","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -105,7 +105,7 @@ public Attr read(final String key, final SchemaType schemaType, final String sch\n                 result = any.getPlainAttr(schema);\n         }\n \n-        if (!result.isPresent()) {\n+        if (result.isEmpty()) {\n             throw new NotFoundException(\"Attribute for type \" + schemaType + \" and schema \" + schema);\n         }\n "},{"sha":"df244781b5e5a877e6c6b8fdd2066817fa6ae577","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import java.net.URI;\n import java.util.List;\n+import java.util.Optional;\n+\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n@@ -70,7 +72,7 @@ public ReportTO read(final String key) {\n \n     @Override\n     public Response exportExecutionResult(final String executionKey, final ReportExecExportFormat fmt) {\n-        ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n+        ReportExecExportFormat format = Optional.ofNullable(fmt).orElse(ReportExecExportFormat.XML);\n         ReportExec reportExec = logic.getReportExec(executionKey);\n         StreamingOutput sout = (os) -> logic.exportExecutionResult(os, reportExec, format);\n "},{"sha":"b8509f05dff04a4dd73a2c3e5aa7a988922bcfb8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/OrderByClause.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FOrderByClause.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FOrderByClause.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FOrderByClause.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.persistence.api.dao.search;\n \n import java.io.Serializable;\n+import java.util.Optional;\n+\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n@@ -47,7 +49,7 @@ public void setField(final String field) {\n     }\n \n     public Direction getDirection() {\n-        return direction == null ? Direction.ASC : direction;\n+        return Optional.ofNullable(direction).orElse(Direction.ASC);\n     }\n \n     public void setDirection(final Direction direction) {"},{"sha":"92f228cdb1ef093c18f6f35fabc102336a29ee0c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -112,7 +112,7 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n         switch (ct) {\n             case EQUALS:\n             case NOT_EQUALS:\n-                if (!specialAttrName.isPresent()) {\n+                if (specialAttrName.isEmpty()) {\n                     if (specialAttrValue.isPresent() && specialAttrValue.get() == SpecialAttr.NULL) {\n                         attributeCond.setType(AttributeCond.Type.ISNULL);\n                         attributeCond.setExpression(null);"},{"sha":"2aeb153e853e9f75086df54db289e88cab9b3c7a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -27,6 +27,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.regex.Pattern;\n import javax.persistence.Query;\n@@ -129,7 +130,7 @@ protected Date findLastChange(final String key, final String table) {\n             lastChangeDate = (Date) result.get(0)[1];\n         }\n \n-        return lastChangeDate == null ? creationDate : lastChangeDate;\n+        return Optional.ofNullable(lastChangeDate).orElse(creationDate);\n     }\n \n     protected abstract void securityChecks(A any);"},{"sha":"19f8af16b2cc91211aebb40e5607275b96a9747b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.validation.ValidationException;\n@@ -53,6 +54,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -241,7 +243,7 @@ protected String check(final MembershipCond cond) {\n             groupKey = cond.getGroup();\n         } else {\n             Group group = groupDAO.findByName(cond.getGroup());\n-            groupKey = group == null ? null : group.getKey();\n+            groupKey = Optional.ofNullable(group).map(Entity::getKey).orElse(null);\n         }\n         if (groupKey == null) {\n             LOG.error(\"Could not find group for '\" + cond.getGroup() + \"'\");\n@@ -257,7 +259,7 @@ protected String check(final RelationshipCond cond) {\n             rightAnyObjectKey = cond.getAnyObject();\n         } else {\n             AnyObject anyObject = anyObjectDAO.findByName(cond.getAnyObject());\n-            rightAnyObjectKey = anyObject == null ? null : anyObject.getKey();\n+            rightAnyObjectKey = Optional.ofNullable(anyObject).map(Entity::getKey).orElse(null);\n         }\n         if (rightAnyObjectKey == null) {\n             LOG.error(\"Could not find any object for '\" + cond.getAnyObject() + \"'\");\n@@ -286,7 +288,7 @@ protected String check(final MemberCond cond) {\n             if (member == null) {\n                 member = anyObjectDAO.findByName(cond.getMember());\n             }\n-            memberKey = member == null ? null : member.getKey();\n+            memberKey = Optional.ofNullable(member).map(Entity::getKey).orElse(null);\n         }\n         if (memberKey == null) {\n             LOG.error(\"Could not find user or any object for '\" + cond.getMember() + \"'\");"},{"sha":"cb122c686a5602eeed03e620f62c6c4fc13e1af8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPullCorrelationRule.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n@@ -60,9 +61,7 @@ public SearchCond getSearchCond(final SyncDelta syncDelta, final Provision provi\n \n         conf.getSchemas().forEach(schema -> {\n             Item item = mappingItems.get(schema);\n-            Attribute attr = item == null\n-                    ? null\n-                    : syncDelta.getObject().getAttributeByName(item.getExtAttrName());\n+            Attribute attr = Optional.ofNullable(item).map(item1 -> syncDelta.getObject().getAttributeByName(item1.getExtAttrName())).orElse(null);\n             if (attr == null) {\n                 throw new IllegalArgumentException(\n                         \"Connector object does not contains the attributes to perform the search: \" + schema);"},{"sha":"c5b7bafa81059036bfb6a4f61971f76afaf0f3aa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyMatchDAO.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -183,10 +183,8 @@ private boolean matches(\n \n     private boolean matches(final Any<?> any, final AssignableCond cond, final boolean not) {\n         Realm realm = realmDAO.findByFullPath(cond.getRealmFullPath());\n-        boolean found = realm == null\n-                ? false\n-                : (cond.isFromGroup() ? realmDAO.findDescendants(realm) : realmDAO.findAncestors(realm)).\n-                        stream().anyMatch(item -> item.equals(any.getRealm()));\n+        boolean found = Optional.ofNullable(realm).filter(realm1 -> (cond.isFromGroup() ? realmDAO.findDescendants(realm1) : realmDAO.findAncestors(realm1)).\n+            stream().anyMatch(item -> item.equals(any.getRealm()))).isPresent();\n         return not ? !found : found;\n     }\n "},{"sha":"61fd58ad2e9182e59b1cb27edfe98a968effacae","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -355,9 +355,7 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n             for (AccountPolicy policy : getAccountPolicies(user)) {\n                 for (Implementation impl : policy.getRules()) {\n                     Optional<AccountRule> rule = ImplementationManager.buildAccountRule(impl);\n-                    if (rule.isPresent()) {\n-                        rule.get().enforce(user);\n-                    }\n+                    rule.ifPresent(accountRule -> accountRule.enforce(user));\n                 }\n \n                 suspend |= user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0"},{"sha":"7d3739e6682e6622c1e54e7d44214d28552bfae6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAnnotatedEntity.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAnnotatedEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAnnotatedEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAnnotatedEntity.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.persistence.EntityListeners;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Temporal;\n@@ -73,12 +75,12 @@ public void setCreator(final String creator) {\n \n     @Override\n     public Date getCreationDate() {\n-        return creationDate == null ? null : new Date(creationDate.getTime());\n+        return Optional.ofNullable(creationDate).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Override\n     public void setCreationDate(final Date creationDate) {\n-        this.creationDate = creationDate == null ? null : new Date(creationDate.getTime());\n+        this.creationDate = Optional.ofNullable(creationDate).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Override\n@@ -104,6 +106,6 @@ public Date getLastChangeDate() {\n \n     @Override\n     public void setLastChangeDate(final Date lastChangeDate) {\n-        this.lastChangeDate = lastChangeDate == null ? null : new Date(lastChangeDate.getTime());\n+        this.lastChangeDate = Optional.ofNullable(lastChangeDate).map(changeDate -> new Date(changeDate.getTime())).orElse(null);\n     }\n }"},{"sha":"a90dd67c641d365da0e80c34a61d454b55fe5af7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractExec.java","status":"modified","additions":7,"deletions":13,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.persistence.Column;\n \n import javax.persistence.Lob;\n@@ -74,34 +76,26 @@ public String getMessage() {\n \n     @Override\n     public void setMessage(final String message) {\n-        this.message = message == null ? null : message.replace('\\0', '\\n');\n+        this.message = Optional.ofNullable(message).map(s -> s.replace('\\0', '\\n')).orElse(null);\n     }\n \n     @Override\n     public Date getStart() {\n-        return start == null\n-                ? null\n-                : new Date(start.getTime());\n+        return Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Override\n     public void setStart(final Date start) {\n-        this.start = start == null\n-                ? null\n-                : new Date(start.getTime());\n+        this.start = Optional.ofNullable(start).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Override\n     public Date getEnd() {\n-        return end == null\n-                ? null\n-                : new Date(end.getTime());\n+        return Optional.ofNullable(end).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Override\n     public void setEnd(final Date end) {\n-        this.end = end == null\n-                ? null\n-                : new Date(end.getTime());\n+        this.end = Optional.ofNullable(end).map(date -> new Date(date.getTime())).orElse(null);\n     }\n }"},{"sha":"bda3e171da8707e04ead1ebd80816206eefafc16","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractHistoryConf.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractHistoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractHistoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractHistoryConf.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.persistence.Column;\n import javax.persistence.Lob;\n import javax.persistence.MappedSuperclass;\n@@ -56,16 +58,12 @@ public void setCreator(final String creator) {\n \n     @Override\n     public Date getCreation() {\n-        return creation == null\n-                ? null\n-                : new Date(creation.getTime());\n+        return Optional.ofNullable(creation).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Override\n     public void setCreation(final Date creation) {\n-        this.creation = creation == null\n-                ? null\n-                : new Date(creation.getTime());\n+        this.creation = Optional.ofNullable(creation).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Override"},{"sha":"4fd29e43d5fa02aa564eedc66fc54178c6d8417f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import java.util.Base64;\n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.persistence.Lob;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Temporal;\n@@ -67,16 +69,12 @@ public void setBooleanValue(final Boolean booleanValue) {\n \n     @Override\n     public Date getDateValue() {\n-        return dateValue == null\n-                ? null\n-                : new Date(dateValue.getTime());\n+        return Optional.ofNullable(dateValue).map(value -> new Date(value.getTime())).orElse(null);\n     }\n \n     @Override\n     public void setDateValue(final Date dateValue) {\n-        this.dateValue = dateValue == null\n-                ? null\n-                : new Date(dateValue.getTime());\n+        this.dateValue = Optional.ofNullable(dateValue).map(value -> new Date(value.getTime())).orElse(null);\n     }\n \n     @Override\n@@ -250,7 +248,7 @@ private String getValueAsString(final AttrSchemaType type, final PlainSchema sch\n             LOG.warn(\"Could not find expected value for type {} in {}, reverting to getValue().toString()\", type, this);\n \n             Object value = getValue();\n-            return value == null ? null : value.toString();\n+            return Optional.ofNullable(value).map(Object::toString).orElse(null);\n         }\n \n         String result;"},{"sha":"514cf12a7f80bc5504e35523b9d25f36ec999dd1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAccessToken.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.persistence.Cacheable;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n@@ -62,16 +64,12 @@ public void setBody(final String body) {\n \n     @Override\n     public Date getExpiryTime() {\n-        return expiryTime == null\n-                ? null\n-                : new Date(expiryTime.getTime());\n+        return Optional.ofNullable(expiryTime).map(time -> new Date(time.getTime())).orElse(null);\n     }\n \n     @Override\n     public void setExpiryTime(final Date expiryTime) {\n-        this.expiryTime = expiryTime == null\n-                ? null\n-                : new Date(expiryTime.getTime());\n+        this.expiryTime = Optional.ofNullable(expiryTime).map(time -> new Date(time.getTime())).orElse(null);\n     }\n \n     @Override"},{"sha":"eb2d9c7dc9e310be121f559e344f7a26cb4f8493","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPABatch.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPABatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPABatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPABatch.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n@@ -42,9 +44,7 @@ public class JPABatch extends AbstractProvidedKeyEntity implements Batch {\n \n     @Override\n     public Date getExpiryTime() {\n-        return expiryTime == null\n-                ? null\n-                : new Date(expiryTime.getTime());\n+        return Optional.ofNullable(expiryTime).map(time -> new Date(time.getTime())).orElse(null);\n     }\n \n     @Override"},{"sha":"72fcd0c6bdbbaf2aad76265aa197a6be14f0a593","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,7 @@\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import javax.persistence.CascadeType;\n import javax.persistence.CollectionTable;\n@@ -228,7 +229,7 @@ public Integer getConnRequestTimeout() {\n         // DEFAULT_TIMEOUT will be returned in case of null timeout:\n         // * instances created by the content loader\n         // * or with a timeout nullified explicitely\n-        return connRequestTimeout == null ? DEFAULT_TIMEOUT : connRequestTimeout;\n+        return Optional.ofNullable(connRequestTimeout).orElse(DEFAULT_TIMEOUT);\n     }\n \n     @Override"},{"sha":"7cc097afbc9fefc329974760b81ab333e150b8bc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAGatewayRoute.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,8 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n+\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n@@ -75,7 +77,7 @@ public void setName(final String name) {\n \n     @Override\n     public int getOrder() {\n-        return routeOrder == null ? 0 : routeOrder;\n+        return Optional.ofNullable(routeOrder).orElse(0);\n     }\n \n     @Override\n@@ -90,7 +92,7 @@ public URI getTarget() {\n \n     @Override\n     public void setTarget(final URI target) {\n-        this.target = target == null ? null : target.toASCIIString();\n+        this.target = Optional.ofNullable(target).map(URI::toASCIIString).orElse(null);\n     }\n \n     @Override"},{"sha":"071e5da572b35335b19614e06519e8ad921ab461","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARemediation.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n@@ -135,16 +137,12 @@ public void setError(final String error) {\n \n     @Override\n     public Date getInstant() {\n-        return instant == null\n-                ? null\n-                : new Date(instant.getTime());\n+        return Optional.ofNullable(instant).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Override\n     public void setInstant(final Date instant) {\n-        this.instant = instant == null\n-                ? null\n-                : new Date(instant.getTime());\n+        this.instant = Optional.ofNullable(instant).map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Override"},{"sha":"f1abc069554d1a13e9171012962c15d5b69012a2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAReportExec.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReportExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReportExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReportExec.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -29,6 +29,8 @@\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n \n+import java.util.Optional;\n+\n @Entity\n @Table(name = JPAReportExec.TABLE)\n public class JPAReportExec extends AbstractExec implements ReportExec {\n@@ -63,12 +65,12 @@ public void setReport(final Report report) {\n \n     @Override\n     public byte[] getExecResult() {\n-        return execResult == null ? null : ArrayUtils.toPrimitive(execResult);\n+        return Optional.ofNullable(execResult).map(ArrayUtils::toPrimitive).orElse(null);\n     }\n \n     @Override\n     public void setExecResult(final byte[] execResult) {\n-        this.execResult = execResult == null ? null : ArrayUtils.toObject(execResult);\n+        this.execResult = Optional.ofNullable(execResult).map(ArrayUtils::toObject).orElse(null);\n     }\n \n     @Override"},{"sha":"0efe38e67590511c63a05951dc5c033e568b2feb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAOrgUnit.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -78,21 +78,17 @@ public void setResource(final ExternalResource resource) {\n \n     @Override\n     public ObjectClass getObjectClass() {\n-        return objectClass == null\n-                ? null\n-                : new ObjectClass(objectClass);\n+        return Optional.ofNullable(objectClass).map(ObjectClass::new).orElse(null);\n     }\n \n     @Override\n     public void setObjectClass(final ObjectClass objectClass) {\n-        this.objectClass = objectClass == null ? null : objectClass.getObjectClassValue();\n+        this.objectClass = Optional.ofNullable(objectClass).map(ObjectClass::getObjectClassValue).orElse(null);\n     }\n \n     @Override\n     public SyncToken getSyncToken() {\n-        return serializedSyncToken == null\n-                ? null\n-                : POJOHelper.deserialize(serializedSyncToken, SyncToken.class);\n+        return Optional.ofNullable(serializedSyncToken).map(syncToken -> POJOHelper.deserialize(syncToken, SyncToken.class)).orElse(null);\n     }\n \n     @Override\n@@ -102,7 +98,7 @@ public String getSerializedSyncToken() {\n \n     @Override\n     public void setSyncToken(final SyncToken syncToken) {\n-        this.serializedSyncToken = syncToken == null ? null : POJOHelper.serialize(syncToken);\n+        this.serializedSyncToken = Optional.ofNullable(syncToken).map(POJOHelper::serialize).orElse(null);\n     }\n \n     @Override"},{"sha":"a1c27b2e4d2cd96f3b3e965bb8d599871359b636","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAProvision.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n+\n import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n@@ -110,14 +112,12 @@ public void setAnyType(final AnyType anyType) {\n \n     @Override\n     public ObjectClass getObjectClass() {\n-        return objectClass == null\n-                ? null\n-                : new ObjectClass(objectClass);\n+        return Optional.ofNullable(objectClass).map(ObjectClass::new).orElse(null);\n     }\n \n     @Override\n     public void setObjectClass(final ObjectClass objectClass) {\n-        this.objectClass = objectClass == null ? null : objectClass.getObjectClassValue();\n+        this.objectClass = Optional.ofNullable(objectClass).map(ObjectClass::getObjectClassValue).orElse(null);\n     }\n \n     @Override\n@@ -133,9 +133,7 @@ public List<? extends AnyTypeClass> getAuxClasses() {\n \n     @Override\n     public SyncToken getSyncToken() {\n-        return serializedSyncToken == null\n-                ? null\n-                : POJOHelper.deserialize(serializedSyncToken, SyncToken.class);\n+        return Optional.ofNullable(serializedSyncToken).map(syncToken -> POJOHelper.deserialize(syncToken, SyncToken.class)).orElse(null);\n     }\n \n     @Override\n@@ -145,7 +143,7 @@ public String getSerializedSyncToken() {\n \n     @Override\n     public void setSyncToken(final SyncToken syncToken) {\n-        this.serializedSyncToken = syncToken == null ? null : POJOHelper.serialize(syncToken);\n+        this.serializedSyncToken = Optional.ofNullable(syncToken).map(POJOHelper::serialize).orElse(null);\n     }\n \n     @Override"},{"sha":"99ffdf6cf874a2d9cbfbee0dcc9bb52f2bdf8d3b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":7,"deletions":21,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -307,23 +307,17 @@ public String getToken() {\n \n     @Override\n     public Date getTokenExpireTime() {\n-        return tokenExpireTime == null\n-                ? null\n-                : new Date(tokenExpireTime.getTime());\n+        return Optional.ofNullable(tokenExpireTime).map(expireTime -> new Date(expireTime.getTime())).orElse(null);\n     }\n \n     @Override\n     public boolean checkToken(final String token) {\n-        return this.token == null\n-                ? token == null\n-                : this.token.equals(token) && !hasTokenExpired();\n+        return Optional.ofNullable(this.token).map(s -> s.equals(token) && !hasTokenExpired()).orElseGet(() -> token == null);\n     }\n \n     @Override\n     public boolean hasTokenExpired() {\n-        return tokenExpireTime == null\n-                ? false\n-                : tokenExpireTime.before(new Date());\n+        return Optional.ofNullable(tokenExpireTime).filter(expireTime -> expireTime.before(new Date())).isPresent();\n     }\n \n     @Override\n@@ -333,16 +327,12 @@ public List<String> getPasswordHistory() {\n \n     @Override\n     public Date getChangePwdDate() {\n-        return changePwdDate == null\n-                ? null\n-                : new Date(changePwdDate.getTime());\n+        return Optional.ofNullable(changePwdDate).map(pwdDate -> new Date(pwdDate.getTime())).orElse(null);\n     }\n \n     @Override\n     public void setChangePwdDate(final Date changePwdDate) {\n-        this.changePwdDate = changePwdDate == null\n-                ? null\n-                : new Date(changePwdDate.getTime());\n+        this.changePwdDate = Optional.ofNullable(changePwdDate).map(pwdDate -> new Date(pwdDate.getTime())).orElse(null);\n     }\n \n     @Override\n@@ -357,16 +347,12 @@ public void setFailedLogins(final Integer failedLogins) {\n \n     @Override\n     public Date getLastLoginDate() {\n-        return lastLoginDate == null\n-                ? null\n-                : new Date(lastLoginDate.getTime());\n+        return Optional.ofNullable(lastLoginDate).map(loginDate -> new Date(loginDate.getTime())).orElse(null);\n     }\n \n     @Override\n     public void setLastLoginDate(final Date lastLoginDate) {\n-        this.lastLoginDate = lastLoginDate == null\n-                ? null\n-                : new Date(lastLoginDate.getTime());\n+        this.lastLoginDate = Optional.ofNullable(lastLoginDate).map(loginDate -> new Date(loginDate.getTime())).orElse(null);\n     }\n \n     @Override"},{"sha":"c18fcef3024b7078ec94485109b8a029f17a3a17","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/openjpa/BooleanValueHandler.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FBooleanValueHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FBooleanValueHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FBooleanValueHandler.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -28,6 +28,8 @@\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.meta.JavaTypes;\n \n+import java.util.Optional;\n+\n public class BooleanValueHandler extends AbstractValueHandler {\n \n     private static final long serialVersionUID = -6742506201236646294L;\n@@ -46,7 +48,7 @@ public static BooleanValueHandler getInstance() {\n     @Override\n     public Column[] map(final ValueMapping vm, final String name, final ColumnIO io, final boolean adapt) {\n         DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n-        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        DBIdentifier colName = DBIdentifier.newColumn(name, Optional.ofNullable(dict).filter(DBDictionary::delimitAll).isPresent());\n         return map(vm, colName, io, adapt);\n     }\n \n@@ -59,11 +61,11 @@ public Column[] map(final ValueMapping vm, final DBIdentifier name, final Column\n \n     @Override\n     public Object toDataStoreValue(final ValueMapping vm, final Object val, final JDBCStore store) {\n-        return val == null ? null : BooleanUtils.isTrue((Boolean) val) ? 1 : 0;\n+        return Optional.ofNullable(val).map(o -> BooleanUtils.isTrue((Boolean) o) ? 1 : 0).orElse(null);\n     }\n \n     @Override\n     public Object toObjectValue(final ValueMapping vm, final Object val) {\n-        return val == null ? null : BooleanUtils.toBoolean((int) val);\n+        return Optional.ofNullable(val).map(o -> BooleanUtils.toBoolean((int) o)).orElse(null);\n     }\n }"},{"sha":"791bd0e487784bc0c18ac53f6980726820a252bc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/openjpa/LocaleValueHandler.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FLocaleValueHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FLocaleValueHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FLocaleValueHandler.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.persistence.jpa.openjpa;\n \n import java.util.Locale;\n+import java.util.Optional;\n+\n import org.apache.commons.lang3.LocaleUtils;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n@@ -47,7 +49,7 @@ public static LocaleValueHandler getInstance() {\n     @Override\n     public Column[] map(final ValueMapping vm, final String name, final ColumnIO io, final boolean adapt) {\n         DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n-        DBIdentifier colName = DBIdentifier.newColumn(name, dict != null ? dict.delimitAll() : false);\n+        DBIdentifier colName = DBIdentifier.newColumn(name, Optional.ofNullable(dict).filter(DBDictionary::delimitAll).isPresent());\n         return map(vm, colName, io, adapt);\n     }\n \n@@ -60,11 +62,11 @@ public Column[] map(final ValueMapping vm, final DBIdentifier name, final Column\n \n     @Override\n     public Object toDataStoreValue(final ValueMapping vm, final Object val, final JDBCStore store) {\n-        return val == null ? null : ((Locale) val).toString();\n+        return Optional.ofNullable(val).map(o -> ((Locale) o).toString()).orElse(null);\n     }\n \n     @Override\n     public Object toObjectValue(final ValueMapping vm, final Object val) {\n-        return val == null ? null : LocaleUtils.toLocale((String) val);\n+        return Optional.ofNullable(val).map(o -> LocaleUtils.toLocale((String) o)).orElse(null);\n     }\n }"},{"sha":"f813f1e756a3c26d8a23b587fe99959d2073cd0b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -410,7 +410,7 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n \n             if (intAttrName.getEnclosingGroup() != null) {\n                 Group group = groupDAO.findByName(intAttrName.getEnclosingGroup());\n-                if (group == null || !groupableRelatable.getMembership(group.getKey()).isPresent()) {\n+                if (group == null || groupableRelatable.getMembership(group.getKey()).isEmpty()) {\n                     LOG.warn(\"No membership for {} in {}, ignoring\",\n                             intAttrName.getEnclosingGroup(), groupableRelatable);\n                 } else {\n@@ -636,9 +636,7 @@ private String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n             preparedAttr = prepareAttr(provision, connObjectKeyItem.get(), any, null);\n         }\n \n-        return preparedAttr == null\n-                ? null\n-                : MappingUtils.evaluateNAME(any, provision, preparedAttr.getKey()).getNameValue();\n+        return Optional.ofNullable(preparedAttr).map(attr -> MappingUtils.evaluateNAME(any, provision, attr.getKey()).getNameValue()).orElse(null);\n     }\n \n     @Transactional(readOnly = true)\n@@ -667,7 +665,7 @@ public Optional<String> getConnObjectKeyValue(final Any<?> any, final Provision\n     public Optional<String> getConnObjectKeyValue(final Realm realm, final OrgUnit orgUnit) {\n         OrgUnitItem orgUnitItem = orgUnit.getConnObjectKeyItem().get();\n \n-        return Optional.ofNullable(orgUnitItem == null ? null : getIntValue(realm, orgUnitItem));\n+        return Optional.ofNullable(Optional.ofNullable(orgUnitItem).map(unitItem -> getIntValue(realm, unitItem)).orElse(null));\n     }\n \n     @Transactional(readOnly = true)\n@@ -680,7 +678,7 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n                 values = transformer.beforePull(mapItem, anyTO, values);\n             }\n         }\n-        values = values == null ? Collections.emptyList() : values;\n+        values = Optional.ofNullable(values).orElse(Collections.emptyList());\n \n         IntAttrName intAttrName;\n         try {"},{"sha":"a3fcc30fa31c76fef3eefa1e146a91e9a24544e3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -103,7 +103,7 @@ private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSc\n             String connObjectKeyValue = connObjectKeyItem.isPresent()\n                     ? mappingManager.getConnObjectKeyValue(any, provision).orElse(null)\n                     : null;\n-            if (!connObjectKeyItem.isPresent() || connObjectKeyValue == null) {\n+            if (connObjectKeyItem.isEmpty() || connObjectKeyValue == null) {\n                 LOG.error(\"No ConnObjectKey or value found for {}, ignoring...\", provision);\n             } else {\n                 Set<MappingItem> linkingMappingItems = new HashSet<>();"},{"sha":"5cfc237a0dabb02f0c9a12e3aa9ce25502cfa14f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -375,7 +375,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                         } else {\n                             Optional<? extends APlainAttr> attr =\n                                     anyObject.getPlainAttr(schema.getKey(), newMembership);\n-                            if (!attr.isPresent()) {\n+                            if (attr.isEmpty()) {\n                                 LOG.debug(\"No plain attribute found for {} and membership of {}\",\n                                         schema, newMembership.getRightEnd());\n "},{"sha":"8b339d71e3beb8162771e94cfc9f449cb1fdfdef","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -265,7 +265,7 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n             ConnConfPropSchema schema = build(properties.getProperty(propName));\n \n             Optional<ConnConfProperty> property = connInstanceTO.getConf(propName);\n-            if (!property.isPresent()) {\n+            if (property.isEmpty()) {\n                 property = Optional.of(new ConnConfProperty());\n                 connInstanceTO.getConf().add(property.get());\n             }"},{"sha":"ef98e86d9c1bcd675b308d4ede8b0e3d0fb41c74","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -78,7 +78,7 @@ private void setDynMembership(final Group group, final AnyType anyType, final St\n         }\n \n         DynGroupMembership<?> dynMembership;\n-        if (anyType.getKind() == AnyTypeKind.ANY_OBJECT && !group.getADynMembership(anyType).isPresent()) {\n+        if (anyType.getKind() == AnyTypeKind.ANY_OBJECT && group.getADynMembership(anyType).isEmpty()) {\n             dynMembership = entityFactory.newEntity(ADynGroupMembership.class);\n             dynMembership.setGroup(group);\n             ((ADynGroupMembership) dynMembership).setAnyType(anyType);\n@@ -299,7 +299,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupUR group\n         }\n         // remove all type extensions not contained in the TO\n         group.getTypeExtensions().\n-                removeIf(typeExt -> !groupUR.getTypeExtension(typeExt.getAnyType().getKey()).isPresent());\n+                removeIf(typeExt -> groupUR.getTypeExtension(typeExt.getAnyType().getKey()).isEmpty());\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {"},{"sha":"e0119b8757ed4b30a0787bd03e9aad26475376d3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -24,6 +24,7 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n@@ -623,8 +624,8 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         // set the connector instance\n         ConnInstance connector = resource.getConnector();\n \n-        resourceTO.setConnector(connector == null ? null : connector.getKey());\n-        resourceTO.setConnectorDisplayName(connector == null ? null : connector.getDisplayName());\n+        resourceTO.setConnector(Optional.ofNullable(connector).map(Entity::getKey).orElse(null));\n+        resourceTO.setConnectorDisplayName(Optional.ofNullable(connector).map(ConnInstance::getDisplayName).orElse(null));\n \n         // set the provision information\n         resource.getProvisions().forEach(provision -> {"},{"sha":"1505f9af9ac081e952fd368401271979543f3759","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/DefaultNotificationManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -325,7 +325,7 @@ public List<NotificationTask> createTasks(\n             any = groupDAO.find(((ProvisioningResult) output).getEntity().getKey());\n         }\n \n-        AnyType anyType = any == null ? null : any.getType();\n+        AnyType anyType = Optional.ofNullable(any).map(Any::getType).orElse(null);\n         LOG.debug(\"Search notification for [{}]{}\", anyType, any);\n \n         List<NotificationTask> notifications = new ArrayList<>();\n@@ -341,7 +341,7 @@ public List<NotificationTask> createTasks(\n                 if (!notification.getEvents().contains(currentEvent)) {\n                     LOG.debug(\"No events found about {}\", any);\n                 } else if (anyType == null || any == null\n-                        || !notification.getAbout(anyType).isPresent()\n+                        || notification.getAbout(anyType).isEmpty()\n                         || anyMatchDAO.matches(\n                                 any, SearchCondConverter.convert(notification.getAbout(anyType).get().get()))) {\n "},{"sha":"c131b5be86fea337ac3512bf07421acea2abcc6a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -27,6 +27,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.CompletionService;\n import java.util.concurrent.ExecutorCompletionService;\n@@ -35,6 +36,7 @@\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.core.persistence.api.entity.Exec;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n@@ -122,7 +124,7 @@ protected void doExecute(\n                 execStatus = ExecStatus.FAILURE;\n             }\n             if (execStatus != ExecStatus.SUCCESS) {\n-                throw new PropagationException(task.getResource(), execution == null ? null : execution.getMessage());\n+                throw new PropagationException(task.getResource(), Optional.ofNullable(execution).map(Exec::getMessage).orElse(null));\n             }\n         });\n "},{"sha":"3529b3dbdc7adda73a68b83af061cd6a4e7bfdbb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -25,6 +25,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -272,7 +273,7 @@ protected List<PropagationTaskInfo> getUpdateTasks(\n                 changePwd,\n                 enable,\n                 false,\n-                propByRes == null ? new PropagationByResource() : propByRes,\n+            Optional.ofNullable(propByRes).orElseGet(PropagationByResource::new),\n                 vAttrs);\n     }\n \n@@ -371,7 +372,7 @@ protected List<PropagationTaskInfo> createTasks(final Any<?> any,\n \n         propByRes.asMap().forEach((resourceKey, operation) -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n-            Provision provision = resource == null ? null : resource.getProvision(any.getType()).orElse(null);\n+            Provision provision = Optional.ofNullable(resource).map(externalResource -> externalResource.getProvision(any.getType()).orElse(null)).orElse(null);\n             List<? extends Item> mappingItems = provision == null\n                     ? Collections.<Item>emptyList()\n                     : MappingUtils.getPropagationItems(provision.getMapping().getItems());\n@@ -458,7 +459,7 @@ public List<PropagationTaskInfo> createTasks(\n \n         propByRes.asMap().forEach((resourceKey, operation) -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n-            OrgUnit orgUnit = resource == null ? null : resource.getOrgUnit();\n+            OrgUnit orgUnit = Optional.ofNullable(resource).map(ExternalResource::getOrgUnit).orElse(null);\n \n             if (resource == null) {\n                 LOG.error(\"Invalid resource name specified: {}, ignoring...\", resourceKey);"},{"sha":"e45a7d6e802c922c4566f769c489d3667966bf9b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -230,7 +230,7 @@ public boolean handle(final String anyKey) {\n             if (ignoreResult == null) {\n                 ignoreResult = new ProvisioningReport();\n                 ignoreResult.setKey(anyKey);\n-                ignoreResult.setAnyType(any == null ? null : any.getType().getKey());\n+                ignoreResult.setAnyType(Optional.ofNullable(any).map(any1 -> any1.getType().getKey()).orElse(null));\n \n                 profile.getResults().add(ignoreResult);\n             }"},{"sha":"3451c6d99ac3e94f361b0c438f8d4bc95f1df352","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActions.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.Optional;\n+\n+import org.apache.syncope.common.lib.request.AbstractPatchItem;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n@@ -83,7 +85,7 @@ public void beforeUpdate(\n \n         if (anyUR instanceof UserUR) {\n             PasswordPatch modPassword = ((UserUR) anyUR).getPassword();\n-            parseEncodedPassword(modPassword == null ? null : modPassword.getValue(), profile.getConnector());\n+            parseEncodedPassword(Optional.ofNullable(modPassword).map(AbstractPatchItem::getValue).orElse(null), profile.getConnector());\n         }\n     }\n "},{"sha":"e2b2f2dd7645a892747d6c8e6f0e11e494a6a089","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -166,7 +166,7 @@ public void after(\n \n         Optional<? extends Provision> provision = profile.getTask().getResource().getProvision(anyTypeDAO.findUser()).\n                 filter(p -> p.getMapping() != null);\n-        if (!provision.isPresent()) {\n+        if (provision.isEmpty()) {\n             super.after(profile, delta, entity, result);\n         }\n "},{"sha":"e8dfa7cc87b3b5e1773603b4980fcbb5b25b124d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,7 +19,11 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.Base64;\n+import java.util.Optional;\n+\n import javax.xml.bind.DatatypeConverter;\n+\n+import org.apache.syncope.common.lib.request.AbstractPatchItem;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n@@ -78,7 +82,7 @@ public void beforeUpdate(\n \n         if (anyUR instanceof UserUR) {\n             PasswordPatch modPassword = ((UserUR) anyUR).getPassword();\n-            parseEncodedPassword(modPassword == null ? null : modPassword.getValue());\n+            parseEncodedPassword(Optional.ofNullable(modPassword).map(AbstractPatchItem::getValue).orElse(null));\n         }\n     }\n "},{"sha":"2e2feb75acea76a3f22e46168794b8b644683603","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -126,7 +126,7 @@ public Optional<String> match(\n             final boolean ignoreCaseMatch) {\n \n         Optional<? extends Provision> provision = resource.getProvision(anyType);\n-        if (!provision.isPresent()) {\n+        if (provision.isEmpty()) {\n             return Optional.empty();\n         }\n "},{"sha":"a07d3b8c97bd0bab9c74632062e51602afb0362a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -223,9 +223,7 @@ protected String doExecuteProvisioning(\n                 handler.setProfile(profile);\n \n                 Optional<? extends PushTaskAnyFilter> anyFilter = pushTask.getFilter(provision.getAnyType());\n-                String filter = anyFilter.isPresent()\n-                        ? anyFilter.get().getFIQLCond()\n-                        : null;\n+                String filter = anyFilter.map(PushTaskAnyFilter::getFIQLCond).orElse(null);\n                 SearchCond cond = StringUtils.isBlank(filter)\n                         ? anyDAO.getAllMatchingCond()\n                         : SearchCondConverter.convert(filter);"},{"sha":"70fb396c0e99eef29e04f413f85b5197a6cbe5b9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushUtils.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushUtils.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -70,9 +70,7 @@ public List<ConnectorObject> match(\n         }\n \n         try {\n-            return rule.isPresent()\n-                    ? findByCorrelationRule(connector, any, provision, rule.get())\n-                    : findByConnObjectKey(connector, any, provision);\n+            return rule.map(pushCorrelationRule -> findByCorrelationRule(connector, any, provision, pushCorrelationRule)).orElseGet(() -> findByConnObjectKey(connector, any, provision));\n         } catch (RuntimeException e) {\n             LOG.error(\"Could not match {} with any existing {}\", any, provision.getObjectClass(), e);\n             return Collections.<ConnectorObject>emptyList();"},{"sha":"c725d4d90e4e57f6bc8ab554bc513fa516023d56","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -168,13 +168,9 @@ public List<ProvisioningReport> pull(\n                     options);\n \n             Optional<? extends Provision> userProvision = provision.getResource().getProvision(anyTypeDAO.findUser());\n-            boolean userIgnoreCaseMatch = userProvision.isPresent()\n-                    ? userProvision.get().isIgnoreCaseMatch()\n-                    : false;\n+            boolean userIgnoreCaseMatch = userProvision.map(Provision::isIgnoreCaseMatch).orElse(false);\n             Optional<? extends Provision> groupProvision = provision.getResource().getProvision(anyTypeDAO.findGroup());\n-            boolean groupIgnoreCaseMatch = groupProvision.isPresent()\n-                    ? groupProvision.get().isIgnoreCaseMatch()\n-                    : false;\n+            boolean groupIgnoreCaseMatch = groupProvision.map(Provision::isIgnoreCaseMatch).orElse(false);\n             try {\n                 setGroupOwners(ghandler, userIgnoreCaseMatch, groupIgnoreCaseMatch);\n             } catch (Exception e) {"},{"sha":"5b85dc9b2b78fcf39716bfcea5210966d12d449e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Base64;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -116,7 +117,7 @@ public static String getPassword(final Object pwd) {\n      * @return transfer object\n      */\n     public static ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n-        return connObject == null ? new ConnObjectTO() : getConnObjectTO(connObject.getAttributes());\n+        return Optional.ofNullable(connObject).map(object -> getConnObjectTO(object.getAttributes())).orElseGet(ConnObjectTO::new);\n     }\n \n     /**"},{"sha":"0c3f7d8cf83361c185f1b1368c859beb08850d6c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -146,9 +146,7 @@ public static Name evaluateNAME(final Realm realm, final OrgUnit orgUnit, final\n         }\n \n         // Evaluate connObjectKey expression\n-        String connObjectLink = orgUnit == null\n-                ? null\n-                : orgUnit.getConnObjectLink();\n+        String connObjectLink = Optional.ofNullable(orgUnit).map(OrgUnit::getConnObjectLink).orElse(null);\n         String evalConnObjectLink = null;\n         if (StringUtils.isNotBlank(connObjectLink)) {\n             JexlContext jexlContext = new MapContext();"},{"sha":"02ed6070e2ed2e0fa64fe23aaf4a1caebfa5aa9f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -125,26 +125,24 @@ private void fill(final RealmMember realmMember, final RealmMember template) {\n \n     private void fillRelationships(final GroupableRelatableTO any, final GroupableRelatableTO template) {\n         template.getRelationships().stream().\n-                filter(relationship -> !any.getRelationship(\n-                relationship.getOtherEndKey(), relationship.getOtherEndKey()).isPresent()).\n+                filter(relationship -> any.getRelationship(\n+                relationship.getOtherEndKey(), relationship.getOtherEndKey()).isEmpty()).\n                 forEachOrdered(relationship -> {\n                     any.getRelationships().add(relationship);\n                 });\n     }\n \n     private void fillMemberships(final GroupableRelatableTO any, final GroupableRelatableTO template) {\n         template.getMemberships().stream().\n-                filter(membership -> !any.getMembership(membership.getGroupKey()).isPresent()).\n+                filter(membership -> any.getMembership(membership.getGroupKey()).isEmpty()).\n                 forEachOrdered(membership -> {\n                     any.getMemberships().add(membership);\n                 });\n     }\n \n     @Transactional(readOnly = true)\n     public void apply(final RealmMember realmMember, final Optional<? extends AnyTemplate> template) {\n-        if (template.isPresent()) {\n-            apply(realmMember, template.get().get());\n-        }\n+        template.ifPresent(anyTemplate -> apply(realmMember, anyTemplate.get()));\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"4c91cfa3d6b12353259456930c52b20a729a0435","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/ApplicationContextProvider.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FApplicationContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FApplicationContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FApplicationContextProvider.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,8 @@\n import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.ConfigurableApplicationContext;\n \n+import java.util.Optional;\n+\n public class ApplicationContextProvider implements ApplicationContextAware {\n \n     private static ConfigurableApplicationContext CTX;\n@@ -38,11 +40,7 @@ public static void setApplicationContext(final ConfigurableApplicationContext ct\n     }\n \n     public static DefaultListableBeanFactory getBeanFactory() {\n-        return BEAN_FACTORY == null\n-                ? CTX == null\n-                        ? null\n-                        : (DefaultListableBeanFactory) CTX.getBeanFactory()\n-                : BEAN_FACTORY;\n+        return Optional.ofNullable(BEAN_FACTORY).orElseGet(() -> Optional.ofNullable(CTX).map(ctx -> (DefaultListableBeanFactory) ctx.getBeanFactory()).orElse(null));\n     }\n \n     public static void setBeanFactory(final DefaultListableBeanFactory beanFactory) {"},{"sha":"9a85a6170732dad24f30e06552422c611afb77f2","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DelegatedAdministrationException.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDelegatedAdministrationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDelegatedAdministrationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDelegatedAdministrationException.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,15 +20,15 @@\n \n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n+import java.util.Optional;\n+\n public class DelegatedAdministrationException extends RuntimeException {\n \n     private static final long serialVersionUID = 7540587364235915081L;\n \n     public DelegatedAdministrationException(final String realm, final String type, final String key) {\n         super(\"Missing entitlement or realm administration under \" + realm + \" for \"\n-                + (key == null\n-                        ? \"new \" + type\n-                        : type + \" \" + key));\n+                + (Optional.ofNullable(key).map(s -> type + \" \" + s).orElseGet(() -> \"new \" + type)));\n     }\n \n     public DelegatedAdministrationException(final AnyTypeKind type, final String key) {"},{"sha":"ab9f3d22819fa40f656e1ab5dd1347688cf008c3","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthentication.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthentication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthentication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthentication.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n@@ -70,7 +71,7 @@ public SyncopeAuthenticationDetails getDetails() {\n \n     @Override\n     public Object getPrincipal() {\n-        return username == null ? claims.getSubject() : username;\n+        return Optional.ofNullable(username).orElseGet(claims::getSubject);\n     }\n \n     public void setUsername(final String username) {\n@@ -89,6 +90,6 @@ public void setAuthenticated(final boolean authenticated) throws IllegalArgument\n \n     @Override\n     public String getName() {\n-        return username == null ? claims.getSubject() : username;\n+        return Optional.ofNullable(username).orElseGet(claims::getSubject);\n     }\n }"},{"sha":"ebe09fa19e1e805aa214c8e4c4edb3c75e14116c","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationFilter.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.spring.security;\n \n import java.io.IOException;\n+import java.util.Optional;\n+\n import javax.servlet.FilterChain;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n@@ -71,7 +73,7 @@ protected void doFilterInternal(\n             throws ServletException, IOException {\n \n         String auth = request.getHeader(HttpHeaders.AUTHORIZATION);\n-        String[] parts = auth == null ? null : auth.split(\" \");\n+        String[] parts = Optional.ofNullable(auth).map(s -> s.split(\" \")).orElse(null);\n         if (parts == null || parts.length != 2 || !\"Bearer\".equals(parts[0])) {\n             chain.doFilter(request, response);\n             return;"},{"sha":"ea86315076d748505f162e921f88ece9ce56d2ce","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Base64;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -34,6 +35,7 @@\n import org.flowable.common.engine.api.FlowableException;\n import org.flowable.engine.history.HistoricActivityInstance;\n import org.flowable.engine.repository.ProcessDefinition;\n+import org.flowable.engine.runtime.Execution;\n import org.flowable.engine.runtime.ProcessInstance;\n import org.flowable.task.api.Task;\n import org.identityconnectors.common.security.EncryptorFactory;\n@@ -92,7 +94,7 @@ public static String getWFProcBusinessKey(final String userKey) {\n     public static String getWFProcInstID(final DomainProcessEngine engine, final String userKey) {\n         ProcessInstance procInst = engine.getRuntimeService().createProcessInstanceQuery().\n                 processInstanceBusinessKey(getWFProcBusinessKey(userKey)).singleResult();\n-        return procInst == null ? null : procInst.getId();\n+        return Optional.ofNullable(procInst).map(Execution::getId).orElse(null);\n     }\n \n     public static String getProcBusinessKey(final String procDefId, final String userKey) {"},{"sha":"748d6351140ebacb9bd09cf416c546723f73fd29","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n@@ -299,9 +300,7 @@ protected UserRequestFormPropertyType fromFlowableFormType(final FormType flowab\n     }\n \n     protected UserRequestForm getForm(final Task task) {\n-        return task == null\n-                ? null\n-                : FlowableUserRequestHandler.this.getForm(task, engine.getFormService().getTaskFormData(task.getId()));\n+        return Optional.ofNullable(task).map(task1 -> FlowableUserRequestHandler.this.getForm(task1, engine.getFormService().getTaskFormData(task1.getId()))).orElse(null);\n     }\n \n     protected UserRequestForm getForm(final Task task, final TaskFormData fd) {"},{"sha":"43aa2f3b3372123f8330f116ed450d66e59f467c","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -266,7 +267,7 @@ protected WorkflowResult<Pair<UserUR, Boolean>> doUpdate(final User user, final\n                 dataBinder.getUserTO(updated, true),\n                 userUR.getPassword() == null ? null : userUR.getPassword().getValue(),\n                 null,\n-                propByResBeforeUpdate == null ? propByRes : propByResBeforeUpdate);\n+            Optional.ofNullable(propByResBeforeUpdate).orElse(propByRes));\n \n         Boolean propagateEnable = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROPAGATE_ENABLE, Boolean.class);"},{"sha":"0ffbd70eca0a1431cd1bc6ac426bba4b19608afe","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DropdownFormType.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDropdownFormType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDropdownFormType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDropdownFormType.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,8 @@\n \n import org.flowable.engine.form.AbstractFormType;\n \n+import java.util.Optional;\n+\n /**\n  * Extension to predefined Flowable form types relying on the provided\n  * {@link org.apache.syncope.core.flowable.api.DropdownValueProvider} bean to populate values.\n@@ -54,6 +56,6 @@ public Object convertFormValueToModelValue(final String propertyValue) {\n \n     @Override\n     public String convertModelValueToFormValue(final Object modelValue) {\n-        return modelValue == null ? null : modelValue.toString();\n+        return Optional.ofNullable(modelValue).map(Object::toString).orElse(null);\n     }\n }"},{"sha":"9069c814678ad4a2a033d11721f092fa7d0f80bc","filename":"ext/oidcclient/common-lib/src/main/java/org/apache/syncope/common/lib/to/OIDCProviderTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,8 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n+\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n@@ -204,9 +206,7 @@ protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n \n     @Override\n     public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n-        return connObjectKeyItem == null\n-                ? remove(getConnObjectKeyItem())\n-                : addConnObjectKeyItem(connObjectKeyItem);\n+        return Optional.ofNullable(connObjectKeyItem).map(this::addConnObjectKeyItem).orElseGet(() -> remove(getConnObjectKeyItem()));\n     }\n \n     @XmlElementWrapper(name = \"items\")\n@@ -219,7 +219,7 @@ public List<ItemTO> getItems() {\n \n     @Override\n     public boolean add(final ItemTO item) {\n-        return item == null ? false : this.items.contains(item) || this.items.add(item);\n+        return Optional.ofNullable(item).filter(itemTO -> this.items.contains(itemTO) || this.items.add(itemTO)).isPresent();\n     }\n \n     public boolean remove(final ItemTO item) {"},{"sha":"92755cad1b9e7e1ba3ea7925f0555a2bbc3627da","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCClientLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -28,6 +28,8 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n+\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n@@ -328,9 +330,7 @@ public OIDCLoginResponseTO login(final String redirectURI, final String authoriz\n \n                 return responseTO;\n             } else {\n-                throw new NotFoundException(keyValue == null\n-                        ? \"User marching the provided claims\"\n-                        : \"User matching the provided value \" + keyValue);\n+                throw new NotFoundException(Optional.ofNullable(keyValue).map(value -> \"User matching the provided value \" + value).orElse(\"User marching the provided claims\"));\n             }\n         } else if (matchingUsers.size() > 1) {\n             throw new IllegalArgumentException(\"Several users match the provided value \" + keyValue);"},{"sha":"c4f19fb24ff55abc56b895665b19ba948a1de653","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,8 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n+\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n@@ -177,9 +179,7 @@ protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n \n     @Override\n     public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n-        return connObjectKeyItem == null\n-                ? remove(getConnObjectKeyItem())\n-                : addConnObjectKeyItem(connObjectKeyItem);\n+        return Optional.ofNullable(connObjectKeyItem).map(this::addConnObjectKeyItem).orElseGet(() -> remove(getConnObjectKeyItem()));\n     }\n \n     @XmlElementWrapper(name = \"items\")\n@@ -192,7 +192,7 @@ public List<ItemTO> getItems() {\n \n     @Override\n     public boolean add(final ItemTO item) {\n-        return item == null ? false : this.items.contains(item) || this.items.add(item);\n+        return Optional.ofNullable(item).filter(itemTO -> this.items.contains(itemTO) || this.items.add(itemTO)).isPresent();\n     }\n \n     public boolean remove(final ItemTO item) {"},{"sha":"2d6aac65eb20baf86558b2b68eb241d16ef196a8","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPLogic.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -26,6 +26,7 @@\n import java.util.ArrayList;\n import java.util.Base64;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -79,10 +80,8 @@ private SAML2IdPTO complete(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n             }\n         }\n \n-        idpTO.setLogoutSupported(idpEntity == null\n-                ? false\n-                : idpEntity.getSLOLocation(SAML2BindingType.POST) != null\n-                || idpEntity.getSLOLocation(SAML2BindingType.REDIRECT) != null);\n+        idpTO.setLogoutSupported(Optional.ofNullable(idpEntity).filter(entity -> entity.getSLOLocation(SAML2BindingType.POST) != null\n+            || entity.getSLOLocation(SAML2BindingType.REDIRECT) != null).isPresent());\n         return idpTO;\n     }\n "},{"sha":"2c2f7dbffd42486bb59393ce592cd69c9f956b45","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -121,12 +121,12 @@ public void setName(final String name) {\n \n     @Override\n     public byte[] getMetadata() {\n-        return metadata == null ? null : ArrayUtils.toPrimitive(metadata);\n+        return Optional.ofNullable(metadata).map(ArrayUtils::toPrimitive).orElse(null);\n     }\n \n     @Override\n     public void setMetadata(final byte[] metadata) {\n-        this.metadata = metadata == null ? null : ArrayUtils.toObject(metadata);\n+        this.metadata = Optional.ofNullable(metadata).map(ArrayUtils::toObject).orElse(null);\n     }\n \n     @Override"},{"sha":"234222d0bf9dd120332a312fd851914548efb934","filename":"ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPServiceImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPServiceImpl.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -31,6 +31,8 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n+import java.util.Optional;\n+\n @Service\n public class SAML2SPServiceImpl extends AbstractServiceImpl implements SAML2SPService {\n \n@@ -70,7 +72,7 @@ public void validateLogoutResponse(final SAML2ReceivedResponseTO response) {\n \n     private String getJWTToken() {\n         String auth = messageContext.getHttpHeaders().getHeaderString(HttpHeaders.AUTHORIZATION);\n-        String[] parts = auth == null ? null : auth.split(\" \");\n+        String[] parts = Optional.ofNullable(auth).map(s -> s.split(\" \")).orElse(null);\n         if (parts == null || parts.length != 2 || !\"Bearer\".equals(parts[0])) {\n             return null;\n         }"},{"sha":"7648bc262ba1c88426266b65e2c511e061e18abf","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMGeneralConf.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGeneralConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGeneralConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGeneralConf.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -21,6 +21,8 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.io.Serializable;\n import java.util.Date;\n+import java.util.Optional;\n+\n import org.apache.commons.lang3.StringUtils;\n \n public class SCIMGeneralConf implements Serializable {\n@@ -71,9 +73,7 @@ public void setLastChangeDate(final Date lastChangeDate) {\n     public String getETagValue() {\n         Date etagDate = getLastChangeDate() == null\n                 ? getCreationDate() : getLastChangeDate();\n-        return etagDate == null\n-                ? StringUtils.EMPTY\n-                : String.valueOf(etagDate.getTime());\n+        return Optional.ofNullable(etagDate).map(date -> String.valueOf(date.getTime())).orElse(StringUtils.EMPTY);\n \n     }\n "},{"sha":"f84780a9ff4a86c641d0e7b1e6d82738805225ee","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -56,11 +56,9 @@ public SearchCond visitScimFilter(final SCIMFilterParser.ScimFilterContext ctx)\n     }\n \n     private boolean schemaEquals(final Resource resource, final String value, final String schema) {\n-        return resource == null\n-                ? value.contains(\":\")\n-                ? StringUtils.substringAfterLast(value, \":\").equalsIgnoreCase(schema)\n-                : value.equalsIgnoreCase(schema)\n-                : value.equalsIgnoreCase(schema) || (resource.schema() + \":\" + value).equalsIgnoreCase(schema);\n+        return Optional.ofNullable(resource).map(resource1 -> value.equalsIgnoreCase(schema) || (resource1.schema() + \":\" + value).equalsIgnoreCase(schema)).orElseGet(() -> value.contains(\":\")\n+            ? StringUtils.substringAfterLast(value, \":\").equalsIgnoreCase(schema)\n+            : value.equalsIgnoreCase(schema));\n     }\n \n     public AttributeCond createAttributeCond(final String schema) {"},{"sha":"a80df59e28a3c7e456b8c37ac5c3e246e86ac954","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Group.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FGroup.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -24,6 +24,8 @@\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import org.apache.syncope.ext.scimv2.api.type.Function;\n \n+import java.util.Optional;\n+\n @JsonPropertyOrder({ \"value\", \"$ref\", \"display\", \"type\" })\n public class Group extends Reference {\n \n@@ -45,7 +47,7 @@ public Group(\n \n     @JsonProperty\n     public String getType() {\n-        return type == null ? null : type.name();\n+        return Optional.ofNullable(type).map(Enum::name).orElse(null);\n     }\n \n }"},{"sha":"a9db2a06eb584e60f465e429255e91de8fd23988","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Meta.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMeta.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMeta.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMeta.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -22,6 +22,8 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.Date;\n+import java.util.Optional;\n+\n import javax.ws.rs.core.EntityTag;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n \n@@ -51,7 +53,7 @@ public Meta(\n         this.resourceType = resourceType;\n         this.created = created;\n         this.lastModified = lastModified;\n-        this.version = version == null ? null : new EntityTag(version, true);\n+        this.version = Optional.ofNullable(version).map(s -> new EntityTag(s, true)).orElse(null);\n         this.location = location;\n     }\n \n@@ -69,7 +71,7 @@ public Date getLastModified() {\n \n     @JsonProperty\n     public String getVersion() {\n-        return version == null ? null : version.toString();\n+        return Optional.ofNullable(version).map(EntityTag::toString).orElse(null);\n     }\n \n     public String getLocation() {"},{"sha":"bbd29112d3948200ee648789334d50e35910561d","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMResource.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMResource.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collections;\n import java.util.List;\n+import java.util.Optional;\n \n public abstract class SCIMResource extends SCIMBean {\n \n@@ -35,7 +36,7 @@ public abstract class SCIMResource extends SCIMBean {\n \n     public SCIMResource(final String id, final List<String> schemas, final Meta meta) {\n         this.id = id;\n-        this.schemas = schemas == null ? Collections.<String>emptyList() : schemas;\n+        this.schemas = Optional.ofNullable(schemas).orElse(Collections.<String>emptyList());\n         this.meta = meta;\n     }\n "},{"sha":"63fa3bc35d783b53771e6cc738661fd7d375ddb0","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMSearchRequest.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMSearchRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMSearchRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMSearchRequest.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,8 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.Optional;\n+\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n import org.apache.syncope.ext.scimv2.api.type.SortOrder;\n \n@@ -86,11 +88,11 @@ public SortOrder getSortOrder() {\n     }\n \n     public int getStartIndex() {\n-        return startIndex == null ? 1 : startIndex;\n+        return Optional.ofNullable(startIndex).orElse(1);\n     }\n \n     public int getCount() {\n-        return count == null ? 25 : count;\n+        return Optional.ofNullable(count).orElse(25);\n     }\n \n }"},{"sha":"28c507e8e503e59ef25cdb47d9a9c6a31a1c1f9d","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.ext.scimv2.cxf;\n \n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import javax.validation.ValidationException;\n import javax.ws.rs.ForbiddenException;\n@@ -128,7 +129,7 @@ public Response toResponse(final Exception ex) {\n             }\n         }\n \n-        return builder == null ? null : builder.build();\n+        return Optional.ofNullable(builder).map(ResponseBuilder::build).orElse(null);\n     }\n \n     private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {"},{"sha":"12c59eff8b10219b2a6527eefbaa6600d0c5ff4c","filename":"ext/self-keymaster/logic/src/main/java/org/apache/syncope/core/logic/ConfParamLogic.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfParamLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfParamLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfParamLogic.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -23,6 +23,7 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.lang.reflect.Method;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.TreeMap;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.core.persistence.api.dao.ConfParamDAO;\n@@ -64,9 +65,7 @@ public Map<String, Object> list() {\n     public JsonNode get(final String key) {\n         ConfParam param = confParamDAO.find(key);\n \n-        return param == null\n-                ? null\n-                : param.getValue();\n+        return Optional.ofNullable(param).map(ConfParam::getValue).orElse(null);\n     }\n \n     @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")"},{"sha":"f59a2ee6399d0e9c0011376b940bb585b0a112ad","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/cxf/ProvisioningImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FProvisioningImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FProvisioningImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FProvisioningImpl.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -28,6 +28,7 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import javax.annotation.Resource;\n import javax.jws.WebService;\n@@ -151,7 +152,7 @@ public String update(final String accountid, final List<WSAttributeValue> data)\n                             }\n                         }\n \n-                        set.append(value == null ? null : \"'\" + value + \"'\");\n+                        set.append(Optional.ofNullable(value).map(s -> \"'\" + s + \"'\").orElse(null));\n                     }\n                 }\n             }\n@@ -185,7 +186,7 @@ public List<WSUser> query(final Operand query) {\n         Connection conn = null;\n         try {\n \n-            String queryString = \"SELECT * FROM user\" + (query == null ? \"\" : \" WHERE \" + query.toString());\n+            String queryString = \"SELECT * FROM user\" + (Optional.ofNullable(query).map(operand -> \" WHERE \" + operand.toString()).orElse(\"\"));\n \n             queryString = queryString.replaceAll(\"__NAME__\", \"userId\").\n                     replaceAll(\"__UID__\", \"userId\").\n@@ -291,7 +292,7 @@ public String create(final List<WSAttributeValue> data) throws ProvisioningExcep\n                             values.append(\",\");\n                         }\n \n-                        values.append(value == null ? null : \"'\" + value + \"'\");\n+                        values.append(Optional.ofNullable(value).map(s -> \"'\" + s + \"'\").orElse(null));\n \n                         if (attr.isKey() && !attr.getValues().isEmpty()) {\n                             accountid = attr.getValues().get(0).toString();"},{"sha":"7bbbcb28208f2301a2672aab622455b17872329d","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -46,7 +46,7 @@ public void beforeProvision(\n \n         Optional<Attr> attrTO = anyCR.getPlainAttrs().stream().\n                 filter(attr -> \"fullname\".equals(attr.getSchema())).findFirst();\n-        if (!attrTO.isPresent()) {\n+        if (attrTO.isEmpty()) {\n             attrTO = Optional.of(new Attr());\n             attrTO.get().setSchema(\"fullname\");\n             anyCR.getPlainAttrs().add(attrTO.get());"},{"sha":"60bf8de6db79c1b7cd5a4bfa1ec1a101e1c7e2aa","filename":"ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/view/ResourceExplorerTopComponent.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/edfb42c8b04289793ed9529803df8a61c04be6a7/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/edfb42c8b04289793ed9529803df8a61c04be6a7/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java?ref=edfb42c8b04289793ed9529803df8a61c04be6a7","patch":"@@ -28,6 +28,7 @@\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n+import java.util.Optional;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import java.util.prefs.Preferences;\n@@ -181,7 +182,7 @@ private void resourceExplorerTreeMouseClicked(final java.awt.event.MouseEvent ev\n             DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) resourceExplorerTree.\n                     getLastSelectedPathComponent();\n             DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) selectedNode.getParent();\n-            String parentNodeName = parentNode == null ? null : String.valueOf(parentNode.getUserObject());\n+            String parentNodeName = Optional.ofNullable(parentNode).map(node -> String.valueOf(node.getUserObject())).orElse(null);\n             if (selectedNode.isLeaf() && StringUtils.isNotBlank(parentNodeName)) {\n                 String leafNodeName = (String) selectedNode.getUserObject();\n                 DefaultMutableTreeNode grandParentNode = (DefaultMutableTreeNode) parentNode.getParent();"}]}