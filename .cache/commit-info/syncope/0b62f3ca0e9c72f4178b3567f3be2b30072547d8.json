{"sha":"0b62f3ca0e9c72f4178b3567f3be2b30072547d8","node_id":"C_kwDOJfYA1toAKDBiNjJmM2NhMGU5YzcyZjQxNzhiMzU2N2YzYmUyYjMwMDcyNTQ3ZDg","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-04-07T13:09:50Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-04-07T13:17:58Z"},"message":"[SYNCOPE-1748] Implementing RFC 7644 section 3.5.2. Modifying with PATCH  (#436)","tree":{"sha":"1a6702e44ec15cc66b99109e6a6002429f7b80c5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1a6702e44ec15cc66b99109e6a6002429f7b80c5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0b62f3ca0e9c72f4178b3567f3be2b30072547d8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0b62f3ca0e9c72f4178b3567f3be2b30072547d8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0b62f3ca0e9c72f4178b3567f3be2b30072547d8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"063a82bf63d31c11f005509dc29f06b9a92b8ce8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/063a82bf63d31c11f005509dc29f06b9a92b8ce8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/063a82bf63d31c11f005509dc29f06b9a92b8ce8"}],"stats":{"total":3640,"additions":2593,"deletions":1047},"files":[{"sha":"98ac9298719ea9dd5fb9a270aa1c685b388e0e4a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -463,8 +463,7 @@ protected void fill(\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // 3. plain attributes\n-        anyUR.getPlainAttrs().stream().\n-                filter(patch -> patch.getAttr() != null).forEach(patch -> {\n+        anyUR.getPlainAttrs().stream().filter(patch -> patch.getAttr() != null).forEach(patch -> {\n             PlainSchema schema = getPlainSchema(patch.getAttr().getSchema());\n             if (schema == null) {\n                 LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName() + \" {}, ignoring...\","},{"sha":"2430c8cab5083538f7f6ee941744abad6be62e85","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfEnterpriseUserPanel.java","status":"modified","additions":87,"deletions":104,"changes":191,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfEnterpriseUserPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfEnterpriseUserPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfEnterpriseUserPanel.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -19,16 +19,13 @@\n package org.apache.syncope.client.console.panels;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n import org.apache.syncope.common.lib.scim.SCIMEnterpriseUserConf;\n import org.apache.syncope.common.lib.scim.SCIMManagerConf;\n-import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n-import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.model.Model;\n@@ -57,98 +54,93 @@ public SCIMConfEnterpriseUserPanel(final String id, final SCIMConf scimConf) {\n \n         AjaxTextFieldPanel costCenterPanel =\n                 new AjaxTextFieldPanel(\"costCenter\", \"costCenter\",\n-                    new PropertyModel<>(\"costCenter\", \"costCenter\") {\n+                        new PropertyModel<>(\"costCenter\", \"costCenter\") {\n \n-                        private static final long serialVersionUID = -6427731218492117883L;\n+                    private static final long serialVersionUID = -6427731218492117883L;\n \n-                        @Override\n-                        public String getObject() {\n-                            return scimEnterpriseUserConf.getCostCenter();\n-                        }\n-\n-                        @Override\n-                        public void setObject(final String object) {\n-                            scimEnterpriseUserConf.setCostCenter(object);\n-                        }\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getCostCenter();\n+                    }\n \n-                    });\n-        costCenterPanel.setChoices(plainSchemaNames);\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.setCostCenter(object);\n+                    }\n+                });\n+        costCenterPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel departmentPanel =\n                 new AjaxTextFieldPanel(\"department\", \"department\",\n-                    new PropertyModel<>(\"department\", \"department\") {\n+                        new PropertyModel<>(\"department\", \"department\") {\n \n-                        private static final long serialVersionUID = -6427731218492117883L;\n+                    private static final long serialVersionUID = -6427731218492117883L;\n \n-                        @Override\n-                        public String getObject() {\n-                            return scimEnterpriseUserConf.getDepartment();\n-                        }\n-\n-                        @Override\n-                        public void setObject(final String object) {\n-                            scimEnterpriseUserConf.setDepartment(object);\n-                        }\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getDepartment();\n+                    }\n \n-                    });\n-        departmentPanel.setChoices(plainSchemaNames);\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.setDepartment(object);\n+                    }\n+                });\n+        departmentPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel divisionPanel =\n                 new AjaxTextFieldPanel(\"division\", \"division\",\n-                    new PropertyModel<>(\"division\", \"division\") {\n+                        new PropertyModel<>(\"division\", \"division\") {\n \n-                        private static final long serialVersionUID = -6427731218492117883L;\n+                    private static final long serialVersionUID = -6427731218492117883L;\n \n-                        @Override\n-                        public String getObject() {\n-                            return scimEnterpriseUserConf.getDivision();\n-                        }\n-\n-                        @Override\n-                        public void setObject(final String object) {\n-                            scimEnterpriseUserConf.setDivision(object);\n-                        }\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getDivision();\n+                    }\n \n-                    });\n-        divisionPanel.setChoices(plainSchemaNames);\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.setDivision(object);\n+                    }\n+                });\n+        divisionPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel employeeNumberPanel =\n                 new AjaxTextFieldPanel(\"employeeNumber\", \"employeeNumber\",\n-                    new PropertyModel<>(\"employeeNumber\", \"employeeNumber\") {\n+                        new PropertyModel<>(\"employeeNumber\", \"employeeNumber\") {\n \n-                        private static final long serialVersionUID = -6427731218492117883L;\n+                    private static final long serialVersionUID = -6427731218492117883L;\n \n-                        @Override\n-                        public String getObject() {\n-                            return scimEnterpriseUserConf.getEmployeeNumber();\n-                        }\n-\n-                        @Override\n-                        public void setObject(final String object) {\n-                            scimEnterpriseUserConf.setEmployeeNumber(object);\n-                        }\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getEmployeeNumber();\n+                    }\n \n-                    });\n-        employeeNumberPanel.setChoices(plainSchemaNames);\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.setEmployeeNumber(object);\n+                    }\n+                });\n+        employeeNumberPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel organizationPanel =\n                 new AjaxTextFieldPanel(\"organization\", \"organization\",\n-                    new PropertyModel<>(\"organization\", \"organization\") {\n+                        new PropertyModel<>(\"organization\", \"organization\") {\n \n-                        private static final long serialVersionUID = -6427731218492117883L;\n+                    private static final long serialVersionUID = -6427731218492117883L;\n \n-                        @Override\n-                        public String getObject() {\n-                            return scimEnterpriseUserConf.getOrganization();\n-                        }\n-\n-                        @Override\n-                        public void setObject(final String object) {\n-                            scimEnterpriseUserConf.setOrganization(object);\n-                        }\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getOrganization();\n+                    }\n \n-                    });\n-        organizationPanel.setChoices(plainSchemaNames);\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.setOrganization(object);\n+                    }\n+                });\n+        organizationPanel.setChoices(userPlainSchemas.getObject());\n \n         // manager\n         buildManagerAccordion();\n@@ -160,14 +152,9 @@ public void setObject(final String object) {\n         add(organizationPanel);\n     }\n \n-    @Override\n-    public void onEvent(final IEvent<?> event) {\n-        super.onEvent(event);\n-    }\n-\n     private void buildManagerAccordion() {\n-        final Accordion accordion = new Accordion(\"managerAccordion\",\n-                Collections.<ITab>singletonList(new AbstractTab(Model.of(\"manager\")) {\n+        Accordion accordion = new Accordion(\"managerAccordion\",\n+                List.of(new AbstractTab(Model.of(\"manager\")) {\n \n                     private static final long serialVersionUID = -5861786415855103549L;\n \n@@ -178,49 +165,46 @@ public WebMarkupContainer getPanel(final String panelId) {\n \n                 }), Model.of(-1)); // accordion closed at beginning\n         add(accordion.setOutputMarkupId(true));\n-\n     }\n \n     private SCIMConfAccordionContainer buildNameAccordionContent(final String panelId) {\n-        final List<AjaxTextFieldPanel> panelList = new ArrayList<>();\n+        List<AjaxTextFieldPanel> panelList = new ArrayList<>();\n \n         AjaxTextFieldPanel managerKeyPanel =\n                 new AjaxTextFieldPanel(\"accordionContent\", \"manager.key\",\n-                    new PropertyModel<>(scimEnterpriseUserConf.getManager(), \"accordionContent\") {\n+                        new PropertyModel<>(scimEnterpriseUserConf.getManager(), \"accordionContent\") {\n \n-                        private static final long serialVersionUID = -6427731218492117883L;\n+                    private static final long serialVersionUID = -6427731218492117883L;\n \n-                        @Override\n-                        public String getObject() {\n-                            return scimEnterpriseUserConf.getManager().getKey();\n-                        }\n-\n-                        @Override\n-                        public void setObject(final String object) {\n-                            scimEnterpriseUserConf.getManager().setKey(object);\n-                        }\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getManager().getKey();\n+                    }\n \n-                    });\n-        managerKeyPanel.setChoices(plainSchemaNames);\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.getManager().setKey(object);\n+                    }\n+                });\n+        managerKeyPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel managerDisplaNamePanel =\n                 new AjaxTextFieldPanel(\"accordionContent\", \"manager.displayName\",\n-                    new PropertyModel<>(scimEnterpriseUserConf.getManager(), \"accordionContent\") {\n+                        new PropertyModel<>(scimEnterpriseUserConf.getManager(), \"accordionContent\") {\n \n-                        private static final long serialVersionUID = -6427731218492117883L;\n+                    private static final long serialVersionUID = -6427731218492117883L;\n \n-                        @Override\n-                        public String getObject() {\n-                            return scimEnterpriseUserConf.getManager().getDisplayName();\n-                        }\n-\n-                        @Override\n-                        public void setObject(final String object) {\n-                            scimEnterpriseUserConf.getManager().setDisplayName(object);\n-                        }\n+                    @Override\n+                    public String getObject() {\n+                        return scimEnterpriseUserConf.getManager().getDisplayName();\n+                    }\n \n-                    });\n-        managerDisplaNamePanel.setChoices(plainSchemaNames);\n+                    @Override\n+                    public void setObject(final String object) {\n+                        scimEnterpriseUserConf.getManager().setDisplayName(object);\n+                    }\n+                });\n+        managerDisplaNamePanel.setChoices(userPlainSchemas.getObject());\n \n         panelList.add(managerKeyPanel);\n         panelList.add(managerDisplaNamePanel);\n@@ -229,5 +213,4 @@ public void setObject(final String object) {\n \n         return new SCIMConfAccordionContainer(panelId, panelList);\n     }\n-\n }"},{"sha":"d368e69d5b6017e156983d222de1bb17d28872a2","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfGeneralPanel.java","status":"modified","additions":10,"deletions":67,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -22,20 +22,17 @@\n import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.syncope.client.ui.commons.DateOps;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDateTimeFieldPanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n import org.apache.syncope.common.lib.scim.SCIMGeneralConf;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n public class SCIMConfGeneralPanel extends SCIMConfTabPanel {\n \n     private static final long serialVersionUID = 2765863608539154422L;\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SCIMConfGeneralPanel.class);\n-\n     public SCIMConfGeneralPanel(final String id, final SCIMConf scimConf) {\n         super(id);\n \n@@ -75,71 +72,17 @@ public void setObject(final Date object) {\n                 }, DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT);\n         lastChangeDatePanel.setEnabled(false);\n \n-        AjaxTextFieldPanel bulkMaxOperationsPanel =\n-                new AjaxTextFieldPanel(\"bulkMaxOperations\", \"bulkMaxOperations\",\n-                        new PropertyModel<>(\"bulkMaxOperations\", \"bulkMaxOperations\") {\n-\n-                    private static final long serialVersionUID = -6427731218492117883L;\n-\n-                    @Override\n-                    public String getObject() {\n-                        return String.valueOf(scimGeneralConf.getBulkMaxOperations());\n-                    }\n-\n-                    @Override\n-                    public void setObject(final String object) {\n-                        try {\n-                            scimGeneralConf.setBulkMaxOperations(Integer.parseInt(object));\n-                        } catch (NumberFormatException e) {\n-                            LOG.error(\"Invalid value provided for 'bulkMaxOperations': {}\", object, e);\n-                        }\n-                    }\n-                });\n-        bulkMaxOperationsPanel.setChoices(plainSchemaNames);\n-\n-        AjaxTextFieldPanel bulkMaxMaxPayloadSizePanel =\n-                new AjaxTextFieldPanel(\"bulkMaxMaxPayloadSize\", \"bulkMaxMaxPayloadSize\",\n-                        new PropertyModel<>(\"bulkMaxMaxPayloadSize\", \"bulkMaxMaxPayloadSize\") {\n-\n-                    private static final long serialVersionUID = -6427731218492117883L;\n-\n-                    @Override\n-                    public String getObject() {\n-                        return String.valueOf(scimGeneralConf.getBulkMaxPayloadSize());\n-                    }\n-\n-                    @Override\n-                    public void setObject(final String object) {\n-                        try {\n-                            scimGeneralConf.setBulkMaxPayloadSize(Integer.parseInt(object));\n-                        } catch (NumberFormatException e) {\n-                            LOG.error(\"Invalid value provided for 'bulkMaxPayloadSize': {}\", object, e);\n-                        }\n-                    }\n-                });\n-        bulkMaxMaxPayloadSizePanel.setChoices(plainSchemaNames);\n-\n-        AjaxTextFieldPanel filterMaxResultsPanel =\n-                new AjaxTextFieldPanel(\"filterMaxResults\", \"filterMaxResults\",\n-                        new PropertyModel<>(\"filterMaxResults\", \"filterMaxResults\") {\n+        AjaxSpinnerFieldPanel<Integer> bulkMaxOperationsPanel = new AjaxSpinnerFieldPanel.Builder<Integer>().\n+                build(\"bulkMaxOperations\", \"bulkMaxOperations\", Integer.class,\n+                        new PropertyModel<>(scimGeneralConf, \"bulkMaxOperations\"));\n \n-                    private static final long serialVersionUID = -6427731218492117883L;\n+        AjaxSpinnerFieldPanel<Integer> bulkMaxMaxPayloadSizePanel = new AjaxSpinnerFieldPanel.Builder<Integer>().\n+                build(\"bulkMaxMaxPayloadSize\", \"bulkMaxMaxPayloadSize\", Integer.class,\n+                        new PropertyModel<>(scimGeneralConf, \"bulkMaxMaxPayloadSize\"));\n \n-                    @Override\n-                    public String getObject() {\n-                        return String.valueOf(scimGeneralConf.getFilterMaxResults());\n-                    }\n-\n-                    @Override\n-                    public void setObject(final String object) {\n-                        try {\n-                            scimGeneralConf.setFilterMaxResults(Integer.parseInt(object));\n-                        } catch (NumberFormatException e) {\n-                            LOG.error(\"Invalid value provided for 'filterMaxResults': {}\", object, e);\n-                        }\n-                    }\n-                });\n-        filterMaxResultsPanel.setChoices(plainSchemaNames);\n+        AjaxSpinnerFieldPanel<Integer> filterMaxResultsPanel = new AjaxSpinnerFieldPanel.Builder<Integer>().\n+                build(\"filterMaxResults\", \"filterMaxResults\", Integer.class,\n+                        new PropertyModel<>(scimGeneralConf, \"filterMaxResults\"));\n \n         AjaxTextFieldPanel eTagValuePanel = new AjaxTextFieldPanel(\"eTagValue\", \"eTagValue\",\n                 new PropertyModel<>(\"eTagValue\", \"eTagValue\") {"},{"sha":"95b4d97ee6685d74fdda687ef3956cd873255f64","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfGroupPanel.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGroupPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGroupPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGroupPanel.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.lib.scim.SCIMGroupConf;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n+import org.apache.wicket.model.PropertyModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SCIMConfGroupPanel extends SCIMConfTabPanel {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SCIMConfGroupPanel.class);\n+\n+    private static final long serialVersionUID = 8747864142447220523L;\n+\n+    private final SCIMGroupConf scimGroupConf;\n+\n+    public SCIMConfGroupPanel(final String id, final SCIMConf scimConf) {\n+        super(id);\n+\n+        if (scimConf.getGroupConf() == null) {\n+            scimConf.setGroupConf(new SCIMGroupConf());\n+        }\n+        scimGroupConf = scimConf.getGroupConf();\n+\n+        final AutoCompleteSettings settings = new AutoCompleteSettings();\n+        settings.setShowCompleteListOnFocusGain(true);\n+        settings.setShowListOnEmptyInput(true);\n+        settings.setCssClassName(\"custom-autocomplete-box\");\n+\n+        AjaxTextFieldPanel externalIdPanel = new AjaxTextFieldPanel(\"externalId\", \"externalId\",\n+                new PropertyModel<>(\"externalId\", \"externalId\") {\n+\n+            private static final long serialVersionUID = -6427731218492117883L;\n+\n+            @Override\n+            public String getObject() {\n+                return scimGroupConf.getExternalId();\n+            }\n+\n+            @Override\n+            public void setObject(final String object) {\n+                scimGroupConf.setExternalId(object);\n+            }\n+        });\n+        externalIdPanel.setChoices(groupPlainSchemas.getObject());\n+\n+        add(externalIdPanel);\n+    }\n+}"},{"sha":"1ca2796d72467c3efcb39f1f595358c75905c836","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfPanel.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -128,6 +128,22 @@ public boolean isVisible() {\n             }\n         });\n \n+        tabs.add(new ITabComponent(\n+                new Model<>(getString(\"tab4\")), getString(\"tab4\")) {\n+\n+            private static final long serialVersionUID = 1998052474181916792L;\n+\n+            @Override\n+            public WebMarkupContainer getPanel(final String panelId) {\n+                return new SCIMConfGroupPanel(panelId, scimConfTO);\n+            }\n+\n+            @Override\n+            public boolean isVisible() {\n+                return true;\n+            }\n+        });\n+\n         return tabs;\n     }\n "},{"sha":"0c3be8603297bd19c62366a4b494a6e6650ffbff","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfTabPanel.java","status":"modified","additions":25,"deletions":8,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfTabPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfTabPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfTabPanel.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -26,21 +26,38 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n \n public class SCIMConfTabPanel extends Panel implements ModalPanel {\n \n     private static final long serialVersionUID = -4482885585790492795L;\n \n-    protected final List<String> plainSchemaNames = getPlainSchemas();\n+    protected final LoadableDetachableModel<List<String>> userPlainSchemas = new LoadableDetachableModel<>() {\n+\n+        private static final long serialVersionUID = 4659376149825914247L;\n+\n+        @Override\n+        protected List<String> load() {\n+            return SchemaRestClient.getSchemas(SchemaType.PLAIN, AnyTypeKind.USER).stream().\n+                    map(SchemaTO::getKey).\n+                    filter(name -> !\"password\".equals(name)).\n+                    sorted().collect(Collectors.toList());\n+        }\n+    };\n+\n+    protected final LoadableDetachableModel<List<String>> groupPlainSchemas = new LoadableDetachableModel<>() {\n+\n+        private static final long serialVersionUID = 4659376149825914247L;\n+\n+        @Override\n+        protected List<String> load() {\n+            return SchemaRestClient.getSchemas(SchemaType.PLAIN, AnyTypeKind.GROUP).stream().\n+                    map(SchemaTO::getKey).\n+                    sorted().collect(Collectors.toList());\n+        }\n+    };\n \n     public SCIMConfTabPanel(final String id) {\n         super(id);\n     }\n-\n-    private static List<String> getPlainSchemas() {\n-        return SchemaRestClient.getSchemas(SchemaType.PLAIN, AnyTypeKind.USER).stream().\n-                map(SchemaTO::getKey).\n-                filter(name -> !\"password\".equals(name)).\n-                sorted().collect(Collectors.toList());\n-    }\n }"},{"sha":"938bec2684c1a45ac67ca7674cca73d824dfec10","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfUserPanel.java","status":"modified","additions":307,"deletions":323,"changes":630,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.panels;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n@@ -34,10 +33,8 @@\n import org.apache.syncope.common.lib.scim.types.IMCanonicalType;\n import org.apache.syncope.common.lib.scim.types.PhoneNumberCanonicalType;\n import org.apache.syncope.common.lib.scim.types.PhotoCanonicalType;\n-import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n-import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.model.Model;\n@@ -70,157 +67,166 @@ public SCIMConfUserPanel(final String id, final SCIMConf scimConf) {\n         settings.setShowListOnEmptyInput(true);\n         settings.setCssClassName(\"custom-autocomplete-box\");\n \n-        AjaxTextFieldPanel displayNamePanel = new AjaxTextFieldPanel(\"displayName\", \"displayName\",\n-            new PropertyModel<>(\"displayName\", \"displayName\") {\n+        AjaxTextFieldPanel externalIdPanel = new AjaxTextFieldPanel(\"externalId\", \"externalId\",\n+                new PropertyModel<>(\"externalId\", \"externalId\") {\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getDisplayName();\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getExternalId();\n+            }\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.setDisplayName(object);\n-                }\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.setExternalId(object);\n+            }\n+        });\n+        externalIdPanel.setChoices(userPlainSchemas.getObject());\n \n-            });\n-        displayNamePanel.setChoices(plainSchemaNames);\n+        AjaxTextFieldPanel displayNamePanel = new AjaxTextFieldPanel(\"displayName\", \"displayName\",\n+                new PropertyModel<>(\"displayName\", \"displayName\") {\n \n-        AjaxTextFieldPanel localePanel = new AjaxTextFieldPanel(\"locale\", \"locale\",\n-            new PropertyModel<>(\"locale\", \"locale\") {\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getDisplayName();\n+            }\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getLocale();\n-                }\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.setDisplayName(object);\n+            }\n+        });\n+        displayNamePanel.setChoices(userPlainSchemas.getObject());\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.setLocale(object);\n-                }\n+        AjaxTextFieldPanel localePanel = new AjaxTextFieldPanel(\"locale\", \"locale\",\n+                new PropertyModel<>(\"locale\", \"locale\") {\n \n-            });\n-        localePanel.setChoices(plainSchemaNames);\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-        AjaxTextFieldPanel nickNamePanel = new AjaxTextFieldPanel(\"nickName\", \"nickName\",\n-            new PropertyModel<>(\"nickName\", \"nickName\") {\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getLocale();\n+            }\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.setLocale(object);\n+            }\n+        });\n+        localePanel.setChoices(userPlainSchemas.getObject());\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getNickName();\n-                }\n+        AjaxTextFieldPanel nickNamePanel = new AjaxTextFieldPanel(\"nickName\", \"nickName\",\n+                new PropertyModel<>(\"nickName\", \"nickName\") {\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.setNickName(object);\n-                }\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-            });\n-        nickNamePanel.setChoices(plainSchemaNames);\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getNickName();\n+            }\n \n-        AjaxTextFieldPanel preferredLanguagePanel = new AjaxTextFieldPanel(\"preferredLanguage\", \"preferredLanguage\",\n-            new PropertyModel<>(\"preferredLanguage\", \"preferredLanguage\") {\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.setNickName(object);\n+            }\n+        });\n+        nickNamePanel.setChoices(userPlainSchemas.getObject());\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+        AjaxTextFieldPanel preferredLanguagePanel = new AjaxTextFieldPanel(\"preferredLanguage\", \"preferredLanguage\",\n+                new PropertyModel<>(\"preferredLanguage\", \"preferredLanguage\") {\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getPreferredLanguage();\n-                }\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.setPreferredLanguage(object);\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getPreferredLanguage();\n+            }\n \n-            });\n-        preferredLanguagePanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.setPreferredLanguage(object);\n+            }\n+        });\n+        preferredLanguagePanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel profileUrlPanel = new AjaxTextFieldPanel(\"profileUrl\", \"profileUrl\",\n-            new PropertyModel<>(\"profileUrl\", \"profileUrl\") {\n-\n-                private static final long serialVersionUID = -6427731218492117883L;\n+                new PropertyModel<>(\"profileUrl\", \"profileUrl\") {\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getProfileUrl();\n-                }\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.setProfileUrl(object);\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getProfileUrl();\n+            }\n \n-            });\n-        profileUrlPanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.setProfileUrl(object);\n+            }\n+        });\n+        profileUrlPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel timezonePanel = new AjaxTextFieldPanel(\"timezone\", \"timezone\",\n-            new PropertyModel<>(\"timezone\", \"timezone\") {\n+                new PropertyModel<>(\"timezone\", \"timezone\") {\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getTimezone();\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getTimezone();\n+            }\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.setTimezone(object);\n-                }\n-\n-            });\n-        timezonePanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.setTimezone(object);\n+            }\n+        });\n+        timezonePanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel titlePanel = new AjaxTextFieldPanel(\"title\", \"title\",\n-            new PropertyModel<>(\"title\", \"title\") {\n-\n-                private static final long serialVersionUID = -6427731218492117883L;\n+                new PropertyModel<>(\"title\", \"title\") {\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getTitle();\n-                }\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.setTitle(object);\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getTitle();\n+            }\n \n-            });\n-        titlePanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.setTitle(object);\n+            }\n+        });\n+        titlePanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel userTypePanel = new AjaxTextFieldPanel(\"userType\", \"userType\",\n-            new PropertyModel<>(\"userType\", \"userType\") {\n+                new PropertyModel<>(\"userType\", \"userType\") {\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getUserType();\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getUserType();\n+            }\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.setUserType(object);\n-                }\n-\n-            });\n-        userTypePanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.setUserType(object);\n+            }\n+        });\n+        userTypePanel.setChoices(userPlainSchemas.getObject());\n \n         // name\n         buildNameAccordion();\n \n         // x509certificates\n         final AjaxTextFieldPanel x509CertificatesPanel = new AjaxTextFieldPanel(\"panel\", \"x509CertificatesPanel\",\n                 new Model<>(null));\n-        x509CertificatesPanel.setChoices(plainSchemaNames);\n+        x509CertificatesPanel.setChoices(userPlainSchemas.getObject());\n         MultiFieldPanel<String> x509CertificatesMultiPanel = new MultiFieldPanel.Builder<>(\n                 new ListModel<>(scimUserConf.getX509Certificates())).build(\n                 \"x509Certificates\",\n@@ -250,6 +256,7 @@ public void setObject(final String object) {\n         buildComplexPanels(scimUserConf.getIms(), \"imsAccordion\", \"ims\", IMCanonicalType.values());\n         buildComplexPanels(scimUserConf.getPhotos(), \"photosAccordion\", \"photos\", PhotoCanonicalType.values());\n \n+        add(externalIdPanel);\n         add(displayNamePanel);\n         add(localePanel);\n         add(nickNamePanel);\n@@ -267,7 +274,6 @@ public void setObject(final String object) {\n         add(new Label(\"phoneNumbersLabel\", Model.of(\"phoneNumbers\")));\n         add(new Label(\"imsLabel\", Model.of(\"ims\")));\n         add(new Label(\"photosLabel\", Model.of(\"photos\")));\n-\n     }\n \n     private <T extends Enum<?>> void buildComplexPanels(\n@@ -293,31 +299,29 @@ private <T extends Enum<?>> void buildComplexPanels(\n     }\n \n     private void buildNameAccordion() {\n-        final Accordion accordion = new Accordion(\"nameAccordion\",\n-                Collections.<ITab>singletonList(new AbstractTab(Model.of(\"name\")) {\n+        Accordion accordion = new Accordion(\"nameAccordion\", List.of(new AbstractTab(Model.of(\"name\")) {\n \n-                    private static final long serialVersionUID = -5861786415855103549L;\n+            private static final long serialVersionUID = -5861786415855103549L;\n \n-                    @Override\n-                    public WebMarkupContainer getPanel(final String panelId) {\n-                        return buildNameAccordionContent(panelId);\n-                    }\n+            @Override\n+            public WebMarkupContainer getPanel(final String panelId) {\n+                return buildNameAccordionContent(panelId);\n+            }\n \n-                }), Model.of(-1)); // accordion closed at beginning\n+        }), Model.of(-1)); // accordion closed at beginning\n         add(accordion.setOutputMarkupId(true));\n     }\n \n     private void buildAddressAccordion(final SCIMUserAddressConf address, final AddressCanonicalType canonicalType) {\n         Accordion accordion = new Accordion(\"addressesAccordion_\" + address.getType().name(),\n-                Collections.<ITab>singletonList(new AbstractTab(Model.of(\"address.\" + address.getType().name())) {\n+                List.of(new AbstractTab(Model.of(\"address.\" + address.getType().name())) {\n \n                     private static final long serialVersionUID = -5861786415855103549L;\n \n                     @Override\n                     public WebMarkupContainer getPanel(final String panelId) {\n                         return buildAddressAccordionContent(address, canonicalType, panelId);\n                     }\n-\n                 }), Model.of(-1)); // accordion closed at beginning\n         add(accordion.setOutputMarkupId(true));\n     }\n@@ -329,7 +333,7 @@ private <T extends Enum<?>> void buildComplexAccordion(\n             final T canonicalType) {\n \n         Accordion accordion = new Accordion(basePanelId + '_' + complex.getType().name(),\n-                Collections.<ITab>singletonList(new AbstractTab(Model.of(baseTabId + '.' + complex.getType().name())) {\n+                List.of(new AbstractTab(Model.of(baseTabId + '.' + complex.getType().name())) {\n \n                     private static final long serialVersionUID = -5861786415855103549L;\n \n@@ -343,115 +347,109 @@ public WebMarkupContainer getPanel(final String panelId) {\n     }\n \n     private SCIMConfAccordionContainer buildNameAccordionContent(final String panelId) {\n-        final List<AjaxTextFieldPanel> panelList = new ArrayList<>();\n+        List<AjaxTextFieldPanel> panelList = new ArrayList<>();\n \n         AjaxTextFieldPanel nameFamilyNamePanel = new AjaxTextFieldPanel(\"accordionContent\", \"name.familyName\",\n-            new PropertyModel<>(scimUserConf.getName(), \"accordionContent\") {\n+                new PropertyModel<>(scimUserConf.getName(), \"accordionContent\") {\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getName().getFamilyName();\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getName().getFamilyName();\n+            }\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.getName().setFamilyName(object);\n-                }\n-\n-            });\n-        nameFamilyNamePanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.getName().setFamilyName(object);\n+            }\n+        });\n+        nameFamilyNamePanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel nameFormattedPanel = new AjaxTextFieldPanel(\"accordionContent\", \"name.formatted\",\n-            new PropertyModel<>(scimUserConf.getName(), \"accordionContent\") {\n-\n-                private static final long serialVersionUID = -6427731218492117883L;\n+                new PropertyModel<>(scimUserConf.getName(), \"accordionContent\") {\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getName().getFormatted();\n-                }\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.getName().setFormatted(object);\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getName().getFormatted();\n+            }\n \n-            });\n-        nameFormattedPanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.getName().setFormatted(object);\n+            }\n+        });\n+        nameFormattedPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel nameGivenNamePanel = new AjaxTextFieldPanel(\"accordionContent\", \"name.givenName\",\n-            new PropertyModel<>(scimUserConf.getName(), \"accordionContent\") {\n+                new PropertyModel<>(scimUserConf.getName(), \"accordionContent\") {\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getName().getGivenName();\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getName().getGivenName();\n+            }\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.getName().setGivenName(object);\n-                }\n-\n-            });\n-        nameGivenNamePanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.getName().setGivenName(object);\n+            }\n+        });\n+        nameGivenNamePanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel nameHonorificPrefixPanel = new AjaxTextFieldPanel(\"accordionContent\", \"name.honorificPrefix\",\n-            new PropertyModel<>(scimUserConf.getName(), \"accordionContent\") {\n-\n-                private static final long serialVersionUID = -6427731218492117883L;\n+                new PropertyModel<>(scimUserConf.getName(), \"accordionContent\") {\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getName().getHonorificPrefix();\n-                }\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.getName().setHonorificPrefix(object);\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getName().getHonorificPrefix();\n+            }\n \n-            });\n-        nameHonorificPrefixPanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.getName().setHonorificPrefix(object);\n+            }\n+        });\n+        nameHonorificPrefixPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel nameHonorificSuffixPanel = new AjaxTextFieldPanel(\"accordionContent\", \"name.honorificSuffix\",\n-            new PropertyModel<>(scimUserConf.getName(), \"accordionContent\") {\n-\n-                private static final long serialVersionUID = -6427731218492117883L;\n+                new PropertyModel<>(scimUserConf.getName(), \"accordionContent\") {\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getName().getHonorificSuffix();\n-                }\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.getName().setHonorificSuffix(object);\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getName().getHonorificSuffix();\n+            }\n \n-            });\n-        nameHonorificSuffixPanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.getName().setHonorificSuffix(object);\n+            }\n+        });\n+        nameHonorificSuffixPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel nameMiddleNamePanel = new AjaxTextFieldPanel(\"accordionContent\", \"name.middleName\",\n-            new PropertyModel<>(scimUserConf.getName(), \"accordionContent\") {\n+                new PropertyModel<>(scimUserConf.getName(), \"accordionContent\") {\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public String getObject() {\n-                    return scimUserConf.getName().getMiddleName();\n-                }\n+            @Override\n+            public String getObject() {\n+                return scimUserConf.getName().getMiddleName();\n+            }\n \n-                @Override\n-                public void setObject(final String object) {\n-                    scimUserConf.getName().setMiddleName(object);\n-                }\n-\n-            });\n-        nameMiddleNamePanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                scimUserConf.getName().setMiddleName(object);\n+            }\n+        });\n+        nameMiddleNamePanel.setChoices(userPlainSchemas.getObject());\n \n         panelList.add(nameFamilyNamePanel);\n         panelList.add(nameFormattedPanel);\n@@ -468,61 +466,58 @@ private <T extends Enum<?>> SCIMConfAccordionContainer buildComplexAccordionCont\n             final T canonicalType,\n             final String panelId) {\n \n-        final List<AjaxTextFieldPanel> panelList = new ArrayList<>();\n-        final String fieldName = panelId + '.' + canonicalType.name();\n+        List<AjaxTextFieldPanel> panelList = new ArrayList<>();\n+        String fieldName = panelId + '.' + canonicalType.name();\n \n         AjaxTextFieldPanel displayPanel = new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".display\",\n-            new PropertyModel<>(complex, \"accordionContent\") {\n-\n-                private static final long serialVersionUID = -6427731218492117883L;\n+                new PropertyModel<>(complex, \"accordionContent\") {\n \n-                @Override\n-                public String getObject() {\n-                    return complex.getDisplay();\n-                }\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public void setObject(final String object) {\n-                    complex.setDisplay(object);\n-                }\n+            @Override\n+            public String getObject() {\n+                return complex.getDisplay();\n+            }\n \n-            });\n-        displayPanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                complex.setDisplay(object);\n+            }\n+        });\n+        displayPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel valuePanel = new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".value\",\n-            new PropertyModel<>(complex, \"accordionContent\") {\n+                new PropertyModel<>(complex, \"accordionContent\") {\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public String getObject() {\n-                    return complex.getValue();\n-                }\n+            @Override\n+            public String getObject() {\n+                return complex.getValue();\n+            }\n \n-                @Override\n-                public void setObject(final String object) {\n-                    complex.setValue(object);\n-                }\n-\n-            });\n-        valuePanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                complex.setValue(object);\n+            }\n+        });\n+        valuePanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel primaryPanel = new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".primary\",\n-            new PropertyModel<>(complex, \"accordionContent\") {\n-\n-                private static final long serialVersionUID = -6427731218492117883L;\n+                new PropertyModel<>(complex, \"accordionContent\") {\n \n-                @Override\n-                public String getObject() {\n-                    return String.valueOf(complex.isPrimary());\n-                }\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public void setObject(final String object) {\n-                    complex.setPrimary(Boolean.valueOf(object));\n-                }\n+            @Override\n+            public String getObject() {\n+                return String.valueOf(complex.isPrimary());\n+            }\n \n-            });\n+            @Override\n+            public void setObject(final String object) {\n+                complex.setPrimary(Boolean.parseBoolean(object));\n+            }\n+        });\n         primaryPanel.setChoices(List.of(\"true\", \"false\"));\n \n         panelList.add(displayPanel);\n@@ -537,116 +532,110 @@ private SCIMConfAccordionContainer buildAddressAccordionContent(\n             final AddressCanonicalType canonicalType,\n             final String panelId) {\n \n-        final List<AjaxTextFieldPanel> panelList = new ArrayList<>();\n-        final String fieldName = \"addresses.\" + canonicalType.name();\n+        List<AjaxTextFieldPanel> panelList = new ArrayList<>();\n+        String fieldName = \"addresses.\" + canonicalType.name();\n \n         AjaxTextFieldPanel addressCountryPanel = new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".country\",\n-            new PropertyModel<>(address, \"accordionContent\") {\n-\n-                private static final long serialVersionUID = -6427731218492117883L;\n+                new PropertyModel<>(address, \"accordionContent\") {\n \n-                @Override\n-                public String getObject() {\n-                    return address.getCountry();\n-                }\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public void setObject(final String object) {\n-                    address.setCountry(object);\n-                }\n+            @Override\n+            public String getObject() {\n+                return address.getCountry();\n+            }\n \n-            });\n-        addressCountryPanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                address.setCountry(object);\n+            }\n+        });\n+        addressCountryPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel addressFormattedPanel = new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".formatted\",\n-            new PropertyModel<>(address, \"accordionContent\") {\n+                new PropertyModel<>(address, \"accordionContent\") {\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public String getObject() {\n-                    return address.getFormatted();\n-                }\n+            @Override\n+            public String getObject() {\n+                return address.getFormatted();\n+            }\n \n-                @Override\n-                public void setObject(final String object) {\n-                    address.setFormatted(object);\n-                }\n-\n-            });\n-        addressFormattedPanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                address.setFormatted(object);\n+            }\n+        });\n+        addressFormattedPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel addressLocalityPanel = new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".locality\",\n-            new PropertyModel<>(address, \"accordionContent\") {\n-\n-                private static final long serialVersionUID = -6427731218492117883L;\n+                new PropertyModel<>(address, \"accordionContent\") {\n \n-                @Override\n-                public String getObject() {\n-                    return address.getLocality();\n-                }\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public void setObject(final String object) {\n-                    address.setLocality(object);\n-                }\n+            @Override\n+            public String getObject() {\n+                return address.getLocality();\n+            }\n \n-            });\n-        addressLocalityPanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                address.setLocality(object);\n+            }\n+        });\n+        addressLocalityPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel addressRegionPanel = new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".region\",\n-            new PropertyModel<>(address, \"accordionContent\") {\n+                new PropertyModel<>(address, \"accordionContent\") {\n \n-                private static final long serialVersionUID = -6427731218492117883L;\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public String getObject() {\n-                    return address.getRegion();\n-                }\n+            @Override\n+            public String getObject() {\n+                return address.getRegion();\n+            }\n \n-                @Override\n-                public void setObject(final String object) {\n-                    address.setRegion(object);\n-                }\n-\n-            });\n-        addressRegionPanel.setChoices(plainSchemaNames);\n+            @Override\n+            public void setObject(final String object) {\n+                address.setRegion(object);\n+            }\n+        });\n+        addressRegionPanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel addressPostalCodePanel =\n                 new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".postalCode\",\n-                    new PropertyModel<>(address, \"accordionContent\") {\n-\n-                        private static final long serialVersionUID = -6427731218492117883L;\n+                        new PropertyModel<>(address, \"accordionContent\") {\n \n-                        @Override\n-                        public String getObject() {\n-                            return address.getPostalCode();\n-                        }\n+                    private static final long serialVersionUID = -6427731218492117883L;\n \n-                        @Override\n-                        public void setObject(final String object) {\n-                            address.setPostalCode(object);\n-                        }\n+                    @Override\n+                    public String getObject() {\n+                        return address.getPostalCode();\n+                    }\n \n-                    });\n-        addressPostalCodePanel.setChoices(plainSchemaNames);\n+                    @Override\n+                    public void setObject(final String object) {\n+                        address.setPostalCode(object);\n+                    }\n+                });\n+        addressPostalCodePanel.setChoices(userPlainSchemas.getObject());\n \n         AjaxTextFieldPanel addressPrimaryPanel = new AjaxTextFieldPanel(\"accordionContent\", fieldName + \".primary\",\n-            new PropertyModel<>(address, \"accordionContent\") {\n-\n-                private static final long serialVersionUID = -6427731218492117883L;\n+                new PropertyModel<>(address, \"accordionContent\") {\n \n-                @Override\n-                public String getObject() {\n-                    return String.valueOf(address.isPrimary());\n-                }\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                @Override\n-                public void setObject(final String object) {\n-                    address.setPrimary(Boolean.valueOf(object));\n-                }\n+            @Override\n+            public String getObject() {\n+                return String.valueOf(address.isPrimary());\n+            }\n \n-            });\n+            @Override\n+            public void setObject(final String object) {\n+                address.setPrimary(Boolean.parseBoolean(object));\n+            }\n+        });\n         addressPrimaryPanel.setChoices(List.of(\"true\", \"false\"));\n \n         panelList.add(addressCountryPanel);\n@@ -658,9 +647,4 @@ public void setObject(final String object) {\n \n         return new SCIMConfAccordionContainer(panelId, panelList);\n     }\n-\n-    @Override\n-    public void onEvent(final IEvent<?> event) {\n-        super.onEvent(event);\n-    }\n }"},{"sha":"dd38ad806b452810967bfd848fc73f1e69c9723c","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfGroupPanel.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGroupPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGroupPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGroupPanel.html?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"externalId\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"10d4781a8f3ec830c1ea0e2613b97bbfb5be6ece","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfPanel.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel.properties?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -19,3 +19,4 @@ tab2=User\n tab3=EnterpriseUser\n \n saveButton=Save\n+tab4=Group"},{"sha":"10d4781a8f3ec830c1ea0e2613b97bbfb5be6ece","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfPanel_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_it.properties?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -19,3 +19,4 @@ tab2=User\n tab3=EnterpriseUser\n \n saveButton=Save\n+tab4=Group"},{"sha":"10d4781a8f3ec830c1ea0e2613b97bbfb5be6ece","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfPanel_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_pt_BR.properties?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -19,3 +19,4 @@ tab2=User\n tab3=EnterpriseUser\n \n saveButton=Save\n+tab4=Group"},{"sha":"10d4781a8f3ec830c1ea0e2613b97bbfb5be6ece","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfPanel_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfPanel_ru.properties?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -19,3 +19,4 @@ tab2=User\n tab3=EnterpriseUser\n \n saveButton=Save\n+tab4=Group"},{"sha":"9f8d97059f7e41b3b7175477c25211c79250ed00","filename":"ext/scimv2/client-console/src/main/resources/org/apache/syncope/client/console/panels/SCIMConfUserPanel.html","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.html?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -18,6 +18,7 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n+    <div wicket:id=\"externalId\"/>\n     <div wicket:id=\"displayName\"/>\n     <div wicket:id=\"locale\"/>\n     <div wicket:id=\"nickName\"/>"},{"sha":"bbdf0a4770ce967f913e75fc0fadf702e6129552","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMComplexConf.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMComplexConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMComplexConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMComplexConf.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -63,5 +63,4 @@ public boolean isPrimary() {\n     public void setPrimary(final boolean primary) {\n         this.primary = primary;\n     }\n-\n }"},{"sha":"98fe8f2b4b3e4b15be079f412b43b3a3f63e58d9","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMConf.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMConf.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -32,6 +32,8 @@ public class SCIMConf implements Serializable {\n \n     private SCIMEnterpriseUserConf enterpriseUserConf;\n \n+    private SCIMGroupConf groupConf;\n+\n     public SCIMGeneralConf getGeneralConf() {\n         return generalConf;\n     }\n@@ -56,4 +58,11 @@ public void setEnterpriseUserConf(final SCIMEnterpriseUserConf enterpriseUserCon\n         this.enterpriseUserConf = enterpriseUserConf;\n     }\n \n+    public SCIMGroupConf getGroupConf() {\n+        return groupConf;\n+    }\n+\n+    public void setGroupConf(final SCIMGroupConf groupConf) {\n+        this.groupConf = groupConf;\n+    }\n }"},{"sha":"d3c9affe6c8869eacc289a4f2a77c057a6a5aa96","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMEnterpriseUserConf.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMEnterpriseUserConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMEnterpriseUserConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMEnterpriseUserConf.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -110,5 +110,4 @@ public SCIMManagerConf getManager() {\n     public void setManager(final SCIMManagerConf manager) {\n         this.manager = manager;\n     }\n-\n }"},{"sha":"e7352b52ba8c42c02e2520832b06343c0eefd490","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMGeneralConf.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGeneralConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGeneralConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGeneralConf.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -87,5 +87,4 @@ public int getFilterMaxResults() {\n     public void setFilterMaxResults(final int filterMaxResults) {\n         this.filterMaxResults = filterMaxResults;\n     }\n-\n }"},{"sha":"7aa56c86c2bcf00f8933f76ed9a58d2adadcc929","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMGroupConf.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGroupConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGroupConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMGroupConf.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.scim;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class SCIMGroupConf implements Serializable {\n+\n+    private static final long serialVersionUID = -2700011089067219156L;\n+\n+    private String externalId;\n+\n+    @JsonIgnore\n+    public Map<String, String> asMap() {\n+        Map<String, String> map = new HashMap<>();\n+\n+        if (externalId != null) {\n+            map.put(\"externalId\", externalId);\n+        }\n+\n+        return Collections.unmodifiableMap(map);\n+    }\n+\n+    public String getExternalId() {\n+        return externalId;\n+    }\n+\n+    public void setExternalId(final String externalId) {\n+        this.externalId = externalId;\n+    }\n+}"},{"sha":"f89fc8b3da3d8f21648db3d2b7d8a6449ea4a523","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserConf.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMUserConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMUserConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMUserConf.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -34,6 +34,8 @@ public class SCIMUserConf implements Serializable {\n \n     private static final long serialVersionUID = -2700011089067219156L;\n \n+    private String externalId;\n+\n     private SCIMUserNameConf name;\n \n     private String displayName;\n@@ -68,6 +70,10 @@ public class SCIMUserConf implements Serializable {\n     public Map<String, String> asMap() {\n         Map<String, String> map = new HashMap<>();\n \n+        if (externalId != null) {\n+            map.put(\"externalId\", externalId);\n+        }\n+\n         if (displayName != null) {\n             map.put(\"displayName\", displayName);\n         }\n@@ -96,6 +102,14 @@ public Map<String, String> asMap() {\n         return Collections.unmodifiableMap(map);\n     }\n \n+    public String getExternalId() {\n+        return externalId;\n+    }\n+\n+    public void setExternalId(final String externalId) {\n+        this.externalId = externalId;\n+    }\n+\n     public SCIMUserNameConf getName() {\n         return name;\n     }\n@@ -191,5 +205,4 @@ public List<SCIMUserAddressConf> getAddresses() {\n     public List<String> getX509Certificates() {\n         return x509Certificates;\n     }\n-\n }"},{"sha":"f42e820f40c2942ff9d82b1119e8a024620e8b46","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java","status":"modified","additions":639,"deletions":235,"changes":874,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -22,23 +22,40 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.commons.jexl3.MapContext;\n+import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.scim.SCIMComplexConf;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.lib.scim.SCIMEnterpriseUserConf;\n+import org.apache.syncope.common.lib.scim.SCIMManagerConf;\n+import org.apache.syncope.common.lib.scim.SCIMUserAddressConf;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.core.logic.scim.SCIMConfManager;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.apache.syncope.core.spring.security.AuthDataAccessor;\n import org.apache.syncope.ext.scimv2.api.BadRequestException;\n import org.apache.syncope.ext.scimv2.api.data.Group;\n@@ -47,16 +64,19 @@\n import org.apache.syncope.ext.scimv2.api.data.SCIMComplexValue;\n import org.apache.syncope.ext.scimv2.api.data.SCIMEnterpriseInfo;\n import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;\n+import org.apache.syncope.ext.scimv2.api.data.SCIMPatchOperation;\n import org.apache.syncope.ext.scimv2.api.data.SCIMUser;\n import org.apache.syncope.ext.scimv2.api.data.SCIMUserAddress;\n import org.apache.syncope.ext.scimv2.api.data.SCIMUserManager;\n import org.apache.syncope.ext.scimv2.api.data.SCIMUserName;\n import org.apache.syncope.ext.scimv2.api.data.Value;\n import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.apache.syncope.ext.scimv2.api.type.Function;\n+import org.apache.syncope.ext.scimv2.api.type.PatchOp;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n \n public class SCIMDataBinder {\n \n@@ -69,6 +89,30 @@ public class SCIMDataBinder {\n \n     protected static final List<String> GROUP_SCHEMAS = List.of(Resource.Group.schema());\n \n+    public static String filter2JexlExpression(final String filter) {\n+        String jexlExpression = filter.\n+                replace(\" co \", \" =~ \").\n+                replace(\" sw \", \" =^ \").\n+                replace(\" ew \", \" =$ \");\n+\n+        boolean endsWithPR = jexlExpression.endsWith(\" pr\");\n+        int pr = endsWithPR ? jexlExpression.indexOf(\" pr\") : jexlExpression.indexOf(\" pr \");\n+        while (pr != -1) {\n+            String before = jexlExpression.substring(0, pr);\n+            int start = before.indexOf(' ') == -1 ? 0 : jexlExpression.substring(0, pr).lastIndexOf(' ', pr) + 1;\n+            String literal = jexlExpression.substring(start, pr);\n+\n+            endsWithPR = jexlExpression.endsWith(\" pr\");\n+            jexlExpression = jexlExpression.replace(\n+                    literal + \" pr\" + (endsWithPR ? \"\" : \" \"),\n+                    \"not(empty(\" + literal + \"))\" + (endsWithPR ? \"\" : \" \"));\n+\n+            pr = endsWithPR ? jexlExpression.indexOf(\" pr\") : jexlExpression.indexOf(\" pr \");\n+        }\n+\n+        return jexlExpression;\n+    }\n+\n     protected final SCIMConfManager confManager;\n \n     protected final UserLogic userLogic;\n@@ -102,9 +146,8 @@ protected <E extends Enum<?>> void fill(\n             if (conf.getType() != null) {\n                 value.setType(conf.getType().name());\n             }\n-            if (conf.isPrimary()) {\n-                value.setPrimary(true);\n-            }\n+\n+            value.setPrimary(conf.isPrimary());\n \n             if (!value.isEmpty()) {\n                 values.add(value);\n@@ -152,8 +195,7 @@ public SCIMUser toSCIMUser(\n                 new Meta(\n                         Resource.User,\n                         userTO.getCreationDate(),\n-                        userTO.getLastChangeDate() == null\n-                        ? userTO.getCreationDate() : userTO.getLastChangeDate(),\n+                        Optional.ofNullable(userTO.getLastChangeDate()).orElse(userTO.getCreationDate()),\n                         userTO.getETagValue(),\n                         location),\n                 output(attributes, excludedAttributes, \"userName\", userTO.getUsername()),\n@@ -166,6 +208,13 @@ public SCIMUser toSCIMUser(\n         attrs.put(\"username\", new Attr.Builder(\"username\").value(userTO.getUsername()).build());\n \n         if (conf.getUserConf() != null) {\n+            if (output(attributes, excludedAttributes, \"externalId\")\n+                    && conf.getUserConf().getExternalId() != null\n+                    && attrs.containsKey(conf.getUserConf().getExternalId())) {\n+\n+                user.setExternalId(attrs.get(conf.getUserConf().getExternalId()).getValues().get(0));\n+            }\n+\n             if (output(attributes, excludedAttributes, \"name\") && conf.getUserConf().getName() != null) {\n                 SCIMUserName name = new SCIMUserName();\n \n@@ -300,122 +349,139 @@ public SCIMUser toSCIMUser(\n                 });\n             }\n             if (output(attributes, excludedAttributes, \"x509Certificates\")) {\n-                conf.getUserConf().getX509Certificates().stream()\n-                        .filter(attrs::containsKey)\n-                        .forEachOrdered(certificate -> user.getX509Certificates().add(\n-                        new Value(attrs.get(certificate).getValues().get(0))));\n+                conf.getUserConf().getX509Certificates().stream().filter(attrs::containsKey).\n+                        forEach(cert -> user.getX509Certificates().add(new Value(attrs.get(cert).getValues().get(0))));\n             }\n+        }\n \n-            if (conf.getEnterpriseUserConf() != null) {\n-                SCIMEnterpriseInfo enterpriseInfo = new SCIMEnterpriseInfo();\n-\n-                if (output(attributes, excludedAttributes, \"employeeNumber\")\n-                        && conf.getEnterpriseUserConf().getEmployeeNumber() != null\n-                        && attrs.containsKey(conf.getEnterpriseUserConf().getEmployeeNumber())) {\n-\n-                    enterpriseInfo.setEmployeeNumber(\n-                            attrs.get(conf.getEnterpriseUserConf().getEmployeeNumber()).getValues().get(0));\n-                }\n-                if (output(attributes, excludedAttributes, \"costCenter\")\n-                        && conf.getEnterpriseUserConf().getCostCenter() != null\n-                        && attrs.containsKey(conf.getEnterpriseUserConf().getCostCenter())) {\n-\n-                    enterpriseInfo.setCostCenter(\n-                            attrs.get(conf.getEnterpriseUserConf().getCostCenter()).getValues().get(0));\n-                }\n-                if (output(attributes, excludedAttributes, \"organization\")\n-                        && conf.getEnterpriseUserConf().getOrganization() != null\n-                        && attrs.containsKey(conf.getEnterpriseUserConf().getOrganization())) {\n-\n-                    enterpriseInfo.setOrganization(\n-                            attrs.get(conf.getEnterpriseUserConf().getOrganization()).getValues().get(0));\n-                }\n-                if (output(attributes, excludedAttributes, \"division\")\n-                        && conf.getEnterpriseUserConf().getDivision() != null\n-                        && attrs.containsKey(conf.getEnterpriseUserConf().getDivision())) {\n+        if (conf.getEnterpriseUserConf() != null) {\n+            SCIMEnterpriseInfo enterpriseInfo = new SCIMEnterpriseInfo();\n \n-                    enterpriseInfo.setDivision(\n-                            attrs.get(conf.getEnterpriseUserConf().getDivision()).getValues().get(0));\n-                }\n-                if (output(attributes, excludedAttributes, \"department\")\n-                        && conf.getEnterpriseUserConf().getDepartment() != null\n-                        && attrs.containsKey(conf.getEnterpriseUserConf().getDepartment())) {\n+            if (output(attributes, excludedAttributes, \"employeeNumber\")\n+                    && conf.getEnterpriseUserConf().getEmployeeNumber() != null\n+                    && attrs.containsKey(conf.getEnterpriseUserConf().getEmployeeNumber())) {\n \n-                    enterpriseInfo.setDepartment(\n-                            attrs.get(conf.getEnterpriseUserConf().getDepartment()).getValues().get(0));\n-                }\n-                if (output(attributes, excludedAttributes, \"manager\")\n-                        && conf.getEnterpriseUserConf().getManager() != null) {\n+                enterpriseInfo.setEmployeeNumber(\n+                        attrs.get(conf.getEnterpriseUserConf().getEmployeeNumber()).getValues().get(0));\n+            }\n+            if (output(attributes, excludedAttributes, \"costCenter\")\n+                    && conf.getEnterpriseUserConf().getCostCenter() != null\n+                    && attrs.containsKey(conf.getEnterpriseUserConf().getCostCenter())) {\n \n-                    SCIMUserManager manager = new SCIMUserManager();\n+                enterpriseInfo.setCostCenter(\n+                        attrs.get(conf.getEnterpriseUserConf().getCostCenter()).getValues().get(0));\n+            }\n+            if (output(attributes, excludedAttributes, \"organization\")\n+                    && conf.getEnterpriseUserConf().getOrganization() != null\n+                    && attrs.containsKey(conf.getEnterpriseUserConf().getOrganization())) {\n \n-                    if (conf.getEnterpriseUserConf().getManager().getKey() != null\n-                            && attrs.containsKey(conf.getEnterpriseUserConf().getManager().getKey())) {\n+                enterpriseInfo.setOrganization(\n+                        attrs.get(conf.getEnterpriseUserConf().getOrganization()).getValues().get(0));\n+            }\n+            if (output(attributes, excludedAttributes, \"division\")\n+                    && conf.getEnterpriseUserConf().getDivision() != null\n+                    && attrs.containsKey(conf.getEnterpriseUserConf().getDivision())) {\n \n-                        try {\n-                            UserTO userManager = userLogic.read(attrs.get(\n-                                    conf.getEnterpriseUserConf().getManager().getKey()).getValues().get(0));\n-                            manager.setValue(userManager.getKey());\n-                            manager.setRef(\n-                                    StringUtils.substringBefore(location, \"/Users\") + \"/Users/\" + userManager.getKey());\n+                enterpriseInfo.setDivision(\n+                        attrs.get(conf.getEnterpriseUserConf().getDivision()).getValues().get(0));\n+            }\n+            if (output(attributes, excludedAttributes, \"department\")\n+                    && conf.getEnterpriseUserConf().getDepartment() != null\n+                    && attrs.containsKey(conf.getEnterpriseUserConf().getDepartment())) {\n \n-                            if (conf.getEnterpriseUserConf().getManager().getDisplayName() != null) {\n-                                Attr displayName = userManager.getPlainAttr(\n+                enterpriseInfo.setDepartment(\n+                        attrs.get(conf.getEnterpriseUserConf().getDepartment()).getValues().get(0));\n+            }\n+            if (output(attributes, excludedAttributes, \"manager\")\n+                    && conf.getEnterpriseUserConf().getManager() != null) {\n+\n+                SCIMUserManager manager = new SCIMUserManager();\n+\n+                if (conf.getEnterpriseUserConf().getManager().getKey() != null\n+                        && attrs.containsKey(conf.getEnterpriseUserConf().getManager().getKey())) {\n+\n+                    try {\n+                        UserTO userManager = userLogic.read(attrs.get(\n+                                conf.getEnterpriseUserConf().getManager().getKey()).getValues().get(0));\n+                        manager.setValue(userManager.getKey());\n+                        manager.setRef(\n+                                StringUtils.substringBefore(location, \"/Users\") + \"/Users/\" + userManager.getKey());\n+\n+                        if (conf.getEnterpriseUserConf().getManager().getDisplayName() != null) {\n+                            Attr displayName = userManager.getPlainAttr(\n+                                    conf.getEnterpriseUserConf().getManager().getDisplayName()).orElse(null);\n+                            if (displayName == null) {\n+                                displayName = userManager.getDerAttr(\n                                         conf.getEnterpriseUserConf().getManager().getDisplayName()).orElse(null);\n-                                if (displayName == null) {\n-                                    displayName = userManager.getDerAttr(\n-                                            conf.getEnterpriseUserConf().getManager().getDisplayName()).orElse(null);\n-                                }\n-                                if (displayName == null) {\n-                                    displayName = userManager.getVirAttr(\n-                                            conf.getEnterpriseUserConf().getManager().getDisplayName()).orElse(null);\n-                                }\n-                                if (displayName != null) {\n-                                    manager.setDisplayName(displayName.getValues().get(0));\n-                                }\n                             }\n-                        } catch (Exception e) {\n-                            LOG.error(\"Could not read user {}\", conf.getEnterpriseUserConf().getManager().getKey(), e);\n+                            if (displayName == null) {\n+                                displayName = userManager.getVirAttr(\n+                                        conf.getEnterpriseUserConf().getManager().getDisplayName()).orElse(null);\n+                            }\n+                            if (displayName != null) {\n+                                manager.setDisplayName(displayName.getValues().get(0));\n+                            }\n                         }\n-                    }\n-\n-                    if (!manager.isEmpty()) {\n-                        enterpriseInfo.setManager(manager);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not read user {}\", conf.getEnterpriseUserConf().getManager().getKey(), e);\n                     }\n                 }\n \n-                if (!enterpriseInfo.isEmpty()) {\n-                    user.setEnterpriseInfo(enterpriseInfo);\n+                if (!manager.isEmpty()) {\n+                    enterpriseInfo.setManager(manager);\n                 }\n             }\n \n-            if (output(attributes, excludedAttributes, \"groups\")) {\n-                userTO.getMemberships().forEach(membership -> user.getGroups().add(new Group(\n-                        membership.getGroupKey(),\n-                        StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),\n-                        membership.getGroupName(),\n-                        Function.direct)));\n-                userTO.getDynMemberships().forEach(membership -> user.getGroups().add(new Group(\n-                        membership.getGroupKey(),\n-                        StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),\n-                        membership.getGroupName(),\n-                        Function.indirect)));\n+            if (!enterpriseInfo.isEmpty()) {\n+                user.setEnterpriseInfo(enterpriseInfo);\n             }\n+        }\n \n-            if (output(attributes, excludedAttributes, \"entitlements\")) {\n-                authDataAccessor.getAuthorities(userTO.getUsername(), null).forEach(authority -> user.getEntitlements().\n-                        add(new Value(authority.getAuthority() + \" on Realm(s) \" + authority.getRealms())));\n-            }\n+        if (output(attributes, excludedAttributes, \"groups\")) {\n+            userTO.getMemberships().forEach(membership -> user.getGroups().add(new Group(\n+                    membership.getGroupKey(),\n+                    StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),\n+                    membership.getGroupName(),\n+                    Function.direct)));\n+            userTO.getDynMemberships().forEach(membership -> user.getGroups().add(new Group(\n+                    membership.getGroupKey(),\n+                    StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),\n+                    membership.getGroupName(),\n+                    Function.indirect)));\n+        }\n \n-            if (output(attributes, excludedAttributes, \"roles\")) {\n-                userTO.getRoles().forEach(role -> user.getRoles().add(new Value(role)));\n-            }\n+        if (output(attributes, excludedAttributes, \"entitlements\")) {\n+            authDataAccessor.getAuthorities(userTO.getUsername(), null).forEach(authority -> user.getEntitlements().\n+                    add(new Value(authority.getAuthority() + \" on Realm(s) \" + authority.getRealms())));\n+        }\n+\n+        if (output(attributes, excludedAttributes, \"roles\")) {\n+            userTO.getRoles().forEach(role -> user.getRoles().add(new Value(role)));\n         }\n \n         return user;\n     }\n \n-    protected <E extends Enum<?>> void fill(\n+    protected void setAttribute(\n+            final UserTO userTO,\n+            final String schema,\n+            final String value) {\n+\n+        if (schema == null || value == null) {\n+            return;\n+        }\n+\n+        switch (schema) {\n+            case \"username\":\n+                userTO.setUsername(value);\n+                break;\n+\n+            default:\n+                userTO.getPlainAttrs().add(new Attr.Builder(schema).value(value).build());\n+        }\n+    }\n+\n+    protected <E extends Enum<?>> void setAttribute(\n             final Set<Attr> attrs,\n             final List<SCIMComplexConf<E>> confs,\n             final List<SCIMComplexValue> values) {\n@@ -426,8 +492,11 @@ protected <E extends Enum<?>> void fill(\n                 new Attr.Builder(conf.getValue()).value(value.getValue()).build())));\n     }\n \n-    public UserTO toUserTO(final SCIMUser user) {\n-        if (!USER_SCHEMAS.equals(user.getSchemas()) && !ENTERPRISE_USER_SCHEMAS.equals(user.getSchemas())) {\n+    public UserTO toUserTO(final SCIMUser user, final boolean checkSchemas) {\n+        if (checkSchemas\n+                && !USER_SCHEMAS.equals(user.getSchemas())\n+                && !ENTERPRISE_USER_SCHEMAS.equals(user.getSchemas())) {\n+\n             throw new BadRequestException(ErrorType.invalidValue);\n         }\n \n@@ -440,147 +509,166 @@ public UserTO toUserTO(final SCIMUser user) {\n         SCIMConf conf = confManager.get();\n \n         if (conf.getUserConf() != null) {\n-            if (conf.getUserConf().getName() != null && user.getName() != null) {\n-                if (conf.getUserConf().getName().getFamilyName() != null\n-                        && user.getName().getFamilyName() != null) {\n+            setAttribute(\n+                    userTO,\n+                    conf.getUserConf().getExternalId(),\n+                    user.getExternalId());\n \n-                    setAttribute(userTO, conf.getUserConf().getName().getFamilyName(),\n-                            user.getName().getFamilyName());\n-                }\n-                if (conf.getUserConf().getName().getFormatted() != null\n-                        && user.getName().getFormatted() != null) {\n-\n-                    setAttribute(userTO, conf.getUserConf().getName().getFormatted(),\n-                            user.getName().getFormatted());\n-                }\n-                if (conf.getUserConf().getName().getGivenName() != null\n-                        && user.getName().getGivenName() != null) {\n-\n-                    setAttribute(userTO, conf.getUserConf().getName().getGivenName(),\n-                            user.getName().getGivenName());\n-                }\n-                if (conf.getUserConf().getName().getHonorificPrefix() != null\n-                        && user.getName().getHonorificPrefix() != null) {\n-\n-                    setAttribute(userTO, conf.getUserConf().getName().getHonorificPrefix(),\n-                            user.getName().getHonorificPrefix());\n-                }\n-                if (conf.getUserConf().getName().getHonorificSuffix() != null\n-                        && user.getName().getHonorificSuffix() != null) {\n-\n-                    setAttribute(userTO, conf.getUserConf().getName().getHonorificSuffix(),\n-                            user.getName().getHonorificSuffix());\n-                }\n-                if (conf.getUserConf().getName().getMiddleName() != null\n-                        && user.getName().getMiddleName() != null) {\n-\n-                    setAttribute(userTO, conf.getUserConf().getName().getMiddleName(),\n-                            user.getName().getMiddleName());\n-                }\n-            }\n-\n-            if (conf.getUserConf().getDisplayName() != null && user.getDisplayName() != null) {\n-                setAttribute(userTO, conf.getUserConf().getDisplayName(), user.getDisplayName());\n-            }\n-            if (conf.getUserConf().getNickName() != null && user.getNickName() != null) {\n-                setAttribute(userTO, conf.getUserConf().getNickName(), user.getNickName());\n-            }\n-            if (conf.getUserConf().getProfileUrl() != null && user.getProfileUrl() != null) {\n-                setAttribute(userTO, conf.getUserConf().getProfileUrl(), user.getProfileUrl());\n-            }\n-            if (conf.getUserConf().getTitle() != null && user.getTitle() != null) {\n-                setAttribute(userTO, conf.getUserConf().getTitle(),\n-                        user.getTitle());\n-            }\n-            if (conf.getUserConf().getUserType() != null && user.getUserType() != null) {\n-                setAttribute(userTO, conf.getUserConf().getUserType(), user.getUserType());\n-            }\n-            if (conf.getUserConf().getPreferredLanguage() != null && user.getPreferredLanguage() != null) {\n-                setAttribute(userTO, conf.getUserConf().getPreferredLanguage(), user.getPreferredLanguage());\n-            }\n-            if (conf.getUserConf().getLocale() != null && user.getLocale() != null) {\n-                setAttribute(userTO, conf.getUserConf().getLocale(), user.getLocale());\n-            }\n-            if (conf.getUserConf().getTimezone() != null && user.getTimezone() != null) {\n-                setAttribute(userTO, conf.getUserConf().getTimezone(), user.getTimezone());\n+            if (conf.getUserConf().getName() != null && user.getName() != null) {\n+                setAttribute(\n+                        userTO,\n+                        conf.getUserConf().getName().getFamilyName(),\n+                        user.getName().getFamilyName());\n+\n+                setAttribute(\n+                        userTO,\n+                        conf.getUserConf().getName().getFormatted(),\n+                        user.getName().getFormatted());\n+\n+                setAttribute(\n+                        userTO,\n+                        conf.getUserConf().getName().getGivenName(),\n+                        user.getName().getGivenName());\n+\n+                setAttribute(\n+                        userTO,\n+                        conf.getUserConf().getName().getHonorificPrefix(),\n+                        user.getName().getHonorificPrefix());\n+\n+                setAttribute(\n+                        userTO,\n+                        conf.getUserConf().getName().getHonorificSuffix(),\n+                        user.getName().getHonorificSuffix());\n+\n+                setAttribute(\n+                        userTO,\n+                        conf.getUserConf().getName().getMiddleName(),\n+                        user.getName().getMiddleName());\n             }\n \n-            fill(userTO.getPlainAttrs(), conf.getUserConf().getEmails(), user.getEmails());\n-            fill(userTO.getPlainAttrs(), conf.getUserConf().getPhoneNumbers(), user.getPhoneNumbers());\n-            fill(userTO.getPlainAttrs(), conf.getUserConf().getIms(), user.getIms());\n-            fill(userTO.getPlainAttrs(), conf.getUserConf().getPhotos(), user.getPhotos());\n+            setAttribute(\n+                    userTO,\n+                    conf.getUserConf().getDisplayName(),\n+                    user.getDisplayName());\n+\n+            setAttribute(\n+                    userTO,\n+                    conf.getUserConf().getNickName(),\n+                    user.getNickName());\n+\n+            setAttribute(\n+                    userTO,\n+                    conf.getUserConf().getProfileUrl(),\n+                    user.getProfileUrl());\n+\n+            setAttribute(\n+                    userTO,\n+                    conf.getUserConf().getTitle(),\n+                    user.getTitle());\n+\n+            setAttribute(\n+                    userTO,\n+                    conf.getUserConf().getUserType(),\n+                    user.getUserType());\n+\n+            setAttribute(\n+                    userTO,\n+                    conf.getUserConf().getPreferredLanguage(),\n+                    user.getPreferredLanguage());\n+\n+            setAttribute(\n+                    userTO,\n+                    conf.getUserConf().getLocale(),\n+                    user.getLocale());\n+\n+            setAttribute(\n+                    userTO,\n+                    conf.getUserConf().getTimezone(),\n+                    user.getTimezone());\n+\n+            setAttribute(userTO.getPlainAttrs(), conf.getUserConf().getEmails(), user.getEmails());\n+            setAttribute(userTO.getPlainAttrs(), conf.getUserConf().getPhoneNumbers(), user.getPhoneNumbers());\n+            setAttribute(userTO.getPlainAttrs(), conf.getUserConf().getIms(), user.getIms());\n+            setAttribute(userTO.getPlainAttrs(), conf.getUserConf().getPhotos(), user.getPhotos());\n \n             user.getAddresses().stream().filter(address -> address.getType() != null).\n                     forEach(address -> conf.getUserConf().getAddresses().stream().\n                     filter(object -> address.getType().equals(object.getType().name())).findFirst().\n                     ifPresent(addressConf -> {\n-                        if (addressConf.getFormatted() != null && address.getFormatted() != null) {\n-                            setAttribute(userTO, addressConf.getFormatted(), address.getFormatted());\n-                        }\n-                        if (addressConf.getStreetAddress() != null && address.getStreetAddress() != null) {\n-                            setAttribute(userTO, addressConf.getStreetAddress(), address.getStreetAddress());\n-                        }\n-                        if (addressConf.getLocality() != null && address.getLocality() != null) {\n-                            setAttribute(userTO, addressConf.getLocality(), address.getLocality());\n-                        }\n-                        if (addressConf.getRegion() != null && address.getRegion() != null) {\n-                            setAttribute(userTO, addressConf.getRegion(), address.getRegion());\n-                        }\n-                        if (addressConf.getPostalCode() != null && address.getPostalCode() != null) {\n-                            setAttribute(userTO, addressConf.getPostalCode(), address.getPostalCode());\n-                        }\n-                        if (addressConf.getCountry() != null && address.getCountry() != null) {\n-                            setAttribute(userTO, addressConf.getCountry(), address.getCountry());\n-                        }\n+                        setAttribute(\n+                                userTO,\n+                                addressConf.getFormatted(),\n+                                address.getFormatted());\n+\n+                        setAttribute(\n+                                userTO,\n+                                addressConf.getStreetAddress(),\n+                                address.getStreetAddress());\n+\n+                        setAttribute(\n+                                userTO,\n+                                addressConf.getLocality(),\n+                                address.getLocality());\n+\n+                        setAttribute(\n+                                userTO,\n+                                addressConf.getRegion(),\n+                                address.getRegion());\n+\n+                        setAttribute(\n+                                userTO,\n+                                addressConf.getPostalCode(),\n+                                address.getPostalCode());\n+\n+                        setAttribute(\n+                                userTO,\n+                                addressConf.getCountry(),\n+                                address.getCountry());\n                     }));\n \n             for (int i = 0; i < user.getX509Certificates().size(); i++) {\n                 Value certificate = user.getX509Certificates().get(i);\n                 if (conf.getUserConf().getX509Certificates().size() > i) {\n-                    setAttribute(userTO, conf.getUserConf().getX509Certificates().get(i), certificate.getValue());\n+                    setAttribute(\n+                            userTO,\n+                            conf.getUserConf().getX509Certificates().get(i),\n+                            certificate.getValue());\n                 }\n             }\n         }\n \n         if (conf.getEnterpriseUserConf() != null) {\n-            if (conf.getEnterpriseUserConf().getEmployeeNumber() != null\n-                    && user.getEnterpriseInfo().getEmployeeNumber() != null) {\n-\n-                setAttribute(userTO, conf.getEnterpriseUserConf().getEmployeeNumber(),\n-                        user.getEnterpriseInfo().getEmployeeNumber());\n-            }\n-            if (conf.getEnterpriseUserConf().getCostCenter() != null\n-                    && user.getEnterpriseInfo().getCostCenter() != null) {\n-\n-                setAttribute(userTO, conf.getEnterpriseUserConf().getCostCenter(),\n-                        user.getEnterpriseInfo().getCostCenter());\n-            }\n-            if (conf.getEnterpriseUserConf().getOrganization() != null\n-                    && user.getEnterpriseInfo().getOrganization() != null) {\n-\n-                setAttribute(userTO, conf.getEnterpriseUserConf().getOrganization(),\n-                        user.getEnterpriseInfo().getOrganization());\n-            }\n-            if (conf.getEnterpriseUserConf().getDivision() != null\n-                    && user.getEnterpriseInfo().getDivision() != null) {\n-\n-                setAttribute(userTO, conf.getEnterpriseUserConf().getDivision(),\n-                        user.getEnterpriseInfo().getDivision());\n-            }\n-            if (conf.getEnterpriseUserConf().getDepartment() != null\n-                    && user.getEnterpriseInfo().getDepartment() != null) {\n-\n-                setAttribute(userTO, conf.getEnterpriseUserConf().getDepartment(),\n-                        user.getEnterpriseInfo().getDepartment());\n-            }\n-            if (conf.getEnterpriseUserConf().getManager() != null\n-                    && conf.getEnterpriseUserConf().getManager().getKey() != null\n-                    && user.getEnterpriseInfo().getManager() != null\n-                    && user.getEnterpriseInfo().getManager().getValue() != null) {\n-\n-                setAttribute(userTO, conf.getEnterpriseUserConf().getManager().getKey(),\n-                        user.getEnterpriseInfo().getManager().getValue());\n-            }\n+            setAttribute(\n+                    userTO,\n+                    conf.getEnterpriseUserConf().getEmployeeNumber(),\n+                    user.getEnterpriseInfo().getEmployeeNumber());\n+\n+            setAttribute(\n+                    userTO,\n+                    conf.getEnterpriseUserConf().getCostCenter(),\n+                    user.getEnterpriseInfo().getCostCenter());\n+\n+            setAttribute(\n+                    userTO,\n+                    conf.getEnterpriseUserConf().getOrganization(),\n+                    user.getEnterpriseInfo().getOrganization());\n+\n+            setAttribute(\n+                    userTO,\n+                    conf.getEnterpriseUserConf().getDivision(),\n+                    user.getEnterpriseInfo().getDivision());\n+\n+            setAttribute(\n+                    userTO,\n+                    conf.getEnterpriseUserConf().getDepartment(),\n+                    user.getEnterpriseInfo().getDepartment());\n+\n+            setAttribute(\n+                    userTO,\n+                    Optional.ofNullable(conf.getEnterpriseUserConf().getManager()).\n+                            map(SCIMManagerConf::getKey).orElse(null),\n+                    Optional.ofNullable(user.getEnterpriseInfo().getManager()).\n+                            map(SCIMUserManager::getValue).orElse(null));\n         }\n \n         userTO.getMemberships().addAll(user.getGroups().stream().\n@@ -595,21 +683,290 @@ public UserTO toUserTO(final SCIMUser user) {\n     }\n \n     public UserCR toUserCR(final SCIMUser user) {\n-        UserTO userTO = toUserTO(user);\n+        UserTO userTO = toUserTO(user, true);\n         UserCR userCR = new UserCR();\n         EntityTOUtils.toAnyCR(userTO, userCR);\n         return userCR;\n     }\n \n-    protected void setAttribute(final UserTO userTO, final String schema, final String value) {\n-        switch (schema) {\n-            case \"username\":\n-                userTO.setUsername(value);\n+    protected void setAttribute(final Set<AttrPatch> attrs, final String schema, final SCIMPatchOperation op) {\n+        Optional.ofNullable(schema).ifPresent(a -> {\n+            Attr.Builder attr = new Attr.Builder(a);\n+            if (!CollectionUtils.isEmpty(op.getValue())) {\n+                attr.value(op.getValue().get(0).toString());\n+            }\n+\n+            attrs.add(new AttrPatch.Builder(attr.build()).\n+                    operation(op.getOp() == PatchOp.remove ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n+                    build());\n+        });\n+    }\n+\n+    protected <E extends Enum<?>> void setAttribute(\n+            final Set<AttrPatch> attrs,\n+            final List<SCIMComplexConf<E>> confs,\n+            final SCIMPatchOperation op) {\n+\n+        confs.stream().\n+                filter(conf -> BooleanUtils.toBoolean(JexlUtils.evaluate(\n+                filter2JexlExpression(op.getPath().getFilter()),\n+                new MapContext(Map.of(\"type\", conf.getType().name()))).toString())).findFirst().\n+                ifPresent(conf -> {\n+                    if (op.getPath().getSub() == null || \"display\".equals(op.getPath().getSub())) {\n+                        setAttribute(attrs, conf.getDisplay(), op);\n+                    }\n+                    if (op.getPath().getSub() == null || \"value\".equals(op.getPath().getSub())) {\n+                        setAttribute(attrs, conf.getValue(), op);\n+                    }\n+                });\n+    }\n+\n+    protected <E extends Enum<?>> void setAttribute(\n+            final Set<AttrPatch> attrs,\n+            final List<SCIMComplexConf<E>> confs,\n+            final List<SCIMComplexValue> values,\n+            final PatchOp patchOp) {\n+\n+        values.stream().\n+                filter(value -> value.getType() != null).forEach(value -> confs.stream().\n+                filter(conf -> value.getType().equals(conf.getType().name())).findFirst().\n+                ifPresent(conf -> attrs.add(new AttrPatch.Builder(\n+                new Attr.Builder(conf.getValue()).value(value.getValue()).build()).\n+                operation(patchOp == PatchOp.remove ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n+                build())));\n+    }\n+\n+    protected void setAttribute(\n+            final Set<AttrPatch> attrs,\n+            final SCIMUserAddressConf conf,\n+            final SCIMPatchOperation op) {\n+\n+        if (op.getPath().getSub() == null || \"formatted\".equals(op.getPath().getSub())) {\n+            setAttribute(attrs, conf.getFormatted(), op);\n+        }\n+        if (op.getPath().getSub() == null || \"streetAddress\".equals(op.getPath().getSub())) {\n+            setAttribute(attrs, conf.getStreetAddress(), op);\n+        }\n+        if (op.getPath().getSub() == null || \"locality\".equals(op.getPath().getSub())) {\n+            setAttribute(attrs, conf.getLocality(), op);\n+        }\n+        if (op.getPath().getSub() == null || \"region\".equals(op.getPath().getSub())) {\n+            setAttribute(attrs, conf.getRegion(), op);\n+        }\n+        if (op.getPath().getSub() == null || \"postalCode\".equals(op.getPath().getSub())) {\n+            setAttribute(attrs, conf.getPostalCode(), op);\n+        }\n+        if (op.getPath().getSub() == null || \"country\".equals(op.getPath().getSub())) {\n+            setAttribute(attrs, conf.getCountry(), op);\n+        }\n+    }\n+\n+    public Pair<UserUR, StatusR> toUserUpdate(final UserTO before, final SCIMPatchOperation op) {\n+        StatusR statusR = null;\n+\n+        if (op.getPath() == null && op.getOp() != PatchOp.remove\n+                && !CollectionUtils.isEmpty(op.getValue()) && op.getValue().get(0) instanceof SCIMUser) {\n+\n+            SCIMUser after = (SCIMUser) op.getValue().get(0);\n+\n+            if (after.getActive() != null && before.isSuspended() == after.isActive()) {\n+                statusR = new StatusR.Builder().key(before.getKey()).\n+                        type(after.isActive() ? StatusRType.REACTIVATE : StatusRType.SUSPEND).\n+                        build();\n+            }\n+\n+            UserTO updated = toUserTO(after, false);\n+            updated.setKey(before.getKey());\n+            return Pair.of(AnyOperations.diff(updated, before, true), statusR);\n+        }\n+\n+        UserUR userUR = new UserUR.Builder(before.getKey()).build();\n+\n+        SCIMConf conf = confManager.get();\n+        if (conf == null) {\n+            return Pair.of(userUR, statusR);\n+        }\n+\n+        switch (op.getPath().getAttribute()) {\n+            case \"externalId\":\n+                setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getExternalId(), op);\n+                break;\n+\n+            case \"userName\":\n+                if (op.getOp() != PatchOp.remove && !CollectionUtils.isEmpty(op.getValue())) {\n+                    userUR.setUsername(new StringReplacePatchItem.Builder().\n+                            value(op.getValue().get(0).toString()).build());\n+                }\n+                break;\n+\n+            case \"password\":\n+                if (op.getOp() != PatchOp.remove && !CollectionUtils.isEmpty(op.getValue())) {\n+                    userUR.setPassword(new PasswordPatch.Builder().\n+                            value(op.getValue().get(0).toString()).build());\n+                }\n+                break;\n+\n+            case \"active\":\n+                if (!CollectionUtils.isEmpty(op.getValue())) {\n+                    statusR = new StatusR.Builder().key(before.getKey()).\n+                            type((boolean) op.getValue().get(0) ? StatusRType.REACTIVATE : StatusRType.SUSPEND).\n+                            build();\n+                }\n+                break;\n+\n+            case \"name\":\n+                if (conf.getUserConf().getName() != null) {\n+                    if (op.getPath().getSub() == null || \"familyName\".equals(op.getPath().getSub())) {\n+                        setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getName().getFamilyName(), op);\n+                    }\n+                    if (op.getPath().getSub() == null || \"formatted\".equals(op.getPath().getSub())) {\n+                        setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getName().getFormatted(), op);\n+                    }\n+                    if (op.getPath().getSub() == null || \"givenName\".equals(op.getPath().getSub())) {\n+                        setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getName().getGivenName(), op);\n+                    }\n+                    if (op.getPath().getSub() == null || \"honorificPrefix\".equals(op.getPath().getSub())) {\n+                        setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getName().getHonorificPrefix(), op);\n+                    }\n+                    if (op.getPath().getSub() == null || \"honorificSuffix\".equals(op.getPath().getSub())) {\n+                        setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getName().getHonorificSuffix(), op);\n+                    }\n+                    if (op.getPath().getSub() == null || \"middleName\".equals(op.getPath().getSub())) {\n+                        setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getName().getMiddleName(), op);\n+                    }\n+                }\n+                break;\n+\n+            case \"displayName\":\n+                setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getDisplayName(), op);\n+                break;\n+\n+            case \"nickName\":\n+                setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getNickName(), op);\n+                break;\n+\n+            case \"profileUrl\":\n+                setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getProfileUrl(), op);\n+                break;\n+\n+            case \"title\":\n+                setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getTitle(), op);\n+                break;\n+\n+            case \"userType\":\n+                setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getUserType(), op);\n+                break;\n+\n+            case \"preferredLanguage\":\n+                setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getPreferredLanguage(), op);\n+                break;\n+\n+            case \"locale\":\n+                setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getLocale(), op);\n+                break;\n+\n+            case \"timezone\":\n+                setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getTimezone(), op);\n+                break;\n+\n+            case \"emails\":\n+                if (!CollectionUtils.isEmpty(op.getValue()) && op.getValue().get(0) instanceof SCIMUser) {\n+                    setAttribute(\n+                            userUR.getPlainAttrs(),\n+                            conf.getUserConf().getEmails(),\n+                            ((SCIMUser) op.getValue().get(0)).getEmails(),\n+                            op.getOp());\n+                } else if (op.getPath().getFilter() != null) {\n+                    setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getEmails(), op);\n+                }\n+                break;\n+\n+            case \"phoneNumbers\":\n+                if (!CollectionUtils.isEmpty(op.getValue()) && op.getValue().get(0) instanceof SCIMUser) {\n+                    setAttribute(\n+                            userUR.getPlainAttrs(),\n+                            conf.getUserConf().getPhoneNumbers(),\n+                            ((SCIMUser) op.getValue().get(0)).getPhoneNumbers(),\n+                            op.getOp());\n+                } else if (op.getPath().getFilter() != null) {\n+                    setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getPhoneNumbers(), op);\n+                }\n+                break;\n+\n+            case \"ims\":\n+                if (!CollectionUtils.isEmpty(op.getValue()) && op.getValue().get(0) instanceof SCIMUser) {\n+                    setAttribute(\n+                            userUR.getPlainAttrs(),\n+                            conf.getUserConf().getIms(),\n+                            ((SCIMUser) op.getValue().get(0)).getIms(),\n+                            op.getOp());\n+                } else if (op.getPath().getFilter() != null) {\n+                    setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getIms(), op);\n+                }\n+                break;\n+\n+            case \"photos\":\n+                if (!CollectionUtils.isEmpty(op.getValue()) && op.getValue().get(0) instanceof SCIMUser) {\n+                    setAttribute(\n+                            userUR.getPlainAttrs(),\n+                            conf.getUserConf().getPhotos(),\n+                            ((SCIMUser) op.getValue().get(0)).getPhotos(),\n+                            op.getOp());\n+                } else if (op.getPath().getFilter() != null) {\n+                    setAttribute(userUR.getPlainAttrs(), conf.getUserConf().getPhotos(), op);\n+                }\n+                break;\n+\n+            case \"addresses\":\n+                if (!CollectionUtils.isEmpty(op.getValue()) && op.getValue().get(0) instanceof SCIMUser) {\n+                    SCIMUser after = (SCIMUser) op.getValue().get(0);\n+                    after.getAddresses().stream().filter(address -> address.getType() != null).\n+                            forEach(address -> conf.getUserConf().getAddresses().stream().\n+                            filter(object -> address.getType().equals(object.getType().name())).findFirst().\n+                            ifPresent(addressConf -> setAttribute(userUR.getPlainAttrs(), addressConf, op)));\n+                } else if (op.getPath().getFilter() != null) {\n+                    conf.getUserConf().getAddresses().stream().\n+                            filter(addressConf -> BooleanUtils.toBoolean(JexlUtils.evaluate(\n+                            filter2JexlExpression(op.getPath().getFilter()),\n+                            new MapContext(Map.of(\"type\", addressConf.getType().name()))).toString())).findFirst().\n+                            ifPresent(addressConf -> setAttribute(userUR.getPlainAttrs(), addressConf, op));\n+                }\n+                break;\n+\n+            case \"employeeNumber\":\n+                setAttribute(userUR.getPlainAttrs(), Optional.ofNullable(conf.getEnterpriseUserConf()).\n+                        map(SCIMEnterpriseUserConf::getEmployeeNumber).orElse(null), op);\n+                break;\n+\n+            case \"costCenter\":\n+                setAttribute(userUR.getPlainAttrs(), Optional.ofNullable(conf.getEnterpriseUserConf()).\n+                        map(SCIMEnterpriseUserConf::getCostCenter).orElse(null), op);\n+                break;\n+\n+            case \"organization\":\n+                setAttribute(userUR.getPlainAttrs(), Optional.ofNullable(conf.getEnterpriseUserConf()).\n+                        map(SCIMEnterpriseUserConf::getOrganization).orElse(null), op);\n+                break;\n+\n+            case \"division\":\n+                setAttribute(userUR.getPlainAttrs(), Optional.ofNullable(conf.getEnterpriseUserConf()).\n+                        map(SCIMEnterpriseUserConf::getDivision).orElse(null), op);\n+                break;\n+\n+            case \"department\":\n+                setAttribute(userUR.getPlainAttrs(), Optional.ofNullable(conf.getEnterpriseUserConf()).\n+                        map(SCIMEnterpriseUserConf::getDepartment).orElse(null), op);\n+                break;\n+\n+            case \"manager\":\n+                setAttribute(userUR.getPlainAttrs(), Optional.ofNullable(conf.getEnterpriseUserConf()).\n+                        map(SCIMEnterpriseUserConf::getManager).map(SCIMManagerConf::getKey).orElse(null), op);\n                 break;\n \n             default:\n-                userTO.getPlainAttrs().add(new Attr.Builder(schema).value(value).build());\n         }\n+\n+        return Pair.of(userUR, statusR);\n     }\n \n     public SCIMGroup toSCIMGroup(\n@@ -623,12 +980,26 @@ public SCIMGroup toSCIMGroup(\n                 new Meta(\n                         Resource.Group,\n                         groupTO.getCreationDate(),\n-                        groupTO.getLastChangeDate() == null\n-                        ? groupTO.getCreationDate() : groupTO.getLastChangeDate(),\n+                        Optional.ofNullable(groupTO.getLastChangeDate()).orElse(groupTO.getCreationDate()),\n                         groupTO.getETagValue(),\n                         location),\n                 output(attributes, excludedAttributes, \"displayName\", groupTO.getName()));\n \n+        SCIMConf conf = confManager.get();\n+\n+        Map<String, Attr> attrs = new HashMap<>();\n+        attrs.putAll(EntityTOUtils.buildAttrMap(groupTO.getPlainAttrs()));\n+        attrs.putAll(EntityTOUtils.buildAttrMap(groupTO.getDerAttrs()));\n+        attrs.putAll(EntityTOUtils.buildAttrMap(groupTO.getVirAttrs()));\n+\n+        if (output(attributes, excludedAttributes, \"externalId\")\n+                && conf.getGroupConf() != null\n+                && conf.getGroupConf().getExternalId() != null\n+                && attrs.containsKey(conf.getGroupConf().getExternalId())) {\n+\n+            group.setExternalId(attrs.get(conf.getGroupConf().getExternalId()).getValues().get(0));\n+        }\n+\n         MembershipCond membCond = new MembershipCond();\n         membCond.setGroup(groupTO.getKey());\n         SearchCond searchCond = SearchCond.getLeaf(membCond);\n@@ -657,23 +1028,56 @@ public SCIMGroup toSCIMGroup(\n         return group;\n     }\n \n-    public static GroupTO toGroupTO(final SCIMGroup group) {\n-        if (!GROUP_SCHEMAS.equals(group.getSchemas())) {\n+    public GroupTO toGroupTO(final SCIMGroup group, final boolean checkSchemas) {\n+        if (checkSchemas && !GROUP_SCHEMAS.equals(group.getSchemas())) {\n             throw new BadRequestException(ErrorType.invalidValue);\n         }\n \n         GroupTO groupTO = new GroupTO();\n         groupTO.setRealm(SyncopeConstants.ROOT_REALM);\n         groupTO.setKey(group.getId());\n         groupTO.setName(group.getDisplayName());\n+\n+        SCIMConf conf = confManager.get();\n+        if (conf.getGroupConf() != null\n+                && conf.getGroupConf().getExternalId() != null && group.getExternalId() != null) {\n+\n+            groupTO.getPlainAttrs().add(\n+                    new Attr.Builder(conf.getGroupConf().getExternalId()).\n+                            value(group.getExternalId()).build());\n+        }\n+\n         return groupTO;\n     }\n \n-    public static GroupCR toGroupCR(final SCIMGroup group) {\n-        if (!GROUP_SCHEMAS.equals(group.getSchemas())) {\n-            throw new BadRequestException(ErrorType.invalidValue);\n+    public GroupCR toGroupCR(final SCIMGroup group) {\n+        GroupTO groupTO = toGroupTO(group, true);\n+        GroupCR groupCR = new GroupCR();\n+        EntityTOUtils.toAnyCR(groupTO, groupCR);\n+        return groupCR;\n+    }\n+\n+    public GroupUR toGroupUR(final GroupTO before, final SCIMPatchOperation op) {\n+        if (op.getPath() == null) {\n+            throw new UnsupportedOperationException(\"Empty path not supported for Groups\");\n+        }\n+\n+        GroupUR groupUR = new GroupUR.Builder(before.getKey()).build();\n+\n+        if (\"displayName\".equals(op.getPath().getAttribute())) {\n+            StringReplacePatchItem.Builder name = new StringReplacePatchItem.Builder().\n+                    operation(op.getOp() == PatchOp.remove ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE);\n+            if (!CollectionUtils.isEmpty(op.getValue())) {\n+                name.value(op.getValue().get(0).toString());\n+            }\n+            groupUR.setName(name.build());\n+        } else {\n+            SCIMConf conf = confManager.get();\n+            if (conf.getGroupConf() != null) {\n+                setAttribute(groupUR.getPlainAttrs(), conf.getGroupConf().getExternalId(), op);\n+            }\n         }\n \n-        return new GroupCR.Builder(SyncopeConstants.ROOT_REALM, group.getDisplayName()).build();\n+        return groupUR;\n     }\n }"},{"sha":"4daf1cfd1d9138d7be41df7bf78e48cf70156cf8","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -101,8 +101,9 @@ public ServiceProviderConfig serviceProviderConfig(final UriBuilder uriBuilder)\n                                 conf.getGeneralConf().getLastChangeDate(),\n                                 conf.getGeneralConf().getETagValue(),\n                                 uriBuilder.build().toASCIIString()),\n-                        new ConfigurationOption(false),\n-                        new BulkConfigurationOption(false,\n+                        new ConfigurationOption(true),\n+                        new BulkConfigurationOption(\n+                                false,\n                                 conf.getGeneralConf().getBulkMaxOperations(),\n                                 conf.getGeneralConf().getBulkMaxPayloadSize()),\n                         new FilterConfigurationOption(true, conf.getGeneralConf().getFilterMaxResults()),"},{"sha":"44c3b0a1e14b0743d9e6a1c480218906325c956a","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java","status":"modified","additions":40,"deletions":25,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -79,49 +79,64 @@ public AttrCond createAttrCond(final String schema) {\n             attrCond.setSchema(\"lastChangeDate\");\n         }\n \n-        if (resource == Resource.User) {\n-            if (conf.getUserConf() != null) {\n-                if (conf.getUserConf().getName() != null) {\n-                    for (Map.Entry<String, String> entry : conf.getUserConf().getName().asMap().entrySet()) {\n-                        if (schemaEquals(Resource.User, \"name.\" + entry.getKey(), schema)) {\n+        switch (resource) {\n+            case User:\n+                if (conf.getUserConf() != null) {\n+                    if (conf.getUserConf().getName() != null) {\n+                        for (Map.Entry<String, String> entry : conf.getUserConf().getName().asMap().entrySet()) {\n+                            if (schemaEquals(Resource.User, \"name.\" + entry.getKey(), schema)) {\n+                                attrCond = new AttrCond();\n+                                attrCond.setSchema(entry.getValue());\n+                            }\n+                        }\n+                    }\n+\n+                    for (Map.Entry<String, String> entry : conf.getUserConf().asMap().entrySet()) {\n+                        if (schemaEquals(Resource.User, entry.getKey(), schema)) {\n                             attrCond = new AttrCond();\n                             attrCond.setSchema(entry.getValue());\n                         }\n                     }\n-                }\n \n-                for (Map.Entry<String, String> entry : conf.getUserConf().asMap().entrySet()) {\n-                    if (schemaEquals(Resource.User, entry.getKey(), schema)) {\n-                        attrCond = new AttrCond();\n-                        attrCond.setSchema(entry.getValue());\n+                    for (SCIMUserAddressConf address : conf.getUserConf().getAddresses()) {\n+                        for (Map.Entry<String, String> entry : address.asMap().entrySet()) {\n+                            if (schemaEquals(Resource.User, \"addresses.\" + entry.getKey(), schema)) {\n+                                attrCond = new AttrCond();\n+                                attrCond.setSchema(entry.getValue());\n+                            }\n+                        }\n                     }\n                 }\n \n-                for (SCIMUserAddressConf address : conf.getUserConf().getAddresses()) {\n-                    for (Map.Entry<String, String> entry : address.asMap().entrySet()) {\n-                        if (schemaEquals(Resource.User, \"addresses.\" + entry.getKey(), schema)) {\n+                if (conf.getEnterpriseUserConf() != null) {\n+                    for (Map.Entry<String, String> entry : conf.getEnterpriseUserConf().asMap().entrySet()) {\n+                        if (schemaEquals(Resource.EnterpriseUser, entry.getKey(), schema)) {\n                             attrCond = new AttrCond();\n                             attrCond.setSchema(entry.getValue());\n                         }\n                     }\n-                }\n-            }\n \n-            if (conf.getEnterpriseUserConf() != null) {\n-                for (Map.Entry<String, String> entry : conf.getEnterpriseUserConf().asMap().entrySet()) {\n-                    if (schemaEquals(Resource.EnterpriseUser, entry.getKey(), schema)) {\n+                    if (conf.getEnterpriseUserConf().getManager() != null\n+                            && conf.getEnterpriseUserConf().getManager().getKey() != null) {\n+\n                         attrCond = new AttrCond();\n-                        attrCond.setSchema(entry.getValue());\n+                        attrCond.setSchema(conf.getEnterpriseUserConf().getManager().getKey());\n                     }\n                 }\n+                break;\n \n-                if (conf.getEnterpriseUserConf().getManager() != null\n-                        && conf.getEnterpriseUserConf().getManager().getKey() != null) {\n-\n-                    attrCond = new AttrCond();\n-                    attrCond.setSchema(conf.getEnterpriseUserConf().getManager().getKey());\n+            case Group:\n+                if (conf.getGroupConf() != null) {\n+                    for (Map.Entry<String, String> entry : conf.getGroupConf().asMap().entrySet()) {\n+                        if (schemaEquals(Resource.Group, entry.getKey(), schema)) {\n+                            attrCond = new AttrCond();\n+                            attrCond.setSchema(entry.getValue());\n+                        }\n+                    }\n                 }\n-            }\n+                break;\n+\n+            default:\n         }\n \n         if (attrCond == null) {"},{"sha":"33d57a5c6f932f0d2b48347fc93c6d3b2763a50c","filename":"ext/scimv2/scim-rest-api/pom.xml","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fpom.xml?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -45,13 +45,19 @@ under the License.\n \n     <dependency>\n       <groupId>com.fasterxml.jackson.core</groupId>\n-      <artifactId>jackson-annotations</artifactId>\n+      <artifactId>jackson-databind</artifactId>\n     </dependency>\n-    \n+\n     <dependency>\n       <groupId>org.apache.cxf</groupId>\n       <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n     </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n   \n   <build>"},{"sha":"ca462dd216f27e34c15882489c26cab5e92a720b","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/BadRequestException.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FBadRequestException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FBadRequestException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FBadRequestException.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -39,5 +39,4 @@ public BadRequestException(final ErrorType errorType, final String detail) {\n     public ErrorType getErrorType() {\n         return errorType;\n     }\n-\n }"},{"sha":"9048295b2a9c5f514af86d88273e2e7b1462f71e","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/AuthenticationScheme.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FAuthenticationScheme.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FAuthenticationScheme.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FAuthenticationScheme.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -78,5 +78,4 @@ public String getType() {\n     public boolean isPrimary() {\n         return primary;\n     }\n-\n }"},{"sha":"a070491271bc5ec50d6093a94c998c14056c7e43","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/BulkConfigurationOption.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FBulkConfigurationOption.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FBulkConfigurationOption.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FBulkConfigurationOption.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -47,5 +47,4 @@ public int getMaxOperations() {\n     public int getMaxPayloadSize() {\n         return maxPayloadSize;\n     }\n-\n }"},{"sha":"5a31ae74f47f685a4ad239c8961db969466d9fd3","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ConfigurationOption.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FConfigurationOption.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FConfigurationOption.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FConfigurationOption.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -35,5 +35,4 @@ public ConfigurationOption(@JsonProperty(\"supported\") final boolean supported) {\n     public boolean isSupported() {\n         return supported;\n     }\n-\n }"},{"sha":"578b231697b8df856854bf60b48fffcf2c82e86a","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/FilterConfigurationOption.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FFilterConfigurationOption.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FFilterConfigurationOption.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FFilterConfigurationOption.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -39,5 +39,4 @@ public FilterConfigurationOption(\n     public int getMaxResults() {\n         return maxResults;\n     }\n-\n }"},{"sha":"304947e49ea14403580842d745be8c23be5d954c","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Group.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FGroup.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -48,5 +48,4 @@ public Group(\n     public String getType() {\n         return Optional.ofNullable(type).map(Enum::name).orElse(null);\n     }\n-\n }"},{"sha":"7ccb62c12e1b146fb6d743e65cf6aa9f9d491c46","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ListResponse.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FListResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FListResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FListResponse.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -69,5 +69,4 @@ public int getStartIndex() {\n     public int getItemsPerPage() {\n         return itemsPerPage;\n     }\n-\n }"},{"sha":"fd4e6e121d02d1851e224dcca048031a8c1989a9","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Member.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMember.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMember.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FMember.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -33,5 +33,4 @@ public Member(\n \n         super(value, display, ref);\n     }\n-\n }"},{"sha":"c051794f3a798d1f94a7713eb9930d278b743cd8","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Reference.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FReference.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FReference.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FReference.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -42,5 +42,4 @@ public String getDisplay() {\n     public String getRef() {\n         return ref;\n     }\n-\n }"},{"sha":"ba79d1523b04b01c411bfcb7fa0c7d134bb72509","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ResourceType.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FResourceType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FResourceType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FResourceType.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -92,5 +92,4 @@ public List<SchemaExtension> getSchemaExtensions() {\n     public Meta getMeta() {\n         return meta;\n     }\n-\n }"},{"sha":"039e909fbb5a65d34eb66df43c1c6dd9e2083368","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMComplexValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMComplexValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMComplexValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMComplexValue.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -66,6 +66,6 @@ public void setPrimary(final boolean primary) {\n \n     @JsonIgnore\n     public boolean isEmpty() {\n-        return value == null && display == null && type == null;\n+        return value == null && display == null;\n     }\n }"},{"sha":"35b94c0381f9c396b7d23dcbfb8ed3956f552c07","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -73,5 +73,4 @@ public String getDetail() {\n     public int getStatus() {\n         return status;\n     }\n-\n }"},{"sha":"c45d6da49dc99415af9b23c7c0575a477869dc35","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMGroup.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -30,8 +30,6 @@ public class SCIMGroup extends SCIMResource {\n \n     private static final long serialVersionUID = -2935466041674390279L;\n \n-    private String displayName;\n-\n     private final List<Member> members = new ArrayList<>();\n \n     @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n@@ -41,19 +39,10 @@ public SCIMGroup(\n             @JsonProperty(\"displayName\") final String displayName) {\n \n         super(id, List.of(Resource.Group.schema()), meta);\n-        this.displayName = displayName;\n-    }\n-\n-    public void setDisplayName(final String displayName) {\n-        this.displayName = displayName;\n-    }\n-\n-    public String getDisplayName() {\n-        return displayName;\n+        super.setDisplayName(displayName);\n     }\n \n     public List<Member> getMembers() {\n         return members;\n     }\n-\n }"},{"sha":"eb713e95ea2cc8db1603c31246352148cbb7a649","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMPatchOp.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchOp.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api.data;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+import org.apache.syncope.ext.scimv2.api.type.Resource;\n+\n+public class SCIMPatchOp extends SCIMBean {\n+\n+    private static final long serialVersionUID = 3957352317667344898L;\n+\n+    private final List<String> schemas = List.of(Resource.PatchOp.schema());\n+\n+    @JsonProperty(\"Operations\")\n+    private List<SCIMPatchOperation> operations;\n+\n+    public List<String> getSchemas() {\n+        return schemas;\n+    }\n+\n+    public List<SCIMPatchOperation> getOperations() {\n+        return operations;\n+    }\n+\n+    public void setOperations(final List<SCIMPatchOperation> operations) {\n+        this.operations = operations;\n+    }\n+}"},{"sha":"1421baff8941f55a59a9ed6b466b4708ceb61370","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMPatchOperation.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchOperation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchOperation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchOperation.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api.data;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.syncope.ext.scimv2.api.type.PatchOp;\n+\n+@JsonDeserialize(using = SCIMPatchOperationDeserializer.class)\n+public class SCIMPatchOperation extends SCIMBean {\n+\n+    private static final long serialVersionUID = 1802654766651071823L;\n+\n+    private PatchOp op;\n+\n+    private SCIMPatchPath path;\n+\n+    private List<Serializable> value;\n+\n+    public PatchOp getOp() {\n+        return op;\n+    }\n+\n+    public void setOp(final PatchOp op) {\n+        this.op = op;\n+    }\n+\n+    public SCIMPatchPath getPath() {\n+        return path;\n+    }\n+\n+    public void setPath(final SCIMPatchPath path) {\n+        this.path = path;\n+    }\n+\n+    public List<Serializable> getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(final List<Serializable> value) {\n+        this.value = value;\n+    }\n+}"},{"sha":"5101bbf3a4fbf6957ef24f371af012e33ebc84e9","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMPatchOperationDeserializer.java","status":"added","additions":227,"deletions":0,"changes":227,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchOperationDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchOperationDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchOperationDeserializer.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -0,0 +1,227 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api.data;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.cxf.common.util.StringUtils;\n+import org.apache.syncope.ext.scimv2.api.type.PatchOp;\n+\n+public class SCIMPatchOperationDeserializer extends StdDeserializer<SCIMPatchOperation> {\n+\n+    private static final long serialVersionUID = -7401353969242788372L;\n+\n+    private static final Pattern PATH_PATTERN = Pattern.compile(\n+            \"^(?<schema>[A-Za-z0-9:.]+:)?(?<attribute>\\\\w+)(?<filter>\\\\[.*\\\\])?(?<sub>\\\\.\\\\w+)?\");\n+\n+    private static Serializable scalar(final JsonNode v) {\n+        if (v.isNull()) {\n+            return null;\n+        }\n+        if (v.isBoolean()) {\n+            return v.booleanValue();\n+        }\n+        if (v.isFloat()) {\n+            return v.floatValue();\n+        }\n+        if (v.isDouble()) {\n+            return v.doubleValue();\n+        }\n+        if (v.isInt()) {\n+            return v.intValue();\n+        }\n+        if (v.isShort()) {\n+            return v.shortValue();\n+        }\n+        if (v.isLong()) {\n+            return v.longValue();\n+        }\n+\n+        return v.asText();\n+    }\n+\n+    public SCIMPatchOperationDeserializer() {\n+        this(null);\n+    }\n+\n+    public SCIMPatchOperationDeserializer(final Class<?> vc) {\n+        super(vc);\n+    }\n+\n+    @Override\n+    public SCIMPatchOperation deserialize(final JsonParser jp, final DeserializationContext ctxt)\n+            throws IOException, JsonProcessingException {\n+\n+        JsonNode node = jp.getCodec().readTree(jp);\n+\n+        SCIMPatchOperation scimPatchOperation = new SCIMPatchOperation();\n+\n+        if (node.has(\"op\")) {\n+            scimPatchOperation.setOp(PatchOp.valueOf(node.get(\"op\").asText().toLowerCase()));\n+        }\n+\n+        if (node.has(\"path\")) {\n+            Matcher matcher = PATH_PATTERN.matcher(node.get(\"path\").asText());\n+            if (matcher.matches()) {\n+                SCIMPatchPath path = new SCIMPatchPath();\n+                scimPatchOperation.setPath(path);\n+\n+                Optional.ofNullable(matcher.group(\"schema\")).\n+                        ifPresent(schema -> path.setSchema(schema.substring(0, schema.length() - 1)));\n+\n+                path.setAttribute(StringUtils.uncapitalize(matcher.group(\"attribute\")));\n+\n+                Optional.ofNullable(matcher.group(\"filter\")).\n+                        ifPresent(condition -> path.setFilter(condition.substring(1, condition.length() - 1)));\n+\n+                Optional.ofNullable(matcher.group(\"sub\")).\n+                        ifPresent(sub -> path.setSub(StringUtils.uncapitalize(sub.substring(1))));\n+            }\n+        }\n+\n+        if (node.has(\"value\")) {\n+            JsonNode value = node.get(\"value\");\n+\n+            if (scimPatchOperation.getPath() == null) {\n+                scimPatchOperation.setValue(List.of(jp.getCodec().treeToValue(value, SCIMUser.class)));\n+            } else {\n+                if (\"members\".equals(scimPatchOperation.getPath().getAttribute())) {\n+                    scimPatchOperation.setValue(List.of(\n+                            (Serializable[]) jp.getCodec().treeToValue(value, Member[].class)));\n+                } else if (value.isObject()) {\n+                    SCIMUser user = new SCIMUser(\n+                            null,\n+                            List.of(),\n+                            null,\n+                            \"userName\".equals(scimPatchOperation.getPath().getAttribute()) ? value.asText() : null,\n+                            \"active\".equals(scimPatchOperation.getPath().getAttribute()) ? value.asBoolean() : null);\n+                    user.setEnterpriseInfo(new SCIMEnterpriseInfo());\n+\n+                    switch (scimPatchOperation.getPath().getAttribute()) {\n+                        case \"externalId\":\n+                            user.setExternalId(value.asText());\n+                            break;\n+\n+                        case \"name\":\n+                            user.setName(jp.getCodec().treeToValue(value, SCIMUserName.class));\n+                            break;\n+\n+                        case \"displayName\":\n+                            user.setDisplayName(value.asText());\n+                            break;\n+\n+                        case \"nickName\":\n+                            user.setNickName(value.asText());\n+                            break;\n+\n+                        case \"profileUrl\":\n+                            user.setProfileUrl(value.asText());\n+                            break;\n+\n+                        case \"title\":\n+                            user.setTitle(value.asText());\n+                            break;\n+\n+                        case \"userType\":\n+                            user.setUserType(value.asText());\n+                            break;\n+\n+                        case \"preferredLanguage\":\n+                            user.setPreferredLanguage(value.asText());\n+                            break;\n+\n+                        case \"locale\":\n+                            user.setLocale(value.asText());\n+                            break;\n+\n+                        case \"timezone\":\n+                            user.setTimezone(value.asText());\n+                            break;\n+\n+                        case \"emails\":\n+                            user.getEmails().add(jp.getCodec().treeToValue(value, SCIMComplexValue.class));\n+                            break;\n+\n+                        case \"phoneNumbers\":\n+                            user.getPhoneNumbers().add(jp.getCodec().treeToValue(value, SCIMComplexValue.class));\n+                            break;\n+\n+                        case \"ims\":\n+                            user.getIms().add(jp.getCodec().treeToValue(value, SCIMComplexValue.class));\n+                            break;\n+\n+                        case \"photos\":\n+                            user.getPhotos().add(jp.getCodec().treeToValue(value, SCIMComplexValue.class));\n+                            break;\n+\n+                        case \"addresses\":\n+                            user.getAddresses().add(jp.getCodec().treeToValue(value, SCIMUserAddress.class));\n+                            break;\n+\n+                        case \"x509Certificates\":\n+                            user.getX509Certificates().add(jp.getCodec().treeToValue(value, Value.class));\n+                            break;\n+\n+                        case \"employeeNumber\":\n+                            user.getEnterpriseInfo().setEmployeeNumber(value.asText());\n+                            break;\n+\n+                        case \"costCenter\":\n+                            user.getEnterpriseInfo().setCostCenter(value.asText());\n+                            break;\n+\n+                        case \"organization\":\n+                            user.getEnterpriseInfo().setOrganization(value.asText());\n+                            break;\n+\n+                        case \"division\":\n+                            user.getEnterpriseInfo().setDivision(value.asText());\n+                            break;\n+\n+                        case \"department\":\n+                            user.getEnterpriseInfo().setDepartment(value.asText());\n+                            break;\n+\n+                        case \"manager\":\n+                            user.getEnterpriseInfo().\n+                                    setManager(jp.getCodec().treeToValue(value, SCIMUserManager.class));\n+                            break;\n+\n+                        default:\n+                    }\n+\n+                    scimPatchOperation.setValue(List.of(user));\n+                } else if (!value.isContainerNode()) {\n+                    scimPatchOperation.setValue(List.of(scalar(value)));\n+                }\n+            }\n+        }\n+\n+        return scimPatchOperation;\n+    }\n+}"},{"sha":"f3873a267617440e20ce012572f547bd446ddab7","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMPatchPath.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchPath.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchPath.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchPath.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api.data;\n+\n+import java.io.Serializable;\n+\n+public class SCIMPatchPath implements Serializable {\n+\n+    private static final long serialVersionUID = -1092849408316419356L;\n+\n+    private String schema;\n+\n+    private String attribute;\n+\n+    private String filter;\n+\n+    private String sub;\n+\n+    public String getSchema() {\n+        return schema;\n+    }\n+\n+    public void setSchema(final String schema) {\n+        this.schema = schema;\n+    }\n+\n+    public String getAttribute() {\n+        return attribute;\n+    }\n+\n+    public void setAttribute(final String attribute) {\n+        this.attribute = attribute;\n+    }\n+\n+    public String getFilter() {\n+        return filter;\n+    }\n+\n+    public void setFilter(final String filter) {\n+        this.filter = filter;\n+    }\n+\n+    public String getSub() {\n+        return sub;\n+    }\n+\n+    public void setSub(final String sub) {\n+        this.sub = sub;\n+    }\n+}"},{"sha":"566416f5dd397d620f3d0ee2247247e9adc2fa81","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMResource.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMResource.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -29,11 +29,13 @@ public abstract class SCIMResource extends SCIMBean {\n \n     private String externalId;\n \n+    private String displayName;\n+\n     private final List<String> schemas;\n \n     private final Meta meta;\n \n-    public SCIMResource(final String id, final List<String> schemas, final Meta meta) {\n+    protected SCIMResource(final String id, final List<String> schemas, final Meta meta) {\n         this.id = id;\n         this.schemas = Optional.ofNullable(schemas).orElse(List.of());\n         this.meta = meta;\n@@ -59,4 +61,11 @@ public String getExternalId() {\n         return externalId;\n     }\n \n+    public String getDisplayName() {\n+        return displayName;\n+    }\n+\n+    public void setDisplayName(final String displayName) {\n+        this.displayName = displayName;\n+    }\n }"},{"sha":"03bd0d7f17b52ee6decd1b28773d04d23702812a","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMSearchRequest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMSearchRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMSearchRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMSearchRequest.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -92,5 +92,4 @@ public int getStartIndex() {\n     public int getCount() {\n         return Optional.ofNullable(count).orElse(25);\n     }\n-\n }"},{"sha":"08120534e91cdc156365972b64638cf85c6c14b6","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMUser.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMUser.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -19,10 +19,12 @@\n package org.apache.syncope.ext.scimv2.api.data;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n @JsonPropertyOrder({ \"schemas\", \"id\", \"externalId\",\n     \"userName\", \"password\", \"active\",\n@@ -39,12 +41,10 @@ public class SCIMUser extends SCIMResource {\n \n     private String password;\n \n-    private final boolean active;\n+    private final Boolean active;\n \n     private SCIMUserName name;\n \n-    private String displayName;\n-\n     private String nickName;\n \n     private String profileUrl;\n@@ -86,7 +86,7 @@ public SCIMUser(\n             @JsonProperty(\"schemas\") final List<String> schemas,\n             @JsonProperty(\"meta\") final Meta meta,\n             @JsonProperty(\"userName\") final String userName,\n-            @JsonProperty(\"active\") final boolean active) {\n+            @JsonProperty(\"active\") final Boolean active) {\n \n         super(id, schemas, meta);\n         this.userName = userName;\n@@ -105,10 +105,15 @@ public String getPassword() {\n         return password;\n     }\n \n-    public boolean isActive() {\n+    @JsonIgnore\n+    public Boolean getActive() {\n         return active;\n     }\n \n+    public boolean isActive() {\n+        return Optional.ofNullable(active).orElse(true);\n+    }\n+\n     public SCIMUserName getName() {\n         return name;\n     }\n@@ -117,14 +122,6 @@ public void setName(final SCIMUserName name) {\n         this.name = name;\n     }\n \n-    public String getDisplayName() {\n-        return displayName;\n-    }\n-\n-    public void setDisplayName(final String displayName) {\n-        this.displayName = displayName;\n-    }\n-\n     public String getNickName() {\n         return nickName;\n     }\n@@ -224,5 +221,4 @@ public SCIMEnterpriseInfo getEnterpriseInfo() {\n     public void setEnterpriseInfo(final SCIMEnterpriseInfo enterpriseInfo) {\n         this.enterpriseInfo = enterpriseInfo;\n     }\n-\n }"},{"sha":"ae74926f9c2dff80527161251405aaba387c78dc","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SchemaExtension.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSchemaExtension.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSchemaExtension.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSchemaExtension.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -45,5 +45,4 @@ public String getSchema() {\n     public boolean isRequired() {\n         return required;\n     }\n-\n }"},{"sha":"9e03c96c28ceb999e48cfd49958428c21d9e694e","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ServiceProviderConfig.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FServiceProviderConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FServiceProviderConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FServiceProviderConfig.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -103,5 +103,4 @@ public ConfigurationOption getEtag() {\n     public List<AuthenticationScheme> getAuthenticationSchemes() {\n         return authenticationSchemes;\n     }\n-\n }"},{"sha":"e68a8108fd271d74c5d0dbe65e4cb385982c191b","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/Value.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FValue.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -35,5 +35,4 @@ public Value(@JsonProperty(\"value\") final String value) {\n     public String getValue() {\n         return value;\n     }\n-\n }"},{"sha":"8c4e59561ba930b54fbfc80024221c8e31671185","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/GroupService.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/063a82bf63d31c11f005509dc29f06b9a92b8ce8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/063a82bf63d31c11f005509dc29f06b9a92b8ce8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FGroupService.java?ref=063a82bf63d31c11f005509dc29f06b9a92b8ce8","patch":"@@ -1,58 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.scimv2.api.service;\n-\n-import jakarta.validation.constraints.NotNull;\n-import jakarta.ws.rs.Consumes;\n-import jakarta.ws.rs.DELETE;\n-import jakarta.ws.rs.POST;\n-import jakarta.ws.rs.PUT;\n-import jakarta.ws.rs.Path;\n-import jakarta.ws.rs.PathParam;\n-import jakarta.ws.rs.Produces;\n-import jakarta.ws.rs.core.Response;\n-import org.apache.cxf.jaxrs.ext.PATCH;\n-import org.apache.syncope.ext.scimv2.api.SCIMConstants;\n-import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;\n-\n-@Path(\"v2/Groups\")\n-public interface GroupService extends ReadService<SCIMGroup> {\n-\n-    @POST\n-    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response create(SCIMGroup group);\n-\n-    @PATCH\n-    @Path(\"{id}\")\n-    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response update(@NotNull @PathParam(\"id\") String id);\n-\n-    @PUT\n-    @Path(\"{id}\")\n-    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response replace(@NotNull @PathParam(\"id\") String id, SCIMGroup group);\n-\n-    @DELETE\n-    @Path(\"{id}\")\n-    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response delete(@NotNull @PathParam(\"id\") String id);\n-}"},{"sha":"d2e859ed12e0b93d239a66a0717f0f661370aa8d","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMGroupService.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FSCIMGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FSCIMGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FSCIMGroupService.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api.service;\n+\n+import jakarta.ws.rs.Path;\n+import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;\n+\n+@Path(\"v2/Groups\")\n+public interface SCIMGroupService extends SCIMResourceService<SCIMGroup> {\n+}"},{"sha":"33a1f835d9dae96784b8515bcf1e309b47bac4d3","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMResourceService.java","status":"renamed","additions":28,"deletions":1,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FSCIMResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FSCIMResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FSCIMResourceService.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -20,19 +20,24 @@\n \n import jakarta.validation.constraints.NotNull;\n import jakarta.ws.rs.Consumes;\n+import jakarta.ws.rs.DELETE;\n import jakarta.ws.rs.GET;\n+import jakarta.ws.rs.PATCH;\n import jakarta.ws.rs.POST;\n+import jakarta.ws.rs.PUT;\n import jakarta.ws.rs.Path;\n import jakarta.ws.rs.PathParam;\n import jakarta.ws.rs.Produces;\n import jakarta.ws.rs.QueryParam;\n+import jakarta.ws.rs.core.Response;\n import org.apache.syncope.ext.scimv2.api.SCIMConstants;\n import org.apache.syncope.ext.scimv2.api.data.ListResponse;\n+import org.apache.syncope.ext.scimv2.api.data.SCIMPatchOp;\n import org.apache.syncope.ext.scimv2.api.data.SCIMResource;\n import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;\n import org.apache.syncope.ext.scimv2.api.type.SortOrder;\n \n-public interface ReadService<R extends SCIMResource> {\n+public interface SCIMResourceService<R extends SCIMResource> {\n \n     @GET\n     @Path(\"{id}\")\n@@ -57,4 +62,26 @@ ListResponse<R> search(\n     @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n     @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n     ListResponse<R> search(SCIMSearchRequest request);\n+\n+    @POST\n+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n+    Response create(R resource);\n+\n+    @PATCH\n+    @Path(\"{id}\")\n+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n+    Response update(@NotNull @PathParam(\"id\") String id, SCIMPatchOp patch);\n+\n+    @PUT\n+    @Path(\"{id}\")\n+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n+    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n+    Response replace(@NotNull @PathParam(\"id\") String id, R resource);\n+\n+    @DELETE\n+    @Path(\"{id}\")\n+    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n+    Response delete(@NotNull @PathParam(\"id\") String id);\n }","previous_filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/ReadService.java"},{"sha":"c8fa261bf08b395ccbd8c9114ddeab24ab76cb40","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/SCIMUserService.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FSCIMUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FSCIMUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FSCIMUserService.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api.service;\n+\n+import jakarta.ws.rs.Path;\n+import org.apache.syncope.ext.scimv2.api.data.SCIMUser;\n+\n+@Path(\"v2/Users\")\n+public interface SCIMUserService extends SCIMResourceService<SCIMUser> {\n+}"},{"sha":"f0ca8023ca137fe186d1c770146c872be177ff20","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/service/UserService.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/063a82bf63d31c11f005509dc29f06b9a92b8ce8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/063a82bf63d31c11f005509dc29f06b9a92b8ce8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fservice%2FUserService.java?ref=063a82bf63d31c11f005509dc29f06b9a92b8ce8","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.scimv2.api.service;\n-\n-import jakarta.validation.constraints.NotNull;\n-import jakarta.ws.rs.Consumes;\n-import jakarta.ws.rs.DELETE;\n-import jakarta.ws.rs.POST;\n-import jakarta.ws.rs.PUT;\n-import jakarta.ws.rs.Path;\n-import jakarta.ws.rs.PathParam;\n-import jakarta.ws.rs.Produces;\n-import jakarta.ws.rs.core.Response;\n-import org.apache.cxf.jaxrs.ext.PATCH;\n-import org.apache.syncope.ext.scimv2.api.SCIMConstants;\n-import org.apache.syncope.ext.scimv2.api.data.SCIMUser;\n-\n-@Path(\"v2/Users\")\n-public interface UserService extends ReadService<SCIMUser> {\n-\n-    @POST\n-    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response create(SCIMUser user);\n-\n-    @PATCH\n-    @Path(\"{id}\")\n-    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response update(@NotNull @PathParam(\"id\") String id);\n-\n-    @PUT\n-    @Path(\"{id}\")\n-    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    @Consumes({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response replace(@NotNull @PathParam(\"id\") String id, SCIMUser user);\n-\n-    @DELETE\n-    @Path(\"{id}\")\n-    @Produces({ SCIMConstants.APPLICATION_SCIM_JSON })\n-    Response delete(@NotNull @PathParam(\"id\") String id);\n-\n-}"},{"sha":"d28c4964755447029e0a75045a2133f4628ce119","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/PatchOp.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Ftype%2FPatchOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Ftype%2FPatchOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Ftype%2FPatchOp.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api.type;\n+\n+public enum PatchOp {\n+    add,\n+    replace,\n+    remove;\n+\n+}"},{"sha":"b26382383f8c471b7f72f8c403380e1c504f54b7","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Ftype%2FResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Ftype%2FResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Ftype%2FResource.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -28,6 +28,7 @@ public enum Resource {\n     Group(\"urn:ietf:params:scim:schemas:core:2.0:Group\"),\n     SearchRequest(\"urn:ietf:params:scim:api:messages:2.0:SearchRequest\"),\n     ListResponse(\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"),\n+    PatchOp(\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"),\n     Error(\"urn:ietf:params:scim:api:messages:2.0:Error\");\n \n     private final String schema;"},{"sha":"668c9e5bcf8b1327bf1bf747e4e010ec315a35e5","filename":"ext/scimv2/scim-rest-api/src/test/java/org/apache/syncope/ext/scimv2/api/data/SCIMPatchOperationDeserializerTest.java","status":"added","additions":349,"deletions":0,"changes":349,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchOperationDeserializerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchOperationDeserializerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMPatchOperationDeserializerTest.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -0,0 +1,349 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api.data;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n+import java.util.List;\n+import org.apache.syncope.ext.scimv2.api.type.PatchOp;\n+import org.apache.syncope.ext.scimv2.api.type.Resource;\n+import org.junit.jupiter.api.Test;\n+\n+public class SCIMPatchOperationDeserializerTest {\n+\n+    private static final JsonMapper MAPPER = JsonMapper.builder().\n+            findAndAddModules().disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS).build();\n+\n+    @Test\n+    public void addMember() throws JsonProcessingException {\n+        String input =\n+                \"{ \"\n+                + \"\\\"schemas\\\":[\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"     \\\"Operations\\\":[\"\n+                + \"       {\"\n+                + \"        \\\"op\\\":\\\"add\\\",\"\n+                + \"        \\\"path\\\":\\\"members\\\",\"\n+                + \"        \\\"value\\\":[\"\n+                + \"         {\"\n+                + \"           \\\"display\\\": \\\"Babs Jensen\\\",\"\n+                + \"           \\\"$ref\\\": \\\"https://example.com/v2/Users/2819c223...413861904646\\\",\"\n+                + \"           \\\"value\\\": \\\"2819c223-7f76-453a-919d-413861904646\\\"\"\n+                + \"         }\"\n+                + \"        ]\"\n+                + \"       }\"\n+                + \"     ]\"\n+                + \"   }\";\n+\n+        SCIMPatchOp scimPatchOp = MAPPER.readValue(input, SCIMPatchOp.class);\n+        assertNotNull(scimPatchOp);\n+        assertEquals(List.of(Resource.PatchOp.schema()), scimPatchOp.getSchemas());\n+        assertEquals(1, scimPatchOp.getOperations().size());\n+\n+        SCIMPatchOperation op = scimPatchOp.getOperations().get(0);\n+        assertNotNull(op);\n+        assertEquals(PatchOp.add, op.getOp());\n+        assertEquals(\"members\", op.getPath().getAttribute());\n+\n+        assertEquals(1, op.getValue().size());\n+\n+        Member member = (Member) op.getValue().get(0);\n+        assertEquals(\"Babs Jensen\", member.getDisplay());\n+        assertEquals(\"https://example.com/v2/Users/2819c223...413861904646\", member.getRef());\n+        assertEquals(\"2819c223-7f76-453a-919d-413861904646\", member.getValue());\n+    }\n+\n+    @Test\n+    public void removeMembers() throws JsonProcessingException {\n+        String input =\n+                \"{\"\n+                + \"     \\\"schemas\\\":[\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"     \\\"Operations\\\":[{\"\n+                + \"       \\\"op\\\":\\\"remove\\\",\"\n+                + \"       \\\"path\\\":\\\"members[value eq \\\\\\\"2819c223-7f76-...413861904646\\\\\\\"]\\\"\"\n+                + \"     }]\"\n+                + \"   }\";\n+\n+        SCIMPatchOp scimPatchOp = MAPPER.readValue(input, SCIMPatchOp.class);\n+        assertNotNull(scimPatchOp);\n+        assertEquals(List.of(Resource.PatchOp.schema()), scimPatchOp.getSchemas());\n+        assertEquals(1, scimPatchOp.getOperations().size());\n+\n+        SCIMPatchOperation op = scimPatchOp.getOperations().get(0);\n+        assertNotNull(op);\n+        assertEquals(PatchOp.remove, op.getOp());\n+        assertEquals(\"members\", op.getPath().getAttribute());\n+        assertEquals(\"value eq \\\"2819c223-7f76-...413861904646\\\"\", op.getPath().getFilter());\n+    }\n+\n+    @Test\n+    public void removeAndAddMembers() throws JsonProcessingException {\n+        String input =\n+                \"{ \\\"schemas\\\":[\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"     \\\"Operations\\\": [\"\n+                + \"       {\"\n+                + \"         \\\"op\\\":\\\"remove\\\",\"\n+                + \"         \\\"path\\\":\"\n+                + \"           \\\"members[value eq \\\\\\\"2819c223...919d-413861904646\\\\\\\"]\\\"\"\n+                + \"       },\"\n+                + \"       {\"\n+                + \"         \\\"op\\\":\\\"add\\\",\"\n+                + \"         \\\"path\\\":\\\"members\\\",\"\n+                + \"         \\\"value\\\": [\"\n+                + \"           {\"\n+                + \"            \\\"display\\\": \\\"Babs Jensen\\\",\"\n+                + \"            \\\"$ref\\\":\\\"https://example.com/v2/Users/2819c223...413861904646\\\",\"\n+                + \"            \\\"value\\\": \\\"2819c223-7f76-453a-919d-413861904646\\\"\"\n+                + \"           },\"\n+                + \"           {\"\n+                + \"             \\\"display\\\": \\\"James Smith\\\",\"\n+                + \"             \\\"$ref\\\":\\\"https://example.com/v2/Users/08e1d05d...473d93df9210\\\",\"\n+                + \"             \\\"value\\\": \\\"08e1d05d...473d93df9210\\\"\"\n+                + \"           }\"\n+                + \"         ]\"\n+                + \"       }\"\n+                + \"     ]\"\n+                + \"   }\";\n+\n+        SCIMPatchOp scimPatchOp = MAPPER.readValue(input, SCIMPatchOp.class);\n+        assertNotNull(scimPatchOp);\n+        assertEquals(List.of(Resource.PatchOp.schema()), scimPatchOp.getSchemas());\n+        assertEquals(2, scimPatchOp.getOperations().size());\n+\n+        SCIMPatchOperation op = scimPatchOp.getOperations().get(0);\n+        assertNotNull(op);\n+        assertEquals(PatchOp.remove, op.getOp());\n+        assertEquals(\"members\", op.getPath().getAttribute());\n+        assertEquals(\"value eq \\\"2819c223...919d-413861904646\\\"\", op.getPath().getFilter());\n+\n+        op = scimPatchOp.getOperations().get(1);\n+        assertNotNull(op);\n+        assertEquals(PatchOp.add, op.getOp());\n+        assertEquals(\"members\", op.getPath().getAttribute());\n+\n+        assertEquals(2, op.getValue().size());\n+\n+        Member member = (Member) op.getValue().get(0);\n+        assertEquals(\"Babs Jensen\", member.getDisplay());\n+        assertEquals(\"https://example.com/v2/Users/2819c223...413861904646\", member.getRef());\n+        assertEquals(\"2819c223-7f76-453a-919d-413861904646\", member.getValue());\n+\n+        member = (Member) op.getValue().get(1);\n+        assertEquals(\"James Smith\", member.getDisplay());\n+        assertEquals(\"https://example.com/v2/Users/08e1d05d...473d93df9210\", member.getRef());\n+        assertEquals(\"08e1d05d...473d93df9210\", member.getValue());\n+    }\n+\n+    @Test\n+    public void addAttributes() throws JsonProcessingException {\n+        String input =\n+                \"{\"\n+                + \"  \\\"schemas\\\":[\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"  \\\"Operations\\\": [\"\n+                + \"    {\"\n+                + \"      \\\"op\\\": \\\"add\\\",\"\n+                + \"      \\\"value\\\": {\"\n+                + \"        \\\"emails\\\": [\"\n+                + \"          {\"\n+                + \"            \\\"value\\\": \\\"babs@jensen.org\\\",\"\n+                + \"            \\\"type\\\": \\\"home\\\"\"\n+                + \"          }\"\n+                + \"        ],\"\n+                + \"        \\\"nickName\\\": \\\"Babs\\\"\"\n+                + \"      }\"\n+                + \"    }\"\n+                + \"  ]\"\n+                + \"}\";\n+\n+        SCIMPatchOp scimPatchOp = MAPPER.readValue(input, SCIMPatchOp.class);\n+        assertNotNull(scimPatchOp);\n+        assertEquals(List.of(Resource.PatchOp.schema()), scimPatchOp.getSchemas());\n+        assertEquals(1, scimPatchOp.getOperations().size());\n+\n+        SCIMPatchOperation op = scimPatchOp.getOperations().get(0);\n+        assertNotNull(op);\n+        assertEquals(PatchOp.add, op.getOp());\n+        assertNull(op.getPath());\n+\n+        assertEquals(1, op.getValue().size());\n+\n+        SCIMUser user = (SCIMUser) op.getValue().get(0);\n+        assertEquals(\"Babs\", user.getNickName());\n+\n+        assertEquals(1, user.getEmails().size());\n+\n+        SCIMComplexValue email = user.getEmails().get(0);\n+        assertEquals(\"home\", email.getType());\n+        assertEquals(\"babs@jensen.org\", email.getValue());\n+    }\n+\n+    @Test\n+    public void replaceMembers() throws JsonProcessingException {\n+        String input =\n+                \" {\"\n+                + \"     \\\"schemas\\\":[\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"     \\\"Operations\\\": [{\"\n+                + \"       \\\"op\\\":\\\"replace\\\",\"\n+                + \"       \\\"path\\\":\\\"members\\\",\"\n+                + \"       \\\"value\\\":[\"\n+                + \"         {\"\n+                + \"           \\\"display\\\": \\\"Babs Jensen\\\",\"\n+                + \"           \\\"$ref\\\": \\\"https://example.com/v2/Users/2819c223...413861904646\\\",\"\n+                + \"           \\\"value\\\": \\\"2819c223...413861904646\\\"\"\n+                + \"         },\"\n+                + \"         {\"\n+                + \"           \\\"display\\\": \\\"James Smith\\\",\"\n+                + \"           \\\"$ref\\\":\\\"https://example.com/v2/Users/08e1d05d...473d93df9210\\\",\"\n+                + \"           \\\"value\\\": \\\"08e1d05d...473d93df9210\\\"\"\n+                + \"         }\"\n+                + \"       ]\"\n+                + \"     }]\"\n+                + \"   }\";\n+\n+        SCIMPatchOp scimPatchOp = MAPPER.readValue(input, SCIMPatchOp.class);\n+        assertNotNull(scimPatchOp);\n+        assertEquals(List.of(Resource.PatchOp.schema()), scimPatchOp.getSchemas());\n+        assertEquals(1, scimPatchOp.getOperations().size());\n+\n+        SCIMPatchOperation op = scimPatchOp.getOperations().get(0);\n+        assertNotNull(op);\n+        assertEquals(PatchOp.replace, op.getOp());\n+        assertEquals(\"members\", op.getPath().getAttribute());\n+\n+        assertEquals(2, op.getValue().size());\n+\n+        Member member = (Member) op.getValue().get(0);\n+        assertEquals(\"Babs Jensen\", member.getDisplay());\n+        assertEquals(\"https://example.com/v2/Users/2819c223...413861904646\", member.getRef());\n+        assertEquals(\"2819c223...413861904646\", member.getValue());\n+\n+        member = (Member) op.getValue().get(1);\n+        assertEquals(\"James Smith\", member.getDisplay());\n+        assertEquals(\"https://example.com/v2/Users/08e1d05d...473d93df9210\", member.getRef());\n+        assertEquals(\"08e1d05d...473d93df9210\", member.getValue());\n+    }\n+\n+    @Test\n+    public void replaceAttribute() throws JsonProcessingException {\n+        String input =\n+                \"{\"\n+                + \"     \\\"schemas\\\": [\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"     \\\"Operations\\\": [{\"\n+                + \"       \\\"op\\\":\\\"replace\\\",\"\n+                + \"       \\\"path\\\":\\\"addresses[type eq \\\\\\\"work\\\\\\\"]\\\",\"\n+                + \"       \\\"value\\\":\"\n+                + \"       {\"\n+                + \"         \\\"type\\\": \\\"work\\\",\"\n+                + \"         \\\"streetAddress\\\": \\\"911 Universal City Plaza\\\",\"\n+                + \"         \\\"locality\\\": \\\"Hollywood\\\",\"\n+                + \"         \\\"region\\\": \\\"CA\\\",\"\n+                + \"         \\\"postalCode\\\": \\\"91608\\\",\"\n+                + \"         \\\"country\\\": \\\"US\\\",\"\n+                + \"         \\\"formatted\\\":\\\"911 Universal City Plaza\\\\nHollywood, CA 91608 US\\\",\"\n+                + \"         \\\"primary\\\": true\"\n+                + \"       }\"\n+                + \"     }]\"\n+                + \"   }\";\n+\n+        SCIMPatchOp scimPatchOp = MAPPER.readValue(input, SCIMPatchOp.class);\n+        assertNotNull(scimPatchOp);\n+        assertEquals(List.of(Resource.PatchOp.schema()), scimPatchOp.getSchemas());\n+        assertEquals(1, scimPatchOp.getOperations().size());\n+\n+        SCIMPatchOperation op = scimPatchOp.getOperations().get(0);\n+        assertNotNull(op);\n+        assertEquals(PatchOp.replace, op.getOp());\n+        assertEquals(\"addresses\", op.getPath().getAttribute());\n+        assertEquals(\"type eq \\\"work\\\"\", op.getPath().getFilter());\n+\n+        assertEquals(1, op.getValue().size());\n+\n+        SCIMUser user = (SCIMUser) op.getValue().get(0);\n+\n+        assertEquals(1, user.getAddresses().size());\n+\n+        SCIMUserAddress address = user.getAddresses().get(0);\n+        assertEquals(\"work\", address.getType());\n+        assertTrue(address.isPrimary());\n+    }\n+\n+    @Test\n+    public void replaceAttributeValue() throws JsonProcessingException {\n+        String input =\n+                \"{\"\n+                + \"     \\\"schemas\\\": [\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"     \\\"Operations\\\": [{\"\n+                + \"       \\\"op\\\":\\\"replace\\\",\"\n+                + \"       \\\"path\\\":\\\"addresses[type eq \\\\\\\"work\\\\\\\"].streetAddress\\\",\"\n+                + \"       \\\"value\\\":\\\"1010 Broadway Ave\\\"\"\n+                + \"     }]\"\n+                + \"   }\";\n+\n+        SCIMPatchOp scimPatchOp = MAPPER.readValue(input, SCIMPatchOp.class);\n+        assertNotNull(scimPatchOp);\n+        assertEquals(List.of(Resource.PatchOp.schema()), scimPatchOp.getSchemas());\n+        assertEquals(1, scimPatchOp.getOperations().size());\n+\n+        SCIMPatchOperation op = scimPatchOp.getOperations().get(0);\n+        assertNotNull(op);\n+        assertEquals(PatchOp.replace, op.getOp());\n+        assertEquals(\"addresses\", op.getPath().getAttribute());\n+        assertEquals(\"type eq \\\"work\\\"\", op.getPath().getFilter());\n+        assertEquals(\"streetAddress\", op.getPath().getSub());\n+\n+        assertEquals(1, op.getValue().size());\n+\n+        String value = (String) op.getValue().get(0);\n+        assertEquals(\"1010 Broadway Ave\", value);\n+    }\n+\n+    @Test\n+    public void addAttributeValue() throws JsonProcessingException {\n+        String input =\n+                \"{\"\n+                + \"  \\\"schemas\\\": [\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"  \\\"Operations\\\": [{\"\n+                + \"      \\\"op\\\": \\\"Add\\\",\"\n+                + \"      \\\"path\\\": \\\"externalId\\\",\"\n+                + \"      \\\"value\\\": \\\"da91cb5d-addb-424f-aa41-799fda8658c3\\\"\"\n+                + \"    }\"\n+                + \"  ]\"\n+                + \"}\";\n+\n+        SCIMPatchOp scimPatchOp = MAPPER.readValue(input, SCIMPatchOp.class);\n+        assertNotNull(scimPatchOp);\n+        assertEquals(List.of(Resource.PatchOp.schema()), scimPatchOp.getSchemas());\n+        assertEquals(1, scimPatchOp.getOperations().size());\n+\n+        SCIMPatchOperation op = scimPatchOp.getOperations().get(0);\n+        assertNotNull(op);\n+        assertEquals(PatchOp.add, op.getOp());\n+        assertEquals(\"externalId\", op.getPath().getAttribute());\n+\n+        assertEquals(1, op.getValue().size());\n+\n+        String value = (String) op.getValue().get(0);\n+        assertEquals(\"da91cb5d-addb-424f-aa41-799fda8658c3\", value);\n+    }\n+}"},{"sha":"f812f3d5222749193e14c5589c24bbbdaabc96c4","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java","status":"modified","additions":18,"deletions":10,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -53,19 +53,19 @@\n @Provider\n public class SCIMExceptionMapper implements ExceptionMapper<Exception> {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SCIMExceptionMapper.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(SCIMExceptionMapper.class);\n \n-    private static Class<?> ENTITYEXISTS_EXCLASS = null;\n+    protected static Class<?> ENTITYEXISTS_EXCLASS = null;\n \n-    private static Class<?> PERSISTENCE_EXCLASS = null;\n+    protected static Class<?> PERSISTENCE_EXCLASS = null;\n \n-    private static Class<?> ROLLBACK_EXCLASS = null;\n+    protected static Class<?> ROLLBACK_EXCLASS = null;\n \n-    private static Class<?> JPASYSTEM_EXCLASS = null;\n+    protected static Class<?> JPASYSTEM_EXCLASS = null;\n \n-    private static Class<?> CONNECTOR_EXCLASS = null;\n+    protected static Class<?> CONNECTOR_EXCLASS = null;\n \n-    private static Class<?> IBATISPERSISTENCE_EXCLASS = null;\n+    protected static Class<?> IBATISPERSISTENCE_EXCLASS = null;\n \n     static {\n         try {\n@@ -122,6 +122,14 @@ public Response toResponse(final Exception ex) {\n             if (builder == null && ex instanceof ValidationException) {\n                 builder = builder(ClientExceptionType.RESTValidation, ExceptionUtils.getRootCauseMessage(ex));\n             }\n+            // process requests for features not yet implemented \n+            if (builder == null && ex instanceof UnsupportedOperationException) {\n+                builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR).\n+                        entity(new SCIMError(\n+                                ErrorType.invalidSyntax,\n+                                Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),\n+                                ExceptionUtils.getRootCauseMessage(ex)));\n+            }\n             // ...or just report as InternalServerError\n             if (builder == null) {\n                 builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR).\n@@ -132,7 +140,7 @@ public Response toResponse(final Exception ex) {\n         return Optional.ofNullable(builder).map(ResponseBuilder::build).orElse(null);\n     }\n \n-    private static ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n+    protected ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n         InvalidEntityException iee = null;\n \n         if (ex instanceof InvalidEntityException) {\n@@ -173,7 +181,7 @@ private static ResponseBuilder processInvalidEntityExceptions(final Exception ex\n         return null;\n     }\n \n-    private static ResponseBuilder processBadRequestExceptions(final Exception ex) {\n+    protected ResponseBuilder processBadRequestExceptions(final Exception ex) {\n         if (ex instanceof WorkflowException) {\n             return builder(ClientExceptionType.Workflow, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (PERSISTENCE_EXCLASS.isAssignableFrom(ex.getClass())) {\n@@ -195,7 +203,7 @@ private static ResponseBuilder processBadRequestExceptions(final Exception ex) {\n         return null;\n     }\n \n-    private static ResponseBuilder builder(final ClientExceptionType hType, final String msg) {\n+    protected ResponseBuilder builder(final ClientExceptionType hType, final String msg) {\n         ResponseBuilder builder = Response.status(hType.getResponseStatus());\n \n         ErrorType scimType = null;"},{"sha":"652e63cb68ebe8038f8f42ffb9b01ca8b4bf4557","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMv2RESTCXFContext.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMv2RESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMv2RESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMv2RESTCXFContext.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -36,12 +36,12 @@\n import org.apache.syncope.core.logic.scim.SCIMConfManager;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.ext.scimv2.api.service.GroupService;\n+import org.apache.syncope.ext.scimv2.api.service.SCIMGroupService;\n import org.apache.syncope.ext.scimv2.api.service.SCIMService;\n-import org.apache.syncope.ext.scimv2.api.service.UserService;\n-import org.apache.syncope.ext.scimv2.cxf.service.GroupServiceImpl;\n+import org.apache.syncope.ext.scimv2.api.service.SCIMUserService;\n+import org.apache.syncope.ext.scimv2.cxf.service.SCIMGroupServiceImpl;\n import org.apache.syncope.ext.scimv2.cxf.service.SCIMServiceImpl;\n-import org.apache.syncope.ext.scimv2.cxf.service.UserServiceImpl;\n+import org.apache.syncope.ext.scimv2.cxf.service.SCIMUserServiceImpl;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n@@ -119,27 +119,27 @@ public SCIMService scimService(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public GroupService scimv2GroupService(\n+    public SCIMGroupService scimv2GroupService(\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n             final UserLogic userLogic,\n             final GroupLogic groupLogic,\n             final SCIMDataBinder binder,\n             final SCIMConfManager confManager) {\n \n-        return new GroupServiceImpl(userDAO, groupDAO, userLogic, groupLogic, binder, confManager);\n+        return new SCIMGroupServiceImpl(userDAO, groupDAO, userLogic, groupLogic, binder, confManager);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public UserService scimv2UserService(\n+    public SCIMUserService scimv2UserService(\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n             final UserLogic userLogic,\n             final GroupLogic groupLogic,\n             final SCIMDataBinder binder,\n             final SCIMConfManager confManager) {\n \n-        return new UserServiceImpl(userDAO, groupDAO, userLogic, groupLogic, binder, confManager);\n+        return new SCIMUserServiceImpl(userDAO, groupDAO, userLogic, groupLogic, binder, confManager);\n     }\n }"},{"sha":"bf307cf5597c29a57c45bf7df66093e982f7febf","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractSCIMService.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractSCIMService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractSCIMService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractSCIMService.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -54,9 +54,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-abstract class AbstractService<R extends SCIMResource> {\n+abstract class AbstractSCIMService<R extends SCIMResource> {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(AbstractService.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractSCIMService.class);\n \n     @Context\n     protected UriInfo uriInfo;\n@@ -76,7 +76,7 @@\n \n     protected final SCIMConfManager confManager;\n \n-    protected AbstractService(\n+    protected AbstractSCIMService(\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n             final UserLogic userLogic,\n@@ -200,7 +200,8 @@ protected ListResponse<R> doSearch(\n                         request.getAttributes(),\n                         request.getExcludedAttributes());\n             } else if (anyTO instanceof GroupTO) {\n-                resource = binder.toSCIMGroup((GroupTO) anyTO,\n+                resource = binder.toSCIMGroup(\n+                        (GroupTO) anyTO,\n                         uriInfo.getAbsolutePathBuilder().path(anyTO.getKey()).build().toASCIIString(),\n                         request.getAttributes(),\n                         request.getExcludedAttributes());\n@@ -213,5 +214,4 @@ protected ListResponse<R> doSearch(\n \n         return response;\n     }\n-\n }","previous_filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java"},{"sha":"ca2f9e950f9337bce1d5faa63b50a411ddd4cb9e","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/SCIMGroupServiceImpl.java","status":"renamed","additions":86,"deletions":58,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FSCIMGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FSCIMGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FSCIMGroupServiceImpl.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -22,9 +22,12 @@\n import jakarta.ws.rs.core.Response.ResponseBuilder;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -43,18 +46,23 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.apache.syncope.ext.scimv2.api.BadRequestException;\n import org.apache.syncope.ext.scimv2.api.data.ListResponse;\n+import org.apache.syncope.ext.scimv2.api.data.Member;\n import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;\n+import org.apache.syncope.ext.scimv2.api.data.SCIMPatchOp;\n import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;\n-import org.apache.syncope.ext.scimv2.api.service.GroupService;\n+import org.apache.syncope.ext.scimv2.api.service.SCIMGroupService;\n import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n+import org.apache.syncope.ext.scimv2.api.type.PatchOp;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n import org.apache.syncope.ext.scimv2.api.type.SortOrder;\n+import org.springframework.util.CollectionUtils;\n \n-public class GroupServiceImpl extends AbstractService<SCIMGroup> implements GroupService {\n+public class SCIMGroupServiceImpl extends AbstractSCIMService<SCIMGroup> implements SCIMGroupService {\n \n-    public GroupServiceImpl(\n+    public SCIMGroupServiceImpl(\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n             final UserLogic userLogic,\n@@ -65,23 +73,26 @@ public GroupServiceImpl(\n         super(userDAO, groupDAO, userLogic, groupLogic, binder, confManager);\n     }\n \n+    private void changeMembership(final String user, final String group, final PatchOp patchOp) {\n+        UserUR req = new UserUR.Builder(user).\n+                membership(new MembershipUR.Builder(group).operation(patchOp == PatchOp.remove\n+                        ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).build()).\n+                build();\n+        try {\n+            userLogic.update(req, false);\n+        } catch (Exception e) {\n+            LOG.error(\"While applying {} on membership of {} to {}\", patchOp, group, user, e);\n+        }\n+    }\n+\n     @Override\n     public Response create(final SCIMGroup group) {\n         // first create group, no members assigned\n-        ProvisioningResult<GroupTO> result = groupLogic.create(SCIMDataBinder.toGroupCR(group), false);\n+        ProvisioningResult<GroupTO> result = groupLogic.create(binder.toGroupCR(group), false);\n \n         // then assign members\n-        group.getMembers().forEach(member -> {\n-            UserUR req = new UserUR.Builder(member.getValue()).\n-                    membership(new MembershipUR.Builder(result.getEntity().getKey()).\n-                            operation(PatchOperation.ADD_REPLACE).build()).\n-                    build();\n-            try {\n-                userLogic.update(req, false);\n-            } catch (Exception e) {\n-                LOG.error(\"While setting membership of {} to {}\", result.getEntity().getKey(), member.getValue(), e);\n-            }\n-        });\n+        group.getMembers().forEach(member -> changeMembership(\n+                member.getValue(), result.getEntity().getKey(), PatchOp.add));\n \n         return createResponse(\n                 result.getEntity().getKey(),\n@@ -93,7 +104,8 @@ public Response create(final SCIMGroup group) {\n     }\n \n     @Override\n-    public SCIMGroup get(final String id,\n+    public SCIMGroup get(\n+            final String id,\n             final String attributes,\n             final String excludedAttributes) {\n \n@@ -104,9 +116,60 @@ public SCIMGroup get(final String id,\n                 List.of(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));\n     }\n \n+    private Set<String> members(final String group) {\n+        Set<String> members = new HashSet<>();\n+\n+        MembershipCond membCond = new MembershipCond();\n+        membCond.setGroup(group);\n+        SearchCond searchCond = SearchCond.getLeaf(membCond);\n+        int count = userLogic.search(searchCond, 1, 1, List.of(), SyncopeConstants.ROOT_REALM, true, false).getLeft();\n+        for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+            members.addAll(userLogic.search(\n+                    searchCond,\n+                    page,\n+                    AnyDAO.DEFAULT_PAGE_SIZE,\n+                    List.of(),\n+                    SyncopeConstants.ROOT_REALM,\n+                    true,\n+                    false).\n+                    getRight().stream().map(UserTO::getKey).collect(Collectors.toSet()));\n+        }\n+\n+        return members;\n+    }\n+\n     @Override\n-    public Response update(final String id) {\n-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();\n+    public Response update(final String id, final SCIMPatchOp patch) {\n+        ResponseBuilder builder = checkETag(Resource.Group, id);\n+        if (builder != null) {\n+            return builder.build();\n+        }\n+\n+        patch.getOperations().forEach(op -> {\n+            if (op.getPath() != null && \"members\".equals(op.getPath().getAttribute())) {\n+                if (CollectionUtils.isEmpty(op.getValue())) {\n+                    members(id).stream().filter(member -> op.getPath().getFilter() == null\n+                            ? true\n+                            : BooleanUtils.toBoolean(JexlUtils.evaluate(\n+                                    SCIMDataBinder.filter2JexlExpression(op.getPath().getFilter()),\n+                                    new MapContext(Map.of(\"value\", member))).toString())).\n+                            forEach(member -> changeMembership(member, id, op.getOp()));\n+                } else {\n+                    op.getValue().stream().map(Member.class::cast).\n+                            forEach(member -> changeMembership(member.getValue(), id, op.getOp()));\n+                }\n+            } else {\n+                groupLogic.update(binder.toGroupUR(groupLogic.read(id), op), false);\n+            }\n+        });\n+\n+        return updateResponse(\n+                id,\n+                binder.toSCIMGroup(\n+                        groupLogic.read(id),\n+                        uriInfo.getAbsolutePathBuilder().path(id).build().toASCIIString(),\n+                        List.of(),\n+                        List.of()));\n     }\n \n     @Override\n@@ -121,59 +184,24 @@ public Response replace(final String id, final SCIMGroup group) {\n         }\n \n         // save current group members\n-        Set<String> beforeMembers = new HashSet<>();\n-\n-        MembershipCond membCond = new MembershipCond();\n-        membCond.setGroup(id);\n-        SearchCond searchCond = SearchCond.getLeaf(membCond);\n-        int count = userLogic.search(searchCond,\n-                1, 1, List.of(), SyncopeConstants.ROOT_REALM, true, false).getLeft();\n-        for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n-            beforeMembers.addAll(userLogic.search(\n-                    searchCond,\n-                    page,\n-                    AnyDAO.DEFAULT_PAGE_SIZE,\n-                    List.of(),\n-                    SyncopeConstants.ROOT_REALM,\n-                    true,\n-                    false).\n-                    getRight().stream().map(UserTO::getKey).collect(Collectors.toSet()));\n-        }\n+        Set<String> beforeMembers = members(id);\n \n         // update group, don't change members\n         ProvisioningResult<GroupTO> result = groupLogic.update(\n-                AnyOperations.diff(SCIMDataBinder.toGroupTO(group), groupLogic.read(id), false), false);\n+                AnyOperations.diff(binder.toGroupTO(group, true), groupLogic.read(id), false), false);\n \n         // assign new members\n         Set<String> afterMembers = new HashSet<>();\n         group.getMembers().forEach(member -> {\n             afterMembers.add(member.getValue());\n \n             if (!beforeMembers.contains(member.getValue())) {\n-                UserUR req = new UserUR.Builder(member.getValue()).\n-                        membership(new MembershipUR.Builder(result.getEntity().getKey()).\n-                                operation(PatchOperation.ADD_REPLACE).build()).\n-                        build();\n-                try {\n-                    userLogic.update(req, false);\n-                } catch (Exception e) {\n-                    LOG.error(\"While setting membership of {} to {}\",\n-                            result.getEntity().getKey(), member.getValue(), e);\n-                }\n+                changeMembership(member.getValue(), result.getEntity().getKey(), PatchOp.add);\n             }\n         });\n         // remove unconfirmed members\n-        beforeMembers.stream().filter(member -> !afterMembers.contains(member)).forEach(user -> {\n-            UserUR req = new UserUR.Builder(user).\n-                    membership(new MembershipUR.Builder(result.getEntity().getKey()).\n-                            operation(PatchOperation.DELETE).build()).\n-                    build();\n-            try {\n-                userLogic.update(req, false);\n-            } catch (Exception e) {\n-                LOG.error(\"While removing membership of {} from {}\", result.getEntity().getKey(), user, e);\n-            }\n-        });\n+        beforeMembers.stream().filter(member -> !afterMembers.contains(member)).forEach(user -> changeMembership(\n+                user, result.getEntity().getKey(), PatchOp.remove));\n \n         return updateResponse(\n                 result.getEntity().getKey(),","previous_filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java"},{"sha":"e33ff6c50d49be732000287671bfb159f2bf9906","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/SCIMServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FSCIMServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FSCIMServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FSCIMServiceImpl.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.ext.scimv2.api.data.ServiceProviderConfig;\n import org.apache.syncope.ext.scimv2.api.service.SCIMService;\n \n-public class SCIMServiceImpl extends AbstractService<SCIMResource> implements SCIMService {\n+public class SCIMServiceImpl extends AbstractSCIMService<SCIMResource> implements SCIMService {\n \n     protected final SCIMLogic scimLogic;\n "},{"sha":"66a85f13ab4d3f2cc75406f240c1e68d79480796","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/SCIMUserServiceImpl.java","status":"renamed","additions":39,"deletions":6,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FSCIMUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FSCIMUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FSCIMUserServiceImpl.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -21,11 +21,16 @@\n import jakarta.ws.rs.core.Response;\n import jakarta.ws.rs.core.Response.ResponseBuilder;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.core.logic.GroupLogic;\n import org.apache.syncope.core.logic.SCIMDataBinder;\n import org.apache.syncope.core.logic.UserLogic;\n@@ -34,16 +39,17 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.ext.scimv2.api.BadRequestException;\n import org.apache.syncope.ext.scimv2.api.data.ListResponse;\n+import org.apache.syncope.ext.scimv2.api.data.SCIMPatchOp;\n import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;\n import org.apache.syncope.ext.scimv2.api.data.SCIMUser;\n-import org.apache.syncope.ext.scimv2.api.service.UserService;\n+import org.apache.syncope.ext.scimv2.api.service.SCIMUserService;\n import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n import org.apache.syncope.ext.scimv2.api.type.SortOrder;\n \n-public class UserServiceImpl extends AbstractService<SCIMUser> implements UserService {\n+public class SCIMUserServiceImpl extends AbstractSCIMService<SCIMUser> implements SCIMUserService {\n \n-    public UserServiceImpl(\n+    public SCIMUserServiceImpl(\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n             final UserLogic userLogic,\n@@ -79,8 +85,25 @@ public SCIMUser get(final String id,\n     }\n \n     @Override\n-    public Response update(final String id) {\n-        return Response.status(Response.Status.NOT_IMPLEMENTED).build();\n+    public Response update(final String id, final SCIMPatchOp patch) {\n+        ResponseBuilder builder = checkETag(Resource.User, id);\n+        if (builder != null) {\n+            return builder.build();\n+        }\n+\n+        patch.getOperations().forEach(op -> {\n+            Pair<UserUR, StatusR> update = binder.toUserUpdate(userLogic.read(id), op);\n+            userLogic.update(update.getLeft(), false);\n+            Optional.ofNullable(update.getRight()).ifPresent(statusR -> userLogic.status(statusR, false));\n+        });\n+\n+        return updateResponse(\n+                id,\n+                binder.toSCIMUser(\n+                        userLogic.read(id),\n+                        uriInfo.getAbsolutePathBuilder().path(id).build().toASCIIString(),\n+                        List.of(),\n+                        List.of()));\n     }\n \n     @Override\n@@ -94,8 +117,18 @@ public Response replace(final String id, final SCIMUser user) {\n             return builder.build();\n         }\n \n+        UserTO before = userLogic.read(id);\n+\n         ProvisioningResult<UserTO> result = userLogic.update(\n-                AnyOperations.diff(binder.toUserTO(user), userLogic.read(id), false), false);\n+                AnyOperations.diff(binder.toUserTO(user, true), before, false), false);\n+\n+        if (before.isSuspended() == user.isActive()) {\n+            StatusR statusR = new StatusR.Builder().key(before.getKey()).\n+                    type(user.isActive() ? StatusRType.REACTIVATE : StatusRType.SUSPEND).\n+                    build();\n+            userLogic.status(statusR, false);\n+        }\n+\n         return updateResponse(\n                 result.getEntity().getKey(),\n                 binder.toSCIMUser(","previous_filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java"},{"sha":"ebbb8530cc747f839a1efff905fd2626a2e93cdd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SCIMITCase.java","status":"modified","additions":251,"deletions":24,"changes":275,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -20,6 +20,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -31,6 +32,7 @@\n import com.fasterxml.jackson.databind.node.ArrayNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.jakarta.rs.json.JacksonJsonProvider;\n+import jakarta.ws.rs.HttpMethod;\n import jakarta.ws.rs.core.GenericType;\n import jakarta.ws.rs.core.HttpHeaders;\n import jakarta.ws.rs.core.Response;\n@@ -44,6 +46,7 @@\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.common.lib.scim.SCIMComplexConf;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.lib.scim.SCIMGroupConf;\n import org.apache.syncope.common.lib.scim.SCIMUserConf;\n import org.apache.syncope.common.lib.scim.SCIMUserNameConf;\n import org.apache.syncope.common.lib.scim.types.EmailCanonicalType;\n@@ -78,8 +81,14 @@ public class SCIMITCase extends AbstractITCase {\n \n     static {\n         CONF = new SCIMConf();\n+\n+        CONF.setGroupConf(new SCIMGroupConf());\n+\n+        CONF.getGroupConf().setExternalId(\"originalName\");\n+\n         CONF.setUserConf(new SCIMUserConf());\n \n+        CONF.getUserConf().setNickName(\"ctype\");\n         CONF.getUserConf().setDisplayName(\"cn\");\n \n         CONF.getUserConf().setName(new SCIMUserNameConf());\n@@ -97,6 +106,29 @@ public class SCIMITCase extends AbstractITCase {\n         CONF.getUserConf().getEmails().add(email);\n     }\n \n+    private static SCIMUser getSampleUser(final String username) {\n+        SCIMUser user = new SCIMUser(null, List.of(Resource.User.schema()), null, username, true);\n+        user.setPassword(\"password123\");\n+\n+        SCIMUserName name = new SCIMUserName();\n+        name.setGivenName(username);\n+        name.setFamilyName(\"surname\");\n+        name.setFormatted(username);\n+        user.setName(name);\n+\n+        SCIMComplexValue userId = new SCIMComplexValue();\n+        userId.setType(EmailCanonicalType.work.name());\n+        userId.setValue(username + \"@syncope.apache.org\");\n+        user.getEmails().add(userId);\n+\n+        SCIMComplexValue email = new SCIMComplexValue();\n+        email.setType(EmailCanonicalType.home.name());\n+        email.setValue(username + \"@syncope.apache.org\");\n+        user.getEmails().add(email);\n+\n+        return user;\n+    }\n+\n     @BeforeAll\n     public static void isSCIMAvailable() {\n         if (ENABLED == null) {\n@@ -132,7 +164,7 @@ public void serviceProviderConfig() {\n \n         ServiceProviderConfig serviceProviderConfig = response.readEntity(ServiceProviderConfig.class);\n         assertNotNull(serviceProviderConfig);\n-        assertFalse(serviceProviderConfig.getPatch().isSupported());\n+        assertTrue(serviceProviderConfig.getPatch().isSupported());\n         assertFalse(serviceProviderConfig.getBulk().isSupported());\n         assertTrue(serviceProviderConfig.getChangePassword().isSupported());\n         assertTrue(serviceProviderConfig.getEtag().isSupported());\n@@ -330,29 +362,6 @@ public void search() {\n         assertEquals(newUser.getUsername(), newSCIMUser.getUserName());\n     }\n \n-    private static SCIMUser getSampleUser(final String username) {\n-        SCIMUser user = new SCIMUser(null, List.of(Resource.User.schema()), null, username, true);\n-        user.setPassword(\"password123\");\n-\n-        SCIMUserName name = new SCIMUserName();\n-        name.setGivenName(username);\n-        name.setFamilyName(\"surname\");\n-        name.setFormatted(username);\n-        user.setName(name);\n-\n-        SCIMComplexValue userId = new SCIMComplexValue();\n-        userId.setType(EmailCanonicalType.work.name());\n-        userId.setValue(username + \"@syncope.apache.org\");\n-        user.getEmails().add(userId);\n-\n-        SCIMComplexValue email = new SCIMComplexValue();\n-        email.setType(EmailCanonicalType.home.name());\n-        email.setValue(username + \"@syncope.apache.org\");\n-        user.getEmails().add(email);\n-\n-        return user;\n-    }\n-\n     @Test\n     public void createUser() throws JsonProcessingException {\n         SCIM_CONF_SERVICE.set(CONF);\n@@ -381,6 +390,143 @@ public void createUser() throws JsonProcessingException {\n         assertEquals(user.getGroups().get(0).getValue(), userTO.getMemberships().get(0).getGroupKey());\n     }\n \n+    @Test\n+    public void updateUser() {\n+        SCIM_CONF_SERVICE.set(CONF);\n+\n+        SCIMUser user = getSampleUser(UUID.randomUUID().toString());\n+\n+        Response response = webClient().path(\"Users\").post(user);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+\n+        user = response.readEntity(SCIMUser.class);\n+        assertNotNull(user.getId());\n+        assertNull(user.getNickName());\n+        assertTrue(user.isActive());\n+\n+        // 1. update no path, add value and suspend\n+        String body =\n+                \"{\"\n+                + \"  \\\"schemas\\\":[\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"  \\\"Operations\\\": [\"\n+                + \"    {\"\n+                + \"      \\\"op\\\": \\\"add\\\",\"\n+                + \"      \\\"value\\\": {\"\n+                + \"        \\\"nickName\\\": \\\"\" + user.getUserName() + \"\\\",\"\n+                + \"        \\\"active\\\": false\"\n+                + \"      }\"\n+                + \"    }\"\n+                + \"  ]\"\n+                + \"}\";\n+        response = webClient().path(\"Users\").path(user.getId()).invoke(HttpMethod.PATCH, body);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        user = response.readEntity(SCIMUser.class);\n+        assertEquals(user.getUserName(), user.getNickName());\n+        assertFalse(user.isActive());\n+\n+        // 2. update with path, reactivate\n+        body =\n+                \"{\"\n+                + \"\\\"schemas\\\":[\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"\\\"Operations\\\":[{\"\n+                + \"\\\"op\\\":\\\"Replace\\\",\"\n+                + \"\\\"path\\\":\\\"active\\\",\"\n+                + \"\\\"value\\\":true\"\n+                + \"}]\"\n+                + \"}\";\n+        response = webClient().path(\"Users\").path(user.getId()).invoke(HttpMethod.PATCH, body);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        user = response.readEntity(SCIMUser.class);\n+        assertTrue(user.isActive());\n+\n+        // 3. update with path, replace simple value\n+        assertNotEquals(\"newSurname\", user.getName().getFamilyName());\n+        body =\n+                \"{\"\n+                + \"\\\"schemas\\\":[\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"\\\"Operations\\\":[\"\n+                + \"{\"\n+                + \"\\\"op\\\":\\\"Replace\\\",\"\n+                + \"\\\"path\\\":\\\"name.familyName\\\",\"\n+                + \"\\\"value\\\":\\\"newSurname\\\"\"\n+                + \"},\"\n+                + \"{\"\n+                + \"\\\"op\\\":\\\"remove\\\",\"\n+                + \"\\\"path\\\":\\\"nickName\\\"\"\n+                + \"}\"\n+                + \"]\"\n+                + \"}\";\n+        response = webClient().path(\"Users\").path(user.getId()).invoke(HttpMethod.PATCH, body);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        user = response.readEntity(SCIMUser.class);\n+        assertEquals(\"newSurname\", user.getName().getFamilyName());\n+        assertNull(user.getNickName());\n+\n+        // 4. update with path, replace complex value\n+        String newMail = UUID.randomUUID().toString() + \"@syncope.apache.org\";\n+        assertNotEquals(\n+                newMail,\n+                user.getEmails().stream().filter(v -> \"work\".equals(v.getType())).findFirst().get().getValue());\n+        body =\n+                \"{\"\n+                + \"     \\\"schemas\\\": [\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"     \\\"Operations\\\": [{\"\n+                + \"       \\\"op\\\":\\\"replace\\\",\"\n+                + \"       \\\"path\\\":\\\"emails[type eq \\\\\\\"work\\\\\\\"]\\\",\"\n+                + \"       \\\"value\\\":\"\n+                + \"       {\"\n+                + \"         \\\"type\\\": \\\"work\\\",\"\n+                + \"         \\\"value\\\": \\\"\" + newMail + \"\\\",\"\n+                + \"         \\\"primary\\\": true\"\n+                + \"       }\"\n+                + \"     }]\"\n+                + \"   }\";\n+        response = webClient().path(\"Users\").path(user.getId()).invoke(HttpMethod.PATCH, body);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        user = response.readEntity(SCIMUser.class);\n+        assertEquals(\n+                newMail,\n+                user.getEmails().stream().filter(v -> \"work\".equals(v.getType())).findFirst().get().getValue());\n+\n+        // 5. update with path, filter and sub\n+        newMail = \"verycomplex\" + UUID.randomUUID().toString() + \"@syncope.apache.org\";\n+        body =\n+                \"{\"\n+                + \"     \\\"schemas\\\": [\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"     \\\"Operations\\\": [{\"\n+                + \"       \\\"op\\\":\\\"replace\\\",\"\n+                + \"       \\\"path\\\":\\\"emails[type eq \\\\\\\"work\\\\\\\"].value\\\",\"\n+                + \"       \\\"value\\\":\\\"\" + newMail + \"\\\"\"\n+                + \"     }]\"\n+                + \"   }\";\n+        response = webClient().path(\"Users\").path(user.getId()).invoke(HttpMethod.PATCH, body);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        user = response.readEntity(SCIMUser.class);\n+        assertEquals(\n+                newMail,\n+                user.getEmails().stream().filter(v -> \"work\".equals(v.getType())).findFirst().get().getValue());\n+\n+        // 6. remove with path and filter\n+        body =\n+                \"{\"\n+                + \"     \\\"schemas\\\": [\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"     \\\"Operations\\\": [{\"\n+                + \"       \\\"op\\\":\\\"remove\\\",\"\n+                + \"       \\\"path\\\":\\\"emails[type eq \\\\\\\"home\\\\\\\"]\\\"\"\n+                + \"     }]\"\n+                + \"   }\";\n+        response = webClient().path(\"Users\").path(user.getId()).invoke(HttpMethod.PATCH, body);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        user = response.readEntity(SCIMUser.class);\n+        assertTrue(user.getEmails().stream().noneMatch(v -> \"home\".equals(v.getType())));\n+    }\n+\n     @Test\n     public void replaceUser() {\n         SCIM_CONF_SERVICE.set(CONF);\n@@ -456,6 +602,87 @@ public void createGroup() {\n         assertEquals(ErrorType.uniqueness, error.getScimType());\n     }\n \n+    @Test\n+    public void updateGroup() {\n+        SCIM_CONF_SERVICE.set(CONF);\n+\n+        SCIMGroup group = new SCIMGroup(null, null, UUID.randomUUID().toString());\n+        group.getMembers().add(new Member(\"74cd8ece-715a-44a4-a736-e17b46c4e7e6\", null, null));\n+        group.getMembers().add(new Member(\"1417acbe-cbf6-4277-9372-e75e04f97000\", null, null));\n+        Response response = webClient().path(\"Groups\").post(group);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+\n+        group = response.readEntity(SCIMGroup.class);\n+        assertNotNull(group.getId());\n+        assertNull(group.getExternalId());\n+        assertEquals(2, group.getMembers().size());\n+\n+        // 1. update with path, add value\n+        String body =\n+                \"{\"\n+                + \"\\\"schemas\\\":[\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"\\\"Operations\\\":[{\"\n+                + \"\\\"op\\\":\\\"Add\\\",\"\n+                + \"\\\"path\\\":\\\"externalId\\\",\"\n+                + \"\\\"value\\\":\\\"\" + group.getId() + \"\\\"\"\n+                + \"}]\"\n+                + \"}\";\n+        response = webClient().path(\"Groups\").path(group.getId()).invoke(HttpMethod.PATCH, body);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        group = response.readEntity(SCIMGroup.class);\n+        assertEquals(group.getId(), group.getExternalId());\n+\n+        // 2. add member, remove member, remove attribute\n+        body =\n+                \"{\"\n+                + \"\\\"schemas\\\":[\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"\\\"Operations\\\":[\"\n+                + \"{\"\n+                + \"\\\"op\\\":\\\"Add\\\",\"\n+                + \"\\\"path\\\":\\\"members\\\",\"\n+                + \"\\\"value\\\":[{\"\n+                + \"\\\"value\\\":\\\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\\\"}]\"\n+                + \"},\"\n+                + \"{\"\n+                + \"\\\"op\\\":\\\"remove\\\",\"\n+                + \"\\\"path\\\":\\\"members[value eq \\\\\\\"74cd8ece-715a-44a4-a736-e17b46c4e7e6\\\\\\\"]\\\"\"\n+                + \"},\"\n+                + \"{\"\n+                + \"\\\"op\\\":\\\"remove\\\",\"\n+                + \"\\\"path\\\":\\\"externalId\\\"\"\n+                + \"}\"\n+                + \"]\"\n+                + \"}\";\n+        response = webClient().path(\"Groups\").path(group.getId()).invoke(HttpMethod.PATCH, body);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        group = response.readEntity(SCIMGroup.class);\n+        assertEquals(2, group.getMembers().size());\n+        assertTrue(group.getMembers().stream().\n+                anyMatch(m -> \"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\".equals(m.getValue())));\n+        assertTrue(group.getMembers().stream().\n+                anyMatch(m -> \"1417acbe-cbf6-4277-9372-e75e04f97000\".equals(m.getValue())));\n+        assertNull(group.getExternalId());\n+\n+        // 3. remove all members\n+        body =\n+                \"{\"\n+                + \"\\\"schemas\\\":[\\\"urn:ietf:params:scim:api:messages:2.0:PatchOp\\\"],\"\n+                + \"\\\"Operations\\\":[\"\n+                + \"{\"\n+                + \"\\\"op\\\":\\\"remove\\\",\"\n+                + \"\\\"path\\\":\\\"members\\\"\"\n+                + \"}\"\n+                + \"]\"\n+                + \"}\";\n+        response = webClient().path(\"Groups\").path(group.getId()).invoke(HttpMethod.PATCH, body);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        group = response.readEntity(SCIMGroup.class);\n+        assertTrue(group.getMembers().isEmpty());\n+    }\n+\n     @Test\n     public void replaceGroup() {\n         SCIMGroup group = new SCIMGroup(null, null, UUID.randomUUID().toString());"},{"sha":"600858cb0f0b247d23ffddae53e61eaa218ad2db","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0b62f3ca0e9c72f4178b3567f3be2b30072547d8/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=0b62f3ca0e9c72f4178b3567f3be2b30072547d8","patch":"@@ -1672,7 +1672,7 @@ under the License.\n         <plugin>\n           <groupId>io.fabric8</groupId>\n           <artifactId>docker-maven-plugin</artifactId>\n-          <version>0.42.0</version>\n+          <version>0.42.1</version>\n         </plugin>\n \n         <plugin>\n@@ -1721,7 +1721,7 @@ under the License.\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-enforcer-plugin</artifactId>\n-        <version>3.2.1</version>\n+        <version>3.3.0</version>\n         <executions>\n           <execution>\n             <id>default-cli</id>"}]}