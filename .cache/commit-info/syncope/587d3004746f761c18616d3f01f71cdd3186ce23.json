{"sha":"587d3004746f761c18616d3f01f71cdd3186ce23","node_id":"C_kwDOJfYA1toAKDU4N2QzMDA0NzQ2Zjc2MWMxODYxNmQzZjAxZjcxY2RkMzE4NmNlMjM","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-11-23T10:49:38Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-11-23T10:49:38Z"},"message":"Consolidating labels into SyncopeSchema to save some joins (#394)","tree":{"sha":"eb951ca56ef4736caab06faa5a4a445d52566532","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/eb951ca56ef4736caab06faa5a4a445d52566532"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/587d3004746f761c18616d3f01f71cdd3186ce23","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjffrCCRBK7hj4Ov3rIwAAop4IAGFkVSoR9v5EpDzpkqH4gEpK\nOXhT2zXFgRNWbvZstxTm2yX9Hv8OzoYL5MqehslSorLPnb+GHBSJew3EFQJVMppl\nIYbH//jZuJ2P3YiS2D93ysyow4jjLys+GFWYGEftc5RRRAq+fS4LFfBYthJdneRI\nTs1ZE+LUBXozMPlAb6xy2Kbv4UdEYuzfXvPtHcDHplEu2XnD+vX2UZdNGFhFeZdk\nxbPuJGL4UE0FjZ2VyebmVAhCKwE/o4nn6AhyvslNzIjw87fvMXf4Tn+D4AZzGRmx\nPm1+EEAhJcyUzf9+rLjYyFZ0M7mA+RMo62/EKEe/SGSDOkBwXLkV83MmJWOPmtY=\n=C8Oj\n-----END PGP SIGNATURE-----\n","payload":"tree eb951ca56ef4736caab06faa5a4a445d52566532\nparent 43cdad3b52ff54f146b75a29be0d2421b4caa33f\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1669200578 +0100\ncommitter GitHub <noreply@github.com> 1669200578 +0100\n\nConsolidating labels into SyncopeSchema to save some joins (#394)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/587d3004746f761c18616d3f01f71cdd3186ce23","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/587d3004746f761c18616d3f01f71cdd3186ce23","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/587d3004746f761c18616d3f01f71cdd3186ce23/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"43cdad3b52ff54f146b75a29be0d2421b4caa33f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/43cdad3b52ff54f146b75a29be0d2421b4caa33f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/43cdad3b52ff54f146b75a29be0d2421b4caa33f"}],"stats":{"total":455,"additions":169,"deletions":286},"files":[{"sha":"b988657e7176c60ee0b475777da21355d7eb1f50","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AccessPolicyTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -45,7 +45,8 @@ public class AccessPolicyTO extends PolicyTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.policy.AccessPolicyTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.policy.AccessPolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"4d37215fdecc8d1ec0be0749259e3a22266914a2","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AttrReleasePolicyTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAttrReleasePolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAttrReleasePolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAttrReleasePolicyTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -35,7 +35,8 @@ public class AttrReleasePolicyTO extends PolicyTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.policy.AttrReleasePolicyTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.policy.AttrReleasePolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"1753816fac11d0c4500b2166230607f8cce65277","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AuthPolicyTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -31,7 +31,8 @@ public class AuthPolicyTO extends PolicyTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.policy.AuthPolicyTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.policy.AuthPolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"60589f4e41df21b6c8d7252a8634aa02b61fafac","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/CASSPClientAppTO.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCASSPClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCASSPClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCASSPClientAppTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -24,7 +24,7 @@\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-@Schema(allOf = {ClientAppTO.class})\n+@Schema(allOf = { ClientAppTO.class })\n public class CASSPClientAppTO extends ClientAppTO {\n \n     private static final long serialVersionUID = -5370888503924521351L;\n@@ -41,7 +41,8 @@ public void setServiceId(final String serviceId) {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.client.CASSPTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.client.CASSPTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();\n@@ -60,16 +61,16 @@ public boolean equals(final Object obj) {\n         }\n         CASSPClientAppTO rhs = (CASSPClientAppTO) obj;\n         return new EqualsBuilder()\n-            .appendSuper(super.equals(obj))\n-            .append(this.serviceId, rhs.serviceId)\n-            .isEquals();\n+                .appendSuper(super.equals(obj))\n+                .append(this.serviceId, rhs.serviceId)\n+                .isEquals();\n     }\n \n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder()\n-            .appendSuper(super.hashCode())\n-            .append(this.serviceId)\n-            .toHashCode();\n+                .appendSuper(super.hashCode())\n+                .append(this.serviceId)\n+                .toHashCode();\n     }\n }"},{"sha":"e1daf364a0cadc208542924ef78570d2867d4e7a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/ClientAppTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -63,7 +63,7 @@ public abstract class ClientAppTO implements NamedEntityTO {\n \n     private final List<Attr> properties = new ArrayList<>();\n \n-    @Schema(name = \"_class\", required = true)\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED)\n     public abstract String getDiscriminator();\n \n     public void setDiscriminator(final String discriminator) {"},{"sha":"a40eae7aac3ec587da3e884a05069909bea1fa7a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/OIDCRPClientAppTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPClientAppTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -57,7 +57,8 @@ public class OIDCRPClientAppTO extends ClientAppTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.client.OIDCRPTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.client.OIDCRPTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"7887bbcd213c94abcbc4fe06e901b7115fe7a425","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2SPClientAppTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPClientAppTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -74,7 +74,8 @@ public class SAML2SPClientAppTO extends ClientAppTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.client.SAML2SPTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.client.SAML2SPTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"4a598c628beb8a5cc2a1e479cd782af0eb336ea1","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/policy/PropagationPolicyTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPropagationPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPropagationPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPropagationPolicyTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -40,7 +40,8 @@ public class PropagationPolicyTO extends PolicyTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.policy.PropagationPolicyTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.policy.PropagationPolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"daf2702656e131eea13244108d3eb75dbc75a1f8","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/policy/ProvisioningPolicyTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FProvisioningPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FProvisioningPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FProvisioningPolicyTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -39,7 +39,8 @@ public abstract class ProvisioningPolicyTO extends PolicyTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.policy.ProvisioningPolicyTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.policy.ProvisioningPolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"6fec12716c4745bda5bb426388ef859fcb6150b8","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicyTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -29,7 +29,8 @@ public class PullPolicyTO extends ProvisioningPolicyTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.policy.PullPolicyTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.policy.PullPolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"fc52b71b0b61bfb565e2e1b99d75f456bb87d090","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/policy/PushPolicyTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicyTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -29,7 +29,8 @@ public class PushPolicyTO extends ProvisioningPolicyTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.policy.PushPolicyTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.policy.PushPolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"e3c1b273d6aa9b590b775be1b8659c5d04cb06af","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountPolicyTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -40,7 +40,8 @@ public class AccountPolicyTO extends PolicyTO implements ComposablePolicy {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.policy.AccountPolicyTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.policy.AccountPolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"2dd3a9b799bc4a869b548437500effd78ac1310d","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordPolicyTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -40,7 +40,8 @@ public class PasswordPolicyTO extends PolicyTO implements ComposablePolicy {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.policy.PasswordPolicyTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.policy.PasswordPolicyTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"738904cf86e37c03234539e60a8479c09469ab70","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/PolicyTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -50,7 +50,7 @@ public abstract class PolicyTO implements NamedEntityTO {\n \n     private final List<String> usedByRealms = new ArrayList<>();\n \n-    @Schema(name = \"_class\", required = true)\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED)\n     public abstract String getDiscriminator();\n \n     public void setDiscriminator(final String discriminator) {"},{"sha":"e577607e2e3be3836df3f1005ade564399c8aba6","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/AnyCR.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyCR.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -151,7 +151,7 @@ public R build() {\n \n     private final Set<String> resources = new HashSet<>();\n \n-    @Schema(name = \"_class\", required = true)\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED)\n     public abstract String getDiscriminator();\n \n     public void setDiscriminator(final String discriminator) {"},{"sha":"701ed11b7176354fc0cc042371397f6cdd6cc7ae","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/AnyObjectCR.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectCR.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -94,7 +94,8 @@ public Builder memberships(final Collection<MembershipTO> memberships) {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.request.AnyObjectCR\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.request.AnyObjectCR\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"6064c858477b88aa41aa6ab8dfeb654d6d2186e9","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/AnyObjectUR.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -89,7 +89,8 @@ public Builder memberships(final Collection<MembershipUR> memberships) {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.request.AnyObjectUR\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.request.AnyObjectUR\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"1050b4314eef181e5d923cd0262b05f64a6af239","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/AnyUR.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -158,7 +158,7 @@ public R build() {\n \n     private final Set<StringPatchItem> resources = new HashSet<>();\n \n-    @Schema(name = \"_class\", required = true)\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED)\n     public abstract String getDiscriminator();\n \n     public void setDiscriminator(final String discriminator) {"},{"sha":"bcf529504d806bc69d75b4bdda0bc84a74f18ce3","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/GroupCR.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupCR.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -100,7 +100,8 @@ public Builder typeExtensions(final Collection<TypeExtensionTO> typeExtensions)\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.request.GroupCR\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.request.GroupCR\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"147c3cb04844dd42ca3d9457280650ebec0a6ba2","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/GroupUR.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupUR.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -109,7 +109,8 @@ public Builder typeExtensions(final Collection<TypeExtensionTO> typeExtensions)\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.request.GroupUR\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.request.GroupUR\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"fb141c16c6148a8d6315d244a90067e205063758","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/UserCR.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -163,7 +163,8 @@ public Builder linkedAccounts(final Collection<LinkedAccountTO> linkedAccounts)\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.request.UserCR\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.request.UserCR\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"6bda4c36a185d5ad3690a20aabe51668272ad502","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/UserUR.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -137,7 +137,8 @@ public Builder roles(final Collection<StringPatchItem> roles) {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.request.UserUR\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.request.UserUR\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"49750866011082652be45c854b3cd6ca1184b395","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -44,7 +44,8 @@ public class AnyObjectTO extends AnyTO implements GroupableRelatableTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.AnyObjectTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.AnyObjectTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"859766ecb3492e4764c31c4e71d894dc41295959","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -92,7 +92,7 @@ public abstract class AnyTO implements EntityTO, RealmMember {\n \n     private final Set<String> resources = new TreeSet<>();\n \n-    @Schema(name = \"_class\", required = true)\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED)\n     public abstract String getDiscriminator();\n \n     public void setDiscriminator(final String discriminator) {"},{"sha":"08eb254dc3e63bb3596e02f0cd6687f2a4763a5f","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/DerSchemaTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDerSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDerSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDerSchemaTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -33,7 +33,8 @@ public class DerSchemaTO extends SchemaTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.DerSchemaTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.DerSchemaTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"71c11069327234402283198780a59c50e4831bb7","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -59,7 +59,8 @@ public class GroupTO extends AnyTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.GroupTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.GroupTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"8f9277851c71d1bfb31d3825f6d01d1b8592450f","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/MacroTaskTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMacroTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMacroTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMacroTaskTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -43,7 +43,8 @@ public class MacroTaskTO extends SchedTaskTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.MacroTaskTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.MacroTaskTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"bcc36b4ab74bee5d810c9786a0d3ab304753795c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTaskTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTaskTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -56,7 +56,8 @@ public class NotificationTaskTO extends TaskTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.NotificationTaskTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.NotificationTaskTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"4b115ccc5b5c8a8e44cdc2c2d7cc3df9c5e8a63e","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/PlainSchemaTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPlainSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPlainSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPlainSchemaTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -58,7 +58,8 @@ public class PlainSchemaTO extends SchemaTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.PlainSchemaTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.PlainSchemaTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"e90bfc65e508175f9e5f537293bf95022d7618cf","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationTaskTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -53,7 +53,8 @@ public class PropagationTaskTO extends TaskTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.PropagationTaskTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.PropagationTaskTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"d393512e064a2ca76e1962698791f48766cbeda2","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/PullTaskTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPullTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPullTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPullTaskTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -44,7 +44,8 @@ public class PullTaskTO extends ProvisioningTaskTO implements TemplatableTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.PullTaskTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.PullTaskTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"abf91f65fc8b0fb8e0252b64cd88ab4a47628ab9","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/PushTaskTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPushTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPushTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPushTaskTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -38,7 +38,8 @@ public class PushTaskTO extends ProvisioningTaskTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.PushTaskTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.PushTaskTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"cb3e47a6584b7da46a0092d3dd9f6d6a5b47f413","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/SchedTaskTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -50,7 +50,8 @@ public class SchedTaskTO extends TaskTO implements NamedEntityTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.SchedTaskTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.SchedTaskTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"7d32b5d7537eb9aa3beb5a3c81cabfb39afb6656","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/SchemaTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchemaTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -48,7 +48,7 @@ public abstract class SchemaTO implements EntityTO {\n \n     private final Map<Locale, String> labels = new HashMap<>();\n \n-    @Schema(name = \"_class\", required = true)\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED)\n     public abstract String getDiscriminator();\n \n     public void setDiscriminator(final String discriminator) {"},{"sha":"baf9b86f3edbd4e40e1dbff3ef64039db49fbd92","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/TaskTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTaskTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -53,7 +53,7 @@ public abstract class TaskTO extends AbstractStartEndBean implements EntityTO {\n \n     private final List<ExecTO> executions = new ArrayList<>();\n \n-    @Schema(name = \"_class\", required = true)\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED)\n     public abstract String getDiscriminator();\n \n     public void setDiscriminator(final String discriminator) {"},{"sha":"776fd5e019fda9bf67f8b7679ec1450864b9b8cc","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -80,7 +80,8 @@ public class UserTO extends AnyTO implements GroupableRelatableTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.UserTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.UserTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"79723119b410116f0c15cdccb58889c7955111db","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/VirSchemaTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FVirSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FVirSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FVirSchemaTO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -39,7 +39,8 @@ public class VirSchemaTO extends SchemaTO {\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n-    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.VirSchemaTO\")\n+    @Schema(name = \"_class\", requiredMode = Schema.RequiredMode.REQUIRED,\n+            example = \"org.apache.syncope.common.lib.to.VirSchemaTO\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();"},{"sha":"531b7e9ff4248f9275deda2974d39d6f6f1240a9","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":21,"deletions":30,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -113,19 +113,16 @@ public <T extends SchemaTO> T create(final SchemaType schemaType, final T schema\n         T created;\n         switch (schemaType) {\n             case VIRTUAL:\n-                VirSchema virSchema = virSchemaDAO.save(binder.create((VirSchemaTO) schemaTO));\n-                created = (T) binder.getVirSchemaTO(virSchema.getKey());\n+                created = (T) binder.getVirSchemaTO(binder.create((VirSchemaTO) schemaTO).getKey());\n                 break;\n \n             case DERIVED:\n-                DerSchema derSchema = derSchemaDAO.save(binder.create((DerSchemaTO) schemaTO));\n-                created = (T) binder.getDerSchemaTO(derSchema.getKey());\n+                created = (T) binder.getDerSchemaTO(binder.create((DerSchemaTO) schemaTO).getKey());\n                 break;\n \n             case PLAIN:\n             default:\n-                PlainSchema plainSchema = plainSchemaDAO.save(binder.create((PlainSchemaTO) schemaTO));\n-                created = (T) binder.getPlainSchemaTO(plainSchema.getKey());\n+                created = (T) binder.getPlainSchemaTO(binder.create((PlainSchemaTO) schemaTO).getKey());\n         }\n         return created;\n     }\n@@ -175,28 +172,28 @@ public <T extends SchemaTO> List<T> search(\n         switch (schemaType) {\n             case VIRTUAL:\n                 result = (classes.isEmpty()\n-                        ? keyword == null\n-                                ? virSchemaDAO.findAll()\n-                                : virSchemaDAO.findByKeyword(keyword)\n+                        ? Optional.ofNullable(keyword).\n+                                map(k -> virSchemaDAO.findByKeyword(k)).\n+                                orElseGet(() -> virSchemaDAO.findAll())\n                         : virSchemaDAO.findByAnyTypeClasses(classes)).stream().\n                         map(schema -> (T) binder.getVirSchemaTO(schema.getKey())).collect(Collectors.toList());\n                 break;\n \n             case DERIVED:\n                 result = (classes.isEmpty()\n-                        ? keyword == null\n-                                ? derSchemaDAO.findAll()\n-                                : derSchemaDAO.findByKeyword(keyword)\n+                        ? Optional.ofNullable(keyword).\n+                                map(k -> derSchemaDAO.findByKeyword(k)).\n+                                orElseGet(() -> derSchemaDAO.findAll())\n                         : derSchemaDAO.findByAnyTypeClasses(classes)).stream().\n                         map(schema -> (T) binder.getDerSchemaTO(schema.getKey())).collect(Collectors.toList());\n                 break;\n \n             case PLAIN:\n             default:\n                 result = (classes.isEmpty()\n-                        ? keyword == null\n-                                ? plainSchemaDAO.findAll()\n-                                : plainSchemaDAO.findByKeyword(keyword)\n+                        ? Optional.ofNullable(keyword).\n+                                map(k -> plainSchemaDAO.findByKeyword(k)).\n+                                orElseGet(() -> plainSchemaDAO.findAll())\n                         : plainSchemaDAO.findByAnyTypeClasses(classes)).stream().\n                         map(schema -> (T) binder.getPlainSchemaTO(schema.getKey())).collect(Collectors.toList());\n         }\n@@ -233,31 +230,25 @@ public <T extends SchemaTO> void update(final SchemaType schemaType, final T sch\n \n         switch (schemaType) {\n             case VIRTUAL:\n-                VirSchema virSchema = virSchemaDAO.find(schemaTO.getKey());\n-                if (virSchema == null) {\n-                    throw new NotFoundException(\"Virtual Schema '\" + schemaTO.getKey() + '\\'');\n-                }\n+                VirSchema virSchema = Optional.ofNullable(virSchemaDAO.find(schemaTO.getKey())).\n+                        orElseThrow(() -> new NotFoundException(\"Virtual Schema '\" + schemaTO.getKey() + '\\''));\n \n-                virSchemaDAO.save(binder.update((VirSchemaTO) schemaTO, virSchema));\n+                binder.update((VirSchemaTO) schemaTO, virSchema);\n                 break;\n \n             case DERIVED:\n-                DerSchema derSchema = derSchemaDAO.find(schemaTO.getKey());\n-                if (derSchema == null) {\n-                    throw new NotFoundException(\"Derived schema '\" + schemaTO.getKey() + '\\'');\n-                }\n+                DerSchema derSchema = Optional.ofNullable(derSchemaDAO.find(schemaTO.getKey())).\n+                        orElseThrow(() -> new NotFoundException(\"Derived Schema '\" + schemaTO.getKey() + '\\''));\n \n-                derSchemaDAO.save(binder.update((DerSchemaTO) schemaTO, derSchema));\n+                binder.update((DerSchemaTO) schemaTO, derSchema);\n                 break;\n \n             case PLAIN:\n             default:\n-                PlainSchema plainSchema = plainSchemaDAO.find(schemaTO.getKey());\n-                if (plainSchema == null) {\n-                    throw new NotFoundException(\"Schema '\" + schemaTO.getKey() + '\\'');\n-                }\n+                PlainSchema plainSchema = Optional.ofNullable(plainSchemaDAO.find(schemaTO.getKey())).\n+                        orElseThrow(() -> new NotFoundException(\"Plain Schema '\" + schemaTO.getKey() + '\\''));\n \n-                plainSchemaDAO.save(binder.update((PlainSchemaTO) schemaTO, plainSchema));\n+                binder.update((PlainSchemaTO) schemaTO, plainSchema);\n         }\n     }\n "},{"sha":"bb271b1b4a8cd3910abd9dfff173406c2cb30239","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Schema.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSchema.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import java.util.List;\n import java.util.Locale;\n+import java.util.Map;\n import java.util.Optional;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n \n@@ -39,9 +39,7 @@ public interface Schema extends ProvidedKeyEntity {\n \n     boolean isUniqueConstraint();\n \n-    boolean add(SchemaLabel label);\n+    Optional<String> getLabel(Locale locale);\n \n-    Optional<? extends SchemaLabel> getLabel(Locale locale);\n-\n-    List<? extends SchemaLabel> getLabels();\n+    Map<Locale, String> getLabels();\n }"},{"sha":"1ba2f7c5f47d39e32965eaf91c30dcb178521bac","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SchemaLabel.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/43cdad3b52ff54f146b75a29be0d2421b4caa33f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSchemaLabel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/43cdad3b52ff54f146b75a29be0d2421b4caa33f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSchemaLabel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSchemaLabel.java?ref=43cdad3b52ff54f146b75a29be0d2421b4caa33f","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import java.util.Locale;\n-\n-public interface SchemaLabel extends Entity {\n-\n-    Schema getSchema();\n-\n-    void setSchema(Schema schema);\n-\n-    Locale getLocale();\n-\n-    void setLocale(Locale locale);\n-\n-    String getDisplay();\n-\n-    void setDisplay(String display);\n-}"},{"sha":"bd3532be8afb3a089270623d057e0f1db2412b13","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -132,17 +132,12 @@ under the License.\n   <PlainSchema id=\"loginDate\" type=\"Date\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"\n                conversionPattern=\"yyyy-MM-dd\"/>\n-  <SyncopeSchema id=\"firstname\"/>\n+  <SyncopeSchema id=\"firstname\" labels='{\"en\":\"Firstname\",\"it\":\"Nome\",\"pt_BR\":\"Nome\"}'/>\n   <PlainSchema id=\"firstname\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <SchemaLabel id=\"d90f90d0-cf15-407e-bac7-d46a8eb57c05\" schema_id=\"firstname\" locale=\"en\" display=\"Firstname\"/>\n-  <SchemaLabel id=\"a9465ef0-b8b4-4af4-840d-77031a6b54a0\" schema_id=\"firstname\" locale=\"it\" display=\"Nome\"/>\n-  <SchemaLabel id=\"ac8b7383-62df-490d-9364-88dbd3d301aa\" schema_id=\"firstname\" locale=\"pt_BR\" display=\"Nome\"/>\n-  <SyncopeSchema id=\"surname\"/>\n+  <SyncopeSchema id=\"surname\" labels='{\"en\":\"Surname\",\"it\":\"Cognome\"}'/>\n   <PlainSchema id=\"surname\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <SchemaLabel id=\"69712058-162a-4e2a-b07e-c78d82dc286d\" schema_id=\"surname\" locale=\"en\" display=\"Surname\"/>\n-  <SchemaLabel id=\"77e7bbbb-d30c-47e1-b6d2-e0a9e8c11fe2\" schema_id=\"surname\" locale=\"it\" display=\"Cognome\"/>\n   <SyncopeSchema id=\"ctype\"/>\n   <PlainSchema id=\"ctype\" type=\"String\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>"},{"sha":"9bd1393e954f6c11f2d7fcff77ad4e2c8243a129","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -72,8 +72,9 @@ public List<DerSchema> findAll() {\n     }\n \n     @Override\n-    public DerSchema save(final DerSchema derSchema) {\n-        return entityManager().merge(derSchema);\n+    public DerSchema save(final DerSchema schema) {\n+        ((JPADerSchema) schema).map2json();\n+        return entityManager().merge(schema);\n     }\n \n     @Override\n@@ -83,8 +84,6 @@ public void delete(final String key) {\n             return;\n         }\n \n-        schema.getLabels().forEach(label -> label.setSchema(null));\n-\n         resourceDAO.deleteMapping(key);\n \n         if (schema.getAnyTypeClass() != null) {"},{"sha":"6734b99105982ba05c76c83417a475f82946a313","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -126,6 +126,7 @@ public <T extends PlainAttr<?>> boolean hasAttrs(final PlainSchema schema, final\n \n     @Override\n     public PlainSchema save(final PlainSchema schema) {\n+        ((JPAPlainSchema) schema).map2json();\n         return entityManager().merge(schema);\n     }\n \n@@ -143,8 +144,6 @@ public void delete(final String key) {\n             return;\n         }\n \n-        schema.getLabels().forEach(label -> label.setSchema(null));\n-\n         deleteAttrs(schema);\n \n         resourceDAO.deleteMapping(key);"},{"sha":"8c7a124115d990a919782faab53ec1f4201a4a20","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -104,8 +104,9 @@ public List<VirSchema> findAll() {\n     }\n \n     @Override\n-    public VirSchema save(final VirSchema virSchema) {\n-        return entityManager().merge(virSchema);\n+    public VirSchema save(final VirSchema schema) {\n+        ((JPAVirSchema) schema).map2json();\n+        return entityManager().merge(schema);\n     }\n \n     @Override\n@@ -115,8 +116,6 @@ public void delete(final String key) {\n             return;\n         }\n \n-        schema.getLabels().forEach(label -> label.setSchema(null));\n-\n         resourceDAO.deleteMapping(key);\n \n         if (schema.getAnyTypeClass() != null) {"},{"sha":"0e7618981545eebc90e8e8bb7e9305b9eb6eec2b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractSchema.java","status":"modified","additions":49,"deletions":17,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSchema.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -18,21 +18,26 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.ArrayList;\n-import java.util.List;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.HashMap;\n import java.util.Locale;\n+import java.util.Map;\n import java.util.Optional;\n import javax.persistence.Cacheable;\n-import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.Inheritance;\n import javax.persistence.InheritanceType;\n-import javax.persistence.OneToMany;\n+import javax.persistence.Lob;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n import javax.persistence.Table;\n+import javax.persistence.Transient;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n-import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SchemaKeyCheck;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n @Entity\n @Inheritance(strategy = InheritanceType.JOINED)\n@@ -41,26 +46,53 @@\n @SchemaKeyCheck\n public abstract class AbstractSchema extends AbstractProvidedKeyEntity implements Schema {\n \n+    private static final long serialVersionUID = -9222344997225831269L;\n+\n     public static final String TABLE = \"SyncopeSchema\";\n \n-    private static final long serialVersionUID = -9222344997225831269L;\n+    protected static final TypeReference<HashMap<Locale, String>> LABEL_TYPEREF =\n+            new TypeReference<HashMap<Locale, String>>() {\n+    };\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY, mappedBy = \"schema\")\n-    private List<JPASchemaLabel> labels = new ArrayList<>();\n+    @Lob\n+    private String labels;\n+\n+    @Transient\n+    private Map<Locale, String> labelMap = new HashMap<>();\n \n     @Override\n-    public boolean add(final SchemaLabel label) {\n-        checkType(label, JPASchemaLabel.class);\n-        return this.labels.add((JPASchemaLabel) label);\n+    public Optional<String> getLabel(final Locale locale) {\n+        return Optional.ofNullable(labelMap.get(locale));\n     }\n \n     @Override\n-    public Optional<? extends SchemaLabel> getLabel(final Locale locale) {\n-        return labels.stream().filter(label -> label.getLocale().equals(locale)).findFirst();\n+    public Map<Locale, String> getLabels() {\n+        return labelMap;\n     }\n \n-    @Override\n-    public List<? extends SchemaLabel> getLabels() {\n-        return labels;\n+    protected void json2map(final boolean clearFirst) {\n+        if (clearFirst) {\n+            getLabels().clear();\n+        }\n+        if (labels != null) {\n+            getLabels().putAll(POJOHelper.deserialize(labels, LABEL_TYPEREF));\n+        }\n+    }\n+\n+    @PostLoad\n+    public void postLoad() {\n+        json2map(false);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void postSave() {\n+        json2map(true);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void map2json() {\n+        labels = POJOHelper.serialize(getLabels());\n     }\n }"},{"sha":"0c35c840c7de4440e415da34063209d15897151b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -51,7 +51,6 @@\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.SRARoute;\n-import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.am.AttrRepo;\n import org.apache.syncope.core.persistence.api.entity.am.AuthModule;\n@@ -231,8 +230,6 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAConnInstance();\n         } else if (reference.equals(ExternalResource.class)) {\n             result = (E) new JPAExternalResource();\n-        } else if (reference.equals(SchemaLabel.class)) {\n-            result = (E) new JPASchemaLabel();\n         } else if (reference.equals(PlainSchema.class)) {\n             result = (E) new JPAPlainSchema();\n         } else if (reference.equals(APlainAttr.class)) {"},{"sha":"53330b150be2e6e023329e85189e21ddb6166028","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASchemaLabel.java","status":"removed","additions":0,"deletions":78,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/43cdad3b52ff54f146b75a29be0d2421b4caa33f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASchemaLabel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/43cdad3b52ff54f146b75a29be0d2421b4caa33f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASchemaLabel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASchemaLabel.java?ref=43cdad3b52ff54f146b75a29be0d2421b4caa33f","patch":"@@ -1,78 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import java.util.Locale;\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n-import org.apache.syncope.core.persistence.api.entity.Schema;\n-import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n-\n-@Entity\n-@Table(name = JPASchemaLabel.TABLE, uniqueConstraints =\n-        @UniqueConstraint(columnNames = { \"schema_id\", \"locale\" }))\n-public class JPASchemaLabel extends AbstractGeneratedKeyEntity implements SchemaLabel {\n-\n-    public static final String TABLE = \"SchemaLabel\";\n-\n-    private static final long serialVersionUID = -546019894866607764L;\n-\n-    @ManyToOne\n-    private AbstractSchema schema;\n-\n-    @Column(nullable = false)\n-    private Locale locale;\n-\n-    @Column(nullable = false)\n-    private String display;\n-\n-    @Override\n-    public AbstractSchema getSchema() {\n-        return schema;\n-    }\n-\n-    @Override\n-    public void setSchema(final Schema schema) {\n-        checkType(schema, AbstractSchema.class);\n-        this.schema = (AbstractSchema) schema;\n-    }\n-\n-    @Override\n-    public Locale getLocale() {\n-        return locale;\n-    }\n-\n-    @Override\n-    public void setLocale(final Locale locale) {\n-        this.locale = locale;\n-    }\n-\n-    @Override\n-    public String getDisplay() {\n-        return display;\n-    }\n-\n-    @Override\n-    public void setDisplay(final String display) {\n-        this.display = display;\n-    }\n-}"},{"sha":"b993a85f61beb24277940947b5e1f55dca795b00","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -41,10 +41,8 @@\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.apache.syncope.core.persistence.jpa.entity.JPASchemaLabel;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.junit.jupiter.api.AfterAll;\n@@ -167,9 +165,6 @@ public void deleteSurname() {\n         assertFalse(mapItems.isEmpty());\n \n         // check for labels\n-        List<SchemaLabel> labels = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPASchemaLabel.class.getSimpleName() + \" e\", SchemaLabel.class).getResultList();\n-        assertEquals(5, labels.size());\n         assertEquals(2, schema.getLabels().size());\n \n         // delete user schema surname\n@@ -180,10 +175,6 @@ public void deleteSurname() {\n         // check for schema deletion\n         schema = plainSchemaDAO.find(\"surname\");\n         assertNull(schema);\n-\n-        labels = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPASchemaLabel.class.getSimpleName() + \" e\", SchemaLabel.class).getResultList();\n-        assertEquals(3, labels.size());\n     }\n \n     @Test"},{"sha":"2068736e3c4b5d210ac917bde39c5b03af5a4f91","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -307,17 +307,12 @@ under the License.\n   <PlainSchema id=\"loginDate\" type=\"Date\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"\n                conversionPattern=\"yyyy-MM-dd\"/>\n-  <SyncopeSchema id=\"firstname\"/>\n+  <SyncopeSchema id=\"firstname\" labels='{\"en\":\"Firstname\",\"it\":\"Nome\",\"pt_BR\":\"Nome\"}'/>\n   <PlainSchema id=\"firstname\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <SchemaLabel id=\"d90f90d0-cf15-407e-bac7-d46a8eb57c05\" schema_id=\"firstname\" locale=\"en\" display=\"Firstname\"/>\n-  <SchemaLabel id=\"a9465ef0-b8b4-4af4-840d-77031a6b54a0\" schema_id=\"firstname\" locale=\"it\" display=\"Nome\"/>\n-  <SchemaLabel id=\"ac8b7383-62df-490d-9364-88dbd3d301aa\" schema_id=\"firstname\" locale=\"pt_BR\" display=\"Nome\"/>\n-  <SyncopeSchema id=\"surname\"/>\n+  <SyncopeSchema id=\"surname\" labels='{\"en\":\"Surname\",\"it\":\"Cognome\"}'/>\n   <PlainSchema id=\"surname\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <SchemaLabel id=\"69712058-162a-4e2a-b07e-c78d82dc286d\" schema_id=\"surname\" locale=\"en\" display=\"Surname\"/>\n-  <SchemaLabel id=\"77e7bbbb-d30c-47e1-b6d2-e0a9e8c11fe2\" schema_id=\"surname\" locale=\"it\" display=\"Cognome\"/>\n   <SyncopeSchema id=\"ctype\"/>\n   <PlainSchema id=\"ctype\" type=\"String\" anyTypeClass_id=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>"},{"sha":"fc7bcd71db459a5498ff1404caccf1bfcf82d363","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":10,"deletions":39,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -18,14 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.Provision;\n-import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -46,8 +44,6 @@\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.Schema;\n-import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.provisioning.api.data.SchemaDataBinder;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n@@ -98,26 +94,6 @@ public SchemaDataBinderImpl(\n         this.anyUtilsFactory = anyUtilsFactory;\n     }\n \n-    protected <S extends Schema, T extends SchemaTO> void labels(final T src, final S dst) {\n-        src.getLabels().forEach((locale, display) -> {\n-            SchemaLabel label = dst.getLabel(locale).orElse(null);\n-            if (label == null) {\n-                label = entityFactory.newEntity(SchemaLabel.class);\n-                label.setLocale(locale);\n-                label.setSchema(dst);\n-                dst.add(label);\n-            }\n-            label.setDisplay(display);\n-        });\n-\n-        dst.getLabels().removeIf(label -> !src.getLabels().containsKey(label.getLocale()));\n-    }\n-\n-    protected static <S extends Schema, T extends SchemaTO> void labels(final S src, final T dst) {\n-        dst.getLabels().putAll(src.getLabels().stream().\n-                collect(Collectors.toMap(SchemaLabel::getLocale, SchemaLabel::getDisplay)));\n-    }\n-\n     // --------------- PLAIN -----------------\n     protected PlainSchema fill(final PlainSchema schema, final PlainSchemaTO schemaTO) {\n         if (!JexlUtils.isExpressionValid(schemaTO.getMandatoryCondition())) {\n@@ -139,8 +115,9 @@ protected PlainSchema fill(final PlainSchema schema, final PlainSchemaTO schemaT\n         schema.setSecretKey(schemaTO.getSecretKey());\n         schema.setUniqueConstraint(schemaTO.isUniqueConstraint());\n \n-        labels(schemaTO, schema);\n-\n+        schema.getLabels().clear();\n+        schema.getLabels().putAll(schemaTO.getLabels());\n+        \n         if (schemaTO.getValidator() == null) {\n             schema.setValidator(null);\n         } else {\n@@ -232,9 +209,7 @@ public PlainSchemaTO getPlainSchemaTO(final String key) {\n         schemaTO.setReadonly(schema.isReadonly());\n         schemaTO.setSecretKey(schema.getSecretKey());\n         schemaTO.setUniqueConstraint(schema.isUniqueConstraint());\n-\n-        labels(schema, schemaTO);\n-\n+        schemaTO.getLabels().putAll(schema.getLabels());\n         schemaTO.setAnyTypeClass(schema.getAnyTypeClass() == null ? null : schema.getAnyTypeClass().getKey());\n         if (schema.getValidator() != null) {\n             schemaTO.setValidator(schema.getValidator().getKey());\n@@ -267,7 +242,8 @@ protected DerSchema fill(final DerSchema schema, final DerSchemaTO schemaTO) {\n         schema.setKey(schemaTO.getKey());\n         schema.setExpression(schemaTO.getExpression());\n \n-        labels(schemaTO, schema);\n+        schema.getLabels().clear();\n+        schema.getLabels().putAll(schemaTO.getLabels());\n \n         DerSchema merged = derSchemaDAO.save(schema);\n \n@@ -311,11 +287,8 @@ public DerSchemaTO getDerSchemaTO(final String key) {\n         DerSchemaTO schemaTO = new DerSchemaTO();\n         schemaTO.setKey(schema.getKey());\n         schemaTO.setExpression(schema.getExpression());\n-\n-        labels(schema, schemaTO);\n-\n+        schemaTO.getLabels().putAll(schema.getLabels());\n         schemaTO.setAnyTypeClass(schema.getAnyTypeClass() == null ? null : schema.getAnyTypeClass().getKey());\n-\n         return schemaTO;\n     }\n \n@@ -325,7 +298,8 @@ protected VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n         schema.setExtAttrName(schemaTO.getExtAttrName());\n         schema.setReadonly(schemaTO.isReadonly());\n \n-        labels(schemaTO, schema);\n+        schema.getLabels().clear();\n+        schema.getLabels().putAll(schemaTO.getLabels());\n \n         if (schemaTO.getAnyTypeClass() != null\n                 && (schema.getAnyTypeClass() == null\n@@ -390,13 +364,10 @@ public VirSchemaTO getVirSchemaTO(final String key) {\n         schemaTO.setKey(schema.getKey());\n         schemaTO.setExtAttrName(schema.getExtAttrName());\n         schemaTO.setReadonly(schema.isReadonly());\n-\n-        labels(schema, schemaTO);\n-\n+        schemaTO.getLabels().putAll(schema.getLabels());\n         schemaTO.setAnyTypeClass(schema.getAnyTypeClass() == null ? null : schema.getAnyTypeClass().getKey());\n         schemaTO.setResource(schema.getResource().getKey());\n         schemaTO.setAnyType(schema.getAnyType().getKey());\n-\n         return schemaTO;\n     }\n }"},{"sha":"4387cec3937d75596710c5c5712b8d3b04030bd2","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/587d3004746f761c18616d3f01f71cdd3186ce23/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/587d3004746f761c18616d3f01f71cdd3186ce23/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=587d3004746f761c18616d3f01f71cdd3186ce23","patch":"@@ -432,7 +432,7 @@ under the License.\n \n     <slf4j.version>1.7.36</slf4j.version>\n \n-    <elasticsearch.version>8.5.1</elasticsearch.version>\n+    <elasticsearch.version>8.5.2</elasticsearch.version>\n \n     <apacheds.version>2.0.0.AM26</apacheds.version>\n     <apachedirapi.version>2.0.0</apachedirapi.version>"}]}