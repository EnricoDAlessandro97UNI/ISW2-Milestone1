{"sha":"b9fcf293b3fb1df01c81de52ed65d51f25322601","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI5ZmNmMjkzYjNmYjFkZjAxYzgxZGU1MmVkNjVkNTFmMjUzMjI2MDE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-14T17:32:51Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-14T17:32:51Z"},"message":"[SYNCOPE-731] Implementation provided","tree":{"sha":"72357880af00a43f2be690ee207aaa326be124e4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/72357880af00a43f2be690ee207aaa326be124e4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b9fcf293b3fb1df01c81de52ed65d51f25322601","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b9fcf293b3fb1df01c81de52ed65d51f25322601","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b9fcf293b3fb1df01c81de52ed65d51f25322601","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b9fcf293b3fb1df01c81de52ed65d51f25322601/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"cf426dafdbeae10e9a208235e7481d11b121c47b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cf426dafdbeae10e9a208235e7481d11b121c47b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cf426dafdbeae10e9a208235e7481d11b121c47b"}],"stats":{"total":2061,"additions":1192,"deletions":869},"files":[{"sha":"6f023c4cbec8e2250fe4761cfd61e1d6187539e8","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/entitlement/EntitlementResultManager.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementResultManager.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -18,22 +18,21 @@\n  */\n package org.apache.syncope.client.cli.commands.entitlement;\n \n-import java.util.List;\n-import java.util.Set;\n+import java.util.Collection;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n import org.apache.syncope.common.lib.to.RoleTO;\n \n public class EntitlementResultManager extends CommonsResultManager {\n \n-    public void toView(final Set<String> entitlements) {\n+    public void toView(final Collection<String> entitlements) {\n         System.out.println(\"\");\n         for (final String entitlement : entitlements) {\n             System.out.println(\"- \" + entitlement);\n         }\n         System.out.println(\"\");\n     }\n \n-    public void rolesToView(final Set<RoleTO> roles) {\n+    public void rolesToView(final Collection<RoleTO> roles) {\n         System.out.println(\"\");\n         for (final RoleTO role : roles) {\n             printRole(role);\n@@ -48,7 +47,7 @@ private void printRole(final RoleTO roleTO) {\n         System.out.println(\"\");\n     }\n \n-    private void printRealms(final List<String> realms) {\n+    private void printRealms(final Collection<String> realms) {\n         for (final String realm : realms) {\n             System.out.println(\"       - \" + realm);\n         }"},{"sha":"ead55e76d2bb472cbab01e5101da0324cf4371ef","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/entitlement/EntitlementSyncopeOperations.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fentitlement%2FEntitlementSyncopeOperations.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -19,24 +19,29 @@\n package org.apache.syncope.client.cli.commands.entitlement;\n \n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.TreeSet;\n+import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.cli.commands.role.RoleSyncopeOperations;\n import org.apache.syncope.client.cli.commands.user.UserSyncopeOperations;\n import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.SyncopeTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n \n public class EntitlementSyncopeOperations {\n \n+    private final SyncopeTO syncopeTO = SyncopeServices.get(SyncopeService.class).info();\n+\n     private final UserSyncopeOperations userSyncopeOperations = new UserSyncopeOperations();\n \n     private final RoleSyncopeOperations roleSyncopeOperations = new RoleSyncopeOperations();\n \n-    public Set<String> list() {\n-        return Entitlement.values();\n+    public List<String> list() {\n+        return syncopeTO.getEntitlements();\n     }\n-    \n+\n     public boolean exists(final String entitlement) {\n         return list().contains(entitlement);\n     }"},{"sha":"87eb0fe24a9a2093478b7d9add37eaf3ba887158","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.client.console.resources.WorkflowDefPUTResource;\n import org.apache.syncope.client.console.themes.AdminLTE;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.Page;\n import org.apache.wicket.WicketRuntimeException;\n import org.apache.wicket.authroles.authentication.AbstractAuthenticatedWebSession;\n@@ -200,7 +200,7 @@ protected Class<? extends WebPage> getSignInPageClass() {\n     @Override\n     public Class<? extends Page> getHomePage() {\n         return AuthenticatedWebSession.get().isSignedIn()\n-                && SyncopeConsoleSession.get().owns(Entitlement.MUST_CHANGE_PASSWORD)\n+                && SyncopeConsoleSession.get().owns(StandardEntitlement.MUST_CHANGE_PASSWORD)\n                         ? MustChangePassword.class\n                         : Dashboard.class;\n     }"},{"sha":"dbf823bea59365cc99ab371388a7d0dd5381f976","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java","status":"modified","additions":16,"deletions":11,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -28,26 +28,31 @@\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n \n-public class AnyDataProvider extends SortableDataProvider<AnyTO, String> {\n+public class AnyDataProvider<T extends AnyTO> extends SortableDataProvider<T, String> {\n \n     private static final long serialVersionUID = 6267494272884913376L;\n \n-    private final SortableAnyProviderComparator comparator;\n+    private final SortableAnyProviderComparator<T> comparator;\n \n     private String fiql = null;\n \n     private final int paginatorRows;\n \n     private final boolean filtered;\n \n-    private final AbstractAnyRestClient restClient;\n+    private final AbstractAnyRestClient<T> restClient;\n \n     private final String realm;\n \n     private final String type;\n \n-    public AnyDataProvider(final AbstractAnyRestClient restClient, final int paginatorRows, final boolean filtered,\n-            final String realm, final String type) {\n+    public AnyDataProvider(\n+            final AbstractAnyRestClient<T> restClient,\n+            final int paginatorRows,\n+            final boolean filtered,\n+            final String realm,\n+            final String type) {\n+\n         super();\n \n         this.restClient = restClient;\n@@ -57,8 +62,8 @@ public AnyDataProvider(final AbstractAnyRestClient restClient, final int paginat\n         // default sorting\n         setSort(\"key\", SortOrder.ASCENDING);\n \n-        this.comparator = new SortableAnyProviderComparator(this);\n-        \n+        this.comparator = new SortableAnyProviderComparator<>(this);\n+\n         this.realm = realm;\n         this.type = type;\n     }\n@@ -68,14 +73,14 @@ public void setFIQL(final String fiql) {\n     }\n \n     @Override\n-    public Iterator<? extends AnyTO> iterator(final long first, final long count) {\n-        List<? extends AnyTO> result;\n+    public Iterator<T> iterator(final long first, final long count) {\n+        List<T> result;\n \n         final int page = ((int) first / paginatorRows);\n \n         if (filtered) {\n             result = fiql == null\n-                    ? Collections.<AnyTO>emptyList()\n+                    ? Collections.<T>emptyList()\n                     : restClient.search(realm, fiql, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);\n         } else {\n             result = restClient.list(realm, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);\n@@ -101,7 +106,7 @@ public long size() {\n     }\n \n     @Override\n-    public IModel<AnyTO> model(final AnyTO object) {\n+    public IModel<T> model(final T object) {\n         return new CompoundPropertyModel<>(object);\n     }\n }"},{"sha":"668b333257fc662e414a563d2f39ccbfcfde45e8","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/SortableAnyProviderComparator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -29,19 +29,19 @@\n import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n import org.apache.wicket.model.AbstractReadOnlyModel;\n \n-public class SortableAnyProviderComparator extends SortableDataProviderComparator<AnyTO> {\n+public class SortableAnyProviderComparator<T extends AnyTO> extends SortableDataProviderComparator<T> {\n \n     private static final long serialVersionUID = 1775967163571699258L;\n \n     private static final Set<String> INLINE_PROPS = new HashSet<>(Arrays.asList(\n             new String[] { \"key\", \"status\", \"token\", \"username\" }));\n \n-    public SortableAnyProviderComparator(final SortableDataProvider<AnyTO, String> provider) {\n+    public SortableAnyProviderComparator(final SortableDataProvider<T, String> provider) {\n         super(provider);\n     }\n \n     @Override\n-    public int compare(final AnyTO any1, final AnyTO any2) {\n+    public int compare(final T any1, final T any2) {\n         if (INLINE_PROPS.contains(provider.getSort().getProperty())) {\n             return super.compare(any1, any2);\n         }"},{"sha":"6f304f834bfc979766c1785780b9449816f4feff","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/AnyDisplayAttributesModalPage.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAnyDisplayAttributesModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAnyDisplayAttributesModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAnyDisplayAttributesModalPage.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -27,6 +27,7 @@\n \n /**\n  * Modal window with Display user attributes form.\n+ *\n  * @param <T>\n  */\n @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n@@ -41,6 +42,7 @@ public AnyDisplayAttributesModalPage(\n             final PageReference pageRef,\n             final List<String> schemaNames,\n             final List<String> dSchemaNames) {\n+\n         super(modal, pageRef, schemaNames, dSchemaNames);\n     }\n "},{"sha":"16c715169415e298a7b043bf71cf2c8823cd17ee","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.client.console.rest.UserWorkflowRestClient;\n import org.apache.syncope.client.console.topology.Topology;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -68,10 +68,11 @@ public BasePage(final PageParameters parameters) {\n         add(todosContainer);\n         Label todos = new Label(\"todos\", \"0\");\n         todosContainer.add(todos);\n-        if (SyncopeConsoleSession.get().owns(Entitlement.WORKFLOW_FORM_LIST)) {\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_LIST)) {\n             todos.setDefaultModelObject(userWorkflowRestClient.getForms().size());\n         }\n-        MetaDataRoleAuthorizationStrategy.authorize(todosContainer, WebPage.RENDER, Entitlement.WORKFLOW_FORM_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(todosContainer, WebPage.RENDER,\n+                StandardEntitlement.WORKFLOW_FORM_LIST);\n \n         // menu\n         WebMarkupContainer liContainer = new WebMarkupContainer(getLIContainerId(\"dashboard\"));\n@@ -86,13 +87,13 @@ public BasePage(final PageParameters parameters) {\n         liContainer = new WebMarkupContainer(getLIContainerId(\"schemas\"));\n         confULContainer.add(liContainer);\n         BookmarkablePageLink<Page> schemaLink = new BookmarkablePageLink<>(\"schemas\", Schemas.class);\n-//        MetaDataRoleAuthorizationStrategy.authorize(schemaLink, WebPage.ENABLE, Entitlement.SCHEMA_LIST);\n+//        MetaDataRoleAuthorizationStrategy.authorize(schemaLink, WebPage.ENABLE, StandardEntitlement.SCHEMA_LIST);\n         liContainer.add(schemaLink);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"workflow\"));\n         confULContainer.add(liContainer);\n         BookmarkablePageLink<Page> link = new BookmarkablePageLink<>(\"workflow\", Workflow.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.ENABLE, Entitlement.WORKFLOW_DEF_READ);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.ENABLE, StandardEntitlement.WORKFLOW_DEF_READ);\n         liContainer.add(link);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"realms\"));"},{"sha":"b8a48d948d4ddc5c8c891019f2055b92b64a8d02","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Realms.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.confirmation.ConfirmationModalBehavior;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -147,8 +147,8 @@ public void onClick(final AjaxRequestTarget target) {\n \n         deleteLink.add(new ConfirmationModalBehavior());\n \n-        if (SyncopeConsoleSession.get().owns(Entitlement.REALM_DELETE)) {\n-            MetaDataRoleAuthorizationStrategy.authorize(deleteLink, ENABLE, Entitlement.REALM_DELETE);\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.REALM_DELETE)) {\n+            MetaDataRoleAuthorizationStrategy.authorize(deleteLink, ENABLE, StandardEntitlement.REALM_DELETE);\n         }\n \n         content.addOrReplace(deleteLink);\n@@ -172,7 +172,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n                         Realms.this.getPageReference(),\n                         realmTO,\n                         realmSidebarPanel.getCurrentRealm().getFullPath(),\n-                        Entitlement.REALM_CREATE,\n+                        StandardEntitlement.REALM_CREATE,\n                         true);\n                 target.add(modal.setContent(panel));\n \n@@ -181,8 +181,8 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             }\n         };\n \n-        if (SyncopeConsoleSession.get().owns(Entitlement.REALM_CREATE)) {\n-            MetaDataRoleAuthorizationStrategy.authorize(createLink, ENABLE, Entitlement.REALM_CREATE);\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.REALM_CREATE)) {\n+            MetaDataRoleAuthorizationStrategy.authorize(createLink, ENABLE, StandardEntitlement.REALM_CREATE);\n         }\n \n         content.addOrReplace(createLink);\n@@ -205,7 +205,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n                         Realms.this.getPageReference(),\n                         realmTO,\n                         realmTO.getFullPath(),\n-                        Entitlement.REALM_UPDATE,\n+                        StandardEntitlement.REALM_UPDATE,\n                         false);\n                 target.add(modal.setContent(panel));\n \n@@ -214,8 +214,8 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             }\n         };\n \n-        if (SyncopeConsoleSession.get().owns(Entitlement.REALM_UPDATE)) {\n-            MetaDataRoleAuthorizationStrategy.authorize(editLink, ENABLE, Entitlement.REALM_UPDATE);\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.REALM_UPDATE)) {\n+            MetaDataRoleAuthorizationStrategy.authorize(editLink, ENABLE, StandardEntitlement.REALM_UPDATE);\n         }\n \n         content.addOrReplace(editLink);"},{"sha":"0c70fcba466af0c05f7d30bfbb78574410a71c68","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Schemas.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSchemas.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSchemas.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSchemas.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -44,6 +43,7 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.syncope.client.console.panels.SchemaModalPanel;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n \n public class Schemas extends BasePage {\n@@ -134,8 +134,8 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n             }\n         };\n \n-        if (SyncopeConsoleSession.get().owns(Entitlement.SCHEMA_CREATE)) {\n-            MetaDataRoleAuthorizationStrategy.authorize(createLink, ENABLE, Entitlement.SCHEMA_CREATE);\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.SCHEMA_CREATE)) {\n+            MetaDataRoleAuthorizationStrategy.authorize(createLink, ENABLE, StandardEntitlement.SCHEMA_CREATE);\n         }\n \n         return createLink;"},{"sha":"6d90a19b4fdec02df722f1ece500d4a4d165fcd8","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Workflow.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWorkflow.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWorkflow.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWorkflow.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.rest.WorkflowRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.link.VeilPopupSettings;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.image.Image;\n@@ -45,20 +45,20 @@ public Workflow(final PageParameters parameters) {\n         noActivitiEnabledForUsers.setOutputMarkupPlaceholderTag(true);\n         add(noActivitiEnabledForUsers);\n \n-        WebMarkupContainer workflowDefContainer = new WebMarkupContainer(\"workflowDefContainer\");\n-        workflowDefContainer.setOutputMarkupPlaceholderTag(true);\n+        WebMarkupContainer workflowDef = new WebMarkupContainer(\"workflowDefContainer\");\n+        workflowDef.setOutputMarkupPlaceholderTag(true);\n \n         if (wfRestClient.isActivitiEnabledForUsers()) {\n             noActivitiEnabledForUsers.setVisible(false);\n         } else {\n-            workflowDefContainer.setVisible(false);\n+            workflowDef.setVisible(false);\n         }\n \n         BookmarkablePageLink<Void> activitiModeler =\n                 new BookmarkablePageLink<>(\"activitiModeler\", ActivitiModelerPopupPage.class);\n         activitiModeler.setPopupSettings(new VeilPopupSettings().setHeight(600).setWidth(800));\n-        MetaDataRoleAuthorizationStrategy.authorize(activitiModeler, ENABLE, Entitlement.WORKFLOW_DEF_READ);\n-        workflowDefContainer.add(activitiModeler);\n+        MetaDataRoleAuthorizationStrategy.authorize(activitiModeler, ENABLE, StandardEntitlement.WORKFLOW_DEF_READ);\n+        workflowDef.add(activitiModeler);\n         // Check if Activiti Modeler directory is found\n         boolean activitiModelerEnabled = false;\n         try {\n@@ -71,8 +71,8 @@ public Workflow(final PageParameters parameters) {\n \n         BookmarkablePageLink<Void> xmlEditor = new BookmarkablePageLink<>(\"xmlEditor\", XMLEditorPopupPage.class);\n         xmlEditor.setPopupSettings(new VeilPopupSettings().setHeight(480).setWidth(800));\n-        MetaDataRoleAuthorizationStrategy.authorize(xmlEditor, ENABLE, Entitlement.WORKFLOW_DEF_READ);\n-        workflowDefContainer.add(xmlEditor);\n+        MetaDataRoleAuthorizationStrategy.authorize(xmlEditor, ENABLE, StandardEntitlement.WORKFLOW_DEF_READ);\n+        workflowDef.add(xmlEditor);\n \n         Image workflowDefDiagram = new Image(\"workflowDefDiagram\", new Model<IResource>()) {\n \n@@ -93,10 +93,10 @@ protected byte[] getImageData(final IResource.Attributes attributes) {\n                 };\n             }\n         };\n-        workflowDefContainer.add(workflowDefDiagram);\n+        workflowDef.add(workflowDefDiagram);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(workflowDefContainer, ENABLE, Entitlement.WORKFLOW_DEF_READ);\n-        add(workflowDefContainer);\n+        MetaDataRoleAuthorizationStrategy.authorize(workflowDef, ENABLE, StandardEntitlement.WORKFLOW_DEF_READ);\n+        add(workflowDef);\n     }\n \n }"},{"sha":"e2a585f8d74a14455d1164f63434987e2e9a7a92","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/XMLEditorPopupPage.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FXMLEditorPopupPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FXMLEditorPopupPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FXMLEditorPopupPage.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.rest.WorkflowRestClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -57,29 +57,29 @@ public XMLEditorPopupPage() {\n         AjaxButton submit =\n                 new IndicatingAjaxButton(APPLY, new Model<>(getString(SUBMIT))) {\n \n-                    private static final long serialVersionUID = -958724007591692537L;\n+            private static final long serialVersionUID = -958724007591692537L;\n \n-                    @Override\n-                    protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n-                        try {\n-                            wfRestClient.updateDefinition(\n-                                    MediaType.APPLICATION_XML_TYPE, workflowDefArea.getModelObject());\n-                            info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientException scee) {\n-                            error(getString(Constants.ERROR) + \": \" + scee.getMessage());\n-                        }\n-                        feedbackPanel.refresh(target);\n-                    }\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                try {\n+                    wfRestClient.updateDefinition(\n+                            MediaType.APPLICATION_XML_TYPE, workflowDefArea.getModelObject());\n+                    info(getString(Constants.OPERATION_SUCCEEDED));\n+                } catch (SyncopeClientException scee) {\n+                    error(getString(Constants.ERROR) + \": \" + scee.getMessage());\n+                }\n+                feedbackPanel.refresh(target);\n+            }\n \n-                    @Override\n-                    protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n-                        feedbackPanel.refresh(target);\n-                    }\n-                };\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n \n         final Button close = new Button(\"closePage\", new Model<>(getString(CANCEL)));\n \n-        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, Entitlement.WORKFLOW_DEF_UPDATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, StandardEntitlement.WORKFLOW_DEF_UPDATE);\n         wfForm.add(submit);\n         wfForm.add(close);\n         this.add(wfForm);"},{"sha":"4907f77d9f0b9e042c6dab074c406e62da9d9846","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractSearchResultPanel.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import java.io.Serializable;\n import java.util.Collection;\n import java.util.List;\n import org.apache.syncope.client.console.PreferenceManager;\n@@ -55,7 +54,7 @@\n      */\n     protected PreferenceManager prefMan = new PreferenceManager();\n \n-    protected final AbstractAnyRestClient restClient;\n+    protected final AbstractAnyRestClient<T> restClient;\n \n     /**\n      * Number of rows per page.\n@@ -86,12 +85,12 @@\n     /**\n      * Result table.\n      */\n-    private AjaxDataTablePanel<AnyTO, String> resultTable;\n+    private AjaxDataTablePanel<T, String> resultTable;\n \n     /**\n      * Data provider used to search for users.\n      */\n-    private AnyDataProvider dataProvider;\n+    private AnyDataProvider<T> dataProvider;\n \n     /**\n      * Owner page.\n@@ -108,12 +107,12 @@\n      */\n     private final String type;\n \n-    protected <T extends AnyTO> AbstractSearchResultPanel(\n+    protected AbstractSearchResultPanel(\n             final String id,\n             final boolean filtered,\n             final String fiql,\n             final PageReference pageRef,\n-            final AbstractAnyRestClient restClient,\n+            final AbstractAnyRestClient<T> restClient,\n             final String realm,\n             final String type) {\n \n@@ -138,7 +137,7 @@ protected <T extends AnyTO> AbstractSearchResultPanel(\n \n         this.realm = realm;\n         this.type = type;\n-        \n+\n         setWindowClosedReloadCallback(modal);\n     }\n \n@@ -188,7 +187,7 @@ private void updateResultTable(final boolean create) {\n     }\n \n     private void updateResultTable(final boolean create, final int rows) {\n-        dataProvider = new AnyDataProvider(restClient, rows, filtered, realm, type);\n+        dataProvider = new AnyDataProvider<>(restClient, rows, filtered, realm, type);\n         dataProvider.setFIQL(fiql);\n \n         final int currentPage = resultTable != null\n@@ -216,7 +215,7 @@ private void updateResultTable(final boolean create, final int rows) {\n         container.addOrReplace(resultTable);\n     }\n \n-    protected abstract List<IColumn<AnyTO, String>> getColumns();\n+    protected abstract List<IColumn<T, String>> getColumns();\n \n     @Override\n     public void onEvent(final IEvent<?> event) {\n@@ -298,9 +297,9 @@ public void setRows(final int rows) {\n \n     protected abstract String getPageId();\n \n-    public abstract static class Builder<T extends Serializable> extends WizardMgtPanel.Builder<T> {\n+    public abstract static class Builder<T extends AnyTO> extends WizardMgtPanel.Builder<T> {\n \n-        private static final long serialVersionUID = 1L;\n+        private static final long serialVersionUID = 5088962796986706805L;\n \n         /**\n          * Specify if results are about a filtered search or not. Using this attribute it is possible to use this panel\n@@ -314,7 +313,7 @@ public void setRows(final int rows) {\n          */\n         protected final String fiql;\n \n-        protected final AbstractAnyRestClient restClient;\n+        protected final AbstractAnyRestClient<T> restClient;\n \n         /**\n          * Realm related to current panel.\n@@ -331,9 +330,10 @@ protected Builder(\n                 final boolean filtered,\n                 final String fiql,\n                 final PageReference pageRef,\n-                final AbstractAnyRestClient restClient,\n+                final AbstractAnyRestClient<T> restClient,\n                 final String realm,\n                 final String type) {\n+\n             super(reference, pageRef);\n             this.filtered = filtered;\n             this.fiql = fiql;"},{"sha":"d68a9c47837ef737520ac750a21e13c3f6e9b75e","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnySearchResultPanel.java","status":"modified","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnySearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnySearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnySearchResultPanel.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -62,19 +62,22 @@\n \n     protected final String pageID = \"Any\";\n \n-    private final String entitlement = \"USER_LIST\";\n+    protected final String entitlement;\n \n     protected AnySearchResultPanel(\n             final String type,\n             final String parentId,\n             final boolean filtered,\n             final String fiql,\n             final PageReference callerRef,\n-            final AbstractAnyRestClient restClient,\n+            final AbstractAnyRestClient<T> restClient,\n             final List<AnyTypeClassTO> anyTypeClassTOs,\n-            final String realm) {\n+            final String realm,\n+            final String entitlement) {\n \n         super(parentId, filtered, fiql, callerRef, restClient, realm, type);\n+        this.entitlement = entitlement;\n+\n         add(new Label(\"name\", type));\n \n         this.schemaNames = new ArrayList<>();\n@@ -90,68 +93,64 @@ protected AnySearchResultPanel(\n     }\n \n     @Override\n-    protected List<IColumn<AnyTO, String>> getColumns() {\n-\n-        final List<IColumn<AnyTO, String>> columns = new ArrayList<IColumn<AnyTO, String>>();\n+    protected List<IColumn<T, String>> getColumns() {\n+        final List<IColumn<T, String>> columns = new ArrayList<>();\n \n         for (String name : prefMan.getList(getRequest(), Constants.PREF_ANY_DETAILS_VIEW)) {\n             final Field field = ReflectionUtils.findField(AnyObjectTO.class, name);\n \n             if (\"token\".equalsIgnoreCase(name)) {\n-                columns.add(new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<T, String>(new ResourceModel(name, name), name, name));\n             } else if (field != null && field.getType().equals(Date.class)) {\n-                columns.add(new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<T, String>(new ResourceModel(name, name), name, name));\n             } else {\n-                columns.add(\n-                        new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<T, String>(new ResourceModel(name, name), name, name));\n             }\n         }\n \n         for (String name : prefMan.getList(getRequest(), Constants.PREF_ANY_ATTRIBUTES_VIEW)) {\n             if (schemaNames.contains(name)) {\n-                columns.add(new AttrColumn(name, SchemaType.PLAIN));\n+                columns.add(new AttrColumn<T>(name, SchemaType.PLAIN));\n             }\n         }\n \n         for (String name : prefMan.getList(getRequest(), Constants.PREF_ANY_DERIVED_ATTRIBUTES_VIEW)) {\n             if (dSchemaNames.contains(name)) {\n-                columns.add(new AttrColumn(name, SchemaType.DERIVED));\n+                columns.add(new AttrColumn<T>(name, SchemaType.DERIVED));\n             }\n         }\n \n         // Add defaults in case of no selection\n         if (columns.isEmpty()) {\n             for (String name : AnyDisplayAttributesModalPage.ANY_DEFAULT_SELECTION) {\n-                columns.add(\n-                        new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<T, String>(new ResourceModel(name, name), name, name));\n             }\n \n         }\n \n-        columns.add(new ActionColumn<AnyTO, String>(new ResourceModel(\"actions\", \"\")) {\n+        columns.add(new ActionColumn<T, String>(new ResourceModel(\"actions\", \"\")) {\n \n             private static final long serialVersionUID = -3503023501954863131L;\n \n             @Override\n-            public ActionLinksPanel<AnyTO> getActions(final String componentId, final IModel<AnyTO> model) {\n-\n-                final ActionLinksPanel.Builder<AnyTO> panel = ActionLinksPanel.builder(page.getPageReference());\n+            public ActionLinksPanel<T> getActions(final String componentId, final IModel<T> model) {\n+                final ActionLinksPanel.Builder<T> panel = ActionLinksPanel.builder(page.getPageReference());\n \n-                panel.add(new ActionLink<AnyTO>() {\n+                panel.add(new ActionLink<T>() {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final AnyTO anyTO) {\n                         send(AnySearchResultPanel.this, Broadcast.BREADTH,\n-                                new AjaxWizard.NewItemActionEvent<AnyTO>(model.getObject(), target));\n+                                new AjaxWizard.NewItemActionEvent<>(model.getObject(), target));\n                     }\n-                }, ActionLink.ActionType.EDIT, entitlement).add(new ActionLink<AnyTO>() {\n+                }, ActionLink.ActionType.EDIT, entitlement).add(new ActionLink<T>() {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final AnyTO anyTO) {\n+                    public void onClick(final AjaxRequestTarget target, final T anyTO) {\n                         try {\n                             restClient.delete(model.getObject().getETagValue(), model.getObject().getKey());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n@@ -178,7 +177,7 @@ public ActionLinksPanel<Serializable> getHeader(final String componentId) {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                         // still missing content\n-                        target.add(modal.setContent(new AnyDisplayAttributesModalPage<T>(\n+                        target.add(modal.setContent(new AnyDisplayAttributesModalPage<>(\n                                 modal, page.getPageReference(), schemaNames, dSchemaNames)));\n \n                         modal.header(new ResourceModel(\"any.attr.display\", \"\"));\n@@ -205,7 +204,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n     @Override\n     protected <T extends AnyTO> Collection<ActionLink.ActionType> getBulkActions() {\n-        final List<ActionLink.ActionType> bulkActions = new ArrayList<ActionLink.ActionType>();\n+        final List<ActionLink.ActionType> bulkActions = new ArrayList<>();\n \n         bulkActions.add(ActionLink.ActionType.DELETE);\n         bulkActions.add(ActionLink.ActionType.SUSPEND);\n@@ -221,26 +220,27 @@ protected String getPageId() {\n \n     public static final class Builder extends AbstractSearchResultPanel.Builder<AnyObjectTO> {\n \n-        private static final long serialVersionUID = 1L;\n+        private static final long serialVersionUID = -6828423611982275640L;\n \n         private final List<AnyTypeClassTO> anyTypeClassTOs;\n \n         public Builder(\n                 final boolean filtered,\n                 final String fiql,\n                 final PageReference pageRef,\n-                final AbstractAnyRestClient restClient,\n+                final AbstractAnyRestClient<AnyObjectTO> restClient,\n                 final List<AnyTypeClassTO> anyTypeClassTOs,\n                 final String realm,\n                 final String type) {\n+\n             super(AnyObjectTO.class, filtered, fiql, pageRef, restClient, realm, type);\n             this.anyTypeClassTOs = anyTypeClassTOs;\n         }\n \n         @Override\n         protected WizardMgtPanel<AnyObjectTO> newInstance(final String parentId) {\n-            return new AnySearchResultPanel<AnyObjectTO>(\n-                    type, parentId, filtered, fiql, pageRef, restClient, anyTypeClassTOs, realm);\n+            return new AnySearchResultPanel<>(\n+                    type, parentId, filtered, fiql, pageRef, restClient, anyTypeClassTOs, realm, type + \"_LIST\");\n         }\n \n     }"},{"sha":"e803113c95a021686cb65fcfce4e229e25af0e13","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/GroupSearchResultPanel.java","status":"modified","additions":24,"deletions":22,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupSearchResultPanel.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -41,6 +41,7 @@\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.Broadcast;\n@@ -62,76 +63,75 @@ private GroupSearchResultPanel(\n             final boolean filtered,\n             final String fiql,\n             final PageReference callerRef,\n-            final AbstractAnyRestClient restClient,\n+            final AbstractAnyRestClient<GroupTO> restClient,\n             final List<AnyTypeClassTO> anyTypeClassTOs,\n-            final String realm) {\n+            final String realm,\n+            final String entitlement) {\n \n-        super(type, parentId, filtered, fiql, callerRef, restClient, anyTypeClassTOs, realm);\n+        super(type, parentId, filtered, fiql, callerRef, restClient, anyTypeClassTOs, realm, entitlement);\n     }\n \n     @Override\n-    protected List<IColumn<AnyTO, String>> getColumns() {\n-\n-        final List<IColumn<AnyTO, String>> columns = new ArrayList<>();\n+    protected List<IColumn<GroupTO, String>> getColumns() {\n+        final List<IColumn<GroupTO, String>> columns = new ArrayList<>();\n \n         for (String name : prefMan.getList(getRequest(), Constants.PREF_GROUP_DETAILS_VIEW)) {\n             final Field field = ReflectionUtils.findField(GroupTO.class, name);\n \n             if (\"token\".equalsIgnoreCase(name)) {\n-                columns.add(new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<GroupTO, String>(new ResourceModel(name, name), name, name));\n             } else if (field != null && field.getType().equals(Date.class)) {\n-                columns.add(new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<GroupTO, String>(new ResourceModel(name, name), name, name));\n             } else {\n-                columns.add(new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<GroupTO, String>(new ResourceModel(name, name), name, name));\n             }\n         }\n \n         for (String name : prefMan.getList(getRequest(), Constants.PREF_GROUP_ATTRIBUTES_VIEW)) {\n             if (schemaNames.contains(name)) {\n-                columns.add(new AttrColumn(name, SchemaType.PLAIN));\n+                columns.add(new AttrColumn<GroupTO>(name, SchemaType.PLAIN));\n             }\n         }\n \n         for (String name : prefMan.getList(getRequest(), Constants.PREF_GROUP_DERIVED_ATTRIBUTES_VIEW)) {\n             if (dSchemaNames.contains(name)) {\n-                columns.add(new AttrColumn(name, SchemaType.DERIVED));\n+                columns.add(new AttrColumn<GroupTO>(name, SchemaType.DERIVED));\n             }\n         }\n \n         // Add defaults in case of no selection\n         if (columns.isEmpty()) {\n             for (String name : GroupDisplayAttributesModalPage.GROUP_DEFAULT_SELECTION) {\n-                columns.add(new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<GroupTO, String>(new ResourceModel(name, name), name, name));\n             }\n \n             prefMan.setList(getRequest(), getResponse(), Constants.PREF_GROUP_DETAILS_VIEW,\n                     Arrays.asList(GroupDisplayAttributesModalPage.GROUP_DEFAULT_SELECTION));\n         }\n \n-        columns.add(new ActionColumn<AnyTO, String>(new ResourceModel(\"actions\", \"\")) {\n+        columns.add(new ActionColumn<GroupTO, String>(new ResourceModel(\"actions\", \"\")) {\n \n             private static final long serialVersionUID = -3503023501954863131L;\n \n             @Override\n-            public ActionLinksPanel<AnyTO> getActions(final String componentId, final IModel<AnyTO> model) {\n-\n-                final ActionLinksPanel.Builder<AnyTO> panel = ActionLinksPanel.builder(page.getPageReference());\n+            public ActionLinksPanel<GroupTO> getActions(final String componentId, final IModel<GroupTO> model) {\n+                final ActionLinksPanel.Builder<GroupTO> panel = ActionLinksPanel.builder(page.getPageReference());\n \n-                panel.add(new ActionLink<AnyTO>() {\n+                panel.add(new ActionLink<GroupTO>() {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final AnyTO anyTO) {\n+                    public void onClick(final AjaxRequestTarget target, final GroupTO anyTO) {\n                         send(GroupSearchResultPanel.this, Broadcast.BREADTH,\n                                 new AjaxWizard.NewItemActionEvent<AnyTO>(model.getObject(), target));\n                     }\n-                }, ActionLink.ActionType.EDIT, entitlement).add(new ActionLink<AnyTO>() {\n+                }, ActionLink.ActionType.EDIT, entitlement).add(new ActionLink<GroupTO>() {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final AnyTO anyTO) {\n+                    public void onClick(final AjaxRequestTarget target, final GroupTO anyTO) {\n                         try {\n                             restClient.delete(model.getObject().getETagValue(), model.getObject().getKey());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n@@ -235,18 +235,20 @@ public Builder(\n                 final boolean filtered,\n                 final String fiql,\n                 final PageReference pageRef,\n-                final AbstractAnyRestClient restClient,\n+                final AbstractAnyRestClient<GroupTO> restClient,\n                 final List<AnyTypeClassTO> anyTypeClassTOs,\n                 final String realm,\n                 final String type) {\n+\n             super(GroupTO.class, filtered, fiql, pageRef, restClient, realm, type);\n             this.anyTypeClassTOs = anyTypeClassTOs;\n         }\n \n         @Override\n         protected WizardMgtPanel<GroupTO> newInstance(final String parentId) {\n             return new GroupSearchResultPanel(\n-                    type, parentId, filtered, fiql, pageRef, restClient, anyTypeClassTOs, realm);\n+                    type, parentId, filtered, fiql, pageRef, restClient, anyTypeClassTOs, realm,\n+                    StandardEntitlement.GROUP_SEARCH);\n         }\n \n     }"},{"sha":"2ee2073244d1536c6054bd2cd08be871ceb1c321","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceMappingPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -46,9 +46,9 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -253,7 +253,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                             target.add(ResourceMappingPanel.this);\n                         }\n                     }\n-                }, ActionLink.ActionType.DELETE, Entitlement.RESOURCE_UPDATE);\n+                }, ActionLink.ActionType.DELETE, StandardEntitlement.RESOURCE_UPDATE);\n \n                 item.add(actions.build(\"toRemove\"));\n \n@@ -448,11 +448,11 @@ private List<String> getSchemaNames(final Long connectorId, final Set<ConnConfPr\n         return CollectionUtils.collect(connRestClient.buildObjectClassInfo(connInstanceTO, true),\n                 new Transformer<ConnIdObjectClassTO, String>() {\n \n-                    @Override\n-                    public String transform(final ConnIdObjectClassTO input) {\n-                        return input.getType();\n-                    }\n-                },\n+            @Override\n+            public String transform(final ConnIdObjectClassTO input) {\n+                return input.getType();\n+            }\n+        },\n                 new ArrayList<String>());\n     }\n "},{"sha":"87e8622efe63f62dbffbd627da399964b978595a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceModal.java","status":"modified","additions":28,"deletions":25,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -103,7 +103,7 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n                 send(pageRef.getPage(), Broadcast.DEPTH,\n                         new AjaxWizard.NewItemActionEvent<>(provisionTO, 2, target));\n             }\n-        }, ActionLink.ActionType.MAPPING, Entitlement.RESOURCE_UPDATE).addAction(new ActionLink<ProvisionTO>() {\n+        }, ActionLink.ActionType.MAPPING, StandardEntitlement.RESOURCE_UPDATE).addAction(new ActionLink<ProvisionTO>() {\n \n             private static final long serialVersionUID = -3722207913631435514L;\n \n@@ -112,7 +112,8 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n                 send(pageRef.getPage(), Broadcast.DEPTH,\n                         new AjaxWizard.NewItemActionEvent<>(provisionTO, 3, target));\n             }\n-        }, ActionLink.ActionType.ACCOUNT_LINK, Entitlement.RESOURCE_UPDATE).addAction(new ActionLink<ProvisionTO>() {\n+        }, ActionLink.ActionType.ACCOUNT_LINK, StandardEntitlement.RESOURCE_UPDATE).addAction(\n+                new ActionLink<ProvisionTO>() {\n \n             private static final long serialVersionUID = -3722207913631435524L;\n \n@@ -122,26 +123,28 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n                 send(pageRef.getPage(), Broadcast.DEPTH,\n                         new AjaxWizard.NewItemFinishEvent<>(provisionTO, target));\n             }\n-        }, ActionLink.ActionType.RESET_TIME, Entitlement.RESOURCE_UPDATE).addAction(new ActionLink<ProvisionTO>() {\n+        }, ActionLink.ActionType.RESET_TIME, StandardEntitlement.RESOURCE_UPDATE).addAction(\n+                        new ActionLink<ProvisionTO>() {\n \n-            private static final long serialVersionUID = -3722207913631435534L;\n+                    private static final long serialVersionUID = -3722207913631435534L;\n \n-            @Override\n-            public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n-                send(pageRef.getPage(), Broadcast.DEPTH,\n-                        new AjaxWizard.NewItemActionEvent<>(SerializationUtils.clone(provisionTO), target));\n-            }\n-        }, ActionLink.ActionType.CLONE, Entitlement.RESOURCE_CREATE).addAction(new ActionLink<ProvisionTO>() {\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n+                        send(pageRef.getPage(), Broadcast.DEPTH,\n+                                new AjaxWizard.NewItemActionEvent<>(SerializationUtils.clone(provisionTO), target));\n+                    }\n+                }, ActionLink.ActionType.CLONE, StandardEntitlement.RESOURCE_CREATE).addAction(\n+                        new ActionLink<ProvisionTO>() {\n \n-            private static final long serialVersionUID = -3722207913631435544L;\n+                    private static final long serialVersionUID = -3722207913631435544L;\n \n-            @Override\n-            public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n-                model.getObject().getProvisions().remove(provisionTO);\n-                send(pageRef.getPage(), Broadcast.DEPTH,\n-                        new AjaxWizard.NewItemFinishEvent<ProvisionTO>(null, target));\n-            }\n-        }, ActionLink.ActionType.DELETE, Entitlement.RESOURCE_DELETE);\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n+                        model.getObject().getProvisions().remove(provisionTO);\n+                        send(pageRef.getPage(), Broadcast.DEPTH,\n+                                new AjaxWizard.NewItemFinishEvent<ProvisionTO>(null, target));\n+                    }\n+                }, ActionLink.ActionType.DELETE, StandardEntitlement.RESOURCE_DELETE);\n \n         builder.addNewItemPanelBuilder(new ProvisionWizardBuilder(\"wizard\", model.getObject(), pageRef));\n         builder.addNotificationPanel(modal.getFeedbackPanel());\n@@ -180,7 +183,7 @@ protected void check(final AjaxRequestTarget target) {\n                         modal.getFeedbackPanel().refresh(target);\n                     }\n                 };\n-                MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE, Entitlement.CONNECTOR_READ);\n+                MetaDataRoleAuthorizationStrategy.authorize(panel, ENABLE, StandardEntitlement.CONNECTOR_READ);\n                 return panel;\n             }\n         });\n@@ -222,11 +225,11 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                     int uConnObjectKeyCount = CollectionUtils.countMatches(\n                             provision.getMapping().getItems(), new Predicate<MappingItemTO>() {\n \n-                                @Override\n-                                public boolean evaluate(final MappingItemTO item) {\n-                                    return item.isConnObjectKey();\n-                                }\n-                            });\n+                        @Override\n+                        public boolean evaluate(final MappingItemTO item) {\n+                            return item.isConnObjectKey();\n+                        }\n+                    });\n \n                     connObjectKeyError = uConnObjectKeyCount != 1;\n                 }"},{"sha":"a449044604d8fe1af803d5841bf7df83a54109c6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemasPanel.java","status":"modified","additions":24,"deletions":23,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -41,8 +41,8 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.SelectChoiceRenderer;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -77,14 +77,14 @@ public class SchemasPanel extends Panel {\n     private static final Map<SchemaType, String> PAGINATOR_ROWS_KEYS =\n             new HashMap<SchemaType, String>() {\n \n-                private static final long serialVersionUID = 3109256773218160485L;\n+        private static final long serialVersionUID = 3109256773218160485L;\n \n-                {\n-                    put(SchemaType.PLAIN, Constants.PREF_CONF_SCHEMA_PAGINATOR_ROWS);\n-                    put(SchemaType.DERIVED, Constants.PREF_CONF_SCHEMA_PAGINATOR_ROWS);\n-                    put(SchemaType.VIRTUAL, Constants.PREF_CONF_SCHEMA_PAGINATOR_ROWS);\n-                }\n-            };\n+        {\n+            put(SchemaType.PLAIN, Constants.PREF_CONF_SCHEMA_PAGINATOR_ROWS);\n+            put(SchemaType.DERIVED, Constants.PREF_CONF_SCHEMA_PAGINATOR_ROWS);\n+            put(SchemaType.VIRTUAL, Constants.PREF_CONF_SCHEMA_PAGINATOR_ROWS);\n+        }\n+    };\n \n     private static final Map<SchemaType, List<String>> COL_NAMES = new HashMap<SchemaType, List<String>>() {\n \n@@ -181,19 +181,19 @@ public String getCssClass() {\n                     final IColumn<AbstractSchemaTO, String> column =\n                             new PropertyColumn<AbstractSchemaTO, String>(new ResourceModel(field), field, field) {\n \n-                                private static final long serialVersionUID = 3282547854226892169L;\n-\n-                                @Override\n-                                public String getCssClass() {\n-                                    String css = super.getCssClass();\n-                                    if (\"key\".equals(field)) {\n-                                        css = StringUtils.isBlank(css)\n-                                                ? \"medium_fixedsize\"\n-                                                : css + \" medium_fixedsize\";\n-                                    }\n-                                    return css;\n-                                }\n-                            };\n+                        private static final long serialVersionUID = 3282547854226892169L;\n+\n+                        @Override\n+                        public String getCssClass() {\n+                            String css = super.getCssClass();\n+                            if (\"key\".equals(field)) {\n+                                css = StringUtils.isBlank(css)\n+                                        ? \"medium_fixedsize\"\n+                                        : css + \" medium_fixedsize\";\n+                            }\n+                            return css;\n+                        }\n+                    };\n                     columns.add(column);\n                 }\n             }\n@@ -228,7 +228,8 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                         modal.show(true);\n                         target.add(modal.setContent(new SchemaModalPanel(modal, pageReference, false)));\n                     }\n-                }, ActionLink.ActionType.EDIT, Entitlement.SCHEMA_UPDATE).addWithRoles(new ActionLink<Serializable>() {\n+                }, ActionLink.ActionType.EDIT, StandardEntitlement.SCHEMA_UPDATE).addWithRoles(\n+                        new ActionLink<Serializable>() {\n \n                     private static final long serialVersionUID = -3722207913631435501L;\n \n@@ -254,7 +255,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n                         target.add(webContainer);\n                     }\n-                }, ActionLink.ActionType.DELETE, Entitlement.SCHEMA_DELETE);\n+                }, ActionLink.ActionType.DELETE, StandardEntitlement.SCHEMA_DELETE);\n \n                 item.add(actionLinks.build(componentId));\n             }"},{"sha":"0cbe42aa06659b14c5a36aebeee870386e8f2273","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/UserSearchResultPanel.java","status":"modified","additions":34,"deletions":36,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserSearchResultPanel.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -43,6 +43,7 @@\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.Broadcast;\n@@ -58,118 +59,113 @@ public final class UserSearchResultPanel extends AnySearchResultPanel<UserTO> {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n-    private final String entitlement = \"USER_LIST\";\n-\n     private UserSearchResultPanel(\n             final String type,\n             final String parentId,\n             final boolean filtered,\n             final String fiql,\n             final PageReference callerRef,\n-            final AbstractAnyRestClient restClient,\n+            final AbstractAnyRestClient<UserTO> restClient,\n             final List<AnyTypeClassTO> anyTypeClassTOs,\n-            final String realm) {\n+            final String realm,\n+            final String entitlement) {\n \n-        super(type, parentId, filtered, fiql, callerRef, restClient, anyTypeClassTOs, realm);\n+        super(type, parentId, filtered, fiql, callerRef, restClient, anyTypeClassTOs, realm, entitlement);\n     }\n \n     @Override\n-    protected List<IColumn<AnyTO, String>> getColumns() {\n+    protected List<IColumn<UserTO, String>> getColumns() {\n \n-        final List<IColumn<AnyTO, String>> columns = new ArrayList<IColumn<AnyTO, String>>();\n+        final List<IColumn<UserTO, String>> columns = new ArrayList<>();\n \n         for (String name : prefMan.getList(getRequest(), Constants.PREF_USERS_DETAILS_VIEW)) {\n             final Field field = ReflectionUtils.findField(UserTO.class, name);\n \n             if (\"token\".equalsIgnoreCase(name)) {\n-                columns.add(new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<UserTO, String>(new ResourceModel(name, name), name, name));\n             } else if (field != null && field.getType().equals(Date.class)) {\n-                columns.add(new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<UserTO, String>(new ResourceModel(name, name), name, name));\n             } else {\n-                columns.add(new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<UserTO, String>(new ResourceModel(name, name), name, name));\n             }\n         }\n \n         for (String name : prefMan.getList(getRequest(), Constants.PREF_USERS_ATTRIBUTES_VIEW)) {\n             if (schemaNames.contains(name)) {\n-                columns.add(new AttrColumn(name, SchemaType.PLAIN));\n+                columns.add(new AttrColumn<UserTO>(name, SchemaType.PLAIN));\n             }\n         }\n \n         for (String name : prefMan.getList(getRequest(), Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW)) {\n             if (dSchemaNames.contains(name)) {\n-                columns.add(new AttrColumn(name, SchemaType.DERIVED));\n+                columns.add(new AttrColumn<UserTO>(name, SchemaType.DERIVED));\n             }\n         }\n \n         // Add defaults in case of no selection\n         if (columns.isEmpty()) {\n             for (String name : UserDisplayAttributesModalPage.USER_DEFAULT_SELECTION) {\n-                columns.add(new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<UserTO, String>(new ResourceModel(name, name), name, name));\n             }\n \n             prefMan.setList(getRequest(), getResponse(), Constants.PREF_USERS_DETAILS_VIEW,\n                     Arrays.asList(UserDisplayAttributesModalPage.USER_DEFAULT_SELECTION));\n         }\n \n-        columns.add(new ActionColumn<AnyTO, String>(new ResourceModel(\"actions\", \"\")) {\n+        columns.add(new ActionColumn<UserTO, String>(new ResourceModel(\"actions\", \"\")) {\n \n             private static final long serialVersionUID = -3503023501954863131L;\n \n             @Override\n-            public ActionLinksPanel<AnyTO> getActions(final String componentId, final IModel<AnyTO> model) {\n+            public ActionLinksPanel<UserTO> getActions(final String componentId, final IModel<UserTO> model) {\n \n-                final ActionLinksPanel.Builder<AnyTO> panel = ActionLinksPanel.builder(page.getPageReference());\n+                final ActionLinksPanel.Builder<UserTO> panel = ActionLinksPanel.builder(page.getPageReference());\n \n-                panel.add(new ActionLink<AnyTO>() {\n+                panel.add(new ActionLink<UserTO>() {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final AnyTO anyTO) {\n-                        final UserTO modelObject = UserTO.class.cast(model.getObject());\n-\n-                        final IModel<UserTO> model = new CompoundPropertyModel<>(modelObject);\n+                    public void onClick(final AjaxRequestTarget target, final UserTO anyTO) {\n+                        final IModel<UserTO> model = new CompoundPropertyModel<>(anyTO);\n                         modal.setFormModel(model);\n \n                         target.add(modal.setContent(\n-                                new StatusModalPage<UserTO>(modal, page.getPageReference(), model.getObject())));\n+                                new StatusModalPage<>(modal, page.getPageReference(), model.getObject())));\n \n-                        modal.header(new Model<String>(MessageFormat.format(getString(\"any.edit\"), anyTO.getKey())));\n+                        modal.header(new Model<>(MessageFormat.format(getString(\"any.edit\"), anyTO.getKey())));\n                         modal.show(true);\n                     }\n-                }, ActionLink.ActionType.MANAGE_RESOURCES, entitlement).add(new ActionLink<AnyTO>() {\n+                }, ActionLink.ActionType.MANAGE_RESOURCES, StandardEntitlement.USER_LIST).add(new ActionLink<UserTO>() {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final AnyTO anyTO) {\n-                        final UserTO modelObject = UserTO.class.cast(model.getObject());\n-\n-                        final IModel<UserTO> model = new CompoundPropertyModel<>(modelObject);\n+                    public void onClick(final AjaxRequestTarget target, final UserTO anyTO) {\n+                        final IModel<UserTO> model = new CompoundPropertyModel<>(anyTO);\n                         modal.setFormModel(model);\n \n                         target.add(modal.setContent(\n-                                new StatusModalPage<UserTO>(modal, page.getPageReference(), model.getObject(), true)));\n+                                new StatusModalPage<>(modal, page.getPageReference(), model.getObject(), true)));\n \n-                        modal.header(new Model<String>(MessageFormat.format(getString(\"any.edit\"), anyTO.getKey())));\n+                        modal.header(new Model<>(MessageFormat.format(getString(\"any.edit\"), anyTO.getKey())));\n                         modal.show(true);\n                     }\n-                }, ActionLink.ActionType.ENABLE, entitlement).add(new ActionLink<AnyTO>() {\n+                }, ActionLink.ActionType.ENABLE, entitlement).add(new ActionLink<UserTO>() {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final AnyTO anyTO) {\n+                    public void onClick(final AjaxRequestTarget target, final UserTO anyTO) {\n                         send(UserSearchResultPanel.this, Broadcast.BREADTH,\n                                 new AjaxWizard.NewItemActionEvent<AnyTO>(model.getObject(), target));\n                     }\n-                }, ActionLink.ActionType.EDIT, entitlement).add(new ActionLink<AnyTO>() {\n+                }, ActionLink.ActionType.EDIT, entitlement).add(new ActionLink<UserTO>() {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final AnyTO anyTO) {\n+                    public void onClick(final AjaxRequestTarget target, final UserTO anyTO) {\n                         try {\n                             restClient.delete(model.getObject().getETagValue(), model.getObject().getKey());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n@@ -246,18 +242,20 @@ public Builder(\n                 final boolean filtered,\n                 final String fiql,\n                 final PageReference pageRef,\n-                final AbstractAnyRestClient restClient,\n+                final AbstractAnyRestClient<UserTO> restClient,\n                 final List<AnyTypeClassTO> anyTypeClassTOs,\n                 final String realm,\n                 final String type) {\n+\n             super(UserTO.class, filtered, fiql, pageRef, restClient, realm, type);\n             this.anyTypeClassTOs = anyTypeClassTOs;\n         }\n \n         @Override\n         protected WizardMgtPanel<UserTO> newInstance(final String parentId) {\n             return new UserSearchResultPanel(\n-                    type, parentId, filtered, fiql, pageRef, restClient, anyTypeClassTOs, realm);\n+                    type, parentId, filtered, fiql, pageRef, restClient, anyTypeClassTOs, realm,\n+                    StandardEntitlement.USER_LIST);\n         }\n     }\n }"},{"sha":"713418faba0dde1ab4fc69a2c5d03658724d9940","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -35,25 +35,24 @@\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n \n-public abstract class AbstractAnyRestClient extends BaseRestClient {\n+public abstract class AbstractAnyRestClient<T extends AnyTO> extends BaseRestClient {\n \n     private static final long serialVersionUID = 1962529678091410544L;\n \n     public abstract int count(String realm);\n \n-    public abstract List<? extends AnyTO> list(\n-            String realm, int page, int size, final SortParam<String> sort, final String type);\n+    public abstract List<T> list(String realm, int page, int size, final SortParam<String> sort, final String type);\n \n     public abstract int searchCount(String realm, String fiql, final String type);\n \n-    public abstract List<? extends AnyTO> search(\n+    public abstract List<T> search(\n             String realm, String fiql, int page, int size, final SortParam<String> sort, final String type);\n \n     public abstract ConnObjectTO readConnObject(String resourceName, Long key);\n \n-    public abstract <T extends AnyTO> ProvisioningResult<T> delete(String etag, Long key);\n+    public abstract ProvisioningResult<T> delete(String etag, Long key);\n \n-    protected <T extends AnyTO, E extends AnyService<T, ?>> ProvisioningResult<T> delete(\n+    protected <E extends AnyService<T, ?>> ProvisioningResult<T> delete(\n             final Class<E> serviceClass, final Class<T> objectType, final String etag, final Long key) {\n         ProvisioningResult<T> result;\n         synchronized (this) {"},{"sha":"92961951c1c02deb4de1f0a88af6dfb9bf49518d","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -38,7 +38,7 @@\n  * Console client for invoking Rest any type class services.\n  */\n @Component\n-public class AnyObjectRestClient extends AbstractAnyRestClient {\n+public class AnyObjectRestClient extends AbstractAnyRestClient<AnyObjectTO> {\n \n     private static final long serialVersionUID = -8874495991295283249L;\n \n@@ -54,8 +54,9 @@ public int count(final String realm) {\n     }\n \n     @Override\n-    public List<? extends AnyTO> list(final String realm, final int page, final int size, final SortParam<String> sort,\n+    public List<AnyObjectTO> list(final String realm, final int page, final int size, final SortParam<String> sort,\n             final String type) {\n+\n         return list(type, realm).getResult();\n     }\n \n@@ -70,9 +71,10 @@ public int searchCount(final String realm, final String fiql, final String type)\n     }\n \n     @Override\n-    public List<? extends AnyTO> search(final String realm, final String fiql, final int page, final int size,\n+    public List<AnyObjectTO> search(final String realm, final String fiql, final int page, final int size,\n             final SortParam<String> sort,\n             final String type) {\n+\n         throw new UnsupportedOperationException(\"Not supported yet.\");\n     }\n "},{"sha":"fe7c7e71247c37071312084c8aa33fdc53960133","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -40,7 +40,7 @@\n  * Console client for invoking Rest Group's services.\n  */\n @Component\n-public class GroupRestClient extends AbstractAnyRestClient {\n+public class GroupRestClient extends AbstractAnyRestClient<GroupTO> {\n \n     private static final long serialVersionUID = -8549081557283519638L;\n "},{"sha":"4830ed09a64f64c99a4ef9807d88b8f54f18e690","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -44,7 +44,7 @@\n  * Console client for invoking rest users services.\n  */\n @Component\n-public class UserRestClient extends AbstractAnyRestClient {\n+public class UserRestClient extends AbstractAnyRestClient<UserTO> {\n \n     private static final long serialVersionUID = -1575748964398293968L;\n "},{"sha":"3a5cc24ce63477774d6c0ffafadd4108be146434","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AbstractAjaxTimerBehavior;\n@@ -93,48 +93,48 @@ protected List<ResourceTO> load() {\n     private final LoadableDetachableModel<Map<String, List<ConnInstanceTO>>> connModel =\n             new LoadableDetachableModel<Map<String, List<ConnInstanceTO>>>() {\n \n-                private static final long serialVersionUID = 5275935387613157432L;\n+        private static final long serialVersionUID = 5275935387613157432L;\n \n-                @Override\n-                protected Map<String, List<ConnInstanceTO>> load() {\n-                    final Map<String, List<ConnInstanceTO>> res = new HashMap<>();\n-\n-                    for (ConnInstanceTO conn : connectorRestClient.getAllConnectors()) {\n-                        final List<ConnInstanceTO> conns;\n-                        if (res.containsKey(conn.getLocation())) {\n-                            conns = res.get(conn.getLocation());\n-                        } else {\n-                            conns = new ArrayList<>();\n-                            res.put(conn.getLocation(), conns);\n-                        }\n-                        conns.add(conn);\n-                    }\n-\n-                    return res;\n+        @Override\n+        protected Map<String, List<ConnInstanceTO>> load() {\n+            final Map<String, List<ConnInstanceTO>> res = new HashMap<>();\n+\n+            for (ConnInstanceTO conn : connectorRestClient.getAllConnectors()) {\n+                final List<ConnInstanceTO> conns;\n+                if (res.containsKey(conn.getLocation())) {\n+                    conns = res.get(conn.getLocation());\n+                } else {\n+                    conns = new ArrayList<>();\n+                    res.put(conn.getLocation(), conns);\n                 }\n-            };\n+                conns.add(conn);\n+            }\n+\n+            return res;\n+        }\n+    };\n \n     private final LoadableDetachableModel<Pair<List<URI>, List<URI>>> csModel =\n             new LoadableDetachableModel<Pair<List<URI>, List<URI>>>() {\n \n-                private static final long serialVersionUID = 5275935387613157433L;\n-\n-                @Override\n-                protected Pair<List<URI>, List<URI>> load() {\n-                    final List<URI> connectorServers = new ArrayList<>();\n-                    final List<URI> filePaths = new ArrayList<>();\n-\n-                    for (String location : SyncopeConsoleSession.get().getSyncopeTO().getConnIdLocations()) {\n-                        if (location.startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n-                            connectorServers.add(URI.create(location));\n-                        } else {\n-                            filePaths.add(URI.create(location));\n-                        }\n-                    }\n+        private static final long serialVersionUID = 5275935387613157433L;\n \n-                    return Pair.of(connectorServers, filePaths);\n+        @Override\n+        protected Pair<List<URI>, List<URI>> load() {\n+            final List<URI> connectorServers = new ArrayList<>();\n+            final List<URI> filePaths = new ArrayList<>();\n+\n+            for (String location : SyncopeConsoleSession.get().getSyncopeTO().getConnIdLocations()) {\n+                if (location.startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n+                    connectorServers.add(URI.create(location));\n+                } else {\n+                    filePaths.add(URI.create(location));\n                 }\n-            };\n+            }\n+\n+            return Pair.of(connectorServers, filePaths);\n+        }\n+    };\n \n     protected enum SupportedOperation {\n \n@@ -180,15 +180,15 @@ public void onClose(final AjaxRequestTarget target) {\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 target.appendJavaScript(\"zoomIn($('#drawing')[0]);\");\n             }\n-        }, ActionLink.ActionType.ZOOM_IN, Entitlement.RESOURCE_LIST).add(new ActionLink<Serializable>() {\n+        }, ActionLink.ActionType.ZOOM_IN, StandardEntitlement.RESOURCE_LIST).add(new ActionLink<Serializable>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 target.appendJavaScript(\"zoomOut($('#drawing')[0]);\");\n             }\n-        }, ActionLink.ActionType.ZOOM_OUT, Entitlement.RESOURCE_LIST);\n+        }, ActionLink.ActionType.ZOOM_OUT, StandardEntitlement.RESOURCE_LIST);\n \n         add(zoomActionPanel.build(\"zoom\"));\n         // -----------------------------------------\n@@ -400,37 +400,37 @@ protected void populateItem(final ListItem<Long> item) {\n                 final ListView<TopologyNode> innerListView = new ListView<TopologyNode>(\"resources\",\n                         new ArrayList<>(connections.get(connectorId).values())) {\n \n-                            private static final long serialVersionUID = 1L;\n+                    private static final long serialVersionUID = 1L;\n \n-                            private final int size = getModelObject().size() + 1;\n+                    private final int size = getModelObject().size() + 1;\n \n-                            @Override\n-                            protected void populateItem(final ListItem<TopologyNode> item) {\n-                                final TopologyNode topologynode = item.getModelObject();\n-                                final TopologyNode parent = connectors.get(connectorId);\n+                    @Override\n+                    protected void populateItem(final ListItem<TopologyNode> item) {\n+                        final TopologyNode topologynode = item.getModelObject();\n+                        final TopologyNode parent = connectors.get(connectorId);\n \n-                                // Set position\n-                                int kx = size >= 16 ? 800 : (48 * size);\n-                                int ky = size < 4 ? 100 : size < 6 ? 350 : 750;\n+                        // Set position\n+                        int kx = size >= 16 ? 800 : (48 * size);\n+                        int ky = size < 4 ? 100 : size < 6 ? 350 : 750;\n \n-                                final double hpos;\n-                                if (parent == null || parent.getY() < syncopeTopologyNode.getY()) {\n-                                    hpos = Math.PI;\n-                                } else {\n-                                    hpos = 0.0;\n-                                }\n+                        final double hpos;\n+                        if (parent == null || parent.getY() < syncopeTopologyNode.getY()) {\n+                            hpos = Math.PI;\n+                        } else {\n+                            hpos = 0.0;\n+                        }\n \n-                                int x = (int) Math.round((parent == null ? origX : parent.getX())\n-                                        + kx * Math.cos(hpos + Math.PI * (item.getIndex() + 1) / size));\n-                                int y = (int) Math.round((parent == null ? origY : parent.getY())\n-                                        + ky * Math.sin(hpos + Math.PI * (item.getIndex() + 1) / size));\n+                        int x = (int) Math.round((parent == null ? origX : parent.getX())\n+                                + kx * Math.cos(hpos + Math.PI * (item.getIndex() + 1) / size));\n+                        int y = (int) Math.round((parent == null ? origY : parent.getY())\n+                                + ky * Math.sin(hpos + Math.PI * (item.getIndex() + 1) / size));\n \n-                                topologynode.setX(x);\n-                                topologynode.setY(y);\n+                        topologynode.setX(x);\n+                        topologynode.setY(y);\n \n-                                item.add(topologyNodePanel(\"res\", topologynode));\n-                            }\n-                        };\n+                        item.add(topologyNodePanel(\"res\", topologynode));\n+                    }\n+                };\n \n                 innerListView.setOutputMarkupId(true);\n                 item.add(innerListView);"},{"sha":"98e72f086a85f99b3548d60a747d939ed7babf96","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -140,14 +140,14 @@ public void onClickInternal(final AjaxRequestTarget target) {\n                 modal.header(new Model<>(MessageFormat.format(getString(\"connector.new\"), node.getKey())));\n \n                 MetaDataRoleAuthorizationStrategy.\n-                        authorize(modal.addSumbitButton(), ENABLE, Entitlement.CONNECTOR_CREATE);\n+                        authorize(modal.addSumbitButton(), ENABLE, StandardEntitlement.CONNECTOR_CREATE);\n \n                 modal.show(true);\n             }\n         };\n         fragment.add(create);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(create, ENABLE, Entitlement.CONNECTOR_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(create, ENABLE, StandardEntitlement.CONNECTOR_CREATE);\n \n         return fragment;\n     }\n@@ -175,7 +175,7 @@ public void onClickInternal(final AjaxRequestTarget target) {\n         fragment.add(delete);\n         delete.add(new ConfirmationModalBehavior());\n \n-        MetaDataRoleAuthorizationStrategy.authorize(delete, ENABLE, Entitlement.CONNECTOR_DELETE);\n+        MetaDataRoleAuthorizationStrategy.authorize(delete, ENABLE, StandardEntitlement.CONNECTOR_DELETE);\n \n         final AjaxLink<String> create = new ClearIndicatingAjaxLink<String>(\"create\", pageRef) {\n \n@@ -195,14 +195,14 @@ public void onClickInternal(final AjaxRequestTarget target) {\n                 modal.header(new Model<>(MessageFormat.format(getString(\"resource.new\"), node.getKey())));\n \n                 MetaDataRoleAuthorizationStrategy.\n-                        authorize(modal.addSumbitButton(), ENABLE, Entitlement.RESOURCE_CREATE);\n+                        authorize(modal.addSumbitButton(), ENABLE, StandardEntitlement.RESOURCE_CREATE);\n \n                 modal.show(true);\n             }\n         };\n         fragment.add(create);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(create, ENABLE, Entitlement.RESOURCE_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(create, ENABLE, StandardEntitlement.RESOURCE_CREATE);\n \n         final AjaxLink<String> edit = new ClearIndicatingAjaxLink<String>(\"edit\", pageRef) {\n \n@@ -220,14 +220,14 @@ public void onClickInternal(final AjaxRequestTarget target) {\n                 modal.header(new Model<>(MessageFormat.format(getString(\"connector.edit\"), node.getKey())));\n \n                 MetaDataRoleAuthorizationStrategy.\n-                        authorize(modal.addSumbitButton(), ENABLE, Entitlement.CONNECTOR_UPDATE);\n+                        authorize(modal.addSumbitButton(), ENABLE, StandardEntitlement.CONNECTOR_UPDATE);\n \n                 modal.show(true);\n             }\n         };\n         fragment.add(edit);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(edit, ENABLE, Entitlement.CONNECTOR_UPDATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(edit, ENABLE, StandardEntitlement.CONNECTOR_UPDATE);\n \n         return fragment;\n     }\n@@ -257,7 +257,7 @@ public void onClickInternal(final AjaxRequestTarget target) {\n \n         delete.add(new ConfirmationModalBehavior());\n \n-        MetaDataRoleAuthorizationStrategy.authorize(delete, ENABLE, Entitlement.RESOURCE_DELETE);\n+        MetaDataRoleAuthorizationStrategy.authorize(delete, ENABLE, StandardEntitlement.RESOURCE_DELETE);\n \n         final AjaxLink<String> edit = new ClearIndicatingAjaxLink<String>(\"edit\", pageRef) {\n \n@@ -275,14 +275,14 @@ public void onClickInternal(final AjaxRequestTarget target) {\n                 modal.header(new Model<>(MessageFormat.format(getString(\"resource.edit\"), node.getKey())));\n \n                 MetaDataRoleAuthorizationStrategy.\n-                        authorize(modal.addSumbitButton(), ENABLE, Entitlement.RESOURCE_UPDATE);\n+                        authorize(modal.addSumbitButton(), ENABLE, StandardEntitlement.RESOURCE_UPDATE);\n \n                 modal.show(true);\n             }\n         };\n         fragment.add(edit);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(edit, ENABLE, Entitlement.RESOURCE_UPDATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(edit, ENABLE, StandardEntitlement.RESOURCE_UPDATE);\n \n         return fragment;\n     }"},{"sha":"fed5d29ecfc80b0e24b085ae6018928449368294","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/AttrColumn.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -28,7 +28,7 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.syncope.common.lib.to.AnyTO;\n \n-public class AttrColumn extends AbstractColumn<AnyTO, String> {\n+public class AttrColumn<T extends AnyTO> extends AbstractColumn<T, String> {\n \n     private static final long serialVersionUID = 2624734332447371372L;\n \n@@ -45,8 +45,9 @@ public AttrColumn(final String name, final SchemaType schemaType) {\n     }\n \n     @Override\n-    public void populateItem(final Item<ICellPopulator<AnyTO>> cellItem, final String componentId,\n-            final IModel<AnyTO> rowModel) {\n+    public void populateItem(\n+            final Item<ICellPopulator<T>> cellItem, final String componentId, final IModel<T> rowModel) {\n+\n         List<String> values = null;\n \n         switch (schemaType) {\n@@ -73,12 +74,10 @@ public void populateItem(final Item<ICellPopulator<AnyTO>> cellItem, final Strin\n \n         if (values == null || values.isEmpty()) {\n             cellItem.add(new Label(componentId, \"\"));\n+        } else if (values.size() == 1) {\n+            cellItem.add(new Label(componentId, values.get(0)));\n         } else {\n-            if (values.size() == 1) {\n-                cellItem.add(new Label(componentId, values.get(0)));\n-            } else {\n-                cellItem.add(new Label(componentId, values.toString()));\n-            }\n+            cellItem.add(new Label(componentId, values.toString()));\n         }\n     }\n }"},{"sha":"3afb43b6d1ed9a91b45e3c77f0b630b338bce40f","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksPanel.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -54,7 +54,7 @@ private ActionLinksPanel(final String componentId, final IModel<T> model, final\n         this.pageRef = pageRef;\n \n         setOutputMarkupId(true);\n-        \n+\n         super.add(new Fragment(\"panelClaim\", \"emptyFragment\", this));\n         super.add(new Fragment(\"panelManageResources\", \"emptyFragment\", this));\n         super.add(new Fragment(\"panelManageUsers\", \"emptyFragment\", this));\n@@ -601,18 +601,18 @@ public String getAjaxIndicatorMarkupId() {\n                 fragment.addOrReplace(\n                         new IndicatingOnConfirmAjaxLink<Void>(\"unassignLink\", pageRef, \"confirmUnassign\") {\n \n-                            private static final long serialVersionUID = -6957616042924610294L;\n+                    private static final long serialVersionUID = -6957616042924610294L;\n \n-                            @Override\n-                            protected void onClickInternal(final AjaxRequestTarget target) {\n-                                link.onClick(target, model.getObject());\n-                            }\n+                    @Override\n+                    protected void onClickInternal(final AjaxRequestTarget target) {\n+                        link.onClick(target, model.getObject());\n+                    }\n \n-                            @Override\n-                            public String getAjaxIndicatorMarkupId() {\n-                                return disableIndicator ? StringUtils.EMPTY : super.getAjaxIndicatorMarkupId();\n-                            }\n-                        }.feedbackPanelAutomaticReload(link.feedbackPanelAutomaticReload()));\n+                    @Override\n+                    public String getAjaxIndicatorMarkupId() {\n+                        return disableIndicator ? StringUtils.EMPTY : super.getAjaxIndicatorMarkupId();\n+                    }\n+                }.feedbackPanelAutomaticReload(link.feedbackPanelAutomaticReload()));\n                 break;\n \n             case ASSIGN:\n@@ -640,18 +640,18 @@ public String getAjaxIndicatorMarkupId() {\n                 fragment.addOrReplace(\n                         new IndicatingOnConfirmAjaxLink<Void>(\"deprovisionLink\", pageRef, \"confirmDeprovision\") {\n \n-                            private static final long serialVersionUID = -6957616042924610295L;\n+                    private static final long serialVersionUID = -6957616042924610295L;\n \n-                            @Override\n-                            protected void onClickInternal(final AjaxRequestTarget target) {\n-                                link.onClick(target, model.getObject());\n-                            }\n+                    @Override\n+                    protected void onClickInternal(final AjaxRequestTarget target) {\n+                        link.onClick(target, model.getObject());\n+                    }\n \n-                            @Override\n-                            public String getAjaxIndicatorMarkupId() {\n-                                return disableIndicator ? StringUtils.EMPTY : super.getAjaxIndicatorMarkupId();\n-                            }\n-                        }.feedbackPanelAutomaticReload(link.feedbackPanelAutomaticReload()));\n+                    @Override\n+                    public String getAjaxIndicatorMarkupId() {\n+                        return disableIndicator ? StringUtils.EMPTY : super.getAjaxIndicatorMarkupId();\n+                    }\n+                }.feedbackPanelAutomaticReload(link.feedbackPanelAutomaticReload()));\n                 break;\n \n             case PROVISION:\n@@ -927,8 +927,8 @@ public ActionLinksPanel<T> build(final String id) {\n          */\n         public ActionLinksPanel<T> build(final String id, final T modelObject) {\n             final ActionLinksPanel<T> panel = modelObject == null\n-                    ? new ActionLinksPanel<T>(id, new Model<T>(), this.pageRef)\n-                    : new ActionLinksPanel<T>(id, new Model<T>(modelObject), this.pageRef);\n+                    ? new ActionLinksPanel<>(id, new Model<T>(), this.pageRef)\n+                    : new ActionLinksPanel<>(id, new Model<>(modelObject), this.pageRef);\n \n             panel.setDisableIndicator(disableIndicator);\n "},{"sha":"b81a1bae6c2e1f7115f7828c3d0688642e05adc9","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDateFieldPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDateFieldPanel.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -68,6 +68,7 @@ public AjaxDateFieldPanel(final String id, final String name, final IModel<Date>\n \n                         // T0DO: trying to resolve issue 730.\n                         @Override\n+                        @SuppressWarnings(\"unchecked\")\n                         public <C> IConverter<C> getConverter(final Class<C> type) {\n                             return (IConverter<C>) new DateConverter() {\n "},{"sha":"c99532c87ed2ed43d46ecddc48e6a8ed31eb328b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncopeTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -59,6 +59,8 @@ public class SyncopeTO extends AbstractBaseBean {\n \n     private String passwordGenerator;\n \n+    private final List<String> entitlements = new ArrayList<>();\n+\n     private final List<String> reportlets = new ArrayList<>();\n \n     private final List<String> accountRules = new ArrayList<>();\n@@ -144,6 +146,13 @@ public void setPasswordGenerator(final String passwordGenerator) {\n         this.passwordGenerator = passwordGenerator;\n     }\n \n+    @XmlElementWrapper(name = \"entitlements\")\n+    @XmlElement(name = \"entitlement\")\n+    @JsonProperty(\"entitlements\")\n+    public List<String> getEntitlements() {\n+        return entitlements;\n+    }\n+\n     @XmlElementWrapper(name = \"reportlets\")\n     @XmlElement(name = \"reportlet\")\n     @JsonProperty(\"reportlets\")"},{"sha":"68ad19988ddb8505354cab8dde3e14929e0373ad","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -53,6 +53,7 @@ public enum ClientExceptionType {\n     InvalidVirSchema(Response.Status.BAD_REQUEST),\n     InvalidMapping(Response.Status.BAD_REQUEST),\n     InvalidRealm(Response.Status.BAD_REQUEST),\n+    InvalidRole(Response.Status.BAD_REQUEST),\n     InvalidUser(Response.Status.BAD_REQUEST),\n     InvalidExternalResource(Response.Status.BAD_REQUEST),\n     InvalidNotification(Response.Status.BAD_REQUEST),"},{"sha":"01ca83051825dcd3d5d0de6a9603c1f71c457c4d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java","status":"renamed","additions":6,"deletions":24,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -24,7 +24,7 @@\n import java.util.Set;\n import java.util.TreeSet;\n \n-public final class Entitlement {\n+public final class StandardEntitlement {\n \n     public static final String ANONYMOUS = \"ANONYMOUS\";\n \n@@ -108,18 +108,6 @@ public final class Entitlement {\n \n     public static final String GROUP_DELETE = \"GROUP_DELETE\";\n \n-    public static final String ANY_OBJECT_SEARCH = \"ANY_OBJECT_SEARCH\";\n-\n-    public static final String ANY_OBJECT_LIST = \"ANY_OBJECT_LIST\";\n-\n-    public static final String ANY_OBJECT_CREATE = \"ANY_OBJECT_CREATE\";\n-\n-    public static final String ANY_OBJECT_READ = \"ANY_OBJECT_READ\";\n-\n-    public static final String ANY_OBJECT_UPDATE = \"ANY_OBJECT_UPDATE\";\n-\n-    public static final String ANY_OBJECT_DELETE = \"ANY_OBJECT_DELETE\";\n-\n     public static final String RESOURCE_LIST = \"RESOURCE_LIST\";\n \n     public static final String RESOURCE_CREATE = \"RESOURCE_CREATE\";\n@@ -234,31 +222,25 @@ public final class Entitlement {\n \n     public static final String SECURITY_QUESTION_DELETE = \"SECURITY_QUESTION_DELETE\";\n \n-    public static final String ROUTE_READ = \"ROUTE_READ\";\n-\n-    public static final String ROUTE_LIST = \"ROUTE_LIST\";\n-\n-    public static final String ROUTE_UPDATE = \"ROUTE_UPDATE\";\n-\n-    private static final Set<String> ENTITLEMENTS;\n+    private static final Set<String> VALUES;\n \n     static {\n         Set<String> values = new TreeSet<>();\n-        for (Field field : Entitlement.class.getDeclaredFields()) {\n+        for (Field field : StandardEntitlement.class.getDeclaredFields()) {\n             if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n                 values.add(field.getName());\n             }\n         }\n         values.remove(ANONYMOUS);\n         values.remove(MUST_CHANGE_PASSWORD);\n-        ENTITLEMENTS = Collections.unmodifiableSet(values);\n+        VALUES = Collections.unmodifiableSet(values);\n     }\n \n     public static Set<String> values() {\n-        return ENTITLEMENTS;\n+        return VALUES;\n     }\n \n-    private Entitlement() {\n+    private StandardEntitlement() {\n         // private constructor for static utility class\n     }\n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/Entitlement.java"},{"sha":"9e72fc486ba92a0d00091db23e2c56b484c0ce71","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.GET;\n import javax.ws.rs.MatrixParam;\n@@ -44,6 +45,6 @@ public interface AnyObjectService extends AnyService<AnyObjectTO, AnyObjectPatch\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<AnyObjectTO> list(@MatrixParam(\"type\") String type, @BeanParam AnyListQuery listQuery);\n+    PagedResult<AnyObjectTO> list(@NotNull @MatrixParam(\"type\") String type, @BeanParam AnyListQuery listQuery);\n \n }"},{"sha":"99dc2f57a575018c6ca71ce24f8a6130e0769f59","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":55,"deletions":70,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -22,7 +22,6 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -31,27 +30,26 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.core.misc.EntitlementsHolder;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -74,68 +72,58 @@ public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectPatch\n     @Autowired\n     protected AnyObjectProvisioningManager provisioningManager;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public AnyObjectTO read(final Long key) {\n         return binder.getAnyObjectTO(key);\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     @Override\n     public int count(final List<String> realms) {\n-        return anyObjectDAO.count(getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realms));\n+        throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_LIST + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public List<AnyObjectTO> list(\n             final int page, final int size, final List<OrderByClause> orderBy,\n             final List<String> realms, final boolean details) {\n \n-        return list(null, page, size, orderBy, realms, details);\n+        throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_LIST + \"')\")\n     @Transactional(readOnly = true)\n-    public List<AnyObjectTO> list(final String type,\n-            final int page, final int size, final List<OrderByClause> orderBy,\n-            final List<String> realms, final boolean details) {\n-\n-        Set<String> effectiveRealms = getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realms);\n-\n-        return CollectionUtils.collect(StringUtils.isBlank(type)\n-                ? anyObjectDAO.findAll(effectiveRealms, page, size, orderBy)\n-                : anyObjectDAO.findAll(type, effectiveRealms, page, size, orderBy),\n-                new Transformer<AnyObject, AnyObjectTO>() {\n+    @Override\n+    public int searchCount(final SearchCond searchCond, final List<String> realms) {\n+        if (searchCond.hasAnyTypeCond() == null) {\n+            throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n+        }\n \n-                    @Override\n-                    public AnyObjectTO transform(final AnyObject input) {\n-                        return binder.getAnyObjectTO(input, details);\n-                    }\n-                }, new ArrayList<AnyObjectTO>());\n-    }\n+        Set<String> effectiveRealms = getEffectiveRealms(\n+                AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n+                        getFor(searchCond.hasAnyTypeCond(), EntitlementsHolder.AnyEntitlement.SEARCH)),\n+                realms);\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_SEARCH + \"')\")\n-    @Transactional(readOnly = true)\n-    @Override\n-    public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n-        return searchDAO.count(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_SEARCH), realms),\n-                searchCondition, AnyTypeKind.ANY_OBJECT);\n+        return searchDAO.count(effectiveRealms, searchCond, AnyTypeKind.ANY_OBJECT);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n-    public List<AnyObjectTO> search(final SearchCond searchCondition, final int page, final int size,\n+    public List<AnyObjectTO> search(final SearchCond searchCond, final int page, final int size,\n             final List<OrderByClause> orderBy, final List<String> realms, final boolean details) {\n \n+        if (searchCond.hasAnyTypeCond() == null) {\n+            throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n+        }\n+\n+        Set<String> effectiveRealms = getEffectiveRealms(\n+                AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n+                        getFor(searchCond.hasAnyTypeCond(), EntitlementsHolder.AnyEntitlement.SEARCH)),\n+                realms);\n+\n         List<AnyObject> matchingAnyObjects = searchDAO.search(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_SEARCH), realms),\n-                searchCondition, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n+                effectiveRealms, searchCond, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n         return CollectionUtils.collect(matchingAnyObjects, new Transformer<AnyObject, AnyObjectTO>() {\n \n             @Override\n@@ -145,61 +133,58 @@ public AnyObjectTO transform(final AnyObject input) {\n         }, new ArrayList<AnyObjectTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_CREATE + \"')\")\n     @Override\n     public ProvisioningResult<AnyObjectTO> create(final AnyObjectTO anyObjectTO, final boolean nullPriorityAsync) {\n         Pair<AnyObjectTO, List<LogicActions>> before = beforeCreate(anyObjectTO);\n \n         if (before.getLeft().getRealm() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n         }\n+        if (before.getLeft().getType() == null) {\n+            throw SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n+        }\n \n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_CREATE),\n+                AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n+                        getFor(before.getLeft().getType(), EntitlementsHolder.AnyEntitlement.CREATE)),\n                 Collections.singleton(before.getLeft().getRealm()));\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n \n-        if (before.getLeft().getType() == null) {\n-            throw SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n-        }\n-\n-        Pair<Long, List<PropagationStatus>> created =\n-                provisioningManager.create(before.getLeft(), nullPriorityAsync);\n+        Pair<Long, List<PropagationStatus>> created = provisioningManager.create(before.getLeft(), nullPriorityAsync);\n \n         return after(binder.getAnyObjectTO(created.getKey()), created.getRight(), before.getRight());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<AnyObjectTO> update(\n             final AnyObjectPatch anyObjectPatch, final boolean nullPriorityAsync) {\n \n         AnyObjectTO anyObjectTO = binder.getAnyObjectTO(anyObjectPatch.getKey());\n         Pair<AnyObjectPatch, List<LogicActions>> before = beforeUpdate(anyObjectPatch, anyObjectTO.getRealm());\n \n-        if (before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())) {\n-            Set<String> requestedRealms = new HashSet<>();\n-            requestedRealms.add(before.getLeft().getRealm().getValue());\n-            Set<String> effectiveRealms = getEffectiveRealms(\n-                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n-                    requestedRealms);\n-            securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n-        }\n+        String realm =\n+                before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())\n+                ? before.getLeft().getRealm().getValue()\n+                : anyObjectTO.getRealm();\n+        Set<String> effectiveRealms = getEffectiveRealms(\n+                AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n+                        getFor(anyObjectTO.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n+                Collections.singleton(realm));\n+        securityChecks(effectiveRealms, realm, before.getLeft().getKey());\n \n-        Pair<Long, List<PropagationStatus>> updated =\n-                provisioningManager.update(anyObjectPatch, nullPriorityAsync);\n+        Pair<Long, List<PropagationStatus>> updated = provisioningManager.update(anyObjectPatch, nullPriorityAsync);\n \n         return after(binder.getAnyObjectTO(updated.getKey()), updated.getRight(), before.getRight());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_DELETE + \"')\")\n     @Override\n     public ProvisioningResult<AnyObjectTO> delete(final Long key, final boolean nullPriorityAsync) {\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n         Pair<AnyObjectTO, List<LogicActions>> before = beforeDelete(anyObject);\n \n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_DELETE),\n+                AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n+                        getFor(before.getLeft().getType(), EntitlementsHolder.AnyEntitlement.DELETE)),\n                 Collections.singleton(before.getLeft().getRealm()));\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n \n@@ -211,13 +196,13 @@ public ProvisioningResult<AnyObjectTO> delete(final Long key, final boolean null\n         return after(anyObjectTO, statuses, before.getRight());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n     public AnyObjectTO unlink(final Long key, final Collection<String> resources) {\n         // security checks\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n+                        getFor(anyObject.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n                 Collections.singleton(anyObject.getRealm()));\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n@@ -234,13 +219,13 @@ public StringPatchItem transform(final String resource) {\n         return binder.getAnyObjectTO(provisioningManager.unlink(patch));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n     public AnyObjectTO link(final Long key, final Collection<String> resources) {\n         // security checks\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n+                        getFor(anyObject.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n                 Collections.singleton(anyObject.getRealm()));\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n@@ -257,15 +242,15 @@ public StringPatchItem transform(final String resource) {\n         return binder.getAnyObjectTO(provisioningManager.link(patch));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<AnyObjectTO> unassign(\n             final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n         // security checks\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n+                        getFor(anyObject.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n                 Collections.singleton(anyObject.getRealm()));\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n@@ -282,7 +267,6 @@ public StringPatchItem transform(final String resource) {\n         return update(patch, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<AnyObjectTO> assign(\n             final Long key,\n@@ -294,7 +278,8 @@ public ProvisioningResult<AnyObjectTO> assign(\n         // security checks\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n+                        getFor(anyObject.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n                 Collections.singleton(anyObject.getRealm()));\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n@@ -311,15 +296,15 @@ public StringPatchItem transform(final String resource) {\n         return update(patch, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<AnyObjectTO> deprovision(\n             final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n         // security checks\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n+                        getFor(anyObject.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n                 Collections.singleton(anyObject.getRealm()));\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n@@ -331,7 +316,6 @@ public ProvisioningResult<AnyObjectTO> deprovision(\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<AnyObjectTO> provision(\n             final Long key,\n@@ -343,7 +327,8 @@ public ProvisioningResult<AnyObjectTO> provision(\n         // security checks\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n+                        getFor(anyObject.getType(), EntitlementsHolder.AnyEntitlement.UPDATE)),\n                 Collections.singleton(anyObject.getRealm()));\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n "},{"sha":"6d090ddcef875006527827f7a5b889fe4bf462cb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -26,7 +26,7 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -67,12 +67,12 @@ public AnyTypeClassTO transform(final AnyTypeClass input) {\n         }, new ArrayList<AnyTypeClassTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_CREATE + \"')\")\n     public AnyTypeClassTO create(final AnyTypeClassTO anyTypeClassTO) {\n         return binder.getAnyTypeClassTO(anyTypeClassDAO.save(binder.create(anyTypeClassTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_UPDATE + \"')\")\n     public AnyTypeClassTO update(final AnyTypeClassTO anyTypeClassTO) {\n         AnyTypeClass anyType = anyTypeClassDAO.find(anyTypeClassTO.getKey());\n         if (anyType == null) {\n@@ -86,7 +86,7 @@ public AnyTypeClassTO update(final AnyTypeClassTO anyTypeClassTO) {\n         return binder.getAnyTypeClassTO(anyType);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_DELETE + \"')\")\n     public AnyTypeClassTO delete(final String key) {\n         AnyTypeClass anyTypeClass = anyTypeClassDAO.find(key);\n         if (anyTypeClass == null) {"},{"sha":"6e76e6004e53de4aa7959f039a6e936865032f64","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -28,7 +28,8 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.misc.EntitlementsHolder;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -69,26 +70,32 @@ public AnyTypeTO transform(final AnyType input) {\n         }, new ArrayList<AnyTypeTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPE_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_CREATE + \"')\")\n     public AnyTypeTO create(final AnyTypeTO anyTypeTO) {\n-        return binder.getAnyTypeTO(anyTypeDAO.save(binder.create(anyTypeTO)));\n+        AnyTypeTO result = binder.getAnyTypeTO(anyTypeDAO.save(binder.create(anyTypeTO)));\n+        EntitlementsHolder.getInstance().addFor(result.getKey());\n+        return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_UPDATE + \"')\")\n     public AnyTypeTO update(final AnyTypeTO anyTypeTO) {\n         AnyType anyType = anyTypeDAO.find(anyTypeTO.getKey());\n         if (anyType == null) {\n             LOG.error(\"Could not find anyType '\" + anyTypeTO.getKey() + \"'\");\n             throw new NotFoundException(String.valueOf(anyTypeTO.getKey()));\n         }\n \n+        EntitlementsHolder.getInstance().removeFor(anyTypeTO.getKey());\n+\n         binder.update(anyType, anyTypeTO);\n         anyType = anyTypeDAO.save(anyType);\n \n-        return binder.getAnyTypeTO(anyType);\n+        AnyTypeTO result = binder.getAnyTypeTO(anyType);\n+        EntitlementsHolder.getInstance().addFor(result.getKey());\n+        return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPE_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_DELETE + \"')\")\n     public AnyTypeTO delete(final String key) {\n         AnyType anyType = anyTypeDAO.find(key);\n         if (anyType == null) {\n@@ -105,6 +112,7 @@ public AnyTypeTO delete(final String key) {\n             sce.getElements().add(e.getMessage());\n             throw sce;\n         }\n+        EntitlementsHolder.getInstance().removeFor(deleted.getKey());\n         return deleted;\n     }\n "},{"sha":"4a7d4ca27fbe7a8e4f852e1036d7dfa89818126c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConfigurationLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -22,7 +22,7 @@\n import java.lang.reflect.Method;\n import java.util.List;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n@@ -59,7 +59,7 @@ public class ConfigurationLogic extends AbstractTransactionalLogic<AttrTO> {\n     @Autowired\n     private GroupWorkflowAdapter gwfAdapter;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONFIGURATION_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONFIGURATION_DELETE + \"')\")\n     public void delete(final String schema) {\n         CPlainAttr conf = confDAO.find(schema);\n         if (conf == null) {\n@@ -72,7 +72,7 @@ public void delete(final String schema) {\n         confDAO.delete(schema);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONFIGURATION_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONFIGURATION_LIST + \"')\")\n     public List<AttrTO> list() {\n         return binder.getConfTO(confDAO.get());\n     }\n@@ -97,12 +97,12 @@ public AttrTO get(final String schema) {\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONFIGURATION_SET + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONFIGURATION_SET + \"')\")\n     public void set(final AttrTO value) {\n         confDAO.save(binder.getAttribute(value));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONFIGURATION_EXPORT + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONFIGURATION_EXPORT + \"')\")\n     @Transactional(readOnly = true)\n     public void export(final OutputStream os) {\n         try {"},{"sha":"1d8f705461fc1823267544388ebacec0d9826785","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -75,7 +75,7 @@ public class ConnectorLogic extends AbstractTransactionalLogic<ConnInstanceTO> {\n     @Autowired\n     private ConnectorFactory connFactory;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_CREATE + \"')\")\n     public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = binder.getConnInstance(connInstanceTO);\n         try {\n@@ -91,7 +91,7 @@ public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n         return binder.getConnInstanceTO(connInstance);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_UPDATE + \"')\")\n     public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = binder.update(connInstanceTO.getKey(), connInstanceTO);\n         try {\n@@ -107,7 +107,7 @@ public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n         return binder.getConnInstanceTO(connInstance);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_DELETE + \"')\")\n     public ConnInstanceTO delete(final Long connInstanceKey) {\n         ConnInstance connInstance = connInstanceDAO.find(connInstanceKey);\n         if (connInstance == null) {\n@@ -130,32 +130,32 @@ public ConnInstanceTO delete(final Long connInstanceKey) {\n         return connToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ConnInstanceTO> list(final String lang) {\n         CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n \n         List<ConnInstanceTO> result = CollectionUtils.collect(connInstanceDAO.findAll().iterator(),\n                 new Transformer<ConnInstance, ConnInstanceTO>() {\n \n-                    @Override\n-                    public ConnInstanceTO transform(final ConnInstance connInstance) {\n-                        ConnInstanceTO result = null;\n-                        try {\n-                            result = binder.getConnInstanceTO(connInstance);\n-                        } catch (NotFoundException e) {\n-                            LOG.error(\"Connector '{}#{}' not found\",\n-                                    connInstance.getBundleName(), connInstance.getVersion());\n-                        }\n-\n-                        return result;\n-                    }\n-                }, new ArrayList<ConnInstanceTO>());\n+            @Override\n+            public ConnInstanceTO transform(final ConnInstance connInstance) {\n+                ConnInstanceTO result = null;\n+                try {\n+                    result = binder.getConnInstanceTO(connInstance);\n+                } catch (NotFoundException e) {\n+                    LOG.error(\"Connector '{}#{}' not found\",\n+                            connInstance.getBundleName(), connInstance.getVersion());\n+                }\n+\n+                return result;\n+            }\n+        }, new ArrayList<ConnInstanceTO>());\n         CollectionUtils.filter(result, PredicateUtils.notNullPredicate());\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ConnInstanceTO read(final Long connInstanceKey, final String lang) {\n         CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n@@ -168,7 +168,7 @@ public ConnInstanceTO read(final Long connInstanceKey, final String lang) {\n         return binder.getConnInstanceTO(connInstance);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public List<ConnBundleTO> getBundles(final String lang) {\n         if (StringUtils.isBlank(lang)) {\n@@ -203,7 +203,7 @@ public List<ConnBundleTO> getBundles(final String lang) {\n         return connectorBundleTOs;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n     public List<ConnIdObjectClassTO> buildObjectClassInfo(\n             final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n \n@@ -235,13 +235,13 @@ public List<ConnIdObjectClassTO> buildObjectClassInfo(\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void check(final ConnInstanceTO connInstanceTO) {\n         connFactory.createConnector(binder.getConnInstance(connInstanceTO)).test();\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ConnInstanceTO readByResource(final String resourceName, final String lang) {\n         CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n@@ -253,7 +253,7 @@ public ConnInstanceTO readByResource(final String resourceName, final String lan\n         return binder.getConnInstanceTO(connFactory.getConnector(resource).getConnInstance());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_RELOAD + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_RELOAD + \"')\")\n     @Transactional(readOnly = true)\n     public void reload() {\n         connFactory.unload();"},{"sha":"a1dbfab6d03f3de71f0095fc5ef275aa848313c6","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DomainLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -26,7 +26,7 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.DomainTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n@@ -48,7 +48,7 @@ public class DomainLogic extends AbstractTransactionalLogic<DomainTO> {\n     @Autowired\n     private DomainDAO domainDAO;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.DOMAIN_READ + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DOMAIN_READ + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public DomainTO read(final String key) {\n         Domain domain = domainDAO.find(key);\n@@ -72,7 +72,7 @@ public DomainTO transform(final Domain input) {\n         }, new ArrayList<DomainTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.DOMAIN_CREATE + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DOMAIN_CREATE + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public DomainTO create(final DomainTO domainTO) {\n         if (!domainsHolder.getDomains().keySet().contains(domainTO.getKey())) {\n@@ -82,7 +82,7 @@ public DomainTO create(final DomainTO domainTO) {\n         return binder.getDomainTO(domainDAO.save(binder.create(domainTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.DOMAIN_UPDATE + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DOMAIN_UPDATE + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public DomainTO update(final DomainTO domainTO) {\n         Domain domain = domainDAO.find(domainTO.getKey());\n@@ -97,7 +97,7 @@ public DomainTO update(final DomainTO domainTO) {\n         return binder.getDomainTO(domain);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.DOMAIN_DELETE + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DOMAIN_DELETE + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public DomainTO delete(final String key) {\n         Domain domain = domainDAO.find(key);"},{"sha":"d24b6781536bff58907493c61b96c6114e3f0834","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -40,8 +40,8 @@\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.misc.utils.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -95,25 +95,25 @@ public boolean evaluate(final String ownedRealm) {\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public GroupTO read(final Long key) {\n         return binder.getGroupTO(key);\n     }\n \n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")\n     @Transactional(readOnly = true)\n     public List<GroupTO> own() {\n         return CollectionUtils.collect(\n                 userDAO.findAllGroups(userDAO.find(AuthContextUtils.getUsername())),\n                 new Transformer<Group, GroupTO>() {\n \n-                    @Override\n-                    public GroupTO transform(final Group input) {\n-                        return binder.getGroupTO(input, true);\n-                    }\n-                }, new ArrayList<GroupTO>());\n+            @Override\n+            public GroupTO transform(final Group input) {\n+                return binder.getGroupTO(input, true);\n+            }\n+        }, new ArrayList<GroupTO>());\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n@@ -135,30 +135,30 @@ public List<GroupTO> list(\n                 page, size, orderBy),\n                 new Transformer<Group, GroupTO>() {\n \n-                    @Override\n-                    public GroupTO transform(final Group input) {\n-                        return binder.getGroupTO(input, details);\n-                    }\n-                }, new ArrayList<GroupTO>());\n+            @Override\n+            public GroupTO transform(final Group input) {\n+                return binder.getGroupTO(input, details);\n+            }\n+        }, new ArrayList<GroupTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_SEARCH + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n         return searchDAO.count(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_SEARCH), realms),\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_SEARCH), realms),\n                 searchCondition, AnyTypeKind.GROUP);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_SEARCH + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public List<GroupTO> search(final SearchCond searchCondition, final int page, final int size,\n             final List<OrderByClause> orderBy, final List<String> realms, final boolean details) {\n \n         List<Group> matchingGroups = searchDAO.search(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_SEARCH), realms),\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_SEARCH), realms),\n                 searchCondition, page, size, orderBy, AnyTypeKind.GROUP);\n         return CollectionUtils.collect(matchingGroups, new Transformer<Group, GroupTO>() {\n \n@@ -169,7 +169,7 @@ public GroupTO transform(final Group input) {\n         }, new ArrayList<GroupTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_CREATE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> create(final GroupTO groupTO, final boolean nullPriorityAsync) {\n         Pair<GroupTO, List<LogicActions>> before = beforeCreate(groupTO);\n@@ -179,7 +179,7 @@ public ProvisioningResult<GroupTO> create(final GroupTO groupTO, final boolean n\n         }\n \n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_CREATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_CREATE),\n                 Collections.singleton(before.getLeft().getRealm()));\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n \n@@ -189,7 +189,7 @@ public ProvisioningResult<GroupTO> create(final GroupTO groupTO, final boolean n\n         return after(binder.getGroupTO(created.getKey()), created.getRight(), before.getRight());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> update(final GroupPatch groupPatch, final boolean nullPriorityAsync) {\n         GroupTO groupTO = binder.getGroupTO(groupPatch.getKey());\n@@ -199,7 +199,7 @@ public ProvisioningResult<GroupTO> update(final GroupPatch groupPatch, final boo\n             Set<String> requestedRealms = new HashSet<>();\n             requestedRealms.add(before.getLeft().getRealm().getValue());\n             Set<String> effectiveRealms = getEffectiveRealms(\n-                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                    AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                     requestedRealms);\n             securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n         }\n@@ -209,14 +209,14 @@ public ProvisioningResult<GroupTO> update(final GroupPatch groupPatch, final boo\n         return after(binder.getGroupTO(updated.getKey()), updated.getRight(), before.getRight());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_DELETE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> delete(final Long key, final boolean nullPriorityAsync) {\n         GroupTO group = binder.getGroupTO(key);\n         Pair<GroupTO, List<LogicActions>> before = beforeDelete(group);\n \n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_DELETE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_DELETE),\n                 Collections.singleton(before.getLeft().getRealm()));\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n \n@@ -241,13 +241,13 @@ public String transform(final Group group) {\n         return after(groupTO, statuses, before.getRight());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public GroupTO unlink(final Long key, final Collection<String> resources) {\n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 Collections.singleton(group.getRealm()));\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n@@ -264,13 +264,13 @@ public StringPatchItem transform(final String resource) {\n         return binder.getGroupTO(provisioningManager.unlink(patch));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public GroupTO link(final Long key, final Collection<String> resources) {\n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 Collections.singleton(group.getRealm()));\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n@@ -287,15 +287,15 @@ public StringPatchItem transform(final String resource) {\n         return binder.getGroupTO(provisioningManager.link(patch));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> unassign(\n             final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 Collections.singleton(group.getRealm()));\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n@@ -312,7 +312,7 @@ public StringPatchItem transform(final String resource) {\n         return update(patch, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> assign(\n             final Long key,\n@@ -324,7 +324,7 @@ public ProvisioningResult<GroupTO> assign(\n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 Collections.singleton(group.getRealm()));\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n@@ -341,15 +341,15 @@ public StringPatchItem transform(final String resource) {\n         return update(patch, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> deprovision(\n             final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 Collections.singleton(group.getRealm()));\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n@@ -361,7 +361,7 @@ public ProvisioningResult<GroupTO> deprovision(\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> provision(\n             final Long key,\n@@ -373,7 +373,7 @@ public ProvisioningResult<GroupTO> provision(\n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 Collections.singleton(group.getRealm()));\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n "},{"sha":"7b2842d81533b80500384b1f5bceed28b478a408","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":22,"deletions":21,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -47,7 +47,7 @@\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -99,32 +99,32 @@ public LoggerTO transform(final Logger logger) {\n         }, new ArrayList<LoggerTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_LIST + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n     public List<LoggerTO> listLogs() {\n         return list(LoggerType.LOG);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.AUDIT_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AuditLoggerName> listAudits() {\n         return CollectionUtils.collect(\n                 IteratorUtils.filteredIterator(list(LoggerType.AUDIT).iterator(), PredicateUtils.notNullPredicate()),\n                 new Transformer<LoggerTO, AuditLoggerName>() {\n \n-                    @Override\n-                    public AuditLoggerName transform(final LoggerTO logger) {\n-                        AuditLoggerName result = null;\n-                        try {\n-                            result = AuditLoggerName.fromLoggerName(logger.getKey());\n-                        } catch (Exception e) {\n-                            LOG.warn(\"Unexpected audit logger name: {}\", logger.getKey(), e);\n-                        }\n+            @Override\n+            public AuditLoggerName transform(final LoggerTO logger) {\n+                AuditLoggerName result = null;\n+                try {\n+                    result = AuditLoggerName.fromLoggerName(logger.getKey());\n+                } catch (Exception e) {\n+                    LOG.warn(\"Unexpected audit logger name: {}\", logger.getKey(), e);\n+                }\n \n-                        return result;\n-                    }\n-                }, new ArrayList<AuditLoggerName>());\n+                return result;\n+            }\n+        }, new ArrayList<AuditLoggerName>());\n     }\n \n     private void throwInvalidLogger(final LoggerType type) {\n@@ -134,7 +134,7 @@ private void throwInvalidLogger(final LoggerType type) {\n         throw sce;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_READ + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_READ + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n     public LoggerTO readLog(final String name) {\n@@ -146,7 +146,7 @@ public LoggerTO readLog(final String name) {\n         throw new NotFoundException(\"Logger \" + name);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.AUDIT_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_READ + \"')\")\n     @Transactional(readOnly = true)\n     public LoggerTO readAudit(final String name) {\n         for (final AuditLoggerName logger : listAudits()) {\n@@ -192,13 +192,13 @@ private LoggerTO setLevel(final String name, final Level level, final LoggerType\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_SET_LEVEL + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_SET_LEVEL + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public LoggerTO setLogLevel(final String name, final Level level) {\n         return setLevel(name, level, LoggerType.LOG);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.AUDIT_ENABLE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_ENABLE + \"')\")\n     public void enableAudit(final AuditLoggerName auditLoggerName) {\n         try {\n             setLevel(auditLoggerName.toLoggerName(), Level.DEBUG, LoggerType.AUDIT);\n@@ -234,13 +234,13 @@ private LoggerTO delete(final String name, final LoggerType expectedType) {\n         return loggerToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_DELETE + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_DELETE + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public LoggerTO deleteLog(final String name) {\n         return delete(name, LoggerType.LOG);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.AUDIT_DISABLE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_DISABLE + \"')\")\n     public void disableAudit(final AuditLoggerName auditLoggerName) {\n         try {\n             delete(auditLoggerName.toLoggerName(), LoggerType.AUDIT);\n@@ -253,7 +253,8 @@ public void disableAudit(final AuditLoggerName auditLoggerName) {\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.AUDIT_LIST + \"') or hasRole('\" + Entitlement.NOTIFICATION_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_LIST + \"') or hasRole('\"\n+            + StandardEntitlement.NOTIFICATION_LIST + \"')\")\n     public List<EventCategoryTO> listAuditEvents() {\n         // use set to avoid duplications or null elements\n         Set<EventCategoryTO> events = new HashSet<>();"},{"sha":"fc4c8ac78b9453ee9d7c25f58d505f465e5f8f85","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -25,7 +25,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.NotificationTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n@@ -43,7 +43,7 @@ public class NotificationLogic extends AbstractTransactionalLogic<NotificationTO\n     @Autowired\n     private NotificationDataBinder binder;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.NOTIFICATION_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_READ + \"')\")\n     public NotificationTO read(final Long notificationKey) {\n         Notification notification = notificationDAO.find(notificationKey);\n         if (notification == null) {\n@@ -55,7 +55,7 @@ public NotificationTO read(final Long notificationKey) {\n         return binder.getNotificationTO(notification);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.NOTIFICATION_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_LIST + \"')\")\n     public List<NotificationTO> list() {\n         return CollectionUtils.collect(notificationDAO.findAll(), new Transformer<Notification, NotificationTO>() {\n \n@@ -66,12 +66,12 @@ public NotificationTO transform(final Notification input) {\n         }, new ArrayList<NotificationTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.NOTIFICATION_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_CREATE + \"')\")\n     public NotificationTO create(final NotificationTO notificationTO) {\n         return binder.getNotificationTO(notificationDAO.save(binder.create(notificationTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.NOTIFICATION_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_UPDATE + \"')\")\n     public NotificationTO update(final NotificationTO notificationTO) {\n         Notification notification = notificationDAO.find(notificationTO.getKey());\n         if (notification == null) {\n@@ -85,7 +85,7 @@ public NotificationTO update(final NotificationTO notificationTO) {\n         return binder.getNotificationTO(notification);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.NOTIFICATION_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_DELETE + \"')\")\n     public NotificationTO delete(final Long notificationKey) {\n         Notification notification = notificationDAO.find(notificationKey);\n         if (notification == null) {"},{"sha":"8f8baa5d0474f3ba2be524a58568d9fdd1ef88cf","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -28,8 +28,8 @@\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n@@ -50,7 +50,7 @@ public class PolicyLogic extends AbstractTransactionalLogic<AbstractPolicyTO> {\n     @Autowired\n     private PolicyDataBinder binder;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_CREATE + \"')\")\n     public <T extends AbstractPolicyTO> T create(final T policyTO) {\n         return binder.getPolicyTO(policyDAO.save(binder.getPolicy(null, policyTO)));\n     }\n@@ -61,7 +61,7 @@ private <T extends AbstractPolicyTO, K extends Policy> T update(final T policyTO\n         return binder.getPolicyTO(savedPolicy);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_UPDATE + \"')\")\n     public PasswordPolicyTO update(final PasswordPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n         if (!(policy instanceof PasswordPolicy)) {\n@@ -71,7 +71,7 @@ public PasswordPolicyTO update(final PasswordPolicyTO policyTO) {\n         return update(policyTO, policy);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_UPDATE + \"')\")\n     public AccountPolicyTO update(final AccountPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n         if (!(policy instanceof AccountPolicy)) {\n@@ -81,7 +81,7 @@ public AccountPolicyTO update(final AccountPolicyTO policyTO) {\n         return update(policyTO, policy);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_UPDATE + \"')\")\n     public SyncPolicyTO update(final SyncPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n         if (!(policy instanceof SyncPolicy)) {\n@@ -91,7 +91,7 @@ public SyncPolicyTO update(final SyncPolicyTO policyTO) {\n         return update(policyTO, policy);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_LIST + \"')\")\n     public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n         return CollectionUtils.collect(policyDAO.find(type), new Transformer<Policy, T>() {\n \n@@ -102,7 +102,7 @@ public T transform(final Policy input) {\n         }, new ArrayList<T>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_READ + \"')\")\n     public <T extends AbstractPolicyTO> T read(final Long key) {\n         Policy policy = policyDAO.find(key);\n         if (policy == null) {\n@@ -112,7 +112,7 @@ public <T extends AbstractPolicyTO> T read(final Long key) {\n         return binder.getPolicyTO(policy);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_DELETE + \"')\")\n     public <T extends AbstractPolicyTO> T delete(final Long key) {\n         Policy policy = policyDAO.find(key);\n         if (policy == null) {"},{"sha":"0b27a0f4edafe2a8a2732d16303fc79b9d387c9f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -25,7 +25,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -43,7 +43,7 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {\n     @Autowired\n     private RealmDataBinder binder;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REALM_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_LIST + \"')\")\n     public List<RealmTO> list(final String fullPath) {\n         Realm realm = realmDAO.find(fullPath);\n         if (realm == null) {\n@@ -61,12 +61,12 @@ public RealmTO transform(final Realm input) {\n         }, new ArrayList<RealmTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REALM_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_CREATE + \"')\")\n     public RealmTO create(final String parentPath, final RealmTO realmTO) {\n         return binder.getRealmTO(realmDAO.save(binder.create(parentPath, realmTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REALM_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_UPDATE + \"')\")\n     public RealmTO update(final RealmTO realmTO) {\n         Realm realm = realmDAO.find(realmTO.getFullPath());\n         if (realm == null) {\n@@ -81,7 +81,7 @@ public RealmTO update(final RealmTO realmTO) {\n         return binder.getRealmTO(realm);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REALM_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_DELETE + \"')\")\n     public RealmTO delete(final String fullPath) {\n         Realm realm = realmDAO.find(fullPath);\n         if (realm == null) {"},{"sha":"3c6bfa655365fa8047a8fb951eebdacb381224e6","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RelationshipTypeLogic.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -26,7 +26,7 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n@@ -44,7 +44,7 @@ public class RelationshipTypeLogic extends AbstractTransactionalLogic<Relationsh\n     @Autowired\n     private RelationshipTypeDAO relationshipTypeDAO;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.RELATIONSHIPTYPE_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_READ + \"')\")\n     public RelationshipTypeTO read(final String key) {\n         RelationshipType relationshipType = relationshipTypeDAO.find(key);\n         if (relationshipType == null) {\n@@ -56,24 +56,24 @@ public RelationshipTypeTO read(final String key) {\n         return binder.getRelationshipTypeTO(relationshipType);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.RELATIONSHIPTYPE_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_LIST + \"')\")\n     public List<RelationshipTypeTO> list() {\n         return CollectionUtils.collect(relationshipTypeDAO.findAll(),\n                 new Transformer<RelationshipType, RelationshipTypeTO>() {\n \n-                    @Override\n-                    public RelationshipTypeTO transform(final RelationshipType input) {\n-                        return binder.getRelationshipTypeTO(input);\n-                    }\n-                }, new ArrayList<RelationshipTypeTO>());\n+            @Override\n+            public RelationshipTypeTO transform(final RelationshipType input) {\n+                return binder.getRelationshipTypeTO(input);\n+            }\n+        }, new ArrayList<RelationshipTypeTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.RELATIONSHIPTYPE_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_CREATE + \"')\")\n     public RelationshipTypeTO create(final RelationshipTypeTO relationshipTypeTO) {\n         return binder.getRelationshipTypeTO(relationshipTypeDAO.save(binder.create(relationshipTypeTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.RELATIONSHIPTYPE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_UPDATE + \"')\")\n     public RelationshipTypeTO update(final RelationshipTypeTO relationshipTypeTO) {\n         RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTypeTO.getKey());\n         if (relationshipType == null) {\n@@ -87,7 +87,7 @@ public RelationshipTypeTO update(final RelationshipTypeTO relationshipTypeTO) {\n         return binder.getRelationshipTypeTO(relationshipType);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.RELATIONSHIPTYPE_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_DELETE + \"')\")\n     public RelationshipTypeTO delete(final String key) {\n         RelationshipType relationshipType = relationshipTypeDAO.find(key);\n         if (relationshipType == null) {"},{"sha":"38a14635adfe3c4eb42b7c4bb03b5928a26a7d3d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -55,9 +55,9 @@\n import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n import org.apache.syncope.core.logic.report.TextSerializer;\n import org.apache.syncope.common.lib.to.AbstractExecTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.xmlgraphics.util.MimeConstants;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n@@ -84,7 +84,7 @@ public class ReportLogic extends AbstractJobLogic<ReportTO> {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_CREATE + \"')\")\n     public ReportTO create(final ReportTO reportTO) {\n         Report report = entityFactory.newEntity(Report.class);\n         binder.getReport(report, reportTO);\n@@ -103,7 +103,7 @@ public ReportTO create(final ReportTO reportTO) {\n         return binder.getReportTO(report);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_UPDATE + \"')\")\n     public ReportTO update(final ReportTO reportTO) {\n         Report report = reportDAO.find(reportTO.getKey());\n         if (report == null) {\n@@ -126,7 +126,7 @@ public ReportTO update(final ReportTO reportTO) {\n         return binder.getReportTO(report);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n     public List<ReportTO> list() {\n         return CollectionUtils.collect(reportDAO.findAll(),\n                 new Transformer<Report, ReportTO>() {\n@@ -138,7 +138,7 @@ public ReportTO transform(final Report input) {\n                 }, new ArrayList<ReportTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n     public ReportTO read(final Long reportKey) {\n         Report report = reportDAO.find(reportKey);\n         if (report == null) {\n@@ -147,7 +147,7 @@ public ReportTO read(final Long reportKey) {\n         return binder.getReportTO(report);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ReportExecTO readExecution(final Long executionKey) {\n         ReportExec reportExec = reportExecDAO.find(executionKey);\n@@ -157,7 +157,7 @@ public ReportExecTO readExecution(final Long executionKey) {\n         return binder.getReportExecTO(reportExec);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n     public void exportExecutionResult(final OutputStream os, final ReportExec reportExec,\n             final ReportExecExportFormat format) {\n \n@@ -223,7 +223,7 @@ public void exportExecutionResult(final OutputStream os, final ReportExec report\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n     public ReportExec getAndCheckReportExec(final Long executionKey) {\n         ReportExec reportExec = reportExecDAO.find(executionKey);\n         if (reportExec == null) {\n@@ -239,7 +239,7 @@ public ReportExec getAndCheckReportExec(final Long executionKey) {\n         return reportExec;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_EXECUTE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n     public ReportExecTO execute(final Long reportKey) {\n         Report report = reportDAO.find(reportKey);\n         if (report == null) {\n@@ -268,7 +268,7 @@ public ReportExecTO execute(final Long reportKey) {\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n     public ReportTO delete(final Long reportKey) {\n         Report report = reportDAO.find(reportKey);\n         if (report == null) {\n@@ -281,7 +281,7 @@ public ReportTO delete(final Long reportKey) {\n         return deletedReport;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n     public ReportExecTO deleteExecution(final Long executionKey) {\n         ReportExec reportExec = reportExecDAO.find(executionKey);\n         if (reportExec == null) {\n@@ -324,12 +324,12 @@ protected ReportTO resolveReference(final Method method, final Object... args)\n     }\n \n     @Override\n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n     public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n         return super.listJobs(type, reference);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_EXECUTE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n     public void actionJob(final Long reportKey, final JobAction action) {\n         Report report = reportDAO.find(reportKey);\n         if (report == null) {"},{"sha":"8825e67e4197ba90f94691026e94601c2214b34d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -109,7 +109,7 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private ConnectorFactory connFactory;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_CREATE + \"')\")\n     public ResourceTO create(final ResourceTO resourceTO) {\n         if (StringUtils.isBlank(resourceTO.getKey())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n@@ -135,7 +135,7 @@ public ResourceTO create(final ResourceTO resourceTO) {\n         return binder.getResourceTO(resource);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_UPDATE + \"')\")\n     public ResourceTO update(final ResourceTO resourceTO) {\n         ExternalResource resource = resourceDAO.find(resourceTO.getKey());\n         if (resource == null) {\n@@ -156,7 +156,7 @@ public ResourceTO update(final ResourceTO resourceTO) {\n         return binder.getResourceTO(resource);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_DELETE + \"')\")\n     public ResourceTO delete(final String resourceName) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n@@ -170,7 +170,7 @@ public ResourceTO delete(final String resourceName) {\n         return resourceToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ResourceTO read(final String resourceName) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n@@ -212,7 +212,7 @@ private Triple<ExternalResource, AnyType, Provision> connObjectInit(\n         return ImmutableTriple.of(resource, anyType, provision);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n     @Transactional(readOnly = true)\n     public ConnObjectTO readConnObject(final String key, final String anyTypeKey, final Long anyKey) {\n         Triple<ExternalResource, AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n@@ -268,7 +268,7 @@ public ConnObjectTO readConnObject(final String key, final String anyTypeKey, fi\n         return connObjectUtils.getConnObjectTO(connectorObject);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_LIST_CONNOBJECT + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_LIST_CONNOBJECT + \"')\")\n     @Transactional(readOnly = true)\n     public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key, final String anyTypeKey,\n             final Integer size, final String pagedResultsCookie, final List<OrderByClause> orderBy) {\n@@ -304,7 +304,7 @@ public boolean handle(final ConnectorObject connectorObject) {\n         return ImmutablePair.of(searchResult[0], connObjects);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void check(final ResourceTO resourceTO) {\n         ConnInstance connInstance = connInstanceDAO.find(resourceTO.getConnector());"},{"sha":"60f65a0b4aba736d1e2a43cc240101e55c8437fe","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -25,7 +25,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.RoleTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n@@ -43,7 +43,7 @@ public class RoleLogic extends AbstractTransactionalLogic<RoleTO> {\n     @Autowired\n     private RoleDAO roleDAO;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ROLE_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_READ + \"')\")\n     public RoleTO read(final Long roleKey) {\n         Role role = roleDAO.find(roleKey);\n         if (role == null) {\n@@ -55,7 +55,7 @@ public RoleTO read(final Long roleKey) {\n         return binder.getRoleTO(role);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ROLE_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_LIST + \"')\")\n     public List<RoleTO> list() {\n         return CollectionUtils.collect(roleDAO.findAll(), new Transformer<Role, RoleTO>() {\n \n@@ -66,12 +66,12 @@ public RoleTO transform(final Role input) {\n         }, new ArrayList<RoleTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ROLE_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_CREATE + \"')\")\n     public RoleTO create(final RoleTO roleTO) {\n         return binder.getRoleTO(roleDAO.save(binder.create(roleTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ROLE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_UPDATE + \"')\")\n     public RoleTO update(final RoleTO roleTO) {\n         Role role = roleDAO.find(roleTO.getKey());\n         if (role == null) {\n@@ -85,7 +85,7 @@ public RoleTO update(final RoleTO roleTO) {\n         return binder.getRoleTO(role);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ROLE_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_DELETE + \"')\")\n     public RoleTO delete(final Long roleKey) {\n         Role role = roleDAO.find(roleKey);\n         if (role == null) {"},{"sha":"a57f2e1a2babc8355f3c2b54193f12443ed7cc22","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -31,8 +31,8 @@\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n@@ -89,7 +89,7 @@ private boolean doesSchemaExist(final SchemaType schemaType, final String name)\n         return found;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.SCHEMA_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SCHEMA_CREATE + \"')\")\n     @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractSchemaTO> T create(final SchemaType schemaType, final T schemaTO) {\n         if (StringUtils.isBlank(schemaTO.getKey())) {\n@@ -122,7 +122,7 @@ public <T extends AbstractSchemaTO> T create(final SchemaType schemaType, final\n         return created;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.SCHEMA_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SCHEMA_DELETE + \"')\")\n     public void delete(final SchemaType schemaType, final String schemaName) {\n         if (!doesSchemaExist(schemaType, schemaName)) {\n             throw new NotFoundException(schemaType + \"/\" + schemaName);\n@@ -154,23 +154,23 @@ public <T extends AbstractSchemaTO> List<T> list(final SchemaType schemaType, fi\n                         clazz == null ? virSchemaDAO.findAll() : virSchemaDAO.findByAnyTypeClass(clazz),\n                         new Transformer<VirSchema, T>() {\n \n-                            @Override\n-                            public T transform(final VirSchema input) {\n-                                return (T) binder.getVirSchemaTO(input);\n-                            }\n-                        }, new ArrayList<T>());\n+                    @Override\n+                    public T transform(final VirSchema input) {\n+                        return (T) binder.getVirSchemaTO(input);\n+                    }\n+                }, new ArrayList<T>());\n                 break;\n \n             case DERIVED:\n                 result = CollectionUtils.collect(\n                         clazz == null ? derSchemaDAO.findAll() : derSchemaDAO.findByAnyTypeClass(clazz),\n                         new Transformer<DerSchema, T>() {\n \n-                            @Override\n-                            public T transform(final DerSchema input) {\n-                                return (T) binder.getDerSchemaTO(input);\n-                            }\n-                        }, new ArrayList<T>());\n+                    @Override\n+                    public T transform(final DerSchema input) {\n+                        return (T) binder.getDerSchemaTO(input);\n+                    }\n+                }, new ArrayList<T>());\n                 break;\n \n             case PLAIN:\n@@ -179,11 +179,11 @@ public T transform(final DerSchema input) {\n                         clazz == null ? plainSchemaDAO.findAll() : plainSchemaDAO.findByAnyTypeClass(clazz),\n                         new Transformer<PlainSchema, T>() {\n \n-                            @Override\n-                            public T transform(final PlainSchema input) {\n-                                return (T) binder.getPlainSchemaTO(input);\n-                            }\n-                        }, new ArrayList<T>());\n+                    @Override\n+                    public T transform(final PlainSchema input) {\n+                        return (T) binder.getPlainSchemaTO(input);\n+                    }\n+                }, new ArrayList<T>());\n         }\n \n         return result;\n@@ -225,7 +225,7 @@ public <T extends AbstractSchemaTO> T read(final SchemaType schemaType, final St\n         return read;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.SCHEMA_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SCHEMA_UPDATE + \"')\")\n     public <T extends AbstractSchemaTO> void update(final SchemaType schemaType, final T schemaTO) {\n         if (!doesSchemaExist(schemaType, schemaTO.getKey())) {\n             throw new NotFoundException(schemaType + \"/\" + schemaTO.getKey());"},{"sha":"fb45942ce5e9f17d7f6ab6dba25f9a78abce3087","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SecurityQuestionLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -25,7 +25,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -72,12 +72,12 @@ public SecurityQuestionTO read(final Long securityQuestionId) {\n         return binder.getSecurityQuestionTO(securityQuestion);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.SECURITY_QUESTION_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SECURITY_QUESTION_CREATE + \"')\")\n     public SecurityQuestionTO create(final SecurityQuestionTO securityQuestionTO) {\n         return binder.getSecurityQuestionTO(securityQuestionDAO.save(binder.create(securityQuestionTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.SECURITY_QUESTION_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SECURITY_QUESTION_UPDATE + \"')\")\n     public SecurityQuestionTO update(final SecurityQuestionTO securityQuestionTO) {\n         SecurityQuestion securityQuestion = securityQuestionDAO.find(securityQuestionTO.getKey());\n         if (securityQuestion == null) {\n@@ -92,7 +92,7 @@ public SecurityQuestionTO update(final SecurityQuestionTO securityQuestionTO) {\n         return binder.getSecurityQuestionTO(securityQuestion);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.SECURITY_QUESTION_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SECURITY_QUESTION_DELETE + \"')\")\n     public SecurityQuestionTO delete(final Long securityQuestionId) {\n         SecurityQuestion securityQuestion = securityQuestionDAO.find(securityQuestionId);\n         if (securityQuestion == null) {\n@@ -106,7 +106,7 @@ public SecurityQuestionTO delete(final Long securityQuestionId) {\n         return deleted;\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n     public SecurityQuestionTO read(final String username) {\n         if (username == null) {\n             throw new NotFoundException(\"Null username\");"},{"sha":"dcd24adb4e919029a5bc15d85e41f7212df9349d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import org.apache.syncope.core.misc.EntitlementsHolder;\n import java.io.IOException;\n import java.lang.reflect.Method;\n import java.net.URI;\n@@ -128,6 +129,8 @@ public SyncopeTO info() {\n         syncopeTO.setVirAttrCache(virAttrCache.getClass().getName());\n         syncopeTO.setPasswordGenerator(passwordGenerator.getClass().getName());\n \n+        syncopeTO.getEntitlements().addAll(EntitlementsHolder.getInstance().getValues());\n+\n         syncopeTO.getReportlets().addAll(implLookup.getClassNames(Type.REPORTLET));\n         syncopeTO.getAccountRules().addAll(implLookup.getClassNames(Type.ACCOUNT_RULE));\n         syncopeTO.getPasswordRules().addAll(implLookup.getClassNames(Type.PASSWORD_RULE));"},{"sha":"3e716d62ff55f2714f4c88fa794f402c7d3e980d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -34,9 +34,9 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n@@ -94,7 +94,7 @@ public class TaskLogic extends AbstractJobLogic<AbstractTaskTO> {\n     @Autowired\n     private TaskUtilsFactory taskUtilsFactory;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_CREATE + \"')\")\n     public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n         TaskUtils taskUtils = taskUtilsFactory.getInstance(taskTO);\n \n@@ -116,12 +116,12 @@ public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n         return binder.getTaskTO(task, taskUtils);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_UPDATE + \"')\")\n     public SyncTaskTO updateSync(final SyncTaskTO taskTO) {\n         return updateSched(taskTO);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_UPDATE + \"')\")\n     public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n         SchedTask task = taskDAO.find(taskTO.getKey());\n         if (task == null) {\n@@ -148,14 +148,14 @@ public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n         return binder.getTaskTO(task, taskUtils);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n     public int count(\n             final TaskType type, final String resource, final AnyTypeKind anyTypeKind, final Long anyTypeKey) {\n \n         return taskDAO.count(type, resourceDAO.find(resource), anyTypeKind, anyTypeKey);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n     @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractTaskTO> List<T> list(\n             final TaskType type, final String resource, final AnyTypeKind anyTypeKind, final Long anyTypeKey,\n@@ -174,7 +174,7 @@ public T transform(final Task task) {\n                 }, new ArrayList<T>());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n     public <T extends AbstractTaskTO> T read(final Long taskKey) {\n         Task task = taskDAO.find(taskKey);\n         if (task == null) {\n@@ -183,7 +183,7 @@ public <T extends AbstractTaskTO> T read(final Long taskKey) {\n         return binder.getTaskTO(task, taskUtilsFactory.getInstance(task));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n     public TaskExecTO readExecution(final Long execKey) {\n         TaskExec taskExec = taskExecDAO.find(execKey);\n         if (taskExec == null) {\n@@ -192,7 +192,7 @@ public TaskExecTO readExecution(final Long execKey) {\n         return binder.getTaskExecTO(taskExec);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_EXECUTE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n     public TaskExecTO execute(final Long taskKey, final boolean dryRun) {\n         Task task = taskDAO.find(taskKey);\n         if (task == null) {\n@@ -245,7 +245,7 @@ public TaskExecTO execute(final Long taskKey, final boolean dryRun) {\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n     public <T extends AbstractTaskTO> T delete(final Long taskKey) {\n         Task task = taskDAO.find(taskKey);\n         if (task == null) {\n@@ -266,7 +266,7 @@ public <T extends AbstractTaskTO> T delete(final Long taskKey) {\n         return taskToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n     public TaskExecTO deleteExecution(final Long execKey) {\n         TaskExec taskExec = taskExecDAO.find(execKey);\n         if (taskExec == null) {\n@@ -310,12 +310,12 @@ protected AbstractTaskTO resolveReference(final Method method, final Object... a\n     }\n \n     @Override\n-    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n     public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n         return super.listJobs(type, reference);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_EXECUTE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n     public void actionJob(final Long taskKey, final JobAction action) {\n         Task task = taskDAO.find(taskKey);\n         if (task == null) {"},{"sha":"e505f3cee318e4edb20fe8f9178773da387dc7d6","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -42,8 +42,8 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -87,43 +87,43 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {\n     @Autowired\n     protected SyncopeLogic syncopeLogic;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_READ + \"')\")\n     @Transactional(readOnly = true)\n     public String getUsername(final Long key) {\n         return binder.getUserTO(key).getUsername();\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_READ + \"')\")\n     @Transactional(readOnly = true)\n     public Long getKey(final String username) {\n         return binder.getUserTO(username).getKey();\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_LIST + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public int count(final List<String> realms) {\n         return userDAO.count(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_LIST), realms));\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_LIST), realms));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_LIST + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public List<UserTO> list(\n             final int page, final int size, final List<OrderByClause> orderBy,\n             final List<String> realms, final boolean details) {\n \n         return CollectionUtils.collect(userDAO.findAll(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_LIST), realms),\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_LIST), realms),\n                 page, size, orderBy),\n                 new Transformer<User, UserTO>() {\n \n-                    @Override\n-                    public UserTO transform(final User input) {\n-                        return binder.returnUserTO(binder.getUserTO(input, details));\n-                    }\n-                }, new ArrayList<UserTO>());\n+            @Override\n+            public UserTO transform(final User input) {\n+                return binder.returnUserTO(binder.getUserTO(input, details));\n+            }\n+        }, new ArrayList<UserTO>());\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n@@ -134,30 +134,30 @@ public Pair<String, UserTO> readSelf() {\n                 binder.returnUserTO(binder.getAuthenticatedUserTO()));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO read(final Long key) {\n         return binder.returnUserTO(binder.getUserTO(key));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_SEARCH + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n         return searchDAO.count(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_SEARCH), realms),\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realms),\n                 searchCondition, AnyTypeKind.USER);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_SEARCH + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public List<UserTO> search(final SearchCond searchCondition, final int page, final int size,\n             final List<OrderByClause> orderBy, final List<String> realms, final boolean details) {\n \n         List<User> matchingUsers = searchDAO.search(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_SEARCH), realms),\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realms),\n                 searchCondition, page, size, orderBy, AnyTypeKind.USER);\n         return CollectionUtils.collect(matchingUsers, new Transformer<User, UserTO>() {\n \n@@ -168,20 +168,20 @@ public UserTO transform(final User input) {\n         }, new ArrayList<UserTO>());\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n     public ProvisioningResult<UserTO> selfCreate(\n             final UserTO userTO, final boolean storePassword, final boolean nullPriorityAsync) {\n \n         return doCreate(userTO, storePassword, true, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_CREATE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> create(final UserTO userTO, final boolean nullPriorityAsync) {\n         return doCreate(userTO, true, false, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_CREATE + \"')\")\n     public ProvisioningResult<UserTO> create(\n             final UserTO userTO, final boolean storePassword, final boolean nullPriorityAsync) {\n \n@@ -202,7 +202,7 @@ protected ProvisioningResult<UserTO> doCreate(\n \n         if (!self) {\n             Set<String> effectiveRealms = getEffectiveRealms(\n-                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_CREATE),\n+                    AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_CREATE),\n                     Collections.singleton(before.getLeft().getRealm()));\n             securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n         }\n@@ -213,14 +213,14 @@ protected ProvisioningResult<UserTO> doCreate(\n         return after(binder.returnUserTO(binder.getUserTO(created.getKey())), created.getRight(), before.getRight());\n     }\n \n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")\n     public ProvisioningResult<UserTO> selfUpdate(final UserPatch userPatch, final boolean nullPriorityAsync) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n         userPatch.setKey(userTO.getKey());\n         return doUpdate(userPatch, true, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> update(final UserPatch userPatch, final boolean nullPriorityAsync) {\n         return doUpdate(userPatch, false, nullPriorityAsync);\n@@ -239,7 +239,7 @@ protected ProvisioningResult<UserTO> doUpdate(\n             Set<String> requestedRealms = new HashSet<>();\n             requestedRealms.add(before.getLeft().getRealm().getValue());\n             Set<String> effectiveRealms = getEffectiveRealms(\n-                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                    AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                     requestedRealms);\n             securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n         }\n@@ -273,12 +273,12 @@ protected Pair<Long, List<PropagationStatus>> setStatusOnWfAdapter(\n         return updated;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n     public ProvisioningResult<UserTO> status(final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n         // security checks\n         UserTO toUpdate = binder.getUserTO(statusPatch.getKey());\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 Collections.singleton(toUpdate.getRealm()));\n         securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n \n@@ -290,15 +290,15 @@ public ProvisioningResult<UserTO> status(final StatusPatch statusPatch, final bo\n                 Collections.<LogicActions>emptyList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.MUST_CHANGE_PASSWORD + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"')\")\n     public ProvisioningResult<UserTO> changePassword(final String password, final boolean nullPriorityAsync) {\n         UserPatch userPatch = new UserPatch();\n         userPatch.setPassword(new PasswordPatch.Builder().value(password).build());\n         userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(false).build());\n         return selfUpdate(userPatch, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n     @Transactional\n     public void requestPasswordReset(final String username, final String securityAnswer) {\n         if (username == null) {\n@@ -319,7 +319,7 @@ public void requestPasswordReset(final String username, final String securityAns\n         provisioningManager.requestPasswordReset(user.getKey());\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n     @Transactional\n     public void confirmPasswordReset(final String token, final String password) {\n         User user = userDAO.findByToken(token);\n@@ -329,13 +329,13 @@ public void confirmPasswordReset(final String token, final String password) {\n         provisioningManager.confirmPasswordReset(user.getKey(), token, password);\n     }\n \n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")\n     public ProvisioningResult<UserTO> selfDelete(final boolean nullPriorityAsync) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n         return doDelete(userTO, true, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_DELETE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> delete(final Long key, final boolean nullPriorityAsync) {\n         UserTO userTO = binder.getUserTO(key);\n@@ -349,7 +349,7 @@ protected ProvisioningResult<UserTO> doDelete(\n \n         if (!self) {\n             Set<String> effectiveRealms = getEffectiveRealms(\n-                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_DELETE),\n+                    AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_DELETE),\n                     Collections.singleton(before.getLeft().getRealm()));\n             securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n         }\n@@ -380,13 +380,13 @@ public String transform(final Group group) {\n         return after(binder.returnUserTO(deletedTO), statuses, before.getRight());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public UserTO unlink(final Long key, final Collection<String> resources) {\n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 Collections.singleton(user.getRealm()));\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n@@ -403,13 +403,13 @@ public StringPatchItem transform(final String resource) {\n         return binder.returnUserTO(binder.getUserTO(provisioningManager.unlink(patch)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public UserTO link(final Long key, final Collection<String> resources) {\n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 Collections.singleton(user.getRealm()));\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n@@ -426,15 +426,15 @@ public StringPatchItem transform(final String resource) {\n         return binder.returnUserTO(binder.getUserTO(provisioningManager.link(patch)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> unassign(\n             final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 Collections.singleton(user.getRealm()));\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n@@ -451,7 +451,7 @@ public StringPatchItem transform(final String resource) {\n         return update(patch, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> assign(\n             final Long key,\n@@ -463,7 +463,7 @@ public ProvisioningResult<UserTO> assign(\n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 Collections.singleton(user.getRealm()));\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n@@ -485,15 +485,15 @@ public StringPatchItem transform(final String resource) {\n         return update(patch, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> deprovision(\n             final Long key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 Collections.singleton(user.getRealm()));\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n@@ -505,7 +505,7 @@ public ProvisioningResult<UserTO> deprovision(\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> provision(\n             final Long key,\n@@ -517,7 +517,7 @@ public ProvisioningResult<UserTO> provision(\n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 Collections.singleton(user.getRealm()));\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n "},{"sha":"59af419feb72def62806478412791e376b6a3d4e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -58,13 +58,13 @@ public class UserWorkflowLogic extends AbstractTransactionalLogic<WorkflowFormTO\n     @Autowired\n     private UserDAO userDAO;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_CLAIM + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_FORM_CLAIM + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public WorkflowFormTO claimForm(final String taskId) {\n         return uwfAdapter.claimForm(taskId);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n     public UserTO executeWorkflowTask(final UserTO userTO, final String taskId) {\n         WorkflowResult<Long> updated = uwfAdapter.execute(userTO, taskId);\n \n@@ -81,27 +81,29 @@ public UserTO executeWorkflowTask(final UserTO userTO, final String taskId) {\n         return binder.getUserTO(updated.getResult());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_READ + \"') and hasRole('\" + Entitlement.USER_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_FORM_READ + \"') and hasRole('\"\n+            + StandardEntitlement.USER_READ + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public WorkflowFormTO getFormForUser(final Long key) {\n         User user = userDAO.authFind(key);\n         return uwfAdapter.getForm(user.getWorkflowId());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_FORM_LIST + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public List<WorkflowFormTO> getForms() {\n         return uwfAdapter.getForms();\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_READ + \"') and hasRole('\" + Entitlement.USER_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_FORM_READ + \"') and hasRole('\"\n+            + StandardEntitlement.USER_READ + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public List<WorkflowFormTO> getForms(final Long key, final String formName) {\n         User user = userDAO.authFind(key);\n         return uwfAdapter.getForms(user.getWorkflowId(), formName);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_SUBMIT + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_FORM_SUBMIT + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public UserTO submitForm(final WorkflowFormTO form) {\n         WorkflowResult<? extends AnyPatch> updated = uwfAdapter.submitForm(form);"},{"sha":"8b6d530bc9473f8d1921ec5a6561a4fdd2eb525d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/WorkflowLogic.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWorkflowLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -22,7 +22,7 @@\n import java.lang.reflect.Method;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n@@ -57,19 +57,19 @@ private WorkflowDefinitionFormat getFormat(final MediaType format) {\n                 : WorkflowDefinitionFormat.XML;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_DEF_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void exportAnyObjectDefinition(final MediaType format, final OutputStream os) {\n         exportDefinition(awfAdapter, getFormat(format), os);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_DEF_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void exportUserDefinition(final MediaType format, final OutputStream os) {\n         exportDefinition(uwfAdapter, getFormat(format), os);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_DEF_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void exportGroupDefinition(final MediaType format, final OutputStream os) {\n         exportDefinition(gwfAdapter, getFormat(format), os);\n@@ -79,19 +79,19 @@ private void exportDiagram(final WorkflowAdapter adapter, final OutputStream os)\n         adapter.exportDiagram(os);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_DEF_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void exportAnyObjectDiagram(final OutputStream os) {\n         exportDiagram(awfAdapter, os);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_DEF_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void exportUserDiagram(final OutputStream os) {\n         exportDiagram(uwfAdapter, os);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_DEF_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void exportGroupDiagram(final OutputStream os) {\n         exportDiagram(gwfAdapter, os);\n@@ -103,17 +103,17 @@ private void importDefinition(\n         adapter.importDefinition(format, definition);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_DEF_UPDATE + \"')\")\n     public void importAnyObjectDefinition(final MediaType format, final String definition) {\n         importDefinition(awfAdapter, getFormat(format), definition);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_DEF_UPDATE + \"')\")\n     public void importUserDefinition(final MediaType format, final String definition) {\n         importDefinition(uwfAdapter, getFormat(format), definition);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_DEF_UPDATE + \"')\")\n     public void importGroupDefinition(final MediaType format, final String definition) {\n         importDefinition(gwfAdapter, getFormat(format), definition);\n     }"},{"sha":"45968988bc7d68033f9f372f5534dcd5c998b1d1","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/EntitlementAccessor.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementAccessor.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import org.apache.syncope.core.misc.EntitlementsHolder;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Domain-sensible (via {@code @Transactional} access to any type data for {@link Entitlement} init.\n+ *\n+ * @see EntitlementLoader\n+ */\n+@Component\n+public class EntitlementAccessor {\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Transactional(readOnly = true)\n+    public void addEntitlementsForAnyTypes() {\n+        for (AnyType anyType : anyTypeDAO.findAll()) {\n+            EntitlementsHolder.getInstance().addFor(anyType.getKey());\n+        }\n+    }\n+}"},{"sha":"eb0482f2bc4994007ff68ec77d60c0833675e1ec","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/EntitlementLoader.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementLoader.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import java.util.Map;\n+import javax.sql.DataSource;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.misc.EntitlementsHolder;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.persistence.api.SyncopeLoader;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class EntitlementLoader implements SyncopeLoader {\n+\n+    @Autowired\n+    private DomainsHolder domainsHolder;\n+\n+    @Autowired\n+    private EntitlementAccessor entitlementAccessor;\n+\n+    @Override\n+    public Integer getPriority() {\n+        return 900;\n+    }\n+\n+    @Override\n+    public void load() {\n+        EntitlementsHolder.getInstance().init(StandardEntitlement.values());\n+\n+        for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n+            AuthContextUtils.execWithAuthContext(entry.getKey(), new AuthContextUtils.Executable<Void>() {\n+\n+                @Override\n+                public Void exec() {\n+                    entitlementAccessor.addEntitlementsForAnyTypes();\n+                    return null;\n+                }\n+            });\n+        }\n+    }\n+}"},{"sha":"9c6c00cb2d3e459afbecea01ec7c41285b80dd4b","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/EntitlementsHolder.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FEntitlementsHolder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FEntitlementsHolder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FEntitlementsHolder.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * License); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public final class EntitlementsHolder {\n+\n+    public enum AnyEntitlement {\n+        SEARCH,\n+        LIST,\n+        CREATE,\n+        READ,\n+        UPDATE,\n+        DELETE;\n+\n+    }\n+\n+    private static final Object MONITOR = new Object();\n+\n+    private static EntitlementsHolder INSTANCE;\n+\n+    public static EntitlementsHolder getInstance() {\n+        synchronized (MONITOR) {\n+            if (INSTANCE == null) {\n+                INSTANCE = new EntitlementsHolder();\n+            }\n+        }\n+        return INSTANCE;\n+    }\n+\n+    private final Set<String> values = Collections.synchronizedSet(new HashSet<String>());\n+\n+    private EntitlementsHolder() {\n+        // private constructor for singleton\n+    }\n+\n+    public void init(final Collection<String> values) {\n+        this.values.addAll(values);\n+    }\n+\n+    public String getFor(final String anyTypeKey, final AnyEntitlement operation) {\n+        return anyTypeKey + \"_\" + operation.name();\n+    }\n+\n+    public void addFor(final String anyType) {\n+        for (AnyEntitlement operation : AnyEntitlement.values()) {\n+            this.values.add(getFor(anyType, operation));\n+        }\n+    }\n+\n+    public void removeFor(final String anyType) {\n+        for (AnyEntitlement operation : AnyEntitlement.values()) {\n+            this.values.remove(getFor(anyType, operation));\n+        }\n+    }\n+\n+    public Set<String> getValues() {\n+        return Collections.unmodifiableSet(values);\n+    }\n+}"},{"sha":"e7b9fc03f4228b10c7c9d2cf2cfaf836d7e7bba8","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthContextUtils.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -28,7 +28,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.misc.EntitlementsHolder;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n@@ -91,14 +91,14 @@ public static String getDomain() {\n     }\n \n     private static void setFakeAuth(final String domain) {\n-        List<GrantedAuthority> authorities = CollectionUtils.collect(Entitlement.values(),\n+        List<GrantedAuthority> authorities = CollectionUtils.collect(EntitlementsHolder.getInstance().getValues(),\n                 new Transformer<String, GrantedAuthority>() {\n \n-                    @Override\n-                    public GrantedAuthority transform(final String entitlement) {\n-                        return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-                    }\n-                }, new ArrayList<GrantedAuthority>());\n+            @Override\n+            public GrantedAuthority transform(final String entitlement) {\n+                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+            }\n+        }, new ArrayList<GrantedAuthority>());\n \n         UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n                 new User(ApplicationContextProvider.getBeanFactory().getBean(\"adminUser\", String.class),"},{"sha":"1332404d31cc6bc8af3e81176c4e0b4b255c9392","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthDataAccessor.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -34,8 +34,9 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.misc.AuditManager;\n+import org.apache.syncope.core.misc.EntitlementsHolder;\n import org.apache.syncope.core.misc.utils.MappingUtils;\n import org.apache.syncope.core.misc.utils.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -239,9 +240,11 @@ public void audit(\n     public Set<SyncopeGrantedAuthority> load(final String username) {\n         final Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n         if (anonymousUser.equals(username)) {\n-            authorities.add(new SyncopeGrantedAuthority(Entitlement.ANONYMOUS));\n+            authorities.add(new SyncopeGrantedAuthority(StandardEntitlement.ANONYMOUS));\n         } else if (adminUser.equals(username)) {\n-            CollectionUtils.collect(Entitlement.values(), new Transformer<String, SyncopeGrantedAuthority>() {\n+            CollectionUtils.collect(\n+                    EntitlementsHolder.getInstance().getValues(),\n+                    new Transformer<String, SyncopeGrantedAuthority>() {\n \n                 @Override\n                 public SyncopeGrantedAuthority transform(final String entitlement) {\n@@ -255,7 +258,7 @@ public SyncopeGrantedAuthority transform(final String entitlement) {\n             }\n \n             if (user.isMustChangePassword()) {\n-                authorities.add(new SyncopeGrantedAuthority(Entitlement.MUST_CHANGE_PASSWORD));\n+                authorities.add(new SyncopeGrantedAuthority(StandardEntitlement.MUST_CHANGE_PASSWORD));\n             } else {\n                 // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n                 // statically and dynamically\n@@ -283,7 +286,9 @@ public String transform(final Realm realm) {\n                 // Give group entitlements for owned groups\n                 for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n                     for (String entitlement : Arrays.asList(\n-                            Entitlement.GROUP_READ, Entitlement.GROUP_UPDATE, Entitlement.GROUP_DELETE)) {\n+                            StandardEntitlement.GROUP_READ,\n+                            StandardEntitlement.GROUP_UPDATE,\n+                            StandardEntitlement.GROUP_DELETE)) {\n \n                         SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n                         authority.addRealm("},{"sha":"95e0116cabec962332a9e6bef8ce703c0b9579ff","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/MustChangePasswordFilter.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FMustChangePasswordFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FMustChangePasswordFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FMustChangePasswordFilter.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -28,7 +28,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n@@ -59,11 +59,11 @@ public void doFilter(final ServletRequest request, final ServletResponse respons\n                     SecurityContextHolder.getContext().getAuthentication().getAuthorities(),\n                     new Predicate<GrantedAuthority>() {\n \n-                        @Override\n-                        public boolean evaluate(final GrantedAuthority authority) {\n-                            return Entitlement.MUST_CHANGE_PASSWORD.equals(authority.getAuthority());\n-                        }\n-                    });\n+                @Override\n+                public boolean evaluate(final GrantedAuthority authority) {\n+                    return StandardEntitlement.MUST_CHANGE_PASSWORD.equals(authority.getAuthority());\n+                }\n+            });\n \n             SecurityContextHolderAwareRequestWrapper wrapper =\n                     SecurityContextHolderAwareRequestWrapper.class.cast(request);"},{"sha":"f3c0a46d2d32db68817925518df565323a9a228f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/utils/RealmUtils.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FRealmUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FRealmUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FRealmUtils.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -48,8 +48,10 @@ public static boolean normalizingAddTo(final Set<String> realms, final String ne\n \n     public static Set<String> normalize(final Collection<String> realms) {\n         Set<String> normalized = new HashSet<>();\n-        for (String realm : realms) {\n-            normalizingAddTo(normalized, realm);\n+        if (realms != null) {\n+            for (String realm : realms) {\n+                normalizingAddTo(normalized, realm);\n+            }\n         }\n \n         return normalized;"},{"sha":"32845a2d724a8fb74656caf2726febe922584102","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -20,8 +20,6 @@\n \n import java.util.Collection;\n import java.util.List;\n-import java.util.Set;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -30,12 +28,6 @@\n \n public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n-    List<AnyObject> findAll(String anyTypeName,\n-            Set<String> adminRealms, int page, int itemsPerPage);\n-\n-    List<AnyObject> findAll(String anyTypeName,\n-            Set<String> adminRealms, int page, int itemsPerPage, List<OrderByClause> orderBy);\n-\n     List<Group> findDynGroupMemberships(AnyObject anyObject);\n \n     List<ARelationship> findARelationships(AnyObject anyObject);"},{"sha":"14641c11d967bee8c15828d57541f8519d390c90","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -264,6 +264,37 @@ public void setType(final Type type) {\n         this.type = type;\n     }\n \n+    public String hasAnyTypeCond() {\n+        String anyTypeName = null;\n+\n+        if (type == null) {\n+            return anyTypeName;\n+        }\n+\n+        switch (type) {\n+            case LEAF:\n+            case NOT_LEAF:\n+                if (anyTypeCond != null) {\n+                    anyTypeName = anyTypeCond.getAnyTypeName();\n+                }\n+                break;\n+\n+            case AND:\n+            case OR:\n+                if (leftNodeCond != null) {\n+                    anyTypeName = leftNodeCond.hasAnyTypeCond();\n+                }\n+                if (anyTypeName == null && rightNodeCond != null) {\n+                    anyTypeName = rightNodeCond.hasAnyTypeCond();\n+                }\n+                break;\n+\n+            default:\n+        }\n+\n+        return anyTypeName;\n+    }\n+\n     @Override\n     public boolean isValid() {\n         boolean isValid = false;"},{"sha":"dba65ae03350640174d25322a492cbcf3cf79c68","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Role.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -30,9 +30,9 @@ public interface Role extends Entity<Long> {\n \n     Set<String> getEntitlements();\n \n-    boolean addRealm(Realm realm);\n+    boolean add(Realm realm);\n \n-    boolean removeReam(Realm realm);\n+    boolean remove(Realm realm);\n \n     List<? extends Realm> getRealms();\n "},{"sha":"7a805f1e22de9a9a46c83bba793e179de048eb90","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":3,"deletions":24,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -29,14 +28,11 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.misc.EntitlementsHolder;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n@@ -66,7 +62,8 @@ protected AnyUtils init() {\n \n     @Override\n     protected void securityChecks(final AnyObject anyObject) {\n-        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_READ);\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(EntitlementsHolder.getInstance().\n+                getFor(anyObject.getType().getKey(), EntitlementsHolder.AnyEntitlement.READ));\n         boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n \n             @Override\n@@ -79,24 +76,6 @@ public boolean evaluate(final String realm) {\n         }\n     }\n \n-    @Override\n-    public final List<AnyObject> findAll(final String anyTypeName,\n-            final Set<String> adminRealms, final int page, final int itemsPerPage) {\n-\n-        return findAll(anyTypeName, adminRealms, page, itemsPerPage, Collections.<OrderByClause>emptyList());\n-    }\n-\n-    @Override\n-    public final List<AnyObject> findAll(final String anyTypeName,\n-            final Set<String> adminRealms, final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n-\n-        AnyTypeCond anyTypeCond = new AnyTypeCond();\n-        anyTypeCond.setAnyTypeName(anyTypeName);\n-\n-        return searchDAO.search(adminRealms, SearchCond.getLeafCond(anyTypeCond), page, itemsPerPage, orderBy,\n-                getAnyUtils().getAnyTypeKind());\n-    }\n-\n     @Override\n     public List<ARelationship> findARelationships(final AnyObject anyObject) {\n         TypedQuery<ARelationship> query = entityManager().createQuery("},{"sha":"e421863b108a195392c03769d3beb502a8de2842","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -29,7 +29,6 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -38,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.misc.utils.RealmUtils;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n@@ -72,7 +72,7 @@ protected AnyUtils init() {\n \n     @Override\n     protected void securityChecks(final Group group) {\n-        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_READ);\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_READ);\n         boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n \n             @Override"},{"sha":"3e5214ff697d2f94ac719108bd8c551429db74be","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -34,8 +34,8 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.misc.policy.AccountPolicyException;\n import org.apache.syncope.core.misc.policy.PasswordPolicyException;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n@@ -103,7 +103,7 @@ protected void securityChecks(final User user) {\n         if (!AuthContextUtils.getUsername().equals(anonymousUser)\n                 && !AuthContextUtils.getUsername().equals(user.getUsername())) {\n \n-            Set<String> authRealms = AuthContextUtils.getAuthorizations().get(Entitlement.USER_READ);\n+            Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_READ);\n             boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n \n                 @Override"},{"sha":"529a606792f63d15f4ed02fb1940af8681656fbc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -98,13 +98,13 @@ public Set<String> getEntitlements() {\n     }\n \n     @Override\n-    public boolean addRealm(final Realm realm) {\n+    public boolean add(final Realm realm) {\n         checkType(realm, JPARealm.class);\n         return realms.add((JPARealm) realm);\n     }\n \n     @Override\n-    public boolean removeReam(final Realm realm) {\n+    public boolean remove(final Realm realm) {\n         checkType(realm, JPARealm.class);\n         return realms.remove((JPARealm) realm);\n     }"},{"sha":"a695e8554d343e6307b99a13e4f2b171ac4d70ef","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyObjectTest.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -21,7 +21,6 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n \n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -52,15 +51,6 @@ public void findAll() {\n         assertFalse(list.isEmpty());\n     }\n \n-    @Test\n-    public void findAllByType() {\n-        List<AnyObject> list = anyObjectDAO.findAll(\"PRINTER\", SyncopeConstants.FULL_ADMIN_REALMS, 1, 100);\n-        assertFalse(list.isEmpty());\n-\n-        list = anyObjectDAO.findAll(\"UNEXISTING\", SyncopeConstants.FULL_ADMIN_REALMS, 1, 100);\n-        assertTrue(list.isEmpty());\n-    }\n-\n     @Test\n     public void find() {\n         AnyObject anyObject = anyObjectDAO.find(2L);"},{"sha":"073b6616f8c0f4946872e75a741ca56fae32ef95","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -29,7 +29,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.misc.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.misc.security.SyncopeGrantedAuthority;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -60,14 +60,14 @@ public class MultitenancyTest extends AbstractTest {\n \n     @BeforeClass\n     public static void setAuthContext() {\n-        List<GrantedAuthority> authorities = CollectionUtils.collect(Entitlement.values(),\n+        List<GrantedAuthority> authorities = CollectionUtils.collect(StandardEntitlement.values(),\n                 new Transformer<String, GrantedAuthority>() {\n \n-                    @Override\n-                    public GrantedAuthority transform(final String entitlement) {\n-                        return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-                    }\n-                }, new ArrayList<GrantedAuthority>());\n+            @Override\n+            public GrantedAuthority transform(final String entitlement) {\n+                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+            }\n+        }, new ArrayList<GrantedAuthority>());\n \n         UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n                 new org.springframework.security.core.userdetails.User("},{"sha":"b57e713d49268f347b350caf91fde8f49b624c52","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RoleTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -25,7 +25,7 @@\n import static org.junit.Assert.assertTrue;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n@@ -50,7 +50,7 @@ public void find() {\n         assertNotNull(role1.getName());\n         assertFalse(role1.getRealms().isEmpty());\n         assertFalse(role1.getEntitlements().isEmpty());\n-        assertTrue(role1.getEntitlements().contains(Entitlement.USER_LIST));\n+        assertTrue(role1.getEntitlements().contains(StandardEntitlement.USER_LIST));\n \n         Role role2 = roleDAO.find(role1.getName());\n         assertEquals(role1, role2);\n@@ -70,10 +70,10 @@ public void findAll() {\n     public void save() {\n         Role role = entityFactory.newEntity(Role.class);\n         role.setName(\"new\");\n-        role.addRealm(realmDAO.getRoot());\n-        role.addRealm(realmDAO.find(\"/even/two\"));\n-        role.getEntitlements().add(Entitlement.LOG_LIST);\n-        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n+        role.add(realmDAO.getRoot());\n+        role.add(realmDAO.find(\"/even/two\"));\n+        role.getEntitlements().add(StandardEntitlement.LOG_LIST);\n+        role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n \n         Role actual = roleDAO.save(role);\n         assertNotNull(actual);"},{"sha":"24a4e7e563c12ebe04b6248af28b3362a69916fd","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -27,7 +27,7 @@\n import java.util.Set;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n@@ -86,10 +86,10 @@ public void searchByDynMembership() {\n         // 1. create role with dynamic membership\n         Role role = entityFactory.newEntity(Role.class);\n         role.setName(\"new\");\n-        role.addRealm(realmDAO.getRoot());\n-        role.addRealm(realmDAO.find(\"/even/two\"));\n-        role.getEntitlements().add(Entitlement.LOG_LIST);\n-        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n+        role.add(realmDAO.getRoot());\n+        role.add(realmDAO.find(\"/even/two\"));\n+        role.getEntitlements().add(StandardEntitlement.LOG_LIST);\n+        role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n \n         DynRoleMembership dynMembership = entityFactory.newEntity(DynRoleMembership.class);\n         dynMembership.setFIQLCond(\"cool==true\");"},{"sha":"bff367ea7d4cfe5921b0655042feadefb62e5b36","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -30,7 +30,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -99,10 +99,10 @@ public void dynMembership() {\n         // 1. create role with dynamic membership\n         Role role = entityFactory.newEntity(Role.class);\n         role.setName(\"new\");\n-        role.addRealm(realmDAO.getRoot());\n-        role.addRealm(realmDAO.find(\"/even/two\"));\n-        role.getEntitlements().add(Entitlement.LOG_LIST);\n-        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n+        role.add(realmDAO.getRoot());\n+        role.add(realmDAO.find(\"/even/two\"));\n+        role.getEntitlements().add(StandardEntitlement.LOG_LIST);\n+        role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n \n         DynRoleMembership dynMembership = entityFactory.newEntity(DynRoleMembership.class);\n         dynMembership.setFIQLCond(\"cool==true\");\n@@ -166,10 +166,10 @@ public void delete() {\n         // 0. create role\n         Role role = entityFactory.newEntity(Role.class);\n         role.setName(\"new\");\n-        role.addRealm(realmDAO.getRoot());\n-        role.addRealm(realmDAO.find(\"/even/two\"));\n-        role.getEntitlements().add(Entitlement.LOG_LIST);\n-        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n+        role.add(realmDAO.getRoot());\n+        role.add(realmDAO.find(\"/even/two\"));\n+        role.getEntitlements().add(StandardEntitlement.LOG_LIST);\n+        role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n \n         role = roleDAO.save(role);\n         assertNotNull(role);"},{"sha":"542b07cbecfec6a28785639e855dc3b5ea4e79aa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -86,7 +86,7 @@ public void update(final Role role, final RoleTO roleTO) {\n             if (realm == null) {\n                 LOG.debug(\"Invalid realm full path {}, ignoring\", realmFullPath);\n             } else {\n-                role.addRealm(realm);\n+                role.add(realm);\n             }\n         }\n "},{"sha":"0be3f0d6652dc44c8ea67fd4bfa3144eb88179fa","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":17,"deletions":21,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -18,17 +18,17 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.AnyObjectLogic;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n@@ -50,30 +50,26 @@ protected AnyObjectPatch newPatch(final Long key) {\n         return patch;\n     }\n \n+    @Override\n+    public PagedResult<AnyObjectTO> list(final AnyListQuery listQuery) {\n+        throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n+    }\n+\n     @Override\n     public PagedResult<AnyObjectTO> list(final String type, final AnyListQuery listQuery) {\n         if (StringUtils.isBlank(type)) {\n             return super.list(listQuery);\n         }\n \n-        CollectionUtils.transform(listQuery.getRealms(), new Transformer<String, String>() {\n+        AnySearchQuery searchQuery = new AnySearchQuery();\n+        searchQuery.setFiql(new AnyObjectFiqlSearchConditionBuilder().type(type).query());\n+        searchQuery.setDetails(listQuery.isDetails());\n+        searchQuery.setOrderBy(listQuery.getOrderBy());\n+        searchQuery.setPage(listQuery.getPage());\n+        searchQuery.setSize(listQuery.getSize());\n+        searchQuery.setRealms(listQuery.getRealms());\n \n-            @Override\n-            public String transform(final String input) {\n-                return StringUtils.prependIfMissing(input, SyncopeConstants.ROOT_REALM);\n-            }\n-        });\n-\n-        return buildPagedResult(\n-                logic.list(\n-                        type,\n-                        listQuery.getPage(),\n-                        listQuery.getSize(),\n-                        getOrderByClauses(listQuery.getOrderBy()),\n-                        listQuery.getRealms(),\n-                        listQuery.isDetails()),\n-                listQuery.getPage(),\n-                listQuery.getSize(),\n-                getAnyLogic().count(listQuery.getRealms()));\n+        return search(searchQuery);\n     }\n+\n }"},{"sha":"2e0a7c6b82f81a0ba740e884a270cf67eb78b7da","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/pages/CamelRouteModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRouteModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRouteModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRouteModalPage.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.CamelEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n@@ -84,7 +84,7 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n \n         };\n \n-        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, Entitlement.ROUTE_UPDATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, CamelEntitlement.ROUTE_UPDATE);\n         routeForm.add(submit);\n \n         this.add(routeForm);"},{"sha":"bcd5e7a69729247bdd06e384cb0bb5677d5a6c39","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/panels/CamelRoutePanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutePanel.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.client.console.rest.CamelRouteRestClient;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.CamelEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n@@ -119,7 +119,7 @@ public void populateItem(final Item<ICellPopulator<CamelRouteTO>> cellItem, fina\n         WebMarkupContainer routeContainer = new WebMarkupContainer(\"camelRoutesContainer\");\n         routeContainer.add(routeTable);\n         routeContainer.setOutputMarkupId(true);\n-        MetaDataRoleAuthorizationStrategy.authorize(routeContainer, ENABLE, Entitlement.ROUTE_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(routeContainer, ENABLE, CamelEntitlement.ROUTE_LIST);\n         add(routeContainer);\n     }\n \n@@ -129,7 +129,7 @@ private class CamelRouteProvider extends SortableDataProvider<CamelRouteTO, Stri\n \n         private final SortableDataProviderComparator<CamelRouteTO> comparator;\n \n-       CamelRouteProvider() {\n+        CamelRouteProvider() {\n             setSort(\"key\", SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n@@ -155,8 +155,8 @@ public long size() {\n                     ? restClient.list(AnyTypeKind.USER).size()\n                     : 0)\n                     + (restClient.isCamelEnabledFor(AnyTypeKind.GROUP)\n-                            ? restClient.list(AnyTypeKind.GROUP).size()\n-                            : 0);\n+                    ? restClient.list(AnyTypeKind.GROUP).size()\n+                    : 0);\n         }\n \n         @Override"},{"sha":"f9763a7d2c0944dc6576b30193ff851471119500","filename":"ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/types/CamelEntitlement.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FCamelEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FCamelEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FCamelEntitlement.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+public final class CamelEntitlement {\n+\n+    public static final String ROUTE_READ = \"ROUTE_READ\";\n+\n+    public static final String ROUTE_LIST = \"ROUTE_LIST\";\n+\n+    public static final String ROUTE_UPDATE = \"ROUTE_UPDATE\";\n+\n+    private static final Set<String> VALUES;\n+\n+    static {\n+        Set<String> values = new TreeSet<>();\n+        for (Field field : CamelEntitlement.class.getDeclaredFields()) {\n+            if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n+                values.add(field.getName());\n+            }\n+        }\n+        VALUES = Collections.unmodifiableSet(values);\n+    }\n+\n+    public static Set<String> values() {\n+        return VALUES;\n+    }\n+\n+    private CamelEntitlement() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"ea0767f46b918dcdaef350f76a1b230ce0362f5b","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/CamelRouteLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -24,7 +24,7 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.CamelEntitlement;\n import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n@@ -47,7 +47,7 @@ public class CamelRouteLogic extends AbstractTransactionalLogic<CamelRouteTO> {\n     @Autowired\n     private SyncopeCamelContext context;\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ROUTE_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + CamelEntitlement.ROUTE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<CamelRouteTO> list(final AnyTypeKind anyTypeKind) {\n         List<CamelRouteTO> routes = new ArrayList<>();\n@@ -58,7 +58,7 @@ public List<CamelRouteTO> list(final AnyTypeKind anyTypeKind) {\n         return routes;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ROUTE_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + CamelEntitlement.ROUTE_READ + \"')\")\n     @Transactional(readOnly = true)\n     public CamelRouteTO read(final String key) {\n         CamelRoute route = routeDAO.find(key);\n@@ -69,7 +69,7 @@ public CamelRouteTO read(final String key) {\n         return binder.getRouteTO(route);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ROUTE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + CamelEntitlement.ROUTE_UPDATE + \"')\")\n     public void update(final CamelRouteTO routeTO) {\n         CamelRoute route = routeDAO.find(routeTO.getKey());\n         if (route == null) {\n@@ -82,7 +82,7 @@ public void update(final CamelRouteTO routeTO) {\n         context.updateContext(routeTO.getKey());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.ROUTE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + CamelEntitlement.ROUTE_UPDATE + \"')\")\n     public void restartContext() {\n         context.restartContext();\n     }"},{"sha":"05cf79f3888d0556baaeb264bcb514edca6d5242","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/init/CamelRouteLoader.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -22,6 +22,8 @@\n import java.util.Map;\n import javax.sql.DataSource;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.CamelEntitlement;\n+import org.apache.syncope.core.misc.EntitlementsHolder;\n import org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n@@ -59,28 +61,23 @@ public class CamelRouteLoader implements SyncopeLoader {\n     @Autowired\n     private DomainsHolder domainsHolder;\n \n-    private boolean loaded = false;\n-\n     @Override\n     public Integer getPriority() {\n         return 1000;\n     }\n \n     @Override\n     public void load() {\n-        synchronized (this) {\n-            if (!loaded) {\n-                for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n-                    loadRoutes(entry.getKey(), entry.getValue(),\n-                            userRoutesLoader.getResource(), AnyTypeKind.USER);\n-                    loadRoutes(entry.getKey(), entry.getValue(),\n-                            groupRoutesLoader.getResource(), AnyTypeKind.GROUP);\n-                    loadRoutes(entry.getKey(), entry.getValue(),\n-                            anyObjectRoutesLoader.getResource(), AnyTypeKind.ANY_OBJECT);\n-                }\n-                loaded = true;\n-            }\n+        for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n+            loadRoutes(entry.getKey(), entry.getValue(),\n+                    userRoutesLoader.getResource(), AnyTypeKind.USER);\n+            loadRoutes(entry.getKey(), entry.getValue(),\n+                    groupRoutesLoader.getResource(), AnyTypeKind.GROUP);\n+            loadRoutes(entry.getKey(), entry.getValue(),\n+                    anyObjectRoutesLoader.getResource(), AnyTypeKind.ANY_OBJECT);\n         }\n+\n+        EntitlementsHolder.getInstance().init(CamelEntitlement.values());\n     }\n \n     private String nodeToString(final Node content, final DOMImplementationLS domImpl) {"},{"sha":"a9dda8d52eab3b9f1c30a426533c2fa0c29bbbc9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":96,"deletions":15,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -38,10 +38,14 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n+import org.apache.syncope.common.lib.patch.LongPatchItem;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -51,16 +55,20 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.UserService;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.junit.Assume;\n import org.junit.FixMethodOrder;\n@@ -100,19 +108,19 @@ public void testReadEntitlements() {\n         // 2. as anonymous\n         Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).self();\n         assertEquals(1, self.getKey().size());\n-        assertTrue(self.getKey().keySet().contains(Entitlement.ANONYMOUS));\n+        assertTrue(self.getKey().keySet().contains(StandardEntitlement.ANONYMOUS));\n         assertEquals(ANONYMOUS_UNAME, self.getValue().getUsername());\n \n         // 3. as admin\n         self = adminClient.self();\n-        assertEquals(Entitlement.values().size(), self.getKey().size());\n-        assertFalse(self.getKey().keySet().contains(Entitlement.ANONYMOUS));\n+        assertEquals(syncopeService.info().getEntitlements().size(), self.getKey().size());\n+        assertFalse(self.getKey().keySet().contains(StandardEntitlement.ANONYMOUS));\n         assertEquals(ADMIN_UNAME, self.getValue().getUsername());\n \n         // 4. as user\n         self = clientFactory.create(\"bellini\", ADMIN_PWD).self();\n         assertFalse(self.getKey().isEmpty());\n-        assertFalse(self.getKey().keySet().contains(Entitlement.ANONYMOUS));\n+        assertFalse(self.getKey().keySet().contains(StandardEntitlement.ANONYMOUS));\n         assertEquals(\"bellini\", self.getValue().getUsername());\n     }\n \n@@ -202,11 +210,11 @@ public void testUserSearch() {\n         Set<Long> matchedUserKeys = CollectionUtils.collect(matchedUsers.getResult(),\n                 new Transformer<UserTO, Long>() {\n \n-                    @Override\n-                    public Long transform(final UserTO input) {\n-                        return input.getKey();\n-                    }\n-                }, new HashSet<Long>());\n+            @Override\n+            public Long transform(final UserTO input) {\n+                return input.getKey();\n+            }\n+        }, new HashSet<Long>());\n         assertTrue(matchedUserKeys.contains(1L));\n         assertFalse(matchedUserKeys.contains(2L));\n         assertFalse(matchedUserKeys.contains(5L));\n@@ -235,11 +243,11 @@ public void delegatedUserCRUD() {\n             // 1. create role for full user administration, under realm /even/two\n             RoleTO role = new RoleTO();\n             role.setName(\"Delegated user admin\");\n-            role.getEntitlements().add(Entitlement.USER_CREATE);\n-            role.getEntitlements().add(Entitlement.USER_UPDATE);\n-            role.getEntitlements().add(Entitlement.USER_DELETE);\n-            role.getEntitlements().add(Entitlement.USER_LIST);\n-            role.getEntitlements().add(Entitlement.USER_READ);\n+            role.getEntitlements().add(StandardEntitlement.USER_CREATE);\n+            role.getEntitlements().add(StandardEntitlement.USER_UPDATE);\n+            role.getEntitlements().add(StandardEntitlement.USER_DELETE);\n+            role.getEntitlements().add(StandardEntitlement.USER_LIST);\n+            role.getEntitlements().add(StandardEntitlement.USER_READ);\n             role.getRealms().add(\"/even/two\");\n \n             roleKey = Long.valueOf(roleService.create(role).getHeaderString(RESTHeaders.RESOURCE_KEY));\n@@ -385,6 +393,79 @@ public void checkUserSuspension() {\n         assertEquals(0, goodPwdClient.self().getValue().getFailedLogins(), 0);\n     }\n \n+    @Test\n+    public void anyTypeEntitlement() {\n+        final String anyTypeKey = \"FOLDER \" + getUUIDString();\n+\n+        // 1. no entitlement exists (yet) for the any type to be created\n+        assertFalse(CollectionUtils.exists(syncopeService.info().getEntitlements(), new Predicate<String>() {\n+\n+            @Override\n+            public boolean evaluate(final String entitlement) {\n+                return entitlement.contains(anyTypeKey);\n+            }\n+        }));\n+\n+        // 2. create plain schema, any type class and any type\n+        PlainSchemaTO path = new PlainSchemaTO();\n+        path.setKey(\"path\" + getUUIDString());\n+        path.setType(AttrSchemaType.String);\n+        path = createSchema(SchemaType.PLAIN, path);\n+\n+        AnyTypeClassTO anyTypeClass = new AnyTypeClassTO();\n+        anyTypeClass.setKey(\"folder\" + getUUIDString());\n+        anyTypeClass.getPlainSchemas().add(path.getKey());\n+        anyTypeClassService.create(anyTypeClass);\n+\n+        AnyTypeTO anyTypeTO = new AnyTypeTO();\n+        anyTypeTO.setKey(anyTypeKey);\n+        anyTypeTO.setKind(AnyTypeKind.ANY_OBJECT);\n+        anyTypeTO.getClasses().add(anyTypeClass.getKey());\n+        anyTypeService.create(anyTypeTO);\n+\n+        // 2. now entitlement exists for the any type just created\n+        assertTrue(CollectionUtils.exists(syncopeService.info().getEntitlements(), new Predicate<String>() {\n+\n+            @Override\n+            public boolean evaluate(final String entitlement) {\n+                return entitlement.contains(anyTypeKey);\n+            }\n+        }));\n+\n+        // 3. attempt to create an instance of the type above: fail because no entitlement was assigned\n+        AnyObjectTO folder = new AnyObjectTO();\n+        folder.setRealm(SyncopeConstants.ROOT_REALM);\n+        folder.setType(anyTypeKey);\n+        folder.getPlainAttrs().add(attrTO(path.getKey(), \"/home\"));\n+\n+        SyncopeClient belliniClient = clientFactory.create(\"bellini\", ADMIN_PWD);\n+        try {\n+            belliniClient.getService(AnyObjectService.class).create(folder);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n+        }\n+\n+        // 4. give create entitlement for the any type just created\n+        RoleTO role = new RoleTO();\n+        role.setName(\"role\" + getUUIDString());\n+        role.getRealms().add(SyncopeConstants.ROOT_REALM);\n+        role.getEntitlements().add(anyTypeKey + \"_READ\");\n+        role.getEntitlements().add(anyTypeKey + \"_CREATE\");\n+        role = createRole(role);\n+\n+        UserTO bellini = readUser(\"bellini\");\n+        UserPatch patch = new UserPatch();\n+        patch.setKey(bellini.getKey());\n+        patch.getRoles().add(new LongPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(role.getKey()).build());\n+        bellini = updateUser(patch).getAny();\n+        assertTrue(bellini.getRoles().contains(role.getKey()));\n+\n+        // 5. now the instance of the type above can be created successfully\n+        belliniClient.getService(AnyObjectService.class).create(folder);\n+    }\n+\n     @Test\n     public void issueSYNCOPE434() {\n         Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers(syncopeService));"},{"sha":"c7453244470c3eb88a34f3a622478c16c5004d96","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/RoleITCase.java","status":"modified","additions":21,"deletions":19,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b9fcf293b3fb1df01c81de52ed65d51f25322601/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b9fcf293b3fb1df01c81de52ed65d51f25322601/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java?ref=b9fcf293b3fb1df01c81de52ed65d51f25322601","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -43,7 +43,7 @@ public static RoleTO getSampleRoleTO(final String name) {\n         RoleTO role = new RoleTO();\n         role.setName(name + getUUIDString());\n         role.getRealms().add(\"/even\");\n-        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n \n         return role;\n     }\n@@ -62,44 +62,46 @@ public void list() {\n     public void read() {\n         RoleTO roleTO = roleService.read(3L);\n         assertNotNull(roleTO);\n-        assertTrue(roleTO.getEntitlements().contains(Entitlement.GROUP_READ));\n+        assertTrue(roleTO.getEntitlements().contains(StandardEntitlement.GROUP_READ));\n     }\n \n     @Test\n     public void create() {\n         RoleTO role = new RoleTO();\n-        role.setName(\"new\" + getUUIDString());\n         role.getRealms().add(SyncopeConstants.ROOT_REALM);\n         role.getRealms().add(\"/even/two\");\n-        role.getEntitlements().add(Entitlement.LOG_LIST);\n-        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(StandardEntitlement.LOG_LIST);\n+        role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n \n-        Response response = roleService.create(role);\n+        try {\n+            createRole(role);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidRole, e.getType());\n+        }\n \n-        RoleTO actual = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n-        assertNotNull(actual);\n+        role.setName(\"new\" + getUUIDString());\n+        role = createRole(role);\n+        assertNotNull(role);\n     }\n \n     @Test\n     public void update() {\n         RoleTO role = getSampleRoleTO(\"update\");\n-        Response response = roleService.create(role);\n-\n-        RoleTO actual = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n-        assertNotNull(actual);\n+        role = createRole(role);\n+        assertNotNull(role);\n \n-        role = actual;\n-        assertFalse(role.getEntitlements().contains(Entitlement.WORKFLOW_TASK_LIST));\n+        assertFalse(role.getEntitlements().contains(StandardEntitlement.WORKFLOW_TASK_LIST));\n         assertFalse(role.getRealms().contains(\"/even/two\"));\n \n-        role.getEntitlements().add(Entitlement.WORKFLOW_TASK_LIST);\n+        role.getEntitlements().add(StandardEntitlement.WORKFLOW_TASK_LIST);\n         role.getRealms().add(\"/even/two\");\n \n         roleService.update(role);\n \n-        actual = roleService.read(role.getKey());\n-        assertTrue(actual.getEntitlements().contains(Entitlement.WORKFLOW_TASK_LIST));\n-        assertTrue(actual.getRealms().contains(\"/even/two\"));\n+        role = roleService.read(role.getKey());\n+        assertTrue(role.getEntitlements().contains(StandardEntitlement.WORKFLOW_TASK_LIST));\n+        assertTrue(role.getRealms().contains(\"/even/two\"));\n     }\n \n     @Test"}]}