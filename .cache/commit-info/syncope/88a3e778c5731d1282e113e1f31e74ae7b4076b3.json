{"sha":"88a3e778c5731d1282e113e1f31e74ae7b4076b3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg4YTNlNzc4YzU3MzFkMTI4MmUxMTNlMWYzMWU3NGFlN2I0MDc2YjM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-05-27T16:18:08Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-05-27T16:18:08Z"},"message":"User attributes definition and schema is finally working; now it's time for better testing for the association between user and attributes + implement derived attributes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1245968 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"05640eab4b33ba500f5d4d8b3609e020f0f57582","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/05640eab4b33ba500f5d4d8b3609e020f0f57582"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/88a3e778c5731d1282e113e1f31e74ae7b4076b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/88a3e778c5731d1282e113e1f31e74ae7b4076b3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/88a3e778c5731d1282e113e1f31e74ae7b4076b3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/88a3e778c5731d1282e113e1f31e74ae7b4076b3/comments","author":null,"committer":null,"parents":[{"sha":"e4e6d080e11975cd91ec3db5a6f95b9a2d6f6270","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e4e6d080e11975cd91ec3db5a6f95b9a2d6f6270","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e4e6d080e11975cd91ec3db5a6f95b9a2d6f6270"}],"stats":{"total":1222,"additions":1174,"deletions":48},"files":[{"sha":"3f5d8e4a6bfbd1692fb4c48e8e768cc79bf25605","filename":"core/src/main/java/org/syncope/core/beans/SyncopeUser.java","status":"modified","additions":36,"deletions":3,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FSyncopeUser.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -15,17 +15,29 @@\n package org.syncope.core.beans;\n \n import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n \n @Entity\n public class SyncopeUser implements Serializable {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n+    @OneToMany(cascade = CascadeType.ALL,\n+    fetch = FetchType.EAGER)\n+    private Set<UserAttributeValues> userAttributeValues;\n+\n+    public SyncopeUser() {\n+        userAttributeValues = new HashSet<UserAttributeValues>();\n+    }\n \n     public Long getId() {\n         return id;\n@@ -35,6 +47,16 @@ public void setId(Long id) {\n         this.id = id;\n     }\n \n+    public Set<UserAttributeValues> getUserAttributeValues() {\n+        return userAttributeValues;\n+    }\n+\n+    public void setUserAttributeValues(\n+            Set<UserAttributeValues> userAttributeValues) {\n+\n+        this.userAttributeValues = userAttributeValues;\n+    }\n+\n     @Override\n     public boolean equals(Object obj) {\n         if (obj == null) {\n@@ -50,20 +72,31 @@ public boolean equals(Object obj) {\n \n             return false;\n         }\n+        if (this.userAttributeValues != other.userAttributeValues\n+                && (this.userAttributeValues == null\n+                || !this.userAttributeValues.equals(other.userAttributeValues))) {\n+\n+            return false;\n+        }\n \n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n-        int hash = 5;\n-        hash = 83 * hash + (this.id != null ? this.id.hashCode() : 0);\n+        int hash = 7;\n+        hash = 71 * hash + (this.id != null ? this.id.hashCode() : 0);\n+        hash = 71 * hash + (this.userAttributeValues != null\n+                ? this.userAttributeValues.hashCode() : 0);\n \n         return hash;\n     }\n \n     @Override\n     public String toString() {\n-        return \"(id = \" + getId() + \")\";\n+        return \"(\"\n+                + \"id=\" + id + \",\"\n+                + \"userAttributeValues=\" + userAttributeValues\n+                + \")\";\n     }\n }"},{"sha":"20ec6c5ffc1facca9f75efc494c69b8b25253dbc","filename":"core/src/main/java/org/syncope/core/beans/UserAttributeSchema.java","status":"modified","additions":112,"deletions":32,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeSchema.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -17,35 +17,35 @@\n import static javax.persistence.EnumType.STRING;\n \n import java.io.Serializable;\n+import java.text.DecimalFormat;\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.syncope.core.enums.AttributeType;\n \n @Entity\n public class UserAttributeSchema implements Serializable {\n \n+    private static final Logger log = LoggerFactory.getLogger(\n+            UserAttributeSchema.class);\n     @Id\n     private String name;\n+    @Column(nullable = false)\n     @Enumerated(STRING)\n     private AttributeType type;\n+    private Boolean mandatory;\n+    private Boolean multivalue;\n     private String conversionPattern;\n-    private String conversionClass;\n \n-    public String getConversionClass() {\n-        return conversionClass;\n-    }\n-\n-    public void setConversionClass(String conversionClass) {\n-        this.conversionClass = conversionClass;\n-    }\n-\n-    public String getConversionPattern() {\n-        return conversionPattern;\n-    }\n-\n-    public void setConversionPattern(String conversionPattern) {\n-        this.conversionPattern = conversionPattern;\n+    public UserAttributeSchema() {\n+        type = AttributeType.String;\n+        mandatory = false;\n+        multivalue = false;\n     }\n \n     public String getName() {\n@@ -64,6 +64,80 @@ public void setType(AttributeType type) {\n         this.type = type;\n     }\n \n+    public boolean isMandatory() {\n+        return mandatory;\n+    }\n+\n+    public void setMandatory(Boolean mandatory) {\n+        this.mandatory = mandatory;\n+    }\n+\n+    public Boolean isMultivalue() {\n+        return multivalue;\n+    }\n+\n+    public void setMultivalue(Boolean multivalue) {\n+        this.multivalue = multivalue;\n+    }\n+\n+    private boolean isConversionPatternNeeded() {\n+        return type == AttributeType.Date\n+                || type == AttributeType.Double\n+                || type == AttributeType.Long;\n+    }\n+\n+    public String getConversionPattern() {\n+        if (!isConversionPatternNeeded()) {\n+            log.warn(\"Conversion pattern is not needed: \"\n+                    + \"this attribute type is \"\n+                    + getType());\n+        }\n+\n+        return conversionPattern;\n+    }\n+\n+    public void setConversionPattern(String conversionPattern) {\n+        if (!isConversionPatternNeeded()) {\n+            log.warn(\"Conversion pattern will be ignored: \"\n+                    + \"this attribute type is \"\n+                    + getType());\n+        }\n+\n+        this.conversionPattern = conversionPattern;\n+    }\n+\n+    public <T extends Format> T getFormatter(Class<T> reference) {\n+        T result = null;\n+\n+        switch (getType()) {\n+            case Long:\n+                DecimalFormat longFormatter =\n+                        ((DecimalFormat) getType().getFormatter());\n+                longFormatter.applyPattern(getConversionPattern());\n+\n+                result = (T) longFormatter;\n+                break;\n+\n+            case Double:\n+                DecimalFormat doubleFormatter =\n+                        ((DecimalFormat) getType().getFormatter());\n+                doubleFormatter.applyPattern(getConversionPattern());\n+\n+                result = (T) doubleFormatter;\n+                break;\n+\n+            case Date:\n+                SimpleDateFormat dateFormatter =\n+                        (SimpleDateFormat) getType().getFormatter();\n+                dateFormatter.applyPattern(getConversionPattern());\n+\n+                result = (T) dateFormatter;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n     @Override\n     public boolean equals(Object obj) {\n         if (obj == null) {\n@@ -72,10 +146,9 @@ public boolean equals(Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-\n         final UserAttributeSchema other = (UserAttributeSchema) obj;\n-        if ((this.name == null)\n-                ? (other.name != null) : !this.name.equals(other.name)) {\n+        if ((this.name == null) ? (other.name != null)\n+                : !this.name.equals(other.name)) {\n \n             return false;\n         }\n@@ -84,32 +157,38 @@ public boolean equals(Object obj) {\n \n             return false;\n         }\n-        if ((this.conversionPattern == null)\n-                ? (other.conversionPattern != null)\n-                : !this.conversionPattern.equals(other.conversionPattern)) {\n+        if (this.mandatory != other.mandatory\n+                && (this.mandatory == null\n+                || !this.mandatory.equals(other.mandatory))) {\n \n             return false;\n         }\n-        if ((this.conversionClass == null)\n-                ? (other.conversionClass != null)\n-                : !this.conversionClass.equals(other.conversionClass)) {\n+        if (this.multivalue != other.multivalue\n+                && (this.multivalue == null\n+                || !this.multivalue.equals(other.multivalue))) {\n \n             return false;\n         }\n+        if ((this.conversionPattern == null)\n+                ? (other.conversionPattern != null)\n+                : !this.conversionPattern.equals(other.conversionPattern)) {\n \n+            return false;\n+        }\n         return true;\n     }\n \n     @Override\n     public int hashCode() {\n         int hash = 7;\n-\n-        hash = 19 * hash + (this.name != null ? this.name.hashCode() : 0);\n-        hash = 19 * hash + (this.type != null ? this.type.hashCode() : 0);\n-        hash = 19 * hash + (this.conversionPattern != null\n+        hash = 67 * hash + (this.name != null ? this.name.hashCode() : 0);\n+        hash = 67 * hash + (this.type != null ? this.type.hashCode() : 0);\n+        hash = 67 * hash + (this.mandatory != null\n+                ? this.mandatory.hashCode() : 0);\n+        hash = 67 * hash + (this.multivalue != null\n+                ? this.multivalue.hashCode() : 0);\n+        hash = 67 * hash + (this.conversionPattern != null\n                 ? this.conversionPattern.hashCode() : 0);\n-        hash = 19 * hash + (this.conversionClass != null\n-                ? this.conversionClass.hashCode() : 0);\n \n         return hash;\n     }\n@@ -119,8 +198,9 @@ public String toString() {\n         return \"(\"\n                 + \"name=\" + name + \",\"\n                 + \"type=\" + type + \",\"\n-                + \"conversionPattern=\" + conversionPattern + \",\"\n-                + \"conversionClass=\" + conversionClass + \",\"\n+                + \"mandatory=\" + mandatory + \",\"\n+                + \"multivalue=\" + multivalue + \",\"\n+                + \"conversionPattern=\" + conversionPattern\n                 + \")\";\n     }\n }"},{"sha":"24491fcd491edd5c12a737ae46073a7e7b743c18","filename":"core/src/main/java/org/syncope/core/beans/UserAttributeValue.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValue.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -0,0 +1,64 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.beans;\n+\n+import java.io.Serializable;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.JOINED)\n+public abstract class UserAttributeValue implements Serializable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    protected Long id;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final UserAttributeValue other = (UserAttributeValue) obj;\n+        if (this.id != other.id\n+                && (this.id == null || !this.id.equals(other.id))) {\n+\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 5;\n+        hash = 97 * hash + (this.id != null ? this.id.hashCode() : 0);\n+        return hash;\n+    }\n+}"},{"sha":"220c0a49cd58a66580b37e655894666f030c2cf6","filename":"core/src/main/java/org/syncope/core/beans/UserAttributeValueAsBoolean.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsBoolean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsBoolean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsBoolean.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -0,0 +1,80 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.beans;\n+\n+import java.io.Serializable;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class UserAttributeValueAsBoolean\n+        extends UserAttributeValue implements Serializable {\n+\n+    Boolean actualValue;\n+\n+    public UserAttributeValueAsBoolean() {\n+    }\n+\n+    public UserAttributeValueAsBoolean(Boolean actualValue) {\n+        super();\n+        this.actualValue = actualValue;\n+    }\n+\n+    public Boolean getActualValue() {\n+        return actualValue;\n+    }\n+\n+    public void setActualValue(Boolean actualValue) {\n+        this.actualValue = actualValue;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final UserAttributeValueAsBoolean other =\n+                (UserAttributeValueAsBoolean) obj;\n+        if (this.actualValue != other.actualValue\n+                && (this.actualValue == null\n+                || !this.actualValue.equals(other.actualValue))) {\n+\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 97 * hash + (this.actualValue != null\n+                ? this.actualValue.hashCode() : 0);\n+        return super.hashCode() + hash;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\"\n+                + \"id=\" + getId() + \",\"\n+                + \"actualValue=\" + actualValue\n+                + \")\";\n+    }\n+}"},{"sha":"968fda0b4928da46fce82452853a751ee4b9f8df","filename":"core/src/main/java/org/syncope/core/beans/UserAttributeValueAsDate.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsDate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsDate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsDate.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -0,0 +1,83 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.beans;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@Entity\n+public class UserAttributeValueAsDate\n+        extends UserAttributeValue implements Serializable {\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    Date actualValue;\n+\n+    public UserAttributeValueAsDate() {\n+    }\n+\n+    public UserAttributeValueAsDate(Date actualValue) {\n+        super();\n+        this.actualValue = actualValue;\n+    }\n+\n+    public Date getActualValue() {\n+        return actualValue;\n+    }\n+\n+    public void setActualValue(Date actualValue) {\n+        this.actualValue = actualValue;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final UserAttributeValueAsDate other = (UserAttributeValueAsDate) obj;\n+        if (this.actualValue != other.actualValue\n+                && (this.actualValue == null\n+                || !this.actualValue.equals(other.actualValue))) {\n+\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 61 * hash + (this.actualValue != null\n+                ? this.actualValue.hashCode() : 0);\n+        return super.hashCode() + hash;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\"\n+                + \"id=\" + getId() + \",\"\n+                + \"actualValue=\" + actualValue\n+                + \")\";\n+    }\n+}"},{"sha":"a1eff819e1c84e315cb100f202dabde5d4cf38ed","filename":"core/src/main/java/org/syncope/core/beans/UserAttributeValueAsDouble.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsDouble.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsDouble.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsDouble.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -0,0 +1,80 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.beans;\n+\n+import java.io.Serializable;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class UserAttributeValueAsDouble\n+        extends UserAttributeValue implements Serializable {\n+\n+    Double actualValue;\n+\n+    public UserAttributeValueAsDouble() {\n+    }\n+\n+    public UserAttributeValueAsDouble(Double actualValue) {\n+        super();\n+        this.actualValue = actualValue;\n+    }\n+\n+    public Double getActualValue() {\n+        return actualValue;\n+    }\n+\n+    public void setActualValue(Double actualValue) {\n+        this.actualValue = actualValue;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final UserAttributeValueAsDouble other =\n+                (UserAttributeValueAsDouble) obj;\n+        if (this.actualValue != other.actualValue\n+                && (this.actualValue == null\n+                || !this.actualValue.equals(other.actualValue))) {\n+\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 5;\n+        hash = 97 * hash + (this.actualValue != null\n+                ? this.actualValue.hashCode() : 0);\n+        return super.hashCode() + hash;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\"\n+                + \"id=\" + getId() + \",\"\n+                + \"actualValue=\" + actualValue\n+                + \")\";\n+    }\n+}"},{"sha":"b9540559aa90a3b88c9225401e104ae1381b48c6","filename":"core/src/main/java/org/syncope/core/beans/UserAttributeValueAsLong.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsLong.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsLong.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsLong.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -0,0 +1,79 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.beans;\n+\n+import java.io.Serializable;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class UserAttributeValueAsLong\n+        extends UserAttributeValue implements Serializable {\n+\n+    Long actualValue;\n+\n+    public UserAttributeValueAsLong() {\n+    }\n+\n+    public UserAttributeValueAsLong(Long actualValue) {\n+        super();\n+        this.actualValue = actualValue;\n+    }\n+\n+    public Long getActualValue() {\n+        return actualValue;\n+    }\n+\n+    public void setActualValue(Long actualValue) {\n+        this.actualValue = actualValue;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final UserAttributeValueAsLong other = (UserAttributeValueAsLong) obj;\n+        if (this.actualValue != other.actualValue\n+                && (this.actualValue == null\n+                || !this.actualValue.equals(other.actualValue))) {\n+\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 53 * hash + (this.actualValue != null\n+                ? this.actualValue.hashCode() : 0);\n+        return super.hashCode() + hash;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\"\n+                + \"id=\" + getId() + \",\"\n+                + \"actualValue=\" + actualValue\n+                + \")\";\n+    }\n+}"},{"sha":"b440e6111783f2c0eaa0f59cf07fddd3923c9b82","filename":"core/src/main/java/org/syncope/core/beans/UserAttributeValueAsString.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsString.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsString.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValueAsString.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -0,0 +1,80 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.beans;\n+\n+import java.io.Serializable;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class UserAttributeValueAsString\n+        extends UserAttributeValue implements Serializable {\n+\n+    String actualValue;\n+\n+    public UserAttributeValueAsString() {\n+    }\n+\n+    public UserAttributeValueAsString(String actualValue) {\n+        super();\n+        this.actualValue = actualValue;\n+    }\n+\n+    public String getActualValue() {\n+        return actualValue;\n+    }\n+\n+    public void setActualValue(String actualValue) {\n+        this.actualValue = actualValue;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final UserAttributeValueAsString other =\n+                (UserAttributeValueAsString) obj;\n+        if ((this.actualValue == null)\n+                ? (other.actualValue != null)\n+                : !this.actualValue.equals(other.actualValue)) {\n+\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 5;\n+        hash = 71 * hash + (this.actualValue != null\n+                ? this.actualValue.hashCode() : 0);\n+        return super.hashCode() + hash;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\"\n+                + \"id=\" + getId() + \",\"\n+                + \"actualValue=\" + actualValue\n+                + \")\";\n+    }\n+}"},{"sha":"8c4fed237423478b065279f7597fe62d32deb066","filename":"core/src/main/java/org/syncope/core/beans/UserAttributeValues.java","status":"added","additions":302,"deletions":0,"changes":302,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValues.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValues.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeValues.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -0,0 +1,302 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.beans;\n+\n+import java.io.Serializable;\n+import java.text.DecimalFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Transient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Entity\n+public class UserAttributeValues implements Serializable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\n+            UserAttributeValues.class);\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private Long id;\n+    @ManyToOne(cascade = CascadeType.REMOVE,\n+    fetch = FetchType.EAGER)\n+    private UserAttributeSchema userAttributeSchema;\n+    @Transient\n+    private Class userAttributeClass;\n+    @OneToMany(cascade = CascadeType.ALL,\n+    fetch = FetchType.EAGER)\n+    private Set<UserAttributeValue> attributeValues;\n+\n+    protected UserAttributeValues() {\n+        attributeValues = new HashSet<UserAttributeValue>();\n+    }\n+\n+    public UserAttributeValues(UserAttributeSchema userAttributeSchema)\n+            throws ClassNotFoundException {\n+\n+        this();\n+        this.setUserAttributeSchema(userAttributeSchema);\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public UserAttributeSchema getUserAttributeSchema() {\n+        return userAttributeSchema;\n+    }\n+\n+    public void setUserAttributeSchema(UserAttributeSchema userAttributeSchema)\n+            throws ClassNotFoundException {\n+\n+        this.userAttributeSchema = userAttributeSchema;\n+\n+        if (userAttributeSchema == null) {\n+            throw new NullPointerException(\n+                    \"Cannot set a NULL UserAttributeSchema!\");\n+        }\n+\n+        this.userAttributeSchema = userAttributeSchema;\n+        this.userAttributeClass = Class.forName(\n+                userAttributeSchema.getType().getClassName());\n+    }\n+\n+    public Set<? extends UserAttributeValue> getAttributeValues() {\n+        return attributeValues;\n+    }\n+\n+    public void setAttributeValues(Set<UserAttributeValue> attributeValues) {\n+        this.attributeValues = attributeValues;\n+    }\n+\n+    public boolean addAttributeValue(String value) {\n+        UserAttributeValue actualValue = null;\n+        try {\n+            actualValue = getUserattributeValue(value);\n+        } catch (ParseException e) {\n+            log.error(\"While parsing '\" + value + \"' as \"\n+                    + userAttributeClass.getClass().getName(), e);\n+        }\n+\n+        boolean result = false;\n+        if (actualValue != null) {\n+            if (!userAttributeSchema.isMultivalue()) {\n+                attributeValues.clear();\n+            }\n+            result = attributeValues.add(actualValue);\n+        }\n+\n+        return result;\n+    }\n+\n+    public boolean addAttributeValue(Object value)\n+            throws ClassCastException {\n+\n+        if (!userAttributeClass.isInstance(value)) {\n+            log.error(\"'\" + value + \"' is not an instance of \"\n+                    + userAttributeClass.getClass().getName());\n+\n+            throw getClassCastException(value);\n+        }\n+\n+        if (!userAttributeSchema.isMultivalue()) {\n+            attributeValues.clear();\n+        }\n+\n+        return attributeValues.add(getUserattributeValue(value));\n+    }\n+\n+    public boolean removeAttributeValue(String value) {\n+        UserAttributeValue actualValue = null;\n+        try {\n+            actualValue = getUserattributeValue(value);\n+        } catch (ParseException e) {\n+            log.error(\"While parsing '\" + value + \"' as \"\n+                    + userAttributeClass.getClass().getName(), e);\n+        }\n+\n+        boolean result = false;\n+        if (actualValue != null) {\n+            result = attributeValues.remove(actualValue);\n+            if (!attributeValues.isEmpty()\n+                    && !userAttributeSchema.isMultivalue()) {\n+\n+                attributeValues.clear();\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public boolean removeAttributeValue(Object value)\n+            throws ClassCastException {\n+\n+        if (!userAttributeClass.isInstance(value)) {\n+            log.error(\"'\" + value + \"' is not an instance of \"\n+                    + userAttributeClass.getClass().getName());\n+\n+            throw getClassCastException(value);\n+        }\n+\n+        boolean result = attributeValues.remove(getUserattributeValue(value));\n+        if (!attributeValues.isEmpty()\n+                && !userAttributeSchema.isMultivalue()) {\n+\n+            attributeValues.clear();\n+        }\n+\n+        return result;\n+    }\n+\n+    private UserAttributeValue getUserattributeValue(String value)\n+            throws ParseException {\n+\n+        UserAttributeValue result = null;\n+\n+        switch (userAttributeSchema.getType()) {\n+\n+            case String:\n+                result = new UserAttributeValueAsString(value);\n+                break;\n+\n+            case Boolean:\n+                result = new UserAttributeValueAsBoolean(\n+                        Boolean.parseBoolean(value));\n+                break;\n+\n+            case Long:\n+                result = new UserAttributeValueAsLong(\n+                        Long.valueOf(userAttributeSchema.getFormatter(\n+                        DecimalFormat.class).parse(value).longValue()));\n+                break;\n+\n+            case Double:\n+                result = new UserAttributeValueAsDouble(\n+                        Double.valueOf(userAttributeSchema.getFormatter(\n+                        DecimalFormat.class).parse(value).doubleValue()));\n+                break;\n+\n+            case Date:\n+                result = new UserAttributeValueAsDate(\n+                        new Date(userAttributeSchema.getFormatter(\n+                        SimpleDateFormat.class).parse(value).getTime()));\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    private UserAttributeValue getUserattributeValue(Object value) {\n+\n+        UserAttributeValue result = null;\n+\n+        switch (userAttributeSchema.getType()) {\n+\n+            case String:\n+                result = new UserAttributeValueAsString((String) value);\n+                break;\n+\n+            case Boolean:\n+                result = new UserAttributeValueAsBoolean((Boolean) value);\n+                break;\n+\n+            case Long:\n+                result = new UserAttributeValueAsLong((Long) value);\n+                break;\n+\n+            case Double:\n+                result = new UserAttributeValueAsDouble((Double) value);\n+                break;\n+\n+            case Date:\n+                result = new UserAttributeValueAsDate((Date) value);\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    private ClassCastException getClassCastException(Object value) {\n+        return new ClassCastException(\"Passed value is instance of \"\n+                + value.getClass().getName()\n+                + \", while this attribute has type \"\n+                + userAttributeClass.getName());\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final UserAttributeValues other = (UserAttributeValues) obj;\n+        if (this.id != other.id\n+                && (this.id == null || !this.id.equals(other.id))) {\n+\n+            return false;\n+        }\n+        if (this.userAttributeSchema != other.userAttributeSchema\n+                && (this.userAttributeSchema == null\n+                || !this.userAttributeSchema.equals(other.userAttributeSchema))) {\n+\n+            return false;\n+        }\n+        if (this.attributeValues != other.attributeValues\n+                && (this.attributeValues == null\n+                || !this.attributeValues.equals(other.attributeValues))) {\n+\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 97 * hash + (this.id != null ? this.id.hashCode() : 0);\n+        hash = 97 * hash + (this.userAttributeSchema != null\n+                ? this.userAttributeSchema.hashCode() : 0);\n+        hash = 97 * hash + (this.attributeValues != null\n+                ? this.attributeValues.hashCode() : 0);\n+\n+        return hash;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\"\n+                + \"id=\" + getId() + \",\"\n+                + \"userAttributeSchema=\" + userAttributeSchema + \",\"\n+                + \"attributeValues=\" + attributeValues\n+                + \")\";\n+    }\n+}"},{"sha":"2c7649af9b95bd0b44f8a4d2946b93c3039f854a","filename":"core/src/main/java/org/syncope/core/dao/UserAttributeValuesDAO.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserAttributeValuesDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserAttributeValuesDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2FUserAttributeValuesDAO.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -0,0 +1,29 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.dao;\n+\n+import java.util.List;\n+import org.syncope.core.beans.UserAttributeValues;\n+\n+public interface UserAttributeValuesDAO extends DAO {\n+\n+    UserAttributeValues find(long id);\n+\n+    List<UserAttributeValues> findAll();\n+\n+    UserAttributeValues save(UserAttributeValues userAttributeValues);\n+\n+    void delete(long id);\n+}"},{"sha":"70ade39c3572413be02b8988fea1cc216618c276","filename":"core/src/main/java/org/syncope/core/dao/impl/UserAttributeValuesDAOImpl.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeValuesDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeValuesDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeValuesDAOImpl.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -0,0 +1,51 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.beans.UserAttributeValues;\n+import org.syncope.core.dao.UserAttributeValuesDAO;\n+\n+public class UserAttributeValuesDAOImpl extends AbstractDAOImpl\n+        implements UserAttributeValuesDAO {\n+\n+    @Override\n+    public UserAttributeValues find(long id) {\n+        return entityManager.find(UserAttributeValues.class, id);\n+    }\n+\n+    @Override\n+    public List<UserAttributeValues> findAll() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM UserAttributeValues e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public UserAttributeValues save(UserAttributeValues userAttributeValues) {\n+        UserAttributeValues result = entityManager.merge(userAttributeValues);\n+        entityManager.flush();\n+        return result;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void delete(long id) {\n+        entityManager.remove(find(id));\n+    }\n+}"},{"sha":"618729869940f1d0e60db7cd7548fd4fba4ec557","filename":"core/src/main/java/org/syncope/core/enums/AttributeType.java","status":"modified","additions":34,"deletions":5,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fenums%2FAttributeType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fenums%2FAttributeType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fenums%2FAttributeType.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -14,11 +14,40 @@\n  */\n package org.syncope.core.enums;\n \n+import java.text.DecimalFormat;\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+\n public enum AttributeType {\n \n-    String,\n-    Integer,\n-    Long,\n-    Boolean,\n-    Date\n+    String(\"java.lang.String\"),\n+    Long(\"java.lang.Long\"),\n+    Double(\"java.lang.Double\"),\n+    Boolean(\"java.lang.Boolean\"),\n+    Date(\"java.util.Date\");\n+    final private String className;\n+    private Format formatter;\n+\n+    AttributeType(String className) {\n+        this.className = className;\n+        this.formatter = null;\n+    }\n+\n+    public String getClassName() {\n+        return className;\n+    }\n+\n+    public Format getFormatter() {\n+        if (formatter == null) {\n+            switch (this) {\n+                case Date:\n+                    this.formatter = new SimpleDateFormat();\n+                case Long:\n+                case Double:\n+                    this.formatter = new DecimalFormat();\n+            }\n+        }\n+\n+        return formatter;\n+    }\n }"},{"sha":"8a061720f61bb1d881b82c8621fcaed7f8262bf5","filename":"core/src/main/resources/applicationContext.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -40,5 +40,8 @@\n     <bean id=\"userAttributeSchemaDAO\" class=\"org.syncope.core.dao.impl.UserAttributeSchemaDAOImpl\">\n         <property name=\"entityManager\" ref=\"entityManager\" />\n     </bean>\n-\n+    <bean id=\"userAttributeValuesDAO\" class=\"org.syncope.core.dao.impl.UserAttributeValuesDAOImpl\">\n+        <property name=\"entityManager\" ref=\"entityManager\" />\n+    </bean>\n+    \n </beans>\n\\ No newline at end of file"},{"sha":"499cfd98452d8124b75fcecf06364b6e9a366b45","filename":"core/src/main/resources/log4j.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -27,7 +27,7 @@\n     </logger>\n \n     <logger name=\"org.syncope.core.test\" additivity=\"false\">\n-        <level value=\"DEBUG\"/>\n+        <level value=\"INFO\"/>\n         <appender-ref ref=\"test\"/>\n     </logger>\n "},{"sha":"8efee3ba38a2579421718fbbb2639b9b5bf0ac62","filename":"core/src/test/java/org/syncope/core/test/dao/AbstractDAOTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FAbstractDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FAbstractDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FAbstractDAOTest.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -68,7 +68,9 @@ protected void onSetUpInTransaction() throws Exception {\n                 + dataSetFileName + \".xml\"));\n \n         try {\n-            DatabaseOperation.REFRESH.execute(dbUnitConn, dataSet);\n+            DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn, dataSet);\n+        } catch (Throwable t) {\n+            log.error(\"While executing tests\", t);\n         } finally {\n             DataSourceUtils.releaseConnection(conn, dataSource);\n         }"},{"sha":"a3b3fda5ebf7ab5da56fb5d5ce7c73ea56f971a0","filename":"core/src/test/java/org/syncope/core/test/dao/UserAttributeSchemaDAOTest.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeSchemaDAOTest.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -35,7 +35,7 @@ protected UserAttributeSchemaDAO getDAO() {\n     public final void testFindAll() {\n         List<UserAttributeSchema> list = getDAO().findAll();\n         assertEquals(\"did not get expected number of attribute schemas \",\n-                2, list.size());\n+                3, list.size());\n     }\n \n     @Test\n@@ -53,11 +53,14 @@ public final void testSave() {\n         UserAttributeSchema userAttributeSchema = new UserAttributeSchema();\n         userAttributeSchema.setName(\"email\");\n         userAttributeSchema.setType(AttributeType.String);\n+        userAttributeSchema.setMandatory(false);\n+        userAttributeSchema.setMultivalue(true);\n \n         getDAO().save(userAttributeSchema);\n \n         UserAttributeSchema actual = getDAO().find(\"email\");\n         assertNotNull(\"expected save to work\", actual);\n+        assertEquals(userAttributeSchema, actual);\n     }\n \n     @Test"},{"sha":"52d5fb1a93c599850b45b1b8ac67f747a4bbc06d","filename":"core/src/test/java/org/syncope/core/test/dao/UserAttributeValuesDAOTest.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeValuesDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeValuesDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeValuesDAOTest.java?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -0,0 +1,97 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.dao;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.springframework.context.ApplicationContext;\n+import org.syncope.core.beans.UserAttributeSchema;\n+import org.syncope.core.beans.UserAttributeValues;\n+import org.syncope.core.dao.UserAttributeSchemaDAO;\n+import org.syncope.core.dao.UserAttributeValuesDAO;\n+import org.syncope.core.enums.AttributeType;\n+\n+public class UserAttributeValuesDAOTest extends AbstractDAOTest {\n+\n+    UserAttributeSchemaDAO userAttributeSchemaDAO;\n+\n+    public UserAttributeValuesDAOTest() {\n+        super(\"userAttributeValuesDAO\", \"UserAttributeValuesDAOImpl\");\n+\n+        ApplicationContext ctx = super.getApplicationContext();\n+        userAttributeSchemaDAO = (UserAttributeSchemaDAO) ctx.getBean(\"userAttributeSchemaDAO\");\n+        assertNotNull(userAttributeSchemaDAO);\n+    }\n+\n+    @Override\n+    protected UserAttributeValuesDAO getDAO() {\n+        return (UserAttributeValuesDAO) dao;\n+    }\n+\n+    @Test\n+    public final void testFindAll() {\n+        List<UserAttributeValues> list = getDAO().findAll();\n+        assertEquals(\"did not get expected number of attribute schemas \",\n+                2, list.size());\n+    }\n+\n+    @Test\n+    public final void testFindByName() {\n+        UserAttributeValues userAttributeValues = getDAO().find(100L);\n+        assertNotNull(\"did not find expected attribute schema\",\n+                userAttributeValues);\n+        userAttributeValues = getDAO().find(200L);\n+        assertNotNull(\"did not find expected attribute schema\",\n+                userAttributeValues);\n+    }\n+\n+    @Test\n+    public final void testSave() throws ClassNotFoundException {\n+        UserAttributeSchema emailSchema = new UserAttributeSchema();\n+        emailSchema.setName(\"email\");\n+        emailSchema.setType(AttributeType.String);\n+        emailSchema.setMandatory(false);\n+        emailSchema.setMultivalue(true);\n+\n+        userAttributeSchemaDAO.save(emailSchema);\n+\n+        UserAttributeSchema actualEmailSchema =\n+                userAttributeSchemaDAO.find(\"email\");\n+        assertNotNull(\"expected save to work for e-mail schema\",\n+                actualEmailSchema);\n+\n+        UserAttributeValues userAttributeValues =\n+                new UserAttributeValues(actualEmailSchema);\n+        userAttributeValues.addAttributeValue(\"john.doe@gmail.com\");\n+        userAttributeValues.addAttributeValue(\"mario.rossi@gmail.com\");\n+\n+        userAttributeValues = getDAO().save(userAttributeValues);\n+\n+        UserAttributeValues actual = getDAO().find(userAttributeValues.getId());\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(userAttributeValues, actual);\n+    }\n+\n+    @Test\n+    public final void testDelete() {\n+\n+        UserAttributeValues userAttributeValues = getDAO().find(100L);\n+\n+        getDAO().delete(userAttributeValues.getId());\n+\n+        UserAttributeValues actual = getDAO().find(100L);\n+        assertNull(\"delete did not work\", actual);\n+    }\n+}"},{"sha":"bd81c4a98e20fdc2f747bd04c83fd865e3d1ea1b","filename":"core/src/test/resources/dbunit-test-data/UserAttributeSchemaDAOImpl.xml","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeSchemaDAOImpl.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeSchemaDAOImpl.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeSchemaDAOImpl.xml?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -1,9 +1,12 @@\n <?xml version='1.0' encoding='UTF-8'?>\r\n <dataset>\r\n     <UserAttributeSchema name=\"username\" type=\"String\"\r\n-                         conversionPattern=\"NULL\"\r\n-                         conversionClass=\"NULL\"/>\r\n+                         mandatory=\"true\" multivalue=\"false\"\r\n+                         conversionPattern=\"NULL\"/>\r\n     <UserAttributeSchema name=\"birthdate\" type=\"Date\"\r\n-                         conversionPattern=\"yyyy-MM-dd\"\r\n-                         conversionClass=\"java.text.SimpleDateFormat\" />\r\n+                         mandatory=\"false\" multivalue=\"false\"\r\n+                         conversionPattern=\"yyyy-MM-dd\"/>\r\n+    <UserAttributeSchema name=\"salaries\" type=\"Double\"\r\n+                         mandatory=\"false\" multivalue=\"true\"\r\n+                         conversionPattern=\"###,###.###\"/>\r\n </dataset>\r"},{"sha":"001f0f399652559bf794b77d18cfcfa0b56d425b","filename":"core/src/test/resources/dbunit-test-data/UserAttributeValuesDAOImpl.xml","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeValuesDAOImpl.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88a3e778c5731d1282e113e1f31e74ae7b4076b3/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeValuesDAOImpl.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fdbunit-test-data%2FUserAttributeValuesDAOImpl.xml?ref=88a3e778c5731d1282e113e1f31e74ae7b4076b3","patch":"@@ -0,0 +1,28 @@\n+<?xml version='1.0' encoding='UTF-8'?>\r\n+<dataset>\r\n+    <UserAttributeSchema name=\"username\" type=\"String\"\r\n+                         mandatory=\"true\" multivalue=\"false\"\r\n+                         conversionPattern=\"NULL\"/>\r\n+    <UserAttributeSchema name=\"loginDate\" type=\"Date\"\r\n+                         mandatory=\"false\" multivalue=\"true\"\r\n+                         conversionPattern=\"yyyy-MM-dd\"/>\r\n+\r\n+    <UserAttributeValues id=\"100\" userAttributeSchema_name=\"username\"/>\r\n+    <UserAttributeValues id=\"200\" userAttributeSchema_name=\"loginDate\"/>\r\n+\r\n+    <UserAttributeValue id=\"10\"/>\r\n+    <UserAttributeValue id=\"20\"/>\r\n+    <UserAttributeValue id=\"21\"/>\r\n+\r\n+    <UserAttributeValueAsString id=\"10\" actualValue=\"chicchiricco\"/>\r\n+\r\n+    <UserAttributeValueAsDate id=\"20\" actualValue=\"2009-05-26\"/>\r\n+    <UserAttributeValueAsDate id=\"21\" actualValue=\"2010-05-26 15:40:04\"/>\r\n+\r\n+    <UserAttributeValues_UserAttributeValue\r\n+        UserAttributeValues_id=\"100\" attributeValues_id=\"10\"/>\r\n+    <UserAttributeValues_UserAttributeValue\r\n+        UserAttributeValues_id=\"200\" attributeValues_id=\"20\"/>\r\n+    <UserAttributeValues_UserAttributeValue\r\n+        UserAttributeValues_id=\"200\" attributeValues_id=\"21\"/>\r\n+</dataset>\r"}]}