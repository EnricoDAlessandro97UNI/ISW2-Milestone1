{"sha":"73f5734def2a0501f157357e3499798e7e53bd6b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjczZjU3MzRkZWYyYTA1MDFmMTU3MzU3ZTM0OTk3OThlN2U1M2JkNmI=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-04-24T10:44:03Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-04-24T10:44:03Z"},"message":"SYNCOPE-63 #comment On-change event used to be written onChange instead of onchange\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1329631 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"609c423c0113cb168c633e81c3947dec0df52d4a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/609c423c0113cb168c633e81c3947dec0df52d4a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/73f5734def2a0501f157357e3499798e7e53bd6b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/73f5734def2a0501f157357e3499798e7e53bd6b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/73f5734def2a0501f157357e3499798e7e53bd6b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/73f5734def2a0501f157357e3499798e7e53bd6b/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"7fb27d9d67fa0d239dbef14102a85b48d33054ac","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7fb27d9d67fa0d239dbef14102a85b48d33054ac","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7fb27d9d67fa0d239dbef14102a85b48d33054ac"}],"stats":{"total":32,"additions":16,"deletions":16},"files":[{"sha":"aced86ea32491f096da816bae201a3d3ae66458e","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PolicyBeanPanel.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/73f5734def2a0501f157357e3499798e7e53bd6b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/73f5734def2a0501f157357e3499798e7e53bd6b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java?ref=73f5734def2a0501f157357e3499798e7e53bd6b","patch":"@@ -116,29 +116,29 @@ protected void populateItem(ListItem<FieldWrapper> item) {\n                 try {\n                     if (field.getType().equals(ConflictResolutionAction.class)) {\n                         classMethod = policy.getClass().getMethod(\"get\" + StringUtils.capitalize(field.getName()),\n-                                new Class[] {});\n+                                new Class[]{});\n \n                         component = new AjaxDropDownChoicePanel(\"field\", field.getName(), new PropertyModel(policy,\n                                 field.getName()));\n \n-                        ((AjaxDropDownChoicePanel) component).setChoices(Arrays.asList(ConflictResolutionAction\n-                                .values()));\n+                        ((AjaxDropDownChoicePanel) component).setChoices(\n+                                Arrays.asList(ConflictResolutionAction.values()));\n \n                         item.add(component);\n \n                         item.add(getActivationControl(component,\n-                                (Enum) classMethod.invoke(policy, new Object[] {}) != null,\n+                                (Enum) classMethod.invoke(policy, new Object[]{}) != null,\n                                 ConflictResolutionAction.IGNORE, ConflictResolutionAction.IGNORE));\n \n                     } else if (field.getType().equals(boolean.class) || field.getType().equals(Boolean.class)) {\n-                        item.add(new AjaxCheckBoxPanel(\"check\", field.getName(), new PropertyModel(policy, field\n-                                .getName())));\n+                        item.add(new AjaxCheckBoxPanel(\"check\", field.getName(), new PropertyModel(policy,\n+                                field.getName())));\n \n                         item.add(new Label(\"field\", new Model(null)));\n \n                     } else if (field.getType().equals(List.class) || field.getType().equals(Set.class)) {\n                         classMethod = policy.getClass().getMethod(\"get\" + StringUtils.capitalize(field.getName()),\n-                                new Class[] {});\n+                                new Class[]{});\n \n                         if (field.getSchemaList() != null) {\n                             final List values = schemas.getObject();\n@@ -154,14 +154,14 @@ protected void populateItem(ListItem<FieldWrapper> item) {\n                             item.add(component);\n \n                             item.add(getActivationControl(component, !((List) classMethod.invoke(policy,\n-                                    new Object[] {})).isEmpty(), new ArrayList<String>(), new ArrayList<String>()));\n+                                    new Object[]{})).isEmpty(), new ArrayList<String>(), new ArrayList<String>()));\n                         } else {\n                             final FieldPanel panel = new AjaxTextFieldPanel(\"panel\", field.getName(), new Model(null));\n \n                             panel.setRequired(true);\n \n-                            component = new MultiValueSelectorPanel<String>(\"field\", new PropertyModel(policy, field\n-                                    .getName()), panel);\n+                            component = new MultiValueSelectorPanel<String>(\"field\", new PropertyModel(policy, field.\n+                                    getName()), panel);\n \n                             item.add(component);\n \n@@ -170,21 +170,21 @@ protected void populateItem(ListItem<FieldWrapper> item) {\n                             reinitializedValue.add(\"\");\n \n                             item.add(getActivationControl(component, !((List<String>) classMethod.invoke(policy,\n-                                    new Object[] {})).isEmpty(), (Serializable) new ArrayList<String>(),\n+                                    new Object[]{})).isEmpty(), (Serializable) new ArrayList<String>(),\n                                     (Serializable) reinitializedValue));\n                         }\n                     } else if (field.getType().equals(int.class) || field.getType().equals(Integer.class)) {\n \n                         classMethod = policy.getClass().getMethod(\"get\" + StringUtils.capitalize(field.getName()),\n-                                new Class[] {});\n+                                new Class[]{});\n \n-                        component = new AjaxTextFieldPanel(\"field\", field.getName(), new PropertyModel(policy, field\n-                                .getName()));\n+                        component = new AjaxTextFieldPanel(\"field\", field.getName(), new PropertyModel(policy, field.\n+                                getName()));\n \n                         item.add(component);\n \n                         item.add(getActivationControl(component,\n-                                (Integer) classMethod.invoke(policy, new Object[] {}) > 0, 0, 0));\n+                                (Integer) classMethod.invoke(policy, new Object[]{}) > 0, 0, 0));\n                     } else {\n                         item.add(new AjaxCheckBoxPanel(\"check\", field.getName(), new Model()));\n                         item.add(new Label(\"field\", new Model(null)));\n@@ -205,7 +205,7 @@ private <T extends Serializable> AjaxCheckBoxPanel getActivationControl(final Ab\n \n         panel.setEnabled(checked);\n \n-        check.getField().add(new AjaxFormComponentUpdatingBehavior(\"onChange\") {\n+        check.getField().add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n "}]}