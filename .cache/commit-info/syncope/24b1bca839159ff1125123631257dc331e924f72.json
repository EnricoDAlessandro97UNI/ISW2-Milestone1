{"sha":"24b1bca839159ff1125123631257dc331e924f72","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI0YjFiY2E4MzkxNTlmZjExMjUxMjM2MzEyNTdkYzMzMWU5MjRmNzI=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-31T15:39:15Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-31T15:39:15Z"},"message":"[SYNCOPE-231]\n* adding JAVA DOC for Service Interfaces\n* Code cleanup\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1441023 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"74610c3316fe0a228a3fd5f832df97c1ee846ef0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/74610c3316fe0a228a3fd5f832df97c1ee846ef0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/24b1bca839159ff1125123631257dc331e924f72","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/24b1bca839159ff1125123631257dc331e924f72","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/24b1bca839159ff1125123631257dc331e924f72","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/24b1bca839159ff1125123631257dc331e924f72/comments","author":null,"committer":null,"parents":[{"sha":"b516c80163dee940abde89a40a2cdf3a6dc1302e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b516c80163dee940abde89a40a2cdf3a6dc1302e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b516c80163dee940abde89a40a2cdf3a6dc1302e"}],"stats":{"total":99,"additions":89,"deletions":10},"files":[{"sha":"40cd11ca04d3b0e14c451ccfcb9708840744e9b7","filename":"common/src/main/java/org/apache/syncope/common/services/SchemaService.java","status":"modified","additions":46,"deletions":6,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24b1bca839159ff1125123631257dc331e924f72/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24b1bca839159ff1125123631257dc331e924f72/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java?ref=24b1bca839159ff1125123631257dc331e924f72","patch":"@@ -36,45 +36,85 @@ public interface SchemaService {\n     @XmlEnum\r\n     enum SchemaType {\r\n \r\n-        NORMAL(\"schema\"),\r\n+        /**\r\n+         * Derived schema calculated based on other attributes.\r\n+         */\r\n         DERIVED(\"derivedSchema\"),\r\n+\r\n+        /**\r\n+         * Standard schema for normal attributes to be stored within syncope.\r\n+         */\r\n+        NORMAL(\"schema\"),\r\n+\r\n+        /**\r\n+         * Virtual schema for attributes fetched from remote resources only.\r\n+         */\r\n         VIRTUAL(\"virtualSchema\");\r\n \r\n+        public static SchemaType fromString(String value) {\r\n+            return SchemaType.valueOf(value.toUpperCase());\r\n+        }\r\n+\r\n+        // TODO remove name once CXF migration is complete\r\n         private final String name;\r\n \r\n         private SchemaType(String name) {\r\n             this.name = name;\r\n         }\r\n \r\n-        // TODO remove once CXF migration is complete\r\n         public String toSpringURL() {\r\n             return name;\r\n         }\r\n-\r\n-        public static SchemaType fromString(String value) {\r\n-            return SchemaType.valueOf(value.toUpperCase());\r\n-        }\r\n     }\r\n \r\n+    /**\r\n+     * @param kind Kind for schema to be created\r\n+     * @param type Type for schema to be created\r\n+     * @param schemaTO Schema to be created\r\n+     * @return Response containing URI location for created resource.\r\n+     */\r\n     @POST\r\n     <T extends AbstractSchemaTO> Response create(@PathParam(\"kind\") AttributableType kind,\r\n             @PathParam(\"type\") SchemaType type, T schemaTO);\r\n \r\n+    /**\r\n+     * @param kind Kind for schema to be deleted\r\n+     * @param type Type for schema to be deleted\r\n+     * @param schemaName Name of schema to be deleted\r\n+     */\r\n     @DELETE\r\n     @Path(\"{name}\")\r\n     void delete(@PathParam(\"kind\") AttributableType kind, @PathParam(\"type\") SchemaType type,\r\n             @PathParam(\"name\") String schemaName);\r\n \r\n+    /**\r\n+     * @param kind Kind for schemas to be listed\r\n+     * @param type Type for schemas to be listed\r\n+     * @return List of schemas with matching kind and type\r\n+     */\r\n     @GET\r\n     List<? extends AbstractSchemaTO> list(@PathParam(\"kind\") AttributableType kind, @PathParam(\"type\") SchemaType type);\r\n \r\n+    /**\r\n+     * @param kind Kind for schemas to be read\r\n+     * @param type Type for schemas to be read\r\n+     * @param schemaName Name of schema to be read\r\n+     * @return Returns schema with matching name, kind and type\r\n+     */\r\n     @GET\r\n     @Path(\"{name}\")\r\n     <T extends AbstractSchemaTO> T read(@PathParam(\"kind\") AttributableType kind, @PathParam(\"type\") SchemaType type,\r\n             @PathParam(\"name\") String schemaName);\r\n \r\n+    /**\r\n+     * @param kind Kind for schemas to be updated\r\n+     * @param type Type for schemas to be updated\r\n+     * @param schemaName Name of schema to be updated\r\n+     * @param schemaTO New schema to be stored\r\n+     */\r\n     @PUT\r\n     @Path(\"{name}\")\r\n     <T extends AbstractSchemaTO> void update(@PathParam(\"kind\") AttributableType kind,\r\n             @PathParam(\"type\") SchemaType type, @PathParam(\"name\") String schemaName, T schemaTO);\r\n+\r\n }\r"},{"sha":"daba9848beca595f7dc9fe422f988ad0d34f5c13","filename":"common/src/main/java/org/apache/syncope/common/services/UserRequestService.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24b1bca839159ff1125123631257dc331e924f72/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24b1bca839159ff1125123631257dc331e924f72/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java?ref=24b1bca839159ff1125123631257dc331e924f72","patch":"@@ -32,26 +32,53 @@\n \r\n @Path(\"requests/user\")\r\n public interface UserRequestService {\r\n+\r\n     public static final String SYNCOPE_CREATE_ALLOWED = \"Syncope-Create-Allowed\";\r\n \r\n+    /**\r\n+     * This method is similar to {@link #isCreateAllowed()}, but follows RESTful best practices.\r\n+     *\r\n+     * @return Response contains special syncope HTTP header (SYNCOPE_CREATE_ALLOWED), indicating if user is allowed to\r\n+     * make a create UserRequest\r\n+     */\r\n     @OPTIONS\r\n     Response getOptions();\r\n \r\n+    /**\r\n+     * This method is similar to {@link #getOptions()}, but without following RESTful best practices.\r\n+     *\r\n+     * @return Returns true, if user is allowed to make user create requests\r\n+     */\r\n     @GET\r\n     @Path(\"create/allowed\")\r\n     boolean isCreateAllowed();\r\n \r\n+    /**\r\n+     * @param userRequestTO Request for user to be created\r\n+     * @return Response containing URI location for created resource\r\n+     */\r\n     @POST\r\n     Response create(UserRequestTO userRequestTO);\r\n \r\n+    /**\r\n+     * @return Returns list of all UserRequests.\r\n+     */\r\n     @GET\r\n     List<UserRequestTO> list();\r\n \r\n+    /**\r\n+     * @param requestId ID of UserRequest to be read\r\n+     * @return Returns UserRequest with matching requestId.\r\n+     */\r\n     @GET\r\n     @Path(\"{requestId}\")\r\n     UserRequestTO read(@PathParam(\"requestId\") Long requestId);\r\n \r\n+    /**\r\n+     * @param requestId ID of UserRequest to be deleted.\r\n+     */\r\n     @DELETE\r\n     @Path(\"{requestId}\")\r\n     void delete(@PathParam(\"requestId\") Long requestId);\r\n+\r\n }\r"},{"sha":"d92f3961db7712ca008ac236d366376e227a0dca","filename":"common/src/main/java/org/apache/syncope/common/services/WorkflowService.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24b1bca839159ff1125123631257dc331e924f72/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24b1bca839159ff1125123631257dc331e924f72/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java?ref=24b1bca839159ff1125123631257dc331e924f72","patch":"@@ -27,18 +27,29 @@\n import org.apache.syncope.common.to.WorkflowDefinitionTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n \r\n-@Path(\"workflows\")\r\n+@Path(\"workflows/{kind}\")\r\n public interface WorkflowService {\r\n \r\n+    /**\r\n+     * @param kind Kind can be USER or ROLE only!\r\n+     * @return Returns workflow definition for matching kind.\r\n+     */\r\n     @GET\r\n-    @Path(\"{kind}\")\r\n     WorkflowDefinitionTO getDefinition(@PathParam(\"kind\") AttributableType kind);\r\n \r\n+    /**\r\n+     * @param kind Kind can be USER or ROLE only!\r\n+     * @param definition New workflow definition to be stored for matching kind.\r\n+     */\r\n     @PUT\r\n-    @Path(\"{kind}\")\r\n     void updateDefinition(@PathParam(\"kind\") AttributableType kind, WorkflowDefinitionTO definition);\r\n \r\n+    /**\r\n+     * @param kind Kind can be USER or ROLE only!\r\n+     * @return Returns existing tasks for matching kind.\r\n+     */\r\n     @GET\r\n-    @Path(\"{kind}/tasks\")\r\n+    @Path(\"tasks\")\r\n     List<String> getDefinedTasks(@PathParam(\"kind\") AttributableType kind);\r\n+\r\n }\r"},{"sha":"d6531e8a1fbc0196a80de44aa7cbf68924e3d758","filename":"common/src/main/java/org/apache/syncope/common/to/WorkflowDefinitionTO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24b1bca839159ff1125123631257dc331e924f72/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowDefinitionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24b1bca839159ff1125123631257dc331e924f72/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowDefinitionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowDefinitionTO.java?ref=24b1bca839159ff1125123631257dc331e924f72","patch":"@@ -48,4 +48,5 @@ public String getXmlDefinition() {\n     public void setXmlDefinition(String xmlDefinition) {\r\n         this.xmlDefinition = xmlDefinition;\r\n     }\r\n+\r\n }\r"}]}