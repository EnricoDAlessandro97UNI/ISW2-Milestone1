{"sha":"36fb466afd64894170fa5e2e030ce6895120b1af","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM2ZmI0NjZhZmQ2NDg5NDE3MGZhNWUyZTAzMGNlNjg5NTEyMGIxYWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-19T11:26:52Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-22T07:02:08Z"},"message":"Fixing some missing JPA entities' validation","tree":{"sha":"abbe6920f29b0f739eee38a767b885dbb4d48398","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/abbe6920f29b0f739eee38a767b885dbb4d48398"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/36fb466afd64894170fa5e2e030ce6895120b1af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/36fb466afd64894170fa5e2e030ce6895120b1af","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/36fb466afd64894170fa5e2e030ce6895120b1af","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/36fb466afd64894170fa5e2e030ce6895120b1af/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"30286d96515deb9a03c551d37129f9584ac31793","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/30286d96515deb9a03c551d37129f9584ac31793","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/30286d96515deb9a03c551d37129f9584ac31793"}],"stats":{"total":370,"additions":300,"deletions":70},"files":[{"sha":"acc1577d1de7f91872d615fe373d9d815a69315f","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.client.enduser.util.UserRequestValidator;\n+import org.apache.syncope.client.enduser.util.Validation;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -81,7 +81,7 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                 LOG.trace(\"Request is [{}]\", userTO);\n \n                 // check if request is compliant with customization form rules\n-                if (UserRequestValidator.compliant(userTO,\n+                if (Validation.isCompliant(userTO,\n                         SyncopeEnduserApplication.get().getCustomFormAttributes(), true)) {\n \n                     // 1. membership attributes management"},{"sha":"1ea8530c4b734d4c6873e135479ad3d8285727ae","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n-import org.apache.syncope.client.enduser.util.UserRequestValidator;\n+import org.apache.syncope.client.enduser.util.Validation;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.patch.UserPatch;\n@@ -70,7 +70,7 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                     SyncopeEnduserApplication.get().getCustomFormAttributes();\n \n             // check if request is compliant with customization form rules\n-            if (UserRequestValidator.compliant(userTO, customFormAttributes, false)) {\n+            if (Validation.isCompliant(userTO, customFormAttributes, false)) {\n                 // 1. membership attributes management\n                 Set<AttrTO> membAttrs = new HashSet<>();\n                 userTO.getPlainAttrs().stream()."},{"sha":"acb3f133b4449d01959276df56f93bdcb83306e8","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/util/SaltGenerator.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FSaltGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FSaltGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FSaltGenerator.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -43,5 +43,6 @@ public static String generate(final String input) {\n     }\n \n     private SaltGenerator() {\n+        // private constructor for static utility class\n     }\n }"},{"sha":"4924a530f672e775b949640a237b9f14730a7f45","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/util/Validation.java","status":"renamed","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FValidation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FValidation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FValidation.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -30,14 +30,13 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public final class UserRequestValidator {\n+public final class Validation {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UserRequestValidator.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(Validation.class);\n \n-    private UserRequestValidator() {\n-    }\n-\n-    public static boolean compliant(final UserTO userTO, final Map<String, CustomAttributesInfo> customFormAttributes,\n+    public static boolean isCompliant(\n+            final UserTO userTO,\n+            final Map<String, CustomAttributesInfo> customFormAttributes,\n             final boolean checkDefaultValues) {\n \n         if (customFormAttributes == null || customFormAttributes.isEmpty()) {\n@@ -68,7 +67,6 @@ private static boolean validateAttributes(final Map<String, AttrTO> attrMap,\n                     }\n                     return compliant;\n                 });\n-\n     }\n \n     public static boolean validateSteps(final CustomTemplateInfo customTemplateInfo) {\n@@ -92,4 +90,7 @@ private static boolean isValid(final AttrTO attrTO, final CustomAttribute custom\n                 : true;\n     }\n \n+    private Validation() {\n+        // private constructor for static utility class\n+    }\n }","previous_filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/util/UserRequestValidator.java"},{"sha":"1fdd91e63654c2ae095cc1ac0f9853fdd99f9496","filename":"client/enduser/src/test/java/org/apache/syncope/client/enduser/util/ValidationTest.java","status":"renamed","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FValidationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FValidationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FValidationTest.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -34,7 +34,7 @@\n import org.junit.jupiter.api.Test;\n import org.springframework.core.io.ClassPathResource;\n \n-public class UserRequestValidatorTest {\n+public class ValidationTest {\n \n     private AttrTO attrTO(String schemaKey, String... values) {\n         return new AttrTO.Builder().schema(schemaKey).values(values).build();\n@@ -58,41 +58,40 @@ public void testCompliant() throws IOException {\n                 \"customTemplate.json\").getFile(), CustomTemplateInfo.class);\n \n         // not allowed because of presence of notAllowed attribute\n-        assertFalse(UserRequestValidator.compliant(userTO, customFormAttributes, true));\n+        assertFalse(Validation.isCompliant(userTO, customFormAttributes, true));\n \n         // remove notAllowed attribute and make it compliant\n         userTO.getPlainAttrs().remove(notAllowed);\n-        assertTrue(UserRequestValidator.compliant(userTO, customFormAttributes, true));\n+        assertTrue(Validation.isCompliant(userTO, customFormAttributes, true));\n \n         // firstname must have only one defaultValue\n         userTO.getPlainAttr(\"firstname\").get().getValues().add(\"notAllowedFirstnameValue\");\n-        assertFalse(UserRequestValidator.compliant(userTO, customFormAttributes, true));\n-        assertTrue(UserRequestValidator.compliant(userTO, customFormAttributes, false));\n+        assertFalse(Validation.isCompliant(userTO, customFormAttributes, true));\n+        assertTrue(Validation.isCompliant(userTO, customFormAttributes, false));\n \n         // clean\n         userTO.getPlainAttr(\"firstname\").get().getValues().remove(\"notAllowedFirstnameValue\");\n \n         // virtual\n         AttrTO virtualdata = attrTO(\"virtualdata\", \"defaultVirtualData\");\n         userTO.getVirAttrs().add(virtualdata);\n-        assertTrue(UserRequestValidator.compliant(userTO, customFormAttributes, true));\n+        assertTrue(Validation.isCompliant(userTO, customFormAttributes, true));\n \n         // with empty form is compliant by definition\n-        assertTrue(UserRequestValidator.compliant(userTO, new HashMap<>(), true));\n+        assertTrue(Validation.isCompliant(userTO, new HashMap<>(), true));\n \n         // check wizard steps\n         // only \"credentials\", \"plainSchemas\" and \"finish\" steps must be visible\n-        assertTrue(UserRequestValidator.validateSteps(customTemplate));\n+        assertTrue(Validation.validateSteps(customTemplate));\n \n-        assertTrue(UserRequestValidator.validateStep(\"credentials\", customTemplate));\n-        assertTrue(UserRequestValidator.validateStep(\"plainSchemas\", customTemplate));\n-        assertTrue(UserRequestValidator.validateStep(\"finish\", customTemplate));\n+        assertTrue(Validation.validateStep(\"credentials\", customTemplate));\n+        assertTrue(Validation.validateStep(\"plainSchemas\", customTemplate));\n+        assertTrue(Validation.validateStep(\"finish\", customTemplate));\n \n-        assertFalse(UserRequestValidator.validateStep(\"test\", customTemplate));\n-        assertFalse(UserRequestValidator.validateStep(\"resources\", customTemplate));\n-        assertFalse(UserRequestValidator.validateStep(\"virtualSchemas\", customTemplate));\n-        assertFalse(UserRequestValidator.validateStep(\"derivedSchemas\", customTemplate));\n-        assertFalse(UserRequestValidator.validateStep(\"groups\", customTemplate));\n+        assertFalse(Validation.validateStep(\"test\", customTemplate));\n+        assertFalse(Validation.validateStep(\"resources\", customTemplate));\n+        assertFalse(Validation.validateStep(\"virtualSchemas\", customTemplate));\n+        assertFalse(Validation.validateStep(\"derivedSchemas\", customTemplate));\n+        assertFalse(Validation.validateStep(\"groups\", customTemplate));\n     }\n-\n }","previous_filename":"client/enduser/src/test/java/org/apache/syncope/client/enduser/util/UserRequestValidatorTest.java"},{"sha":"5344a1eec82550e28dd4aec44c11cf8c701eb8c1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractPolicy.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -24,9 +24,11 @@\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.PolicyCheck;\n \n @Entity\n @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+@PolicyCheck\n public abstract class AbstractPolicy extends AbstractGeneratedKeyEntity implements Policy {\n \n     private static final long serialVersionUID = -5844833125843247458L;"},{"sha":"b06d5ea957f16a46b2d7a298e1b278f3a2279f52","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AbstractValidator.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -41,4 +41,8 @@ public void initialize(final A annotation) {\n     protected final String getTemplate(final EntityViolationType type, final String message) {\n         return type.name() + \";\" + message;\n     }\n+\n+    protected boolean isHtml(final String text) {\n+        return text != null && (text.indexOf('<') != -1 || text.indexOf('>') != -1);\n+    }\n }"},{"sha":"01572b32579ec24faf27e821c262c5714492d889","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeClassCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeClassCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeClassCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeClassCheck.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = AnyTypeClassValidator.class)\n+@Documented\n+public @interface AnyTypeClassCheck {\n+\n+    String message() default \"{org.apache.syncope.core.persistence.validation.anytypeclass}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"baf8d713518cb0888404bce0e51d56aa23c4702e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeClassValidator.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeClassValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeClassValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeClassValidator.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+\n+public class AnyTypeClassValidator extends AbstractValidator<AnyTypeClassCheck, AnyTypeClass> {\n+\n+    @Override\n+    public boolean isValid(final AnyTypeClass anyTypeClass, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        boolean isValid = true;\n+\n+        if (isHtml(anyTypeClass.getKey())) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid key\")).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n+\n+            isValid = false;\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"6fb70781b0639d828a1bdefaa2db525a1b1fc5f3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeValidator.java","status":"modified","additions":20,"deletions":11,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeValidator.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -27,32 +27,41 @@\n public class AnyTypeValidator extends AbstractValidator<AnyTypeCheck, AnyType> {\n \n     @Override\n-    public boolean isValid(final AnyType object, final ConstraintValidatorContext context) {\n+    public boolean isValid(final AnyType anyType, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        boolean isValid;\n-        switch (object.getKind()) {\n+        boolean isValid = true;\n+\n+        if (isHtml(anyType.getKey())) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid key\")).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n+\n+            isValid = false;\n+        }\n+\n+        boolean nameKindMatch;\n+        switch (anyType.getKind()) {\n             case USER:\n-                isValid = AnyTypeKind.USER.name().equalsIgnoreCase(object.getKey());\n+                nameKindMatch = AnyTypeKind.USER.name().equalsIgnoreCase(anyType.getKey());\n                 break;\n \n             case GROUP:\n-                isValid = AnyTypeKind.GROUP.name().equalsIgnoreCase(object.getKey());\n+                nameKindMatch = AnyTypeKind.GROUP.name().equalsIgnoreCase(anyType.getKey());\n                 break;\n \n             case ANY_OBJECT:\n             default:\n-                isValid = !AnyTypeKind.USER.name().equalsIgnoreCase(object.getKey())\n-                        && !AnyTypeKind.GROUP.name().equalsIgnoreCase(object.getKey())\n-                        && !SyncopeConstants.REALM_ANYTYPE.equalsIgnoreCase(object.getKey());\n+                nameKindMatch = !AnyTypeKind.USER.name().equalsIgnoreCase(anyType.getKey())\n+                        && !AnyTypeKind.GROUP.name().equalsIgnoreCase(anyType.getKey())\n+                        && !SyncopeConstants.REALM_ANYTYPE.equalsIgnoreCase(anyType.getKey());\n         }\n-\n-        if (!isValid) {\n+        if (!nameKindMatch) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidAnyType, \"Name / kind mismatch\")).\n                     addPropertyNode(\"name\").addConstraintViolation();\n         }\n \n-        return isValid;\n+        return isValid && nameKindMatch;\n     }\n }"},{"sha":"ffbe438913675d7f8cb6a80bf0926c51b86ae079","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ConnInstanceValidator.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceValidator.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -28,8 +28,18 @@ public class ConnInstanceValidator extends AbstractValidator<ConnInstanceCheck,\n \n     @Override\n     public boolean isValid(final ConnInstance connInstance, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n         boolean isValid = true;\n \n+        if (isHtml(connInstance.getDisplayName())) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidName, \"Invalid display name\")).\n+                    addPropertyNode(\"displayName\").addConstraintViolation();\n+\n+            isValid = false;\n+        }\n+\n         try {\n             URIUtils.buildForConnId(connInstance.getLocation());\n         } catch (Exception e) {"},{"sha":"45873befc28f5bff80a429516031ab52a4da1913","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyCheck.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = PolicyValidator.class)\n+@Documented\n+public @interface PolicyCheck {\n+\n+    String message() default \"{org.apache.syncope.core.persistence.validation.policy}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"47a06e9fd78ef25e55fcfe5f5854036cc8be5c2e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyValidator.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+\n+public class PolicyValidator extends AbstractValidator<RoleCheck, Policy> {\n+\n+    @Override\n+    public boolean isValid(final Policy policy, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        if (isHtml(policy.getDescription())) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidName, \"Invalid description\")).\n+                    addPropertyNode(\"description\").addConstraintViolation();\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+}"},{"sha":"7a05ea84684cde0514e944ce3da98536c9c18a1a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RealmValidator.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -39,26 +39,23 @@ public boolean isValid(final Realm realm, final ConstraintValidatorContext conte\n                 isValid = false;\n \n                 context.buildConstraintViolationWithTemplate(\n-                        getTemplate(EntityViolationType.InvalidRealm,\n-                                \"Root realm cannot have a parent realm\")).\n+                        getTemplate(EntityViolationType.InvalidRealm, \"Root realm cannot have a parent realm\")).\n                         addPropertyNode(\"parent\").addConstraintViolation();\n             }\n         } else {\n             if (realm.getParent() == null) {\n                 isValid = false;\n \n                 context.buildConstraintViolationWithTemplate(\n-                        getTemplate(EntityViolationType.InvalidRealm,\n-                                \"A realm needs to reference a parent realm\")).\n+                        getTemplate(EntityViolationType.InvalidRealm, \"A realm needs to reference a parent realm\")).\n                         addPropertyNode(\"parent\").addConstraintViolation();\n             }\n \n             if (!REALM_NAME_PATTERN.matcher(realm.getName()).matches()) {\n                 isValid = false;\n \n                 context.buildConstraintViolationWithTemplate(\n-                        getTemplate(EntityViolationType.InvalidRealm,\n-                                \"Only letters and numbers are allowed in realm name\")).\n+                        getTemplate(EntityViolationType.InvalidRealm, \"Only alphanumeric chars allowed in realm name\")).\n                         addPropertyNode(\"name\").addConstraintViolation();\n             }\n         }"},{"sha":"550b153723fff6dba1f1ef3367cc4f59e86c6deb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RelationshipTypeValidator.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRelationshipTypeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRelationshipTypeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRelationshipTypeValidator.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -26,16 +26,27 @@\n public class RelationshipTypeValidator extends AbstractValidator<RelationshipTypeCheck, RelationshipType> {\n \n     @Override\n-    public boolean isValid(final RelationshipType object, final ConstraintValidatorContext context) {\n+    public boolean isValid(final RelationshipType relationShipType, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        if (MembershipType.getInstance().getKey().equalsIgnoreCase(object.getKey())) {\n+        boolean isValid = true;\n+\n+        if (isHtml(relationShipType.getKey())) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid key\")).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n+\n+            isValid = false;\n+        }\n+\n+        if (MembershipType.getInstance().getKey().equalsIgnoreCase(relationShipType.getKey())) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidKey, \"Invalid relationshipType name\")).\n                     addPropertyNode(\"key\").addConstraintViolation();\n-            return false;\n+\n+            isValid = false;\n         }\n \n-        return true;\n+        return isValid;\n     }\n }"},{"sha":"2be2072c5224f9e705be8f8143e05f205ee6c29c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ReportValidator.java","status":"modified","additions":16,"deletions":6,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -31,14 +31,24 @@ public class ReportValidator extends AbstractValidator<ReportCheck, Report> {\n \n     @Override\n     @SuppressWarnings(\"ResultOfObjectAllocationIgnored\")\n-    public boolean isValid(final Report object, final ConstraintValidatorContext context) {\n+    public boolean isValid(final Report report, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n         boolean isValid = true;\n \n-        if (object.getCronExpression() != null) {\n+        if (isHtml(report.getName())) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidName, \"Invalid name\")).\n+                    addPropertyNode(\"name\").addConstraintViolation();\n+\n+            isValid = false;\n+        }\n+\n+        if (report.getCronExpression() != null) {\n             try {\n-                new CronExpression(object.getCronExpression());\n+                new CronExpression(report.getCronExpression());\n             } catch (ParseException e) {\n-                LOG.error(\"Invalid cron expression '\" + object.getCronExpression() + \"'\", e);\n+                LOG.error(\"Invalid cron expression '\" + report.getCronExpression() + \"'\", e);\n                 isValid = false;\n \n                 context.disableDefaultConstraintViolation();\n@@ -48,9 +58,9 @@ public boolean isValid(final Report object, final ConstraintValidatorContext con\n             }\n         }\n \n-        Set<String> reportletKeys = object.getReportlets().stream().\n+        Set<String> reportletKeys = report.getReportlets().stream().\n                 map(Entity::getKey).collect(Collectors.toSet());\n-        if (reportletKeys.size() != object.getReportlets().size()) {\n+        if (reportletKeys.size() != report.getReportlets().size()) {\n             LOG.error(\"Reportlet key must be unique\");\n             isValid = false;\n "},{"sha":"90cf59b5f3762b82cdc8069b37dfce9760d0684d","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/OIDCProviderValidator.java","status":"modified","additions":17,"deletions":7,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FOIDCProviderValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FOIDCProviderValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FOIDCProviderValidator.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -22,24 +22,35 @@\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class OIDCProviderValidator extends AbstractValidator<OIDCProviderCheck, OIDCProvider> {\n \n     @Override\n-    public boolean isValid(final OIDCProvider value, final ConstraintValidatorContext context) {\n+    public boolean isValid(final OIDCProvider oidcProvider, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n \n-        if (value.isSelfRegUnmatching() && value.isCreateUnmatching()) {\n+        if (isHtml(oidcProvider.getKey())) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid key\")).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n+\n+            return false;\n+        }\n+\n+        if (oidcProvider.isSelfRegUnmatching() && oidcProvider.isCreateUnmatching()) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.Standard,\n                             \"Either selfRegUnmatching or createUnmatching, not both\")).\n                     addPropertyNode(\"selfRegUnmatching\").\n                     addPropertyNode(\"createUnmatching\").addConstraintViolation();\n+\n             return false;\n         }\n \n-        long connObjectKeys = value.getItems().stream().filter(item -> item.isConnObjectKey()).count();\n-        if (!value.getItems().isEmpty() && connObjectKeys != 1) {\n+        long connObjectKeys = oidcProvider.getItems().stream().filter(Item::isConnObjectKey).count();\n+        if (!oidcProvider.getItems().isEmpty() && connObjectKeys != 1) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"Single ConnObjectKey mapping is required\")).\n                     addPropertyNode(\"connObjectKey.size\").addConstraintViolation();\n@@ -48,19 +59,18 @@ public boolean isValid(final OIDCProvider value, final ConstraintValidatorContex\n \n         final boolean[] isValid = new boolean[] { true };\n \n-        long passwords = value.getItems().stream().filter(item -> item.isPassword()).count();\n+        long passwords = oidcProvider.getItems().stream().filter(Item::isPassword).count();\n         if (passwords > 0) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"No password mapping is allowed\")).\n                     addPropertyNode(\"password.size\").addConstraintViolation();\n             isValid[0] = false;\n         }\n \n-        value.getItems().forEach(item -> {\n+        oidcProvider.getItems().forEach(item -> {\n             item.getTransformers().stream().\n                     filter(transformer -> transformer.getEngine() == ImplementationEngine.JAVA).\n                     forEach(transformer -> {\n-\n                         Class<?> actionsClass = null;\n                         boolean isAssignable = false;\n                         try {"},{"sha":"a14d420a4292c288b3afcf3889470575264f43cf","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java","status":"modified","additions":19,"deletions":8,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/36fb466afd64894170fa5e2e030ce6895120b1af/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/36fb466afd64894170fa5e2e030ce6895120b1af/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java?ref=36fb466afd64894170fa5e2e030ce6895120b1af","patch":"@@ -22,44 +22,56 @@\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP> {\n \n     @Override\n-    public boolean isValid(final SAML2IdP value, final ConstraintValidatorContext context) {\n-        if (value.isSelfRegUnmatching() && value.isCreateUnmatching()) {\n+    public boolean isValid(final SAML2IdP saml2IdP, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        if (isHtml(saml2IdP.getKey())) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid key\")).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n+\n+            return false;\n+        }\n+\n+        if (saml2IdP.isSelfRegUnmatching() && saml2IdP.isCreateUnmatching()) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.Standard,\n                             \"Either selfRegUnmatching or createUnmatching, not both\")).\n                     addPropertyNode(\"selfRegUnmatching\").\n                     addPropertyNode(\"createUnmatching\").addConstraintViolation();\n+\n             return false;\n         }\n \n-        long connObjectKeys = value.getItems().stream().filter(item -> item.isConnObjectKey()).count();\n-        if (!value.getItems().isEmpty() && connObjectKeys != 1) {\n+        long connObjectKeys = saml2IdP.getItems().stream().filter(Item::isConnObjectKey).count();\n+        if (!saml2IdP.getItems().isEmpty() && connObjectKeys != 1) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"Single ConnObjectKey mapping is required\")).\n                     addPropertyNode(\"connObjectKey.size\").addConstraintViolation();\n+\n             return false;\n         }\n \n         final boolean[] isValid = new boolean[] { true };\n \n-        long passwords = value.getItems().stream().filter(item -> item.isPassword()).count();\n+        long passwords = saml2IdP.getItems().stream().filter(Item::isPassword).count();\n         if (passwords > 0) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"No password mapping is allowed\")).\n                     addPropertyNode(\"password.size\").addConstraintViolation();\n             isValid[0] = false;\n         }\n \n-        value.getItems().forEach(item -> {\n+        saml2IdP.getItems().forEach(item -> {\n             item.getTransformers().stream().\n                     filter(transformer -> transformer.getEngine() == ImplementationEngine.JAVA).\n                     forEach(transformer -> {\n-\n                         Class<?> actionsClass = null;\n                         boolean isAssignable = false;\n                         try {\n@@ -81,5 +93,4 @@ public boolean isValid(final SAML2IdP value, final ConstraintValidatorContext co\n \n         return isValid[0];\n     }\n-\n }"}]}