{"sha":"7aae0b7673c620274c1f054cd69d4468a98948f7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdhYWUwYjc2NzNjNjIwMjc0YzFmMDU0Y2Q2OWQ0NDY4YTk4OTQ4Zjc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-12T12:35:01Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-12T12:35:01Z"},"message":"Verified with H2, MySQL and Oracle; still SQL Server and PostgreSQL to go\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1455510 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"399b7004bae95e306dd436f40116ed821b4e8460","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/399b7004bae95e306dd436f40116ed821b4e8460"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7aae0b7673c620274c1f054cd69d4468a98948f7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7aae0b7673c620274c1f054cd69d4468a98948f7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7aae0b7673c620274c1f054cd69d4468a98948f7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7aae0b7673c620274c1f054cd69d4468a98948f7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"676cc78bfd82afe46d28c95df90154d3420d4cd5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/676cc78bfd82afe46d28c95df90154d3420d4cd5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/676cc78bfd82afe46d28c95df90154d3420d4cd5"}],"stats":{"total":161,"additions":81,"deletions":80},"files":[{"sha":"6c9a557fbbb9bebe0ff32a008b802143af2ae3f2","filename":"common/src/main/java/org/apache/syncope/common/to/BulkAction.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7aae0b7673c620274c1f054cd69d4468a98948f7/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FBulkAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7aae0b7673c620274c1f054cd69d4468a98948f7/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FBulkAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FBulkAction.java?ref=7aae0b7673c620274c1f054cd69d4468a98948f7","patch":"@@ -47,7 +47,7 @@ public Type getOperation() {\n         return operation;\n     }\n \n-    public void setOperation(Type operation) {\n+    public void setOperation(final Type operation) {\n         this.operation = operation;\n     }\n \n@@ -61,7 +61,7 @@ public Collection<String> getTargets() {\n \n     public void addTarget(final String target) {\n         if (this.targets == null) {\n-            this.targets = new ArrayList();\n+            this.targets = new ArrayList<String>();\n         }\n \n         this.targets.add(target);"},{"sha":"79df17842b1305c8239825a77845c472d7570603","filename":"common/src/main/java/org/apache/syncope/common/types/AttributeSchemaType.java","status":"modified","additions":15,"deletions":12,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7aae0b7673c620274c1f054cd69d4468a98948f7/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7aae0b7673c620274c1f054cd69d4468a98948f7/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java?ref=7aae0b7673c620274c1f054cd69d4468a98948f7","patch":"@@ -18,29 +18,32 @@\n  */\r\n package org.apache.syncope.common.types;\r\n \r\n+import java.util.Date;\r\n import javax.xml.bind.annotation.XmlEnum;\r\n \r\n @XmlEnum\r\n public enum AttributeSchemaType {\r\n \r\n-    String(\"java.lang.String\"),\r\n-    Long(\"java.lang.Long\"),\r\n-    Double(\"java.lang.Double\"),\r\n-    Boolean(\"java.lang.Boolean\"),\r\n-    Date(\"java.util.Date\"),\r\n-    Enum(\"java.lang.Enum\");\r\n+    String(String.class),\r\n+    Long(Long.class),\r\n+    Double(Double.class),\r\n+    Boolean(Boolean.class),\r\n+    Date(Date.class),\r\n+    Enum(Enum.class);\r\n \r\n-    final private String className;\r\n+    final private Class<?> type;\r\n \r\n-    AttributeSchemaType(String className) {\r\n-        this.className = className;\r\n+    AttributeSchemaType(final Class<?> type) {\r\n+        this.type = type;\r\n     }\r\n \r\n-    public String getClassName() {\r\n-        return className;\r\n+    public Class<?> getType() {\r\n+        return type;\r\n     }\r\n \r\n     public boolean isConversionPatternNeeded() {\r\n-        return this == AttributeSchemaType.Date || this == AttributeSchemaType.Double || this == AttributeSchemaType.Long;\r\n+        return this == AttributeSchemaType.Date\r\n+                || this == AttributeSchemaType.Double\r\n+                || this == AttributeSchemaType.Long;\r\n     }\r\n }\r"},{"sha":"08eefdce5206d1fe144d921b078ae6070f8e394a","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/TaskExec.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java?ref=7aae0b7673c620274c1f054cd69d4468a98948f7","patch":"@@ -25,7 +25,7 @@\n /**\n  * An execution (with result) of a Task.\n  *\n- * @see PropagationTask\n+ * @see Task\n  */\n @Entity\n public class TaskExec extends AbstractExec {\n@@ -58,7 +58,14 @@ public void setTask(Task task) {\n \n     @Override\n     public String toString() {\n-        return getClass().getSimpleName() + \"{\" + \"id=\" + id + \", \" + \"startDate=\" + startDate + \", \" + \"endDate=\"\n-                + endDate + \", \" + \"task=\" + task + \", \" + \"status=\" + status + \", \" + \"message=\" + message + '}';\n+        return new StringBuilder(getClass().getSimpleName()).append('{').\n+                append(\"id=\").append(id).append(\", \").\n+                append(\"startDate=\").append(startDate).append(\", \").\n+                append(\"endDate=\").append(endDate).append(\", \").\n+                append(\"task=\").append(task).append(\", \").\n+                append(\"status=\").append(status).append(\", \").\n+                append(\"message=\").append(message).\n+                append('}').\n+                toString();\n     }\n }"},{"sha":"9783aa78962f70101ae6d56ceca69cdf1e9fedfc","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AttributableSearchDAOImpl.java","status":"modified","additions":15,"deletions":26,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java?ref=7aae0b7673c620274c1f054cd69d4468a98948f7","patch":"@@ -51,6 +51,7 @@\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.springframework.util.ReflectionUtils;\n \n @Repository\n public class AttributableSearchDAOImpl extends AbstractDAOImpl implements AttributableSearchDAO {\n@@ -535,38 +536,26 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n     private String getQuery(final AttributableCond cond, final boolean not, final List<Object> parameters,\n             final AttributableUtil attrUtil) {\n \n-        Field attributableClassField = null;\n-        // loop over attributable class and all superclasses searching for field\n-        for (Class i = attrUtil.attributableClass(); attributableClassField == null && i != Object.class;) {\n-            try {\n-                attributableClassField = i.getDeclaredField(cond.getSchema());\n-            } catch (Exception ignore) {\n-                // ignore exception\n-                LOG.debug(\"Field '{}' not found on class '{}'\", new String[]{cond.getSchema(), i.getSimpleName()},\n-                        ignore);\n-            } finally {\n-                i = i.getSuperclass();\n-            }\n-        }\n-        if (attributableClassField == null) {\n+        Field attributableField = ReflectionUtils.findField(attrUtil.attributableClass(), cond.getSchema());\n+        if (attributableField == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n             return EMPTY_ATTR_QUERY;\n         }\n \n         AbstractSchema schema = attrUtil.newSchema();\n-        schema.setName(attributableClassField.getName());\n+        schema.setName(attributableField.getName());\n         for (AttributeSchemaType type : AttributeSchemaType.values()) {\n-            if (attributableClassField.getType().getName().equals(type.getClassName())) {\n+            if (attributableField.getType().isAssignableFrom(type.getType())) {\n                 schema.setType(type);\n             }\n         }\n \n-        // Deal with Attirbutable Integer fields logically mapping to boolean values\n+        // Deal with Attributable Integer fields logically mapping to boolean values\n         // (SyncopeRole.inheritAttributes, for example)\n         boolean foundBooleanMin = false;\n         boolean foundBooleanMax = false;\n-        if (Integer.class.equals(attributableClassField.getType())) {\n-            for (Annotation annotation : attributableClassField.getAnnotations()) {\n+        if (Integer.class.equals(attributableField.getType())) {\n+            for (Annotation annotation : attributableField.getAnnotations()) {\n                 if (Min.class.equals(annotation.annotationType())) {\n                     foundBooleanMin = ((Min) annotation).value() == 0;\n                 } else if (Max.class.equals(annotation.annotationType())) {\n@@ -577,23 +566,23 @@ private String getQuery(final AttributableCond cond, final boolean not, final Li\n         if (foundBooleanMin && foundBooleanMax) {\n             if (\"true\".equalsIgnoreCase(cond.getExpression())) {\n                 cond.setExpression(\"1\");\n+                schema.setType(AttributeSchemaType.Long);\n             } else if (\"false\".equalsIgnoreCase(cond.getExpression())) {\n                 cond.setExpression(\"0\");\n+                schema.setType(AttributeSchemaType.Long);\n             }\n         }\n \n         // Deal with Attributable fields representing relationships to other entities\n         // Only _id and _name are suppored\n-        if (attributableClassField.getType().getAnnotation(Entity.class) != null) {\n-            if (BeanUtils.findDeclaredMethodWithMinimalParameters(\n-                    attributableClassField.getType(), \"getId\") != null) {\n-\n+        if (attributableField.getType().getAnnotation(Entity.class) != null) {\n+            if (BeanUtils.findDeclaredMethodWithMinimalParameters(attributableField.getType(), \"getId\") != null) {\n                 cond.setSchema(cond.getSchema() + \"_id\");\n+                schema.setType(AttributeSchemaType.Long);\n             }\n-            if (BeanUtils.findDeclaredMethodWithMinimalParameters(\n-                    attributableClassField.getType(), \"getName\") != null) {\n-\n+            if (BeanUtils.findDeclaredMethodWithMinimalParameters(attributableField.getType(), \"getName\") != null) {\n                 cond.setSchema(cond.getSchema() + \"_name\");\n+                schema.setType(AttributeSchemaType.String);\n             }\n         }\n "},{"sha":"0ddd9b391cb460a2d3336f3c40364c3ded33aa0b","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/TaskExecDAOImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java?ref=7aae0b7673c620274c1f054cd69d4468a98948f7","patch":"@@ -43,9 +43,9 @@ public TaskExec find(final Long id) {\n     }\n \n     private <T extends Task> TaskExec findLatest(final T task, final String field) {\n-        TypedQuery<TaskExec> query = entityManager.createQuery(\"SELECT e \" + \"FROM \" + TaskExec.class.getSimpleName()\n-                + \" e \"\n-                + \"WHERE e.task=:task \" + \"ORDER BY e.\" + field + \" DESC\", TaskExec.class);\n+        TypedQuery<TaskExec> query = entityManager.createQuery(\"SELECT e FROM \" + TaskExec.class.getSimpleName() + \" e \"\n+                + \"WHERE e.task=:task \"\n+                + \"ORDER BY e.\" + field + \" DESC\", TaskExec.class);\n         query.setParameter(\"task\", task);\n         query.setMaxResults(1);\n "},{"sha":"08868add2c084e742ce4d9bf2781ea1c5587f2df","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AbstractPropagationTaskExecutor.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java?ref=7aae0b7673c620274c1f054cd69d4468a98948f7","patch":"@@ -358,10 +358,7 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n \n                 taskDAO.save(task);\n \n-                // This flush call is needed to generate a value for the execution id\n-                // An alternative to this would be the following statement that might cause troubles with\n-                // concurrent calls.\n-                // taskExecDAO.findLatestStarted(task);\n+                // this flush call is needed to generate a value for the execution id\n                 taskDAO.flush();\n             }\n         }"},{"sha":"cc57ad63ffaa754b2a395ea6061cdfc199f0ebb1","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":7,"deletions":13,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=7aae0b7673c620274c1f054cd69d4468a98948f7","patch":"@@ -131,8 +131,7 @@ public static <T extends AbstractMappingItem> Set<T> getMatchingMappingItems(fin\n     public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n             final ExternalResource resource, final AbstractMappingItem mapItem,\n             final T subject, final String password, final PasswordGenerator passwordGenerator,\n-            final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated)\n-            throws ClassNotFoundException {\n+            final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated) {\n \n         final List<AbstractAttributable> attributables = new ArrayList<AbstractAttributable>();\n \n@@ -190,13 +189,13 @@ public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prep\n                 + \"\\n* mandatory condition \" + mapItem.getMandatoryCondition()\n                 + \"\\n* Schema \" + mapItem.getIntAttrName()\n                 + \"\\n* IntMappingType \" + mapItem.getIntMappingType().toString()\n-                + \"\\n* ClassType \" + schemaType.getClassName()\n+                + \"\\n* ClassType \" + schemaType.getType().getName()\n                 + \"\\n* Values \" + values);\n \n         List<Object> objValues = new ArrayList<Object>();\n \n         for (AbstractAttrValue value : values) {\n-            if (FrameworkUtil.isSupportedAttributeType(Class.forName(schemaType.getClassName()))) {\n+            if (FrameworkUtil.isSupportedAttributeType(schemaType.getType())) {\n                 objValues.add(value.getValue());\n             } else {\n                 objValues.add(value.getValueAsString());\n@@ -300,15 +299,10 @@ private static <T extends AbstractAttributable> String getRoleOwnerValue(final E\n \n         final AttributableUtil attrUtil = AttributableUtil.getInstance(subject);\n \n-        String accountId = null;\n-        try {\n-            Map.Entry<String, Attribute> preparedAttr = prepareAttribute(\n-                    resource, attrUtil.getAccountIdItem(resource), subject, null, null,\n-                    Collections.<String>emptySet(), Collections.<String, AttributeMod>emptyMap());\n-            accountId = preparedAttr.getKey();\n-        } catch (ClassNotFoundException e) {\n-            LOG.error(\"Could not get accountId for {} on {}\", subject, resource, e);\n-        }\n+        Map.Entry<String, Attribute> preparedAttr = prepareAttribute(\n+                resource, attrUtil.getAccountIdItem(resource), subject, null, null,\n+                Collections.<String>emptySet(), Collections.<String, AttributeMod>emptyMap());\n+        String accountId = preparedAttr.getKey();\n \n         final Name roleOwnerName = evaluateNAME(subject, resource, accountId);\n         return roleOwnerName.getNameValue();"},{"sha":"f4f5a881bf822f2b7197a625d1e4d3ff863b1856","filename":"core/src/main/resources/META-INF/orm.xml.oracle","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle?ref=7aae0b7673c620274c1f054cd69d4468a98948f7","patch":"@@ -199,7 +199,7 @@ under the License.\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Task\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_Task\" pk-column-value=\"SEQ_Task\" initial-value=\"10\"/>\n+        <table-generator name=\"SEQ_Task\" pk-column-value=\"SEQ_Task\" initial-value=\"100\"/>\n       </id>\n     </attributes>\n   </entity>"},{"sha":"e0556eca9c865ad88bfb29efe7c532fb4e1645c4","filename":"core/src/main/resources/META-INF/orm.xml.sqlserver","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.sqlserver","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.sqlserver","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.sqlserver?ref=7aae0b7673c620274c1f054cd69d4468a98948f7","patch":"@@ -223,7 +223,7 @@ under the License.\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Task\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_Task\" pk-column-value=\"SEQ_Task\" initial-value=\"10\"/>\n+        <table-generator name=\"SEQ_Task\" pk-column-value=\"SEQ_Task\" initial-value=\"100\"/>\n       </id>\n     </attributes>\n   </entity>"},{"sha":"25c744a3921dc791ca589f5ab7117677055c51a5","filename":"core/src/main/resources/quartz/tables_oracle.sql","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql?ref=7aae0b7673c620274c1f054cd69d4468a98948f7","patch":"@@ -136,7 +136,7 @@ CREATE TABLE qrtz_blob_triggers\n     TRIGGER_GROUP VARCHAR2(200) NOT NULL,\n     BLOB_DATA BLOB NULL,\n     CONSTRAINT QRTZ_BLOB_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),\n-    CONSTRAINT QRTZ_ BLOB_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) \n+    CONSTRAINT QRTZ_BLOB_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) \n         REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)\n );\n CREATE TABLE qrtz_calendars"},{"sha":"876fd1e575a2357708c548ebab558d695dba11b1","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=7aae0b7673c620274c1f054cd69d4468a98948f7","patch":"@@ -279,8 +279,6 @@ public void issueSYNCOPE192() throws Exception {\n         Notification actual = notificationDAO.save(notification);\n         assertNotNull(actual);\n \n-        notificationDAO.flush();\n-\n         // 2. create user\n         UserTO userTO = UserTestITCase.getSampleTO(mailAddress);\n         MembershipTO membershipTO = new MembershipTO();"},{"sha":"2476772764a375e77543b4009f08298d2125bfca","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AttributableSearchTest.java","status":"modified","additions":25,"deletions":12,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7aae0b7673c620274c1f054cd69d4468a98948f7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java?ref=7aae0b7673c620274c1f054cd69d4468a98948f7","patch":"@@ -133,9 +133,10 @@ public void searchWithNotCondition() {\n         assertNotNull(users);\n         assertEquals(4, users.size());\n \n-        Set<Long> ids = new HashSet<Long>(2);\n-        ids.add(users.get(0).getId());\n-        ids.add(users.get(1).getId());\n+        Set<Long> ids = new HashSet<Long>(users.size());\n+        for (SyncopeUser user : users) {\n+            ids.add(user.getId());\n+        }\n         assertTrue(ids.contains(1L));\n         assertTrue(ids.contains(3L));\n     }\n@@ -328,13 +329,13 @@ public void searchById() {\n         NodeCond searchCondition = NodeCond.getLeafCond(idLeafCond);\n         assertTrue(searchCondition.isValid());\n \n-        List<SyncopeUser> matchingUsers =\n+        List<SyncopeUser> users =\n                 searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n                 AttributableUtil.getInstance(AttributableType.USER));\n \n-        assertNotNull(matchingUsers);\n-        assertEquals(1, matchingUsers.size());\n-        assertEquals(1L, matchingUsers.iterator().next().getId().longValue());\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+        assertEquals(1L, users.iterator().next().getId().longValue());\n \n         idLeafCond = new AttributableCond(AttributableCond.Type.LT);\n         idLeafCond.setSchema(\"id\");\n@@ -343,12 +344,18 @@ public void searchById() {\n         searchCondition = NodeCond.getNotLeafCond(idLeafCond);\n         assertTrue(searchCondition.isValid());\n \n-        matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n+        users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n                 AttributableUtil.getInstance(AttributableType.USER));\n \n-        assertNotNull(matchingUsers);\n-        assertEquals(2, matchingUsers.size());\n-        assertEquals(4L, matchingUsers.iterator().next().getId().longValue());\n+        assertNotNull(users);\n+        assertEquals(2, users.size());\n+        boolean found = false;\n+        for (SyncopeUser user : users) {\n+            if (user.getId() == 4) {\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n     }\n \n     @Test\n@@ -367,7 +374,13 @@ public void issue202() {\n                 searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n         assertNotNull(users);\n         assertEquals(2, users.size());\n-        assertEquals(4L, users.iterator().next().getId().longValue());\n+        boolean found = false;\n+        for (SyncopeUser user : users) {\n+            if (user.getId() == 4) {\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n     }\n \n     @Test"}]}