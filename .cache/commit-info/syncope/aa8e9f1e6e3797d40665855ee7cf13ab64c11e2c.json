{"sha":"aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFhOGU5ZjFlNmUzNzk3ZDQwNjY1ODU1ZWU3Y2YxM2FiNjRjMTFlMmM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-03-10T12:41:13Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-03-10T12:51:18Z"},"message":"[SYNCOPE-1043] Console behavior fixed","tree":{"sha":"3f6959da7eac05f7e281e060c46d894ef1a3fe31","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3f6959da7eac05f7e281e060c46d894ef1a3fe31"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"98e27bfe1e46643d58fe649aab52d3597d914267","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/98e27bfe1e46643d58fe649aab52d3597d914267","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/98e27bfe1e46643d58fe649aab52d3597d914267"}],"stats":{"total":651,"additions":385,"deletions":266},"files":[{"sha":"d9723a8542d197ee0fb8ad46e618366053b265a6","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleRequestCycleListener.java","status":"modified","additions":28,"deletions":22,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleRequestCycleListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleRequestCycleListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleRequestCycleListener.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -21,14 +21,13 @@\n import java.security.AccessControlException;\n import javax.ws.rs.BadRequestException;\n import javax.xml.ws.WebServiceException;\n-import org.apache.syncope.client.console.pages.ErrorPage;\n+import org.apache.syncope.client.console.pages.Login;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.wicket.Page;\n import org.apache.wicket.authorization.UnauthorizedInstantiationException;\n import org.apache.wicket.core.request.handler.PageProvider;\n import org.apache.wicket.core.request.handler.RenderPageRequestHandler;\n import org.apache.wicket.markup.html.pages.ExceptionErrorPage;\n-import org.apache.wicket.model.StringResourceModel;\n import org.apache.wicket.protocol.http.PageExpiredException;\n import org.apache.wicket.request.IRequestHandler;\n import org.apache.wicket.request.cycle.AbstractRequestCycleListener;\n@@ -41,38 +40,45 @@ public class SyncopeConsoleRequestCycleListener extends AbstractRequestCycleList\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeConsoleRequestCycleListener.class);\n \n+    private boolean instanceOf(final Exception e, final Class<? extends Exception> clazz) {\n+        return clazz.isAssignableFrom(e.getClass())\n+                || (e.getCause() != null && clazz.isAssignableFrom(e.getCause().getClass()))\n+                || (e.getCause() != null && e.getCause().getCause() != null\n+                && clazz.isAssignableFrom(e.getCause().getCause().getClass()));\n+    }\n+\n     @Override\n     public IRequestHandler onException(final RequestCycle cycle, final Exception e) {\n         LOG.error(\"Exception found\", e);\n \n         PageParameters errorParameters = new PageParameters();\n-        errorParameters.add(\"errorTitle\", new StringResourceModel(\"alert\").getString());\n-\n-        final Page errorPage;\n-        if (e instanceof UnauthorizedInstantiationException) {\n-            errorParameters.add(\"errorMessage\",\n-                    new StringResourceModel(\"unauthorizedInstantiationException\").getString());\n-\n-            errorPage = new ErrorPage(errorParameters);\n-        } else if (e.getCause() instanceof AccessControlException) {\n-            errorParameters.add(\"errorMessage\", new StringResourceModel(\"accessControlException\").getString());\n \n-            errorPage = new ErrorPage(errorParameters);\n-        } else if (e instanceof PageExpiredException || !(SyncopeConsoleSession.get()).isSignedIn()) {\n-            errorParameters.add(\"errorMessage\", new StringResourceModel(\"pageExpiredException\").getString());\n+        Page errorPage;\n+        if (instanceOf(e, UnauthorizedInstantiationException.class)) {\n+            errorParameters.add(\"errorMessage\", \"unauthorizedInstantiationException\");\n+            errorPage = new Login(errorParameters);\n+        } else if (instanceOf(e, AccessControlException.class)) {\n+            errorParameters.add(\"errorMessage\", \"accessControlException\");\n+            errorPage = new Login(errorParameters);\n+        } else if (instanceOf(e, PageExpiredException.class) || !SyncopeConsoleSession.get().isSignedIn()) {\n+            errorParameters.add(\"errorMessage\", \"pageExpiredException\");\n+            errorPage = new Login(errorParameters);\n+        } else if (instanceOf(e, BadRequestException.class)\n+                || instanceOf(e, WebServiceException.class)\n+                || instanceOf(e, SyncopeClientException.class)) {\n \n-            errorPage = new ErrorPage(errorParameters);\n-        } else if (e.getCause() instanceof BadRequestException || e.getCause() instanceof WebServiceException\n-                || e.getCause() instanceof SyncopeClientException) {\n-\n-            errorParameters.add(\"errorMessage\", new StringResourceModel(\"restClientException\").getString());\n-\n-            errorPage = new ErrorPage(errorParameters);\n+            errorParameters.add(\"errorMessage\", \"restClientException\");\n+            errorPage = new Login(errorParameters);\n         } else {\n             // redirect to default Wicket error page\n             errorPage = new ExceptionErrorPage(e, null);\n         }\n \n+        if (errorPage instanceof Login) {\n+            SyncopeConsoleSession.get().cleanup();\n+            SyncopeConsoleSession.get().invalidateNow();\n+        }\n+\n         return new RenderPageRequestHandler(new PageProvider(errorPage));\n     }\n }"},{"sha":"4aae7e5c9176646a86076da5826ddc7594808bc9","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":31,"deletions":19,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -117,24 +117,6 @@ public void execute(final Runnable command) {\n         executorService.execute(command);\n     }\n \n-    @Override\n-    public void invalidate() {\n-        if (getJWT() != null) {\n-            client.logout();\n-        }\n-        executorService.shutdown();\n-        super.invalidate();\n-    }\n-\n-    @Override\n-    public void invalidateNow() {\n-        if (getJWT() != null) {\n-            client.logout();\n-        }\n-        executorService.shutdownNow();\n-        super.invalidateNow();\n-    }\n-\n     public PlatformInfo getPlatformInfo() {\n         return platformInfo;\n     }\n@@ -156,7 +138,7 @@ public String getDomain() {\n     }\n \n     public String getJWT() {\n-        return client.getJWT();\n+        return client == null ? null : client.getJWT();\n     }\n \n     @Override\n@@ -179,6 +161,36 @@ public boolean authenticate(final String username, final String password) {\n         return authenticated;\n     }\n \n+    public void cleanup() {\n+        client = null;\n+        auth = null;\n+        selfTO = null;\n+    }\n+\n+    @Override\n+    public void invalidate() {\n+        if (getJWT() != null) {\n+            if (client != null) {\n+                client.logout();\n+            }\n+            cleanup();\n+        }\n+        executorService.shutdown();\n+        super.invalidate();\n+    }\n+\n+    @Override\n+    public void invalidateNow() {\n+        if (getJWT() != null) {\n+            if (client != null) {\n+                client.logout();\n+            }\n+            cleanup();\n+        }\n+        executorService.shutdownNow();\n+        super.invalidateNow();\n+    }\n+\n     public UserTO getSelfTO() {\n         return selfTO;\n     }"},{"sha":"9bae30584ee0d2b28b9dddf3c40dc57dbfd887ca","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.console.init.ConsoleInitializer;\n import org.apache.syncope.client.console.panels.NotificationPanel;\n-import org.apache.syncope.client.console.rest.ConfigurationRestClient;\n+import org.apache.syncope.client.console.rest.ConfRestClient;\n import org.apache.syncope.client.console.topology.Topology;\n import org.apache.syncope.client.console.wicket.markup.head.MetaHeaderItem;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n@@ -115,7 +115,7 @@ public BasePage(final PageParameters parameters) {\n             @Override\n             public void onClick() {\n                 try {\n-                    HttpResourceStream stream = new HttpResourceStream(new ConfigurationRestClient().dbExport());\n+                    HttpResourceStream stream = new HttpResourceStream(new ConfRestClient().dbExport());\n \n                     ResourceStreamRequestHandler rsrh = new ResourceStreamRequestHandler(stream);\n                     rsrh.setFileName(stream.getFilename() == null"},{"sha":"8f24e05c277bd77b417d586411f5161be386a4a4","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Login.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -31,6 +31,7 @@\n import org.apache.wicket.authentication.IAuthenticationStrategy;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebSession;\n import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.ChoiceRenderer;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n@@ -39,6 +40,7 @@\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.StringResourceModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n public class Login extends WebPage {\n@@ -64,6 +66,15 @@ public Login(final PageParameters parameters) {\n         notificationPanel = new NotificationPanel(Constants.FEEDBACK);\n         add(notificationPanel);\n \n+        Label exceptionMessage = new Label(\"exceptionMessage\");\n+        exceptionMessage.setOutputMarkupPlaceholderTag(true);\n+        exceptionMessage.setVisible(false);\n+        if (!parameters.get(\"errorMessage\").isNull()) {\n+            exceptionMessage.setVisible(true);\n+            exceptionMessage.setDefaultModel(new StringResourceModel(parameters.get(\"errorMessage\").toString()));\n+        }\n+        add(exceptionMessage);\n+\n         form = new StatelessForm<>(\"login\");\n \n         usernameField = new TextField<>(\"username\", new Model<String>());\n@@ -101,7 +112,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                     continueToOriginalDestination();\n                     setResponsePage(getApplication().getHomePage());\n                 } else {\n-                   SyncopeConsoleSession.get().error(getString(\"login-error\"));\n+                    SyncopeConsoleSession.get().error(getString(\"login-error\"));\n                     notificationPanel.refresh(target);\n                 }\n                 strategy.remove();"},{"sha":"b8d2dd1101dd99c8419a4c0aa84303ac9f0d235a","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/MustChangePassword.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -22,8 +22,8 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.NotificationPanel;\n+import org.apache.syncope.client.console.rest.UserSelfRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n-import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.markup.html.WebPage;\n@@ -51,6 +51,8 @@ public class MustChangePassword extends WebPage {\n \n     private final AjaxPasswordFieldPanel confirmPasswordField;\n \n+    private final UserSelfRestClient restClient = new UserSelfRestClient();\n+\n     public MustChangePassword(final PageParameters parameters) {\n         super(parameters);\n \n@@ -88,17 +90,16 @@ public MustChangePassword(final PageParameters parameters) {\n             @Override\n             protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 try {\n-                    SyncopeConsoleSession.get().getService(UserSelfService.class).\n-                            changePassword(passwordField.getModelObject());\n+                    restClient.changePassword(passwordField.getModelObject());\n \n                     SyncopeConsoleSession.get().invalidate();\n \n                     setResponsePage(getApplication().getHomePage());\n                 } catch (Exception e) {\n                     LOG.error(\"While changing password for {}\",\n                             SyncopeConsoleSession.get().getSelfTO().getUsername(), e);\n-                    SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage()) ? e.getClass().getName() : e.\n-                            getMessage());\n+                    SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())\n+                            ? e.getClass().getName() : e.getMessage());\n                     notificationPanel.refresh(target);\n                 }\n             }"},{"sha":"d9558a89cf33a82b49a3ab13158eba76b057905a","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Realms.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -154,7 +154,7 @@ public void onEvent(final IEvent<?> event) {\n             WizardModalPanel<?> modalPanel = newItemEvent.getModalPanel();\n \n             if (event.getPayload() instanceof AjaxWizard.NewItemActionEvent && modalPanel != null) {\n-                final IModel<Serializable> model = new CompoundPropertyModel<>(modalPanel.getItem());\n+                final IModel<Serializable> model = new CompoundPropertyModel<Serializable>(modalPanel.getItem());\n                 templateModal.setFormModel(model);\n                 templateModal.header(newItemEvent.getResourceModel());\n                 newItemEvent.getTarget().add(templateModal.setContent(modalPanel));"},{"sha":"7d0867ab44ebf0d799ac9c03b2e7c86a6f006629","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassDetailsPanel.java","status":"modified","additions":16,"deletions":25,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -23,14 +23,13 @@\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n+import org.apache.syncope.client.console.rest.ConfRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n-import org.apache.syncope.common.rest.api.service.ConfigurationService;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.panel.Panel;\n@@ -77,38 +76,32 @@ public AnyTypeClassDetailsPanel(final String id, final AnyTypeClassTO anyTypeCla\n         container.setOutputMarkupId(true);\n         antTypeClassForm.add(container);\n \n-        final AjaxPalettePanel<String> plainSchema =\n-                new AjaxPalettePanel.Builder<String>()\n-                .setAllowOrder(true)\n-                .setAllowMoveAll(true)\n-                .build(\"plainSchemas\",\n+        AjaxPalettePanel<String> plainSchema = new AjaxPalettePanel.Builder<String>().\n+                setAllowOrder(true).\n+                setAllowMoveAll(true).\n+                build(\"plainSchemas\",\n                         new PropertyModel<List<String>>(this.anyTypeClassTO, \"plainSchemas\"),\n                         new ListModel<>(availablePlainSchemas));\n-\n         plainSchema.hideLabel();\n         plainSchema.setOutputMarkupId(true);\n         container.add(plainSchema);\n \n-        final AjaxPalettePanel<String> derSchema =\n-                new AjaxPalettePanel.Builder<String>()\n-                .setAllowOrder(true)\n-                .setAllowMoveAll(true)\n-                .build(\"derSchemas\",\n+        AjaxPalettePanel<String> derSchema = new AjaxPalettePanel.Builder<String>().\n+                setAllowOrder(true).\n+                setAllowMoveAll(true).\n+                build(\"derSchemas\",\n                         new PropertyModel<List<String>>(this.anyTypeClassTO, \"derSchemas\"),\n                         new ListModel<>(availableDerSchemas));\n         derSchema.hideLabel();\n-\n         derSchema.setOutputMarkupId(true);\n         container.add(derSchema);\n \n-        final AjaxPalettePanel<String> virSchema =\n-                new AjaxPalettePanel.Builder<String>()\n-                .setAllowOrder(true)\n-                .setAllowMoveAll(true)\n-                .build(\"virSchemas\",\n+        AjaxPalettePanel<String> virSchema = new AjaxPalettePanel.Builder<String>().\n+                setAllowOrder(true).\n+                setAllowMoveAll(true).\n+                build(\"virSchemas\",\n                         new PropertyModel<List<String>>(this.anyTypeClassTO, \"virSchemas\"),\n                         new ListModel<>(availableVirSchemas));\n-\n         virSchema.hideLabel();\n         virSchema.setOutputMarkupId(true);\n         container.add(virSchema);\n@@ -117,17 +110,15 @@ public AnyTypeClassDetailsPanel(final String id, final AnyTypeClassTO anyTypeCla\n     private void buildAvailableSchemas(final String key) {\n \n         List<String> configurationSchemas = new ArrayList<>();\n-        CollectionUtils.collect(SyncopeConsoleSession.get().\n-                getService(ConfigurationService.class).list(),\n-                new Transformer<AttrTO, String>() {\n+        CollectionUtils.collect(new ConfRestClient().list(), new Transformer<AttrTO, String>() {\n \n             @Override\n             public String transform(final AttrTO attrTO) {\n                 return attrTO.getSchema();\n             }\n         }, configurationSchemas);\n \n-        for (AnyTypeClassTO item : SyncopeConsoleSession.get().getService(AnyTypeClassService.class).list()) {\n+        for (AnyTypeClassTO item : new AnyTypeClassRestClient().list()) {\n             if (key == null || !item.getKey().equals(key)) {\n                 availablePlainSchemas.removeAll(item.getPlainSchemas());\n                 availableDerSchemas.removeAll(item.getDerSchemas());"},{"sha":"09edf1973162a4fd8fbadba6477f2ea4d62e54e3","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassesPanel.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.pages.BasePage;\n+import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -40,7 +41,6 @@\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -52,12 +52,14 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.ResourceModel;\n \n-public class AnyTypeClassesPanel extends TypesDirectoryPanel<AnyTypeClassTO, AnyTypeClassesPanel.AnyTypeClassProvider> {\n+public class AnyTypeClassesPanel extends TypesDirectoryPanel<\n+        AnyTypeClassTO, AnyTypeClassesPanel.AnyTypeClassProvider, AnyTypeClassRestClient> {\n \n     private static final long serialVersionUID = -2356760296223908382L;\n \n     public AnyTypeClassesPanel(final String id, final PageReference pageRef) {\n         super(id, pageRef);\n+        this.restClient = new AnyTypeClassRestClient();\n         disableCheckBoxes();\n \n         this.addNewItemPanelBuilder(new AbstractModalPanelBuilder<AnyTypeClassTO>(new AnyTypeClassTO(), pageRef) {\n@@ -76,9 +78,9 @@ public WizardModalPanel<AnyTypeClassTO> build(\n                     public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                         try {\n                             if (getOriginalItem() == null || StringUtils.isBlank(getOriginalItem().getKey())) {\n-                                SyncopeConsoleSession.get().getService(AnyTypeClassService.class).create(modelObject);\n+                                restClient.create(modelObject);\n                             } else {\n-                                SyncopeConsoleSession.get().getService(AnyTypeClassService.class).update(modelObject);\n+                                restClient.update(modelObject);\n                             }\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                             AnyTypeClassesPanel.this.updateResultTable(target);\n@@ -177,8 +179,7 @@ public void onClick(final AjaxRequestTarget target, final AnyTypeClassTO ignore)\n                             @Override\n                             public void onClick(final AjaxRequestTarget target, final AnyTypeClassTO ignore) {\n                                 try {\n-                                    SyncopeConsoleSession.get().\n-                                            getService(AnyTypeClassService.class).delete(model.getObject().getKey());\n+                                    restClient.delete(model.getObject().getKey());\n                                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                                     target.add(container);\n                                 } catch (Exception e) {\n@@ -228,14 +229,14 @@ private AnyTypeClassProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<AnyTypeClassTO> iterator(final long first, final long count) {\n-            final List<AnyTypeClassTO> list = SyncopeConsoleSession.get().getService(AnyTypeClassService.class).list();\n+            final List<AnyTypeClassTO> list = restClient.list();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return SyncopeConsoleSession.get().getService(AnyTypeClassService.class).list().size();\n+            return restClient.list().size();\n         }\n \n         @Override"},{"sha":"b35405537cd418d604101260b0c8e67fcf048ae4","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -54,14 +53,13 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.ResourceModel;\n \n-public class AnyTypesPanel extends TypesDirectoryPanel<AnyTypeTO, AnyTypeProvider> {\n+public class AnyTypesPanel extends TypesDirectoryPanel<AnyTypeTO, AnyTypeProvider, AnyTypeRestClient> {\n \n     private static final long serialVersionUID = 3905038169553185171L;\n \n-    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n-\n     public AnyTypesPanel(final String id, final PageReference pageRef) {\n         super(id, pageRef);\n+        this.restClient = new AnyTypeRestClient();\n         disableCheckBoxes();\n \n         this.addNewItemPanelBuilder(new AbstractModalPanelBuilder<AnyTypeTO>(new AnyTypeTO(), pageRef) {\n@@ -79,10 +77,10 @@ public WizardModalPanel<AnyTypeTO> build(final String id, final int index, final\n                     public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                         try {\n                             if (getOriginalItem() == null || StringUtils.isBlank(getOriginalItem().getKey())) {\n-                                anyTypeRestClient.create(modelObject);\n+                                restClient.create(modelObject);\n                                 SyncopeConsoleSession.get().refreshAuth();\n                             } else {\n-                                anyTypeRestClient.update(modelObject);\n+                                restClient.update(modelObject);\n                             }\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                             AnyTypesPanel.this.updateResultTable(target);\n@@ -180,8 +178,7 @@ public void onClick(final AjaxRequestTarget target, final AnyTypeTO ignore) {\n                             @Override\n                             public void onClick(final AjaxRequestTarget target, final AnyTypeTO ignore) {\n                                 try {\n-                                    SyncopeConsoleSession.get().\n-                                            getService(AnyTypeService.class).delete(model.getObject().getKey());\n+                                    restClient.delete(model.getObject().getKey());\n                                     SyncopeConsoleSession.get().refreshAuth();\n \n                                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n@@ -233,14 +230,14 @@ private AnyTypeProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<AnyTypeTO> iterator(final long first, final long count) {\n-            final List<AnyTypeTO> list = anyTypeRestClient.list();\n+            final List<AnyTypeTO> list = restClient.list();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return anyTypeRestClient.list().size();\n+            return restClient.list().size();\n         }\n \n         @Override"},{"sha":"db017d8eae55dd2c33adbd19567bc45e0380aad7","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/DashboardOverviewPanel.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardOverviewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardOverviewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardOverviewPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -19,15 +19,14 @@\n package org.apache.syncope.client.console.panels;\n \n import org.apache.commons.lang3.tuple.Triple;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.rest.SyncopeRestClient;\n import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n import org.apache.syncope.client.console.widgets.AnyByRealmWidget;\n import org.apache.syncope.client.console.widgets.CompletenessWidget;\n import org.apache.syncope.client.console.widgets.LoadWidget;\n import org.apache.syncope.client.console.widgets.NumberWidget;\n import org.apache.syncope.client.console.widgets.UsersByStatusWidget;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.panel.Panel;\n@@ -53,10 +52,12 @@ public class DashboardOverviewPanel extends Panel {\n \n     private final LoadWidget load;\n \n+    private final SyncopeRestClient restClient = new SyncopeRestClient();\n+\n     public DashboardOverviewPanel(final String id) {\n         super(id);\n \n-        NumbersInfo numbers = SyncopeConsoleSession.get().getService(SyncopeService.class).numbers();\n+        NumbersInfo numbers = restClient.numbers();\n \n         WebMarkupContainer container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupId(true);\n@@ -95,7 +96,7 @@ public DashboardOverviewPanel(final String id) {\n                 numbers.getAny2ByRealm());\n         container.add(anyByRealm);\n \n-        load = new LoadWidget(\"load\", SyncopeConsoleSession.get().getService(SyncopeService.class).system());\n+        load = new LoadWidget(\"load\", restClient.system());\n         container.add(load);\n \n         container.add(new IndicatorAjaxTimerBehavior(Duration.seconds(60)) {\n@@ -104,7 +105,7 @@ public DashboardOverviewPanel(final String id) {\n \n             @Override\n             protected void onTimer(final AjaxRequestTarget target) {\n-                NumbersInfo numbers = SyncopeConsoleSession.get().getService(SyncopeService.class).numbers();\n+                NumbersInfo numbers = restClient.numbers();\n \n                 if (totalUsers.refresh(numbers.getTotalUsers())) {\n                     target.add(totalUsers);\n@@ -141,7 +142,7 @@ protected void onTimer(final AjaxRequestTarget target) {\n                     target.add(anyByRealm);\n                 }\n \n-                load.refresh(SyncopeConsoleSession.get().getService(SyncopeService.class).system());\n+                load.refresh(restClient.system());\n                 target.add(load);\n             }\n         });"},{"sha":"39ad8ae9952512837c6ed084170c3e388bbc70af","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersCreateWizardPanel.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -19,20 +19,23 @@\n package org.apache.syncope.client.console.panels;\n \n import java.io.Serializable;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.rest.ConfRestClient;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.rest.api.service.ConfigurationService;\n-import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n \n public class ParametersCreateWizardPanel extends AjaxWizardBuilder<ParametersCreateWizardPanel.ParametersForm> {\n \n     private static final long serialVersionUID = -2868592590785581481L;\n \n+    private final ConfRestClient confRestClient = new ConfRestClient();\n+\n+    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n+\n     public ParametersCreateWizardPanel(final ParametersForm defaultItem, final PageReference pageRef) {\n         super(defaultItem, pageRef);\n \n@@ -55,14 +58,12 @@ protected Serializable onApplyInternal(final ParametersForm modelObject) {\n         final PlainSchemaTO plainSchemaTO = modelObject.getPlainSchemaTO();\n         plainSchemaTO.setKey(modelObject.getAttrTO().getSchema());\n \n-        SyncopeConsoleSession.get().getService(SchemaService.class).\n-                create(SchemaType.PLAIN, plainSchemaTO);\n+        schemaRestClient.create(SchemaType.PLAIN, plainSchemaTO);\n         try {\n-            SyncopeConsoleSession.get().getService(ConfigurationService.class).set(modelObject.getAttrTO());\n+            confRestClient.set(modelObject.getAttrTO());\n         } catch (Exception e) {\n             LOG.error(\"While setting {}, removing {}\", modelObject.getAttrTO(), plainSchemaTO, e);\n-            SyncopeConsoleSession.get().getService(SchemaService.class).\n-                    delete(SchemaType.PLAIN, plainSchemaTO.getKey());\n+            schemaRestClient.deletePlainSchema(plainSchemaTO.getKey());\n \n             throw e;\n         }"},{"sha":"0affc221d12e0ede1e94adcbce80ac0a407a6ef4","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDetailsPanel.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersDetailsPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -21,8 +21,8 @@\n import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.SchemaUtils;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n@@ -34,7 +34,6 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n@@ -48,6 +47,8 @@ public class ParametersDetailsPanel extends Panel {\n \n     private static final long serialVersionUID = 7708288006191496557L;\n \n+    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n+\n     public ParametersDetailsPanel(final String id, final AttrTO attrTO) {\n         super(id);\n \n@@ -73,11 +74,9 @@ public ParametersDetailsPanel(final String id, final AttrTO attrTO) {\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     private Panel getFieldPanel(final String id, final AttrTO attrTO) {\n-\n         final String valueHeaderName = getString(\"values\");\n \n-        final PlainSchemaTO schemaTO = SyncopeConsoleSession.get().getService(SchemaService.class).\n-                read(SchemaType.PLAIN, attrTO.getSchema());\n+        final PlainSchemaTO schemaTO = schemaRestClient.read(SchemaType.PLAIN, attrTO.getSchema());\n \n         final FieldPanel panel;\n         switch (schemaTO.getType()) {\n@@ -93,7 +92,7 @@ private Panel getFieldPanel(final String id, final AttrTO attrTO) {\n                 }\n                 break;\n             case Boolean:\n-                panel = new AjaxDropDownChoicePanel<>(id, valueHeaderName, new Model<String>(), false);\n+                panel = new AjaxDropDownChoicePanel<>(id, valueHeaderName, new Model<>(), false);\n                 ((AjaxDropDownChoicePanel<String>) panel).setChoices(Arrays.asList(\"true\", \"false\"));\n \n                 if (!attrTO.getValues().isEmpty()) {\n@@ -121,7 +120,7 @@ public String getObject(\n                 ((AjaxDropDownChoicePanel<String>) panel).setNullValid(false);\n                 break;\n             case Enum:\n-                panel = new AjaxDropDownChoicePanel<>(id, valueHeaderName, new Model<String>(), false);\n+                panel = new AjaxDropDownChoicePanel<>(id, valueHeaderName, new Model<>(), false);\n                 ((AjaxDropDownChoicePanel<String>) panel).setChoices(SchemaUtils.getEnumeratedValues(schemaTO));\n \n                 if (!attrTO.getValues().isEmpty()) {"},{"sha":"85a04b4aaee29e213f7f6e38fca22f42bf45edce","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersEditModalPanel.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersEditModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersEditModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersEditModalPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -22,9 +22,9 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.BasePage;\n+import org.apache.syncope.client.console.rest.ConfRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.rest.api.service.ConfigurationService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.markup.html.form.Form;\n@@ -37,10 +37,13 @@ public class ParametersEditModalPanel extends AbstractModalPanel<AttrTO> {\n \n     private final BaseModal<AttrTO> parametersModal;\n \n+    private final ConfRestClient confRestClient = new ConfRestClient();\n+\n     public ParametersEditModalPanel(\n             final BaseModal<AttrTO> modal,\n             final AttrTO attrTO,\n             final PageReference pageRef) {\n+\n         super(modal, pageRef);\n         this.attrTO = attrTO;\n         this.parametersModal = modal;\n@@ -55,7 +58,7 @@ public final AttrTO getItem() {\n     @Override\n     public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         try {\n-            SyncopeConsoleSession.get().getService(ConfigurationService.class).set(attrTO);\n+            confRestClient.set(attrTO);\n             parametersModal.close(target);\n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n         } catch (Exception e) {"},{"sha":"edfa732ed0bb12cb61f8b93171f347273307fb57","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersPanel.java","status":"modified","additions":11,"deletions":15,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -31,7 +31,8 @@\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.ParametersPanel.ParametersProvider;\n-import org.apache.syncope.client.console.rest.BaseRestClient;\n+import org.apache.syncope.client.console.rest.ConfRestClient;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -40,10 +41,7 @@\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.rest.api.service.ConfigurationService;\n-import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -56,11 +54,12 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.model.StringResourceModel;\n \n-public class ParametersPanel extends DirectoryPanel<\n-        AttrTO, AttrTO, ParametersProvider, BaseRestClient> {\n+public class ParametersPanel extends DirectoryPanel<AttrTO, AttrTO, ParametersProvider, ConfRestClient> {\n \n     private static final long serialVersionUID = 2765863608539154422L;\n \n+    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n+\n     private final BaseModal<AttrTO> modalDetails = new BaseModal<AttrTO>(\"modalDetails\") {\n \n         private static final long serialVersionUID = 389935548143327858L;\n@@ -73,7 +72,7 @@ protected void onConfigure() {\n     };\n \n     public ParametersPanel(final String id, final PageReference pageRef) {\n-        super(id, new Builder<AttrTO, AttrTO, BaseRestClient>(null, pageRef) {\n+        super(id, new Builder<AttrTO, AttrTO, ConfRestClient>(new ConfRestClient(), pageRef) {\n \n             private static final long serialVersionUID = 8769126634538601689L;\n \n@@ -111,8 +110,7 @@ public WizardModalPanel<AttrTO> build(final String id, final int index, final Aj\n         MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.CONFIGURATION_SET);\n     }\n \n-    public ParametersPanel(\n-            final String id, final Builder<AttrTO, AttrTO, BaseRestClient> builder) {\n+    public ParametersPanel(final String id, final Builder<AttrTO, AttrTO, ConfRestClient> builder) {\n         super(id, builder);\n     }\n \n@@ -166,10 +164,8 @@ public void onClick(final AjaxRequestTarget target, final AttrTO ignore) {\n                             @Override\n                             public void onClick(final AjaxRequestTarget target, final AttrTO ignore) {\n                                 try {\n-                                    SyncopeConsoleSession.get().getService(ConfigurationService.class).\n-                                            delete(model.getObject().getSchema());\n-                                    SyncopeConsoleSession.get().getService(SchemaService.class).\n-                                            delete(SchemaType.PLAIN, model.getObject().getSchema());\n+                                    restClient.delete(model.getObject().getSchema());\n+                                    schemaRestClient.deletePlainSchema(model.getObject().getSchema());\n                                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                                     target.add(container);\n                                 } catch (Exception e) {\n@@ -220,14 +216,14 @@ private ParametersProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<AttrTO> iterator(final long first, final long count) {\n-            final List<AttrTO> list = SyncopeConsoleSession.get().getService(ConfigurationService.class).list();\n+            final List<AttrTO> list = restClient.list();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return SyncopeConsoleSession.get().getService(ConfigurationService.class).list().size();\n+            return restClient.list().size();\n         }\n \n         @Override"},{"sha":"7b5976b8fb910768477d3e8d3568dea381683d27","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RelationshipTypesPanel.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.RelationshipTypesPanel.RelationshipTypeProvider;\n+import org.apache.syncope.client.console.rest.RelationshipTypeRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -41,7 +42,6 @@\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -53,12 +53,14 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.ResourceModel;\n \n-public class RelationshipTypesPanel extends TypesDirectoryPanel<RelationshipTypeTO, RelationshipTypeProvider> {\n+public class RelationshipTypesPanel extends TypesDirectoryPanel<\n+        RelationshipTypeTO, RelationshipTypeProvider, RelationshipTypeRestClient> {\n \n     private static final long serialVersionUID = -3731778000138547357L;\n \n     public RelationshipTypesPanel(final String id, final PageReference pageRef) {\n         super(id, pageRef);\n+        this.restClient = new RelationshipTypeRestClient();\n         disableCheckBoxes();\n \n         this.addNewItemPanelBuilder(\n@@ -69,6 +71,7 @@ public RelationshipTypesPanel(final String id, final PageReference pageRef) {\n             @Override\n             public WizardModalPanel<RelationshipTypeTO> build(\n                     final String id, final int index, final AjaxWizard.Mode mode) {\n+\n                 final RelationshipTypeTO modelObject = newModelObject();\n                 return new RelationshipTypeModalPanel(modal, modelObject, pageRef) {\n \n@@ -78,11 +81,9 @@ public WizardModalPanel<RelationshipTypeTO> build(\n                     public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                         try {\n                             if (getOriginalItem() == null || StringUtils.isBlank(getOriginalItem().getKey())) {\n-                                SyncopeConsoleSession.get().\n-                                        getService(RelationshipTypeService.class).create(modelObject);\n+                                restClient.create(modelObject);\n                             } else {\n-                                SyncopeConsoleSession.get().\n-                                        getService(RelationshipTypeService.class).update(modelObject);\n+                                restClient.update(modelObject);\n                             }\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                             RelationshipTypesPanel.this.updateResultTable(target);\n@@ -181,8 +182,7 @@ public void onClick(final AjaxRequestTarget target, final RelationshipTypeTO ign\n                             @Override\n                             public void onClick(final AjaxRequestTarget target, final RelationshipTypeTO ignore) {\n                                 try {\n-                                    SyncopeConsoleSession.get().getService(\n-                                            RelationshipTypeService.class).delete(model.getObject().getKey());\n+                                    restClient.delete(model.getObject().getKey());\n                                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                                     target.add(container);\n                                 } catch (Exception e) {\n@@ -232,15 +232,14 @@ private RelationshipTypeProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<RelationshipTypeTO> iterator(final long first, final long count) {\n-            final List<RelationshipTypeTO> list = SyncopeConsoleSession.get().getService(RelationshipTypeService.class).\n-                    list();\n+            final List<RelationshipTypeTO> list = restClient.list();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return SyncopeConsoleSession.get().getService(RelationshipTypeService.class).list().size();\n+            return restClient.list().size();\n         }\n \n         @Override"},{"sha":"70ed5d6f18134a212f9b57c14b45b2a61602bbe6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":14,"deletions":18,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.SchemaTypePanel.SchemaProvider;\n+import org.apache.syncope.client.console.rest.ConfRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n@@ -47,8 +48,6 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.rest.api.service.ConfigurationService;\n-import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -62,7 +61,7 @@\n import org.apache.wicket.model.ResourceModel;\n import org.springframework.util.ReflectionUtils;\n \n-public class SchemaTypePanel extends TypesDirectoryPanel<AbstractSchemaTO, SchemaProvider> {\n+public class SchemaTypePanel extends TypesDirectoryPanel<AbstractSchemaTO, SchemaProvider, SchemaRestClient> {\n \n     private static final long serialVersionUID = 3905038169553185171L;\n \n@@ -80,12 +79,11 @@ public class SchemaTypePanel extends TypesDirectoryPanel<AbstractSchemaTO, Schem\n         }\n     };\n \n-    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n-\n     private final SchemaType schemaType;\n \n     public SchemaTypePanel(final String id, final SchemaType schemaType, final PageReference pageRef) {\n         super(id, pageRef);\n+        this.restClient = new SchemaRestClient();\n         disableCheckBoxes();\n \n         this.schemaType = schemaType;\n@@ -109,11 +107,9 @@ public WizardModalPanel<AbstractSchemaTO> build(\n                         public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                             try {\n                                 if (getOriginalItem() == null || StringUtils.isBlank(getOriginalItem().getKey())) {\n-                                    SyncopeConsoleSession.get().getService(\n-                                            SchemaService.class).create(schemaType, modelObject);\n+                                    restClient.create(schemaType, modelObject);\n                                 } else {\n-                                    SyncopeConsoleSession.get().getService(\n-                                            SchemaService.class).update(schemaType, modelObject);\n+                                    restClient.update(schemaType, modelObject);\n                                 }\n \n                                 SchemaTypePanel.this.updateResultTable(target);\n@@ -212,15 +208,15 @@ public void onClick(final AjaxRequestTarget target, final AbstractSchemaTO ignor\n                                 try {\n                                     switch (schemaType) {\n                                         case DERIVED:\n-                                            schemaRestClient.deleteDerSchema(model.getObject().getKey());\n+                                            restClient.deleteDerSchema(model.getObject().getKey());\n                                             break;\n \n                                         case VIRTUAL:\n-                                            schemaRestClient.deleteVirSchema(model.getObject().getKey());\n+                                            restClient.deleteVirSchema(model.getObject().getKey());\n                                             break;\n \n                                         default:\n-                                            schemaRestClient.deletePlainSchema(model.getObject().getKey());\n+                                            restClient.deletePlainSchema(model.getObject().getKey());\n                                             break;\n                                     }\n \n@@ -268,6 +264,8 @@ protected final class SchemaProvider extends DirectoryDataProvider<AbstractSchem\n \n         private final SchemaType schemaType;\n \n+        private final ConfRestClient confRestClient = new ConfRestClient();\n+\n         private SchemaProvider(final int paginatorRows, final SchemaType schemaType) {\n             super(paginatorRows);\n \n@@ -278,15 +276,13 @@ private SchemaProvider(final int paginatorRows, final SchemaType schemaType) {\n \n         @Override\n         public Iterator<AbstractSchemaTO> iterator(final long first, final long count) {\n-            final List<AbstractSchemaTO> list = schemaRestClient.getSchemas(this.schemaType);\n+            final List<AbstractSchemaTO> list = restClient.getSchemas(this.schemaType);\n             Collections.sort(list, comparator);\n \n             if (SchemaType.PLAIN == this.schemaType) {\n                 final List<String> configurations = new ArrayList<>();\n \n-                CollectionUtils.collect(\n-                        SyncopeConsoleSession.get().getService(ConfigurationService.class).list(),\n-                        new Transformer<AttrTO, String>() {\n+                CollectionUtils.collect(confRestClient.list(), new Transformer<AttrTO, String>() {\n \n                     @Override\n                     public String transform(final AttrTO attrTO) {\n@@ -308,9 +304,9 @@ public String transform(final AttrTO attrTO) {\n \n         @Override\n         public long size() {\n-            int size = schemaRestClient.getSchemas(this.schemaType).size();\n+            int size = restClient.getSchemas(this.schemaType).size();\n             return SchemaType.PLAIN == this.schemaType\n-                    ? size - SyncopeConsoleSession.get().getService(ConfigurationService.class).list().size()\n+                    ? size - confRestClient.list().size()\n                     : size;\n         }\n "},{"sha":"a6390359671eaa70594a9e59d7984c364fdaf761","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionsModalPanel.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsModalPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -22,9 +22,9 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.BasePage;\n+import org.apache.syncope.client.console.rest.SecurityQuestionRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n-import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.markup.html.form.Form;\n@@ -35,10 +35,13 @@ public class SecurityQuestionsModalPanel extends AbstractModalPanel<SecurityQues\n \n     private final SecurityQuestionTO securityQuestionTO;\n \n+    private final SecurityQuestionRestClient restClient = new SecurityQuestionRestClient();\n+\n     public SecurityQuestionsModalPanel(\n             final BaseModal<SecurityQuestionTO> modal,\n             final SecurityQuestionTO securityQuestionTO,\n             final PageReference pageRef) {\n+\n         super(modal, pageRef);\n         this.securityQuestionTO = securityQuestionTO;\n         add(new SecurityQuestionDetailsPanel(\"securityQuestionDetailsPanel\", getItem()));\n@@ -53,17 +56,17 @@ public final SecurityQuestionTO getItem() {\n     public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         try {\n             if (securityQuestionTO.getKey() == null) {\n-                SyncopeConsoleSession.get().getService(SecurityQuestionService.class).create(securityQuestionTO);\n+                restClient.create(securityQuestionTO);\n             } else {\n-                SyncopeConsoleSession.get().getService(SecurityQuestionService.class).update(securityQuestionTO);\n+                restClient.update(securityQuestionTO);\n             }\n \n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n             modal.close(target);\n         } catch (Exception e) {\n             LOG.error(\"While creating or updating {}\", securityQuestionTO, e);\n-            SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage()) ? e.getClass().getName() : e.\n-                    getMessage());\n+            SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())\n+                    ? e.getClass().getName() : e.getMessage());\n         }\n         ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n     }"},{"sha":"312c409662a3ca39681eb8786fef0f67f15917ae","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionsPanel.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -41,7 +41,6 @@\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -60,7 +59,8 @@ public class SecurityQuestionsPanel extends DirectoryPanel<\n     private static final long serialVersionUID = 3323019773236588850L;\n \n     public SecurityQuestionsPanel(final String id, final PageReference pageRef) {\n-        super(id, new Builder<SecurityQuestionTO, SecurityQuestionTO, SecurityQuestionRestClient>(null, pageRef) {\n+        super(id, new Builder<SecurityQuestionTO, SecurityQuestionTO, SecurityQuestionRestClient>(\n+                new SecurityQuestionRestClient(), pageRef) {\n \n             private static final long serialVersionUID = 8769126634538601689L;\n \n@@ -160,8 +160,7 @@ public void onClick(final AjaxRequestTarget target, final SecurityQuestionTO ign\n                             @Override\n                             public void onClick(final AjaxRequestTarget target, final SecurityQuestionTO ignore) {\n                                 try {\n-                                    SyncopeConsoleSession.get().getService(\n-                                            SecurityQuestionService.class).delete(model.getObject().getKey());\n+                                    restClient.delete(model.getObject().getKey());\n                                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                                     target.add(container);\n                                 } catch (Exception e) {\n@@ -211,15 +210,14 @@ private SecurityQuestionsProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<SecurityQuestionTO> iterator(final long first, final long count) {\n-            final List<SecurityQuestionTO> list = SyncopeConsoleSession.get().getService(SecurityQuestionService.class).\n-                    list();\n+            final List<SecurityQuestionTO> list = restClient.list();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return SyncopeConsoleSession.get().getService(SecurityQuestionService.class).list().size();\n+            return restClient.list().size();\n         }\n \n         @Override"},{"sha":"119af0ae6cc35ac045477b186bf1e769979b6d17","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/TypesDirectoryPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypesDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypesDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypesDirectoryPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -20,12 +20,13 @@\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n-import org.apache.syncope.client.console.rest.BaseRestClient;\n+import org.apache.syncope.client.console.rest.RestClient;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.wicket.PageReference;\n \n-public abstract class TypesDirectoryPanel<T extends AbstractBaseBean, DP extends DirectoryDataProvider<T>>\n-        extends DirectoryPanel<T, T, DP, BaseRestClient> {\n+public abstract class TypesDirectoryPanel<\n+        T extends AbstractBaseBean, DP extends DirectoryDataProvider<T>, E extends RestClient>\n+        extends DirectoryPanel<T, T, DP, E> {\n \n     private static final long serialVersionUID = 7890071604330629259L;\n "},{"sha":"47567b23078083bacfa53df556803fd2d3e35c19","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -30,18 +30,17 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.collections4.functors.StringValueTransformer;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.search.SearchClause.Comparator;\n import org.apache.syncope.client.console.panels.search.SearchClause.Operator;\n import org.apache.syncope.client.console.panels.search.SearchClause.Type;\n+import org.apache.syncope.client.console.rest.RelationshipTypeRestClient;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxEventBehavior;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n-import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n@@ -219,8 +218,7 @@ protected List<String> load() {\n \n                     case RELATIONSHIP:\n                         final List<String> relations = CollectionUtils.collect(\n-                                SyncopeConsoleSession.get().getService(RelationshipTypeService.class).list(),\n-                                new Transformer<RelationshipTypeTO, String>() {\n+                                new RelationshipTypeRestClient().list(), new Transformer<RelationshipTypeTO, String>() {\n \n                             @Override\n                             public String transform(final RelationshipTypeTO input) {"},{"sha":"1fe66caab9bd64faeeb6d3f190e70efb0bb6d57d","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeClassRestClient.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -30,6 +30,18 @@ public class AnyTypeClassRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -2211371717449597247L;\n \n+    public void create(final AnyTypeClassTO anyTypeClass) {\n+        getService(AnyTypeClassService.class).create(anyTypeClass);\n+    }\n+\n+    public void update(final AnyTypeClassTO anyTypeClass) {\n+        getService(AnyTypeClassService.class).update(anyTypeClass);\n+    }\n+\n+    public void delete(final String key) {\n+        getService(AnyTypeClassService.class).delete(key);\n+    }\n+\n     public AnyTypeClassTO read(final String key) {\n         return getService(AnyTypeClassService.class).read(key);\n     }"},{"sha":"39db455f0bd06b26388dccd6533e02fa82448dde","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeRestClient.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -61,4 +61,8 @@ public void create(final AnyTypeTO anyTypeTO) {\n     public void update(final AnyTypeTO anyTypeTO) {\n         getService(AnyTypeService.class).update(anyTypeTO);\n     }\n+\n+    public void delete(final String key) {\n+        getService(AnyTypeService.class).delete(key);\n+    }\n }"},{"sha":"59923802779dd16ce78cfc0acecd4580760406c9","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConfRestClient.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfRestClient.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.rest.api.service.ConfigurationService;\n \n-public class ConfigurationRestClient extends BaseRestClient {\n+public class ConfRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = 7692363064029538722L;\n ","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConfigurationRestClient.java"},{"sha":"fd99f32afd60754e001f95abefacec0b93322f6d","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/NotificationRestClient.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.MailTemplateTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.MailTemplateFormat;\n import org.apache.syncope.common.rest.api.service.MailTemplateService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n@@ -43,6 +44,10 @@ public JobTO getJob() {\n         return getService(NotificationService.class).getJob();\n     }\n \n+    public void actionJob(final JobAction jobAction) {\n+        getService(NotificationService.class).actionJob(jobAction);\n+    }\n+\n     public NotificationTO read(final String key) {\n         return getService(NotificationService.class).read(key);\n     }"},{"sha":"f79d04de302c1d89d87490169ffd0e03cfc96b35","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/RelationshipTypeRestClient.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRelationshipTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRelationshipTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRelationshipTypeRestClient.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n+import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n+\n+public class RelationshipTypeRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = -5400007385180229980L;\n+\n+    public void create(final RelationshipTypeTO relationshipType) {\n+        getService(RelationshipTypeService.class).create(relationshipType);\n+    }\n+\n+    public void update(final RelationshipTypeTO relationshipType) {\n+        getService(RelationshipTypeService.class).update(relationshipType);\n+    }\n+\n+    public void delete(final String key) {\n+        getService(RelationshipTypeService.class).delete(key);\n+    }\n+\n+    public RelationshipTypeTO read(final String key) {\n+        return getService(RelationshipTypeService.class).read(key);\n+    }\n+\n+    public List<RelationshipTypeTO> list() {\n+        List<RelationshipTypeTO> types = Collections.emptyList();\n+\n+        try {\n+            types = getService(RelationshipTypeService.class).list();\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"While reading all any type classes\", e);\n+        }\n+\n+        return types;\n+    }\n+}"},{"sha":"954b2459843655f849470ea8523ea2949eeeddd1","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.to.ReportTemplateTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n@@ -56,6 +57,10 @@ public List<JobTO> listJobs() {\n         return getService(ReportService.class).listJobs();\n     }\n \n+    public void actionJob(final String refKey, final JobAction jobAction) {\n+        getService(ReportService.class).actionJob(refKey, jobAction);\n+    }\n+\n     public void create(final ReportTO reportTO) {\n         getService(ReportService.class).create(reportTO);\n     }"},{"sha":"6e2c271cdbffbc926dd728604c5637952b54a4cc","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -129,4 +129,12 @@ public BulkActionResult bulkAssociationAction(\n \n         return getService(ResourceService.class).bulkDeassociation(patch);\n     }\n+\n+    public void setLatestSyncToken(final String key, final String anyType) {\n+        getService(ResourceService.class).setLatestSyncToken(key, anyType);\n+    }\n+\n+    public void removeSyncToken(final String key, final String anyType) {\n+        getService(ResourceService.class).removeSyncToken(key, anyType);\n+    }\n }"},{"sha":"e09259fb5a242186f91438a0aeab0e88fc599cef","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -123,6 +123,19 @@ public List<String> getVirSchemaNames() {\n         return getSchemaNames(SchemaType.VIRTUAL);\n     }\n \n+    public PlainSchemaTO read(final SchemaType schemaType, final String key) {\n+        return getService(SchemaService.class).read(schemaType, key);\n+\n+    }\n+\n+    public void create(final SchemaType schemaType, final AbstractSchemaTO modelObject) {\n+        getService(SchemaService.class).create(schemaType, modelObject);\n+    }\n+\n+    public void update(final SchemaType schemaType, final AbstractSchemaTO modelObject) {\n+        getService(SchemaService.class).update(schemaType, modelObject);\n+    }\n+\n     public PlainSchemaTO deletePlainSchema(final String name) {\n         PlainSchemaTO response = getService(SchemaService.class).read(SchemaType.PLAIN, name);\n         getService(SchemaService.class).delete(SchemaType.PLAIN, name);"},{"sha":"b479894cee08f21b5fc877004cac10ccf336c5da","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SyncopeRestClient.java","status":"renamed","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSyncopeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSyncopeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSyncopeRestClient.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -16,27 +16,22 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.pages;\n+package org.apache.syncope.client.console.rest;\n \n-import org.apache.wicket.Page;\n-import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n-import org.apache.wicket.model.Model;\n-import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.syncope.common.lib.info.NumbersInfo;\n+import org.apache.syncope.common.lib.info.SystemInfo;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n \n-/**\n- * Error WebPage.\n- */\n-public class ErrorPage extends BasePage {\n-\n-    private static final long serialVersionUID = -390761262038796657L;\n+public class SyncopeRestClient extends BaseRestClient {\n \n-    public ErrorPage(final PageParameters parameters) {\n-        super(parameters);\n+    private static final long serialVersionUID = -9013241672773442286L;\n \n-        body.add(new Label(\"errorTitle\", new Model<>(parameters.get(\"errorTitle\").toString())));\n-        body.add(new Label(\"errorMessage\", new Model<>(parameters.get(\"errorMessage\").toString())));\n+    public NumbersInfo numbers() {\n+        return getService(SyncopeService.class).numbers();\n+    }\n \n-        body.add(new BookmarkablePageLink<Page>(\"home\", getApplication().getHomePage()));\n+    public SystemInfo system() {\n+        return getService(SyncopeService.class).system();\n     }\n+\n }","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/ErrorPage.java"},{"sha":"3465c1d7f3bf27616b282ad98183bee41a31897d","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n@@ -50,6 +51,10 @@ public List<JobTO> listJobs() {\n         return getService(TaskService.class).listJobs();\n     }\n \n+    public void actionJob(final String refKey, final JobAction jobAction) {\n+        getService(TaskService.class).actionJob(refKey, jobAction);\n+    }\n+\n     public int count(final TaskType kind) {\n         return getService(TaskService.class).list(\n                 new TaskQuery.Builder(kind).page(1).size(1).build()).getTotalCount();"},{"sha":"c796a888fd56ef58596735112f41037e0b8ec659","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserSelfRestClient.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import org.apache.syncope.common.rest.api.service.UserSelfService;\n+\n+public class UserSelfRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = 100731599744900931L;\n+\n+    public void changePassword(final String password) {\n+        getService(UserSelfService.class).changePassword(password);\n+    }\n+\n+}"},{"sha":"79e7997e7819986a89614f3fd89b9e87da431b54","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobActionPanel.java","status":"modified","additions":13,"deletions":15,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.reports.ReportWizardBuilder;\n import org.apache.syncope.client.console.reports.ReportletDirectoryPanel;\n+import org.apache.syncope.client.console.rest.NotificationRestClient;\n import org.apache.syncope.client.console.rest.ReportRestClient;\n import org.apache.syncope.client.console.rest.TaskRestClient;\n import org.apache.syncope.client.console.tasks.SchedTaskWizardBuilder;\n@@ -39,9 +40,6 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.rest.api.service.NotificationService;\n-import org.apache.syncope.common.rest.api.service.ReportService;\n-import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -63,6 +61,12 @@ public class JobActionPanel extends WizardMgtPanel<Serializable> {\n \n     private final BaseModal<ReportTO> reportModal;\n \n+    private final NotificationRestClient notificationRestClient = new NotificationRestClient();\n+\n+    private final ReportRestClient reportRestClient = new ReportRestClient();\n+\n+    private final TaskRestClient taskRestClient = new TaskRestClient();\n+\n     public JobActionPanel(\n             final String id,\n             final JobTO jobTO,\n@@ -191,18 +195,15 @@ public void onClick(final AjaxRequestTarget target) {\n                     try {\n                         switch (jobTO.getType()) {\n                             case NOTIFICATION:\n-                                SyncopeConsoleSession.get().getService(NotificationService.class).\n-                                        actionJob(JobAction.STOP);\n+                                notificationRestClient.actionJob(JobAction.STOP);\n                                 break;\n \n                             case REPORT:\n-                                SyncopeConsoleSession.get().getService(ReportService.class).\n-                                        actionJob(jobTO.getRefKey(), JobAction.STOP);\n+                                reportRestClient.actionJob(jobTO.getRefKey(), JobAction.STOP);\n                                 break;\n \n                             case TASK:\n-                                SyncopeConsoleSession.get().getService(TaskService.class).\n-                                        actionJob(jobTO.getRefKey(), JobAction.STOP);\n+                                taskRestClient.actionJob(jobTO.getRefKey(), JobAction.STOP);\n                                 break;\n \n                             default:\n@@ -228,18 +229,15 @@ public void onClick(final AjaxRequestTarget target) {\n                     try {\n                         switch (jobTO.getType()) {\n                             case NOTIFICATION:\n-                                SyncopeConsoleSession.get().getService(NotificationService.class).\n-                                        actionJob(JobAction.START);\n+                                notificationRestClient.actionJob(JobAction.START);\n                                 break;\n \n                             case REPORT:\n-                                SyncopeConsoleSession.get().getService(ReportService.class).\n-                                        actionJob(jobTO.getRefKey(), JobAction.START);\n+                                reportRestClient.actionJob(jobTO.getRefKey(), JobAction.START);\n                                 break;\n \n                             case TASK:\n-                                SyncopeConsoleSession.get().getService(TaskService.class).\n-                                        actionJob(jobTO.getRefKey(), JobAction.START);\n+                                taskRestClient.actionJob(jobTO.getRefKey(), JobAction.START);\n                                 break;\n \n                             default:"},{"sha":"b9e4f0fbbc0652b6a9460052cc80b3ada9606ee2","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -28,7 +28,6 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.SerializableTransformer;\n import org.apache.syncope.client.console.panels.AnyDirectoryPanel;\n@@ -42,6 +41,7 @@\n import org.apache.syncope.client.console.panels.search.SearchUtils;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n+import org.apache.syncope.client.console.rest.RelationshipTypeRestClient;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -59,7 +59,6 @@\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.Broadcast;\n@@ -220,12 +219,14 @@ public class Specification extends Panel {\n \n         private WizardMgtPanel<AnyWrapper<AnyObjectTO>> anyObjectDirectoryPanel;\n \n+        private final RelationshipTypeRestClient relationshipTypeRestClient = new RelationshipTypeRestClient();\n+\n         public Specification() {\n             super(\"specification\");\n             rel = new RelationshipTO();\n \n             final ArrayList<String> availableRels = CollectionUtils.collect(\n-                    SyncopeConsoleSession.get().getService(RelationshipTypeService.class).list(),\n+                    relationshipTypeRestClient.list(),\n                     EntityTOUtils.<RelationshipTypeTO>keyTransformer(), new ArrayList<String>());\n \n             final AjaxDropDownChoicePanel<String> type = new AjaxDropDownChoicePanel<>("},{"sha":"9592b2f00ee34d88d0804e66f72cdfa2e11485f6","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -47,7 +47,6 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.OrgUnitTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.Broadcast;\n@@ -65,6 +64,8 @@ public class ResourceProvisionPanel extends AbstractModalPanel<Serializable> {\n \n     private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n \n+    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n+\n     private final ResourceTO resourceTO;\n \n     private Model<OrgUnitTO> baseModel;\n@@ -239,8 +240,7 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n                         try {\n-                            SyncopeConsoleSession.get().getService(ResourceService.class).\n-                                    setLatestSyncToken(resourceTO.getKey(), provisionTO.getAnyType());\n+                            resourceRestClient.setLatestSyncToken(resourceTO.getKey(), provisionTO.getAnyType());\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (Exception e) {\n                             LOG.error(\"While setting latest sync token for {}/{}\",\n@@ -258,8 +258,7 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n                         try {\n-                            SyncopeConsoleSession.get().getService(ResourceService.class).\n-                                    removeSyncToken(resourceTO.getKey(), provisionTO.getAnyType());\n+                            resourceRestClient.removeSyncToken(resourceTO.getKey(), provisionTO.getAnyType());\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (Exception e) {\n                             LOG.error(\"While removing sync token for {}/{}\",\n@@ -326,7 +325,7 @@ public boolean evaluate(final MappingItemTO item) {\n                         if (connObjectKeyCount != 1) {\n                             throw new RuntimeException(provision.getAnyType() + \": \"\n                                     + new StringResourceModel(\"connObjectKeyValidation\", ResourceProvisionPanel.this).\n-                                    getString());\n+                                            getString());\n                         }\n                     }\n                 }"},{"sha":"bea9c9fed1e520606502c351408c556859ee235d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/ErrorPage.html","status":"removed","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98e27bfe1e46643d58fe649aab52d3597d914267/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FErrorPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98e27bfe1e46643d58fe649aab52d3597d914267/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FErrorPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FErrorPage.html?ref=98e27bfe1e46643d58fe649aab52d3597d914267","patch":"@@ -1,37 +0,0 @@\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:extend>\n-\n-    <div class=\"ui-widget\">\n-      <div class=\"ui-state-error ui-corner-all\">\n-        <p>\n-          <span class=\"ui-icon ui-icon-alert\"></span>\n-          <strong><span wicket:id=\"errorTitle\"/></strong>\n-          <div><span wicket:id=\"errorMessage\"/></div>\n-          <p>\n-            <a href=\"\" wicket:id=\"home\">\n-              <wicket:message key=\"home\"/>\n-            </a>\n-          </p>\n-        </p>\n-      </div>\n-    </div>\n-  </wicket:extend>\n-</html>\n\\ No newline at end of file"},{"sha":"f5b4c4d6ee443e798142577ae5465e9dae521574","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Login.html","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.html?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -38,6 +38,7 @@\n         <img class=\"login-logo\" src=\"img/logo-green.png\" />\n \n         <span wicket:id=\"feedback\" role=\"alert\"/>\n+        <div class=\"box alert-danger\" style=\"padding: 5px;text-align: center;\" wicket:id=\"exceptionMessage\"/>\n \n         <form class=\"form-signin\" wicket:id=\"login\">\n           <fieldset class=\"form-group\">"},{"sha":"ac3c2aa79a361d8c6b5b8b4b0df9f7a17a05e056","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/rest/CamelRoutesRestClient.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -19,9 +19,11 @@\n package org.apache.syncope.client.console.rest;\n \n import static org.apache.syncope.client.console.rest.BaseRestClient.getService;\n+\n import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.common.lib.to.CamelMetrics;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.rest.api.service.CamelRouteService;\n@@ -50,10 +52,14 @@ public boolean isCamelEnabledFor(final AnyTypeKind anyTypeKind) {\n         return anyTypeKind == AnyTypeKind.USER\n                 ? SyncopeConsoleSession.get().getPlatformInfo().getUserProvisioningManager().contains(\"Camel\")\n                 : anyTypeKind == AnyTypeKind.ANY_OBJECT\n-                ? SyncopeConsoleSession.get().getPlatformInfo().\n-                getAnyObjectProvisioningManager().contains(\"Camel\")\n-                : SyncopeConsoleSession.get().getPlatformInfo().\n-                getGroupProvisioningManager().contains(\"Camel\");\n+                        ? SyncopeConsoleSession.get().getPlatformInfo().\n+                                getAnyObjectProvisioningManager().contains(\"Camel\")\n+                        : SyncopeConsoleSession.get().getPlatformInfo().\n+                                getGroupProvisioningManager().contains(\"Camel\");\n+\n+    }\n \n+    public CamelMetrics metrics() {\n+        return getService(CamelRouteService.class).metrics();\n     }\n }"},{"sha":"b673bfa947aba4890e4c15b9ab209dd9e198ce1b","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/widgets/CamelMetricsWidget.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java?ref=aa8e9f1e6e3797d40665855ee7cf13ab64c11e2c","patch":"@@ -26,11 +26,10 @@\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.annotations.ExtWidget;\n+import org.apache.syncope.client.console.rest.CamelRoutesRestClient;\n import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n import org.apache.syncope.common.lib.to.CamelMetrics;\n-import org.apache.syncope.common.rest.api.service.CamelRouteService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -46,14 +45,16 @@ public class CamelMetricsWidget extends BaseExtWidget {\n \n     private final BarChartPanel chart;\n \n+    private final CamelRoutesRestClient restClient = new CamelRoutesRestClient();\n+\n     public CamelMetricsWidget(final String id, final PageReference pageRef) {\n         super(id, pageRef);\n \n         WebMarkupContainer container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupId(true);\n         add(container);\n \n-        CamelMetrics metrics = SyncopeConsoleSession.get().getService(CamelRouteService.class).metrics();\n+        CamelMetrics metrics = restClient.metrics();\n         meanRates = new ArrayList<>(5);\n         for (int i = 0; i < 5; i++) {\n             meanRates.add(metrics.getResponseMeanRates().get(i));\n@@ -68,7 +69,7 @@ public CamelMetricsWidget(final String id, final PageReference pageRef) {\n \n             @Override\n             protected void onTimer(final AjaxRequestTarget target) {\n-                CamelMetrics metrics = SyncopeConsoleSession.get().getService(CamelRouteService.class).metrics();\n+                CamelMetrics metrics = restClient.metrics();\n                 List<CamelMetrics.MeanRate> updatedMeanRates = new ArrayList<>(5);\n                 for (int i = 0; i < 5; i++) {\n                     updatedMeanRates.add(metrics.getResponseMeanRates().get(i));"}]}