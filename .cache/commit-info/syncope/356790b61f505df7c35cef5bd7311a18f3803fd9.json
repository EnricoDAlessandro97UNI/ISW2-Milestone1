{"sha":"356790b61f505df7c35cef5bd7311a18f3803fd9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM1Njc5MGI2MWY1MDVkZjdjMzVjZWY1YmQ3MzExYTE4ZjM4MDNmZDk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-20T12:47:56Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-20T12:47:56Z"},"message":"bug-fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246441 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"76ab1dd87a381fa8946d8acb71d4ebfd393dd82d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/76ab1dd87a381fa8946d8acb71d4ebfd393dd82d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/356790b61f505df7c35cef5bd7311a18f3803fd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/356790b61f505df7c35cef5bd7311a18f3803fd9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/356790b61f505df7c35cef5bd7311a18f3803fd9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/356790b61f505df7c35cef5bd7311a18f3803fd9/comments","author":null,"committer":null,"parents":[{"sha":"d0680f35e5a029745327e7bc981adb736a682086","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d0680f35e5a029745327e7bc981adb736a682086","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d0680f35e5a029745327e7bc981adb736a682086"}],"stats":{"total":213,"additions":135,"deletions":78},"files":[{"sha":"2030ad550c4d2baea20bf1dd49e7bd30da58d533","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":111,"deletions":56,"changes":167,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/356790b61f505df7c35cef5bd7311a18f3803fd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/356790b61f505df7c35cef5bd7311a18f3803fd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=356790b61f505df7c35cef5bd7311a18f3803fd9","patch":"@@ -19,6 +19,7 @@\n import java.util.List;\n import java.util.Set;\n import org.identityconnectors.framework.api.ConnectorFacade;\n+import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.Name;\n@@ -75,7 +76,7 @@ public Set<String> create(SyncopeUser user, Set<String> syncResourceNames)\n             resources.add(resource);\n         }\n         for (Membership membership : user.getMemberships()) {\n-            resources.addAll(membership.getTargetResources());\n+            resources.addAll(membership.getSyncopeRole().getTargetResources());\n         }\n \n         ResourceOperations resourceOperations = new ResourceOperations();\n@@ -132,6 +133,7 @@ private Set<String> provision(SyncopeUser user,\n         if (syncResourceNames == null) {\n             syncResourceNames = Collections.EMPTY_SET;\n         }\n+\n         for (Type type : ResourceOperations.Type.values()) {\n             for (TargetResource resource : resourceOperations.get(type)) {\n                 if (syncResourceNames.contains(resource.getName())) {\n@@ -144,45 +146,55 @@ private Set<String> provision(SyncopeUser user,\n \n         // synchronous propagation ...\n         if (log.isDebugEnabled()) {\n-            log.debug(\"Synchronous provisioning of \" + syncOperations\n-                    + \" with user \" + user);\n+            log.debug(\n+                    \"Synchronous provisioning of \" +\n+                    syncOperations + \" with user \" + user);\n         }\n+\n         for (Type type : ResourceOperations.Type.values()) {\n             for (TargetResource resource : syncOperations.get(type)) {\n                 try {\n+\n                     propagate(user, resource, type);\n                     provisioned.add(resource.getName());\n+\n                 } catch (Throwable t) {\n-                    log.error(\"Exception during provision on resource \"\n-                            + resource.getName(), t);\n+                    log.error(\n+                            \"Exception during provision on resource \" +\n+                            resource.getName(), t);\n \n                     throw new PropagationException(\n-                            \"Exception during provision on resource \"\n-                            + resource.getName(), resource.getName(), t);\n+                            \"Exception during provision on resource \" +\n+                            resource.getName(), resource.getName(), t);\n                 }\n             }\n         }\n \n         // asynchronous propagation ...\n         if (log.isDebugEnabled()) {\n-            log.debug(\"Asynchronous provisioning of \"\n-                    + asyncOperations + \" with user \" + user);\n+            log.debug(\n+                    \"Asynchronous provisioning of \" +\n+                    asyncOperations + \" with user \" + user);\n         }\n+\n         for (Type type : ResourceOperations.Type.values()) {\n             for (TargetResource resource : asyncOperations.get(type)) {\n                 try {\n+\n                     propagate(user, resource, type);\n                     provisioned.add(resource.getName());\n+\n                 } catch (Throwable t) {\n-                    log.error(\"Exception during provision on resource \"\n-                            + resource.getName(), t);\n+                    log.error(\n+                            \"Exception during provision on resource \" +\n+                            resource.getName(), t);\n                 }\n             }\n         }\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"Provisioned \" + provisioned\n-                    + \" with user \" + user.getId());\n+            log.debug(\n+                    \"Provisioned \" + provisioned + \" with user \" + user.getId());\n         }\n \n         return provisioned;\n@@ -206,8 +218,9 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n                 getConnectorFacade(connectorInstance.getId().toString());\n \n         if (connector == null) {\n-            log.error(\"Connector instance bean \"\n-                    + connectorInstance.getId().toString() + \" not found\");\n+            log.error(\n+                    \"Connector instance bean \" +\n+                    connectorInstance.getId().toString() + \" not found\");\n \n             throw new NoSuchBeanDefinitionException(\n                     \"Connector instance bean not found\");\n@@ -244,62 +257,100 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n \n         for (SchemaMapping mapping : mappings) {\n \n-            field = mapping.getField();\n+            try {\n+                // get field name on target resource\n+                field = mapping.getField();\n \n-            schema = mapping.getUserSchema().getName();\n+                // get schema name on syncope\n+                schema = mapping.getUserSchema().getName();\n \n-            userAttribute = user.getAttribute(schema);\n+                // get defined type for user attribute\n+                schemaType = mapping.getUserSchema().getType();\n \n-            values = null;\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\n+                            \"\\nDefine mapping for: \" +\n+                            \"\\n* Field \" + field +\n+                            \"\\n* is accountId \" + mapping.isAccountid() +\n+                            \"\\n* is password \" + mapping.isPassword() +\n+                            \"\\n* is nullable \" + mapping.isNullable() +\n+                            \"\\n* Schema \" + schema +\n+                            \"\\n* Type \" + schemaType.getClassName());\n+                }\n \n-            try {\n-                schemaType = mapping.getUserSchema().getType();\n-                castToBeApplied = Class.forName(schemaType.getClassName());\n-            } catch (ClassNotFoundException e) {\n-                castToBeApplied = String.class;\n-            }\n+                // get user attribute object\n+                userAttribute = user.getAttribute(schema);\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"\\nDefine mapping for: \"\n-                        + \"\\n* Field \" + field\n-                        + \"\\n* is accountId \" + mapping.isAccountid()\n-                        + \"\\n* is password \" + mapping.isPassword()\n-                        + \"\\n* is nullable \" + mapping.isNullable()\n-                        + \"\\n* Schema \" + schema\n-                        + \"\\n* Type \" + schemaType.getClassName());\n-            }\n+                if (userAttribute == null) {\n+                    throw new Exception(\n+                            \"Invalid user attribute \" + userAttribute);\n+                }\n \n-            objValues = new HashSet();\n+                // -----------------------------\n+                // Retrieve user attribute values\n+                // -----------------------------\n+                objValues = new HashSet();\n \n-            if (userAttribute != null) {\n                 values = userAttribute.getAttributeValues();\n \n                 for (UserAttributeValue value : values) {\n-                    objValues.add(value.getValue());\n+\n+                    castToBeApplied = Class.forName(schemaType.getClassName());\n+\n+                    if (!FrameworkUtil.isSupportedAttributeType(\n+                            castToBeApplied)) {\n+\n+                        castToBeApplied = String.class;\n+                        objValues.add(value.getValueAsString());\n+\n+                    } else {\n+\n+                        objValues.add(value.getValue());\n+\n+                    }\n                 }\n-            }\n+                // -----------------------------\n \n-            if (!objValues.isEmpty() && mapping.isAccountid()) {\n-                accountId = objValues.iterator().next().toString();\n-                attrs.add(new Name(accountId));\n-            }\n+                if (mapping.isAccountid()) {\n+                    accountId = objValues.iterator().next().toString();\n+                    attrs.add(new Name(accountId));\n+                }\n \n-            if (password != null && mapping.isPassword()) {\n-                attrs.add(AttributeBuilder.buildPassword(\n-                        password.toCharArray()));\n-            }\n+                if (mapping.isPassword()) {\n+                    attrs.add(AttributeBuilder.buildPassword(\n+                            password.toCharArray()));\n+                }\n \n-            if (!mapping.isPassword()\n-                    && !mapping.isAccountid()\n-                    && !objValues.isEmpty()) {\n+                Object objValue = null;\n \n-                if (mapping.getUserSchema().isMultivalue()) {\n-                    attrs.add(AttributeBuilder.build(field, objValues));\n-                } else {\n-                    attrs.add(AttributeBuilder.build(field,\n-                            castToBeApplied.cast(objValues.iterator().next())));\n+                if (!objValues.isEmpty())\n+                    objValue = objValues.iterator().next();\n+\n+                if (!mapping.isPassword() &&\n+                        !mapping.isAccountid()) {\n+\n+                    if (mapping.getUserSchema().isMultivalue()) {\n+                        attrs.add(AttributeBuilder.build(\n+                                field,\n+                                objValues));\n+                    } else {\n+                        attrs.add(AttributeBuilder.build(\n+                                field,\n+                                castToBeApplied.cast(objValue)));\n+                    }\n                 }\n \n+            } catch (ClassNotFoundException e) {\n+\n+                if (log.isWarnEnabled()) {\n+                    log.warn(\"Unsupported attribute type \" +\n+                            schemaType.getClassName(), e);\n+                }\n+\n+            } catch (Throwable t) {\n+                if (log.isWarnEnabled()) {\n+                    log.warn(\"Attribute '\" + schema + \"' processing failed\", t);\n+                }\n             }\n         }\n \n@@ -317,14 +368,18 @@ private void propagate(SyncopeUser user, TargetResource resource, Type type)\n             case DELETE:\n                 connector.delete(ObjectClass.ACCOUNT, new Uid(accountId), null);\n                 break;\n+\n         }\n \n+\n+\n         if (userUid == null && type != Type.DELETE) {\n-            log.error(\"Error creating / updating user onto resource \"\n-                    + resource);\n+            log.error(\n+                    \"Error creating / updating user onto resource \" + resource);\n \n             throw new IllegalStateException(\"Error creating user\");\n         }\n+\n     }\n \n     private ConnectorFacade getConnectorFacade(String id) {"},{"sha":"019802072351170964805ec1457d7c871cd6ef5f","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":18,"deletions":12,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/356790b61f505df7c35cef5bd7311a18f3803fd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/356790b61f505df7c35cef5bd7311a18f3803fd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=356790b61f505df7c35cef5bd7311a18f3803fd9","patch":"@@ -66,12 +66,16 @@ public class UserController extends AbstractController {\n \n     @Autowired\n     private SyncopeUserDAO syncopeUserDAO;\n+\n     @Autowired\n     private UserDataBinder userDataBinder;\n+\n     @Autowired\n     private Workflow userWorkflow;\n+\n     @Autowired(required = false)\n     private SpringHibernateJPAWorkflowStore workflowStore;\n+\n     @Autowired\n     private PropagationManager propagationManager;\n \n@@ -287,8 +291,7 @@ public ModelAndView getStatus(@PathVariable(\"userId\") Long userId)\n     private Set<String> getSyncResourceNames(SyncopeUser user,\n             Set<Long> syncRoles, Set<String> syncResources) {\n \n-        if ((syncRoles == null || syncRoles.isEmpty()\n-                && (syncResources == null || syncResources.isEmpty()))) {\n+        if ((syncRoles == null || syncRoles.isEmpty() && (syncResources == null || syncResources.isEmpty()))) {\n             return Collections.EMPTY_SET;\n         }\n \n@@ -322,8 +325,7 @@ public UserTO create(HttpServletResponse response,\n             WorkflowException, PropagationException, NotFoundException {\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"create called with parameters \" + userTO\n-                    + \"\\n\" + syncRoles + \"\\n\" + syncResources);\n+            log.debug(\"create called with parameters \" + userTO + \"\\n\" + syncRoles + \"\\n\" + syncResources);\n         }\n \n         // By default, ignore id in UserTO:\n@@ -389,12 +391,15 @@ public UserTO create(HttpServletResponse response,\n         // Now that user is created locally, let's propagate\n         Set<String> syncResourceNames =\n                 getSyncResourceNames(user, syncRoles, syncResources);\n+\n         if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {\n-            log.debug(\"About to propagate synchronously onto resources \"\n-                    + syncResourceNames);\n+            log.debug(\"About to propagate synchronously onto resources \" +\n+                    syncResourceNames);\n         }\n+\n         Set<String> propagatedResources =\n                 propagationManager.create(user, syncResourceNames);\n+\n         if (log.isDebugEnabled()) {\n             log.debug(\"Propagated onto resources \" + propagatedResources);\n         }\n@@ -403,12 +408,14 @@ public UserTO create(HttpServletResponse response,\n         Map<String, Object> inputs = new HashMap<String, Object>();\n         inputs.put(Constants.SYNCOPE_USER, user);\n \n-        int[] availableWorkflowActions = userWorkflow.getAvailableActions(\n-                workflowId, null);\n+        int[] availableWorkflowActions =\n+                userWorkflow.getAvailableActions(workflowId, null);\n+\n         for (int availableWorkflowAction : availableWorkflowActions) {\n-            userWorkflow.doAction(workflowId, availableWorkflowAction,\n-                    inputs);\n+            userWorkflow.doAction(\n+                    workflowId, availableWorkflowAction, inputs);\n         }\n+        \n         user = syncopeUserDAO.save(user);\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n@@ -445,8 +452,7 @@ public UserTO update(@RequestBody UserMod userMod,\n         Set<String> syncResourceNames =\n                 getSyncResourceNames(user, syncRoles, syncResources);\n         if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {\n-            log.debug(\"About to propagate synchronously onto resources \"\n-                    + syncResourceNames);\n+            log.debug(\"About to propagate synchronously onto resources \" + syncResourceNames);\n         }\n         Set<String> propagatedResources =\n                 propagationManager.update(user,"},{"sha":"71c4673a08bded706365ee85361ad206abcbeb46","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/356790b61f505df7c35cef5bd7311a18f3803fd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/356790b61f505df7c35cef5bd7311a18f3803fd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=356790b61f505df7c35cef5bd7311a18f3803fd9","patch":"@@ -74,8 +74,7 @@ public SyncopeUser create(UserTO userTO)\n         // TODO: check password policies\n         SyncopeClientException invalidPassword = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidPassword);\n-        if (userTO.getPassword() == null\n-                || userTO.getPassword().length() == 0) {\n+        if (userTO.getPassword() == null || userTO.getPassword().length() == 0) {\n \n             log.error(\"No password provided\");\n \n@@ -99,8 +98,7 @@ public SyncopeUser create(UserTO userTO)\n \n             if (role == null) {\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring invalid role \"\n-                            + membershipTO.getRole());\n+                    log.debug(\"Ignoring invalid role \" + membershipTO.getRole());\n                 }\n             } else {\n                 Membership membership = null;\n@@ -154,8 +152,7 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n             membership = membershipDAO.find(membershipToBeRemovedId);\n             if (membership == null) {\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"Invalid membership id specified to be removed: \"\n-                            + membershipToBeRemovedId);\n+                    log.debug(\"Invalid membership id specified to be removed: \" + membershipToBeRemovedId);\n                 }\n             } else {\n                 for (TargetResource resource :\n@@ -185,8 +182,8 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n             role = syncopeRoleDAO.find(membershipMod.getRole());\n             if (role == null) {\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring invalid role \"\n-                            + membershipMod.getRole());\n+                    log.debug(\"Ignoring invalid role \" +\n+                            membershipMod.getRole());\n                 }\n             } else {\n                 membership = membershipDAO.find(user, role);\n@@ -224,8 +221,7 @@ public UserTO getUserTO(SyncopeUser user, Workflow userWorkflow) {\n                 log.error(\"Could not find status information for \" + user);\n             }\n         } catch (EntityNotFoundException e) {\n-            log.error(\"Could not find workflow entry with id \"\n-                    + user.getWorkflowId());\n+            log.error(\"Could not find workflow entry with id \" + user.getWorkflowId());\n         }\n         userTO.setStatus(status);\n "}]}