{"sha":"9c381eb19761b7f768c1c7c06f529794c15e72ec","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjljMzgxZWIxOTc2MWI3Zjc2OGMxYzdjMDZmNTI5Nzk0YzE1ZTcyZWM=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-12-18T19:21:37Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-12-18T19:26:03Z"},"message":"[SYNCOPE-1252] fix the search feature + improve autocompletion for property field","tree":{"sha":"21700c9b39e347b588fdda7cd6da4fcaf3ad37e6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/21700c9b39e347b588fdda7cd6da4fcaf3ad37e6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9c381eb19761b7f768c1c7c06f529794c15e72ec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9c381eb19761b7f768c1c7c06f529794c15e72ec","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9c381eb19761b7f768c1c7c06f529794c15e72ec","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9c381eb19761b7f768c1c7c06f529794c15e72ec/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"2b07e5a686b65ad56354f3895bac4edb6fad590a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2b07e5a686b65ad56354f3895bac4edb6fad590a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2b07e5a686b65ad56354f3895bac4edb6fad590a"}],"stats":{"total":131,"additions":76,"deletions":55},"files":[{"sha":"745688e210edc6e99bd6cb3b9d850625d6e7dafb","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":50,"deletions":48,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c381eb19761b7f768c1c7c06f529794c15e72ec/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c381eb19761b7f768c1c7c06f529794c15e72ec/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=9c381eb19761b7f768c1c7c06f529794c15e72ec","patch":"@@ -389,52 +389,43 @@ protected void onEvent(final AjaxRequestTarget target) {\n                 }\n \n                 if (field.getModel().getObject().getType() == Type.GROUP_MEMBERSHIP) {\n-                    target.focusComponent(null);\n-                    property.getField().inputChanged();\n-                    property.getField().validate();\n-                    if (property.getField().isValid()) {\n-                        property.getField().valid();\n-                        property.getField().updateModel();\n-                        String[] inputAsArray = property.getField().getInputAsArray();\n-\n-                        if (StringUtils.isBlank(property.getField().getInput())\n-                                || inputAsArray.length == 0) {\n-                            property.setChoices(properties.getObject());\n-                        } else {\n-                            String inputValue = (inputAsArray.length > 1 && inputAsArray[1] != null)\n-                                    ? inputAsArray[1]\n-                                    : property.getField().getInput();\n-                            inputValue = (inputValue.startsWith(\"*\") && !inputValue.endsWith(\"*\"))\n-                                    ? inputValue + \"*\"\n-                                    : (!inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\"))\n-                                    ? \"*\" + inputValue\n-                                    : (inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\")\n-                                    ? inputValue : \"*\" + inputValue + \"*\");\n-\n-                            if (groupInfo.getRight() > AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY) {\n-                                List<GroupTO> filteredGroups =\n-                                        groupRestClient.search(\"/\",\n-                                                SyncopeClient.getGroupSearchConditionBuilder().\n-                                                        is(\"name\").equalToIgnoreCase(inputValue).\n-                                                        query(),\n-                                                1,\n-                                                AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY,\n-                                                new SortParam<>(\"name\", true),\n-                                                null);\n-                                Collection<String> newList =\n-                                        CollectionUtils.collect(filteredGroups,\n-                                                new Transformer<GroupTO, String>() {\n-\n-                                            @Override\n-                                            public String transform(final GroupTO input) {\n-                                                return input.getName();\n-                                            }\n-                                        });\n-\n-                                final List<String> names = new ArrayList<>(newList);\n-                                Collections.sort(names);\n-                                property.setChoices(names);\n-                            }\n+                    String[] inputAsArray = property.getField().getInputAsArray();\n+\n+                    if (StringUtils.isBlank(property.getField().getInput())\n+                            || inputAsArray.length == 0) {\n+                        property.setChoices(properties.getObject());\n+                    } else {\n+                        String inputValue = (inputAsArray.length > 1 && inputAsArray[1] != null)\n+                                ? inputAsArray[1]\n+                                : property.getField().getInput();\n+                        inputValue = (inputValue.startsWith(\"*\") && !inputValue.endsWith(\"*\"))\n+                                ? inputValue + \"*\"\n+                                : (!inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\"))\n+                                ? \"*\" + inputValue\n+                                : (inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\")\n+                                ? inputValue : \"*\" + inputValue + \"*\");\n+\n+                        if (groupInfo.getRight() > AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY) {\n+                            List<GroupTO> filteredGroups = groupRestClient.search(\"/\",\n+                                    SyncopeClient.getGroupSearchConditionBuilder().\n+                                            is(\"name\").equalToIgnoreCase(inputValue).\n+                                            query(),\n+                                    1,\n+                                    AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY,\n+                                    new SortParam<>(\"name\", true),\n+                                    null);\n+                            Collection<String> newList = CollectionUtils.collect(filteredGroups,\n+                                    new Transformer<GroupTO, String>() {\n+\n+                                @Override\n+                                public String transform(final GroupTO input) {\n+                                    return input.getName();\n+                                }\n+                            });\n+\n+                            final List<String> names = new ArrayList<>(newList);\n+                            Collections.sort(names);\n+                            property.setChoices(names);\n                         }\n                     }\n                 }\n@@ -443,9 +434,16 @@ public String transform(final GroupTO input) {\n             @Override\n             protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n                 super.updateAjaxAttributes(attributes);\n-\n                 attributes.getAjaxCallListeners().clear();\n             }\n+        }, new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+\n+            }\n         });\n \n         final AjaxDropDownChoicePanel<SearchClause.Comparator> comparator = new AjaxDropDownChoicePanel<>(\n@@ -513,7 +511,11 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 SearchClausePanel.this.clause.setObject(searchClause);\n \n                 setFieldAccess(searchClause.getType(), property, comparator, value);\n+\n+                // reset property value in case and just in case of change of type\n+                property.setModelObject(StringUtils.EMPTY);\n                 target.add(property);\n+\n                 target.add(comparator);\n                 target.add(value);\n             }\n@@ -606,7 +608,7 @@ private void setFieldAccess(\n                 case GROUP_MEMBER:\n                     value.setEnabled(true);\n                     property.setEnabled(false);\n-                    property.setModelObject(null);\n+                    property.setModelObject(StringUtils.EMPTY);\n                     break;\n \n                 case RESOURCE:"},{"sha":"80fa692f35a25cbe617fd8feaf232e1c20a805f2","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":26,"deletions":7,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c381eb19761b7f768c1c7c06f529794c15e72ec/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c381eb19761b7f768c1c7c06f529794c15e72ec/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=9c381eb19761b7f768c1c7c06f529794c15e72ec","patch":"@@ -259,9 +259,14 @@ public static String buildFIQL(\n \n                     case ATTRIBUTE:\n                         if (StringUtils.isNotBlank(clause.getProperty())) {\n-                            boolean isLong = availableSchemaTypes.get(clause.getProperty()) != null\n-                                    && availableSchemaTypes.get(clause.getProperty()).getType()\n-                                    == AttrSchemaType.Long;\n+                            boolean isLong = false;\n+                            boolean isDouble = false;\n+                            if (availableSchemaTypes.get(clause.getProperty()) != null) {\n+                                isLong = availableSchemaTypes.get(clause.getProperty()).getType()\n+                                        == AttrSchemaType.Long;\n+                                isDouble = availableSchemaTypes.get(clause.getProperty()).getType()\n+                                        == AttrSchemaType.Double;\n+                            }\n \n                             SyncopeProperty property = builder.is(clause.getProperty());\n                             switch (clause.getComparator()) {\n@@ -276,32 +281,46 @@ public static String buildFIQL(\n                                 case LESS_THAN:\n                                     condition = isLong\n                                             ? property.lessThan(NumberUtils.toLong(value))\n-                                            : property.lexicalBefore(value);\n+                                            : isDouble\n+                                                    ? property.lessThan(NumberUtils.toDouble(value))\n+                                                    : property.lexicalBefore(value);\n                                     break;\n \n                                 case LESS_OR_EQUALS:\n                                     condition = isLong\n                                             ? property.lessOrEqualTo(NumberUtils.toLong(value))\n-                                            : property.lexicalNotAfter(value);\n+                                            : isDouble\n+                                                    ? property.lessOrEqualTo(NumberUtils.toDouble(value))\n+                                                    : property.lexicalNotAfter(value);\n                                     break;\n \n                                 case GREATER_THAN:\n                                     condition = isLong\n                                             ? property.greaterThan(NumberUtils.toLong(value))\n-                                            : property.lexicalAfter(value);\n+                                            : isDouble\n+                                                    ? property.greaterThan(NumberUtils.toDouble(value))\n+                                                    : property.lexicalAfter(value);\n                                     break;\n \n                                 case GREATER_OR_EQUALS:\n                                     condition = isLong\n                                             ? property.greaterOrEqualTo(NumberUtils.toLong(value))\n-                                            : property.lexicalNotBefore(value);\n+                                            : isDouble\n+                                                    ? property.greaterOrEqualTo(NumberUtils.toDouble(value))\n+                                                    : property.lexicalNotBefore(value);\n                                     break;\n \n                                 case NOT_EQUALS:\n                                     condition = property.notEqualTolIgnoreCase(value);\n                                     break;\n \n                                 case EQUALS:\n+                                    condition = isLong\n+                                            ? property.equalTo(NumberUtils.toLong(value))\n+                                            : isDouble\n+                                                    ? property.equalTo(NumberUtils.toDouble(value))\n+                                                    : property.equalToIgnoreCase(value);\n+                                    break;\n                                 default:\n                                     condition = property.equalToIgnoreCase(value);\n                                     break;"}]}