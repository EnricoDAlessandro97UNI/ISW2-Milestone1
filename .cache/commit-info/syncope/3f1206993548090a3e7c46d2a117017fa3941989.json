{"sha":"3f1206993548090a3e7c46d2a117017fa3941989","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNmMTIwNjk5MzU0ODA5MGEzZTdjNDZkMmExMTcwMTdmYTM5NDE5ODk=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-07-08T15:37:57Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-07-08T15:37:57Z"},"message":"[SYNCOPE-890] provides title on the checkbox","tree":{"sha":"7a6ef3b7a046fe493204bd66690889cd980076a4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7a6ef3b7a046fe493204bd66690889cd980076a4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3f1206993548090a3e7c46d2a117017fa3941989","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3f1206993548090a3e7c46d2a117017fa3941989","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3f1206993548090a3e7c46d2a117017fa3941989","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3f1206993548090a3e7c46d2a117017fa3941989/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"49b4f39c8aaf35362f72dc23d1698e1d1879b8d2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/49b4f39c8aaf35362f72dc23d1698e1d1879b8d2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/49b4f39c8aaf35362f72dc23d1698e1d1879b8d2"}],"stats":{"total":150,"additions":77,"deletions":73},"files":[{"sha":"dd6c7de8b6c9b7c304acfe22429de151790f94d9","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f1206993548090a3e7c46d2a117017fa3941989/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f1206993548090a3e7c46d2a117017fa3941989/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java?ref=3f1206993548090a3e7c46d2a117017fa3941989","patch":"@@ -64,7 +64,7 @@ public class ResourceProvisionPanel extends AbstractModalPanel<Serializable> {\n     private static final long serialVersionUID = -7982691107029848579L;\n \n     private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n-    \n+\n     private final ResourceTO resourceTO;\n \n     private Model<OrgUnitTO> baseModel;\n@@ -98,6 +98,7 @@ public ResourceProvisionPanel(\n                 Model.of(realmProvisionEnabled),\n                 false);\n         aboutRealmProvison.add(enableRealmsProvision);\n+        enableRealmsProvision.setIndex(1).setTitle(getString(\"enableRealmsProvision.title\"));\n \n         final WebMarkupContainer realmsProvisionContainer = new WebMarkupContainer(\"realmsProvisionContainer\");\n         realmsProvisionContainer.setOutputMarkupPlaceholderTag(true);\n@@ -178,14 +179,14 @@ protected ProvisionTO getActualItem(final ProvisionTO item, final List<Provision\n                         ? null\n                         : IteratorUtils.find(list.iterator(), new Predicate<ProvisionTO>() {\n \n-                            @Override\n-                            public boolean evaluate(final ProvisionTO in) {\n-                                return ((item.getKey() == null && in.getKey() == null)\n-                                        || (in.getKey() != null && in.getKey().equals(item.getKey())))\n-                                        && ((item.getAnyType() == null && in.getAnyType() == null)\n-                                        || (in.getAnyType() != null && in.getAnyType().equals(item.getAnyType())));\n-                            }\n-                        });\n+                    @Override\n+                    public boolean evaluate(final ProvisionTO in) {\n+                        return ((item.getKey() == null && in.getKey() == null)\n+                                || (in.getKey() != null && in.getKey().equals(item.getKey())))\n+                                && ((item.getAnyType() == null && in.getAnyType() == null)\n+                                || (in.getAnyType() != null && in.getAnyType().equals(item.getAnyType())));\n+                    }\n+                });\n             }\n \n             @Override\n@@ -199,7 +200,6 @@ protected void customActionOnFinishCallback(final AjaxRequestTarget target) {\n                 ResourceProvisionPanel.this.aboutRealmProvison.setVisible(true);\n                 target.add(ResourceProvisionPanel.this.aboutRealmProvison);\n             }\n-\n         };\n \n         builder.setItems(resourceTO.getProvisions());\n@@ -209,82 +209,82 @@ protected void customActionOnFinishCallback(final AjaxRequestTarget target) {\n         builder.\n                 addAction(new ActionLink<ProvisionTO>() {\n \n-                    private static final long serialVersionUID = -3722207913631435504L;\n+            private static final long serialVersionUID = -3722207913631435504L;\n \n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n-                        send(ResourceProvisionPanel.this, Broadcast.DEPTH,\n-                                new AjaxWizard.NewItemActionEvent<>(provisionTO, 2, target).setResourceModel(\n-                                        new StringResourceModel(\"inner.provision.mapping\",\n-                                                ResourceProvisionPanel.this,\n-                                                Model.of(provisionTO))));\n-                    }\n-                }, ActionLink.ActionType.MAPPING, StandardEntitlement.RESOURCE_UPDATE).\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n+                send(ResourceProvisionPanel.this, Broadcast.DEPTH,\n+                        new AjaxWizard.NewItemActionEvent<>(provisionTO, 2, target).setResourceModel(\n+                        new StringResourceModel(\"inner.provision.mapping\",\n+                        ResourceProvisionPanel.this,\n+                        Model.of(provisionTO))));\n+            }\n+        }, ActionLink.ActionType.MAPPING, StandardEntitlement.RESOURCE_UPDATE).\n                 addAction(new ActionLink<ProvisionTO>() {\n \n-                    private static final long serialVersionUID = -7780999687733432439L;\n+            private static final long serialVersionUID = -7780999687733432439L;\n \n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n-                        try {\n-                            SyncopeConsoleSession.get().getService(ResourceService.class).\n-                                    setLatestSyncToken(resourceTO.getKey(), provisionTO.getAnyType());\n-                            SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (Exception e) {\n-                            LOG.error(\"While setting latest sync token for {}/{}\",\n-                                    resourceTO.getKey(), provisionTO.getAnyType(), e);\n-                            SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage()) ? e.getClass().\n-                                    getName() : e.getMessage());\n-                        }\n-                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n-                    }\n-                }, ActionLink.ActionType.SET_LATEST_SYNC_TOKEN, StandardEntitlement.RESOURCE_UPDATE).\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n+                try {\n+                    SyncopeConsoleSession.get().getService(ResourceService.class).\n+                            setLatestSyncToken(resourceTO.getKey(), provisionTO.getAnyType());\n+                    SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n+                } catch (Exception e) {\n+                    LOG.error(\"While setting latest sync token for {}/{}\",\n+                            resourceTO.getKey(), provisionTO.getAnyType(), e);\n+                    SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage()) ? e.getClass().\n+                            getName() : e.getMessage());\n+                }\n+                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+            }\n+        }, ActionLink.ActionType.SET_LATEST_SYNC_TOKEN, StandardEntitlement.RESOURCE_UPDATE).\n                 addAction(new ActionLink<ProvisionTO>() {\n \n-                    private static final long serialVersionUID = -7780999687733432439L;\n+            private static final long serialVersionUID = -7780999687733432439L;\n \n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n-                        try {\n-                            SyncopeConsoleSession.get().getService(ResourceService.class).\n-                                    removeSyncToken(resourceTO.getKey(), provisionTO.getAnyType());\n-                            SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (Exception e) {\n-                            LOG.error(\"While removing sync token for {}/{}\",\n-                                    resourceTO.getKey(), provisionTO.getAnyType(), e);\n-                            SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage()) ? e.getClass().\n-                                    getName() : e.getMessage());\n-                        }\n-                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n-                    }\n-                }, ActionLink.ActionType.REMOVE_SYNC_TOKEN, StandardEntitlement.RESOURCE_UPDATE).\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n+                try {\n+                    SyncopeConsoleSession.get().getService(ResourceService.class).\n+                            removeSyncToken(resourceTO.getKey(), provisionTO.getAnyType());\n+                    SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n+                } catch (Exception e) {\n+                    LOG.error(\"While removing sync token for {}/{}\",\n+                            resourceTO.getKey(), provisionTO.getAnyType(), e);\n+                    SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage()) ? e.getClass().\n+                            getName() : e.getMessage());\n+                }\n+                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+            }\n+        }, ActionLink.ActionType.REMOVE_SYNC_TOKEN, StandardEntitlement.RESOURCE_UPDATE).\n                 addAction(new ActionLink<ProvisionTO>() {\n \n-                    private static final long serialVersionUID = -3722207913631435534L;\n+            private static final long serialVersionUID = -3722207913631435534L;\n \n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n-                        final ProvisionTO clone = SerializationUtils.clone(provisionTO);\n-                        clone.setKey(null);\n-                        clone.setAnyType(null);\n-                        clone.setObjectClass(null);\n-                        send(ResourceProvisionPanel.this, Broadcast.DEPTH,\n-                                new AjaxWizard.NewItemActionEvent<>(clone, target).setResourceModel(\n-                                        new StringResourceModel(\"inner.provision.clone\",\n-                                                ResourceProvisionPanel.this,\n-                                                Model.of(provisionTO))));\n-                    }\n-                }, ActionLink.ActionType.CLONE, StandardEntitlement.RESOURCE_CREATE).\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n+                final ProvisionTO clone = SerializationUtils.clone(provisionTO);\n+                clone.setKey(null);\n+                clone.setAnyType(null);\n+                clone.setObjectClass(null);\n+                send(ResourceProvisionPanel.this, Broadcast.DEPTH,\n+                        new AjaxWizard.NewItemActionEvent<>(clone, target).setResourceModel(\n+                        new StringResourceModel(\"inner.provision.clone\",\n+                        ResourceProvisionPanel.this,\n+                        Model.of(provisionTO))));\n+            }\n+        }, ActionLink.ActionType.CLONE, StandardEntitlement.RESOURCE_CREATE).\n                 addAction(new ActionLink<ProvisionTO>() {\n \n-                    private static final long serialVersionUID = -3722207913631435544L;\n+            private static final long serialVersionUID = -3722207913631435544L;\n \n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n-                        resourceTO.getProvisions().remove(provisionTO);\n-                        send(ResourceProvisionPanel.this, Broadcast.DEPTH, new ListViewReload<>(target));\n-                    }\n-                }, ActionLink.ActionType.DELETE, StandardEntitlement.RESOURCE_DELETE);\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n+                resourceTO.getProvisions().remove(provisionTO);\n+                send(ResourceProvisionPanel.this, Broadcast.DEPTH, new ListViewReload<>(target));\n+            }\n+        }, ActionLink.ActionType.DELETE, StandardEntitlement.RESOURCE_DELETE);\n \n         builder.addNewItemPanelBuilder(wizard);\n "},{"sha":"267c1c8bcdf7cf15cd96e9021ecad46bc64950c8","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f1206993548090a3e7c46d2a117017fa3941989/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f1206993548090a3e7c46d2a117017fa3941989/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.properties?ref=3f1206993548090a3e7c46d2a117017fa3941989","patch":"@@ -40,3 +40,4 @@ enable=Enable\n inner.provision.mapping=${anyType} provision\n inner.provision.clone=Clone provision '${key}'\n enableRealmsProvision=Enable realm provisioning\n+enableRealmsProvision.title=Enable the possibility to provision realms towards external resource"},{"sha":"fe7aff596cb2a633bfba07b03df3e16c95af8ae1","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f1206993548090a3e7c46d2a117017fa3941989/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f1206993548090a3e7c46d2a117017fa3941989/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_it.properties?ref=3f1206993548090a3e7c46d2a117017fa3941989","patch":"@@ -40,3 +40,4 @@ enable=Abilita\n inner.provision.mapping=Provision ${anyType}\n inner.provision.clone=Clona il provision '${key}'\n enableRealmsProvision=Abilita il provisioning dei realm\n+enableRealmsProvision.title=Abilita la possibilit\\u00e0 di effettuare il provisioning dei realm verso la risorsa esterna"},{"sha":"66c2d70dee64ebdb3020623779e8e20fe82b74ff","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f1206993548090a3e7c46d2a117017fa3941989/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f1206993548090a3e7c46d2a117017fa3941989/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_pt_BR.properties?ref=3f1206993548090a3e7c46d2a117017fa3941989","patch":"@@ -40,3 +40,4 @@ enable=Habilitado\n inner.provision.mapping=${anyType} provision\n inner.provision.clone=Clone provision '${key}'\n enableRealmsProvision=Enable realm provisioning\n+enableRealmsProvision.title=Enable the possibility to provision realms towards external resource"},{"sha":"5750a4a8e5a1c30b9b97f84e55fa14f2dd6df1b9","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3f1206993548090a3e7c46d2a117017fa3941989/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3f1206993548090a3e7c46d2a117017fa3941989/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_ru.properties?ref=3f1206993548090a3e7c46d2a117017fa3941989","patch":"@@ -61,3 +61,4 @@ enable=\\u0412\\u043a\\u043b\\u044e\\u0447\\u0438\\u0442\\u044c\n inner.provision.mapping=${anyType} provision\n inner.provision.clone=Clone provision '${key}'\n enableRealmsProvision=Enable realm provisioning\n+enableRealmsProvision.title=Enable the possibility to provision realms towards external resource"}]}