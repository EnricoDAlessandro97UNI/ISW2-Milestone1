{"sha":"34a9c8c0ef8efa1f4fe28625afca3600d95a9557","node_id":"C_kwDOJfYA1toAKDM0YTljOGMwZWY4ZWZhMWY0ZmUyODYyNWFmY2EzNjAwZDk1YTk1NTc","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2023-02-23T13:11:57Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2023-02-23T13:30:52Z"},"message":"[SYNCOPE-1732] Support generic access policy configuration through BeanPanel (#413)\n\n* [SYNCOPE-1732] support generic access policy configuration through bean panel","tree":{"sha":"0272e230aa8d24ce9401fcc012ff1002e5de0c70","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0272e230aa8d24ce9401fcc012ff1002e5de0c70"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/34a9c8c0ef8efa1f4fe28625afca3600d95a9557","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34a9c8c0ef8efa1f4fe28625afca3600d95a9557","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/34a9c8c0ef8efa1f4fe28625afca3600d95a9557","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"4ee601c0f691fba354961fe806c88fa0bf413cb5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4ee601c0f691fba354961fe806c88fa0bf413cb5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4ee601c0f691fba354961fe806c88fa0bf413cb5"}],"stats":{"total":226,"additions":39,"deletions":187},"files":[{"sha":"a9e2232450225ae4d4cd7d09749d4060fdbde72f","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AccessPolicyDirectoryPanel.java","status":"modified","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyDirectoryPanel.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.policies;\n \n import java.util.List;\n-import org.apache.syncope.client.console.panels.ModalDirectoryPanel;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n@@ -92,49 +91,5 @@ public void onClick(final AjaxRequestTarget target, final AccessPolicyTO ignore)\n                 policySpecModal.show(true);\n             }\n         }, ActionLink.ActionType.CHANGE_VIEW, IdRepoEntitlement.POLICY_UPDATE);\n-\n-        if (model.getObject().getConf() instanceof DefaultAccessPolicyConf) {\n-            panel.add(new ActionLink<>() {\n-\n-                private static final long serialVersionUID = -3722207913631435501L;\n-\n-                @Override\n-                public void onClick(final AjaxRequestTarget target, final AccessPolicyTO ignore) {\n-                    model.setObject(PolicyRestClient.read(type, model.getObject().getKey()));\n-                    target.add(ruleCompositionModal.setContent(new ModalDirectoryPanel<>(\n-                            ruleCompositionModal,\n-                            new AccessPolicyAttrsDirectoryPanel(\n-                                    \"panel\",\n-                                    ruleCompositionModal,\n-                                    model,\n-                                    DefaultAccessPolicyConf::getRequiredAttrs,\n-                                    pageRef),\n-                            pageRef)));\n-                    ruleCompositionModal.header(new Model<>(getString(\"requiredAttrs.title\", model)));\n-                    ruleCompositionModal.show(true);\n-                }\n-            }, ActionLink.ActionType.TYPE_EXTENSIONS, IdRepoEntitlement.POLICY_UPDATE);\n-\n-            panel.add(new ActionLink<>() {\n-\n-                private static final long serialVersionUID = -3722207913631435501L;\n-\n-                @Override\n-                public void onClick(final AjaxRequestTarget target, final AccessPolicyTO ignore) {\n-                    model.setObject(PolicyRestClient.read(type, model.getObject().getKey()));\n-                    target.add(ruleCompositionModal.setContent(new ModalDirectoryPanel<>(\n-                            ruleCompositionModal,\n-                            new AccessPolicyAttrsDirectoryPanel(\n-                                    \"panel\",\n-                                    ruleCompositionModal,\n-                                    model,\n-                                    DefaultAccessPolicyConf::getRejectedAttrs,\n-                                    pageRef),\n-                            pageRef)));\n-                    ruleCompositionModal.header(new Model<>(getString(\"rejectedAttrs.title\", model)));\n-                    ruleCompositionModal.show(true);\n-                }\n-            }, ActionLink.ActionType.CLAIM, IdRepoEntitlement.POLICY_UPDATE);\n-        }\n     }\n }"},{"sha":"f64256fe0006fc63882746abc4f87351dd45fe09","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AccessPolicyModalPanel.java","status":"modified","additions":2,"deletions":100,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyModalPanel.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -18,36 +18,19 @@\n  */\n package org.apache.syncope.client.console.policies;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.AbstractModalPanel;\n+import org.apache.syncope.client.console.panels.BeanPanel;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n-import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.client.ui.commons.DateOps;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDateTimeFieldPanel;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n-import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n-import org.apache.syncope.common.lib.policy.HttpRequestAccessPolicyConf;\n-import org.apache.syncope.common.lib.policy.RemoteEndpointAccessPolicyConf;\n-import org.apache.syncope.common.lib.policy.TimeBasedAccessPolicyConf;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.markup.html.list.ListItem;\n-import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.validation.validator.UrlValidator;\n \n public class AccessPolicyModalPanel extends AbstractModalPanel<AccessPolicyTO> {\n \n@@ -64,88 +47,7 @@ public AccessPolicyModalPanel(\n         super(modal, pageRef);\n         this.model = model;\n \n-        List<Component> fields = new ArrayList<>();\n-\n-        if (model.getObject().getConf() instanceof DefaultAccessPolicyConf) {\n-            fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n-                    \"field\",\n-                    \"order\",\n-                    Integer.class,\n-                    new PropertyModel<>(model.getObject().getConf(), \"order\")));\n-            fields.add(new AjaxCheckBoxPanel(\n-                    \"field\",\n-                    \"enabled\",\n-                    new PropertyModel<>(model.getObject().getConf(), \"enabled\"),\n-                    false));\n-            fields.add(new AjaxCheckBoxPanel(\n-                    \"field\",\n-                    \"ssoEnabled\",\n-                    new PropertyModel<>(model.getObject().getConf(), \"ssoEnabled\"),\n-                    false));\n-            fields.add(new AjaxCheckBoxPanel(\n-                    \"field\",\n-                    \"requireAllAttributes\",\n-                    new PropertyModel<>(model.getObject().getConf(), \"requireAllAttributes\"),\n-                    false));\n-            fields.add(new AjaxCheckBoxPanel(\n-                    \"field\",\n-                    \"caseInsensitive\",\n-                    new PropertyModel<>(model.getObject().getConf(), \"caseInsensitive\"),\n-                    false));\n-            AjaxTextFieldPanel unauthorizedRedirectUrl = new AjaxTextFieldPanel(\n-                    \"field\",\n-                    \"unauthorizedRedirectUrl\",\n-                    new PropertyModel<>(model.getObject().getConf(), \"unauthorizedRedirectUrl\"),\n-                    false);\n-            unauthorizedRedirectUrl.getField().add(new UrlValidator(new String[] { \"http\", \"https\" }));\n-            fields.add(unauthorizedRedirectUrl);\n-        } else if (model.getObject().getConf() instanceof HttpRequestAccessPolicyConf) {\n-            fields.add(new AjaxTextFieldPanel(\"field\", \"ipAddress\",\n-                    new PropertyModel<>(model.getObject().getConf(), \"ipAddress\"), false));\n-            fields.add(new AjaxTextFieldPanel(\"field\", \"userAgent\",\n-                    new PropertyModel<>(model.getObject().getConf(), \"userAgent\"), false));\n-        } else if (model.getObject().getConf() instanceof RemoteEndpointAccessPolicyConf) {\n-            AjaxTextFieldPanel endpointUrl = new AjaxTextFieldPanel(\n-                    \"field\",\n-                    \"endpointUrl\",\n-                    new PropertyModel<>(model.getObject().getConf(), \"endpointUrl\"),\n-                    false);\n-            endpointUrl.getField().add(new UrlValidator(new String[] { \"http\", \"https\" }));\n-            fields.add(endpointUrl.setRequired(true));\n-\n-            FieldPanel panel = new AjaxTextFieldPanel(\n-                    \"panel\",\n-                    \"acceptableResponseCodes\",\n-                    new PropertyModel<>(model.getObject().getConf(), \"acceptableResponseCodes\"));\n-            fields.add(new MultiFieldPanel.Builder<>(\n-                    new PropertyModel<>(model.getObject().getConf(), \"acceptableResponseCodes\")).build(\n-                    \"field\",\n-                    \"acceptableResponseCodes\",\n-                    panel));\n-        } else if (model.getObject().getConf() instanceof TimeBasedAccessPolicyConf) {\n-            fields.add(new AjaxDateTimeFieldPanel(\n-                    \"field\",\n-                    \"start\",\n-                    new DateOps.WrappedDateModel(new PropertyModel<>(model.getObject().getConf(), \"start\")),\n-                    DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT));\n-            fields.add(new AjaxDateTimeFieldPanel(\n-                    \"field\",\n-                    \"end\",\n-                    new DateOps.WrappedDateModel(new PropertyModel<>(model.getObject().getConf(), \"end\")),\n-                    DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT));\n-            fields.add(new AjaxTextFieldPanel(\"field\", \"zoneId\",\n-                    new PropertyModel<>(model.getObject().getConf(), \"zoneId\"), false));\n-        }\n-\n-        add(new ListView<>(\"fields\", fields) {\n-\n-            private static final long serialVersionUID = -9180479401817023838L;\n-\n-            @Override\n-            protected void populateItem(final ListItem<Component> item) {\n-                item.add(item.getModelObject());\n-            }\n-        });\n+        add(new BeanPanel<>(\"bean\", new PropertyModel<>(model, \"conf\"), pageRef).setRenderBodyOnly(true));\n     }\n \n     @Override"},{"sha":"793de99af09fea4d68ed509cbc275cabd557a2d5","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/policies/AccessPolicyModalPanel.html","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyModalPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyModalPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyModalPanel.html?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -18,10 +18,6 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:extend>\n-    <div wicket:id=\"fields\">\n-      <div class=\"form-group\">\n-        <span wicket:id=\"field\"/>\n-      </div>\n-    </div>\n+    <span wicket:id=\"bean\"/>\n   </wicket:extend>\n </html>"},{"sha":"644ce96cdbe8b334bf4eae0b9976bf25eadb746f","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/Constants.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FConstants.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -108,7 +108,7 @@ public final class Constants {\n     public static final String UNDEFINED_ICON = \"fas fa-question-circle\";\n \n     public static final String NOT_FOUND_ICON = \"fas fa-minus-circle\";\n-    \n+\n     public static final String WARNING_ICON = \"fas fa-exclamation-circle\";\n \n     public static final int MAX_GROUP_LIST_SIZE = 30;\n@@ -122,7 +122,7 @@ public final class Constants {\n     public static final String NOTIFICATION_LEVEL_PARAM = \"notificationLevel\";\n \n     public static final String ENDUSER_ANYLAYOUT = \"enduser.anylayout\";\n-    \n+\n     public static final String CONTENT_ID = \"content\";\n \n     public static Component getJEXLPopover(final Component caller, final TooltipConfig.Placement placement) {"},{"sha":"40eee868fd864ea3247832e1e68eb823e327abb4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -157,7 +157,7 @@ protected String createRelAttribute() {\n                 item.replace(fragment);\n             }\n \n-            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+            @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n             @Override\n             protected void populateItem(final ListItem<String> item) {\n                 item.add(new Fragment(\"required\", \"emptyFragment\", this));\n@@ -263,6 +263,8 @@ protected void populateItem(final ListItem<String> item) {\n                 } else if (Map.class.equals(field.getType())) {\n                     panel = new AjaxGridFieldPanel(\n                             \"value\", fieldName, new PropertyModel<>(bean, fieldName)).hideLabel();\n+                    Optional.ofNullable(field.getAnnotation(io.swagger.v3.oas.annotations.media.Schema.class))\n+                            .ifPresent(annot -> setDescription(item, annot.description()));\n                 } else {\n                     Triple<FieldPanel, Boolean, Optional<String>> single =\n                             buildSinglePanel(bean.getObject(), field.getType(), field.getName(),\n@@ -279,7 +281,7 @@ protected void populateItem(final ListItem<String> item) {\n         }.setReuseItems(true).setOutputMarkupId(true));\n     }\n \n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     private Triple<FieldPanel, Boolean, Optional<String>> buildSinglePanel(\n             final Serializable bean, final Class<?> type, final String fieldName,\n             final io.swagger.v3.oas.annotations.media.Schema schema, final String id) {"},{"sha":"c1ad2891062bb442dec6a9b9edbbee91743cf47f","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccessPolicyConf.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -18,12 +18,10 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.syncope.common.lib.Attr;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class DefaultAccessPolicyConf implements AccessPolicyConf {\n \n@@ -41,9 +39,13 @@ public class DefaultAccessPolicyConf implements AccessPolicyConf {\n \n     private URI unauthorizedRedirectUrl;\n \n-    private final List<Attr> requiredAttrs = new ArrayList<>();\n+    @Schema(description =\n+            \"Insert comma-separated values in the right input field if you like to specify more than one value\")\n+    private final Map<String, String> requiredAttrs = new HashMap<>();\n \n-    private final List<Attr> rejectedAttrs = new ArrayList<>();\n+    @Schema(description =\n+            \"Insert comma-separated values in the right input field if you like to specify more than one value\")\n+    private final Map<String, String> rejectedAttrs = new HashMap<>();\n \n     public int getOrder() {\n         return order;\n@@ -93,15 +95,11 @@ public void setUnauthorizedRedirectUrl(final URI unauthorizedRedirectUrl) {\n         this.unauthorizedRedirectUrl = unauthorizedRedirectUrl;\n     }\n \n-    @JacksonXmlElementWrapper(localName = \"requiredAttrs\")\n-    @JacksonXmlProperty(localName = \"requiredAttr\")\n-    public List<Attr> getRequiredAttrs() {\n+    public Map<String, String> getRequiredAttrs() {\n         return requiredAttrs;\n     }\n \n-    @JacksonXmlElementWrapper(localName = \"rejectedAttrs\")\n-    @JacksonXmlProperty(localName = \"rejectedAttr\")\n-    public List<Attr> getRejectedAttrs() {\n+    public Map<String, String> getRejectedAttrs() {\n         return rejectedAttrs;\n     }\n }"},{"sha":"60627a628a1c0d74106153f0951df43a06d89ce3","filename":"common/am/lib/src/test/java/org/apache/syncope/common/lib/SerializationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -41,8 +41,8 @@ public void accessPolicyConf() throws IOException {\n         conf.setOrder(11);\n         conf.setEnabled(true);\n         conf.setUnauthorizedRedirectUrl(URI.create(\"https://syncope.apache.org\"));\n-        conf.getRequiredAttrs().add(new Attr.Builder(\"cn\").values(\"admin\", \"Admin\", \"TheAdmin\").build());\n-        conf.getRejectedAttrs().add(new Attr.Builder(\"uid\").values(\"plain\").build());\n+        conf.getRequiredAttrs().put(\"cn\", \"admin,Admin,TheAdmin\");\n+        conf.getRejectedAttrs().put(\"uid\", \"plain\");\n         policy.setConf(conf);\n \n         StringWriter writer = new StringWriter();"},{"sha":"dc601a64f62ed205bd61f1ab1ce3473c59926b32","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AbstractClientAppTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.inner;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n@@ -57,7 +56,7 @@ protected AccessPolicy buildAndSaveAccessPolicy() {\n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n         conf.setEnabled(true);\n         conf.setSsoEnabled(false);\n-        conf.getRequiredAttrs().add(new Attr.Builder(\"attribute1\").values(\"value1\", \"value2\").build());\n+        conf.getRequiredAttrs().put(\"attribute1\", \"value1,value2\");\n         accessPolicy.setConf(conf);\n \n         return policyDAO.save(accessPolicy);"},{"sha":"39e3b0355e662bb27212adfc6ee35cbcb45ab652","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -26,7 +26,6 @@\n \n import java.util.List;\n import java.util.UUID;\n-import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n@@ -272,7 +271,7 @@ public void createAccess() {\n         accessPolicy.setName(\"AttrReleasePolicyAllowEverything\");\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n-        conf.getRequiredAttrs().add(new Attr.Builder(\"cn\").value(\"syncope\").build());\n+        conf.getRequiredAttrs().put(\"cn\", \"syncope\");\n         accessPolicy.setConf(conf);\n \n         accessPolicy = policyDAO.save(accessPolicy);"},{"sha":"af0ffbf340774fcd594658881c5e8f9f8d20b046","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -957,7 +957,7 @@ protected static AccessPolicyTO buildAccessPolicyTO() {\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n         conf.setEnabled(true);\n-        conf.getRequiredAttrs().add(new Attr.Builder(\"cn\").values(\"admin\", \"Admin\", \"TheAdmin\").build());\n+        conf.getRequiredAttrs().put(\"cn\", \"admin,Admin,TheAdmin\");\n         policy.setConf(conf);\n \n         return policy;"},{"sha":"dfc5ea10833a1727eef0b226d39c16832a208550","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -32,7 +32,6 @@\n import java.util.Set;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n@@ -273,9 +272,9 @@ public void updateAccessPolicy() {\n         assertNotNull(newAccessPolicyTO);\n \n         DefaultAccessPolicyConf accessPolicyConf = (DefaultAccessPolicyConf) newAccessPolicyTO.getConf();\n-        accessPolicyConf.getRequiredAttrs().add(new Attr.Builder(\"ou\").value(\"test\").build());\n-        accessPolicyConf.getRequiredAttrs().removeIf(attr -> \"cn\".equals(attr.getSchema()));\n-        accessPolicyConf.getRequiredAttrs().add(new Attr.Builder(\"cn\").values(\"admin\", \"Admin\").build());\n+        accessPolicyConf.getRequiredAttrs().put(\"ou\", \"test\");\n+        accessPolicyConf.getRequiredAttrs().remove(\"cn\");\n+        accessPolicyConf.getRequiredAttrs().put(\"cn\", \"admin,Admin\");\n \n         // update new authentication policy\n         POLICY_SERVICE.update(PolicyType.ACCESS, newAccessPolicyTO);\n@@ -284,8 +283,8 @@ public void updateAccessPolicy() {\n \n         accessPolicyConf = (DefaultAccessPolicyConf) newAccessPolicyTO.getConf();\n         assertEquals(2, accessPolicyConf.getRequiredAttrs().size());\n-        assertTrue(accessPolicyConf.getRequiredAttrs().stream().anyMatch(attr -> \"cn\".equals(attr.getSchema())));\n-        assertTrue(accessPolicyConf.getRequiredAttrs().stream().anyMatch(attr -> \"ou\".equals(attr.getSchema())));\n+        assertTrue(accessPolicyConf.getRequiredAttrs().containsKey(\"cn\"));\n+        assertTrue(accessPolicyConf.getRequiredAttrs().containsKey(\"ou\"));\n     }\n \n     @Test"},{"sha":"681cfbd8f6cc777f756fbf4a25abb6b5ca00ac03","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -29,7 +29,6 @@\n import jakarta.ws.rs.core.Response;\n import java.util.List;\n import java.util.UUID;\n-import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n@@ -250,7 +249,7 @@ public void deletingAuthPolicy() {\n     public void deletingAccessPolicy() {\n         // 1. create access policy\n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n-        conf.getRequiredAttrs().add(new Attr.Builder(\"cn\").values(\"admin\", \"Admin\", \"TheAdmin\").build());\n+        conf.getRequiredAttrs().put(\"cn\", \"admin,Admin,TheAdmin\");\n \n         AccessPolicyTO policy = new AccessPolicyTO();\n         policy.setName(\"Test Access policy\");"},{"sha":"aef2e4ee59c61b22ac255e2e7a4b49b88d97496f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAccessMapper.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -18,7 +18,9 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n-import java.util.HashSet;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy;\n@@ -43,10 +45,12 @@ public RegisteredServiceAccessStrategy build(final AccessPolicyTO policy) {\n         accessStrategy.setUnauthorizedRedirectUrl(conf.getUnauthorizedRedirectUrl());\n \n         conf.getRequiredAttrs().forEach(\n-                attr -> accessStrategy.getRequiredAttributes().put(attr.getSchema(), new HashSet<>(attr.getValues())));\n+                (k, v) -> accessStrategy.getRequiredAttributes().put(k,\n+                        Stream.of(StringUtils.split(v, \",\")).map(String::trim).collect(Collectors.toSet())));\n \n         conf.getRejectedAttrs().forEach(\n-                attr -> accessStrategy.getRejectedAttributes().put(attr.getSchema(), new HashSet<>(attr.getValues())));\n+                (k, v) -> accessStrategy.getRejectedAttributes().put(k,\n+                        Stream.of(StringUtils.split(v, \",\")).map(String::trim).collect(Collectors.toSet())));\n \n         return accessStrategy;\n     }"},{"sha":"9e94aa2a10fe3211b010564abb574f7a9c1740ad","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/WAServiceRegistryTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FWAServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a9c8c0ef8efa1f4fe28625afca3600d95a9557/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FWAServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FWAServiceRegistryTest.java?ref=34a9c8c0ef8efa1f4fe28625afca3600d95a9557","patch":"@@ -27,7 +27,6 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n@@ -114,7 +113,7 @@ private static void addPolicies(\n         AccessPolicyTO accessPolicy = new AccessPolicyTO();\n         DefaultAccessPolicyConf accessPolicyConf = new DefaultAccessPolicyConf();\n         accessPolicyConf.setEnabled(true);\n-        accessPolicyConf.getRequiredAttrs().add(new Attr.Builder(\"cn\").values(\"admin\", \"Admin\", \"TheAdmin\").build());\n+        accessPolicyConf.getRequiredAttrs().put(\"cn\", \"admin,Admin,TheAdmin\");\n         accessPolicy.setConf(accessPolicyConf);\n         waClientApp.setAccessPolicy(accessPolicy);\n "}]}