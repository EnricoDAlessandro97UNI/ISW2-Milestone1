{"sha":"9abd35a29dc8616e6268e6c525e421f02d026f66","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlhYmQzNWEyOWRjODYxNmU2MjY4ZTZjNTI1ZTQyMWYwMmQwMjZmNjY=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-08-18T16:48:51Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-08-18T16:48:51Z"},"message":"[SYNCOPE-156] websocket behavior improvement","tree":{"sha":"17fc208948002a14a5f92d1d96611694d7d2bc02","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/17fc208948002a14a5f92d1d96611694d7d2bc02"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9abd35a29dc8616e6268e6c525e421f02d026f66","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9abd35a29dc8616e6268e6c525e421f02d026f66","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9abd35a29dc8616e6268e6c525e421f02d026f66","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9abd35a29dc8616e6268e6c525e421f02d026f66/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"310b34afef103156a49e7a94b862f9f780522f08","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/310b34afef103156a49e7a94b862f9f780522f08","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/310b34afef103156a49e7a94b862f9f780522f08"}],"stats":{"total":391,"additions":213,"deletions":178},"files":[{"sha":"81ef360ccd46ac1a391d5baa9a9c410f3dd8dacc","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":3,"deletions":177,"changes":180,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9abd35a29dc8616e6268e6c525e421f02d026f66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9abd35a29dc8616e6268e6c525e421f02d026f66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=9abd35a29dc8616e6268e6c525e421f02d026f66","patch":"@@ -18,25 +18,13 @@\n  */\n package org.apache.syncope.client.console.topology;\n \n-import static org.apache.syncope.client.console.topology.TopologyNode.Status.FAILURE;\n-import static org.apache.syncope.client.console.topology.TopologyNode.Status.REACHABLE;\n-import static org.apache.syncope.client.console.topology.TopologyNode.Status.UNKNOWN;\n-import static org.apache.syncope.client.console.topology.TopologyNode.Status.UNREACHABLE;\n-\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import java.io.IOException;\n import java.io.Serializable;\n import java.net.URI;\n import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n@@ -49,10 +37,7 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n-import org.apache.wicket.Application;\n import org.apache.wicket.Component;\n-import org.apache.wicket.Session;\n-import org.apache.wicket.ThreadContext;\n import org.apache.wicket.ajax.AbstractAjaxTimerBehavior;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.IAjaxIndicatorAware;\n@@ -65,9 +50,6 @@\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.model.LoadableDetachableModel;\n-import org.apache.wicket.protocol.ws.api.WebSocketBehavior;\n-import org.apache.wicket.protocol.ws.api.WebSocketRequestHandler;\n-import org.apache.wicket.protocol.ws.api.message.TextMessage;\n import org.apache.wicket.util.time.Duration;\n \n public class Topology extends BasePage {\n@@ -149,7 +131,7 @@ protected Pair<List<URI>, List<URI>> load() {\n                 }\n             };\n \n-    private enum SupportedOperation {\n+    protected enum SupportedOperation {\n \n         CHECK_RESOURCE,\n         CHECK_CONNECTOR,\n@@ -166,163 +148,7 @@ public Topology() {\n         modal.setInitialWidth(RESOURCE_MODAL_WIN_WIDTH);\n         modal.setCookieName(\"resource-modal\");\n \n-        add(new WebSocketBehavior() {\n-\n-            private static final long serialVersionUID = 1L;\n-\n-            final Map<String, String> resources = new HashMap<String, String>();\n-\n-            final Set<String> runningResCheck = new HashSet<>();\n-\n-            final Map<Long, String> connectors = new HashMap<Long, String>();\n-\n-            final Set<Long> runningConnCheck = new HashSet<>();\n-\n-            @Override\n-            protected void onMessage(final WebSocketRequestHandler handler, final TextMessage message) {\n-                try {\n-                    final ObjectMapper mapper = new ObjectMapper();\n-                    final JsonNode obj = mapper.readTree(message.getText());\n-\n-                    final ExecutorService executorService = Executors.newFixedThreadPool(1);\n-\n-                    switch (SupportedOperation.valueOf(obj.get(\"kind\").asText())) {\n-                        case CHECK_CONNECTOR:\n-                            final Long ckey = obj.get(\"target\").asLong();\n-\n-                            if (connectors.containsKey(ckey)) {\n-                                handler.push(connectors.get(ckey));\n-                            } else {\n-                                handler.push(String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", UNKNOWN, ckey));\n-                            }\n-\n-                            synchronized (runningConnCheck) {\n-                                if (runningConnCheck.contains(ckey)) {\n-                                    LOG.debug(\"Running connection check for connector {}\", ckey);\n-                                } else {\n-                                    runningConnCheck.add(ckey);\n-                                }\n-                            }\n-\n-                            executorService.execute(new ConnCheck(ckey));\n-\n-                            break;\n-                        case CHECK_RESOURCE:\n-                            final String rkey = obj.get(\"target\").asText();\n-\n-                            if (resources.containsKey(rkey)) {\n-                                handler.push(resources.get(rkey));\n-                            } else {\n-                                handler.push(String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", UNKNOWN, rkey));\n-                            }\n-\n-                            synchronized (runningResCheck) {\n-                                if (runningResCheck.contains(rkey)) {\n-                                    LOG.debug(\"Running connection check for resource {}\", rkey);\n-                                } else {\n-                                    runningResCheck.add(rkey);\n-                                }\n-                            }\n-\n-                            executorService.execute(new ResCheck(rkey));\n-\n-                            break;\n-                        case ADD_ENDPOINT:\n-                            handler.appendJavaScript(String.format(\"addEndpoint('%s', '%s', '%s');\",\n-                                    obj.get(\"source\").asText(),\n-                                    obj.get(\"target\").asText(),\n-                                    obj.get(\"scope\").asText()));\n-                            break;\n-                        default:\n-                    }\n-\n-                    executorService.shutdown();\n-\n-                } catch (IOException e) {\n-                    LOG.error(\"Eror managing websocket message\", e);\n-                }\n-            }\n-\n-            class ConnCheck implements Runnable {\n-\n-                final Long key;\n-\n-                private final Application application;\n-\n-                private final Session session;\n-\n-                public ConnCheck(final Long key) {\n-                    this.key = key;\n-                    this.application = Application.get();\n-                    this.session = Session.exists() ? Session.get() : null;\n-                }\n-\n-                @Override\n-                public void run() {\n-                    try {\n-                        ThreadContext.setApplication(application);\n-                        ThreadContext.setSession(session);\n-\n-                        String res;\n-                        try {\n-                            final ConnInstanceTO connector = connectorRestClient.read(key);\n-                            res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                                    connectorRestClient.check(connector) ? REACHABLE : UNREACHABLE, key);\n-                        } catch (Exception e) {\n-                            LOG.warn(\"Error checking connection for {}\", key, e);\n-                            res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", FAILURE, key);\n-                        }\n-\n-                        synchronized (runningConnCheck) {\n-                            connectors.put(key, res);\n-                            runningConnCheck.remove(key);\n-                        }\n-                    } finally {\n-                        ThreadContext.detach();\n-                    }\n-                }\n-            }\n-\n-            class ResCheck implements Runnable {\n-\n-                final String key;\n-\n-                private final Application application;\n-\n-                private final Session session;\n-\n-                public ResCheck(final String key) {\n-                    this.key = key;\n-                    this.application = Application.get();\n-                    this.session = Session.exists() ? Session.get() : null;\n-                }\n-\n-                @Override\n-                public void run() {\n-                    try {\n-                        ThreadContext.setApplication(application);\n-                        ThreadContext.setSession(session);\n-\n-                        String res;\n-                        try {\n-                            final ResourceTO resource = resourceRestClient.read(key);\n-                            res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                                    connectorRestClient.check(resource) ? REACHABLE : UNREACHABLE, key);\n-                        } catch (Exception e) {\n-                            LOG.warn(\"Error checking connection for {}\", key, e);\n-                            res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", FAILURE, key);\n-                        }\n-\n-                        synchronized (runningResCheck) {\n-                            resources.put(key, res);\n-                            runningResCheck.remove(key);\n-                        }\n-                    } finally {\n-                        ThreadContext.detach();\n-                    }\n-                }\n-            }\n-        });\n+        add(new WebSocketBehavior());\n \n         // -----------------------------------------\n         // Add Zoom panel\n@@ -713,7 +539,7 @@ public void onEvent(final IEvent<?> event) {\n                     resourceCreateEvent.getDisplayName(),\n                     resourceCreateEvent.getKind());\n \n-            ((List<TopologyNode>) newlyCreated.getModelObject()).add(node);\n+            newlyCreated.getModelObject().add(node);\n             resourceCreateEvent.getTarget().add(newlyCreatedContainer);\n \n             resourceCreateEvent.getTarget().appendJavaScript(String.format("},{"sha":"7cd0ff5bd82a30dc6716be692cb2162f91309cdc","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/WebSocketBehavior.java","status":"added","additions":209,"deletions":0,"changes":209,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9abd35a29dc8616e6268e6c525e421f02d026f66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FWebSocketBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9abd35a29dc8616e6268e6c525e421f02d026f66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FWebSocketBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FWebSocketBehavior.java?ref=9abd35a29dc8616e6268e6c525e421f02d026f66","patch":"@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.topology;\n+\n+import static org.apache.syncope.client.console.topology.TopologyNode.Status.FAILURE;\n+import static org.apache.syncope.client.console.topology.TopologyNode.Status.REACHABLE;\n+import static org.apache.syncope.client.console.topology.TopologyNode.Status.UNKNOWN;\n+import static org.apache.syncope.client.console.topology.TopologyNode.Status.UNREACHABLE;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import org.apache.syncope.client.console.rest.ConnectorRestClient;\n+import org.apache.syncope.client.console.rest.ResourceRestClient;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.wicket.Application;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.ThreadContext;\n+import org.apache.wicket.protocol.ws.api.WebSocketRequestHandler;\n+import org.apache.wicket.protocol.ws.api.message.TextMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class WebSocketBehavior extends org.apache.wicket.protocol.ws.api.WebSocketBehavior {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(WebSocketBehavior.class);\n+\n+    private final Map<String, String> resources = new HashMap<String, String>();\n+\n+    private final Set<String> runningResCheck = new HashSet<>();\n+\n+    private final Map<Long, String> connectors = new HashMap<Long, String>();\n+\n+    private final Set<Long> runningConnCheck = new HashSet<>();\n+\n+    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n+\n+    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n+\n+    @Override\n+    protected void onMessage(final WebSocketRequestHandler handler, final TextMessage message) {\n+        try {\n+            final ObjectMapper mapper = new ObjectMapper();\n+            final JsonNode obj = mapper.readTree(message.getText());\n+\n+            final ExecutorService executorService = Executors.newFixedThreadPool(1);\n+\n+            switch (Topology.SupportedOperation.valueOf(obj.get(\"kind\").asText())) {\n+                case CHECK_CONNECTOR:\n+                    final Long ckey = obj.get(\"target\").asLong();\n+\n+                    if (connectors.containsKey(ckey)) {\n+                        handler.push(connectors.get(ckey));\n+                    } else {\n+                        handler.push(String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", UNKNOWN, ckey));\n+                    }\n+\n+                    synchronized (runningConnCheck) {\n+                        if (runningConnCheck.contains(ckey)) {\n+                            LOG.debug(\"Running connection check for connector {}\", ckey);\n+                        } else {\n+                            runningConnCheck.add(ckey);\n+                        }\n+                    }\n+\n+                    executorService.execute(new ConnCheck(ckey));\n+\n+                    break;\n+                case CHECK_RESOURCE:\n+                    final String rkey = obj.get(\"target\").asText();\n+\n+                    if (resources.containsKey(rkey)) {\n+                        handler.push(resources.get(rkey));\n+                    } else {\n+                        handler.push(String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", UNKNOWN, rkey));\n+                    }\n+\n+                    synchronized (runningResCheck) {\n+                        if (runningResCheck.contains(rkey)) {\n+                            LOG.debug(\"Running connection check for resource {}\", rkey);\n+                        } else {\n+                            runningResCheck.add(rkey);\n+                        }\n+                    }\n+\n+                    executorService.execute(new ResCheck(rkey));\n+\n+                    break;\n+                case ADD_ENDPOINT:\n+                    handler.appendJavaScript(String.format(\"addEndpoint('%s', '%s', '%s');\",\n+                            obj.get(\"source\").asText(),\n+                            obj.get(\"target\").asText(),\n+                            obj.get(\"scope\").asText()));\n+                    break;\n+                default:\n+            }\n+\n+            executorService.shutdown();\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Eror managing websocket message\", e);\n+        }\n+    }\n+\n+    class ConnCheck implements Runnable {\n+\n+        private final Long key;\n+\n+        private final Application application;\n+\n+        private final Session session;\n+\n+        public ConnCheck(final Long key) {\n+            this.key = key;\n+            this.application = Application.get();\n+            this.session = Session.exists() ? Session.get() : null;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                ThreadContext.setApplication(application);\n+                ThreadContext.setSession(session);\n+\n+                String res;\n+                try {\n+                    final ConnInstanceTO connector = connectorRestClient.read(key);\n+                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n+                            connectorRestClient.check(connector) ? REACHABLE : UNREACHABLE, key);\n+                } catch (Exception e) {\n+                    LOG.warn(\"Error checking connection for {}\", key, e);\n+                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", FAILURE, key);\n+                }\n+\n+                synchronized (runningConnCheck) {\n+                    connectors.put(key, res);\n+                    runningConnCheck.remove(key);\n+                }\n+            } finally {\n+                ThreadContext.detach();\n+            }\n+        }\n+    }\n+\n+    class ResCheck implements Runnable {\n+\n+        private final String key;\n+\n+        private final Application application;\n+\n+        private final Session session;\n+\n+        public ResCheck(final String key) {\n+            this.key = key;\n+            this.application = Application.get();\n+            this.session = Session.exists() ? Session.get() : null;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                ThreadContext.setApplication(application);\n+                ThreadContext.setSession(session);\n+\n+                String res;\n+                try {\n+                    final ResourceTO resource = resourceRestClient.read(key);\n+                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n+                            connectorRestClient.check(resource) ? REACHABLE : UNREACHABLE, key);\n+                } catch (Exception e) {\n+                    LOG.warn(\"Error checking connection for {}\", key, e);\n+                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", FAILURE, key);\n+                }\n+\n+                synchronized (runningResCheck) {\n+                    resources.put(key, res);\n+                    runningResCheck.remove(key);\n+                }\n+            } finally {\n+                ThreadContext.detach();\n+            }\n+        }\n+    }\n+}"},{"sha":"30a7bbcab3553e13a3f725966cb12dcbdc72855f","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9abd35a29dc8616e6268e6c525e421f02d026f66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9abd35a29dc8616e6268e6c525e421f02d026f66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java?ref=9abd35a29dc8616e6268e6c525e421f02d026f66","patch":"@@ -79,7 +79,7 @@ public String transform(final AnyTypeTO anyTypeTO) {\n                     }, res), new Predicate<String>() {\n \n                         @Override\n-                        public boolean evaluate(String key) {\n+                        public boolean evaluate(final String key) {\n                             return !currentlyAdded.contains(key);\n                         }\n                     });"}]}