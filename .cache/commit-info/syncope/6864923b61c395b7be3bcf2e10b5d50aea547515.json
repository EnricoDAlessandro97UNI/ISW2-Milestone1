{"sha":"6864923b61c395b7be3bcf2e10b5d50aea547515","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY4NjQ5MjNiNjFjMzk1YjdiZTNiY2YyZTEwYjVkNTBhZWE1NDc1MTU=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2019-09-04T08:48:28Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2019-09-09T11:27:30Z"},"message":"SYNCOPE-1332: Java 11 language features; use factory calls for immutable collections","tree":{"sha":"9448ed9d72ab671c76991f4620010a2333b9ab30","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9448ed9d72ab671c76991f4620010a2333b9ab30"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6864923b61c395b7be3bcf2e10b5d50aea547515","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6864923b61c395b7be3bcf2e10b5d50aea547515","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6864923b61c395b7be3bcf2e10b5d50aea547515","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6864923b61c395b7be3bcf2e10b5d50aea547515/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"61385632208864e645e7a33d2db962c2fd8c99fd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/61385632208864e645e7a33d2db962c2fd8c99fd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/61385632208864e645e7a33d2db962c2fd8c99fd"}],"stats":{"total":1803,"additions":801,"deletions":1002},"files":[{"sha":"7ea715a856c6c6b1f1fe890da40e419845557a0d","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/GatewayRouteDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -166,7 +166,7 @@ public void onClick(final AjaxRequestTarget target, final GatewayRouteTO ignore)\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"e4c5a7438161443e1c956b88335cee09526b9787","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/GatewayRouteFilterPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteFilterPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteFilterPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteFilterPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverConfig;\n import de.agilecoders.wicket.core.markup.html.bootstrap.components.TooltipConfig;\n import java.io.Serializable;\n-import java.util.Arrays;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -77,7 +76,7 @@ protected void populateItem(final ListItem<GatewayRouteFilter> item) {\n \n                 AjaxDropDownChoicePanel<FilterFactory> factory =\n                         new AjaxDropDownChoicePanel<>(\"factory\", \"factory\", new PropertyModel<>(filter, \"factory\"));\n-                factory.setChoices(Arrays.asList(FilterFactory.values()));\n+                factory.setChoices(List.of(FilterFactory.values()));\n                 item.add(factory.hideLabel());\n \n                 AjaxTextFieldPanel args ="},{"sha":"2dc4b585b64e489447dc1d9242a3b0ce5cda94aa","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/GatewayRoutePredicatePanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRoutePredicatePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRoutePredicatePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRoutePredicatePanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverConfig;\n import de.agilecoders.wicket.core.markup.html.bootstrap.components.TooltipConfig;\n import java.io.Serializable;\n-import java.util.Arrays;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -83,7 +82,7 @@ protected void populateItem(final ListItem<GatewayRoutePredicate> item) {\n \n                 AjaxDropDownChoicePanel<PredicateFactory> factory =\n                         new AjaxDropDownChoicePanel<>(\"factory\", \"factory\", new PropertyModel<>(predicate, \"factory\"));\n-                factory.setChoices(Arrays.asList(PredicateFactory.values()));\n+                factory.setChoices(List.of(PredicateFactory.values()));\n                 item.add(factory.hideLabel());\n \n                 AjaxTextFieldPanel args =\n@@ -92,7 +91,7 @@ protected void populateItem(final ListItem<GatewayRoutePredicate> item) {\n \n                 AjaxDropDownChoicePanel<PredicateCond> cond =\n                         new AjaxDropDownChoicePanel<>(\"cond\", \"cond\", new PropertyModel<>(predicate, \"cond\"));\n-                cond.setChoices(Arrays.asList(PredicateCond.values()));\n+                cond.setChoices(List.of(PredicateCond.values()));\n                 item.add(cond.hideLabel());\n \n                 ActionsPanel<Serializable> actions = new ActionsPanel<>(\"actions\", null);"},{"sha":"c944944bc1a7321a2927498867ed449f592d3df3","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/GatewayRouteWizardBuilder.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteWizardBuilder.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,8 @@\n \n import java.io.Serializable;\n import java.net.URI;\n-import java.util.Arrays;\n+import java.util.List;\n+\n import org.apache.syncope.client.console.rest.GatewayRouteRestClient;\n import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n@@ -104,7 +105,7 @@ public void setObject(final String object) {\n \n             add(new AjaxDropDownChoicePanel<>(\n                     \"status\", \"status\", new PropertyModel<>(route, \"status\")).\n-                    setChoices(Arrays.asList((Serializable[]) GatewayRouteStatus.values())));\n+                    setChoices(List.of((Serializable[]) GatewayRouteStatus.values())));\n         }\n     }\n "},{"sha":"a7ab2c45dfdc7f57974b6a16c766ffe21d764b63","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMImplementationInfoProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -46,7 +46,7 @@ public ViewMode getViewMode(final ImplementationTO implementation) {\n \n     @Override\n     public List<String> getClasses(final ImplementationTO implementation, final ViewMode viewMode) {\n-        List<String> classes = Collections.emptyList();\n+        List<String> classes = List.of();\n         if (viewMode == ViewMode.JSON_BODY) {\n             switch (implementation.getType()) {\n                 case IdMImplementationType.PULL_CORRELATION_RULE:"},{"sha":"9e1bd2cfa107810cc11f81f221a9159665695019","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnInstanceHistoryConfDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -166,7 +166,7 @@ public void onClick(final AjaxRequestTarget target, final ConnInstanceHistoryCon\n \n     @Override\n     protected Collection<ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"6d6e3a92d7ec5cb5aa8fd485293f3ba95dea52c6","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ProvisionAuxClassesPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.panels;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n@@ -70,8 +69,8 @@ protected void onBeforeRender() {\n         IModel<List<String>> model;\n         List<String> choices;\n         if (provision == null) {\n-            model = new ListModel<>(Collections.<String>emptyList());\n-            choices = Collections.emptyList();\n+            model = new ListModel<>(List.of());\n+            choices = List.of();\n         } else {\n             model = new PropertyModel<>(provision, \"auxClasses\");\n             choices = new ArrayList<>();"},{"sha":"0d1f06b8f54d4b372b62808c95e0181f8b24df5a","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/RemediationDirectoryPanel.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,9 +21,7 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n@@ -214,7 +212,7 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                                     previousUserTO,\n                                     newUserTO,\n                                     new AnyTypeRestClient().read(remediationTO.getAnyType()).getClasses(),\n-                                    FormLayoutInfoUtils.fetch(Arrays.asList(remediationTO.getAnyType())).getLeft(),\n+                                    FormLayoutInfoUtils.fetch(List.of(remediationTO.getAnyType())).getLeft(),\n                                     pageRef\n                             ).build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT));\n                             send(RemediationDirectoryPanel.this, Broadcast.EXACT, userEvent);\n@@ -241,7 +239,7 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                                     previousGroupTO,\n                                     newGroupTO,\n                                     new AnyTypeRestClient().read(remediationTO.getAnyType()).getClasses(),\n-                                    FormLayoutInfoUtils.fetch(Arrays.asList(remediationTO.getAnyType())).getMiddle(),\n+                                    FormLayoutInfoUtils.fetch(List.of(remediationTO.getAnyType())).getMiddle(),\n                                     pageRef\n                             ).build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT));\n                             send(RemediationDirectoryPanel.this, Broadcast.EXACT, groupEvent);\n@@ -268,7 +266,7 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                                     previousAnyObjectTO,\n                                     newAnyObjectTO,\n                                     new AnyTypeRestClient().read(remediationTO.getAnyType()).getClasses(),\n-                                    FormLayoutInfoUtils.fetch(Arrays.asList(remediationTO.getAnyType())).\n+                                    FormLayoutInfoUtils.fetch(List.of(remediationTO.getAnyType())).\n                                             getRight().values().iterator().next(),\n                                     pageRef\n                             ).build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT));\n@@ -312,7 +310,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     public static class RemediationProvider extends DirectoryDataProvider<RemediationTO> {"},{"sha":"612ebc1f9652a6760552829980d6cf5a9fef7096","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -167,7 +167,7 @@ public void onClick(final AjaxRequestTarget target, final ResourceHistoryConfTO\n \n     @Override\n     protected Collection<ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"1c91f5376218f74eddcc14023d2254a3f8491981","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/VirSchemaDetails.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.panels;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -167,6 +166,6 @@ private List<String> getExtAttrNames() {\n \n         return connIdObjectClass.isPresent()\n                 ? connIdObjectClass.get().getAttributes()\n-                : Collections.<String>emptyList();\n+                : List.of();\n     }\n }"},{"sha":"d8f9065ee669f6c8c57d430ef24611dc53effcd4","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -249,7 +249,7 @@ private List<String> schemas() {\n                             ? DefaultPullCorrelationRuleConf.class.cast(conf).getSchemas()\n                             : conf instanceof DefaultPushCorrelationRuleConf\n                                     ? DefaultPushCorrelationRuleConf.class.cast(conf).getSchemas()\n-                                    : Collections.emptyList();\n+                                    : List.of();\n                 }\n \n                 @Override"},{"sha":"3d0e2e108e269bbc107cdd9fdd5aba1e985d60b3","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorHistoryRestClient.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorHistoryRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorHistoryRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorHistoryRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n import org.apache.syncope.common.rest.api.service.ConnectorHistoryService;\n@@ -31,7 +30,7 @@ public class ConnectorHistoryRestClient extends BaseRestClient {\n     private static final long serialVersionUID = -1917949374689773018L;\n \n     public List<ConnInstanceHistoryConfTO> list(final String key) {\n-        List<ConnInstanceHistoryConfTO> connHistoryConfs = Collections.<ConnInstanceHistoryConfTO>emptyList();\n+        List<ConnInstanceHistoryConfTO> connHistoryConfs = List.of();\n         try {\n             connHistoryConfs = getService(ConnectorHistoryService.class).list(key);\n         } catch (Exception e) {"},{"sha":"1975fd8fcc1c80cc645ed3b1c75fb6c9b65878c4","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -43,7 +42,7 @@ public class ConnectorRestClient extends BaseRestClient {\n     private static final long serialVersionUID = -6870366819966266617L;\n \n     public List<ConnInstanceTO> getAllConnectors() {\n-        List<ConnInstanceTO> connectors = Collections.<ConnInstanceTO>emptyList();\n+        List<ConnInstanceTO> connectors = List.of();\n         try {\n             connectors = getService(ConnectorService.class).list(SyncopeConsoleSession.get().getLocale().toString());\n         } catch (Exception e) {\n@@ -132,7 +131,7 @@ public ConnInstanceTO delete(final String key) {\n     }\n \n     public List<ConnBundleTO> getAllBundles() {\n-        List<ConnBundleTO> bundles = Collections.<ConnBundleTO>emptyList();\n+        List<ConnBundleTO> bundles = List.of();\n \n         try {\n             bundles = getService(ConnectorService.class).getBundles(SyncopeConsoleSession.get().getLocale().toString());\n@@ -183,7 +182,7 @@ public Pair<Boolean, String> check(final ConnInstanceTO connectorTO) {\n     public List<ConnIdObjectClassTO> buildObjectClassInfo(\n             final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n \n-        List<ConnIdObjectClassTO> result = Collections.emptyList();\n+        List<ConnIdObjectClassTO> result = List.of();\n         try {\n             result = getService(ConnectorService.class).buildObjectClassInfo(connInstanceTO, includeSpecial);\n         } catch (Exception e) {"},{"sha":"a840d9e2e4f689ada72c9cd575ac2b9cdf9f8cef","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ResourceHistoryRestClient.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceHistoryRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceHistoryRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceHistoryRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;\n import org.apache.syncope.common.rest.api.service.ResourceHistoryService;\n@@ -31,7 +30,7 @@ public class ResourceHistoryRestClient extends BaseRestClient {\n     private static final long serialVersionUID = -5722829010510310887L;\n \n     public List<ResourceHistoryConfTO> list(final String key) {\n-        List<ResourceHistoryConfTO> resHistoryConfs = Collections.<ResourceHistoryConfTO>emptyList();\n+        List<ResourceHistoryConfTO> resHistoryConfs = List.of();\n         try {\n             resHistoryConfs = getService(ResourceHistoryService.class).list(key);\n         } catch (Exception e) {"},{"sha":"927ab1f3fb54caaff78e1de8a3d8cd6b40b01e5c","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -88,7 +88,7 @@ public ResourceTO read(final String name) {\n     }\n \n     public List<ResourceTO> list() {\n-        List<ResourceTO> resources = Collections.emptyList();\n+        List<ResourceTO> resources = List.of();\n         try {\n             resources = getService(ResourceService.class).list();\n             Collections.sort(resources, (o1, o2) -> ObjectUtils.compare(o1.getKey(), o2.getKey()));"},{"sha":"5fb41dd6485a766324d583e06ac14ed7a81b810b","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.status;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n@@ -288,10 +287,10 @@ protected List<StatusBean> getStatusBeans(final long first, final long count) {\n             final AnyTO actual = restClient.read(anyTO.getKey());\n \n             List<StatusBean> statusBeans = actual.getResources().stream().map(resource -> {\n-                List<Pair<String, ReconStatus>> statuses = Collections.emptyList();\n+                List<Pair<String, ReconStatus>> statuses = List.of();\n                 if (statusOnly) {\n                     statuses = ReconStatusUtils.\n-                            getReconStatuses(anyTypeKind, anyTO.getKey(), Arrays.asList(resource));\n+                            getReconStatuses(anyTypeKind, anyTO.getKey(), List.of(resource));\n                 }\n \n                 return StatusUtils.getStatusBean(actual,"},{"sha":"a19ffbb5e8da32148ec5dda00f1ffba8cc99b335","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ReconStatusPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconStatusPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.status;\n \n-import java.util.Arrays;\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -60,7 +59,7 @@ public ReconStatusPanel(\n     @Override\n     protected Pair<ConnObjectTO, ConnObjectTO> getConnObjectTOs() {\n         List<Pair<String, ReconStatus>> statuses =\n-                ReconStatusUtils.getReconStatuses(anyTypeKind, anyKey, Arrays.asList(resource));\n+                ReconStatusUtils.getReconStatuses(anyTypeKind, anyKey, List.of(resource));\n \n         return statuses.isEmpty()\n                 ? null"},{"sha":"038421b2e8387699955969e2a2e9953eb481fea8","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ReconTaskPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.status;\n \n-import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -105,13 +104,13 @@ public ReconTaskPanel(\n \n         AjaxDropDownChoicePanel<MatchingRule> matchingRule = new AjaxDropDownChoicePanel<>(\n                 \"matchingRule\", \"matchingRule\", new PropertyModel<MatchingRule>(taskTO, \"matchingRule\"), false);\n-        matchingRule.setChoices(Arrays.asList(MatchingRule.values()));\n+        matchingRule.setChoices(List.of(MatchingRule.values()));\n         form.add(matchingRule);\n \n         AjaxDropDownChoicePanel<UnmatchingRule> unmatchingRule = new AjaxDropDownChoicePanel<>(\n                 \"unmatchingRule\", \"unmatchingRule\", new PropertyModel<UnmatchingRule>(taskTO, \"unmatchingRule\"),\n                 false);\n-        unmatchingRule.setChoices(Arrays.asList(UnmatchingRule.values()));\n+        unmatchingRule.setChoices(List.of(UnmatchingRule.values()));\n         form.add(unmatchingRule);\n \n         taskTO.setPerformCreate(true);"},{"sha":"0475b699738fa8c50fffafaefb0b65828d7b6668","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/widgets/RemediationsWidget.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.image.Icon;\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.icon.FontAwesomeIconTypeBuilder;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -107,7 +106,7 @@ public List<RemediationTO> getObject() {\n \n                     updatedRemediations = restClient.getRemediations(1, MAX_SIZE, new SortParam<>(\"instant\", true));\n                 } else {\n-                    updatedRemediations = Collections.<RemediationTO>emptyList();\n+                    updatedRemediations = List.of();\n                 }\n \n                 return updatedRemediations;"},{"sha":"7aa7fc8cd2151bb934e2141187d9d2259aa94dab","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/AbstractMappingPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FAbstractMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FAbstractMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FAbstractMappingPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverConfig;\n import de.agilecoders.wicket.core.markup.html.bootstrap.components.TooltipConfig;\n import java.io.Serializable;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n@@ -186,7 +185,7 @@ protected void populateItem(final ListItem<ItemTO> item) {\n                         \"intAttrName\",\n                         new PropertyModel<>(itemTO, \"intAttrName\"),\n                         false);\n-                intAttrName.setChoices(Collections.<String>emptyList());\n+                intAttrName.setChoices(List.of());\n                 intAttrName.setRequired(true).hideLabel();\n                 item.add(intAttrName);\n                 // -------------------------------\n@@ -228,7 +227,7 @@ protected void populateItem(final ListItem<ItemTO> item) {\n                         \"mandatoryCondition\",\n                         new PropertyModel<>(itemTO, \"mandatoryCondition\"));\n                 mandatory.hideLabel();\n-                mandatory.setChoices(Arrays.asList(new String[] { \"true\", \"false\" }));\n+                mandatory.setChoices(List.of(\"true\", \"false\"));\n                 mandatory.setEnabled(!itemTO.isConnObjectKey());\n                 item.add(mandatory);\n                 // -------------------------------"},{"sha":"b861db70da0f509e10b5271a63e549be6d7acde8","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/CapabilitiesPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FCapabilitiesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FCapabilitiesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FCapabilitiesPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.wizards.resources;\n \n-import java.util.Arrays;\n import java.util.List;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n@@ -36,7 +35,7 @@ public CapabilitiesPanel(final PropertyModel<List<ConnectorCapability>> model) {\n \n         AjaxPalettePanel<ConnectorCapability> capabilitiesPalette = new AjaxPalettePanel.Builder<ConnectorCapability>().\n                 setAllowMoveAll(true).\n-                build(\"capabilities\", model, new ListModel<>(Arrays.asList(ConnectorCapability.values())));\n+                build(\"capabilities\", model, new ListModel<>(List.of(ConnectorCapability.values())));\n         capabilitiesPalette.setOutputMarkupId(true);\n         add(capabilitiesPalette);\n     }"},{"sha":"0ba22c98f77820b172d97f37765d1a8a5be4b98b","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.wizards.resources;\n \n import java.io.Serializable;\n-import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -58,7 +57,7 @@ public ItemTransformersTogglePanel(final WebMarkupContainer container, final Pag\n             protected List<String> load() {\n                 // [!] this is required to disable changed with close button\n                 return item == null\n-                        ? Collections.<String>emptyList()\n+                        ? List.of()\n                         : item.getTransformers();\n             }\n         };"},{"sha":"01eebb53e0d9fbac7c7beb3a5d73cb757d0ed752","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvision.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvision.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.common.lib.to.ProvisionTO;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n \n@@ -127,7 +126,7 @@ public void setObjectClass(final String objectClass) {\n     }\n \n     public List<String> getAuxClasses() {\n-        return provisionTO == null ? Collections.<String>emptyList() : provisionTO.getAuxClasses();\n+        return provisionTO == null ? List.of() : provisionTO.getAuxClasses();\n     }\n \n     public boolean isIgnoreCaseMatch() {"},{"sha":"9d2325ac9cc52c8da52d0f8322d952feee9ecae1","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxDropDownChoicePanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.select.BootstrapSelect;\n import java.io.Serializable;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -44,7 +43,7 @@ public AjaxDropDownChoicePanel(\n \n         super(id, name, model);\n \n-        field = new BootstrapSelect<>(\"dropDownChoiceField\", model, Collections.<T>emptyList(), new ChoiceRenderer<>());\n+        field = new BootstrapSelect<>(\"dropDownChoiceField\", model, List.of(), new ChoiceRenderer<>());\n         add(field.setLabel(new Model<>(name)).setOutputMarkupId(true));\n \n         if (enableOnBlur) {"},{"sha":"46dab175486a3304dc4918864112650520d3608c","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxPalettePanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Iterator;\n@@ -118,7 +117,7 @@ public List<T> getUnselectedList() {\n                         final IChoiceRenderer<? super T> renderer = getPalette().getChoiceRenderer();\n                         final Collection<? extends T> choices = getPalette().getChoices();\n                         final List<T> unselected = new ArrayList<>(choices.size());\n-                        final List<String> ids = Arrays.asList(getValue().split(\",\"));\n+                        final List<String> ids = List.of(getValue().split(\",\"));\n \n                         choices.forEach(choice -> {\n                             final String choiceId = renderer.getIdValue(choice, 0);"},{"sha":"c092850583622ad9591a7c7bf5e45b6997c286a1","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxTextFieldPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import de.agilecoders.wicket.core.markup.html.bootstrap.components.TooltipConfig;\n-import java.util.Collections;\n+\n import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Pattern;\n@@ -42,7 +42,7 @@ public class AjaxTextFieldPanel extends FieldPanel<String> implements Cloneable\n \n     private Component questionMarkJexlHelp;\n \n-    private List<String> choices = Collections.emptyList();\n+    private List<String> choices = List.of();\n \n     public AjaxTextFieldPanel(final String id, final String name, final IModel<String> model) {\n         this(id, name, model, true);"},{"sha":"9031f8aff860c14f6f6ac6fa7e086613c2c58521","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/wizards/AjaxWizardBuilder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2FAjaxWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2FAjaxWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2FAjaxWizardBuilder.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.concurrent.Future;\n@@ -53,7 +52,7 @@ public AjaxWizardBuilder(final T defaultItem, final PageReference pageRef) {\n     }\n \n     public final AjaxWizardBuilder<T> addOuterObject(final Component... childs) {\n-        outerObjects.addAll(Arrays.asList(childs));\n+        outerObjects.addAll(List.of(childs));\n         return this;\n     }\n "},{"sha":"e2dc29bd11a4759c0cb76fe62900454f02a01a51","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/wizards/any/AbstractResources.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FAbstractResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FAbstractResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FAbstractResources.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.ui.commons.wizards.any;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.ui.commons.ajax.markup.html.LabelInfo;\n@@ -51,7 +50,7 @@ public <T extends AnyTO> AbstractResources(final AnyWrapper<T> modelObject) {\n         }\n \n         this.setOutputMarkupId(true);\n-        this.available = new ListModel<>(Collections.<String>emptyList());\n+        this.available = new ListModel<>(List.of());\n \n         add(new AjaxPalettePanel.Builder<String>().build(\"resources\",\n                 new PropertyModel<List<String>>(entityTO, \"resources\") {"},{"sha":"cb53054c9d0e0bf4ce6c8b58b046c55957a20070","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/PreferenceManager.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -24,7 +24,6 @@\n import java.io.Serializable;\n import java.io.StringWriter;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Base64;\n import java.util.HashMap;\n import java.util.List;\n@@ -53,7 +52,7 @@ public class PreferenceManager implements Serializable {\n     private static final TypeReference<Map<String, String>> MAP_TYPE_REF = new TypeReference<Map<String, String>>() {\n     };\n \n-    private static final List<Integer> PAGINATOR_CHOICES = Arrays.asList(new Integer[] { 10, 25, 50 });\n+    private static final List<Integer> PAGINATOR_CHOICES = List.of(10, 25, 50);\n \n     private static final CookieUtils COOKIE_UTILS;\n \n@@ -120,7 +119,7 @@ public List<String> getList(final Request request, final String key) {\n \n         if (StringUtils.isNotBlank(compound)) {\n             String[] items = compound.split(\";\");\n-            result.addAll(Arrays.asList(items));\n+            result.addAll(List.of(items));\n         }\n \n         return result;"},{"sha":"d25233ce00769e2d4631ef0235249e2f1b6bdb98","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,10 +20,8 @@\n \n import java.text.DateFormat;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -239,8 +237,8 @@ public boolean owns(final String entitlements, final String... realms) {\n         }\n \n         Set<String> requested = ArrayUtils.isEmpty(realms)\n-                ? Collections.singleton(SyncopeConstants.ROOT_REALM)\n-                : new HashSet<>(Arrays.asList(realms));\n+                ? Set.of(SyncopeConstants.ROOT_REALM)\n+                : Set.of(realms);\n \n         for (String entitlement : entitlements.split(\",\")) {\n             if (auth.containsKey(entitlement)) {"},{"sha":"d291d1cf16c32bdb6725d03fb903afbf58b07deb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeWebApplication.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -23,7 +23,7 @@\n import de.agilecoders.wicket.core.settings.BootstrapSettings;\n import de.agilecoders.wicket.core.settings.IBootstrapSettings;\n import de.agilecoders.wicket.core.settings.SingleThemeProvider;\n-import java.util.Arrays;\n+\n import java.util.Collections;\n import java.util.Enumeration;\n import java.util.HashMap;\n@@ -84,10 +84,8 @@ public class SyncopeWebApplication extends WicketBootSecuredWebApplication {\n \n     private static final String CONSOLE_PROPERTIES = \"console.properties\";\n \n-    public static final List<Locale> SUPPORTED_LOCALES = Collections.unmodifiableList(Arrays.asList(\n-            new Locale[] {\n-                Locale.ENGLISH, Locale.ITALIAN, new Locale(\"pt\", \"BR\"), new Locale(\"ru\"), Locale.JAPANESE\n-            }));\n+    public static final List<Locale> SUPPORTED_LOCALES = List.of(\n+        Locale.ENGLISH, Locale.ITALIAN, new Locale(\"pt\", \"BR\"), new Locale(\"ru\"), Locale.JAPANESE);\n \n     public static SyncopeWebApplication get() {\n         return (SyncopeWebApplication) WebApplication.get();"},{"sha":"3aea159b844bf0d8240d04761fc4e96ed9920a4b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -93,14 +93,14 @@ public AnyDataProvider(\n \n     @Override\n     public Iterator<A> iterator(final long first, final long count) {\n-        List<A> result = Collections.emptyList();\n+        List<A> result = List.of();\n \n         try {\n             final int page = ((int) first / paginatorRows);\n \n             if (filtered) {\n                 result = fiql == null\n-                        ? Collections.<A>emptyList()\n+                        ? List.of()\n                         : restClient.search(realm, fiql, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);\n             } else {\n                 result = restClient.search(realm, null, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);"},{"sha":"db90ec9970ac75f334f29500f16fe79097277904","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoAnyDirectoryPanelAditionalActionLinksProvider.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoAnyDirectoryPanelAditionalActionLinksProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoAnyDirectoryPanelAditionalActionLinksProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoAnyDirectoryPanelAditionalActionLinksProvider.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.commons;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.Action;\n@@ -41,7 +40,7 @@ public List<Action<UserTO>> get(\n             final String header,\n             final PageReference pageRef) {\n \n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @Override\n@@ -52,7 +51,7 @@ public List<Action<GroupTO>> get(\n             final String header,\n             final PageReference pageRef) {\n \n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @Override\n@@ -64,6 +63,6 @@ public List<Action<AnyObjectTO>> get(\n             final String header,\n             final PageReference pageRef) {\n \n-        return Collections.emptyList();\n+        return List.of();\n     }\n }"},{"sha":"e21f6225bc9b3fb6f64ff6bb4465dacc578efd64","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoExternalResourceProvider.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoExternalResourceProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoExternalResourceProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoExternalResourceProvider.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.commons;\n \n-import java.util.Collections;\n import java.util.List;\n \n public class IdRepoExternalResourceProvider implements ExternalResourceProvider {\n@@ -27,6 +26,6 @@ public class IdRepoExternalResourceProvider implements ExternalResourceProvider\n \n     @Override\n     public List<String> get() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n }"},{"sha":"a01e647a7a6fcbc42678534757a647cd2f88f868","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoImplementationInfoProvider.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -59,7 +59,7 @@ public ViewMode getViewMode(final ImplementationTO implementation) {\n \n     @Override\n     public List<String> getClasses(final ImplementationTO implementation, final ViewMode viewMode) {\n-        List<String> classes = Collections.emptyList();\n+        List<String> classes = List.of();\n         if (viewMode == ViewMode.JAVA_CLASS) {\n             Optional<JavaImplInfo> javaClasses = SyncopeConsoleSession.get().getPlatformInfo().\n                     getJavaImplInfo(implementation.getType());\n@@ -173,7 +173,7 @@ public IModel<List<String>> getReconFilterBuilders() {\n \n             @Override\n             protected List<String> load() {\n-                return Collections.emptyList();\n+                return List.of();\n             }\n         };\n     }\n@@ -186,7 +186,7 @@ public IModel<List<String>> getPullActions() {\n \n             @Override\n             protected List<String> load() {\n-                return Collections.emptyList();\n+                return List.of();\n             }\n         };\n     }\n@@ -199,7 +199,7 @@ public IModel<List<String>> getPushActions() {\n \n             @Override\n             protected List<String> load() {\n-                return Collections.emptyList();\n+                return List.of();\n             }\n         };\n     }"},{"sha":"014affa077eeaf9c849dcc99aecbbcc6bdf616c3","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoStatusProvider.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoStatusProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoStatusProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoStatusProvider.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.client.console.panels.ListViewPanel;\n@@ -37,7 +36,7 @@ public class IdRepoStatusProvider implements StatusProvider {\n     public List<Triple<ConnObjectTO, ConnObjectWrapper, String>> get(\n             final AnyTO any, final Collection<String> resources) {\n \n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"6edd6d8fccc512913cf94b75c843b4a9d86c3d4f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/SortableAnyProviderComparator.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.commons;\n \n-import java.util.Arrays;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n@@ -33,8 +31,8 @@\n \n     private static final long serialVersionUID = 1775967163571699258L;\n \n-    private static final Set<String> INLINE_PROPS = new HashSet<>(Arrays.asList(\n-            new String[] { \"key\", \"status\", \"token\", \"username\", \"name\" }));\n+    private static final Set<String> INLINE_PROPS = Set.of(\n+            new String[] { \"key\", \"status\", \"token\", \"username\", \"name\" });\n \n     public SortableAnyProviderComparator(final SortableDataProvider<T, String> provider) {\n         super(provider);"},{"sha":"3dcab7c2d31158e72f9fe20aa3c16081ce1edf15","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/events/EventCategoryPanel.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.events;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -108,7 +107,7 @@ public EventCategoryPanel(\n                 \"type\",\n                 new PropertyModel<>(eventCategoryTO, \"type\"),\n                 false);\n-        type.setChoices(Arrays.asList(EventCategoryType.values()));\n+        type.setChoices(List.of(EventCategoryType.values()));\n         type.setStyleSheet(\"ui-widget-content ui-corner-all\");\n         type.setChoiceRenderer(new IChoiceRenderer<EventCategoryType>() {\n \n@@ -209,7 +208,7 @@ public void onClick(final AjaxRequestTarget target, final EventCategory ignore)\n                     send(EventCategoryPanel.this.getPage(), Broadcast.BREADTH, new EventSelectionChanged(\n                             target,\n                             Collections.<String>singleton(eventString),\n-                            Collections.<String>emptySet()));\n+                            Set.of()));\n                     target.add(categoryContainer);\n                 }\n             }\n@@ -235,7 +234,7 @@ public void onClick(final AjaxRequestTarget target, final EventCategory ignore)\n                     custom.setModelObject(StringUtils.EMPTY);\n                     send(EventCategoryPanel.this.getPage(), Broadcast.BREADTH, new EventSelectionChanged(\n                             target,\n-                            Collections.<String>emptySet(),\n+                            Set.of(),\n                             Collections.<String>singleton(eventString)));\n                     target.add(categoryContainer);\n                 }\n@@ -302,8 +301,8 @@ public void onEvent(final IEvent<?> event) {\n                         eventCategoryTO.setCategory(null);\n                         eventCategoryTO.setSubcategory(null);\n                         if (type.getModelObject() == EventCategoryType.CUSTOM) {\n-                            category.setChoices(Collections.<String>emptyList());\n-                            subcategory.setChoices(Collections.<String>emptyList());\n+                            category.setChoices(List.of());\n+                            subcategory.setChoices(List.of());\n                             category.setEnabled(false);\n                             subcategory.setEnabled(false);\n                             custom.setVisible(true);\n@@ -312,7 +311,7 @@ public void onEvent(final IEvent<?> event) {\n                             actionsPanel.setEnabled(true);\n                         } else {\n                             category.setChoices(filter(eventCategoryTOs, type.getModelObject()));\n-                            subcategory.setChoices(Collections.<String>emptyList());\n+                            subcategory.setChoices(List.of());\n                             category.setEnabled(true);\n                             subcategory.setEnabled(true);\n                             custom.setVisible(false);"},{"sha":"5d7422d041a3dc5c738792733a2078d173824b19","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/MailTemplateDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -188,7 +188,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     protected final class MailTemplateProvider extends DirectoryDataProvider<MailTemplateTO> {"},{"sha":"ea4b64c746cd4d0c3c366a69a1f969d8b8cc778c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -163,7 +163,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     protected class NotificationProvider extends DirectoryDataProvider<NotificationTO> {"},{"sha":"f3e038f9c9e2505c81e06980a19e355b8c749092","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n@@ -151,7 +150,7 @@ public Details(final NotificationWrapper modelObject) {\n             AjaxDropDownChoicePanel<TraceLevel> traceLevel = new AjaxDropDownChoicePanel<>(\n                     \"traceLevel\", getString(\"traceLevel\"),\n                     new PropertyModel<>(notificationTO, \"traceLevel\"));\n-            traceLevel.setChoices(Arrays.asList(TraceLevel.values()));\n+            traceLevel.setChoices(List.of(TraceLevel.values()));\n             traceLevel.addRequiredLabel();\n             add(traceLevel);\n \n@@ -181,12 +180,12 @@ public Events(final NotificationWrapper modelObject) {\n \n                 @Override\n                 protected List<String> getListAuthRoles() {\n-                    return Collections.emptyList();\n+                    return List.of();\n                 }\n \n                 @Override\n                 protected List<String> getChangeAuthRoles() {\n-                    return Collections.emptyList();\n+                    return List.of();\n                 }\n             });\n         }"},{"sha":"61dcde84af6785fe44cd21378505cad813c2a3b7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Audit.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.pages;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -73,13 +71,12 @@ public Audit(final PageParameters parameters) {\n \n             @Override\n             protected List<String> getListAuthRoles() {\n-                return Collections.singletonList(IdRepoEntitlement.AUDIT_LIST);\n+                return List.of(IdRepoEntitlement.AUDIT_LIST);\n             }\n \n             @Override\n             protected List<String> getChangeAuthRoles() {\n-                return Arrays.asList(\n-                        new String[] { IdRepoEntitlement.AUDIT_ENABLE, IdRepoEntitlement.AUDIT_DISABLE });\n+                return List.of(IdRepoEntitlement.AUDIT_ENABLE, IdRepoEntitlement.AUDIT_DISABLE);\n             }\n \n             @Override"},{"sha":"bf281167149246f34efebb0d39715be90abd3113","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AbstractLogsPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.panels;\n \n import java.io.Serializable;\n-import java.util.Arrays;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -73,7 +72,7 @@ protected Component getValueComponent(final String key, final LoggerTO loggerTO)\n                     MetaDataRoleAuthorizationStrategy.authorize(loggerTOs, ENABLE, IdRepoEntitlement.LOG_SET_LEVEL);\n \n                     loggerTOs.hideLabel();\n-                    loggerTOs.setChoices(Arrays.asList(LoggerLevel.values()));\n+                    loggerTOs.setChoices(List.of(LoggerLevel.values()));\n                     loggerTOs.setNullValid(false);\n                     loggerTOs.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n "},{"sha":"ca3b487fc50a0a7730fa022eef2d85142b880f5a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AccessTokenDirectoryPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.Iterator;\n import java.util.List;\n@@ -140,7 +139,7 @@ public void onClick(final AjaxRequestTarget target, final AccessTokenTO ignore)\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     public abstract static class Builder"},{"sha":"06e32182d1ca9351e1e6c1f45b4da5b53bb21c00","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AjaxDataTablePanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.console.rest.BaseRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -282,7 +281,7 @@ protected void onSubmit(final AjaxRequestTarget target) {\n                                     builder.itemKeyField),\n                             target);\n                 }\n-                group.setModelObject(Collections.<T>emptyList());\n+                group.setModelObject(List.of());\n                 target.add(group);\n             }\n         }.setEnabled(builder.isBatchEnabled()).setVisible(builder.isBatchEnabled()));"},{"sha":"242efb3298340aa0475001561401bcf63473dbc3","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n@@ -176,7 +175,7 @@ protected List<IColumn<A, String>> getColumns() {\n             }\n \n             prefMan.setList(getRequest(), getResponse(), DisplayAttributesModalPanel.getPrefDetailView(type),\n-                    Arrays.asList(getDefaultAttributeSelection()));\n+                    List.of(getDefaultAttributeSelection()));\n         }\n \n         columns.addAll(prefcolumns);"},{"sha":"03a003652b34af9f4b9c15b46f278d46aed350cd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassDetailsPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import java.util.Arrays;\n import java.util.List;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n@@ -47,8 +46,8 @@ public class AnyTypeClassDetailsPanel extends Panel {\n     private final List<String> availableVirSchemas = schemaRestClient.getVirSchemaNames();\n \n     private static final List<String> LAYOUT_PARAMETERS =\n-            Arrays.asList(new String[] { \"admin.user.layout\", \"self.user.layout\",\n-        \"admin.group.layout\", \"self.group.layout\", \"admin.membership.layout\", \"self.membership.layout\" });\n+            List.of(\"admin.user.layout\", \"self.user.layout\",\n+        \"admin.group.layout\", \"self.group.layout\", \"admin.membership.layout\", \"self.membership.layout\");\n \n     public AnyTypeClassDetailsPanel(final String id, final AnyTypeClassTO anyTypeClassTO) {\n         super(id);"},{"sha":"093a01a6ce43ed90a0d7ce8e98567418f1657cc2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -113,7 +113,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"6f87731764451e2104a251a6464ce5837db72511","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeDetailsPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n@@ -58,7 +57,7 @@ public AnyTypeDetailsPanel(final String id, final AnyTypeTO anyTypeTO) {\n \n         final AjaxDropDownChoicePanel<AnyTypeKind> kind = new AjaxDropDownChoicePanel<>(\n                 \"kind\", getString(\"kind\"), new PropertyModel<>(anyTypeTO, \"kind\"));\n-        kind.setChoices(Arrays.asList(AnyTypeKind.values()));\n+        kind.setChoices(List.of(AnyTypeKind.values()));\n         kind.setOutputMarkupId(true);\n         if (anyTypeTO.getKind() == null) {\n             kind.setModelObject(AnyTypeKind.ANY_OBJECT);"},{"sha":"85258c1bb901cd6147ade5006a1f6606e98e8537","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -112,7 +112,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"a66df25a51f0463def6a85127eb814f0fec7a850","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ApplicationDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -212,7 +212,7 @@ public void onClick(final AjaxRequestTarget target, final ApplicationTO ignore)\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     public abstract static class Builder"},{"sha":"6b9551876255a072356978452ec32317655ea895","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import java.lang.reflect.Field;\n import java.lang.reflect.ParameterizedType;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n@@ -92,7 +91,7 @@ public BeanPanel(\n \n         this.sCondWrapper = sCondWrapper;\n \n-        this.excluded = new ArrayList<>(Arrays.asList(excluded));\n+        this.excluded = new ArrayList<>(List.of(excluded));\n         this.excluded.add(\"serialVersionUID\");\n         this.excluded.add(\"class\");\n \n@@ -213,7 +212,7 @@ protected void populateItem(final ListItem<String> item) {\n                         panel = new AjaxPalettePanel.Builder<>().setName(fieldName).build(\n                                 \"value\",\n                                 new PropertyModel<>(bean.getObject(), fieldName),\n-                                new ListModel(Arrays.asList(listItemType.getEnumConstants()))).hideLabel();\n+                                new ListModel(List.of(listItemType.getEnumConstants()))).hideLabel();\n                     } else {\n                         panel = new MultiFieldPanel.Builder<>(\n                                 new PropertyModel<>(bean.getObject(), fieldName)).build(\n@@ -246,7 +245,7 @@ private FieldPanel buildSinglePanel(\n                     FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN));\n         } else if (type.isEnum()) {\n             result = new AjaxDropDownChoicePanel(id, fieldName, model).setChoices(\n-                    Arrays.asList(type.getEnumConstants()));\n+                    List.of(type.getEnumConstants()));\n         }\n \n         // treat as String if nothing matched above"},{"sha":"2d879ed77c066d329f9965f591545a9080359113","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DomainAdminCredentialsPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDomainAdminCredentialsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDomainAdminCredentialsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDomainAdminCredentialsPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import java.util.Arrays;\n+import java.util.List;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.pages.BasePage;\n@@ -52,7 +53,7 @@ public DomainAdminCredentialsPanel(\n         AjaxDropDownChoicePanel<CipherAlgorithm> adminCipherAlgorithm = new AjaxDropDownChoicePanel<>(\n                 \"adminCipherAlgorithm\", \"adminCipherAlgorithm\",\n                 new PropertyModel<>(domain, \"adminCipherAlgorithm\"), false);\n-        adminCipherAlgorithm.setChoices(Arrays.asList(CipherAlgorithm.values()));\n+        adminCipherAlgorithm.setChoices(List.of(CipherAlgorithm.values()));\n         adminCipherAlgorithm.addRequiredLabel();\n         adminCipherAlgorithm.setNullValid(false);\n         add(adminCipherAlgorithm);"},{"sha":"e8d41e963369eb780617329fa711506465025b22","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DomainDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDomainDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDomainDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDomainDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -164,7 +164,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n \n     }\n "},{"sha":"4a36e16f61c19093a9774c2589b5288e02f7e079","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DomainWizardBuilder.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDomainWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDomainWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDomainWizardBuilder.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.panels;\n \n import java.io.Serializable;\n-import java.util.Arrays;\n import java.util.List;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.syncope.client.console.wicket.markup.html.form.JsonEditorPanel;\n@@ -46,15 +45,15 @@ public class DomainWizardBuilder extends BaseAjaxWizardBuilder<Domain> {\n \n     private static final long serialVersionUID = -6731030158762705250L;\n \n-    private static final List<String> JDBC_DRIVERS = Arrays.asList(\n+    private static final List<String> JDBC_DRIVERS = List.of(\n             \"org.postgresql.Driver\",\n             \"com.mysql.cj.jdbc.Driver\",\n             \"org.mariadb.jdbc.Driver\",\n             \"com.microsoft.sqlserver.jdbc.SQLServerDriver\",\n             \"oracle.jdbc.OracleDriver\",\n             \"org.h2.Driver\");\n \n-    private static final List<String> DATABASE_PLATFORMS = Arrays.asList(\n+    private static final List<String> DATABASE_PLATFORMS = List.of(\n             \"org.apache.openjpa.jdbc.sql.PostgresDictionary\",\n             \"org.apache.openjpa.jdbc.sql.MySQLDictionary(blobTypeName=LONGBLOB,dateFractionDigits=3)\",\n             \"org.apache.openjpa.jdbc.sql.MariaDBDictionary(blobTypeName=LONGBLOB,dateFractionDigits=3)\",\n@@ -121,7 +120,7 @@ public Storage(final Domain domain) {\n             AjaxDropDownChoicePanel<Domain.TransactionIsolation> transactionIsolation = new AjaxDropDownChoicePanel<>(\n                     \"transactionIsolation\", \"transactionIsolation\",\n                     new PropertyModel<>(domain, \"transactionIsolation\"), false);\n-            transactionIsolation.setChoices(Arrays.asList(Domain.TransactionIsolation.values()));\n+            transactionIsolation.setChoices(List.of(Domain.TransactionIsolation.values()));\n             transactionIsolation.addRequiredLabel();\n             transactionIsolation.setNullValid(false);\n             add(transactionIsolation);\n@@ -164,7 +163,7 @@ public AdminCredentials(final Domain domain) {\n             AjaxDropDownChoicePanel<CipherAlgorithm> adminCipherAlgorithm = new AjaxDropDownChoicePanel<>(\n                     \"adminCipherAlgorithm\", \"adminCipherAlgorithm\",\n                     new PropertyModel<>(domain, \"adminCipherAlgorithm\"), false);\n-            adminCipherAlgorithm.setChoices(Arrays.asList(CipherAlgorithm.values()));\n+            adminCipherAlgorithm.setChoices(List.of(CipherAlgorithm.values()));\n             adminCipherAlgorithm.addRequiredLabel();\n             adminCipherAlgorithm.setNullValid(false);\n             add(adminCipherAlgorithm);"},{"sha":"d73036d4e7a05f333699e6a3c7417b324ce931eb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DynRealmDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -158,7 +158,7 @@ public void onClick(final AjaxRequestTarget target, final DynRealmTO ignore) {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     public abstract static class Builder"},{"sha":"951f3bfd71eab333c07f6948ad44ae5ee057915f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -186,7 +186,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     protected class ImplementationProvider extends DirectoryDataProvider<ImplementationTO> {"},{"sha":"30b094450a52781d2d9f646b7381cb21b17da1b4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ListViewPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -23,7 +23,6 @@\n import java.lang.reflect.InvocationTargetException;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n@@ -253,7 +252,7 @@ public void setCheckAvailability(final CheckAvailability check) {\n \n         private static final long serialVersionUID = -3643771352897992172L;\n \n-        private IModel<? extends Collection<T>> model = Model.of(Collections.<T>emptyList());\n+        private IModel<? extends Collection<T>> model = Model.of(List.of());\n \n         private final List<String> includes = new ArrayList<>();\n "},{"sha":"ece172abf463d8df1b1dd2248052ac91df56bfa8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/NetworkServiceDirectoryPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNetworkServiceDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNetworkServiceDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNetworkServiceDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n@@ -104,7 +103,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     protected class NetworkServiceProvider extends DirectoryDataProvider<NetworkService> {"},{"sha":"84c44e7c29fa533f1a9b80c58938169cd6ba5bb5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ParametersWizardAttrStep.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersWizardAttrStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersWizardAttrStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersWizardAttrStep.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import java.util.Arrays;\n import java.util.List;\n import javax.ws.rs.core.MediaType;\n import org.apache.commons.lang3.BooleanUtils;\n@@ -68,7 +67,7 @@ public ParametersWizardAttrStep(final ParametersWizardPanel.ParametersForm model\n \n             @Override\n             protected List<PlainSchemaTO> load() {\n-                return Arrays.asList(modelObject.getSchema());\n+                return List.of(modelObject.getSchema());\n             }\n         };\n \n@@ -100,7 +99,7 @@ private Panel getFieldPanel(final String id, final ConfParam param, final PlainS\n \n             case Boolean:\n                 panel = new AjaxDropDownChoicePanel<Boolean>(id, valueHeaderName, new Model<>(), false);\n-                ((AjaxDropDownChoicePanel<Boolean>) panel).setChoices(Arrays.asList(true, false));\n+                ((AjaxDropDownChoicePanel<Boolean>) panel).setChoices(List.of(true, false));\n \n                 if (!param.getValues().isEmpty()) {\n                     ((AjaxDropDownChoicePanel) panel).setChoiceRenderer(new IChoiceRenderer<Boolean>() {"},{"sha":"4c1f984aec722bec677e3890dc3353c23c0eae88","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ParametersWizardSchemaStep.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersWizardSchemaStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersWizardSchemaStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersWizardSchemaStep.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import java.util.Arrays;\n+import java.util.List;\n+\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n@@ -40,7 +41,7 @@ public ParametersWizardSchemaStep(final ParametersWizardPanel.ParametersForm mod\n \n         AjaxDropDownChoicePanel<AttrSchemaType> type = new AjaxDropDownChoicePanel<>(\n                 \"type\", getString(\"type\"), new PropertyModel<>(modelObject.getSchema(), \"type\"));\n-        type.setChoices(Arrays.asList(\n+        type.setChoices(List.of(\n                 AttrSchemaType.String, AttrSchemaType.Long, AttrSchemaType.Double,\n                 AttrSchemaType.Boolean, AttrSchemaType.Date, AttrSchemaType.Binary));\n         content.add(type);"},{"sha":"5490b0c9d5f1f17e5219985164f4682aa3830e04","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,8 +20,6 @@\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.components.TooltipConfig;\n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.stream.Collectors;\n@@ -75,7 +73,7 @@ public PlainSchemaDetails(final String id, final PlainSchemaTO schemaTO) {\n \n         boolean isCreate = schemaTO == null || schemaTO.getKey() == null || schemaTO.getKey().isEmpty();\n \n-        type.setChoices(Arrays.asList(AttrSchemaType.values()));\n+        type.setChoices(List.of(AttrSchemaType.values()));\n         type.setEnabled(isCreate);\n         type.addRequiredLabel();\n         add(type);\n@@ -189,7 +187,7 @@ protected String newModelObject() {\n                 \"cipherAlgorithm\", getString(\"cipherAlgorithm\"),\n                 new PropertyModel<>(schemaTO, \"cipherAlgorithm\"));\n \n-        cipherAlgorithm.setChoices(Arrays.asList(CipherAlgorithm.values()));\n+        cipherAlgorithm.setChoices(List.of(CipherAlgorithm.values()));\n \n         final WebMarkupContainer encryptedParams = new WebMarkupContainer(\"encryptedParams\");\n         encryptedParams.setOutputMarkupPlaceholderTag(true);\n@@ -259,7 +257,7 @@ protected Iterator<String> getChoices(final String input) {\n                 List<String> choices = new ArrayList<>();\n \n                 if (Strings.isEmpty(input)) {\n-                    choices = Collections.emptyList();\n+                    choices = List.of();\n                 } else if (\"true\".startsWith(input.toLowerCase())) {\n                     choices.add(\"true\");\n                 } else if (\"false\".startsWith(input.toLowerCase())) {"},{"sha":"418c8918c3a8346134734847dfcaeea77894b51a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PrivilegeDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -132,7 +132,7 @@ public void onClick(final AjaxRequestTarget target, final PrivilegeTO ignore) {\n \n     @Override\n     protected Collection<ActionType> getBatches() {\n-        return Collections.<ActionType>emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"33f8d7bf629274398527865e0eedb62aa47a32da","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -27,7 +27,6 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.image.IconType;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashMap;\n import java.util.List;\n@@ -331,7 +330,7 @@ private Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap(final Lis\n             } else if (cache.containsKey(realm.getParent())) {\n                 cache.get(realm.getParent()).add(realm);\n             } else {\n-                cache.put(realm.getParent(), new ArrayList<>(Collections.singleton(realm)));\n+                cache.put(realm.getParent(), List.of(realm));\n             }\n         });\n "},{"sha":"61abfcef0ed785851b56c3148566af762882e6ac","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RelationshipTypesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -115,7 +115,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"3462e42247e50982765268b09d5dfb1ed67fab6d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -67,12 +66,10 @@ public class SchemaTypePanel extends TypesDirectoryPanel<SchemaTO, SchemaProvide\n         private static final long serialVersionUID = 3109256773218160485L;\n \n         {\n-            put(SchemaType.PLAIN, Arrays.asList(new String[] {\n-                \"key\", \"type\", \"mandatoryCondition\", \"uniqueConstraint\", \"multivalue\", \"readonly\" }));\n-            put(SchemaType.DERIVED, Arrays.asList(new String[] {\n-                \"key\", \"expression\" }));\n-            put(SchemaType.VIRTUAL, Arrays.asList(new String[] {\n-                \"key\", \"resource\", \"anyType\", \"extAttrName\", \"readonly\" }));\n+            put(SchemaType.PLAIN,\n+                List.of(\"key\", \"type\", \"mandatoryCondition\", \"uniqueConstraint\", \"multivalue\", \"readonly\"));\n+            put(SchemaType.DERIVED, List.of(\"key\", \"expression\"));\n+            put(SchemaType.VIRTUAL, List.of(\"key\", \"resource\", \"anyType\", \"extAttrName\", \"readonly\"));\n         }\n     };\n \n@@ -119,7 +116,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"b272eafdea7a85968b447e53af569296101129d9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypeWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypeWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypeWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypeWizardBuilder.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,7 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n+import java.util.List;\n import java.util.Locale;\n import java.util.Objects;\n import java.util.stream.Collectors;\n@@ -102,7 +102,7 @@ public class Details extends WizardStep {\n         public Details(final SchemaTO modelObject) {\n             AjaxDropDownChoicePanel<SchemaType> kind =\n                     new AjaxDropDownChoicePanel<>(\"kind\", getString(\"kind\"), new Model<>());\n-            kind.setChoices(Arrays.asList(SchemaType.values()));\n+            kind.setChoices(List.of(SchemaType.values()));\n             kind.setOutputMarkupId(true);\n             kind.setModelObject(schemaType);\n             kind.setEnabled(false);"},{"sha":"3941668b9ff6cea23777c1299a8ebe1150b62bd9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionsPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -122,7 +122,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"aaa6ed0450d06fce053cd8719fd7db44613b1b0b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/TypeExtensionDirectoryPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n@@ -166,7 +165,7 @@ public void onClick(final AjaxRequestTarget target, final TypeExtensionTO ignore\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     protected class TypeExtensionDataProvider extends DirectoryDataProvider<TypeExtensionTO> {"},{"sha":"920e4e50b123ed9d8240821b1bff45634de36180","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AnySelectionDirectoryPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnySelectionDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnySelectionDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnySelectionDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.console.panels.AnyDirectoryPanel;\n import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n@@ -68,7 +67,7 @@ public void onClick(final AjaxRequestTarget target, final A ignore) {\n \n     @Override\n     protected Collection<ActionType> getBatches() {\n-        return Collections.<ActionType>emptyList();\n+        return List.of();\n     }\n \n     public abstract static class Builder<A extends AnyTO, E extends AbstractAnyRestClient<A>>"},{"sha":"fab05abc39f2716bfb4553aabfe4f76a04a2edd1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.checkbox.bootstraptoggle.BootstrapToggleConfig;\n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n@@ -168,25 +167,25 @@ protected List<Comparator> load() {\n \n                 switch (field.getModel().getObject().getType()) {\n                     case ATTRIBUTE:\n-                        return Arrays.asList(SearchClause.Comparator.values());\n+                        return List.of(SearchClause.Comparator.values());\n \n                     case ROLE_MEMBERSHIP:\n                     case PRIVILEGE:\n                     case GROUP_MEMBERSHIP:\n                     case GROUP_MEMBER:\n                     case RESOURCE:\n-                        return Arrays.asList(\n+                        return List.of(\n                                 SearchClause.Comparator.EQUALS,\n                                 SearchClause.Comparator.NOT_EQUALS);\n \n                     case RELATIONSHIP:\n-                        return Arrays.asList(\n+                        return List.of(\n                                 SearchClause.Comparator.IS_NOT_NULL,\n                                 SearchClause.Comparator.IS_NULL,\n                                 SearchClause.Comparator.EQUALS,\n                                 SearchClause.Comparator.NOT_EQUALS);\n                     default:\n-                        return Collections.<Comparator>emptyList();\n+                        return List.of();\n                 }\n             }\n         };\n@@ -198,7 +197,7 @@ protected List<Comparator> load() {\n             @Override\n             protected List<String> load() {\n                 if (field.getModel().getObject() == null || field.getModel().getObject().getType() == null) {\n-                    return Collections.<String>emptyList();\n+                    return List.of();\n                 }\n \n                 switch (field.getModel().getObject().getType()) {\n@@ -237,7 +236,7 @@ protected List<String> load() {\n                         return relations;\n \n                     default:\n-                        return Collections.<String>emptyList();\n+                        return List.of();\n                 }\n             }\n         };"},{"sha":"c0d0f2fa6dc3bbc2d029a92bf5239575472424dc","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n@@ -140,7 +139,7 @@ public Profile(final T policyTO, final BaseModal<T> modal, final PageReference p\n                         \"field\",\n                         \"conflictResolutionAction\",\n                         new PropertyModel<>(policyTO, \"conflictResolutionAction\")).\n-                        setChoices(Arrays.asList((Serializable[]) ConflictResolutionAction.values())));\n+                        setChoices(List.of((Serializable[]) ConflictResolutionAction.values())));\n             }\n \n             add(new ListView<Component>(\"fields\", fields) {"},{"sha":"b08eaac7de1963d584f5399c03ddd973759ad7a8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -207,7 +207,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n     @Override\n     protected Collection<ActionType> getBatches() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @Override\n@@ -263,7 +263,7 @@ public Iterator<PolicyRuleWrapper> iterator(final long first, final long count)\n \n             List<PolicyRuleWrapper> rules = actual instanceof ComposablePolicy\n                     ? getPolicyRuleWrappers((ComposablePolicy) actual)\n-                    : Collections.emptyList();\n+                    : List.of();\n \n             Collections.sort(rules, comparator);\n             return rules.subList((int) first, (int) (first + count)).iterator();"},{"sha":"b8a96aa2796c1de29c1b5864ca9da5517e842a7f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportTemplateDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -207,7 +207,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n \n     }\n "},{"sha":"f6b162d8493cb355f8522b9f576f293bd1c1092a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -194,7 +194,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n     @Override\n     protected Collection<ActionType> getBatches() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"39fac4635221be5b3513633254eaa0cc48c22fd7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeClassRestClient.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n@@ -47,7 +46,7 @@ public AnyTypeClassTO read(final String key) {\n     }\n \n     public List<AnyTypeClassTO> list() {\n-        List<AnyTypeClassTO> types = Collections.emptyList();\n+        List<AnyTypeClassTO> types = List.of();\n \n         try {\n             types = getService(AnyTypeClassService.class).list();"},{"sha":"8f1b75b94aaf3807c4dea9a4206379427f20e7a5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -50,7 +50,7 @@ public AnyTypeTO read(final String key) {\n     }\n \n     public List<AnyTypeTO> listAnyTypes() {\n-        List<AnyTypeTO> types = Collections.emptyList();\n+        List<AnyTypeTO> types = List.of();\n \n         try {\n             types = getService(AnyTypeService.class).list();"},{"sha":"8ae1d2c7933d74281ecde6be271c3fcf6da62559","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -102,7 +102,7 @@ public List<EventCategory> listEvents() {\n         try {\n             return getService(LoggerService.class).events();\n         } catch (Exception e) {\n-            return Collections.<EventCategory>emptyList();\n+            return List.of();\n         }\n     }\n }"},{"sha":"f9fd6774810d2cc665279d313b4d1c972ceb56de","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.rest;\n \n import java.io.Serializable;\n-import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n import java.util.Optional;\n@@ -55,7 +54,7 @@ public <T extends PolicyTO> List<T> getPolicies(final PolicyType type) {\n                     collect(Collectors.toList());\n         } catch (Exception ignore) {\n             LOG.debug(\"No policy found\", ignore);\n-            return Collections.<T>emptyList();\n+            return List.of();\n         }\n     }\n "},{"sha":"564026df087b5f4bbdfadd0d006508783eb58dbb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/RelationshipTypeRestClient.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRelationshipTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRelationshipTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRelationshipTypeRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n@@ -45,7 +44,7 @@ public RelationshipTypeTO read(final String key) {\n     }\n \n     public List<RelationshipTypeTO> list() {\n-        List<RelationshipTypeTO> types = Collections.emptyList();\n+        List<RelationshipTypeTO> types = List.of();\n \n         try {\n             types = getService(RelationshipTypeService.class).list();"},{"sha":"548a68812c63fd8ce6b2e2e681656fb5eefacfce","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.rest;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -87,7 +86,7 @@ public <T extends SchemaTO> List<T> getSchemas(\n     }\n \n     public List<String> getSchemaNames(final SchemaType schemaType) {\n-        List<String> schemaNames = Collections.emptyList();\n+        List<String> schemaNames = List.of();\n \n         try {\n             schemaNames = getSchemas(schemaType, null, new String[0]).stream()."},{"sha":"f8143eb9a68db27bcc330d808973575a67b757cd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCrontabPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCrontabPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCrontabPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.client.console.tasks;\n \n-import java.util.Arrays;\n+import java.util.List;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n@@ -96,7 +97,7 @@ public void detach() {\n                 // no detach\n             }\n         });\n-        cronTemplateChooser.setChoices(Arrays.asList(cronTemplates));\n+        cronTemplateChooser.setChoices(List.of(cronTemplates));\n         cronTemplateChooser.setChoiceRenderer(new SelectChoiceRenderer<>());\n         add(cronTemplateChooser);\n "},{"sha":"513b2c3a72e0c1f1e2c4dbbcb50051164b11e2de","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.tasks;\n \n import java.io.Serializable;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n@@ -164,7 +163,7 @@ public Profile(final SchedTaskTO taskTO) {\n \n             final AjaxDropDownChoicePanel<PullMode> pullMode = new AjaxDropDownChoicePanel<>(\n                     \"pullMode\", \"pullMode\", new PropertyModel<>(taskTO, \"pullMode\"), false);\n-            pullMode.setChoices(Arrays.asList(PullMode.values()));\n+            pullMode.setChoices(List.of(PullMode.values()));\n             if (taskTO instanceof PullTaskTO) {\n                 pullMode.addRequiredLabel();\n             }\n@@ -251,13 +250,13 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             AjaxDropDownChoicePanel<MatchingRule> matchingRule = new AjaxDropDownChoicePanel<>(\n                     \"matchingRule\", \"matchingRule\", new PropertyModel<>(taskTO, \"matchingRule\"), false);\n-            matchingRule.setChoices(Arrays.asList(MatchingRule.values()));\n+            matchingRule.setChoices(List.of(MatchingRule.values()));\n             provisioningTaskSpecifics.add(matchingRule);\n \n             AjaxDropDownChoicePanel<UnmatchingRule> unmatchingRule = new AjaxDropDownChoicePanel<>(\n                     \"unmatchingRule\", \"unmatchingRule\", new PropertyModel<>(taskTO, \"unmatchingRule\"),\n                     false);\n-            unmatchingRule.setChoices(Arrays.asList(UnmatchingRule.values()));\n+            unmatchingRule.setChoices(List.of(UnmatchingRule.values()));\n             provisioningTaskSpecifics.add(unmatchingRule);\n \n             AjaxCheckBoxPanel performCreate = new AjaxCheckBoxPanel("},{"sha":"cf583629a86ab06daf0774feb49882a51db4eb3a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/head/MetaHeaderItem.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhead%2FMetaHeaderItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhead%2FMetaHeaderItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhead%2FMetaHeaderItem.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,8 @@\n package org.apache.syncope.client.console.wicket.markup.head;\n \n import java.io.Serializable;\n-import java.util.Arrays;\n+import java.util.List;\n+\n import org.apache.wicket.markup.head.HeaderItem;\n import org.apache.wicket.request.Response;\n \n@@ -38,7 +39,7 @@ public MetaHeaderItem(final String key, final String value) {\n \n     @Override\n     public Iterable<?> getRenderTokens() {\n-        return Arrays.asList(\"meta-\" + key + \"-\" + value);\n+        return List.of(\"meta-\" + key + \"-\" + value);\n     }\n \n     @Override"},{"sha":"5e957b73484fb13a1ae03a00ef09c0827f810b65","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/SelectableRecorder.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectableRecorder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectableRecorder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectableRecorder.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n \n@@ -119,7 +118,7 @@ public T getSelectedItem() {\n     public List<T> getSelectedList() {\n         IChoiceRenderer<? super T> renderer = getPalette().getChoiceRenderer();\n         if (ids.length == 0) {\n-            return Collections.<T>emptyList();\n+            return List.of();\n         }\n \n         List<T> selected = new ArrayList<>(ids.length);\n@@ -140,7 +139,7 @@ public List<T> getUnselectedList() {\n         Collection<? extends T> choices = getPalette().getChoices();\n \n         if (choices.size() - ids.length == 0) {\n-            return Collections.<T>emptyList();\n+            return List.of();\n         }\n \n         List<T> unselected = new ArrayList<>(Math.max(1, choices.size() - ids.length));"},{"sha":"1bab48bba1db5a81cb825865e6adaaa8907c8697","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -333,7 +333,7 @@ protected String paginatorRowsKey() {\n \n         @Override\n         protected Collection<ActionLink.ActionType> getBatches() {\n-            return Collections.<ActionLink.ActionType>emptyList();\n+            return List.of();\n         }\n \n         @Override\n@@ -615,7 +615,7 @@ protected String paginatorRowsKey() {\n \n         @Override\n         protected Collection<ActionLink.ActionType> getBatches() {\n-            return Collections.<ActionLink.ActionType>emptyList();\n+            return List.of();\n         }\n \n         @Override"},{"sha":"9b334b72c523a7bd0bbb9981d3b69edf8ed051b0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ReconDetailsModalPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconDetailsModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconDetailsModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconDetailsModalPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -104,7 +104,7 @@ protected String paginatorRowsKey() {\n \n         @Override\n         protected Collection<ActionLink.ActionType> getBatches() {\n-            return Collections.<ActionLink.ActionType>emptyList();\n+            return List.of();\n         }\n \n         @Override"},{"sha":"2f2068e7fb5449785aeed3d505f8fd0b6c0202d0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -262,7 +262,7 @@ public Panel getPanel(final String panelId) {\n     }\n \n     private Pair<List<ProgressBean>, ReconciliationReport> parseReconciliationReportExec() throws IOException {\n-        List<ProgressBean> beans = Collections.emptyList();\n+        List<ProgressBean> beans = List.of();\n         ReconciliationReport report = null;\n \n         Optional<ExecTO> exec = Optional.empty();\n@@ -349,7 +349,7 @@ protected String paginatorRowsKey() {\n \n         @Override\n         protected Collection<ActionLink.ActionType> getBatches() {\n-            return Collections.<ActionLink.ActionType>emptyList();\n+            return List.of();\n         }\n \n         @Override"},{"sha":"44f41a2c8e230cdcb95a336c8a6e6a0291b1feff","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/WizardMgtPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -320,7 +319,7 @@ public MarkupContainer addOrReplaceInnerObject(final Component... childs) {\n      * @return the current panel instance.\n      */\n     public final WizardMgtPanel<T> addOuterObject(final Component... childs) {\n-        outerObjects.addAll(Arrays.asList(childs));\n+        outerObjects.addAll(List.of(childs));\n         return this;\n     }\n "},{"sha":"584344c6ba552db8232b02adf6b6a878be100667","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -82,7 +82,7 @@ public AbstractAttrs(\n             final List<String> whichAttrs) {\n         super();\n         this.anyTypeClasses = anyTypeClasses;\n-        this.attrs = new ListModel<>(Collections.<Attr>emptyList());\n+        this.attrs = new ListModel<>(List.of());\n         this.membershipTOs = new ListModel<>(Collections.<MembershipTO>emptyList());\n \n         this.setOutputMarkupId(true);\n@@ -153,7 +153,7 @@ private void setSchemas(final List<String> anyTypeClasses) {\n     private void setSchemas(final List<String> anyTypeClasses, final Map<String, S> scs) {\n         final List<S> allSchemas;\n         if (anyTypeClasses.isEmpty()) {\n-            allSchemas = Collections.emptyList();\n+            allSchemas = List.of();\n         } else {\n             allSchemas = schemaRestClient.getSchemas(getSchemaType(), null, anyTypeClasses.toArray(new String[] {}));\n         }\n@@ -193,7 +193,7 @@ protected List<String> getMembershipAuxClasses(final MembershipTO membershipTO,\n             final GroupTO groupTO = groupRestClient.read(membershipTO.getGroupKey());\n             return groupTO.getTypeExtension(anyType).get().getAuxClasses();\n         } catch (Exception e) {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n     }\n "},{"sha":"01ab56be4a6079d7bef295f6a611fb7e2efbbd3b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/ConnObjectPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -65,10 +65,10 @@ public ConnObjectPanel(\n             @Override\n             protected List<String> load() {\n                 List<Attr> right = new ArrayList<>(connObjectTOs == null || connObjectTOs.getRight() == null\n-                        ? Collections.<Attr>emptyList()\n+                        ? List.of()\n                         : connObjectTOs.getRight().getAttrs());\n                 List<Attr> left = new ArrayList<>(connObjectTOs == null || connObjectTOs.getLeft() == null\n-                        ? Collections.<Attr>emptyList()\n+                        ? List.of()\n                         : connObjectTOs.getLeft().getAttrs());\n \n                 List<String> schemas = ListUtils.sum(right.stream().map(Attr::getSchema).collect(Collectors.toList()),"},{"sha":"7727cb4708af320d6a60344c4c2ddbb3dad2d923","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -511,7 +511,7 @@ protected void setExternalAction(final Attr attrTO, final AbstractFieldPanel<?>\n \n                 List<String> oldValues = prevAttr.isPresent()\n                         ? prevAttr.get().getValues()\n-                        : Collections.<String>emptyList();\n+                        : List.of();\n                 panel.showExternAction(new LabelInfo(\"externalAction\", oldValues));\n             }\n         }"},{"sha":"9b1adc101e03b8edf160d96302fade34206aa89d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import org.apache.syncope.client.ui.commons.wizards.any.UserWrapper;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n@@ -206,7 +205,7 @@ private void addRelationship(final Map<String, List<RelationshipTO>> relationshi\n     }\n \n     private void addNewRelationships(final RelationshipTO... rels) {\n-        getCurrentRelationships().addAll(Arrays.asList(rels));\n+        getCurrentRelationships().addAll(List.of(rels));\n     }\n \n     private void removeRelationships("},{"sha":"b61491fc7235ea23cbe5cc1b4a5339146f25745d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Roles.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -78,7 +78,7 @@ public <T extends AnyTO> Roles(final AnyWrapper<?> modelObject) {\n         allRoles = SyncopeWebApplication.get().getSecuritySettings().getAuthorizationStrategy().\n                 isActionAuthorized(this, RENDER)\n                 ? new RoleRestClient().list().stream().map(EntityTO::getKey).collect(Collectors.toList())\n-                : Collections.<String>emptyList();\n+                : List.of();\n         Collections.sort(allRoles);\n \n         add(new AjaxPalettePanel.Builder<String>().build(\"roles\","},{"sha":"6009cf9ea0b8423f6a664b68a7526252014c74ae","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyRecipientsProvider.groovy","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyRecipientsProvider.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyRecipientsProvider.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyRecipientsProvider.groovy?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -26,6 +26,6 @@ class MyRecipientsProvider implements RecipientsProvider {\n   \n   @Override\n   Set<String> provideRecipients(Notification notification) {\n-    return Collections.emptyList();\n+    return List.of();\n   }\n }"},{"sha":"ee0f5ce2bbd04c41ce3c8dfd0dbabcdcafd0509a","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeWebApplication.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -27,8 +27,6 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Locale;\n@@ -91,10 +89,8 @@ public class SyncopeWebApplication extends WicketBootStandardWebApplication {\n \n     private static final String CUSTOM_FORM_ATTRIBUTES_FILE = \"customFormAttributes.json\";\n \n-    public static final List<Locale> SUPPORTED_LOCALES = Collections.unmodifiableList(Arrays.asList(\n-            new Locale[] {\n-                Locale.ENGLISH, Locale.ITALIAN, new Locale(\"pt\", \"BR\"), new Locale(\"ru\"), Locale.JAPANESE\n-            }));\n+    public static final List<Locale> SUPPORTED_LOCALES = List.of(\n+        Locale.ENGLISH, Locale.ITALIAN, new Locale(\"pt\", \"BR\"), new Locale(\"ru\"), Locale.JAPANESE);\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n "},{"sha":"96ba84045230e78770f883b559d0c5d24691efea","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/AnyTypeRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FAnyTypeRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -48,7 +48,7 @@ public AnyTypeTO read(final String key) {\n     }\n \n     public List<AnyTypeTO> listAnyTypes() {\n-        List<AnyTypeTO> types = Collections.emptyList();\n+        List<AnyTypeTO> types = List.of();\n \n         try {\n             types = getService(AnyTypeService.class).list();"},{"sha":"dc9de6e6476d0160923f417220deb16c1cf5ec03","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SchemaRestClient.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.enduser.rest;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -87,7 +86,7 @@ public <T extends SchemaTO> List<T> getSchemas(\n     }\n \n     public List<String> getSchemaNames(final SchemaType schemaType) {\n-        List<String> schemaNames = Collections.emptyList();\n+        List<String> schemaNames = List.of();\n \n         try {\n             schemaNames = getSchemas(schemaType, null, new String[0]).stream()."},{"sha":"088b63f1f27924f179ee73f4f65ed1aca1d7721f","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SyncopeRestClient.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSyncopeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSyncopeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSyncopeRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.enduser.rest;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n@@ -29,7 +28,7 @@ public class SyncopeRestClient extends BaseRestClient {\n     private static final long serialVersionUID = -2211371717449597247L;\n \n     public List<String> listAnyTypeClasses() {\n-        List<String> types = Collections.emptyList();\n+        List<String> types = List.of();\n \n         try {\n             types = getService(SyncopeService.class).platform().getAnyTypeClasses();\n@@ -40,7 +39,7 @@ public List<String> listAnyTypeClasses() {\n     }\n \n     public List<String> searchUserTypeExtensions(final String groupName) {\n-        List<String> types = Collections.emptyList();\n+        List<String> types = List.of();\n         try {\n             TypeExtensionTO typeExtensionTO = getService(SyncopeService.class).readUserTypeExtension(groupName);\n             types = typeExtensionTO == null ? types : typeExtensionTO.getAuxClasses();"},{"sha":"67fd50eac9cba07a2a0e4a10222ef055c6b605f8","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/AbstractAttrs.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -78,7 +78,7 @@ public AbstractAttrs(\n             final Map<String, CustomizationOption> whichAttrs) {\n         super();\n         this.anyTypeClasses = anyTypeClasses;\n-        this.attrs = new ListModel<>(Collections.<Attr>emptyList());\n+        this.attrs = new ListModel<>(List.of());\n         this.membershipTOs = new ListModel<>(Collections.<MembershipTO>emptyList());\n \n         this.setOutputMarkupId(true);\n@@ -146,7 +146,7 @@ protected List<String> getDefaultValues(final String schema, final String groupN\n                 : groupName + \"#\")\n                 + schema;\n         return whichAttrs.get(schemaName) == null\n-                ? Collections.<String>emptyList()\n+                ? List.of()\n                 : whichAttrs.get(schemaName).getDefaultValues();\n     }\n \n@@ -171,7 +171,7 @@ private void setSchemas(final List<String> anyTypeClasses) {\n     private void setSchemas(final List<String> anyTypeClasses, final String groupName, final Map<String, S> scs) {\n         final List<S> allSchemas;\n         if (anyTypeClasses.isEmpty()) {\n-            allSchemas = Collections.emptyList();\n+            allSchemas = List.of();\n         } else {\n             allSchemas = schemaRestClient.getSchemas(getSchemaType(), null, anyTypeClasses.toArray(new String[] {}));\n         }\n@@ -212,7 +212,7 @@ protected List<String> getMembershipAuxClasses(final MembershipTO membershipTO,\n         try {\n             return syncopeRestClient.searchUserTypeExtensions(membershipTO.getGroupName());\n         } catch (Exception e) {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n     }\n "},{"sha":"0fb09fae96cdf8fc29bff2c3168f04fd1d31215f","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/Groups.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FGroups.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.enduser.wizards.any;\n \n-import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -162,7 +161,7 @@ protected void reloadMemberships() {\n \n         @Override\n         public List<String> getDynMemberships() {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         /**"},{"sha":"ac6a4d8629db0b082aaa526d32577efeff53ff13","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/RestClientExceptionMapper.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.lib;\n \n import java.security.AccessControlException;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -88,7 +87,7 @@ private SyncopeClientCompositeException checkSyncopeClientCompositeException(fin\n         try {\n             ErrorTO error = response.readEntity(ErrorTO.class);\n             if (error != null) {\n-                errors = Collections.singletonList(error);\n+                errors = List.of(error);\n             }\n         } catch (Exception e) {\n             LOG.debug(\"Could not read {}, attempting to read composite...\", ErrorTO.class.getName(), e);"},{"sha":"f9281ff4a97c5171ee834b5dfe0f04e09cf28a20","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -118,14 +117,14 @@ protected void init(final AuthenticationHandler handler) {\n             restClientFactory.setPassword(((BasicAuthenticationHandler) handler).getPassword());\n \n             String jwt = getService(AccessTokenService.class).login().getHeaderString(RESTHeaders.TOKEN);\n-            restClientFactory.getHeaders().put(HttpHeaders.AUTHORIZATION, Collections.singletonList(\"Bearer \" + jwt));\n+            restClientFactory.getHeaders().put(HttpHeaders.AUTHORIZATION, List.of(\"Bearer \" + jwt));\n \n             restClientFactory.setUsername(null);\n             restClientFactory.setPassword(null);\n         } else if (handler instanceof JWTAuthenticationHandler) {\n             restClientFactory.getHeaders().put(\n                     HttpHeaders.AUTHORIZATION,\n-                    Collections.singletonList(\"Bearer \" + ((JWTAuthenticationHandler) handler).getJwt()));\n+                    List.of(\"Bearer \" + ((JWTAuthenticationHandler) handler).getJwt()));\n         }\n     }\n \n@@ -140,7 +139,7 @@ protected void cleanup() {\n      */\n     public void refresh() {\n         String jwt = getService(AccessTokenService.class).refresh().getHeaderString(RESTHeaders.TOKEN);\n-        restClientFactory.getHeaders().put(HttpHeaders.AUTHORIZATION, Collections.singletonList(\"Bearer \" + jwt));\n+        restClientFactory.getHeaders().put(HttpHeaders.AUTHORIZATION, List.of(\"Bearer \" + jwt));\n     }\n \n     /**"},{"sha":"c3f8048e6d438e2cf05de2a42ea9938a5b26b639","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import com.fasterxml.jackson.datatype.joda.JodaModule;\n import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -130,7 +129,7 @@ protected JAXRSClientFactoryBean defaultRestClientFactoryBean() {\n         defaultRestClientFactoryBean.setAddress(address);\n \n         if (StringUtils.isNotBlank(domain)) {\n-            defaultRestClientFactoryBean.getHeaders().put(RESTHeaders.DOMAIN, Collections.singletonList(domain));\n+            defaultRestClientFactoryBean.getHeaders().put(RESTHeaders.DOMAIN, List.of(domain));\n         }\n \n         defaultRestClientFactoryBean.setThreadSafe(true);"},{"sha":"88ec261dc71ae0edee712ec6a28a6043858d6041","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/Attr.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAttr.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import javax.ws.rs.PathParam;\n@@ -52,7 +51,7 @@ public Builder value(final String value) {\n         }\n \n         public Builder values(final String... values) {\n-            instance.getValues().addAll(Arrays.asList(values));\n+            instance.getValues().addAll(List.of(values));\n             return this;\n         }\n "},{"sha":"38c01ed6f481ea533de23f4286ae51a08369b03e","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.common.lib;\n \n-import java.util.Collections;\n import java.util.Set;\n import java.util.regex.Pattern;\n \n@@ -34,7 +33,7 @@ public final class SyncopeConstants {\n \n     public static final String REALM_ANYTYPE = \"REALM\";\n \n-    public static final Set<String> FULL_ADMIN_REALMS = Collections.singleton(\"/\");\n+    public static final Set<String> FULL_ADMIN_REALMS = Set.of(\"/\");\n \n     public static final String UNAUTHENTICATED = \"unauthenticated\";\n "},{"sha":"26ea8980bf5a2f6af3377ed422f835a6c66caf99","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/AnyCR.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyCR.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -24,10 +24,9 @@\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.io.Serializable;\n-import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n@@ -74,7 +73,7 @@ public B auxClass(final String auxClass) {\n \n         @SuppressWarnings(\"unchecked\")\n         public B auxClasses(final String... auxClasses) {\n-            getInstance().getAuxClasses().addAll(Arrays.asList(auxClasses));\n+            getInstance().getAuxClasses().addAll(List.of(auxClasses));\n             return (B) this;\n         }\n \n@@ -92,7 +91,7 @@ public B plainAttr(final Attr plainAttr) {\n \n         @SuppressWarnings(\"unchecked\")\n         public B plainAttrs(final Attr... plainAttrs) {\n-            getInstance().getPlainAttrs().addAll(Arrays.asList(plainAttrs));\n+            getInstance().getPlainAttrs().addAll(List.of(plainAttrs));\n             return (B) this;\n         }\n \n@@ -116,7 +115,7 @@ public B virAttrs(final Collection<Attr> virAttrs) {\n \n         @SuppressWarnings(\"unchecked\")\n         public B virAttrs(final Attr... virAttrs) {\n-            getInstance().getVirAttrs().addAll(Arrays.asList(virAttrs));\n+            getInstance().getVirAttrs().addAll(List.of(virAttrs));\n             return (B) this;\n         }\n \n@@ -128,7 +127,7 @@ public B resource(final String resource) {\n \n         @SuppressWarnings(\"unchecked\")\n         public B resources(final String... resources) {\n-            getInstance().getResources().addAll(Arrays.asList(resources));\n+            getInstance().getResources().addAll(List.of(resources));\n             return (B) this;\n         }\n \n@@ -208,7 +207,7 @@ public Optional<Attr> getDerAttr(final String schema) {\n     @JsonIgnore\n     @Override\n     public Set<Attr> getDerAttrs() {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n \n     @JsonIgnore"},{"sha":"ef8955407e3cbf78a518e807243b73266aedcfd4","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/AnyObjectCR.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectCR.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -23,9 +23,7 @@\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import javax.xml.bind.annotation.XmlElement;\n@@ -65,7 +63,7 @@ public Builder relationship(final RelationshipTO relationship) {\n         }\n \n         public Builder relationships(final RelationshipTO... relationships) {\n-            getInstance().getRelationships().addAll(Arrays.asList(relationships));\n+            getInstance().getRelationships().addAll(List.of(relationships));\n             return this;\n         }\n \n@@ -80,7 +78,7 @@ public Builder membership(final MembershipTO membership) {\n         }\n \n         public Builder memberships(final MembershipTO... memberships) {\n-            getInstance().getMemberships().addAll(Arrays.asList(memberships));\n+            getInstance().getMemberships().addAll(List.of(memberships));\n             return this;\n         }\n \n@@ -157,7 +155,7 @@ public List<MembershipTO> getMemberships() {\n \n     @Override\n     public List<MembershipTO> getDynMemberships() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"e9a2b5e71c78dc5b951717dd5e5cd17d5a18b144","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/AnyObjectUR.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,9 +20,10 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n-import java.util.Arrays;\n+\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n@@ -60,7 +61,7 @@ public Builder relationship(final RelationshipUR relationship) {\n         }\n \n         public Builder relationships(final RelationshipUR... relationships) {\n-            getInstance().getRelationships().addAll(Arrays.asList(relationships));\n+            getInstance().getRelationships().addAll(List.of(relationships));\n             return this;\n         }\n \n@@ -75,7 +76,7 @@ public Builder membership(final MembershipUR membership) {\n         }\n \n         public Builder memberships(final MembershipUR... memberships) {\n-            getInstance().getMemberships().addAll(Arrays.asList(memberships));\n+            getInstance().getMemberships().addAll(List.of(memberships));\n             return this;\n         }\n "},{"sha":"531b345c40167b55c993b8aa34a7f4526ef06185","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/AnyUR.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -24,9 +24,9 @@\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.io.Serializable;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n@@ -78,7 +78,7 @@ public B auxClass(final StringPatchItem auxClass) {\n \n         @SuppressWarnings(\"unchecked\")\n         public B auxClasses(final StringPatchItem... auxClasses) {\n-            getInstance().getAuxClasses().addAll(Arrays.asList(auxClasses));\n+            getInstance().getAuxClasses().addAll(List.of(auxClasses));\n             return (B) this;\n         }\n \n@@ -96,7 +96,7 @@ public B plainAttr(final AttrPatch plainAttr) {\n \n         @SuppressWarnings(\"unchecked\")\n         public B plainAttrs(final AttrPatch... plainAttrs) {\n-            getInstance().getPlainAttrs().addAll(Arrays.asList(plainAttrs));\n+            getInstance().getPlainAttrs().addAll(List.of(plainAttrs));\n             return (B) this;\n         }\n \n@@ -120,7 +120,7 @@ public B virAttrs(final Collection<Attr> virAttrs) {\n \n         @SuppressWarnings(\"unchecked\")\n         public B virAttrs(final Attr... virAttrs) {\n-            getInstance().getVirAttrs().addAll(Arrays.asList(virAttrs));\n+            getInstance().getVirAttrs().addAll(List.of(virAttrs));\n             return (B) this;\n         }\n \n@@ -132,7 +132,7 @@ public B resource(final StringPatchItem resource) {\n \n         @SuppressWarnings(\"unchecked\")\n         public B resources(final StringPatchItem... resources) {\n-            getInstance().getResources().addAll(Arrays.asList(resources));\n+            getInstance().getResources().addAll(List.of(resources));\n             return (B) this;\n         }\n "},{"sha":"88e162ca243e5a6f2ffc9fffa1e98a447c12d0d0","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/GroupCR.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupCR.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n@@ -83,7 +82,7 @@ public Builder typeExtension(final TypeExtensionTO typeExtension) {\n         }\n \n         public Builder typeExtensions(final TypeExtensionTO... typeExtensions) {\n-            getInstance().getTypeExtensions().addAll(Arrays.asList(typeExtensions));\n+            getInstance().getTypeExtensions().addAll(List.of(typeExtensions));\n             return this;\n         }\n "},{"sha":"1e12a1b6dbec3ec97956f499be24070413ced65d","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/GroupUR.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupUR.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n@@ -87,7 +86,7 @@ public Builder typeExtension(final TypeExtensionTO typeExtension) {\n         }\n \n         public Builder typeExtensions(final TypeExtensionTO... typeExtensions) {\n-            getInstance().getTypeExtensions().addAll(Arrays.asList(typeExtensions));\n+            getInstance().getTypeExtensions().addAll(List.of(typeExtensions));\n             return this;\n         }\n "},{"sha":"fb57caa95a33b20305e9c2b3f80a72e113f4cb9a","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/MembershipUR.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FMembershipUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FMembershipUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FMembershipUR.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,9 +19,10 @@\n package org.apache.syncope.common.lib.request;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.Arrays;\n+\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n@@ -55,7 +56,7 @@ public Builder plainAttr(final Attr plainAttr) {\n         }\n \n         public Builder plainAttrs(final Attr... plainAttrs) {\n-            getInstance().getPlainAttrs().addAll(Arrays.asList(plainAttrs));\n+            getInstance().getPlainAttrs().addAll(List.of(plainAttrs));\n             return this;\n         }\n \n@@ -70,7 +71,7 @@ public Builder virAttr(final Attr virAttr) {\n         }\n \n         public Builder virAttrs(final Attr... virAttrs) {\n-            getInstance().getVirAttrs().addAll(Arrays.asList(virAttrs));\n+            getInstance().getVirAttrs().addAll(List.of(virAttrs));\n             return this;\n         }\n "},{"sha":"4d67f14cc87aff7b0ceed18dc5c3043a4efcad70","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/PasswordPatch.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FPasswordPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FPasswordPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FPasswordPatch.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import javax.xml.bind.annotation.XmlElement;\n@@ -58,7 +57,7 @@ public Builder resource(final String resource) {\n         }\n \n         public Builder resources(final String... resources) {\n-            getInstance().getResources().addAll(Arrays.asList(resources));\n+            getInstance().getResources().addAll(List.of(resources));\n             return this;\n         }\n "},{"sha":"2e1edaa27afe23e298ea9b84011da9bfe16431fb","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/ResourceDR.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FResourceDR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FResourceDR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FResourceDR.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import javax.ws.rs.PathParam;\n@@ -66,7 +65,7 @@ public Builder resource(final String resource) {\n         }\n \n         public Builder resources(final String... resources) {\n-            instance.getResources().addAll(Arrays.asList(resources));\n+            instance.getResources().addAll(List.of(resources));\n             return this;\n         }\n "},{"sha":"448468e8fcebc437578560e6aab809c92233530c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/UserCR.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -23,9 +23,7 @@\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n@@ -91,7 +89,7 @@ public Builder relationship(final RelationshipTO relationship) {\n         }\n \n         public Builder relationships(final RelationshipTO... relationships) {\n-            getInstance().getRelationships().addAll(Arrays.asList(relationships));\n+            getInstance().getRelationships().addAll(List.of(relationships));\n             return this;\n         }\n \n@@ -106,7 +104,7 @@ public Builder membership(final MembershipTO membership) {\n         }\n \n         public Builder memberships(final MembershipTO... memberships) {\n-            getInstance().getMemberships().addAll(Arrays.asList(memberships));\n+            getInstance().getMemberships().addAll(List.of(memberships));\n             return this;\n         }\n \n@@ -121,7 +119,7 @@ public Builder role(final String role) {\n         }\n \n         public Builder roles(final String... roles) {\n-            getInstance().getRoles().addAll(Arrays.asList(roles));\n+            getInstance().getRoles().addAll(List.of(roles));\n             return this;\n         }\n \n@@ -238,7 +236,7 @@ public List<MembershipTO> getMemberships() {\n \n     @Override\n     public List<MembershipTO> getDynMemberships() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @XmlElementWrapper(name = \"roles\")"},{"sha":"302fb0dc38d70b70053d1a4ad3e0e5402e5745c3","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/UserUR.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,9 +20,10 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n-import java.util.Arrays;\n+\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n@@ -80,7 +81,7 @@ public Builder relationship(final RelationshipUR relationship) {\n         }\n \n         public Builder relationships(final RelationshipUR... relationships) {\n-            getInstance().getRelationships().addAll(Arrays.asList(relationships));\n+            getInstance().getRelationships().addAll(List.of(relationships));\n             return this;\n         }\n \n@@ -95,7 +96,7 @@ public Builder membership(final MembershipUR membership) {\n         }\n \n         public Builder memberships(final MembershipUR... memberships) {\n-            getInstance().getMemberships().addAll(Arrays.asList(memberships));\n+            getInstance().getMemberships().addAll(List.of(memberships));\n             return this;\n         }\n \n@@ -110,7 +111,7 @@ public Builder role(final StringPatchItem role) {\n         }\n \n         public Builder roles(final StringPatchItem... roles) {\n-            getInstance().getRoles().addAll(Arrays.asList(roles));\n+            getInstance().getRoles().addAll(List.of(roles));\n             return this;\n         }\n "},{"sha":"713b6183b63355b30bcc90dd425a9e520bba1c68","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopeFiqlParser.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.common.lib.search;\n \n-import java.util.Collections;\n import java.util.Map;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n@@ -121,9 +120,9 @@ public SearchCondition<T> build() throws SearchParseException {\n                 return new SyncopeFiqlSearchCondition<>(ct, cond);\n             } else {\n                 String templateNameLCase = templateName.toLowerCase();\n-                return new SyncopeFiqlSearchCondition<>(Collections.singletonMap(templateNameLCase, ct),\n-                        Collections.singletonMap(templateNameLCase, name),\n-                        Collections.singletonMap(templateNameLCase, tvalue.getTypeInfo()),\n+                return new SyncopeFiqlSearchCondition<>(Map.of(templateNameLCase, ct),\n+                        Map.of(templateNameLCase, name),\n+                        Map.of(templateNameLCase, tvalue.getTypeInfo()),\n                         cond, operator);\n             }\n         }"},{"sha":"c9ad1f43704b275685112f0a0fec9f1b4c3854fa","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -23,9 +23,9 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.io.Serializable;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n@@ -60,7 +60,7 @@ public Builder plainAttr(final Attr plainAttr) {\n         }\n \n         public Builder plainAttrs(final Attr... plainAttrs) {\n-            instance.getPlainAttrs().addAll(Arrays.asList(plainAttrs));\n+            instance.getPlainAttrs().addAll(List.of(plainAttrs));\n             return this;\n         }\n \n@@ -80,7 +80,7 @@ public Builder virAttrs(final Collection<Attr> virAttrs) {\n         }\n \n         public Builder virAttrs(final Attr... virAttrs) {\n-            instance.getVirAttrs().addAll(Arrays.asList(virAttrs));\n+            instance.getVirAttrs().addAll(List.of(virAttrs));\n             return this;\n         }\n "},{"sha":"24a3a52f94a93f4ab8e9e947f6a978f9a1f92066","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SchemaQuery.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import javax.validation.constraints.NotNull;\n@@ -56,7 +55,7 @@ public Builder anyTypeClasses(final Collection<String> anyTypeClasses) {\n         }\n \n         public Builder anyTypeClasses(final String... anyTypeClasses) {\n-            return anyTypeClasses(Arrays.asList(anyTypeClasses));\n+            return anyTypeClasses(List.of(anyTypeClasses));\n         }\n \n         public Builder keyword(final String keyword) {"},{"sha":"f50f0f5702e9da4c470539746c2584c6490f7bdb","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperConfParamOpsITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOpsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOpsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOpsITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -24,7 +24,6 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n@@ -72,7 +71,7 @@ public void get() {\n         assertEquals(false, booleanValue);\n \n         List<String> stringValues =\n-                Arrays.asList(confParamOps.get(DOMAIN, \"authentication.attributes\", null, String[].class));\n+                List.of(confParamOps.get(DOMAIN, \"authentication.attributes\", null, String[].class));\n         assertNotNull(stringValues);\n         List<String> actualStringValues = new ArrayList<>();\n         actualStringValues.add(\"created\");\n@@ -113,7 +112,7 @@ public void setGetRemove() {\n         stringValues.add(\"stringValue1\");\n         stringValues.add(\"stringValue2\");\n         confParamOps.set(DOMAIN, key, stringValues);\n-        List<String> actualStringValues = Arrays.asList(confParamOps.get(DOMAIN, key, null, String[].class));\n+        List<String> actualStringValues = List.of(confParamOps.get(DOMAIN, key, null, String[].class));\n         assertEquals(stringValues, actualStringValues);\n \n         confParamOps.remove(DOMAIN, key);"},{"sha":"f8c97bb60ce4e5e12c5e226ee5f2e23fa9c8edea","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.lang.reflect.Method;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n@@ -144,7 +143,7 @@ public GroupTO read(final String key) {\n     @Transactional(readOnly = true)\n     public List<GroupTO> own() {\n         if (adminUser.equals(AuthContextUtils.getUsername())) {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         return userDAO.findAllGroups(userDAO.findByUsername(AuthContextUtils.getUsername())).stream()."},{"sha":"c3d6b386ce799b36cf3de22f87ab10b6c81c1c93","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LogicInvocationHandler.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,15 +18,11 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import java.lang.reflect.Method;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n-import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.java.job.AfterHandlingJob;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.aspectj.lang.ProceedingJoinPoint;\n@@ -38,6 +34,10 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n \n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n @Aspect\n public class LogicInvocationHandler {\n \n@@ -66,17 +66,17 @@ public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n         String event = joinPoint.getSignature().getName();\n \n         boolean notificationsAvailable = notificationManager.notificationsAvailable(\n-                AuditElements.EventCategoryType.LOGIC, category, null, event);\n+            AuditElements.EventCategoryType.LOGIC, category, null, event);\n         boolean auditRequested = auditManager.auditRequested(\n-                AuthContextUtils.getUsername(), AuditElements.EventCategoryType.LOGIC, category, null, event);\n+            AuthContextUtils.getUsername(), AuditElements.EventCategoryType.LOGIC, category, null, event);\n \n         AuditElements.Result condition = null;\n         Object output = null;\n         Object before = null;\n \n         try {\n             LOG.debug(\"Before {}.{}({})\", clazz.getSimpleName(), event,\n-                    input == null || input.length == 0 ? StringUtils.EMPTY : Arrays.asList(input));\n+                    input == null || input.length == 0 ? StringUtils.EMPTY : input);\n \n             if (notificationsAvailable || auditRequested) {\n                 try {\n@@ -101,15 +101,15 @@ public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n             if (notificationsAvailable || auditRequested) {\n                 Map<String, Object> jobMap = new HashMap<>();\n                 jobMap.put(AfterHandlingEvent.JOBMAP_KEY, new AfterHandlingEvent(\n-                        AuthContextUtils.getUsername(),\n-                        AuditElements.EventCategoryType.LOGIC,\n-                        category,\n-                        null,\n-                        event,\n-                        condition,\n-                        before,\n-                        output,\n-                        input));\n+                    AuthContextUtils.getUsername(),\n+                    AuditElements.EventCategoryType.LOGIC,\n+                    category,\n+                    null,\n+                    event,\n+                    condition,\n+                    before,\n+                    output,\n+                    input));\n                 AfterHandlingJob.schedule(scheduler, jobMap);\n             }\n         }"},{"sha":"7df156a8801eb2b9c64392e35e53f29c3cc2e064","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -166,7 +165,7 @@ public ProvisioningResult<RealmTO> delete(final String fullPath) {\n             throw SyncopeClientException.build(ClientExceptionType.HasChildren);\n         }\n \n-        Set<String> adminRealms = Collections.singleton(realm.getFullPath());\n+        Set<String> adminRealms = Set.of(realm.getFullPath());\n         AnyCond keyCond = new AnyCond(AttributeCond.Type.ISNOTNULL);\n         keyCond.setSchema(\"key\");\n         SearchCond allMatchingCond = SearchCond.getLeafCond(keyCond);"},{"sha":"bcc40c11e6dca40c117f4dc8d251b6db886c1c63","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -23,7 +23,6 @@\n import java.lang.reflect.Method;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n@@ -352,7 +351,7 @@ public List<BatchResponseItem> deleteExecutions(\n \n         reportExecDAO.findAll(report, startedBefore, startedAfter, endedBefore, endedAfter).forEach(exec -> {\n             BatchResponseItem item = new BatchResponseItem();\n-            item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(exec.getKey()));\n+            item.getHeaders().put(RESTHeaders.RESOURCE_KEY, List.of(exec.getKey()));\n             batchResponseItems.add(item);\n \n             try {"},{"sha":"a61d833aaf06666948c9960142cf6da8792a4307","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -26,7 +26,6 @@\n import java.net.InetAddress;\n import java.net.URI;\n import java.net.UnknownHostException;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -472,7 +471,7 @@ public Pair<Integer, List<GroupTO>> searchAssignableGroups(\n                 SyncopeConstants.FULL_ADMIN_REALMS,\n                 searchCond,\n                 page, size,\n-                Collections.singletonList(orderByClause), AnyTypeKind.GROUP);\n+                List.of(orderByClause), AnyTypeKind.GROUP);\n         List<GroupTO> result = matching.stream().\n                 map(group -> groupDataBinder.getGroupTO(group, false)).collect(Collectors.toList());\n \n@@ -503,7 +502,7 @@ public void exportInternalStorageContent(final OutputStream os) {\n                     uwfAdapter.getPrefix(),\n                     gwfAdapter.getPrefix(),\n                     awfAdapter.getPrefix());\n-            LOG.debug(\"Interal storage content successfully exported\");\n+            LOG.debug(\"Internal storage content successfully exported\");\n         } catch (Exception e) {\n             LOG.error(\"While exporting internal storage content\", e);\n         }"},{"sha":"a8b18faab559dc81efe4333065f8d4dd78bf0626","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.lang.reflect.Method;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n@@ -387,7 +386,7 @@ public List<BatchResponseItem> deleteExecutions(\n \n         taskExecDAO.findAll(task, startedBefore, startedAfter, endedBefore, endedAfter).forEach(exec -> {\n             BatchResponseItem item = new BatchResponseItem();\n-            item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(exec.getKey()));\n+            item.getHeaders().put(RESTHeaders.RESOURCE_KEY, List.of(exec.getKey()));\n             batchResponseItems.add(item);\n \n             try {"},{"sha":"46819fd31b34bc0fbe17e9f0bc2853b216d1ec7c","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -171,7 +170,7 @@ public ProvisioningResult<UserTO> selfUpdate(final UserUR userUR, final boolean\n \n         // Ensures that, if the self update above moves the user into a status from which no authentication\n         // is possible, the existing Access Token is clean up to avoid issues with future authentications\n-        List<String> authStatuses = Arrays.asList(confParamOps.get(AuthContextUtils.getDomain(),\n+        List<String> authStatuses = List.of(confParamOps.get(AuthContextUtils.getDomain(),\n                 \"authentication.statuses\", new String[] {}, String[].class));\n         if (!authStatuses.contains(updated.getEntity().getStatus())) {\n             String accessToken = accessTokenDAO.findByOwner(updated.getEntity().getUsername()).getKey();\n@@ -262,7 +261,7 @@ public ProvisioningResult<UserTO> status(final StatusR statusR, final boolean nu\n                 updated.getRight(),\n                 Collections.<LogicActions>emptyList(),\n                 false,\n-                Collections.<String>emptySet());\n+                Set.of());\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + IdRepoEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n@@ -275,7 +274,7 @@ public ProvisioningResult<UserTO> selfStatus(final StatusR statusR, final boolea\n                 updated.getRight(),\n                 Collections.<LogicActions>emptyList(),\n                 false,\n-                Collections.<String>emptySet());\n+                Set.of());\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.MUST_CHANGE_PASSWORD + \"')\")"},{"sha":"45b28a3e08283d74e4c5c94af7b55e8ccd7dee0c","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/audit/DefaultAuditAppender.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultAuditAppender.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.logic.audit;\n \n-import java.util.Collections;\n import java.util.Set;\n import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n@@ -39,7 +38,7 @@ public void init() {\n \n     @Override\n     public Set<AuditLoggerName> getEvents() {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n \n     @Override"},{"sha":"aa4220e84c1fd60ab88122ab9ccfb8f302388f19","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/audit/DefaultRewriteAuditAppender.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultRewriteAuditAppender.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.logic.audit;\n \n-import java.util.Collections;\n import java.util.Set;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n@@ -53,7 +52,7 @@ public void initRewriteAppender() {\n \n     @Override\n     public Set<AuditLoggerName> getEvents() {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n \n     @Override"},{"sha":"545fde218fab005d995c5caa172792456b06464a","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RESTCXFContext.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRESTCXFContext.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,10 +21,11 @@\n import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;\n import com.fasterxml.jackson.jaxrs.yaml.JacksonJaxbYAMLProvider;\n import io.swagger.v3.oas.models.security.SecurityScheme;\n-import java.util.Arrays;\n-import java.util.Collections;\n+\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.concurrent.Executor;\n import javax.annotation.Resource;\n import javax.servlet.ServletRequestListener;\n@@ -85,14 +86,14 @@ public DateParamConverterProvider dateParamConverterProvider() {\n     @Bean\n     public JAXBElementProvider<?> jaxbProvider() {\n         JAXBElementProvider<?> jaxbProvider = new JAXBElementProvider<>();\n-        jaxbProvider.setNamespacePrefixes(Collections.singletonMap(SyncopeConstants.NS, SyncopeConstants.NS_PREFIX));\n+        jaxbProvider.setNamespacePrefixes(Map.of(SyncopeConstants.NS, SyncopeConstants.NS_PREFIX));\n \n         DocumentDepthProperties documentDepthProperties = new DocumentDepthProperties();\n         documentDepthProperties.setInnerElementCountThreshold(500);\n         jaxbProvider.setDepthProperties(documentDepthProperties);\n \n         jaxbProvider.setCollectionWrapperMap(\n-                Collections.singletonMap(\"org.apache.syncope.common.lib.policy.PolicyTO\", \"policies\"));\n+                Map.of(\"org.apache.syncope.common.lib.policy.PolicyTO\", \"policies\"));\n \n         return jaxbProvider;\n     }\n@@ -190,7 +191,7 @@ public OpenApiFeature openapiFeature() {\n         openapiFeature.setContactEmail(\"dev@syncope.apache.org\");\n         openapiFeature.setContactUrl(\"http://syncope.apache.org\");\n         openapiFeature.setScan(false);\n-        openapiFeature.setResourcePackages(Collections.singleton(\"org.apache.syncope.common.rest.api.service\"));\n+        openapiFeature.setResourcePackages(Set.of(\"org.apache.syncope.common.rest.api.service\"));\n \n         SyncopeOpenApiCustomizer openApiCustomizer = new SyncopeOpenApiCustomizer(ctx.getEnvironment());\n         openApiCustomizer.setDynamicBasePath(false);\n@@ -218,7 +219,7 @@ public Server restContainer() {\n         restContainer.setBus(bus);\n         restContainer.setAddress(\"/\");\n         restContainer.setStaticSubresourceResolution(true);\n-        restContainer.setBasePackages(Arrays.asList(\n+        restContainer.setBasePackages(List.of(\n                 \"org.apache.syncope.common.rest.api.service\",\n                 \"org.apache.syncope.core.rest.cxf.service\"));\n \n@@ -228,7 +229,7 @@ public Server restContainer() {\n         properties.put(\"convert.wadl.resources.to.dom\", \"false\");\n         restContainer.setProperties(properties);\n \n-        restContainer.setProviders(Arrays.asList(\n+        restContainer.setProviders(List.of(\n                 dateParamConverterProvider(),\n                 jaxbProvider(),\n                 jsonProvider(),\n@@ -240,15 +241,15 @@ public Server restContainer() {\n                 addETagFilter(),\n                 wadlGenerator()));\n \n-        restContainer.setInInterceptors(Arrays.asList(\n+        restContainer.setInInterceptors(List.of(\n                 gzipInInterceptor(),\n                 validationInInterceptor()));\n \n-        restContainer.setOutInterceptors(Arrays.asList(\n+        restContainer.setOutInterceptors(List.of(\n                 gzipOutInterceptor(),\n                 validationOutInterceptor()));\n \n-        restContainer.setFeatures(Arrays.asList(openapiFeature()));\n+        restContainer.setFeatures(List.of(openapiFeature()));\n \n         restContainer.setApplicationContext(ctx);\n         return restContainer.create();"},{"sha":"e88e66330fdd900ca46daed8127122a364f929f1","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -31,8 +31,6 @@\n import io.swagger.v3.oas.models.servers.Server;\n import java.net.URL;\n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n@@ -78,7 +76,7 @@ private void init() {\n                         try {\n                             javaDocProvider = new JavaDocProvider(javaDocPaths);\n                         } catch (Exception e) {\n-                            LOG.error(\"Could not set javadoc paths from {}\", Arrays.asList(javaDocPaths), e);\n+                            LOG.error(\"Could not set javadoc paths from {}\", List.of(javaDocPaths), e);\n                         }\n                     }\n                 } else {\n@@ -103,7 +101,7 @@ public OpenAPIConfiguration customize(final OpenAPIConfiguration configuration)\n                 JAXRSUtils.getCurrentMessage(), null, MessageContext.class);\n \n         String url = StringUtils.substringBeforeLast(ctx.getUriInfo().getRequestUri().getRawPath(), \"/\");\n-        configuration.getOpenAPI().setServers(Collections.singletonList(new Server().url(url)));\n+        configuration.getOpenAPI().setServers(List.of(new Server().url(url)));\n \n         return configuration;\n     }"},{"sha":"8356a9d337caffac1ac48ed3d6c21c52c69d7532","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WadlGenerator.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import java.lang.annotation.Annotation;\n import java.net.URL;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n@@ -66,7 +65,7 @@ private void init() {\n                         try {\n                             super.setJavaDocPaths(javaDocPaths);\n                         } catch (Exception e) {\n-                            LOG.error(\"Could not set javadoc paths from {}\", Arrays.asList(javaDocPaths), e);\n+                            LOG.error(\"Could not set javadoc paths from {}\", List.of(javaDocPaths), e);\n                         }\n                     }\n                 } else {"},{"sha":"75002c3654d84eca05d28bd1f286312aa32c71ee","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemRequest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemRequest.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,9 +20,9 @@\n \n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.Enumeration;\n+import java.util.List;\n import java.util.stream.Collectors;\n import javax.servlet.ReadListener;\n import javax.servlet.ServletInputStream;\n@@ -134,7 +134,7 @@ public Enumeration<String> getHeaders(final String name) {\n                 ? Collections.enumeration(\n                         batchItem.getHeaders().get(name).stream().map(Object::toString).collect(Collectors.toList()))\n                 : HttpHeaders.CONTENT_TYPE.equals(name) || HttpHeaders.ACCEPT.equals(name)\n-                ? Collections.enumeration(Arrays.asList(MediaType.ALL_VALUE))\n+                ? Collections.enumeration(List.of(MediaType.ALL_VALUE))\n                 : super.getHeaders(name);\n     }\n "},{"sha":"b1dc4e087d7c314755e4e83f0719aa32b07a2417","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemResponse.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemResponse.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -23,7 +23,6 @@\n import java.io.PrintWriter;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -162,7 +161,7 @@ public String getHeader(final String name) {\n     public Collection<String> getHeaders(final String name) {\n         return headers.containsKey(name)\n                 ? headers.get(name).stream().map(Object::toString).collect(Collectors.toList())\n-                : Collections.emptyList();\n+                : List.of();\n     }\n \n     @Override"},{"sha":"24e80d0139c3713811095fa42968b0fdcedb8b36","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n@@ -239,7 +238,7 @@ public Response deassociate(final ResourceDR req) {\n             batchResponseItems = req.getResources().stream().map(resource -> {\n                 BatchResponseItem item = new BatchResponseItem();\n \n-                item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(resource));\n+                item.getHeaders().put(RESTHeaders.RESOURCE_KEY, List.of(resource));\n \n                 item.setStatus(updated.getEntity().getResources().contains(resource)\n                         ? Response.Status.BAD_REQUEST.getStatusCode()\n@@ -248,7 +247,7 @@ public Response deassociate(final ResourceDR req) {\n                 if (getPreference() == Preference.RETURN_NO_CONTENT) {\n                     item.getHeaders().put(\n                             RESTHeaders.PREFERENCE_APPLIED,\n-                            Arrays.asList(Preference.RETURN_NO_CONTENT.toString()));\n+                            List.of(Preference.RETURN_NO_CONTENT.toString()));\n                 } else {\n                     item.setContent(POJOHelper.serialize(updated.getEntity()));\n                 }\n@@ -260,18 +259,18 @@ public Response deassociate(final ResourceDR req) {\n                     map(status -> {\n                         BatchResponseItem item = new BatchResponseItem();\n \n-                        item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(status.getResource()));\n+                        item.getHeaders().put(RESTHeaders.RESOURCE_KEY, List.of(status.getResource()));\n \n                         item.setStatus(status.getStatus().getHttpStatus());\n \n                         if (status.getFailureReason() != null) {\n-                            item.getHeaders().put(RESTHeaders.ERROR_INFO, Arrays.asList(status.getFailureReason()));\n+                            item.getHeaders().put(RESTHeaders.ERROR_INFO, List.of(status.getFailureReason()));\n                         }\n \n                         if (getPreference() == Preference.RETURN_NO_CONTENT) {\n                             item.getHeaders().put(\n                                     RESTHeaders.PREFERENCE_APPLIED,\n-                                    Arrays.asList(Preference.RETURN_NO_CONTENT.toString()));\n+                                    List.of(Preference.RETURN_NO_CONTENT.toString()));\n                         } else {\n                             item.setContent(POJOHelper.serialize(updated.getEntity()));\n                         }\n@@ -328,7 +327,7 @@ public Response associate(final ResourceAR req) {\n             batchResponseItems = req.getResources().stream().map(resource -> {\n                 BatchResponseItem item = new BatchResponseItem();\n \n-                item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(resource));\n+                item.getHeaders().put(RESTHeaders.RESOURCE_KEY, List.of(resource));\n \n                 item.setStatus(updated.getEntity().getResources().contains(resource)\n                         ? Response.Status.OK.getStatusCode()\n@@ -337,7 +336,7 @@ public Response associate(final ResourceAR req) {\n                 if (getPreference() == Preference.RETURN_NO_CONTENT) {\n                     item.getHeaders().put(\n                             RESTHeaders.PREFERENCE_APPLIED,\n-                            Arrays.asList(Preference.RETURN_NO_CONTENT.toString()));\n+                            List.of(Preference.RETURN_NO_CONTENT.toString()));\n                 } else {\n                     item.setContent(POJOHelper.serialize(updated.getEntity()));\n                 }\n@@ -349,18 +348,18 @@ public Response associate(final ResourceAR req) {\n                     map(status -> {\n                         BatchResponseItem item = new BatchResponseItem();\n \n-                        item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(status.getResource()));\n+                        item.getHeaders().put(RESTHeaders.RESOURCE_KEY, List.of(status.getResource()));\n \n                         item.setStatus(status.getStatus().getHttpStatus());\n \n                         if (status.getFailureReason() != null) {\n-                            item.getHeaders().put(RESTHeaders.ERROR_INFO, Arrays.asList(status.getFailureReason()));\n+                            item.getHeaders().put(RESTHeaders.ERROR_INFO, List.of(status.getFailureReason()));\n                         }\n \n                         if (getPreference() == Preference.RETURN_NO_CONTENT) {\n                             item.getHeaders().put(\n                                     RESTHeaders.PREFERENCE_APPLIED,\n-                                    Arrays.asList(Preference.RETURN_NO_CONTENT.toString()));\n+                                    List.of(Preference.RETURN_NO_CONTENT.toString()));\n                         } else {\n                             item.setContent(POJOHelper.serialize(updated.getEntity()));\n                         }"},{"sha":"2e2f2457b15010268dbe1a500761103fbcd94922","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import javax.ws.rs.core.Context;\n import javax.ws.rs.core.EntityTag;\n@@ -180,7 +179,7 @@ protected SearchCond getSearchCond(final String fiql, final String realm) {\n \n     protected List<OrderByClause> getOrderByClauses(final String orderBy) {\n         if (StringUtils.isBlank(orderBy)) {\n-            return Collections.<OrderByClause>emptyList();\n+            return List.of();\n         }\n \n         List<OrderByClause> result = new ArrayList<>();"},{"sha":"0e1bd9b08f107ba2bc27008fbd2b4e458cea5ab5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AllowedSchemas.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAllowedSchemas.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAllowedSchemas.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAllowedSchemas.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -38,7 +37,7 @@ public Set<S> getForSelf() {\n     }\n \n     public Set<S> getForMembership(final Group group) {\n-        return forMemberships.get(group) == null ? Collections.<S>emptySet() : forMemberships.get(group);\n+        return forMemberships.get(group) == null ? Set.of() : forMemberships.get(group);\n     }\n \n     public Map<Group, Set<S>> getForMemberships() {"},{"sha":"6689bfcf6697776f4a5887f4969703f0509c8f30","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/LinkingMappingItem.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n@@ -139,6 +138,6 @@ public boolean add(final Implementation transformer) {\n \n     @Override\n     public List<? extends Implementation> getTransformers() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n }"},{"sha":"7b38539a10821979eaf85ae1f602c5dc2b9dac78","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAnyDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -120,7 +120,7 @@ public <A extends Any<?>> List<A> findByPlainAttrValue(\n \n         if (schema == null) {\n             LOG.error(\"No PlainSchema\");\n-            return Collections.<A>emptyList();\n+            return List.of();\n         }\n \n         Query query = entityManager().createNativeQuery(\n@@ -193,7 +193,7 @@ public <A extends Any<?>> List<A> findByDerAttrValue(\n \n         if (derSchema == null) {\n             LOG.error(\"No DerSchema\");\n-            return Collections.<A>emptyList();\n+            return List.of();\n         }\n \n         Parser parser = new Parser(new StringReader(derSchema.getExpression()));\n@@ -239,7 +239,7 @@ public <A extends Any<?>> List<A> findByDerAttrValue(\n \n         if (attrValues.size() != identifiers.size()) {\n             LOG.error(\"Ambiguous JEXL expression resolution: literals and values have different size\");\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         Map<String, List<Object>> clauses = new LinkedHashMap<>();"},{"sha":"cea2564b9616da774f3170909c8d5facf2301842","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONPlainSchemaDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONPlainSchemaDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -28,7 +27,7 @@ public class JPAJSONPlainSchemaDAO extends JPAPlainSchemaDAO {\n     @Override\n     public <T extends PlainAttr<?>> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {\n         // not possible\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"883f6a9e89599935c4fb3d0936e7c4666b73e122","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnyDAO.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -78,7 +76,7 @@ protected String attrValueMatch(\n             } else {\n                 ((JSONPlainAttr) container).add(attrValue);\n             }\n-            return \"JSON_CONTAINS(plainAttrs, '\" + POJOHelper.serialize(Arrays.asList(container)) + \"')\";\n+            return \"JSON_CONTAINS(plainAttrs, '\" + POJOHelper.serialize(List.of(container)) + \"')\";\n         }\n     }\n \n@@ -95,7 +93,7 @@ protected List<Object> findByDerAttrValue(\n             final Map<String, List<Object>> clauses) {\n \n         if (clauses.isEmpty()) {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         Set<Object> result = new HashSet<>();"},{"sha":"51fc9845e3942bfecaf0aec4beb607b93bf434b8","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnySearchDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Arrays;\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -143,7 +142,7 @@ private void fillAttrQuery(\n                 }\n \n                 query.append(\"JSON_CONTAINS(plainAttrs, '\").\n-                        append(POJOHelper.serialize(Arrays.asList(container))).\n+                        append(POJOHelper.serialize(List.of(container))).\n                         append(\"')\");\n             } else {\n                 String key = key(schema.getType());"},{"sha":"93d9b2d109059ae53efcfc90f0aac961ab2b91b5","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnyDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n import java.util.StringJoiner;\n@@ -69,7 +68,7 @@ protected String attrValueMatch(\n             } else {\n                 ((JSONPlainAttr) container).add(attrValue);\n             }\n-            return \"plainAttrs @> '\" + POJOHelper.serialize(Arrays.asList(container)) + \"'::jsonb\";\n+            return \"plainAttrs @> '\" + POJOHelper.serialize(List.of(container)) + \"'::jsonb\";\n         }\n     }\n "},{"sha":"487a1d1867e8d24d5df8c358e8c38dfc6d1f3727","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.text.ParseException;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -137,7 +136,7 @@ private void fillAttrQuery(\n                 }\n \n                 query.append(\"plainAttrs @> '\").\n-                        append(POJOHelper.serialize(Arrays.asList(container))).\n+                        append(POJOHelper.serialize(List.of(container))).\n                         append(\"'::jsonb\");\n             } else {\n                 String key = key(schema.getType());"},{"sha":"940d87b880c9675016c12f963c0082986948f85f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/DomainConfFactory.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,8 @@\n import com.zaxxer.hikari.HikariDataSource;\n import java.io.ByteArrayInputStream;\n import java.nio.charset.StandardCharsets;\n-import java.util.Collections;\n+import java.util.Map;\n+\n import javax.persistence.EntityManagerFactory;\n import javax.sql.DataSource;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n@@ -133,7 +134,7 @@ public void register(final Domain domain) {\n                 addPropertyValue(\"jpaVendorAdapter\", vendorAdapter).\n                 addPropertyReference(\"commonEntityManagerFactoryConf\", \"commonEMFConf\");\n         if (env.containsProperty(\"openjpaMetaDataFactory\")) {\n-            emf.addPropertyValue(\"jpaPropertyMap\", Collections.singletonMap(\n+            emf.addPropertyValue(\"jpaPropertyMap\", Map.of(\n                     \"openjpa.MetaDataFactory\",\n                     env.getProperty(\"openjpaMetaDataFactory\").replace(\"##orm##\", domain.getOrm())));\n         }"},{"sha":"b411fd30719747320f599ce9c98b1921cf5e8e3f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/MasterDomain.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,8 @@\n import com.zaxxer.hikari.HikariDataSource;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.Collections;\n+import java.util.Map;\n+\n import javax.sql.DataSource;\n import org.apache.syncope.core.persistence.jpa.spring.CommonEntityManagerFactoryConf;\n import org.apache.syncope.core.persistence.jpa.spring.DomainEntityManagerFactoryBean;\n@@ -153,7 +154,7 @@ public DomainEntityManagerFactoryBean masterEntityManagerFactory() {\n         masterEntityManagerFactory.setCommonEntityManagerFactoryConf(commonEMFConf);\n \n         if (env.containsProperty(\"openjpaMetaDataFactory\")) {\n-            masterEntityManagerFactory.setJpaPropertyMap(Collections.singletonMap(\n+            masterEntityManagerFactory.setJpaPropertyMap(Map.of(\n                     \"openjpa.MetaDataFactory\",\n                     env.getProperty(\"openjpaMetaDataFactory\").replace(\"##orm##\", orm)));\n         }"},{"sha":"905c7ea217e3db394ab8312387809f0c86496d38","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -32,7 +32,6 @@\n import java.sql.Timestamp;\n import java.sql.Types;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n@@ -51,6 +50,8 @@\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n+\n+import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n@@ -90,19 +91,19 @@ public class XMLContentExporter implements ContentExporter {\n \n     private static final Logger LOG = LoggerFactory.getLogger(XMLContentExporter.class);\n \n-    private static final Set<String> TABLE_PREFIXES_TO_BE_EXCLUDED = new HashSet<>(Arrays.asList(new String[] {\n+    private static final Set<String> TABLE_PREFIXES_TO_BE_EXCLUDED = SetUtils.hashSet(\n         \"QRTZ_\", \"LOGGING\", JPAReportExec.TABLE, JPATaskExec.TABLE,\n         JPAUser.TABLE, JPAUPlainAttr.TABLE, JPAUPlainAttrValue.TABLE, JPAUPlainAttrUniqueValue.TABLE,\n         JPAURelationship.TABLE, JPAUMembership.TABLE,\n         JPAAnyObject.TABLE, JPAAPlainAttr.TABLE, JPAAPlainAttrValue.TABLE, JPAAPlainAttrUniqueValue.TABLE,\n         JPAARelationship.TABLE, JPAAMembership.TABLE, JPAAccessToken.TABLE\n-    }));\n+    );\n \n     private static final Map<String, String> TABLES_TO_BE_FILTERED =\n-            Collections.singletonMap(\"TASK\", \"DTYPE <> 'PropagationTask'\");\n+            Map.of(\"TASK\", \"DTYPE <> 'PropagationTask'\");\n \n     private static final Map<String, Set<String>> COLUMNS_TO_BE_NULLIFIED =\n-            Collections.singletonMap(\"SYNCOPEGROUP\", Collections.singleton(\"USEROWNER_ID\"));\n+            Map.of(\"SYNCOPEGROUP\", Set.of(\"USEROWNER_ID\"));\n \n     @Autowired\n     private DomainHolder domainHolder;"},{"sha":"b9ee51d80f1478e788e629c501bd3f917d3501d3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -197,7 +197,7 @@ public List<A> findByPlainAttrValue(\n \n         if (schema == null) {\n             LOG.error(\"No PlainSchema\");\n-            return Collections.<A>emptyList();\n+            return List.of();\n         }\n \n         String entityName = schema.isUniqueConstraint()\n@@ -314,7 +314,7 @@ private Set<String> getWhereClause(final String expression, final String value,\n \n         if (attrValues.size() != identifiers.size()) {\n             LOG.error(\"Ambiguous JEXL expression resolution: literals and values have different size\");\n-            return Collections.emptySet();\n+            return Set.of();\n         }\n \n         // clauses to be used with INTERSECTed queries\n@@ -392,7 +392,7 @@ private Set<String> getWhereClause(final String expression, final String value,\n     public List<A> findByDerAttrValue(final DerSchema schema, final String value, final boolean ignoreCaseMatch) {\n         if (schema == null) {\n             LOG.error(\"No DerSchema\");\n-            return Collections.<A>emptyList();\n+            return List.of();\n         }\n \n         // query string"},{"sha":"8ad915702fb71e58e07a06b2dc3e31cb13568b95","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n@@ -127,7 +126,7 @@ public int count(final Set<String> adminRealms, final SearchCond cond, final Any\n \n     @Override\n     public <T extends Any<?>> List<T> search(final SearchCond cond, final AnyTypeKind kind) {\n-        return search(cond, Collections.<OrderByClause>emptyList(), kind);\n+        return search(cond, List.of(), kind);\n     }\n \n     @Override\n@@ -332,21 +331,21 @@ public <T extends Any<?>> List<T> search(\n \n         if (adminRealms == null || adminRealms.isEmpty()) {\n             LOG.error(\"No realms provided\");\n-            return Collections.<T>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"Search condition:\\n{}\", cond);\n         if (cond == null || !cond.isValid()) {\n             LOG.error(\"Invalid search condition:\\n{}\", cond);\n-            return Collections.<T>emptyList();\n+            return List.of();\n         }\n \n         List<OrderByClause> effectiveOrderBy;\n         if (orderBy.isEmpty()) {\n             OrderByClause keyClause = new OrderByClause();\n             keyClause.setField(kind == AnyTypeKind.USER ? \"username\" : \"name\");\n             keyClause.setDirection(OrderByClause.Direction.ASC);\n-            effectiveOrderBy = Collections.singletonList(keyClause);\n+            effectiveOrderBy = List.of(keyClause);\n         } else {\n             effectiveOrderBy = orderBy.stream().\n                     filter(clause -> !ArrayUtils.contains(ORDER_BY_NOT_ALLOWED, clause.getField()))."},{"sha":"6f9f592584d113589cdfb57a247d8834748cb672","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -121,7 +121,7 @@ protected void securityChecks(final AnyObject anyObject) {\n         Map<String, Set<String>> authorizations = AuthContextUtils.getAuthorizations();\n         Set<String> authRealms = authorizations.containsKey(AnyEntitlement.READ.getFor(anyObject.getType().getKey()))\n                 ? authorizations.get(AnyEntitlement.READ.getFor(anyObject.getType().getKey()))\n-                : Collections.emptySet();\n+                : Set.of();\n         boolean authorized = authRealms.stream().\n                 anyMatch(realm -> anyObject.getRealm().getFullPath().startsWith(realm));\n         if (!authorized) {"},{"sha":"90ef6807e2201d02d91a9937a9485af459edf3fa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n@@ -210,7 +209,7 @@ protected <T extends Any<?>> List<T> doSearch(\n             LOG.error(\"While searching for {}\", kind, e);\n         }\n \n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     protected int setParameter(final List<Object> parameters, final Object parameter) {"},{"sha":"8702a276eba4f063604a0bca68a9aa61e273322f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Collections;\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n@@ -96,13 +95,13 @@ public void delete(final String key) {\n             return;\n         }\n \n-        for (PlainSchema schema : plainSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n+        for (PlainSchema schema : plainSchemaDAO.findByAnyTypeClasses(List.of(anyTypeClass))) {\n             schema.setAnyTypeClass(null);\n         }\n-        for (DerSchema schema : derSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n+        for (DerSchema schema : derSchemaDAO.findByAnyTypeClasses(List.of(anyTypeClass))) {\n             schema.setAnyTypeClass(null);\n         }\n-        for (VirSchema schema : virSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n+        for (VirSchema schema : virSchemaDAO.findByAnyTypeClasses(List.of(anyTypeClass))) {\n             schema.setAnyTypeClass(null);\n         }\n "},{"sha":"4be0788cf70428ab46d5c5bb42e3976d15eb4f0a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -81,7 +80,7 @@ public ConnInstance authFind(final String key) {\n     public List<ConnInstance> findAll() {\n         final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(IdMEntitlement.CONNECTOR_LIST);\n         if (authRealms == null || authRealms.isEmpty()) {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         TypedQuery<ConnInstance> query = entityManager().createQuery("},{"sha":"6e075890ae80f5f7e2112c409bdb5ff098e3dd34","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n@@ -182,7 +181,7 @@ public List<ExternalResource> findByPolicy(final Policy policy) {\n     public List<ExternalResource> findAll() {\n         final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(IdMEntitlement.RESOURCE_LIST);\n         if (authRealms == null || authRealms.isEmpty()) {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         TypedQuery<ExternalResource> query = entityManager().createQuery("},{"sha":"1fb835a681f987cb63a68723fbc4855c7eb7113e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -41,7 +41,6 @@\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -133,7 +132,7 @@ protected void securityChecks(final Group group) {\n         Map<String, Set<String>> authorizations = AuthContextUtils.getAuthorizations();\n         Set<String> authRealms = authorizations.containsKey(IdRepoEntitlement.GROUP_READ)\n                 ? authorizations.get(IdRepoEntitlement.GROUP_READ)\n-                : Collections.emptySet();\n+                : Set.of();\n \n         boolean authorized = authRealms.stream().anyMatch(realm -> group.getRealm().getFullPath().startsWith(realm)\n                 || realm.equals(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey())));\n@@ -169,7 +168,7 @@ public Group findByName(final String name) {\n     public List<Group> findOwnedByUser(final String userKey) {\n         User owner = userDAO.find(userKey);\n         if (owner == null) {\n-            return Collections.<Group>emptyList();\n+            return List.of();\n         }\n \n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(anyUtils().anyClass().getSimpleName())\n@@ -188,7 +187,7 @@ public List<Group> findOwnedByUser(final String userKey) {\n     public List<Group> findOwnedByGroup(final String groupKey) {\n         Group owner = find(groupKey);\n         if (owner == null) {\n-            return Collections.<Group>emptyList();\n+            return List.of();\n         }\n \n         TypedQuery<Group> query = entityManager().createQuery(\n@@ -258,7 +257,7 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n                         cond,\n                         page,\n                         AnyDAO.DEFAULT_PAGE_SIZE,\n-                        Collections.<OrderByClause>emptyList(),\n+                        List.of(),\n                         AnyTypeKind.USER);\n \n                 matching.forEach(user -> {\n@@ -282,7 +281,7 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n                         cond,\n                         page,\n                         AnyDAO.DEFAULT_PAGE_SIZE,\n-                        Collections.<OrderByClause>emptyList(),\n+                        List.of(),\n                         AnyTypeKind.ANY_OBJECT);\n \n                 matching.forEach(anyObject -> {\n@@ -501,7 +500,7 @@ public Set<String> removeDynMemberships(final AnyObject anyObject) {\n     @SuppressWarnings(\"unchecked\")\n     public List<String> findUDynMembers(final Group group) {\n         if (group.getUDynMembership() == null) {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         Query query = entityManager().createNativeQuery("},{"sha":"14f463dc81af80070563a4716b4732a1c8e65c68","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,13 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Collections;\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n@@ -87,7 +85,7 @@ public void delete(final String key) {\n         }\n \n         taskDAO.findAll(\n-                TaskType.NOTIFICATION, null, notification, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n+                TaskType.NOTIFICATION, null, notification, null, null, -1, -1, List.of()).\n                 stream().map(Entity::getKey).forEach(this::delete);\n \n         entityManager().remove(notification);"},{"sha":"48f54744f2b3f2d08fccc7f2a0224d0719a21438","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n@@ -149,7 +148,7 @@ public void delete(final String key) {\n     @SuppressWarnings(\"unchecked\")\n     public List<String> findDynMembers(final Role role) {\n         if (role.getDynMembership() == null) {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         Query query = entityManager().createNativeQuery(\"SELECT any_id FROM \" + DYNMEMB_TABLE + \" WHERE role_id=?\");"},{"sha":"4d9dac3722e51b768cb109e5ce776b17bcf96328","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.lang.reflect.Field;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.ManyToOne;\n@@ -203,7 +202,7 @@ public <T extends Task> List<T> findToExec(final TaskType type) {\n     @Transactional(readOnly = true)\n     @Override\n     public <T extends Task> List<T> findAll(final TaskType type) {\n-        return findAll(type, null, null, null, null, -1, -1, Collections.<OrderByClause>emptyList());\n+        return findAll(type, null, null, null, null, -1, -1, List.of());\n     }\n \n     private StringBuilder buildFindAllQuery(\n@@ -460,7 +459,7 @@ public void delete(final Task task) {\n \n     @Override\n     public void deleteAll(final ExternalResource resource, final TaskType type) {\n-        findAll(type, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n+        findAll(type, resource, null, null, null, -1, -1, List.of()).\n                 stream().map(Entity::getKey).forEach(this::delete);\n     }\n "},{"sha":"0c36181411f185d2b19003ed6b69ec7c43798f02","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n@@ -159,7 +158,7 @@ protected void securityChecks(final User user) {\n             Map<String, Set<String>> authorizations = AuthContextUtils.getAuthorizations();\n             Set<String> authRealms = authorizations.containsKey(IdRepoEntitlement.USER_READ)\n                     ? authorizations.get(IdRepoEntitlement.USER_READ)\n-                    : Collections.emptySet();\n+                    : Set.of();\n             boolean authorized = authRealms.stream().\n                     anyMatch(realm -> user.getRealm().getFullPath().startsWith(realm));\n             if (!authorized) {"},{"sha":"332423bd77131a5e3c579a259cdec64bd84d3bd1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -104,7 +104,7 @@ public List<String> getValuesAsStrings() {\n         if (getUniqueValue() == null) {\n             result = getValues().stream().map(PlainAttrValue::getValueAsString).collect(Collectors.toList());\n         } else {\n-            result = Collections.singletonList(getUniqueValue().getValueAsString());\n+            result = List.of(getUniqueValue().getValueAsString());\n         }\n \n         return Collections.unmodifiableList(result);"},{"sha":"5affad437e8305a59f4759bddee6cb0559b2f84e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n@@ -186,7 +185,7 @@ public void setVersion(final String version) {\n     public Set<ConnConfProperty> getConf() {\n         Set<ConnConfProperty> configuration = new HashSet<>();\n         if (!StringUtils.isBlank(jsonConf)) {\n-            configuration.addAll(Arrays.asList(POJOHelper.deserialize(jsonConf, ConnConfProperty[].class)));\n+            configuration.addAll(List.of(POJOHelper.deserialize(jsonConf, ConnConfProperty[].class)));\n         }\n \n         return configuration;"},{"sha":"9b938fbcbc56a9db8d447fd80430dc2396b50802","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAGatewayRoute.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAGatewayRoute.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.net.URI;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n \n@@ -98,8 +96,8 @@ public void setTarget(final URI target) {\n     @Override\n     public List<GatewayRouteFilter> getFilters() {\n         return filters == null\n-                ? Collections.emptyList()\n-                : Arrays.asList(POJOHelper.deserialize(filters, GatewayRouteFilter[].class));\n+                ? List.of()\n+                : List.of(POJOHelper.deserialize(filters, GatewayRouteFilter[].class));\n     }\n \n     @Override\n@@ -110,8 +108,8 @@ public void setFilters(final List<GatewayRouteFilter> filters) {\n     @Override\n     public List<GatewayRoutePredicate> getPredicates() {\n         return predicates == null\n-                ? Collections.emptyList()\n-                : Arrays.asList(POJOHelper.deserialize(predicates, GatewayRoutePredicate[].class));\n+                ? List.of()\n+                : List.of(POJOHelper.deserialize(predicates, GatewayRoutePredicate[].class));\n     }\n \n     @Override"},{"sha":"020d4a534ea8d1ec76bec0fda98d7d6a9f9b926d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity.resource;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n@@ -212,7 +210,7 @@ public Optional<? extends Provision> getProvision(final ObjectClass objectClass)\n \n     @Override\n     public List<? extends Provision> getProvisions() {\n-        return provisions == null ? Collections.emptyList() : provisions;\n+        return provisions == null ? List.of() : provisions;\n     }\n \n     @Override\n@@ -335,7 +333,7 @@ public void setPushPolicy(final PushPolicy pushPolicy) {\n     public Set<ConnConfProperty> getConfOverride() {\n         Set<ConnConfProperty> confOverride = new HashSet<>();\n         if (!StringUtils.isBlank(jsonConf)) {\n-            confOverride.addAll(Arrays.asList(POJOHelper.deserialize(jsonConf, ConnConfProperty[].class)));\n+            confOverride.addAll(List.of(POJOHelper.deserialize(jsonConf, ConnConfProperty[].class)));\n         }\n \n         return confOverride;"},{"sha":"d4438c286e5aec6ab6d78f89b8390786674ad766","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n-import java.util.Arrays;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.Entity;\n@@ -113,7 +113,7 @@ public String getSerializedAttributes() {\n     public Set<Attribute> getAttributes() {\n         Set<Attribute> result = new HashSet<>();\n         if (StringUtils.isNotBlank(this.attributes)) {\n-            result.addAll(Arrays.asList(POJOHelper.deserialize(this.attributes, Attribute[].class)));\n+            result.addAll(List.of(POJOHelper.deserialize(this.attributes, Attribute[].class)));\n         }\n \n         return result;"},{"sha":"55e92bd0d42dfb09c1d2dc0df104825a8aca904a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyConfParamOps.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConfParamOps.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa;\n \n-import java.util.Collections;\n import java.util.Map;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.springframework.stereotype.Component;\n@@ -28,7 +27,7 @@ public class DummyConfParamOps implements ConfParamOps {\n \n     @Override\n     public Map<String, Object> list(final String domain) {\n-        return Collections.emptyMap();\n+        return Map.of();\n     }\n \n     @Override"},{"sha":"857072469d07da84dc4c198db42e9adac110e7c3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyDomainOps.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyDomainOps.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n@@ -35,7 +34,7 @@ public class DummyDomainOps implements DomainOps {\n \n     @Override\n     public List<Domain> list() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"2deb831ea237e39cddd2e35007a7a1a7e7f99f03","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyImplementationLookup.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa;\n \n-import java.util.Collections;\n import java.util.Set;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n@@ -47,12 +46,12 @@ public int getOrder() {\n \n     @Override\n     public Set<String> getClassNames(final String type) {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n \n     @Override\n     public Set<Class<?>> getJWTSSOProviderClasses() {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n \n     @Override\n@@ -92,6 +91,6 @@ public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n \n     @Override\n     public Set<Class<?>> getAuditAppenderClasses() {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n }"},{"sha":"bfdf59fdae008342e0fd43845a26d5d49454182b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -24,7 +24,6 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -205,13 +204,13 @@ public void searchByPageAndSize() {\n         assertTrue(cond.isValid());\n \n         List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                cond, 1, 2, Collections.<OrderByClause>emptyList(),\n+                cond, 1, 2, List.of(),\n                 AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n         users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                cond, 2, 2, Collections.<OrderByClause>emptyList(),\n+                cond, 2, 2, List.of(),\n                 AnyTypeKind.USER);\n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n@@ -481,7 +480,7 @@ public void groupOrderBy() {\n         orderByClause.setField(\"name\");\n \n         List<Group> groups = searchDAO.search(\n-                searchCondition, Collections.singletonList(orderByClause), AnyTypeKind.GROUP);\n+                searchCondition, List.of(orderByClause), AnyTypeKind.GROUP);\n         assertEquals(\n                 searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.GROUP),\n                 groups.size());"},{"sha":"abdf50d3ff12af845d89bcab85de7cf7e5eb7a67","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GatewayRouteTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGatewayRouteTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGatewayRouteTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGatewayRouteTest.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -23,7 +23,6 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.net.URI;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.UUID;\n import javax.ws.rs.HttpMethod;\n@@ -68,9 +67,9 @@ public void save() {\n         GatewayRoute route = entityFactory.newEntity(GatewayRoute.class);\n         route.setName(\"just for test\");\n         route.setTarget(URI.create(\"http://httpbin.org:80\"));\n-        route.setPredicates(Arrays.asList(new GatewayRoutePredicate.Builder().\n+        route.setPredicates(List.of(new GatewayRoutePredicate.Builder().\n                 factory(PredicateFactory.METHOD).args(HttpMethod.GET).build()));\n-        route.setFilters(Arrays.asList(new GatewayRouteFilter.Builder().\n+        route.setFilters(List.of(new GatewayRouteFilter.Builder().\n                 factory(FilterFactory.ADD_REQUEST_HEADER).args(\"X-Request-Foo, Bar\").build()));\n         route.setStatus(GatewayRouteStatus.DRAFT);\n "},{"sha":"4dfabbde223060ef538374dbf7a28befa83c3bf8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RemediationTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -24,7 +24,6 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n@@ -55,7 +54,7 @@ public class RemediationTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<Remediation> remediations = remediationDAO.findAll(1, 1, Collections.emptyList());\n+        List<Remediation> remediations = remediationDAO.findAll(1, 1, List.of());\n         assertTrue(remediations.isEmpty());\n     }\n "},{"sha":"d9257fca439ddae7cfa44b8143452be248e01523","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -24,7 +24,6 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -34,7 +33,6 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n@@ -68,7 +66,7 @@ public void findWithoutExecs() {\n     @Test\n     public void findPaginated() {\n         List<Task> tasks = taskDAO.findAll(\n-                TaskType.PROPAGATION, null, null, null, null, 1, 2, Collections.<OrderByClause>emptyList());\n+                TaskType.PROPAGATION, null, null, null, null, 1, 2, List.of());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.size());\n \n@@ -77,7 +75,7 @@ public void findPaginated() {\n         }\n \n         tasks = taskDAO.findAll(\n-                TaskType.PROPAGATION, null, null, null, null, 2, 2, Collections.<OrderByClause>emptyList());\n+                TaskType.PROPAGATION, null, null, null, null, 2, 2, List.of());\n         assertNotNull(tasks);\n         assertEquals(2, tasks.size());\n \n@@ -86,7 +84,7 @@ public void findPaginated() {\n         }\n \n         tasks = taskDAO.findAll(\n-                TaskType.PROPAGATION, null, null, null, null, 1000, 2, Collections.<OrderByClause>emptyList());\n+                TaskType.PROPAGATION, null, null, null, null, 1000, 2, List.of());\n         assertNotNull(tasks);\n         assertTrue(tasks.isEmpty());\n \n@@ -144,7 +142,7 @@ public void delete() {\n         resource = resourceDAO.find(resource.getKey());\n         assertNotNull(resource);\n         assertFalse(taskDAO.findAll(\n-                TaskType.PROPAGATION, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n+                TaskType.PROPAGATION, resource, null, null, null, -1, -1, List.of()).\n                 contains(task));\n     }\n }"},{"sha":"9f38789c893c9781ca082859b8b0b2ebdbd2223c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -26,10 +26,10 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import java.util.stream.Collectors;\n import javax.persistence.Query;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -235,7 +235,7 @@ public void udynMembership() {\n         // 3. verify that expected users have the created group dynamically assigned\n         List<String> members = groupDAO.findUDynMembers(actual);\n         assertEquals(2, members.size());\n-        assertEquals(new HashSet<>(Arrays.asList(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", newUserKey)),\n+        assertEquals(Set.of(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", newUserKey),\n                 new HashSet<>(members));\n \n         user = userDAO.findByUsername(\"bellini\");\n@@ -339,7 +339,7 @@ public void adynMembership() {\n                 -> \"PRINTER\".equals(anyObjectDAO.find(object).getType().getKey())).collect(Collectors.toList());\n         assertEquals(2, members.size());\n         assertEquals(\n-                new HashSet<>(Arrays.asList(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\", newAnyObjectKey)),\n+                Set.of(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\", newAnyObjectKey),\n                 new HashSet<>(members));\n \n         anyObject = anyObjectDAO.find(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");"},{"sha":"32bcd638ccaccf8b1f791373c68620e8c824cfc0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -24,7 +24,6 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -37,7 +36,6 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -217,7 +215,7 @@ public void delete() {\n \n         // Get tasks\n         List<PropagationTask> propagationTasks = taskDAO.findAll(\n-                TaskType.PROPAGATION, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList());\n+                TaskType.PROPAGATION, resource, null, null, null, -1, -1, List.of());\n         assertFalse(propagationTasks.isEmpty());\n \n         // delete resource"},{"sha":"b69c5b944e971545ca27f6be06e71cc6635721ee","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -24,10 +24,11 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+\n import javax.persistence.Query;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -137,7 +138,7 @@ public void dynMembership() {\n         List<String> members = roleDAO.findDynMembers(actual);\n         assertEquals(2, members.size());\n         assertEquals(\n-                new HashSet<>(Arrays.asList(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", newUserKey)),\n+                Set.of(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", newUserKey),\n                 new HashSet<>(members));\n \n         user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");"},{"sha":"3656449686247ac5d369bcfd7d18c5c9487d776a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -25,7 +25,6 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n@@ -137,7 +136,7 @@ public void save() {\n \n         resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertTrue(taskDAO.findAll(\n-                TaskType.PROPAGATION, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n+                TaskType.PROPAGATION, resource, null, null, null, -1, -1, List.of()).\n                 contains(task));\n     }\n "},{"sha":"70bcf01f554955838ddd4dc7513781ae76f7c184","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/PropagationByResource.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -250,7 +249,7 @@ public boolean contains(final String resourceKey) {\n      * @return resource matching the given type\n      */\n     public final Set<String> get(final ResourceOperation type) {\n-        Set<String> result = Collections.<String>emptySet();\n+        Set<String> result = Set.of();\n \n         switch (type) {\n             case CREATE:"},{"sha":"48612eb1bf5a59b4e746c84a97a9bbb4a20ff574","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AsyncConnectorFacade.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import java.util.Collections;\n import java.util.Set;\n import java.util.concurrent.Future;\n import org.identityconnectors.common.security.GuardedString;\n@@ -129,7 +128,7 @@ public void handleResult(final SearchResult sr) {\n \n     @Async\n     public Future<Set<ObjectClassInfo>> getObjectClassInfo(final ConnectorFacade connector) {\n-        Set<ObjectClassInfo> result = Collections.emptySet();\n+        Set<ObjectClassInfo> result = Set.of();\n \n         try {\n             result = connector.schema().getObjectClassInfo();"},{"sha":"e05406ad17703871f287705e6763f1c50871276d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java;\n \n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -65,7 +64,7 @@ public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisionin\n     public Pair<String, List<PropagationStatus>> create(\n             final AnyObjectCR anyObjectCR, final boolean nullPriorityAsync) {\n \n-        return create(anyObjectCR, Collections.<String>emptySet(), nullPriorityAsync);\n+        return create(anyObjectCR, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n@@ -91,7 +90,7 @@ public Pair<String, List<PropagationStatus>> create(\n     public Pair<AnyObjectUR, List<PropagationStatus>> update(\n             final AnyObjectUR anyObjectUR, final boolean nullPriorityAsync) {\n \n-        return update(anyObjectUR, Collections.<String>emptySet(), nullPriorityAsync);\n+        return update(anyObjectUR, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n@@ -116,7 +115,7 @@ public Pair<AnyObjectUR, List<PropagationStatus>> update(\n \n     @Override\n     public List<PropagationStatus> delete(final String key, final boolean nullPriorityAsync) {\n-        return delete(key, Collections.<String>emptySet(), nullPriorityAsync);\n+        return delete(key, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)"},{"sha":"c1d0adad5440ae6043ee728db9b0373b6b4e70bf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -77,7 +76,7 @@ public Pair<String, List<PropagationStatus>> create(final GroupCR groupCR, final\n                 null,\n                 created.getPropByRes(),\n                 groupCR.getVirAttrs(),\n-                Collections.<String>emptySet());\n+                Set.of());\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n         return Pair.of(created.getResult(), propagationReporter.getStatuses());\n@@ -113,7 +112,7 @@ public Pair<String, List<PropagationStatus>> create(\n     public Pair<GroupUR, List<PropagationStatus>> update(\n             final GroupUR groupUR, final boolean nullPriorityAsync) {\n \n-        return update(groupUR, Collections.<String>emptySet(), nullPriorityAsync);\n+        return update(groupUR, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n@@ -138,7 +137,7 @@ public Pair<GroupUR, List<PropagationStatus>> update(\n \n     @Override\n     public List<PropagationStatus> delete(final String key, final boolean nullPriorityAsync) {\n-        return delete(key, Collections.<String>emptySet(), nullPriorityAsync);\n+        return delete(key, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)"},{"sha":"c389da11064984411433f872704e126f21e55de6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java;\n \n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -76,7 +75,7 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {\n \n     @Override\n     public Pair<String, List<PropagationStatus>> create(final UserCR userCR, final boolean nullPriorityAsync) {\n-        return create(userCR, false, null, Collections.<String>emptySet(), nullPriorityAsync);\n+        return create(userCR, false, null, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n@@ -173,7 +172,7 @@ public Pair<UserUR, List<PropagationStatus>> update(\n \n     @Override\n     public List<PropagationStatus> delete(final String key, final boolean nullPriorityAsync) {\n-        return delete(key, Collections.<String>emptySet(), nullPriorityAsync);\n+        return delete(key, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)"},{"sha":"2d5788d618dac0fbd15d573ffb02d1b464d10547","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DerAttrHandlerImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n@@ -69,7 +68,7 @@ public String getValue(final Any<?> any, final DerSchema schema) {\n             return null;\n         }\n \n-        return getValues(any, Collections.singleton(schema)).get(schema);\n+        return getValues(any, Set.of(schema)).get(schema);\n     }\n \n     @Override\n@@ -81,7 +80,7 @@ public String getValue(final Any<?> any, final Membership<?> membership, final D\n             return null;\n         }\n \n-        return getValues(any, Collections.singleton(schema)).get(schema);\n+        return getValues(any, Set.of(schema)).get(schema);\n     }\n \n     @Override"},{"sha":"c030a6f013afb9a82297ac7cea611ca5a91bf003","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Base64;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n@@ -456,7 +455,7 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n         }\n         if (references.isEmpty()) {\n             LOG.warn(\"Could not determine the reference instance for {}\", mapItem.getIntAttrName());\n-            return Pair.of(schemaType, Collections.<PlainAttrValue>emptyList());\n+            return Pair.of(schemaType, List.of());\n         }\n \n         List<PlainAttrValue> values = new ArrayList<>();\n@@ -655,7 +654,7 @@ public Optional<String> getConnObjectKeyValue(final Any<?> any, final Provision\n                     any);\n         } catch (ParseException e) {\n             LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", mapItem.getIntAttrName(), e);\n-            intValues = Pair.of(AttrSchemaType.String, Collections.<PlainAttrValue>emptyList());\n+            intValues = Pair.of(AttrSchemaType.String, List.of());\n         }\n         return Optional.ofNullable(intValues.getRight().isEmpty()\n                 ? null\n@@ -681,7 +680,7 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n                 values = transformer.beforePull(mapItem, anyTO, values);\n             }\n         }\n-        values = Optional.ofNullable(values).orElse(Collections.emptyList());\n+        values = Optional.ofNullable(values).orElse(List.of());\n \n         IntAttrName intAttrName;\n         try {"},{"sha":"7d34b292df30a3cc4193569322449bb17234aac1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -152,11 +151,11 @@ public List<String> getValues(final Any<?> any, final VirSchema schema) {\n                 findAllowedSchemas(any, VirSchema.class).forSelfContains(schema)) {\n \n             LOG.debug(\"{} not allowed for {}\", schema, any);\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n-        List<String> result = getValues(any, Collections.singleton(schema)).get(schema);\n-        return result == null ? Collections.emptyList() : result;\n+        List<String> result = getValues(any, Set.of(schema)).get(schema);\n+        return result == null ? List.of() : result;\n     }\n \n     @Override\n@@ -165,11 +164,11 @@ public List<String> getValues(final Any<?> any, final Membership<?> membership,\n                 findAllowedSchemas(any, VirSchema.class).getForMembership(membership.getRightEnd()).contains(schema)) {\n \n             LOG.debug(\"{} not allowed for {}\", schema, any);\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n-        List<String> result = getValues(any, Collections.singleton(schema)).get(schema);\n-        return result == null ? Collections.emptyList() : result;\n+        List<String> result = getValues(any, Set.of(schema)).get(schema);\n+        return result == null ? List.of() : result;\n     }\n \n     @Override"},{"sha":"370be9e1e6e5ec5f5623ba742296bf25e4e99bce","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":134,"deletions":136,"changes":270,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -81,7 +81,6 @@\n import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -170,19 +169,19 @@ protected PlainSchema getPlainSchema(final String schemaName) {\n     }\n \n     private void fillAttr(\n-        final List<String> values,\n-        final AnyUtils anyUtils,\n-        final PlainSchema schema,\n-        final PlainAttr<?> attr,\n-        final SyncopeClientException invalidValues) {\n+            final List<String> values,\n+            final AnyUtils anyUtils,\n+            final PlainSchema schema,\n+            final PlainAttr<?> attr,\n+            final SyncopeClientException invalidValues) {\n \n         // if schema is multivalue, all values are considered for addition;\n         // otherwise only the fist one - if provided - is considered\n         List<String> valuesProvided = schema.isMultivalue()\n-            ? values\n-            : (values.isEmpty()\n-            ? Collections.<String>emptyList()\n-            : Collections.singletonList(values.get(0)));\n+                ? values\n+                : (values.isEmpty() || values.get(0) == null\n+                ? List.of()\n+                : List.of(values.get(0)));\n \n         valuesProvided.forEach(value -> {\n             if (StringUtils.isBlank(value)) {\n@@ -192,8 +191,8 @@ private void fillAttr(\n                     attr.add(value, anyUtils);\n                 } catch (InvalidPlainAttrValueException e) {\n                     String valueToPrint = value.length() > 40\n-                        ? value.substring(0, 20) + \"...\"\n-                        : value;\n+                            ? value.substring(0, 20) + \"...\"\n+                            : value;\n                     LOG.warn(\"Invalid value for attribute \" + schema.getKey() + \": \" + valueToPrint, e);\n \n                     invalidValues.getElements().add(schema.getKey() + \": \" + valueToPrint + \" - \" + e.getMessage());\n@@ -214,13 +213,13 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n             }\n             if (intAttrName != null && intAttrName.getSchema() != null) {\n                 AttrSchemaType schemaType = intAttrName.getSchema() instanceof PlainSchema\n-                    ? ((PlainSchema) intAttrName.getSchema()).getType()\n-                    : AttrSchemaType.String;\n+                        ? ((PlainSchema) intAttrName.getSchema()).getType()\n+                        : AttrSchemaType.String;\n \n                 Pair<AttrSchemaType, List<PlainAttrValue>> intValues =\n-                    mappingManager.getIntValues(provision, mapItem, intAttrName, schemaType, any);\n+                        mappingManager.getIntValues(provision, mapItem, intAttrName, schemaType, any);\n                 if (intValues.getRight().isEmpty()\n-                    && JexlUtils.evaluateMandatoryCondition(mapItem.getMandatoryCondition(), any)) {\n+                        && JexlUtils.evaluateMandatoryCondition(mapItem.getMandatoryCondition(), any)) {\n \n                     missingAttrNames.add(mapItem.getIntAttrName());\n                 }\n@@ -231,7 +230,7 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n     }\n \n     private SyncopeClientException checkMandatoryOnResources(\n-        final Any<?> any, final Collection<? extends ExternalResource> resources) {\n+            final Any<?> any, final Collection<? extends ExternalResource> resources) {\n \n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n@@ -251,14 +250,14 @@ private SyncopeClientException checkMandatoryOnResources(\n     }\n \n     private void checkMandatory(\n-        final PlainSchema schema,\n-        final PlainAttr<?> attr,\n-        final Any<?> any,\n-        final SyncopeClientException reqValMissing) {\n+            final PlainSchema schema,\n+            final PlainAttr<?> attr,\n+            final Any<?> any,\n+            final SyncopeClientException reqValMissing) {\n \n         if (attr == null\n-            && !schema.isReadonly()\n-            && JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any)) {\n+                && !schema.isReadonly()\n+                && JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any)) {\n \n             LOG.error(\"Mandatory schema \" + schema.getKey() + \" not provided with values\");\n \n@@ -272,40 +271,40 @@ private SyncopeClientException checkMandatory(final Any<?> any, final AnyUtils a\n         // Check if there is some mandatory schema defined for which no value has been provided\n         AllowedSchemas<PlainSchema> allowedPlainSchemas = anyUtils.dao().findAllowedSchemas(any, PlainSchema.class);\n         allowedPlainSchemas.getForSelf()\n-            .forEach(schema -> checkMandatory(schema, any.getPlainAttr(schema.getKey())\n+                .forEach(schema -> checkMandatory(schema, any.getPlainAttr(schema.getKey())\n                 .orElse(null), any, reqValMissing));\n         if (any instanceof GroupableRelatable) {\n             allowedPlainSchemas.getForMemberships().forEach((group, schemas) -> {\n                 GroupableRelatable<?, ?, ?, ?, ?> groupable = GroupableRelatable.class.cast(any);\n                 Membership<?> membership = groupable.getMembership(group.getKey()).orElse(null);\n                 schemas\n-                    .forEach(schema -> checkMandatory(schema, groupable.getPlainAttr(schema.getKey(), membership)\n-                            .orElse(null),\n+                        .forEach(schema -> checkMandatory(schema, groupable.getPlainAttr(schema.getKey(), membership)\n+                        .orElse(null),\n                         any, reqValMissing));\n             });\n         }\n \n         return reqValMissing;\n     }\n \n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected void processAttrPatch(\n-        final Any any,\n-        final AttrPatch patch,\n-        final PlainSchema schema,\n-        final PlainAttr<?> attr,\n-        final AnyUtils anyUtils,\n-        final Collection<ExternalResource> resources,\n-        final PropagationByResource propByRes,\n-        final SyncopeClientException invalidValues) {\n+            final Any any,\n+            final AttrPatch patch,\n+            final PlainSchema schema,\n+            final PlainAttr<?> attr,\n+            final AnyUtils anyUtils,\n+            final Collection<ExternalResource> resources,\n+            final PropagationByResource propByRes,\n+            final SyncopeClientException invalidValues) {\n \n         switch (patch.getOperation()) {\n             case ADD_REPLACE:\n                 // 1.1 remove values\n                 if (attr.getSchema().isUniqueConstraint()) {\n                     if (attr.getUniqueValue() != null\n-                        && !patch.getAttr().getValues().isEmpty()\n-                        && !patch.getAttr().getValues().get(0).equals(attr.getUniqueValue().getValueAsString())) {\n+                            && !patch.getAttr().getValues().isEmpty()\n+                            && !patch.getAttr().getValues().get(0).equals(attr.getUniqueValue().getValueAsString())) {\n \n                         plainAttrValueDAO.deleteAll(attr, anyUtils);\n                     }\n@@ -316,8 +315,8 @@ protected void processAttrPatch(\n                 // 1.2 add values\n                 List<String> valuesToBeAdded = patch.getAttr().getValues();\n                 if (!valuesToBeAdded.isEmpty()\n-                    && (!schema.isUniqueConstraint() || attr.getUniqueValue() == null\n-                    || !valuesToBeAdded.get(0).equals(attr.getUniqueValue().getValueAsString()))) {\n+                        && (!schema.isUniqueConstraint() || attr.getUniqueValue() == null\n+                        || !valuesToBeAdded.get(0).equals(attr.getUniqueValue().getValueAsString()))) {\n \n                     fillAttr(valuesToBeAdded, anyUtils, schema, attr, invalidValues);\n                 }\n@@ -335,9 +334,9 @@ protected void processAttrPatch(\n         }\n \n         resources.stream().\n-            filter(resource -> resource.getProvision(any.getType()).isPresent()\n+                filter(resource -> resource.getProvision(any.getType()).isPresent()\n                 && resource.getProvision(any.getType()).get().getMapping() != null).\n-            forEach(resource -> MappingUtils.getPropagationItems(\n+                forEach(resource -> MappingUtils.getPropagationItems(\n                 resource.getProvision(any.getType()).get().getMapping().getItems()).stream().\n                 filter(item -> (schema.getKey().equals(item.getIntAttrName()))).\n                 forEach(item -> {\n@@ -349,12 +348,12 @@ protected void processAttrPatch(\n                 }));\n     }\n \n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected PropagationByResource fill(\n-        final Any any,\n-        final AnyUR anyUR,\n-        final AnyUtils anyUtils,\n-        final SyncopeClientCompositeException scce) {\n+            final Any any,\n+            final AnyUR anyUR,\n+            final AnyUtils anyUtils,\n+            final SyncopeClientCompositeException scce) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n@@ -401,11 +400,11 @@ protected PropagationByResource fill(\n \n         // 3. plain attributes\n         anyUR.getPlainAttrs().stream().\n-            filter(patch -> patch.getAttr() != null).forEach(patch -> {\n+                filter(patch -> patch.getAttr() != null).forEach(patch -> {\n             PlainSchema schema = getPlainSchema(patch.getAttr().getSchema());\n             if (schema == null) {\n                 LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName() + \" {}, ignoring...\",\n-                    patch.getAttr().getSchema());\n+                        patch.getAttr().getSchema());\n             } else {\n                 PlainAttr<?> attr = (PlainAttr<?>) any.getPlainAttr(schema.getKey()).orElse(null);\n                 if (attr == null) {\n@@ -440,48 +439,48 @@ protected PropagationByResource fill(\n         return propByRes;\n     }\n \n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected void fill(\n-        final Any any,\n-        final AnyCR anyCR,\n-        final AnyUtils anyUtils,\n-        final SyncopeClientCompositeException scce) {\n+            final Any any,\n+            final AnyCR anyCR,\n+            final AnyUtils anyUtils,\n+            final SyncopeClientCompositeException scce) {\n \n         // 0. aux classes\n         any.getAuxClasses().clear();\n         anyCR.getAuxClasses().stream().\n-            map(className -> anyTypeClassDAO.find(className)).\n-            forEachOrdered(auxClass -> {\n-                if (auxClass == null) {\n-                    LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \" {}, ignoring...\", auxClass);\n-                } else {\n-                    any.add(auxClass);\n-                }\n-            });\n+                map(className -> anyTypeClassDAO.find(className)).\n+                forEachOrdered(auxClass -> {\n+                    if (auxClass == null) {\n+                        LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \" {}, ignoring...\", auxClass);\n+                    } else {\n+                        any.add(auxClass);\n+                    }\n+                });\n \n         // 1. attributes\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         anyCR.getPlainAttrs().stream().\n-            filter(attrTO -> !attrTO.getValues().isEmpty()).\n-            forEach(attrTO -> {\n-                PlainSchema schema = getPlainSchema(attrTO.getSchema());\n-                if (schema != null) {\n-                    PlainAttr<?> attr = (PlainAttr<?>) any.getPlainAttr(schema.getKey()).orElse(null);\n-                    if (attr == null) {\n-                        attr = anyUtils.newPlainAttr();\n-                        ((PlainAttr) attr).setOwner(any);\n-                        attr.setSchema(schema);\n-                    }\n-                    fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n-\n-                    if (attr.getValuesAsStrings().isEmpty()) {\n-                        attr.setOwner(null);\n-                    } else {\n-                        any.add(attr);\n+                filter(attrTO -> !attrTO.getValues().isEmpty()).\n+                forEach(attrTO -> {\n+                    PlainSchema schema = getPlainSchema(attrTO.getSchema());\n+                    if (schema != null) {\n+                        PlainAttr<?> attr = (PlainAttr<?>) any.getPlainAttr(schema.getKey()).orElse(null);\n+                        if (attr == null) {\n+                            attr = anyUtils.newPlainAttr();\n+                            ((PlainAttr) attr).setOwner(any);\n+                            attr.setSchema(schema);\n+                        }\n+                        fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n+\n+                        if (attr.getValuesAsStrings().isEmpty()) {\n+                            attr.setOwner(null);\n+                        } else {\n+                            any.add(attr);\n+                        }\n                     }\n-                }\n-            });\n+                });\n \n         if (!invalidValues.isEmpty()) {\n             scce.addException(invalidValues);\n@@ -508,100 +507,99 @@ protected void fill(\n         }\n     }\n \n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected void fill(\n-        final Any any,\n-        final Membership membership,\n-        final MembershipTO membershipTO,\n-        final AnyUtils anyUtils,\n-        final SyncopeClientCompositeException scce) {\n+            final Any any,\n+            final Membership membership,\n+            final MembershipTO membershipTO,\n+            final AnyUtils anyUtils,\n+            final SyncopeClientCompositeException scce) {\n \n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         membershipTO.getPlainAttrs().stream().\n-            filter(attrTO -> !attrTO.getValues().isEmpty()).\n-            forEach(attrTO -> {\n-                PlainSchema schema = getPlainSchema(attrTO.getSchema());\n-                if (schema != null) {\n-                    GroupablePlainAttr attr = (GroupablePlainAttr) GroupableRelatable.class.cast(any).\n-                        getPlainAttr(schema.getKey(), membership).orElse(null);\n-                    if (attr == null) {\n-                        attr = anyUtils.newPlainAttr();\n-                        attr.setOwner(any);\n-                        attr.setMembership(membership);\n-                        attr.setSchema(schema);\n-                    }\n-                    fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n-\n-                    if (attr.getValuesAsStrings().isEmpty()) {\n-                        attr.setOwner(null);\n-                    } else {\n-                        any.add(attr);\n+                filter(attrTO -> !attrTO.getValues().isEmpty()).\n+                forEach(attrTO -> {\n+                    PlainSchema schema = getPlainSchema(attrTO.getSchema());\n+                    if (schema != null) {\n+                        GroupablePlainAttr attr = (GroupablePlainAttr) GroupableRelatable.class.cast(any).\n+                                getPlainAttr(schema.getKey(), membership).orElse(null);\n+                        if (attr == null) {\n+                            attr = anyUtils.newPlainAttr();\n+                            attr.setOwner(any);\n+                            attr.setMembership(membership);\n+                            attr.setSchema(schema);\n+                        }\n+                        fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n+\n+                        if (attr.getValuesAsStrings().isEmpty()) {\n+                            attr.setOwner(null);\n+                        } else {\n+                            any.add(attr);\n+                        }\n                     }\n-                }\n-            });\n+                });\n \n         if (!invalidValues.isEmpty()) {\n             scce.addException(invalidValues);\n         }\n     }\n \n     protected void fillTO(\n-        final AnyTO anyTO,\n-        final String realmFullPath,\n-        final Collection<? extends AnyTypeClass> auxClasses,\n-        final Collection<? extends PlainAttr<?>> plainAttrs,\n-        final Map<DerSchema, String> derAttrs,\n-        final Map<VirSchema, List<String>> virAttrs,\n-        final Collection<? extends ExternalResource> resources,\n-        final boolean details) {\n+            final AnyTO anyTO,\n+            final String realmFullPath,\n+            final Collection<? extends AnyTypeClass> auxClasses,\n+            final Collection<? extends PlainAttr<?>> plainAttrs,\n+            final Map<DerSchema, String> derAttrs,\n+            final Map<VirSchema, List<String>> virAttrs,\n+            final Collection<? extends ExternalResource> resources,\n+            final boolean details) {\n \n         anyTO.setRealm(realmFullPath);\n \n         anyTO.getAuxClasses().addAll(auxClasses.stream().map(Entity::getKey).collect(Collectors.toList()));\n \n-\n         plainAttrs\n-            .forEach(plainAttr -> anyTO.getPlainAttrs().add(new Attr.Builder(plainAttr.getSchema().getKey())\n+                .forEach(plainAttr -> anyTO.getPlainAttrs().add(new Attr.Builder(plainAttr.getSchema().getKey())\n                 .values(plainAttr.getValuesAsStrings()).build()));\n \n         derAttrs.forEach((schema, value) -> anyTO.getDerAttrs()\n-            .add(new Attr.Builder(schema.getKey()).value(value).build()));\n+                .add(new Attr.Builder(schema.getKey()).value(value).build()));\n \n         virAttrs.forEach((schema, values) -> anyTO.getVirAttrs()\n-            .add(new Attr.Builder(schema.getKey()).values(values).build()));\n+                .add(new Attr.Builder(schema.getKey()).values(values).build()));\n \n         anyTO.getResources().addAll(resources.stream().map(Entity::getKey).collect(Collectors.toSet()));\n     }\n \n     protected RelationshipTO getRelationshipTO(final String relationshipType, final AnyObject otherEnd) {\n         return new RelationshipTO.Builder().\n-            type(relationshipType).otherEnd(otherEnd.getType().getKey(), otherEnd.getKey(), otherEnd.getName()).\n-            build();\n+                type(relationshipType).otherEnd(otherEnd.getType().getKey(), otherEnd.getKey(), otherEnd.getName()).\n+                build();\n     }\n \n     protected MembershipTO getMembershipTO(\n-        final Collection<? extends PlainAttr<?>> plainAttrs,\n-        final Map<DerSchema, String> derAttrs,\n-        final Map<VirSchema, List<String>> virAttrs,\n-        final Membership<? extends Any<?>> membership) {\n+            final Collection<? extends PlainAttr<?>> plainAttrs,\n+            final Map<DerSchema, String> derAttrs,\n+            final Map<VirSchema, List<String>> virAttrs,\n+            final Membership<? extends Any<?>> membership) {\n \n         MembershipTO membershipTO = new MembershipTO.Builder(membership.getRightEnd().getKey())\n-            .groupName(membership.getRightEnd().getName())\n-            .build();\n+                .groupName(membership.getRightEnd().getName())\n+                .build();\n \n         plainAttrs.forEach(plainAttr -> membershipTO.getPlainAttrs()\n-            .add(new Attr.Builder(plainAttr.getSchema().getKey())\n-                .values(plainAttr.getValuesAsStrings()).\n-                    build()));\n+                .add(new Attr.Builder(plainAttr.getSchema().getKey())\n+                        .values(plainAttr.getValuesAsStrings()).\n+                        build()));\n \n         derAttrs.forEach((schema, value) -> membershipTO.getDerAttrs().add(new Attr.Builder(schema.getKey()).\n-            value(value).\n-            build()));\n+                value(value).\n+                build()));\n \n         virAttrs.forEach((schema, values) -> membershipTO.getVirAttrs().add(new Attr.Builder(schema.getKey()).\n-            values(values).\n-            build()));\n+                values(values).\n+                build()));\n \n         return membershipTO;\n     }\n@@ -610,16 +608,16 @@ protected Map<String, String> getConnObjectKeys(final Any<?> any, final AnyUtils\n         Map<String, String> connObjectKeys = new HashMap<>();\n \n         anyUtils.getAllResources(any).\n-            forEach(resource -> resource.getProvision(any.getType()).\n+                forEach(resource -> resource.getProvision(any.getType()).\n                 filter(provision -> provision.getMapping() != null).\n                 ifPresent(provision -> {\n                     MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).\n-                        orElseThrow(() -> new NotFoundException(\n+                            orElseThrow(() -> new NotFoundException(\n                             \"ConnObjectKey mapping for \" + any.getType().getKey() + \" \" + any.getKey()\n-                                + \" on resource '\" + resource.getKey() + \"'\"));\n+                            + \" on resource '\" + resource.getKey() + \"'\"));\n \n                     mappingManager.getConnObjectKeyValue(any, provision).\n-                        ifPresent(value -> connObjectKeys.put(resource.getKey(), value));\n+                            ifPresent(value -> connObjectKeys.put(resource.getKey(), value));\n                 }));\n \n         return connObjectKeys;"},{"sha":"35c8fd99a41cc8f5ac04b770b1f1cb4ec059eece","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -316,8 +316,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n \n         Map<String, Set<String>> reasons = new HashMap<>();\n         anyObject.getResources().forEach(\n-                resource -> reasons.put(resource.getKey(),\n-                        new HashSet<>(Collections.singleton(anyObject.getKey()))));\n+                resource -> reasons.put(resource.getKey(), new HashSet<>(Set.of(anyObject.getKey()))));\n         anyObjectDAO.findAllGroupKeys(anyObject).forEach(\n                 group -> groupDAO.findAllResourceKeys(group).forEach(resource -> {\n                     if (!reasons.containsKey(resource)) {"},{"sha":"023c62f88249d87187ad7707c2b32059f93a5c59","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.net.URI;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n@@ -233,7 +232,7 @@ public ConnConfPropSchema build(final ConfigurationProperty property) {\n \n         if (property.getValue() != null) {\n             if (property.getValue().getClass().isArray()) {\n-                connConfPropSchema.getDefaultValues().addAll(Arrays.asList((Object[]) property.getValue()));\n+                connConfPropSchema.getDefaultValues().addAll(List.of((Object[]) property.getValue()));\n             } else if (property.getValue() instanceof Collection<?>) {\n                 connConfPropSchema.getDefaultValues().addAll((Collection<?>) property.getValue());\n             } else {"},{"sha":"2c4ea6c43a2ce6e6b110f42171ba61244b83016d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -404,8 +404,8 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n         Collection<ExternalResource> resources = userDAO.findAllResources(user);\n \n         Map<String, Set<String>> reasons = new HashMap<>();\n-        user.getResources().\n-                forEach(resource -> reasons.put(resource.getKey(), Set.of(user.getKey())));\n+        user.getResources().forEach(\n+                resource -> reasons.put(resource.getKey(), new HashSet<>(Set.of(user.getKey()))));\n         userDAO.findAllGroupKeys(user).forEach(group -> groupDAO.findAllResourceKeys(group).forEach(resource -> {\n             if (!reasons.containsKey(resource)) {\n                 reasons.put(resource, new HashSet<>());"},{"sha":"a27a1dd8e3942bc787d37e793c0f2ce804194e0f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -382,7 +381,7 @@ public void load(final String domain, final DataSource datasource) {\n                             job,\n                             conf.getLeft(),\n                             null,\n-                            Collections.emptyMap());\n+                            Map.of());\n                 } catch (Exception e) {\n                     LOG.error(\"While loading {} instance\", NotificationJob.class.getSimpleName(), e);\n                 }\n@@ -397,7 +396,7 @@ public void load(final String domain, final DataSource datasource) {\n                         job,\n                         \"0 * * * * ?\",\n                         null,\n-                        Collections.emptyMap());\n+                        Map.of());\n             } catch (Exception e) {\n                 LOG.error(\"While loading {} instance\", SystemLoadReporterJob.class.getSimpleName(), e);\n             }"},{"sha":"dc7044c8e8a560f7f2e62bdfca827888e59c8342","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/GroupReportlet.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.job.report;\n \n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicReference;\n@@ -35,7 +34,6 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n@@ -320,7 +318,7 @@ protected void doExtract(\n                         SearchCondConverter.convert(this.conf.getMatchingCond()),\n                         page,\n                         AnyDAO.DEFAULT_PAGE_SIZE,\n-                        Collections.<OrderByClause>emptyList(),\n+                        List.of(),\n                         AnyTypeKind.USER);\n             }\n "},{"sha":"31231d50287b2b1a5a679707361648eff42e2356","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.job.report;\n \n import java.util.Base64;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -44,7 +43,6 @@\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -255,7 +253,7 @@ private void doExtract(\n     private Set<Object> getValues(final Attribute attr) {\n         Set<Object> values;\n         if (attr.getValue() == null || attr.getValue().isEmpty()) {\n-            values = Collections.emptySet();\n+            values = Set.of();\n         } else if (attr.getValue().get(0) instanceof byte[]) {\n             values = new HashSet<>(attr.getValue().size());\n             attr.getValue().forEach(single -> values.add(Base64.getEncoder().encode((byte[]) single)));\n@@ -319,11 +317,11 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n                         syncopeAttrs.keySet().stream().\n                                 filter(syncopeAttr -> !resourceAttrs.containsKey(syncopeAttr)).\n                                 forEach(name -> misaligned.add(new Misaligned(\n-                                        resource.getKey(),\n-                                        connObjectKeyValue,\n-                                        name,\n-                                        syncopeAttrs.get(name),\n-                                        Collections.emptySet())));\n+                                resource.getKey(),\n+                                connObjectKeyValue,\n+                                name,\n+                                syncopeAttrs.get(name),\n+                                Set.of())));\n \n                         resourceAttrs.forEach((key, values) -> {\n                             if (syncopeAttrs.containsKey(key)) {\n@@ -340,7 +338,7 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n                                         resource.getKey(),\n                                         connObjectKeyValue,\n                                         key,\n-                                        Collections.emptySet(),\n+                                        Set.of(),\n                                         values));\n                             }\n                         });\n@@ -402,7 +400,7 @@ protected void doExtract(\n                         cond,\n                         page,\n                         PAGE_SIZE,\n-                        Collections.<OrderByClause>emptyList(),\n+                        List.of(),\n                         AnyTypeKind.USER));\n             }\n         }\n@@ -442,7 +440,7 @@ protected void doExtract(\n                         cond,\n                         page,\n                         PAGE_SIZE,\n-                        Collections.<OrderByClause>emptyList(),\n+                        List.of(),\n                         AnyTypeKind.GROUP));\n             }\n         }\n@@ -477,7 +475,7 @@ protected void doExtract(\n                             cond,\n                             page,\n                             PAGE_SIZE,\n-                            Collections.<OrderByClause>emptyList(),\n+                            List.of(),\n                             AnyTypeKind.ANY_OBJECT));\n                 }\n "},{"sha":"94f5e2772f7bde5461a36d5999ddf3470b937587","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/UserReportlet.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.job.report;\n \n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicReference;\n@@ -37,7 +36,6 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n@@ -382,7 +380,7 @@ protected void doExtract(\n                         SearchCondConverter.convert(this.conf.getMatchingCond()),\n                         page,\n                         AnyDAO.DEFAULT_PAGE_SIZE,\n-                        Collections.<OrderByClause>emptyList(),\n+                        List.of(),\n                         AnyTypeKind.USER);\n             }\n "},{"sha":"3e2be3ee5d879bf1952979a45cffad27cd2f0037","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/DefaultNotificationManager.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import java.io.StringWriter;\n import java.text.ParseException;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -50,7 +49,6 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n@@ -184,7 +182,7 @@ private NotificationTask getNotificationTask(\n         if (notification.getRecipientsFIQL() != null) {\n             recipients.addAll(searchDAO.<User>search(\n                     SearchCondConverter.convert(notification.getRecipientsFIQL()),\n-                    Collections.<OrderByClause>emptyList(), AnyTypeKind.USER));\n+                    List.of(), AnyTypeKind.USER));\n         }\n \n         if (notification.isSelfAsRecipient() && any instanceof User) {"},{"sha":"53619c760e03c2ce3fad2ff68f618e2ed95e6067","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.provisioning.java.propagation;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n@@ -300,7 +298,7 @@ protected Uid delete(\n              * update, this entity used to have the current resource assigned by more than one mean (for example,\n              * two different memberships with the same resource).\n              */\n-            Collection<String> resources = Collections.emptySet();\n+            Collection<String> resources = Set.of();\n             if (task.getEntityKey() != null && task.getAnyTypeKind() != null) {\n                 switch (task.getAnyTypeKind()) {\n                     case USER:\n@@ -365,7 +363,7 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationRep\n         }\n         Set<Attribute> attributes = new HashSet<>();\n         if (StringUtils.isNotBlank(taskInfo.getAttributes())) {\n-            attributes.addAll(Arrays.asList(POJOHelper.deserialize(taskInfo.getAttributes(), Attribute[].class)));\n+            attributes.addAll(List.of(POJOHelper.deserialize(taskInfo.getAttributes(), Attribute[].class)));\n         }\n         task.setAttributes(attributes);\n "},{"sha":"f5547d70292d1852721524aed70635cf281681aa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -59,7 +59,6 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -168,7 +167,7 @@ protected List<PropagationTaskInfo> getCreateTasks(\n             final Collection<String> noPropResourceKeys) {\n \n         if (propByRes == null || propByRes.isEmpty()) {\n-            return Collections.<PropagationTaskInfo>emptyList();\n+            return List.of();\n         }\n \n         if (noPropResourceKeys != null) {\n@@ -375,11 +374,11 @@ protected List<PropagationTaskInfo> createTasks(final Any<?> any,\n \n         propByRes.asMap().forEach((resourceKey, operation) -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n-            Provision provision = Optional.ofNullable(resource)\n-                    .map(externalResource -> externalResource.getProvision(any.getType())\n-                    .orElse(null)).orElse(null);\n+            Provision provision = Optional.ofNullable(resource).\n+                    map(externalResource -> externalResource.getProvision(any.getType()).\n+                    orElse(null)).orElse(null);\n             List<? extends Item> mappingItems = provision == null\n-                    ? Collections.<Item>emptyList()\n+                    ? List.of()\n                     : MappingUtils.getPropagationItems(provision.getMapping().getItems());\n \n             if (resource == null) {"},{"sha":"f1d529c824348a204adfa2caa37fcef58cba5035","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,9 +19,10 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.Set;\n+\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.request.AnyCR;\n@@ -181,7 +182,7 @@ protected List<ProvisioningReport> assign(\n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"PullTask not configured for create\");\n             finalize(UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         AnyCR anyCR = connObjectUtils.getAnyCR(delta.getObject(), profile.getTask(), provision, anyUtils);\n@@ -205,7 +206,7 @@ protected List<ProvisioningReport> assign(\n             create(anyCR, delta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), provision, result);\n         }\n \n-        return Collections.singletonList(result);\n+        return List.of(result);\n     }\n \n     protected List<ProvisioningReport> provision(\n@@ -215,7 +216,7 @@ protected List<ProvisioningReport> provision(\n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"PullTask not configured for create\");\n             finalize(UnmatchingRule.toEventName(UnmatchingRule.PROVISION), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         AnyCR anyCR = connObjectUtils.getAnyCR(delta.getObject(), profile.getTask(), provision, anyUtils);\n@@ -238,7 +239,7 @@ protected List<ProvisioningReport> provision(\n             create(anyCR, delta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), provision, result);\n         }\n \n-        return Collections.singletonList(result);\n+        return List.of(result);\n     }\n \n     protected void throwIgnoreProvisionException(final SyncDelta delta, final Exception exception)\n@@ -320,7 +321,7 @@ protected List<ProvisioningReport> update(\n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"PullTask not configured for update\");\n             finalize(MatchingRule.toEventName(MatchingRule.UPDATE), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"About to update {}\", anyKeys);\n@@ -430,7 +431,7 @@ protected List<ProvisioningReport> deprovision(\n             finalize(unlink\n                     ? MatchingRule.toEventName(MatchingRule.UNASSIGN)\n                     : MatchingRule.toEventName(MatchingRule.DEPROVISION), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"About to deprovision {}\", anyKeys);\n@@ -543,7 +544,7 @@ protected List<ProvisioningReport> link(\n             finalize(unlink\n                     ? MatchingRule.toEventName(MatchingRule.UNLINK)\n                     : MatchingRule.toEventName(MatchingRule.LINK), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"About to update {}\", anyKeys);\n@@ -641,7 +642,7 @@ protected List<ProvisioningReport> delete(\n         if (!profile.getTask().isPerformDelete()) {\n             LOG.debug(\"PullTask not configured for delete\");\n             finalize(ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"About to delete {}\", anyKeys);\n@@ -670,7 +671,7 @@ protected List<ProvisioningReport> delete(\n \n                     try {\n                         getProvisioningManager().\n-                                delete(key, Collections.singleton(profile.getTask().getResource().getKey()), true);\n+                                delete(key, Set.of(profile.getTask().getResource().getKey()), true);\n                         output = null;\n                         resultStatus = Result.SUCCESS;\n "},{"sha":"6e728aebd80e8b5ecbf3eb3a963b53d2e9baef25","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultAnyObjectPullResultHandler.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n@@ -79,7 +80,7 @@ protected AnyTO doCreate(final AnyCR anyCR, final SyncDelta delta) {\n         AnyObjectCR anyObjectCR = AnyObjectCR.class.cast(anyCR);\n \n         Map.Entry<String, List<PropagationStatus>> created = anyObjectProvisioningManager.create(\n-                anyObjectCR, Collections.singleton(profile.getTask().getResource().getKey()), true);\n+                anyObjectCR, Set.of(profile.getTask().getResource().getKey()), true);\n \n         return getAnyTO(created.getKey());\n     }\n@@ -94,7 +95,7 @@ protected AnyUR doUpdate(\n         AnyObjectUR anyObjectUR = AnyObjectUR.class.cast(req);\n \n         Pair<AnyObjectUR, List<PropagationStatus>> updated = anyObjectProvisioningManager.update(\n-                anyObjectUR, Collections.singleton(profile.getTask().getResource().getKey()), true);\n+                anyObjectUR, Set.of(profile.getTask().getResource().getKey()), true);\n \n         return updated.getLeft();\n     }"},{"sha":"77a2363c868860da3984f13ef646e1e4b20b9ae2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultGroupPullResultHandler.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n@@ -91,7 +92,7 @@ protected AnyTO doCreate(final AnyCR anyCR, final SyncDelta delta) {\n         Map.Entry<String, List<PropagationStatus>> created = groupProvisioningManager.create(\n                 groupCR,\n                 groupOwnerMap,\n-                Collections.singleton(profile.getTask().getResource().getKey()),\n+                Set.of(profile.getTask().getResource().getKey()),\n                 true);\n \n         return getAnyTO(created.getKey());\n@@ -107,7 +108,7 @@ protected AnyUR doUpdate(\n         GroupUR groupUR = GroupUR.class.cast(req);\n \n         Pair<GroupUR, List<PropagationStatus>> updated = groupProvisioningManager.update(\n-                groupUR, Collections.singleton(profile.getTask().getResource().getKey()), true);\n+                groupUR, Set.of(profile.getTask().getResource().getKey()), true);\n \n         String groupOwner = null;\n         for (AttrPatch attrPatch : groupUR.getPlainAttrs()) {"},{"sha":"1bb565a3ed850aed0990cc55c4706327b304bb4f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n@@ -133,7 +132,7 @@ private List<ProvisioningReport> assign(final SyncDelta delta, final OrgUnit org\n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"PullTask not configured for create\");\n             finalize(UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         RealmTO realmTO = connObjectUtils.getRealmTO(delta.getObject(), profile.getTask(), orgUnit);\n@@ -163,7 +162,7 @@ private List<ProvisioningReport> assign(final SyncDelta delta, final OrgUnit org\n             create(realmTO, delta, UnmatchingRule.ASSIGN, result);\n         }\n \n-        return Collections.singletonList(result);\n+        return List.of(result);\n     }\n \n     private List<ProvisioningReport> provision(final SyncDelta delta, final OrgUnit orgUnit)\n@@ -172,7 +171,7 @@ private List<ProvisioningReport> provision(final SyncDelta delta, final OrgUnit\n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"PullTask not configured for create\");\n             finalize(UnmatchingRule.toEventName(UnmatchingRule.PROVISION), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         RealmTO realmTO = connObjectUtils.getRealmTO(delta.getObject(), profile.getTask(), orgUnit);\n@@ -201,7 +200,7 @@ private List<ProvisioningReport> provision(final SyncDelta delta, final OrgUnit\n             create(realmTO, delta, UnmatchingRule.PROVISION, result);\n         }\n \n-        return Collections.singletonList(result);\n+        return List.of(result);\n     }\n \n     private void throwIgnoreProvisionException(final SyncDelta delta, final Exception exception)\n@@ -280,7 +279,7 @@ private List<ProvisioningReport> update(final SyncDelta delta, final List<String\n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"PullTask not configured for update\");\n             finalize(MatchingRule.toEventName(MatchingRule.UPDATE), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"About to update {}\", keys);\n@@ -368,7 +367,7 @@ private List<ProvisioningReport> deprovision(final SyncDelta delta, final List<S\n             finalize(unlink\n                     ? MatchingRule.toEventName(MatchingRule.UNASSIGN)\n                     : MatchingRule.toEventName(MatchingRule.DEPROVISION), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"About to deprovision {}\", keys);\n@@ -466,7 +465,7 @@ private List<ProvisioningReport> link(final SyncDelta delta, final List<String>\n             finalize(unlink\n                     ? MatchingRule.toEventName(MatchingRule.UNLINK)\n                     : MatchingRule.toEventName(MatchingRule.LINK), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"About to link {}\", keys);\n@@ -514,7 +513,7 @@ private List<ProvisioningReport> link(final SyncDelta delta, final List<String>\n                         } else {\n                             realm.add(profile.getTask().getResource());\n                         }\n-                        output = update(delta, Collections.singletonList(key), true);\n+                        output = update(delta, List.of(key), true);\n \n                         resultStatus = Result.SUCCESS;\n \n@@ -551,7 +550,7 @@ private List<ProvisioningReport> delete(final SyncDelta delta, final List<String\n         if (!profile.getTask().isPerformDelete()) {\n             LOG.debug(\"PullTask not configured for delete\");\n             finalize(ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"About to delete {}\", keys);\n@@ -589,7 +588,7 @@ private List<ProvisioningReport> delete(final SyncDelta delta, final List<String\n                             throw SyncopeClientException.build(ClientExceptionType.HasChildren);\n                         }\n \n-                        Set<String> adminRealms = Collections.singleton(realm.getFullPath());\n+                        Set<String> adminRealms = Set.of(realm.getFullPath());\n                         AnyCond keyCond = new AnyCond(AttributeCond.Type.ISNOTNULL);\n                         keyCond.setSchema(\"key\");\n                         SearchCond allMatchingCond = SearchCond.getLeafCond(keyCond);"},{"sha":"99cf3a5dc3306b0f53af868666c8fa5b14437efb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPullResultHandler.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n@@ -82,7 +83,7 @@ protected AnyTO doCreate(final AnyCR anyCR, final SyncDelta delta) {\n         Boolean enabled = pullUtils.readEnabled(delta.getObject(), profile.getTask());\n         Map.Entry<String, List<PropagationStatus>> created =\n                 userProvisioningManager.create(userCR, true, enabled,\n-                        Collections.singleton(profile.getTask().getResource().getKey()), true);\n+                        Set.of(profile.getTask().getResource().getKey()), true);\n \n         return getAnyTO(created.getKey());\n     }\n@@ -101,7 +102,7 @@ protected AnyUR doUpdate(\n                 userUR,\n                 result,\n                 enabled,\n-                Collections.singleton(profile.getTask().getResource().getKey()),\n+                Set.of(profile.getTask().getResource().getKey()),\n                 true);\n \n         return updated.getLeft();"},{"sha":"62c997297be823a92b7207919bf1bed428330fda","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -113,7 +112,7 @@ protected List<Object> getMembAttrValues(final SyncDelta delta, final Connector\n         }\n \n         return membAttr == null || membAttr.getValue() == null\n-                ? Collections.emptyList()\n+                ? List.of()\n                 : membAttr.getValue();\n     }\n "},{"sha":"7f2be54daca317c09a070e6140cf2ca4eab754aa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -200,7 +200,7 @@ private List<String> findByConnObjectKey(\n             }\n         }\n         if (connObjectKey == null) {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem.get())) {\n@@ -355,7 +355,7 @@ public List<String> match(\n                     : findByConnObjectKey(syncDelta, provision, anyUtils);\n         } catch (RuntimeException e) {\n             LOG.error(\"Could not match {} with any existing {}\", syncDelta, provision.getAnyType(), e);\n-            return Collections.<String>emptyList();\n+            return List.of();\n         }\n     }\n \n@@ -381,14 +381,14 @@ public List<String> match(\n             }\n         }\n         if (connObjectKey == null) {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem.get())) {\n             List<Object> output = transformer.beforePull(\n                     connObjectKeyItem.get(),\n                     null,\n-                    Collections.<Object>singletonList(connObjectKey));\n+                    List.of(connObjectKey));\n             if (output != null && !output.isEmpty()) {\n                 connObjectKey = output.get(0).toString();\n             }"},{"sha":"16996be7c8b2168248687b181601ad03fb4e297d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,11 +19,12 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.MutablePair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -33,7 +34,6 @@\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n@@ -226,16 +226,16 @@ protected String doExecuteProvisioning(\n                         ? anyDAO.getAllMatchingCond()\n                         : SearchCondConverter.convert(filter);\n                 int count = searchDAO.count(\n-                        Collections.singleton(profile.getTask().getSourceRealm().getFullPath()),\n+                        Set.of(profile.getTask().getSourceRealm().getFullPath()),\n                         cond,\n                         provision.getAnyType().getKind());\n                 for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1 && !interrupt; page++) {\n                     List<? extends Any<?>> anys = searchDAO.search(\n-                            Collections.singleton(profile.getTask().getSourceRealm().getFullPath()),\n+                            Set.of(profile.getTask().getSourceRealm().getFullPath()),\n                             cond,\n                             page,\n                             AnyDAO.DEFAULT_PAGE_SIZE,\n-                            Collections.<OrderByClause>emptyList(),\n+                            List.of(),\n                             provision.getAnyType().getKind());\n                     doHandle(anys, handler, pushTask.getResource());\n                 }"},{"sha":"d726a076656169c89a07f1f28f04aac123111ae4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushUtils.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushUtils.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n@@ -75,7 +74,7 @@ public List<ConnectorObject> match(\n                 .orElseGet(() -> findByConnObjectKey(connector, any, provision));\n         } catch (RuntimeException e) {\n             LOG.error(\"Could not match {} with any existing {}\", any, provision.getObjectClass(), e);\n-            return Collections.<ConnectorObject>emptyList();\n+            return List.of();\n         }\n     }\n \n@@ -135,6 +134,6 @@ public List<ConnectorObject> findByConnObjectKey(\n             }\n         }\n \n-        return obj == null ? Collections.emptyList() : Collections.singletonList(obj);\n+        return obj == null ? List.of() : List.of(obj);\n     }\n }"},{"sha":"8bfbc0d4e1827be4141e6d60f67897115453aeb9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePushJobDelegate.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n@@ -107,7 +106,7 @@ public List<ProvisioningReport> push(\n             }\n             handler.setProfile(profile);\n \n-            doHandle(Arrays.asList(any), handler, pushTask.getResource());\n+            doHandle(List.of(any), handler, pushTask.getResource());\n \n             for (PushActions action : actions) {\n                 action.afterAll(profile);"},{"sha":"3448ef7de825c457dd09087c97196cec4c40e1a4","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyConfParamOps.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyConfParamOps.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import java.util.Collections;\n import java.util.Map;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.springframework.stereotype.Component;\n@@ -28,7 +27,7 @@ public class DummyConfParamOps implements ConfParamOps {\n \n     @Override\n     public Map<String, Object> list(final String domain) {\n-        return Collections.emptyMap();\n+        return Map.of();\n     }\n \n     @Override"},{"sha":"d000e20ffbb79d6bcdc09d123f64c10a943c2c24","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyDomainOps.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyDomainOps.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n@@ -30,7 +29,7 @@ public class DummyDomainOps implements DomainOps {\n \n     @Override\n     public List<Domain> list() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"6132dcb88d5a0c703f46091309f809fa45269e42","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyImplementationLookup.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import java.util.Collections;\n import java.util.Set;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n@@ -47,12 +46,12 @@ public int getOrder() {\n \n     @Override\n     public Set<String> getClassNames(final String type) {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n \n     @Override\n     public Set<Class<?>> getJWTSSOProviderClasses() {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n \n     @Override\n@@ -92,6 +91,6 @@ public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n \n     @Override\n     public Set<Class<?>> getAuditAppenderClasses() {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n }"},{"sha":"db5d8a8349c1ec462f5a5f83e905e2318f9835b1","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MailTemplateTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMailTemplateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMailTemplateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMailTemplateTest.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -25,7 +25,6 @@\n import java.io.IOException;\n import java.io.StringWriter;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -112,7 +111,7 @@ public void optin() throws IOException {\n \n         UserTO recipient = SerializationUtils.clone(user);\n         recipient.getPlainAttr(\"email\").get().getValues().set(0, \"another@syncope.apache.org\");\n-        ctx.put(\"recipients\", Collections.singletonList(recipient));\n+        ctx.put(\"recipients\", List.of(recipient));\n \n         String htmlBody = evaluate(\n                 mailTemplateDAO.find(\"optin\").getHTMLTemplate(),"},{"sha":"a6f217fdb8fb831b20d0a83bca7fde0a8261e2b8","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthContextUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,7 @@\n \n import java.util.Collection;\n import org.apache.syncope.common.lib.types.EntitlementsHolder;\n-import java.util.Collections;\n+\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -68,7 +68,7 @@ public static Set<SyncopeGrantedAuthority> getAuthorities() {\n                     collect(Collectors.toSet());\n         }\n \n-        return Collections.emptySet();\n+        return Set.of();\n     }\n \n     public static Map<String, Set<String>> getAuthorizations() {\n@@ -81,7 +81,7 @@ public static Map<String, Set<String>> getAuthorizations() {\n                             SyncopeGrantedAuthority::getAuthority, SyncopeGrantedAuthority::getRealms));\n         }\n \n-        return Collections.emptyMap();\n+        return Map.of();\n     }\n \n     public static String getDomain() {"},{"sha":"ee7dc8055012da7142218b51a3e7cce3422dbe9f","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -81,7 +79,7 @@ public class AuthDataAccessor {\n     protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n     protected static final Set<SyncopeGrantedAuthority> ANONYMOUS_AUTHORITIES =\n-            Collections.singleton(new SyncopeGrantedAuthority(IdRepoEntitlement.ANONYMOUS));\n+            Set.of(new SyncopeGrantedAuthority(IdRepoEntitlement.ANONYMOUS));\n \n     protected static final String[] GROUP_OWNER_ENTITLEMENTS = new String[] {\n         IdRepoEntitlement.GROUP_READ, IdRepoEntitlement.GROUP_UPDATE, IdRepoEntitlement.GROUP_DELETE\n@@ -164,7 +162,7 @@ public JWTSSOProvider getJWTSSOProvider(final String issuer) {\n     public Pair<User, Boolean> authenticate(final String domain, final Authentication authentication) {\n         User user = null;\n \n-        List<String> authAttrValues = Arrays.asList(confParamOps.get(domain,\n+        List<String> authAttrValues = List.of(confParamOps.get(domain,\n                 \"authentication.attributes\", new String[] { \"username\" }, String[].class));\n         for (int i = 0; user == null && i < authAttrValues.size(); i++) {\n             if (\"username\".equals(authAttrValues.get(i))) {\n@@ -274,7 +272,7 @@ protected Set<? extends ExternalResource> getPassthroughResources(final User use\n             }\n         }\n \n-        return result == null ? Collections.emptySet() : result;\n+        return result == null ? Set.of() : result;\n     }\n \n     protected Set<SyncopeGrantedAuthority> getAdminAuthorities() {\n@@ -341,7 +339,7 @@ public Set<SyncopeGrantedAuthority> getAuthorities(final String username) {\n         } else {\n             User user = userDAO.findByUsername(username);\n             if (user == null) {\n-                authorities = Collections.emptySet();\n+                authorities = Set.of();\n             } else {\n                 authorities = getUserAuthorities(user);\n             }\n@@ -375,7 +373,7 @@ public Pair<String, Set<SyncopeGrantedAuthority>> authenticate(final JWTAuthenti\n \n             User user = resolved.getLeft();\n             username = user.getUsername();\n-            authorities = resolved.getRight() == null ? Collections.emptySet() : resolved.getRight();\n+            authorities = resolved.getRight() == null ? Set.of() : resolved.getRight();\n             LOG.debug(\"JWT {} issued by {} resolved to User {} with authorities {}\",\n                     authentication.getClaims().getTokenId(),\n                     authentication.getClaims().getIssuer(),\n@@ -385,15 +383,15 @@ public Pair<String, Set<SyncopeGrantedAuthority>> authenticate(final JWTAuthenti\n                 throw new DisabledException(\"User \" + username + \" is suspended\");\n             }\n \n-            List<String> authStatuses = Arrays.asList(confParamOps.get(authentication.getDetails().getDomain(),\n+            List<String> authStatuses = List.of(confParamOps.get(authentication.getDetails().getDomain(),\n                     \"authentication.statuses\", new String[] {}, String[].class));\n             if (!authStatuses.contains(user.getStatus())) {\n                 throw new DisabledException(\"User \" + username + \" not allowed to authenticate\");\n             }\n \n             if (BooleanUtils.isTrue(user.isMustChangePassword())) {\n                 LOG.debug(\"User {} must change password, resetting authorities\", username);\n-                authorities = Collections.singleton(\n+                authorities = Set.of(\n                         new SyncopeGrantedAuthority(IdRepoEntitlement.MUST_CHANGE_PASSWORD));\n             }\n         }"},{"sha":"d8133707ac39498a612708eb478813eb87a10a72","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeJWTSSOProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.spring.security;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n-import java.util.Collections;\n+\n import java.util.Set;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -84,7 +84,7 @@ public JwsVerificationSignature createJwsVerificationSignature(final JwsHeaders\n     @Override\n     public Pair<User, Set<SyncopeGrantedAuthority>> resolve(final JwtClaims jwtClaims) {\n         User user = userDAO.findByUsername(jwtClaims.getSubject());\n-        Set<SyncopeGrantedAuthority> authorities = Collections.emptySet();\n+        Set<SyncopeGrantedAuthority> authorities = Set.of();\n         if (user != null) {\n             AccessToken accessToken = accessTokenDAO.find(jwtClaims.getTokenId());\n             if (accessToken != null && accessToken.getAuthorities() != null) {"},{"sha":"e99780935280ed0d3442821aed359760365e9537","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/DummyImplementationLookup.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import java.util.Collections;\n import java.util.Set;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n@@ -41,12 +40,12 @@ public int getOrder() {\n \n     @Override\n     public Set<String> getClassNames(final String type) {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n \n     @Override\n     public Set<Class<?>> getJWTSSOProviderClasses() {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n \n     @Override\n@@ -86,6 +85,6 @@ public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n \n     @Override\n     public Set<Class<?>> getAuditAppenderClasses() {\n-        return Collections.emptySet();\n+        return Set.of();\n     }\n }"},{"sha":"232fb7ac19f24cfd12aa3ee5191a1bd75120bdc7","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/panels/CamelRoutesDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -94,7 +94,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"8cbfe5389b6bb614bf00e74727b8c6652452b65b","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/rest/CamelRoutesRestClient.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCamelRoutesRestClient.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.to.CamelMetrics;\n@@ -33,7 +32,7 @@ public class CamelRoutesRestClient extends BaseRestClient {\n     public List<CamelRouteTO> list(final AnyTypeKind anyTypeKind) {\n         return isCamelEnabledFor(anyTypeKind)\n                 ? getService(CamelRouteService.class).list(anyTypeKind)\n-                : Collections.<CamelRouteTO>emptyList();\n+                : List.of();\n     }\n \n     public CamelRouteTO read(final AnyTypeKind anyTypeKind, final String key) {"},{"sha":"88bdcac6e34f514a457e0efa51496cbb2a95c29e","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelAnyObjectProvisioningManager.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.camel;\n \n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -39,7 +38,7 @@\n \n     @Override\n     public Pair<String, List<PropagationStatus>> create(final AnyObjectCR req, final boolean nullPriorityAsync) {\n-        return create(req, Collections.<String>emptySet(), nullPriorityAsync);\n+        return create(req, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n@@ -69,7 +68,7 @@ public Pair<String, List<PropagationStatus>> create(\n     public Pair<AnyObjectUR, List<PropagationStatus>> update(\n             final AnyObjectUR anyUR, final boolean nullPriorityAsync) {\n \n-        return update(anyUR, Collections.<String>emptySet(), nullPriorityAsync);\n+        return update(anyUR, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n@@ -97,7 +96,7 @@ public Pair<AnyObjectUR, List<PropagationStatus>> update(\n \n     @Override\n     public List<PropagationStatus> delete(final String anyObjectObjectKey, final boolean nullPriorityAsync) {\n-        return delete(anyObjectObjectKey, Collections.<String>emptySet(), nullPriorityAsync);\n+        return delete(anyObjectObjectKey, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)"},{"sha":"37fb5cf0a5c11bcf0cac187728b5d939ccce7028","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelGroupProvisioningManager.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.camel;\n \n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -43,7 +42,7 @@ public Pair<String, List<PropagationStatus>> create(final GroupCR req, final boo\n         PollingConsumer pollingConsumer = getConsumer(\"direct:createGroupPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"excludedResources\", Collections.<String>emptySet());\n+        props.put(\"excludedResources\", Set.of());\n         props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n         sendMessage(\"direct:createGroup\", req, props);\n@@ -86,7 +85,7 @@ public Pair<String, List<PropagationStatus>> create(\n \n     @Override\n     public Pair<GroupUR, List<PropagationStatus>> update(final GroupUR groupUR, final boolean nullPriorityAsync) {\n-        return update(groupUR, Collections.<String>emptySet(), nullPriorityAsync);\n+        return update(groupUR, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n@@ -114,7 +113,7 @@ public Pair<GroupUR, List<PropagationStatus>> update(\n \n     @Override\n     public List<PropagationStatus> delete(final String key, final boolean nullPriorityAsync) {\n-        return delete(key, Collections.<String>emptySet(), nullPriorityAsync);\n+        return delete(key, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)"},{"sha":"dbcda88457c222eda9ed11a327e1337e07e42907","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.camel;\n \n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -47,7 +46,7 @@ public class CamelUserProvisioningManager extends AbstractCamelProvisioningManag\n \n     @Override\n     public Pair<String, List<PropagationStatus>> create(final UserCR req, final boolean nullPriorityAsync) {\n-        return create(req, false, null, Collections.<String>emptySet(), nullPriorityAsync);\n+        return create(req, false, null, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n@@ -107,7 +106,7 @@ public Pair<UserUR, List<PropagationStatus>> update(\n \n     @Override\n     public List<PropagationStatus> delete(final String key, final boolean nullPriorityAsync) {\n-        return delete(key, Collections.<String>emptySet(), nullPriorityAsync);\n+        return delete(key, Set.of(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)"},{"sha":"640e85d1c5f6e887960c9a9033c01558ce850f27","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.camel;\n \n import java.nio.charset.StandardCharsets;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.camel.component.metrics.routepolicy.MetricsRoutePolicyFactory;\n@@ -84,14 +83,14 @@ private void loadRouteDefinitions(final List<String> routes) {\n     public void updateContext(final String routeKey) {\n         if (!getCamelContext().getRouteDefinitions().isEmpty()) {\n             getCamelContext().getRouteDefinitions().remove(getCamelContext().getRouteDefinition(routeKey));\n-            loadRouteDefinitions(Arrays.asList(routeDAO.find(routeKey).getContent()));\n+            loadRouteDefinitions(List.of(routeDAO.find(routeKey).getContent()));\n         }\n     }\n \n     public void restoreRoute(final String routeKey, final String routeContent) {\n         try {\n             getCamelContext().getRouteDefinitions().remove(getCamelContext().getRouteDefinition(routeKey));\n-            loadRouteDefinitions(Arrays.asList(routeContent));\n+            loadRouteDefinitions(List.of(routeContent));\n         } catch (Exception e) {\n             LOG.error(\"While restoring Camel route {}\", routeKey, e);\n             throw new CamelException(e);"},{"sha":"0155caf71c8d32fd6b5a894880049a02f8789a5a","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientContext.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.ext.elasticsearch.client;\n \n-import java.util.Collections;\n+import java.util.List;\n+\n import org.apache.http.HttpHost;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n@@ -31,7 +32,7 @@ public class ElasticsearchClientContext {\n     @Bean\n     public ElasticsearchClientFactoryBean elasticsearchClientFactoryBean() {\n         return new ElasticsearchClientFactoryBean(\n-                Collections.singletonList(new HttpHost(\"localhost\", 9200, \"http\")));\n+                List.of(new HttpHost(\"localhost\", 9200, \"http\")));\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"f463211bad59ce31ffd587caee7071bdeba8f481","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -145,7 +144,7 @@ private SearchRequest searchRequest(\n \n     @Override\n     protected int doCount(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n-        SearchRequest request = searchRequest(adminRealms, cond, kind, 0, 0, Collections.emptyList());\n+        SearchRequest request = searchRequest(adminRealms, cond, kind, 0, 0, List.of());\n         try {\n             return (int) client.search(request, RequestOptions.DEFAULT).getHits().getTotalHits().value;\n         } catch (IOException e) {\n@@ -211,7 +210,7 @@ protected <T extends Any<?>> List<T> doSearch(\n         }\n \n         return ArrayUtils.isEmpty(esResult)\n-                ? Collections.emptyList()\n+                ? List.of()\n                 : buildResult(Stream.of(esResult).map(SearchHit::getId).collect(Collectors.toList()), kind);\n     }\n "},{"sha":"e19b251fc054eb2ab017bec8385e87d81fb6bb06","filename":"ext/flowable/client-common-ui/src/main/java/org/apache/syncope/ext/client/common/ui/panels/UserRequestFormPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fclient%2Fcommon%2Fui%2Fpanels%2FUserRequestFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fclient%2Fcommon%2Fui%2Fpanels%2FUserRequestFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fclient%2Fcommon%2Fui%2Fpanels%2FUserRequestFormPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.text.ParseException;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n@@ -102,7 +101,7 @@ public void setObject(final String object) {\n                                 prop.setValue(String.valueOf(object.equalsIgnoreCase(\"yes\")));\n                             }\n \n-                        }, false).setChoices(Arrays.asList(new String[] { \"Yes\", \"No\" }));\n+                        }, false).setChoices(List.of(\"Yes\", \"No\"));\n                         break;\n \n                     case Date:"},{"sha":"17c040ebff3b83bbfff54c011ba4819e9c5c1120","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/BpmnProcessDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBpmnProcessDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBpmnProcessDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBpmnProcessDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -284,7 +284,7 @@ public void onClick(final AjaxRequestTarget target, final BpmnProcess ignore) {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.emptyList();\n+        return List.of();\n     }\n \n     public abstract static class Builder"},{"sha":"f6a7833dca9cf66e4e459f4921d76ffd147dcd64","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestDirectoryPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n@@ -121,7 +120,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     protected static class UserRequestProvider extends DirectoryDataProvider<UserRequest> {"},{"sha":"d9a8720a9acd14c66c65e333f14e45fa520d2adc","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDirectoryPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n@@ -249,7 +248,7 @@ public void onClick(final AjaxRequestTarget target, final UserRequestForm ignore\n                         previousUserTO,\n                         newUserTO,\n                         new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses(),\n-                        FormLayoutInfoUtils.fetch(Collections.singletonList(AnyTypeKind.USER.name())).getLeft(),\n+                        FormLayoutInfoUtils.fetch(List.of(AnyTypeKind.USER.name())).getLeft(),\n                         pageRef\n                 ).build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT));\n \n@@ -316,7 +315,7 @@ public UserRequestForm getObject() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     private void claimForm(final String taskId) {"},{"sha":"dec49722b651dd27e8cb3089c99614f53781787c","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/WorkflowFlowableContext.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FWorkflowFlowableContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FWorkflowFlowableContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FWorkflowFlowableContext.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.core.flowable;\n \n-import java.util.Arrays;\n+import java.util.List;\n+\n import org.apache.syncope.core.flowable.impl.FlowableBpmnProcessManager;\n import org.apache.syncope.core.flowable.impl.FlowableUserRequestHandler;\n import org.apache.syncope.core.flowable.impl.FlowableWorkflowUtils;\n@@ -129,7 +130,7 @@ public DomainProcessEngineConfiguration processEngineConfiguration() {\n         conf.setJpaCloseEntityManager(false);\n         conf.setHistoryLevel(historyLevel);\n         conf.setIdmEngineConfigurator(syncopeIdmEngineConfigurator());\n-        conf.setCustomPreVariableTypes(Arrays.asList(syncopeEntitiesVariableType()));\n+        conf.setCustomPreVariableTypes(List.of(syncopeEntitiesVariableType()));\n         conf.setFormHandlerHelper(syncopeFormHandlerHelper());\n         conf.setIdGenerator(idGenerator());\n         return conf;"},{"sha":"8ad7e8c7513b8fad9d56ef0308995c6332efe7eb","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.flowable.impl;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -281,7 +280,7 @@ protected WorkflowResult<String> doSuspend(final User user) {\n         String procInstID = FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey());\n \n         Set<String> performedTasks =\n-                doExecuteNextTask(procInstID, user, Collections.singletonMap(FlowableRuntimeUtils.TASK, \"suspend\"));\n+                doExecuteNextTask(procInstID, user, Map.of(FlowableRuntimeUtils.TASK, \"suspend\"));\n         FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n         User updated = userDAO.save(user);\n \n@@ -297,7 +296,7 @@ protected WorkflowResult<String> doReactivate(final User user) {\n         String procInstID = FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey());\n \n         Set<String> performedTasks =\n-                doExecuteNextTask(procInstID, user, Collections.singletonMap(FlowableRuntimeUtils.TASK, \"reactivate\"));\n+                doExecuteNextTask(procInstID, user, Map.of(FlowableRuntimeUtils.TASK, \"reactivate\"));\n         FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n \n         User updated = userDAO.save(user);\n@@ -364,7 +363,7 @@ protected WorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n     protected void doDelete(final User user) {\n         String procInstID = FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey());\n \n-        doExecuteNextTask(procInstID, user, Collections.singletonMap(FlowableRuntimeUtils.TASK, \"delete\"));\n+        doExecuteNextTask(procInstID, user, Map.of(FlowableRuntimeUtils.TASK, \"delete\"));\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceKeys(user.getKey()));"},{"sha":"735c59e4fd920ab5351e92f0d240d7b8d429b63d","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngineFactoryBean.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.flowable.support;\n \n-import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import javax.sql.DataSource;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n@@ -87,7 +87,7 @@ private ProcessEngine build(final String domain, final DataSource datasource) {\n                     ctx.getBean(SpringIdmEngineConfiguration.class));\n         }\n         conf.setEnableSafeBpmnXml(true);\n-        conf.setCustomFormTypes(Arrays.asList(new DropdownFormType(null)));\n+        conf.setCustomFormTypes(List.of(new DropdownFormType(null)));\n \n         return conf.buildProcessEngine();\n     }"},{"sha":"afbae8d435d76e3c2a8852fe7c944899ef0bf53f","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeGroupQueryImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeGroupQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeGroupQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeGroupQueryImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.flowable.support;\n \n-import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -52,9 +51,9 @@ private void execute() {\n         if (id != null) {\n             org.apache.syncope.core.persistence.api.entity.group.Group syncopeGroup = groupDAO.findByName(id);\n             if (syncopeGroup == null) {\n-                result = Collections.emptyList();\n+                result = List.of();\n             } else {\n-                result = Collections.singletonList(fromSyncopeGroup(syncopeGroup.getName()));\n+                result = List.of(fromSyncopeGroup(syncopeGroup.getName()));\n             }\n         } else if (userId != null) {\n             result = userDAO.findAllGroupNames(userDAO.findByUsername(userId)).stream()."},{"sha":"6d93cafb461e93cac6302ff9195dea2d45c6bf8f","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeUserQueryImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeUserQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeUserQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeUserQueryImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.flowable.support;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -54,14 +53,14 @@ private void execute() {\n         if (id != null) {\n             org.apache.syncope.core.persistence.api.entity.user.User user = userDAO.findByUsername(id);\n             if (user == null) {\n-                result = Collections.<User>emptyList();\n+                result = List.of();\n             } else if (groupId == null || userDAO.findAllGroupNames(user).contains(groupId)) {\n-                result = Collections.singletonList(fromSyncopeUser(user));\n+                result = List.of(fromSyncopeUser(user));\n             }\n         } else if (groupId != null) {\n             Group group = groupDAO.findByName(groupId);\n             if (group == null) {\n-                result = Collections.<User>emptyList();\n+                result = List.of();\n             } else {\n                 result = new ArrayList<>();\n                 List<UMembership> memberships = groupDAO.findUMemberships(group);"},{"sha":"fa0d3c93e09ae660144bd9a808b5fdca465a5abf","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/panels/OIDCProvidersDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -161,7 +161,7 @@ protected List<IColumn<OIDCProviderTO, String>> getColumns() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n \n     }\n "},{"sha":"707a727f39eb27bd6c402607db426bbe467c3533","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCClientLogic.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,8 +22,6 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.lang.reflect.Method;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n@@ -302,7 +300,7 @@ public OIDCLoginResponseTO login(final String redirectURI, final String authoriz\n         }\n \n         final List<String> matchingUsers = keyValue == null\n-                ? Collections.<String>emptyList()\n+                ? List.of()\n                 : userManager.findMatchingUser(keyValue, op.getConnObjectKeyItem().get());\n         LOG.debug(\"Found {} matching users for {}\", matchingUsers.size(), keyValue);\n \n@@ -373,7 +371,7 @@ public OIDCLoginResponseTO login(final String redirectURI, final String authoriz\n     }\n \n     private TokenEndpointResponse getOIDCTokens(final String url, final String body) throws IOException {\n-        Response response = WebClient.create(url, Arrays.asList(new JacksonJsonProvider())).\n+        Response response = WebClient.create(url, List.of(new JacksonJsonProvider())).\n                 type(MediaType.APPLICATION_FORM_URLENCODED).accept(MediaType.APPLICATION_JSON).\n                 post(body);\n         if (response.getStatus() != Response.Status.OK.getStatusCode()) {\n@@ -393,7 +391,7 @@ private IdToken getValidatedIdToken(final OIDCProvider op, final Consumer consum\n         IdTokenReader idTokenReader = new IdTokenReader();\n         idTokenReader.setClockOffset(10);\n         idTokenReader.setIssuerId(op.getIssuer());\n-        idTokenReader.setJwkSetClient(WebClient.create(op.getJwksUri(), Arrays.asList(new JsonWebKeysProvider())).\n+        idTokenReader.setJwkSetClient(WebClient.create(op.getJwksUri(), List.of(new JsonWebKeysProvider())).\n                 accept(MediaType.APPLICATION_JSON));\n         IdToken idToken;\n         try {\n@@ -413,7 +411,7 @@ private UserInfo getUserInfo(\n             final IdToken idToken,\n             final Consumer consumer) {\n \n-        WebClient userInfoServiceClient = WebClient.create(endpoint, Arrays.asList(new JsonMapObjectProvider())).\n+        WebClient userInfoServiceClient = WebClient.create(endpoint, List.of(new JsonMapObjectProvider())).\n                 accept(MediaType.APPLICATION_JSON);\n         ClientAccessToken clientAccessToken =\n                 new ClientAccessToken(OAuthConstants.BEARER_AUTHORIZATION_SCHEME, accessToken);"},{"sha":"8326c9b2bff0b2e173eabd948a03d1c80acbe011","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCProviderLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCProviderLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCProviderLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCProviderLogic.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n import java.lang.reflect.Method;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.stream.Collectors;\n import javax.ws.rs.ClientErrorException;\n@@ -53,7 +52,7 @@ public class OIDCProviderLogic extends AbstractTransactionalLogic<OIDCProviderTO\n \n     private OIDCProviderDiscoveryDocument getDiscoveryDocument(final String issuer) {\n         String discoveryDocumentURL = issuer + \"/.well-known/openid-configuration\";\n-        WebClient client = WebClient.create(discoveryDocumentURL, Arrays.asList(new JacksonJsonProvider())).\n+        WebClient client = WebClient.create(discoveryDocumentURL, List.of(new JacksonJsonProvider())).\n                 accept(MediaType.APPLICATION_JSON);\n         try {\n             return client.get(OIDCProviderDiscoveryDocument.class);"},{"sha":"a65a8828aecd539e62b07a9171bbb976746f265d","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -179,7 +179,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected Collection<ActionLink.ActionType> getBatches() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"c1104fae0fe3abf49842e48550ca633fa2db3ef5","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.concurrent.Future;\n@@ -174,7 +173,7 @@ private final class IdP extends WizardStep {\n             AjaxDropDownChoicePanel<SAML2BindingType> bindingType =\n                     new AjaxDropDownChoicePanel<>(\"field\", \"bindingType\",\n                             new PropertyModel<>(idpTO, \"bindingType\"), false);\n-            bindingType.setChoices(Arrays.asList(SAML2BindingType.values()));\n+            bindingType.setChoices(List.of(SAML2BindingType.values()));\n             fields.add(bindingType);\n \n             AjaxTextFieldPanel requestedAuthnContextProvider = new AjaxTextFieldPanel("},{"sha":"d2be07dc091aecc43e0a7c4b280f913124a9765d","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -23,7 +23,6 @@\n import java.lang.reflect.Method;\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n@@ -484,7 +483,7 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         }\n \n         final List<String> matchingUsers = keyValue == null\n-                ? Collections.<String>emptyList()\n+                ? List.of()\n                 : userManager.findMatchingUser(keyValue, idp.getKey());\n         LOG.debug(\"Found {} matching users for {}\", matchingUsers.size(), keyValue);\n "},{"sha":"0a6b857c6e5d339d7d7aae102b86ca4f9b850fb6","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -196,7 +196,7 @@ public void fill(final String idpKey, final SAML2LoginResponseTO responseTO, fin\n         }\n \n         idp.getItems().forEach(item -> {\n-            List<String> values = Collections.emptyList();\n+            List<String> values = List.of();\n             Optional<Attr> samlAttr = responseTO.getAttr(item.getExtAttrName());\n             if (samlAttr.isPresent() && !samlAttr.get().getValues().isEmpty()) {\n                 values = samlAttr.get().getValues();"},{"sha":"6e2ffbdf58f9a00bade5dd52bf34eee0fe645f25","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfUserPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfUserPanel.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.panels;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n@@ -524,7 +523,7 @@ public void setObject(final String object) {\n             }\n \n         });\n-        primaryPanel.setChoices(Arrays.asList(\"true\", \"false\"));\n+        primaryPanel.setChoices(List.of(\"true\", \"false\"));\n \n         panelList.add(displayPanel);\n         panelList.add(valuePanel);\n@@ -648,7 +647,7 @@ public void setObject(final String object) {\n             }\n \n         });\n-        addressPrimaryPanel.setChoices(Arrays.asList(\"true\", \"false\"));\n+        addressPrimaryPanel.setChoices(List.of(\"true\", \"false\"));\n \n         panelList.add(addressCountryPanel);\n         panelList.add(addressFormattedPanel);"},{"sha":"06493bdd29a272d29fc902924cff155aeec46bd8","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.logic;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -39,7 +38,6 @@\n import org.apache.syncope.core.logic.scim.SCIMConfManager;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.spring.security.AuthDataAccessor;\n import org.apache.syncope.ext.scimv2.api.BadRequestException;\n@@ -67,12 +65,12 @@ public class SCIMDataBinder {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(SCIMDataBinder.class);\n \n-    private static final List<String> USER_SCHEMAS = Collections.singletonList(Resource.User.schema());\n+    private static final List<String> USER_SCHEMAS = List.of(Resource.User.schema());\n \n     private static final List<String> ENTERPRISE_USER_SCHEMAS =\n             List.of(Resource.User.schema(), Resource.EnterpriseUser.schema());\n \n-    private static final List<String> GROUP_SCHEMAS = Collections.singletonList(Resource.Group.schema());\n+    private static final List<String> GROUP_SCHEMAS = List.of(Resource.Group.schema());\n \n     @Autowired\n     private SCIMConfManager confManager;\n@@ -637,15 +635,15 @@ public SCIMGroup toSCIMGroup(\n \n         if (output(attributes, excludedAttributes, \"members\")) {\n             int count = userLogic.search(searchCond,\n-                    1, 1, Collections.<OrderByClause>emptyList(),\n+                    1, 1, List.of(),\n                     SyncopeConstants.ROOT_REALM, false).getLeft();\n \n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                 List<UserTO> users = userLogic.search(\n                         searchCond,\n                         page,\n                         AnyDAO.DEFAULT_PAGE_SIZE,\n-                        Collections.<OrderByClause>emptyList(),\n+                        List.of(),\n                         SyncopeConstants.ROOT_REALM,\n                         false).\n                         getRight();"},{"sha":"3eaf297b5659c5402ef9dd0328d5d3d6691d7138","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogic.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -24,7 +24,6 @@\n import java.io.IOException;\n import java.lang.reflect.Method;\n import java.net.URI;\n-import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -147,7 +146,7 @@ public List<ResourceType> resourceTypes(final UriBuilder uriBuilder) {\n             }\n         }\n \n-        return Arrays.asList(USER, GROUP);\n+        return List.of(USER, GROUP);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")"},{"sha":"5a27997d8736e8f9e3298ef30d106be6e2b7169d","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.logic.scim;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -38,7 +37,7 @@\n  */\n public class SearchCondVisitor extends SCIMFilterBaseVisitor<SearchCond> {\n \n-    private static final List<String> MULTIVALUE = Arrays.asList(\n+    private static final List<String> MULTIVALUE = List.of(\n             \"emails\", \"phoneNumbers\", \"ims\", \"photos\", \"addresses\");\n \n     private final Resource resource;"},{"sha":"06c69cb6daf31db3d4d82951c6ea896e242ad6d9","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ListResponse.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FListResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FListResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FListResponse.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,15 +21,14 @@\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n \n public class ListResponse<R extends SCIMResource> extends SCIMBean {\n \n     private static final long serialVersionUID = -776611610457583160L;\n \n-    private final List<String> schemas = Arrays.asList(Resource.ListResponse.schema());\n+    private final List<String> schemas = List.of(Resource.ListResponse.schema());\n \n     private final int totalResults;\n "},{"sha":"feb271419a8f3b4477bd286a7641d0735021fde2","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ResourceType.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FResourceType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FResourceType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FResourceType.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,15 +21,14 @@\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n \n public class ResourceType extends SCIMBean {\n \n     private static final long serialVersionUID = -6559584102333757279L;\n \n-    private final List<String> schemas = Arrays.asList(Resource.ResourceType.schema());\n+    private final List<String> schemas = List.of(Resource.ResourceType.schema());\n \n     private final String id;\n "},{"sha":"231cbce8a1510add50d057fa328e576fb9b56dbe","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -23,7 +23,7 @@\n import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n-import java.util.Arrays;\n+\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.ext.scimv2.api.BadRequestException;\n@@ -35,7 +35,7 @@ public class SCIMError extends SCIMBean {\n \n     private static final long serialVersionUID = -8836902509266522394L;\n \n-    private final List<String> schemas = Arrays.asList(Resource.Error.schema());\n+    private final List<String> schemas = List.of(Resource.Error.schema());\n \n     private ErrorType scimType;\n "},{"sha":"e2af957d4b6e3853868bcb70632f86a66002e010","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMGroup.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMGroup.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n \n@@ -41,7 +40,7 @@ public SCIMGroup(\n             @JsonProperty(\"meta\") final Meta meta,\n             @JsonProperty(\"displayName\") final String displayName) {\n \n-        super(id, Collections.singletonList(Resource.Group.schema()), meta);\n+        super(id, List.of(Resource.Group.schema()), meta);\n         this.displayName = displayName;\n     }\n "},{"sha":"d9bdccc17dc6bbe53efd7876e87f1419878229aa","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMResource.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMResource.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.ext.scimv2.api.data;\n \n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n \n@@ -36,7 +35,7 @@ public abstract class SCIMResource extends SCIMBean {\n \n     public SCIMResource(final String id, final List<String> schemas, final Meta meta) {\n         this.id = id;\n-        this.schemas = Optional.ofNullable(schemas).orElse(Collections.<String>emptyList());\n+        this.schemas = Optional.ofNullable(schemas).orElse(List.of());\n         this.meta = meta;\n     }\n "},{"sha":"576667cd2b4f15f9cd80909a68d54d75622df365","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMSearchRequest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMSearchRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMSearchRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMSearchRequest.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,6 @@\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Optional;\n \n@@ -32,7 +31,7 @@ public class SCIMSearchRequest extends SCIMBean {\n \n     private static final long serialVersionUID = 5759362928661983543L;\n \n-    private final List<String> schemas = Arrays.asList(Resource.SearchRequest.schema());\n+    private final List<String> schemas = List.of(Resource.SearchRequest.schema());\n \n     private final List<String> attributes = new ArrayList<>();\n "},{"sha":"a65775d87aef1561e6bd695feb2ef3cd043ad91f","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/ServiceProviderConfig.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FServiceProviderConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FServiceProviderConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FServiceProviderConfig.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -22,7 +22,6 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n \n@@ -32,7 +31,7 @@ public class ServiceProviderConfig extends SCIMBean {\n \n     private static final long serialVersionUID = 1027738509789460252L;\n \n-    private final List<String> schemas = Arrays.asList(Resource.ServiceProviderConfig.schema());\n+    private final List<String> schemas = List.of(Resource.ServiceProviderConfig.schema());\n \n     private final Meta meta;\n "},{"sha":"4f8e2f5a14d2579cfaae5bbca045a8dff1cc0ad3","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/RESTSCIMCXFContext.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FRESTSCIMCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FRESTSCIMCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FRESTSCIMCXFContext.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.syncope.ext.scimv2.cxf;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n import javax.annotation.Resource;\n import org.apache.cxf.Bus;\n import org.apache.cxf.endpoint.Server;\n@@ -83,20 +84,20 @@ public Server scimv2Container() {\n         scimv2Container.setBus(bus);\n         scimv2Container.setAddress(\"/scim\");\n         scimv2Container.setStaticSubresourceResolution(true);\n-        scimv2Container.setBasePackages(Arrays.asList(\n+        scimv2Container.setBasePackages(List.of(\n                 \"org.apache.syncope.ext.scimv2.api.service\",\n                 \"org.apache.syncope.ext.scimv2.cxf.service\"));\n-        scimv2Container.setProperties(Collections.singletonMap(\"convert.wadl.resources.to.dom\", \"false\"));\n+        scimv2Container.setProperties(Map.of(\"convert.wadl.resources.to.dom\", \"false\"));\n \n-        scimv2Container.setInInterceptors(Arrays.asList(\n+        scimv2Container.setInInterceptors(List.of(\n                 ctx.getBean(GZIPInInterceptor.class),\n                 ctx.getBean(JAXRSBeanValidationInInterceptor.class)));\n \n-        scimv2Container.setOutInterceptors(Arrays.asList(\n+        scimv2Container.setOutInterceptors(List.of(\n                 ctx.getBean(GZIPOutInterceptor.class),\n                 ctx.getBean(JAXRSBeanValidationOutInterceptor.class)));\n \n-        scimv2Container.setProviders(Arrays.asList(\n+        scimv2Container.setProviders(List.of(\n                 scimJacksonJsonProvider(),\n                 scimExceptionMapper(),\n                 scimAddETagFilter(),"},{"sha":"e9e32aac7937bddbc5446529845f549986c2b532","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.ext.scimv2.cxf.service;\n \n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import javax.ws.rs.core.Context;\n@@ -203,14 +202,14 @@ protected ListResponse<R> doSearch(\n \n         List<OrderByClause> sort;\n         if (request.getSortBy() == null) {\n-            sort = Collections.<OrderByClause>emptyList();\n+            sort = List.of();\n         } else {\n             OrderByClause clause = new OrderByClause();\n             clause.setField(visitor.createAttributeCond(request.getSortBy()).getSchema());\n             clause.setDirection(request.getSortOrder() == null || request.getSortOrder() == SortOrder.ascending\n                     ? OrderByClause.Direction.ASC\n                     : OrderByClause.Direction.DESC);\n-            sort = Collections.singletonList(clause);\n+            sort = List.of(clause);\n         }\n \n         Pair<Integer, ? extends List<? extends AnyTO>> result = anyLogic(type).search("},{"sha":"db163f4c42ea6fa794c7e8038cd8d439c251fe3b","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,9 +18,8 @@\n  */\n package org.apache.syncope.ext.scimv2.cxf.service;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.ws.rs.core.Response;\n@@ -37,7 +36,6 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.ext.scimv2.api.BadRequestException;\n import org.apache.syncope.ext.scimv2.api.data.ListResponse;\n@@ -73,8 +71,8 @@ public Response create(final SCIMGroup group) {\n                 binder().toSCIMGroup(\n                         result.getEntity(),\n                         uriInfo.getAbsolutePathBuilder().path(result.getEntity().getKey()).build().toASCIIString(),\n-                        Collections.<String>emptyList(),\n-                        Collections.<String>emptyList()));\n+                        List.of(),\n+                        List.of()));\n     }\n \n     @Override\n@@ -85,8 +83,8 @@ public SCIMGroup get(final String id,\n         return binder().toSCIMGroup(\n                 groupLogic().read(id),\n                 uriInfo.getAbsolutePathBuilder().build().toASCIIString(),\n-                Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(attributes, ','))),\n-                Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));\n+                List.of(ArrayUtils.nullToEmpty(StringUtils.split(attributes, ','))),\n+                List.of(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));\n     }\n \n     @Override\n@@ -112,14 +110,14 @@ public Response replace(final String id, final SCIMGroup group) {\n         membCond.setGroup(id);\n         SearchCond searchCond = SearchCond.getLeafCond(membCond);\n         int count = userLogic().search(searchCond,\n-                1, 1, Collections.<OrderByClause>emptyList(),\n+                1, 1, List.of(),\n                 SyncopeConstants.ROOT_REALM, false).getLeft();\n         for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n             beforeMembers.addAll(userLogic().search(\n                     searchCond,\n                     page,\n                     AnyDAO.DEFAULT_PAGE_SIZE,\n-                    Collections.<OrderByClause>emptyList(),\n+                    List.of(),\n                     SyncopeConstants.ROOT_REALM,\n                     false).\n                     getRight().stream().map(EntityTO::getKey).collect(Collectors.toSet()));\n@@ -165,8 +163,8 @@ public Response replace(final String id, final SCIMGroup group) {\n                 binder().toSCIMGroup(\n                         result.getEntity(),\n                         uriInfo.getAbsolutePathBuilder().path(result.getEntity().getKey()).build().toASCIIString(),\n-                        Collections.<String>emptyList(),\n-                        Collections.<String>emptyList()));\n+                        List.of(),\n+                        List.of()));\n     }\n \n     @Override\n@@ -193,11 +191,11 @@ public ListResponse<SCIMGroup> search(\n         SCIMSearchRequest request = new SCIMSearchRequest(filter, sortBy, sortOrder, startIndex, count);\n         if (attributes != null) {\n             request.getAttributes().addAll(\n-                    Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(attributes, ','))));\n+                    List.of(ArrayUtils.nullToEmpty(StringUtils.split(attributes, ','))));\n         }\n         if (excludedAttributes != null) {\n             request.getExcludedAttributes().addAll(\n-                    Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));\n+                    List.of(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));\n         }\n \n         return doSearch(Resource.Group, request);"},{"sha":"3f2c766b0945b6445a379e688c802b5ad69b6ee2","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/UserServiceImpl.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.ext.scimv2.cxf.service;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n+import java.util.List;\n+\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.Response.ResponseBuilder;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -46,8 +46,8 @@ public Response create(final SCIMUser user) {\n                 binder().toSCIMUser(\n                         result.getEntity(),\n                         uriInfo.getAbsolutePathBuilder().path(result.getEntity().getKey()).build().toASCIIString(),\n-                        Collections.<String>emptyList(),\n-                        Collections.<String>emptyList()));\n+                        List.of(),\n+                        List.of()));\n     }\n \n     @Override\n@@ -58,8 +58,8 @@ public SCIMUser get(final String id,\n         return binder().toSCIMUser(\n                 userLogic().read(id),\n                 uriInfo.getAbsolutePathBuilder().build().toASCIIString(),\n-                Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(attributes, ','))),\n-                Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));\n+                List.of(ArrayUtils.nullToEmpty(StringUtils.split(attributes, ','))),\n+                List.of(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));\n     }\n \n     @Override\n@@ -85,8 +85,8 @@ public Response replace(final String id, final SCIMUser user) {\n                 binder().toSCIMUser(\n                         result.getEntity(),\n                         uriInfo.getAbsolutePathBuilder().path(result.getEntity().getKey()).build().toASCIIString(),\n-                        Collections.<String>emptyList(),\n-                        Collections.<String>emptyList()));\n+                        List.of(),\n+                        List.of()));\n     }\n \n     @Override\n@@ -113,11 +113,11 @@ public ListResponse<SCIMUser> search(\n         SCIMSearchRequest request = new SCIMSearchRequest(filter, sortBy, sortOrder, startIndex, count);\n         if (attributes != null) {\n             request.getAttributes().addAll(\n-                    Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(attributes, ','))));\n+                    List.of(ArrayUtils.nullToEmpty(StringUtils.split(attributes, ','))));\n         }\n         if (excludedAttributes != null) {\n             request.getExcludedAttributes().addAll(\n-                    Arrays.asList(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));\n+                    List.of(ArrayUtils.nullToEmpty(StringUtils.split(excludedAttributes, ','))));\n         }\n \n         return doSearch(Resource.User, request);"},{"sha":"3c8ce978946b348841bd2b85ae2e858e3c98a465","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterClientContext.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.common.keymaster.client.self;\n \n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n-import java.util.Arrays;\n+\n+import java.util.List;\n+\n import org.apache.cxf.ext.logging.LoggingFeature;\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n@@ -54,9 +56,9 @@ public JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean() {\n         restClientFactoryBean.setPassword(password);\n         restClientFactoryBean.setThreadSafe(true);\n         restClientFactoryBean.setInheritHeaders(true);\n-        restClientFactoryBean.setFeatures(Arrays.asList(new LoggingFeature()));\n+        restClientFactoryBean.setFeatures(List.of(new LoggingFeature()));\n         restClientFactoryBean.setProviders(\n-                Arrays.asList(new JacksonJsonProvider(), new SelfKeymasterClientExceptionMapper()));\n+                List.of(new JacksonJsonProvider(), new SelfKeymasterClientExceptionMapper()));\n         return restClientFactoryBean;\n     }\n "},{"sha":"2a1b75922bd891985b6945fa327fe5ae644d5bca","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterDomainOps.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterDomainOps.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.syncope.common.keymaster.client.self;\n \n-import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n+\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n@@ -35,13 +36,13 @@ public SelfKeymasterDomainOps(final JAXRSClientFactoryBean clientFactory) {\n \n     @Override\n     public List<Domain> list() {\n-        return client(DomainService.class, Collections.emptyMap()).list();\n+        return client(DomainService.class, Map.of()).list();\n     }\n \n     @Override\n     public Domain read(final String key) {\n         try {\n-            return client(DomainService.class, Collections.emptyMap()).read(key);\n+            return client(DomainService.class, Map.of()).read(key);\n         } catch (KeymasterException e) {\n             throw e;\n         } catch (Exception e) {\n@@ -52,7 +53,7 @@ public Domain read(final String key) {\n     @Override\n     public void create(final Domain domain) {\n         try {\n-            client(DomainService.class, Collections.emptyMap()).create(domain);\n+            client(DomainService.class, Map.of()).create(domain);\n         } catch (KeymasterException e) {\n             throw e;\n         } catch (Exception e) {\n@@ -63,7 +64,7 @@ public void create(final Domain domain) {\n     @Override\n     public void changeAdminPassword(final String key, final String password, final CipherAlgorithm cipherAlgorithm) {\n         try {\n-            client(DomainService.class, Collections.emptyMap()).changeAdminPassword(key, password, cipherAlgorithm);\n+            client(DomainService.class, Map.of()).changeAdminPassword(key, password, cipherAlgorithm);\n         } catch (KeymasterException e) {\n             throw e;\n         } catch (Exception e) {\n@@ -74,7 +75,7 @@ public void changeAdminPassword(final String key, final String password, final C\n     @Override\n     public void adjustPoolSize(final String key, final int maxPoolSize, final int minIdle) {\n         try {\n-            client(DomainService.class, Collections.emptyMap()).adjustPoolSize(key, maxPoolSize, minIdle);\n+            client(DomainService.class, Map.of()).adjustPoolSize(key, maxPoolSize, minIdle);\n         } catch (KeymasterException e) {\n             throw e;\n         } catch (Exception e) {\n@@ -85,7 +86,7 @@ public void adjustPoolSize(final String key, final int maxPoolSize, final int mi\n     @Override\n     public void delete(final String key) {\n         try {\n-            client(DomainService.class, Collections.emptyMap()).delete(key);\n+            client(DomainService.class, Map.of()).delete(key);\n         } catch (KeymasterException e) {\n             throw e;\n         } catch (Exception e) {"},{"sha":"99d3b6449b5f28dbf4219e3710304b81ee146a01","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterServiceOps.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterServiceOps.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.common.keymaster.client.self;\n \n-import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.CompletionStage;\n import javax.ws.rs.HttpMethod;\n import javax.ws.rs.Path;\n@@ -59,7 +59,7 @@ public SelfKeymasterServiceOps(final JAXRSClientFactoryBean clientFactory, final\n     @Override\n     public List<NetworkService> list(final NetworkService.Type serviceType) {\n         try {\n-            return client(NetworkServiceService.class, Collections.emptyMap()).list(serviceType);\n+            return client(NetworkServiceService.class, Map.of()).list(serviceType);\n         } catch (KeymasterException e) {\n             throw e;\n         } catch (Exception e) {\n@@ -70,7 +70,7 @@ public List<NetworkService> list(final NetworkService.Type serviceType) {\n     @Override\n     public NetworkService get(final NetworkService.Type serviceType) {\n         try {\n-            return client(NetworkServiceService.class, Collections.emptyMap()).get(serviceType);\n+            return client(NetworkServiceService.class, Map.of()).get(serviceType);\n         } catch (KeymasterException e) {\n             throw e;\n         } catch (Exception e) {"},{"sha":"7a2dbeb5c3fdffd96d0c33f555112ee0086e2f93","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/SelfKeymasterContext.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2FSelfKeymasterContext.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.ext.self.keymaster.cxf;\n \n import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;\n-import java.util.Arrays;\n-import java.util.Collections;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n import javax.annotation.Resource;\n import org.apache.cxf.Bus;\n import org.apache.cxf.endpoint.Server;\n@@ -86,20 +88,20 @@ public Server selfKeymasterContainer() {\n         selfKeymasterContainer.setBus(bus);\n         selfKeymasterContainer.setAddress(\"/keymaster\");\n         selfKeymasterContainer.setStaticSubresourceResolution(true);\n-        selfKeymasterContainer.setBasePackages(Arrays.asList(\n+        selfKeymasterContainer.setBasePackages(List.of(\n                 \"org.apache.syncope.ext.self.keymaster.api.service\",\n                 \"org.apache.syncope.ext.self.keymaster.cxf.service\"));\n-        selfKeymasterContainer.setProperties(Collections.singletonMap(\"convert.wadl.resources.to.dom\", \"false\"));\n+        selfKeymasterContainer.setProperties(Map.of(\"convert.wadl.resources.to.dom\", \"false\"));\n \n-        selfKeymasterContainer.setInInterceptors(Arrays.asList(\n+        selfKeymasterContainer.setInInterceptors(List.of(\n                 ctx.getBean(GZIPInInterceptor.class),\n                 ctx.getBean(JAXRSBeanValidationInInterceptor.class)));\n \n-        selfKeymasterContainer.setOutInterceptors(Arrays.asList(\n+        selfKeymasterContainer.setOutInterceptors(List.of(\n                 ctx.getBean(GZIPOutInterceptor.class),\n                 ctx.getBean(JAXRSBeanValidationOutInterceptor.class)));\n \n-        selfKeymasterContainer.setProviders(Arrays.asList(\n+        selfKeymasterContainer.setProviders(List.of(\n                 ctx.getBean(RestServiceExceptionMapper.class),\n                 ctx.getBean(JacksonJaxbJsonProvider.class),\n                 selfKeymasterWADLGenerator()));"},{"sha":"3d46caec96015361cceee9bcb3f8a2036a81317d","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/client/SelfKeymasterInternalConfParamOps.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalConfParamOps.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -21,7 +21,7 @@\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n-import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.core.logic.ConfParamLogic;\n@@ -48,7 +48,7 @@ public Map<String, Object> list(final String domain) {\n         return AuthContextUtils.callAs(\n                 domain,\n                 keymasterUser,\n-                Collections.emptyList(),\n+                List.of(),\n                 () -> logic.list());\n     }\n \n@@ -58,7 +58,7 @@ public <T> T get(final String domain, final String key, final T defaultValue, fi\n         JsonNode valueNode = AuthContextUtils.callAs(\n                 domain,\n                 keymasterUser,\n-                Collections.emptyList(),\n+                List.of(),\n                 () -> logic.get(key));\n         if (valueNode == null) {\n             return defaultValue;\n@@ -79,7 +79,7 @@ public <T> void set(final String domain, final String key, final T value) {\n         } else {\n             JsonNode valueNode = MAPPER.valueToTree(value);\n \n-            AuthContextUtils.callAs(domain, keymasterUser, Collections.emptyList(), () -> {\n+            AuthContextUtils.callAs(domain, keymasterUser, List.of(), () -> {\n                 logic.set(key, valueNode);\n                 return null;\n             });\n@@ -88,7 +88,7 @@ public <T> void set(final String domain, final String key, final T value) {\n \n     @Override\n     public void remove(final String domain, final String key) {\n-        AuthContextUtils.callAs(domain, keymasterUser, Collections.emptyList(), () -> {\n+        AuthContextUtils.callAs(domain, keymasterUser, List.of(), () -> {\n             logic.remove(key);\n             return null;\n         });"},{"sha":"8605cf9ec0fbb3ceb1bf331bf49cf07a7ad00f8e","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/client/SelfKeymasterInternalDomainOps.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalDomainOps.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.ext.self.keymaster.cxf.client;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n@@ -39,43 +38,41 @@ public class SelfKeymasterInternalDomainOps implements DomainOps {\n \n     @Override\n     public List<Domain> list() {\n-        return AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(),\n-            () -> logic.list());\n+        return AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, List.of(), () -> logic.list());\n     }\n \n     @Override\n     public Domain read(final String key) {\n-        return AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(),\n-            () -> logic.read(key));\n+        return AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, List.of(), () -> logic.read(key));\n     }\n \n     @Override\n     public void create(final Domain domain) {\n-        AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(), () -> {\n+        AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, List.of(), () -> {\n             logic.create(domain);\n             return null;\n         });\n     }\n \n     @Override\n     public void changeAdminPassword(final String key, final String password, final CipherAlgorithm cipherAlgorithm) {\n-        AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(), () -> {\n+        AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, List.of(), () -> {\n             logic.changeAdminPassword(key, password, cipherAlgorithm);\n             return null;\n         });\n     }\n \n     @Override\n     public void adjustPoolSize(final String key, final int maxPoolSize, final int minIdle) {\n-        AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(), () -> {\n+        AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, List.of(), () -> {\n             logic.adjustPoolSize(keymasterUser, maxPoolSize, minIdle);\n             return null;\n         });\n     }\n \n     @Override\n     public void delete(final String key) {\n-        AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(), () -> {\n+        AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, List.of(), () -> {\n             logic.delete(key);\n             return null;\n         });"},{"sha":"f283bf6a889d77fff1b93affff634e89b9edb301","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/client/SelfKeymasterInternalServiceOps.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalServiceOps.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.ext.self.keymaster.cxf.client;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n@@ -42,7 +41,7 @@ public List<NetworkService> list(final NetworkService.Type serviceType) {\n         return AuthContextUtils.callAs(\n                 SyncopeConstants.MASTER_DOMAIN,\n                 keymasterUser,\n-                Collections.emptyList(),\n+                List.of(),\n                 () -> logic.list(serviceType));\n     }\n \n@@ -52,7 +51,7 @@ public NetworkService get(final NetworkService.Type serviceType) {\n             return AuthContextUtils.callAs(\n                     SyncopeConstants.MASTER_DOMAIN,\n                     keymasterUser,\n-                    Collections.emptyList(),\n+                    List.of(),\n                     () -> logic.get(serviceType));\n         } catch (Exception e) {\n             throw new KeymasterException(e);\n@@ -64,7 +63,7 @@ public void register(final NetworkService service) {\n         AuthContextUtils.callAs(\n                 SyncopeConstants.MASTER_DOMAIN,\n                 keymasterUser,\n-                Collections.emptyList(),\n+                List.of(),\n                 () -> {\n                     logic.register(service);\n                     return null;\n@@ -76,7 +75,7 @@ public void unregister(final NetworkService service) {\n         AuthContextUtils.callAs(\n                 SyncopeConstants.MASTER_DOMAIN,\n                 keymasterUser,\n-                Collections.emptyList(),\n+                List.of(),\n                 () -> {\n                     logic.unregister(service);\n                     return null;"},{"sha":"e136d69fd7323bbe7a9ae88de0819da274456034","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/SyncopeBuildToolsApplication.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FSyncopeBuildToolsApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FSyncopeBuildToolsApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FSyncopeBuildToolsApplication.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.fit.buildtools;\n \n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n-import java.util.Arrays;\n+\n+import java.util.List;\n+\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n import javax.servlet.ServletRegistration;\n@@ -98,8 +100,8 @@ public Server restProvisioning() {\n         restProvisioning.setBus(bus);\n         restProvisioning.setAddress(\"/rest\");\n         restProvisioning.setStaticSubresourceResolution(true);\n-        restProvisioning.setBasePackages(Arrays.asList(\"org.apache.syncope.fit.buildtools.cxf\"));\n-        restProvisioning.setProviders(Arrays.asList(new JacksonJsonProvider()));\n+        restProvisioning.setBasePackages(List.of(\"org.apache.syncope.fit.buildtools.cxf\"));\n+        restProvisioning.setProviders(List.of(new JacksonJsonProvider()));\n         return restProvisioning.create();\n     }\n "},{"sha":"4241d4845530b7d695306a58c3adeb4cdb0e3f74","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/cxf/ProvisioningImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FProvisioningImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FProvisioningImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FProvisioningImpl.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -25,7 +25,6 @@\n import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n@@ -325,7 +324,7 @@ public List<WSChange> sync()\n \n         LOG.debug(\"sync request received\");\n \n-        return Collections.<WSChange>emptyList();\n+        return List.of();\n     }\n \n     @Override"},{"sha":"776118377b811999e5798dcaddbda4905474f38a","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/PrintersValueProvider.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FPrintersValueProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FPrintersValueProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FPrintersValueProvider.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core.reference.flowable;\n \n-import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n@@ -49,7 +48,7 @@ public class PrintersValueProvider implements DropdownValueProvider {\n         OrderByClause orderByNameAsc = new OrderByClause();\n         orderByNameAsc.setField(\"name\");\n         orderByNameAsc.setDirection(OrderByClause.Direction.ASC);\n-        ORDER_BY = Collections.singletonList(orderByNameAsc);\n+        ORDER_BY = List.of(orderByNameAsc);\n     }\n \n     @Autowired"},{"sha":"d65c46d9cdc41513d2a732d727ee365778e2d342","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import java.util.Arrays;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -85,7 +85,7 @@\n public class ITImplementationLookup implements ImplementationLookup {\n \n     private static final Set<Class<?>> JWTSSOPROVIDER_CLASSES = new HashSet<>(\n-            Arrays.asList(SyncopeJWTSSOProvider.class, CustomJWTSSOProvider.class));\n+            List.of(SyncopeJWTSSOProvider.class, CustomJWTSSOProvider.class));\n \n     private static final Map<Class<? extends ReportletConf>, Class<? extends Reportlet>> REPORTLET_CLASSES =\n             new HashMap<Class<? extends ReportletConf>, Class<? extends Reportlet>>() {\n@@ -149,7 +149,7 @@ public class ITImplementationLookup implements ImplementationLookup {\n     };\n \n     private static final Set<Class<?>> AUDITAPPENDER_CLASSES = new HashSet<>(\n-            Arrays.asList(TestFileAuditAppender.class, TestFileRewriteAuditAppender.class));\n+            List.of(TestFileAuditAppender.class, TestFileRewriteAuditAppender.class));\n \n     private static final Map<String, Set<String>> CLASS_NAMES = new HashMap<String, Set<String>>() {\n "},{"sha":"366db9e0abb33b89c2ca6a3a6c3485a4b7bc9b77","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestNotificationRecipientsProvider.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestNotificationRecipientsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestNotificationRecipientsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestNotificationRecipientsProvider.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import java.util.Collections;\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.springframework.transaction.annotation.Transactional;\n@@ -29,7 +28,7 @@ public class TestNotificationRecipientsProvider implements RecipientsProvider {\n     @Transactional(readOnly = true)\n     @Override\n     public Set<String> provideRecipients(final Notification notification) {\n-        return Collections.singleton(getClass().getSimpleName() + \"@syncope.apache.org\");\n+        return Set.of(getClass().getSimpleName() + \"@syncope.apache.org\");\n     }\n \n }"},{"sha":"f783541d78b12fe180dbef29655ce057f40620f5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -26,7 +26,6 @@\n import java.io.InputStream;\n import java.net.URI;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n@@ -445,7 +444,7 @@ protected Pair<String, String> createNotificationTask(\n         notification.setSelfAsRecipient(true);\n         notification.setRecipientAttrName(\"email\");\n         if (staticRecipients != null) {\n-            notification.getStaticRecipients().addAll(Arrays.asList(staticRecipients));\n+            notification.getStaticRecipients().addAll(List.of(staticRecipients));\n         }\n \n         notification.setSender(sender);"},{"sha":"3d9fdb65ecda342b78a9dcdcc5d1a340685af909","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AbstractConsoleITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -23,7 +23,7 @@\n import com.giffing.wicket.spring.boot.starter.app.classscanner.candidates.WicketClassCandidatesHolder;\n import com.giffing.wicket.spring.boot.starter.configuration.extensions.core.settings.general.GeneralSettingsProperties;\n import com.giffing.wicket.spring.boot.starter.configuration.extensions.external.spring.boot.actuator.WicketEndpointRepositoryDefault;\n-import java.util.Collections;\n+\n import java.util.List;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.commons.PreviewUtils;\n@@ -58,7 +58,7 @@ public GeneralSettingsProperties generalSettingsProperties() {\n \n         @Bean\n         public List<WicketApplicationInitConfiguration> configurations() {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         @Bean"},{"sha":"e61e02df5e0d1a42997ed66a1fb118542ce270d1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AjaxPalettePanelITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxPalettePanelITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxPalettePanelITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxPalettePanelITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -20,7 +20,6 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n@@ -32,9 +31,9 @@\n \n public class AjaxPalettePanelITCase extends AbstractConsoleITCase {\n \n-    private static final IModel<List<String>> SELECTED = new ListModel<>(Arrays.asList(\"A\", \"D\"));\n+    private static final IModel<List<String>> SELECTED = new ListModel<>(List.of(\"A\", \"D\"));\n \n-    private static final ListModel<String> ALL = new ListModel<>(Arrays.asList(\"A\", \"B\", \"C\", \"D\"));\n+    private static final ListModel<String> ALL = new ListModel<>(List.of(\"A\", \"B\", \"C\", \"D\"));\n \n     @Test\n     public void isRendered() {"},{"sha":"f597ed2677d6c08d005d03019eae3d08824e68b6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BatchITCase.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -33,7 +33,6 @@\n import java.net.URI;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.UUID;\n@@ -85,9 +84,9 @@ private String requestBody(final String boundary) throws JsonProcessingException\n         createUser.setMethod(HttpMethod.POST);\n         createUser.setRequestURI(\"/users\");\n         createUser.setHeaders(new HashMap<>());\n-        createUser.getHeaders().put(HttpHeaders.ACCEPT, Arrays.asList(MediaType.APPLICATION_JSON));\n-        createUser.getHeaders().put(HttpHeaders.CONTENT_TYPE, Arrays.asList(MediaType.APPLICATION_JSON));\n-        createUser.getHeaders().put(HttpHeaders.CONTENT_LENGTH, Arrays.asList(createUserPayload.length()));\n+        createUser.getHeaders().put(HttpHeaders.ACCEPT, List.of(MediaType.APPLICATION_JSON));\n+        createUser.getHeaders().put(HttpHeaders.CONTENT_TYPE, List.of(MediaType.APPLICATION_JSON));\n+        createUser.getHeaders().put(HttpHeaders.CONTENT_LENGTH, List.of(createUserPayload.length()));\n         createUser.setContent(createUserPayload);\n         reqItems.add(createUser);\n \n@@ -103,9 +102,9 @@ private String requestBody(final String boundary) throws JsonProcessingException\n         createGroup.setMethod(HttpMethod.POST);\n         createGroup.setRequestURI(\"/groups\");\n         createGroup.setHeaders(new HashMap<>());\n-        createGroup.getHeaders().put(HttpHeaders.ACCEPT, Arrays.asList(MediaType.APPLICATION_XML));\n-        createGroup.getHeaders().put(HttpHeaders.CONTENT_TYPE, Arrays.asList(MediaType.APPLICATION_XML));\n-        createGroup.getHeaders().put(HttpHeaders.CONTENT_LENGTH, Arrays.asList(createGroupPayload.length()));\n+        createGroup.getHeaders().put(HttpHeaders.ACCEPT, List.of(MediaType.APPLICATION_XML));\n+        createGroup.getHeaders().put(HttpHeaders.CONTENT_TYPE, List.of(MediaType.APPLICATION_XML));\n+        createGroup.getHeaders().put(HttpHeaders.CONTENT_LENGTH, List.of(createGroupPayload.length()));\n         createGroup.setContent(createGroupPayload);\n         reqItems.add(createGroup);\n \n@@ -119,10 +118,10 @@ private String requestBody(final String boundary) throws JsonProcessingException\n         updateUser.setMethod(HttpMethod.PATCH);\n         updateUser.setRequestURI(\"/users/\" + userCR.getUsername());\n         updateUser.setHeaders(new HashMap<>());\n-        updateUser.getHeaders().put(RESTHeaders.PREFER, Arrays.asList(Preference.RETURN_NO_CONTENT.toString()));\n-        updateUser.getHeaders().put(HttpHeaders.ACCEPT, Arrays.asList(MediaType.APPLICATION_JSON));\n-        updateUser.getHeaders().put(HttpHeaders.CONTENT_TYPE, Arrays.asList(MediaType.APPLICATION_JSON));\n-        updateUser.getHeaders().put(HttpHeaders.CONTENT_LENGTH, Arrays.asList(updateUserPayload.length()));\n+        updateUser.getHeaders().put(RESTHeaders.PREFER, List.of(Preference.RETURN_NO_CONTENT.toString()));\n+        updateUser.getHeaders().put(HttpHeaders.ACCEPT, List.of(MediaType.APPLICATION_JSON));\n+        updateUser.getHeaders().put(HttpHeaders.CONTENT_TYPE, List.of(MediaType.APPLICATION_JSON));\n+        updateUser.getHeaders().put(HttpHeaders.CONTENT_LENGTH, List.of(updateUserPayload.length()));\n         updateUser.setContent(updateUserPayload);\n         reqItems.add(updateUser);\n "},{"sha":"dcfd8fb599ca15eda96698e567c5be14b8b0fe9f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -27,7 +27,6 @@\n \n import java.io.IOException;\n import java.security.AccessControlException;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n@@ -269,9 +268,9 @@ public void patch() {\n         Map<String, Attr> attrs = EntityTOUtils.buildAttrMap(updated.getPlainAttrs());\n         assertFalse(attrs.containsKey(\"icon\"));\n         assertFalse(attrs.containsKey(\"show\"));\n-        assertEquals(Collections.singletonList(\"sx\"), attrs.get(\"rderived_sx\").getValues());\n-        assertEquals(Collections.singletonList(\"dx\"), attrs.get(\"rderived_dx\").getValues());\n-        assertEquals(Collections.singletonList(\"mr\"), attrs.get(\"title\").getValues());\n+        assertEquals(List.of(\"sx\"), attrs.get(\"rderived_sx\").getValues());\n+        assertEquals(List.of(\"dx\"), attrs.get(\"rderived_dx\").getValues());\n+        assertEquals(List.of(\"mr\"), attrs.get(\"title\").getValues());\n     }\n \n     @Test"},{"sha":"3a01c9cc6834ffaa80ac2cae8df126c6c6e1d282","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/KeymasterITCase.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -29,8 +29,6 @@\n \n import java.security.AccessControlException;\n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n@@ -82,7 +80,7 @@ public void confParamGet() {\n         assertEquals(false, booleanValue);\n \n         List<String> stringValues =\n-                Arrays.asList(confParamOps.get(\n+                List.of(confParamOps.get(\n                         SyncopeConstants.MASTER_DOMAIN, \"authentication.attributes\", null, String[].class));\n         assertNotNull(stringValues);\n         List<String> actualStringValues = new ArrayList<>();\n@@ -125,7 +123,7 @@ public void confParamSetGetRemove() {\n         stringValues.add(\"stringValue2\");\n         confParamOps.set(SyncopeConstants.MASTER_DOMAIN, key, stringValues);\n         List<String> actualStringValues =\n-                Arrays.asList(confParamOps.get(SyncopeConstants.MASTER_DOMAIN, key, null, String[].class));\n+                List.of(confParamOps.get(SyncopeConstants.MASTER_DOMAIN, key, null, String[].class));\n         assertEquals(stringValues, actualStringValues);\n \n         confParamOps.remove(SyncopeConstants.MASTER_DOMAIN, key);\n@@ -156,7 +154,7 @@ private List<NetworkService> findNetworkServices(\n         int i = 0;\n         int maxit = maxWaitSeconds;\n \n-        List<NetworkService> list = Collections.emptyList();\n+        List<NetworkService> list = List.of();\n         do {\n             try {\n                 Thread.sleep(1000);"},{"sha":"83ecf39d896fcafc02a44aa7c08aab8ed3e59d83","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -27,7 +27,6 @@\n \n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Set;\n import javax.ws.rs.core.Response;\n@@ -132,7 +131,7 @@ public void getPasswordPolicy() {\n \n         assertNotNull(policyTO);\n         assertTrue(policyTO.getUsedByResources().contains(RESOURCE_NAME_NOPROPAGATION));\n-        assertTrue(policyTO.getUsedByRealms().containsAll(Arrays.asList(\"/\", \"/odd\", \"/even\")));\n+        assertTrue(policyTO.getUsedByRealms().containsAll(List.of(\"/\", \"/odd\", \"/even\")));\n     }\n \n     @Test"},{"sha":"1abcabd6a29dada604224481a90b6c6c84360610","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -27,7 +27,6 @@\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -437,7 +436,7 @@ public void issueSYNCOPE1430() throws ParseException {\n \n             Set<Attribute> propagationAttrs = new HashSet<>();\n             if (StringUtils.isNotBlank(tasks.getResult().get(0).getAttributes())) {\n-                propagationAttrs.addAll(Arrays.asList(\n+                propagationAttrs.addAll(List.of(\n                         POJOHelper.deserialize(tasks.getResult().get(0).getAttributes(), Attribute[].class)));\n             }\n "},{"sha":"798b5d6b08d955f762e7ab79ab56c0cef88f9631","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -449,7 +449,7 @@ public void reconcileFromLDAP() {\n         assertNotNull(groupConnObject);\n         Attr groupDn = groupConnObject.getAttr(Name.NAME).get();\n         updateLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD,\n-                groupDn.getValues().get(0), Collections.singletonMap(\"uniquemember\", \"uid=admin,ou=system\"));\n+                groupDn.getValues().get(0), Map.of(\"uniquemember\", \"uid=admin,ou=system\"));\n \n         execProvisioningTask(taskService, TaskType.PULL, \"1e419ca4-ea81-4493-a14f-28b90113686d\", 50, false);\n \n@@ -1261,7 +1261,7 @@ public void issueSYNCOPE1062() {\n \n             // 4. update the user on the external resource\n             updateLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD,\n-                    userDn.getValues().get(0), Collections.singletonMap(\"mail\", \"pullFromLDAP2@syncope.apache.org\"));\n+                    userDn.getValues().get(0), Map.of(\"mail\", \"pullFromLDAP2@syncope.apache.org\"));\n \n             connObject = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), user.getKey());\n             assertNotNull(connObject);"},{"sha":"ff545643b1425137d3da15a60209b69f20d988cb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -28,7 +28,6 @@\n import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n@@ -170,7 +169,7 @@ public void createOverridingProps() {\n         prop.setSchema(schema);\n         prop.getValues().add(\"http://invalidurl/\");\n \n-        Set<ConnConfProperty> connectorConfigurationProperties = new HashSet<>(Arrays.asList(prop));\n+        Set<ConnConfProperty> connectorConfigurationProperties = Set.of(prop);\n         resourceTO.getConfOverride().addAll(connectorConfigurationProperties);\n \n         Response response = resourceService.create(resourceTO);"},{"sha":"378d1ecaa664b718ae9ec7c02e6fa9cfd2c61ec3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2CallbackHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2CallbackHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2CallbackHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2CallbackHandler.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,8 @@\n package org.apache.syncope.fit.core;\n \n import java.io.IOException;\n-import java.util.Collections;\n+import java.util.List;\n+\n import javax.security.auth.callback.Callback;\n import javax.security.auth.callback.CallbackHandler;\n import javax.security.auth.callback.UnsupportedCallbackException;\n@@ -63,7 +64,7 @@ public void handle(Callback[] callbacks) throws IOException, UnsupportedCallback\n                 samlCallback.setSubject(subjectBean);\n                 AuthenticationStatementBean authBean = new AuthenticationStatementBean();\n                 authBean.setAuthenticationMethod(\"Password\");\n-                samlCallback.setAuthenticationStatementData(Collections.singletonList(authBean));\n+                samlCallback.setAuthenticationStatementData(List.of(authBean));\n             } else {\n                 throw new UnsupportedCallbackException(callback, \"Unrecognized Callback\");\n             }"},{"sha":"b4553c8085f7c2f4e0469b0fbc0e99be30b2bd4b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -42,9 +42,7 @@\n import java.security.SecureRandom;\n import java.security.cert.Certificate;\n import java.security.cert.X509Certificate;\n-import java.util.Arrays;\n import java.util.Base64;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n@@ -496,8 +494,8 @@ private org.opensaml.saml.saml2.core.Response createResponse(\n         conditions.setNotAfter(new DateTime().plusMinutes(5));\n \n         AudienceRestrictionBean audienceRestriction = new AudienceRestrictionBean();\n-        audienceRestriction.setAudienceURIs(Collections.singletonList(\"http://recipient.apache.org/\"));\n-        conditions.setAudienceRestrictions(Collections.singletonList(audienceRestriction));\n+        audienceRestriction.setAudienceURIs(List.of(\"http://recipient.apache.org/\"));\n+        conditions.setAudienceRestrictions(List.of(audienceRestriction));\n         callbackHandler.setConditions(conditions);\n \n         SAMLCallback samlCallback = new SAMLCallback();\n@@ -579,7 +577,7 @@ private static void updateMetadataWithCert() throws Exception {\n             basedir = new File(\".\").getCanonicalPath();\n         }\n \n-        List<String> fileNames = Arrays.asList(\"fediz.xml\", \"fediz_realmb.xml\");\n+        List<String> fileNames = List.of(\"fediz.xml\", \"fediz_realmb.xml\");\n         for (String fileName : fileNames) {\n             Path path = FileSystems.getDefault().getPath(basedir, \"/src/test/resources/\" + fileName);\n             String content = new String(Files.readAllBytes(path), StandardCharsets.UTF_8);"},{"sha":"d6133908e8fd81860f80a812c6235f3e6a9cd817","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SCIMITCase.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -30,8 +30,6 @@\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.IOException;\n import java.text.SimpleDateFormat;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.UUID;\n@@ -119,7 +117,7 @@ private static boolean isSCIMAvailable(final WebClient webClient) {\n     }\n \n     private WebClient webClient() {\n-        return WebClient.create(SCIM_ADDRESS, Arrays.asList(new SCIMJacksonJsonProvider())).\n+        return WebClient.create(SCIM_ADDRESS, List.of(new SCIMJacksonJsonProvider())).\n                 accept(SCIMConstants.APPLICATION_SCIM_JSON_TYPE).\n                 type(SCIMConstants.APPLICATION_SCIM_JSON_TYPE).\n                 header(HttpHeaders.AUTHORIZATION, \"Bearer \" + adminClient.getJWT());\n@@ -339,7 +337,7 @@ public void search() {\n     }\n \n     private SCIMUser getSampleUser(final String username) {\n-        SCIMUser user = new SCIMUser(null, Collections.singletonList(Resource.User.schema()), null, username, true);\n+        SCIMUser user = new SCIMUser(null, List.of(Resource.User.schema()), null, username, true);\n         user.setPassword(\"password123\");\n \n         SCIMUserName name = new SCIMUserName();"},{"sha":"dbf3fec08ba4e1fe1eec7497a5b6beb7a2c266ee","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -30,7 +30,6 @@\n import java.io.IOException;\n import java.security.AccessControlException;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n@@ -202,7 +201,7 @@ public void enforceMandatoryConditionOnDerived() {\n \n             UserTO userTO = createUser(userCR).getEntity();\n             assertNotNull(userTO);\n-            assertEquals(Collections.singleton(resourceTO.getKey()), userTO.getResources());\n+            assertEquals(Set.of(resourceTO.getKey()), userTO.getResources());\n         } finally {\n             resourceService.delete(resourceTO.getKey());\n         }\n@@ -583,10 +582,10 @@ public void update() {\n         assertFalse(userTO.getDerAttrs().isEmpty());\n \n         Attr userIdAttr = userTO.getPlainAttr(\"userId\").get();\n-        assertEquals(Collections.singletonList(newUserId), userIdAttr.getValues());\n+        assertEquals(List.of(newUserId), userIdAttr.getValues());\n \n         Attr fullNameAttr = userTO.getPlainAttr(\"fullname\").get();\n-        assertEquals(Collections.singletonList(newFullName), fullNameAttr.getValues());\n+        assertEquals(List.of(newFullName), fullNameAttr.getValues());\n \n         // update by username\n         userUR = new UserUR();"},{"sha":"52959479b8228832e1615bfd55b26f67227f461f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -30,7 +30,6 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Base64;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -845,7 +844,7 @@ public void issueSYNCOPE435() {\n         ProvisioningResult<UserTO> result = updateUser(userUR);\n         assertNotNull(result);\n         userTO = result.getEntity();\n-        assertEquals(Collections.singleton(RESOURCE_NAME_WS1), userTO.getResources());\n+        assertEquals(Set.of(RESOURCE_NAME_WS1), userTO.getResources());\n         assertNotEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         assertTrue(result.getPropagationStatuses().get(0).getFailureReason().\n                 startsWith(\"Not attempted because there are mandatory attributes without value(s): [__PASSWORD__]\"));"},{"sha":"2c6edcbd06d904f20891115ac38910d6d0a6fe94","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -27,7 +27,6 @@\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -554,7 +553,7 @@ public void createWithApproval() {\n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\", userTO.getMemberships().get(0).getGroupKey());\n         assertEquals(\"createApproval\", userTO.getStatus());\n-        assertEquals(Collections.singleton(RESOURCE_NAME_TESTDB), userTO.getResources());\n+        assertEquals(Set.of(RESOURCE_NAME_TESTDB), userTO.getResources());\n \n         assertTrue(result.getPropagationStatuses().isEmpty());\n \n@@ -604,7 +603,7 @@ public void createWithApproval() {\n         assertNotNull(userTO);\n         assertEquals(updatedUsername, userTO.getUsername());\n         assertEquals(\"active\", userTO.getStatus());\n-        assertEquals(Collections.singleton(RESOURCE_NAME_TESTDB), userTO.getResources());\n+        assertEquals(Set.of(RESOURCE_NAME_TESTDB), userTO.getResources());\n \n         String username = queryForObject(\n                 jdbcTemplate, 50, \"SELECT id FROM test WHERE id=?\", String.class, userTO.getUsername());"},{"sha":"58d508858aff778fd3e184269f1eb883a3e2ed73","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/enduser/AbstractEnduserITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -23,7 +23,7 @@\n import com.giffing.wicket.spring.boot.starter.app.classscanner.candidates.WicketClassCandidatesHolder;\n import com.giffing.wicket.spring.boot.starter.configuration.extensions.core.settings.general.GeneralSettingsProperties;\n import com.giffing.wicket.spring.boot.starter.configuration.extensions.external.spring.boot.actuator.WicketEndpointRepositoryDefault;\n-import java.util.Collections;\n+\n import java.util.Date;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n@@ -77,7 +77,7 @@ public GeneralSettingsProperties generalSettingsProperties() {\n \n         @Bean\n         public List<WicketApplicationInitConfiguration> configurations() {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         @Bean"},{"sha":"65dec8d25da44d84dab6638e8ddab961940f8e0b","filename":"sra/src/main/java/org/apache/syncope/sra/RouteProvider.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.sra;\n \n import java.time.ZonedDateTime;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n@@ -346,7 +344,7 @@ private AsyncPredicate<ServerWebExchange> toPredicate(final GatewayRoutePredicat\n             case HOST:\n                 String[] hostArgs = gwpredicate.getArgs().split(\",\");\n                 predicate = ctx.getBean(HostRoutePredicateFactory.class).\n-                        applyAsync(c -> c.setPatterns(Arrays.asList(hostArgs)));\n+                        applyAsync(c -> c.setPatterns(List.of(hostArgs)));\n                 break;\n \n             case METHOD:\n@@ -357,7 +355,7 @@ private AsyncPredicate<ServerWebExchange> toPredicate(final GatewayRoutePredicat\n             case PATH:\n                 String[] pathArgs = gwpredicate.getArgs().split(\",\");\n                 predicate = ctx.getBean(PathRoutePredicateFactory.class).\n-                        applyAsync(c -> c.setPatterns(Arrays.asList(pathArgs)));\n+                        applyAsync(c -> c.setPatterns(List.of(pathArgs)));\n                 break;\n \n             case QUERY:\n@@ -370,7 +368,7 @@ private AsyncPredicate<ServerWebExchange> toPredicate(final GatewayRoutePredicat\n             case REMOTE_ADDR:\n                 String[] remoteAddrArgs = gwpredicate.getArgs().split(\",\");\n                 predicate = ctx.getBean(RemoteAddrRoutePredicateFactory.class).\n-                        applyAsync(c -> c.setSources(Arrays.asList(remoteAddrArgs)));\n+                        applyAsync(c -> c.setSources(List.of(remoteAddrArgs)));\n                 break;\n \n             case CUSTOM:\n@@ -459,7 +457,7 @@ public List<Route.AsyncBuilder> fetch() {\n                             create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey));\n                 } catch (Exception e) {\n                     LOG.error(\"Could not init SyncopeClient\", e);\n-                    return Collections.emptyList();\n+                    return List.of();\n                 }\n             }\n         }"},{"sha":"71c44ea86cae2788702095e2ffa941c7b0d582c6","filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeSRATestCoreStartup.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6864923b61c395b7be3bcf2e10b5d50aea547515/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATestCoreStartup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6864923b61c395b7be3bcf2e10b5d50aea547515/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATestCoreStartup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRATestCoreStartup.java?ref=6864923b61c395b7be3bcf2e10b5d50aea547515","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.sra;\n \n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n-import java.util.Collections;\n+\n import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n@@ -63,7 +63,7 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n         sf.setResourceProvider(\n                 GatewayRouteService.class,\n                 new SingletonResourceProvider(new StubGatewayRouteService(), true));\n-        sf.setProviders(Collections.singletonList(new JacksonJsonProvider()));\n+        sf.setProviders(List.of(new JacksonJsonProvider()));\n         sf.create();\n \n         // 2. register Core in Keymaster"}]}