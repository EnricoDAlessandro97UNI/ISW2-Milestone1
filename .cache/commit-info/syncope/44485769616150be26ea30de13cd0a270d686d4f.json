{"sha":"44485769616150be26ea30de13cd0a270d686d4f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ0NDg1NzY5NjE2MTUwYmUyNmVhMzBkZTEzY2QwYTI3MGQ2ODZkNGY=","commit":{"author":{"name":"René Mulder","email":"rene@apache.org","date":"2012-05-01T15:50:07Z"},"committer":{"name":"René Mulder","email":"rene@apache.org","date":"2012-05-01T15:50:07Z"},"message":"sonar: fix 18 unchecked casts\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1332710 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95c5a4903222fd3268b98cdc71511ee057ad5429","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/95c5a4903222fd3268b98cdc71511ee057ad5429"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/44485769616150be26ea30de13cd0a270d686d4f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/44485769616150be26ea30de13cd0a270d686d4f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/44485769616150be26ea30de13cd0a270d686d4f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/44485769616150be26ea30de13cd0a270d686d4f/comments","author":null,"committer":null,"parents":[{"sha":"2050deed6f0b361cd69c5343776692afc619e1d0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2050deed6f0b361cd69c5343776692afc619e1d0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2050deed6f0b361cd69c5343776692afc619e1d0"}],"stats":{"total":122,"additions":69,"deletions":53},"files":[{"sha":"fda9af9df9ce799dfcf8243c319838fd19ab7703","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/Membership.java","status":"modified","additions":20,"deletions":8,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44485769616150be26ea30de13cd0a270d686d4f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44485769616150be26ea30de13cd0a270d686d4f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=44485769616150be26ea30de13cd0a270d686d4f","patch":"@@ -39,28 +39,23 @@\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n \n @Entity\n-@Table(uniqueConstraints = @UniqueConstraint(columnNames = { \"syncopeUser_id\", \"syncopeRole_id\" }))\n+@Table(uniqueConstraints =\n+@UniqueConstraint(columnNames = {\"syncopeUser_id\", \"syncopeRole_id\"}))\n public class Membership extends AbstractAttributable {\n \n     private static final long serialVersionUID = 5030106264797289469L;\n-\n     @Id\n     private Long id;\n-\n     @ManyToOne\n     private SyncopeUser syncopeUser;\n-\n     @ManyToOne\n     private SyncopeRole syncopeRole;\n-\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<MAttr> attributes;\n-\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<MDerAttr> derivedAttributes;\n-\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<MVirAttr> virtualAttributes;\n@@ -101,11 +96,17 @@ public void setSyncopeUser(SyncopeUser syncopeUser) {\n \n     @Override\n     public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n+        if (!(attribute instanceof MAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed MAttr: \" + attribute.getClass().getName());\n+        }\n         return attributes.add((MAttr) attribute);\n     }\n \n     @Override\n     public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n+        if (!(attribute instanceof MAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed MAttr: \" + attribute.getClass().getName());\n+        }\n         return attributes.remove((MAttr) attribute);\n     }\n \n@@ -121,12 +122,17 @@ public void setAttributes(List<? extends AbstractAttr> attributes) {\n \n     @Override\n     public <T extends AbstractDerAttr> boolean addDerivedAttribute(T derivedAttribute) {\n-\n+        if (!(derivedAttribute instanceof MDerAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed MDerAttr: \" + derivedAttribute.getClass().getName());\n+        }\n         return derivedAttributes.add((MDerAttr) derivedAttribute);\n     }\n \n     @Override\n     public <T extends AbstractDerAttr> boolean removeDerivedAttribute(T derivedAttribute) {\n+        if (!(derivedAttribute instanceof MDerAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed MDerAttr: \" + derivedAttribute.getClass().getName());\n+        }\n \n         return derivedAttributes.remove((MDerAttr) derivedAttribute);\n     }\n@@ -144,12 +150,18 @@ public void setDerivedAttributes(List<? extends AbstractDerAttr> derivedAttribut\n \n     @Override\n     public <T extends AbstractVirAttr> boolean addVirtualAttribute(T virtualAttribute) {\n+        if (!(virtualAttribute instanceof MVirAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed MVirAttr: \" + virtualAttribute.getClass().getName());\n+        }\n \n         return virtualAttributes.add((MVirAttr) virtualAttribute);\n     }\n \n     @Override\n     public <T extends AbstractVirAttr> boolean removeVirtualAttribute(T virtualAttribute) {\n+        if (!(virtualAttribute instanceof MVirAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed MVirAttr: \" + virtualAttribute.getClass().getName());\n+        }\n \n         return virtualAttributes.remove((MVirAttr) virtualAttribute);\n     }"},{"sha":"d535370b8a4fc1cdad49d18d58c257d921c0f30c","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":26,"deletions":22,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44485769616150be26ea30de13cd0a270d686d4f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44485769616150be26ea30de13cd0a270d686d4f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=44485769616150be26ea30de13cd0a270d686d4f","patch":"@@ -55,73 +55,63 @@\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n \n @Entity\n-@Table(uniqueConstraints = @UniqueConstraint(columnNames = { \"name\", \"parent_id\" }))\n+@Table(uniqueConstraints =\n+@UniqueConstraint(columnNames = {\"name\", \"parent_id\"}))\n @Cacheable\n public class SyncopeRole extends AbstractAttributable {\n \n     private static final long serialVersionUID = -5281258853142421875L;\n-\n     @Id\n     private Long id;\n-\n     @NotNull\n     private String name;\n-\n     @ManyToOne(optional = true)\n     private SyncopeRole parent;\n-\n     @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(joinColumns = @JoinColumn(name = \"role_id\"), inverseJoinColumns = @JoinColumn(name = \"entitlement_name\"))\n+    @JoinTable(joinColumns =\n+    @JoinColumn(name = \"role_id\"), inverseJoinColumns =\n+    @JoinColumn(name = \"entitlement_name\"))\n     private Set<Entitlement> entitlements;\n-\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<RAttr> attributes;\n-\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<RDerAttr> derivedAttributes;\n-\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<RVirAttr> virtualAttributes;\n-\n     @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritAttributes;\n-\n     @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritDerivedAttributes;\n-\n     @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritVirtualAttributes;\n-\n     @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritPasswordPolicy;\n-\n     @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritAccountPolicy;\n-\n     @ManyToOne(fetch = FetchType.EAGER, optional = true)\n     private PasswordPolicy passwordPolicy;\n-\n     @ManyToOne(fetch = FetchType.EAGER, optional = true)\n     private AccountPolicy accountPolicy;\n-\n     /**\n      * Provisioning external resources.\n      */\n     @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(joinColumns = @JoinColumn(name = \"role_id\"), inverseJoinColumns = @JoinColumn(name = \"resource_name\"))\n+    @JoinTable(joinColumns =\n+    @JoinColumn(name = \"role_id\"), inverseJoinColumns =\n+    @JoinColumn(name = \"resource_name\"))\n     @Valid\n     private Set<ExternalResource> resources;\n \n@@ -187,11 +177,17 @@ public void setEntitlements(final List<Entitlement> entitlements) {\n \n     @Override\n     public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n+        if (!(attribute instanceof RAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed RAttr: \" + attribute.getClass().getName());\n+        }\n         return attributes.add((RAttr) attribute);\n     }\n \n     @Override\n     public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n+        if (!(attribute instanceof RAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed RAttr: \" + attribute.getClass().getName());\n+        }\n         return attributes.remove((RAttr) attribute);\n     }\n \n@@ -207,13 +203,17 @@ public void setAttributes(List<? extends AbstractAttr> attributes) {\n \n     @Override\n     public <T extends AbstractDerAttr> boolean addDerivedAttribute(T derivedAttribute) {\n-\n+        if (!(derivedAttribute instanceof RDerAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed RDerAttr: \" + derivedAttribute.getClass().getName());\n+        }\n         return derivedAttributes.add((RDerAttr) derivedAttribute);\n     }\n \n     @Override\n     public <T extends AbstractDerAttr> boolean removeDerivedAttribute(T derivedAttribute) {\n-\n+        if (!(derivedAttribute instanceof RDerAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed RDerAttr: \" + derivedAttribute.getClass().getName());\n+        }\n         return derivedAttributes.remove((RDerAttr) derivedAttribute);\n     }\n \n@@ -230,13 +230,17 @@ public void setDerivedAttributes(List<? extends AbstractDerAttr> derivedAttribut\n \n     @Override\n     public <T extends AbstractVirAttr> boolean addVirtualAttribute(T virtualAttribute) {\n-\n+        if (!(virtualAttribute instanceof RVirAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed RVirAttr: \" + virtualAttribute.getClass().getName());\n+        }\n         return virtualAttributes.add((RVirAttr) virtualAttribute);\n     }\n \n     @Override\n     public <T extends AbstractVirAttr> boolean removeVirtualAttribute(T virtualAttribute) {\n-\n+        if (!(virtualAttribute instanceof RVirAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed RVirAttr: \" + virtualAttribute.getClass().getName());\n+        }\n         return virtualAttributes.remove((RVirAttr) virtualAttribute);\n     }\n "},{"sha":"424a31d31a35eb83529890d416fbebb7af36cca5","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44485769616150be26ea30de13cd0a270d686d4f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44485769616150be26ea30de13cd0a270d686d4f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=44485769616150be26ea30de13cd0a270d686d4f","patch":"@@ -75,7 +75,6 @@\n public class SyncopeUser extends AbstractAttributable {\n \n     private static final long serialVersionUID = -3905046855521446823L;\n-\n     private static SecretKeySpec keySpec;\n \n     static {\n@@ -85,94 +84,76 @@ public class SyncopeUser extends AbstractAttributable {\n             LOG.error(\"Error during key specification\", e);\n         }\n     }\n-\n     @Id\n     private Long id;\n-\n     @NotNull\n     private String password;\n-\n     @Transient\n     private String clearPassword;\n-\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"syncopeUser\")\n     @Valid\n     private List<Membership> memberships;\n-\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<UAttr> attributes;\n-\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<UDerAttr> derivedAttributes;\n-\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<UVirAttr> virtualAttributes;\n-\n     private String workflowId;\n-\n     @Column(nullable = true)\n     private String status;\n-\n     @Lob\n     private String token;\n-\n     @Temporal(TemporalType.TIMESTAMP)\n     private Date tokenExpireTime;\n-\n     @Column(nullable = true)\n     @Enumerated(EnumType.STRING)\n     private CipherAlgorithm cipherAlgorithm;\n-\n     @ElementCollection\n     private List<String> passwordHistory;\n-\n     /**\n      * Subsequent failed logins.\n      */\n     @Column(nullable = true)\n     private Integer failedLogins;\n-\n     /**\n      * Username/Login.\n      */\n     @Column(unique = true)\n     @NotNull\n     private String username;\n-\n     /**\n      * Last successful login date.\n      */\n     @Column(nullable = true)\n     @Temporal(TemporalType.TIMESTAMP)\n     private Date lastLoginDate;\n-\n     /**\n      * Creation date.\n      */\n     @NotNull\n     @Temporal(TemporalType.TIMESTAMP)\n     private Date creationDate;\n-\n     /**\n      * Change password date.\n      */\n     @Column(nullable = true)\n     @Temporal(TemporalType.TIMESTAMP)\n     private Date changePwdDate;\n-\n     @Basic\n     @Min(0)\n     @Max(1)\n     private Integer suspended;\n-\n     /**\n      * Provisioning external resources.\n      */\n     @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(joinColumns = @JoinColumn(name = \"user_id\"), inverseJoinColumns = @JoinColumn(name = \"resource_name\"))\n+    @JoinTable(joinColumns =\n+    @JoinColumn(name = \"user_id\"), inverseJoinColumns =\n+    @JoinColumn(name = \"resource_name\"))\n     private Set<ExternalResource> resources;\n \n     public SyncopeUser() {\n@@ -294,11 +275,19 @@ public void setPassword(final String password, final CipherAlgorithm cipherAlgor\n \n     @Override\n     public <T extends AbstractAttr> boolean addAttribute(final T attribute) {\n+        if (!(attribute instanceof UAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed UAttr: \" + attribute.getClass().getName());\n+        }\n+\n         return attributes.add((UAttr) attribute);\n     }\n \n     @Override\n     public <T extends AbstractAttr> boolean removeAttribute(final T attribute) {\n+        if (!(attribute instanceof UAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed UAttr: \" + attribute.getClass().getName());\n+        }\n+\n         return attributes.remove((UAttr) attribute);\n     }\n \n@@ -317,13 +306,18 @@ public void setAttributes(final List<? extends AbstractAttr> attributes) {\n \n     @Override\n     public <T extends AbstractDerAttr> boolean addDerivedAttribute(final T derivedAttribute) {\n+        if (!(derivedAttribute instanceof UDerAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed UDerAttr: \" + derivedAttribute.getClass().getName());\n+        }\n \n         return derivedAttributes.add((UDerAttr) derivedAttribute);\n     }\n \n     @Override\n     public <T extends AbstractDerAttr> boolean removeDerivedAttribute(T derivedAttribute) {\n-\n+        if (!(derivedAttribute instanceof UDerAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed UDerAttr: \" + derivedAttribute.getClass().getName());\n+        }\n         return derivedAttributes.remove((UDerAttr) derivedAttribute);\n     }\n \n@@ -342,11 +336,17 @@ public void setDerivedAttributes(final List<? extends AbstractDerAttr> derivedAt\n \n     @Override\n     public <T extends AbstractVirAttr> boolean addVirtualAttribute(final T virtualAttribute) {\n+        if (!(virtualAttribute instanceof UVirAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed UVirAttr: \" + virtualAttribute.getClass().getName());\n+        }\n         return virtualAttributes.add((UVirAttr) virtualAttribute);\n     }\n \n     @Override\n     public <T extends AbstractVirAttr> boolean removeVirtualAttribute(final T virtualAttribute) {\n+        if (!(virtualAttribute instanceof UVirAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed UVirAttr: \" + virtualAttribute.getClass().getName());\n+        }\n         return virtualAttributes.remove((UVirAttr) virtualAttribute);\n     }\n "}]}