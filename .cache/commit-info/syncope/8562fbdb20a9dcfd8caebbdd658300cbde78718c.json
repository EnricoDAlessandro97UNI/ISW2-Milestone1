{"sha":"8562fbdb20a9dcfd8caebbdd658300cbde78718c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg1NjJmYmRiMjBhOWRjZmQ4Y2FlYmJkZDY1ODMwMGNiZGU3ODcxOGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-11-13T14:26:15Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-11-13T15:40:07Z"},"message":"[SYNCOPE-1510] Secret key can now also be referenced as Spring property + option to store encrypted and read cleartext","tree":{"sha":"b5da6e1870d4b8b042f701c5ec4f9ea1c438ff71","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b5da6e1870d4b8b042f701c5ec4f9ea1c438ff71"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8562fbdb20a9dcfd8caebbdd658300cbde78718c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8562fbdb20a9dcfd8caebbdd658300cbde78718c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8562fbdb20a9dcfd8caebbdd658300cbde78718c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8562fbdb20a9dcfd8caebbdd658300cbde78718c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8735ba5934e47128ea46feadc6d4bdd2b0970a79","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8735ba5934e47128ea46feadc6d4bdd2b0970a79","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8735ba5934e47128ea46feadc6d4bdd2b0970a79"}],"stats":{"total":357,"additions":274,"deletions":83},"files":[{"sha":"52bee10dcdf6486f5220dff83925ab9278a92afb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":32,"deletions":12,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -23,6 +23,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.commons.PropertyList;\n@@ -33,6 +34,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n@@ -77,20 +79,20 @@ public PlainSchemaDetails(final String id, final PlainSchemaTO schemaTO) {\n         add(type);\n \n         // long, double, date\n-        final AjaxTextFieldPanel conversionPattern = new AjaxTextFieldPanel(\"conversionPattern\",\n+        AjaxTextFieldPanel conversionPattern = new AjaxTextFieldPanel(\"conversionPattern\",\n                 getString(\"conversionPattern\"), new PropertyModel<>(schemaTO, \"conversionPattern\"));\n         add(conversionPattern);\n \n-        final WebMarkupContainer conversionParams = new WebMarkupContainer(\"conversionParams\");\n+        WebMarkupContainer conversionParams = new WebMarkupContainer(\"conversionParams\");\n         conversionParams.setOutputMarkupPlaceholderTag(true);\n         conversionParams.add(conversionPattern);\n         add(conversionParams);\n \n-        final WebMarkupContainer typeParams = new WebMarkupContainer(\"typeParams\");\n+        WebMarkupContainer typeParams = new WebMarkupContainer(\"typeParams\");\n         typeParams.setOutputMarkupPlaceholderTag(true);\n \n         // enum\n-        final AjaxTextFieldPanel enumerationValuesPanel = new AjaxTextFieldPanel(\"panel\",\n+        AjaxTextFieldPanel enumerationValuesPanel = new AjaxTextFieldPanel(\"panel\",\n                 \"enumerationValues\", new Model<>(null));\n \n         enumerationValues = new MultiFieldPanel.Builder<String>(\n@@ -171,34 +173,52 @@ protected String newModelObject() {\n                 \"enumerationKeys\",\n                 new AjaxTextFieldPanel(\"panel\", \"enumerationKeys\", new Model<String>()));\n \n-        final WebMarkupContainer enumParams = new WebMarkupContainer(\"enumParams\");\n+        WebMarkupContainer enumParams = new WebMarkupContainer(\"enumParams\");\n         enumParams.setOutputMarkupPlaceholderTag(true);\n         enumParams.add(enumerationValues);\n         enumParams.add(enumerationKeys);\n         typeParams.add(enumParams);\n \n         // encrypted\n-        final AjaxTextFieldPanel secretKey = new AjaxTextFieldPanel(\"secretKey\",\n+        AjaxTextFieldPanel secretKey = new AjaxTextFieldPanel(\"secretKey\",\n                 getString(\"secretKey\"), new PropertyModel<>(schemaTO, \"secretKey\"));\n \n-        final AjaxDropDownChoicePanel<CipherAlgorithm> cipherAlgorithm = new AjaxDropDownChoicePanel<>(\n+        AjaxDropDownChoicePanel<CipherAlgorithm> cipherAlgorithm = new AjaxDropDownChoicePanel<>(\n                 \"cipherAlgorithm\", getString(\"cipherAlgorithm\"),\n                 new PropertyModel<>(schemaTO, \"cipherAlgorithm\"));\n-\n         cipherAlgorithm.setChoices(List.of(CipherAlgorithm.values()));\n \n-        final WebMarkupContainer encryptedParams = new WebMarkupContainer(\"encryptedParams\");\n+        AjaxCheckBoxPanel transparentEncryption = new AjaxCheckBoxPanel(\n+                \"transparentEncryption\", \"transparentEncryption\", new Model<Boolean>() {\n+\n+            private static final long serialVersionUID = 5636572627689425575L;\n+\n+            @Override\n+            public Boolean getObject() {\n+                return SyncopeConstants.ENCRYPTED_DECODE_CONVERSION_PATTERN.equals(schemaTO.getConversionPattern());\n+            }\n+\n+            @Override\n+            public void setObject(final Boolean object) {\n+                schemaTO.setConversionPattern(BooleanUtils.isTrue(object)\n+                        ? SyncopeConstants.ENCRYPTED_DECODE_CONVERSION_PATTERN\n+                        : null);\n+            }\n+        }, true);\n+\n+        WebMarkupContainer encryptedParams = new WebMarkupContainer(\"encryptedParams\");\n         encryptedParams.setOutputMarkupPlaceholderTag(true);\n         encryptedParams.add(secretKey);\n         encryptedParams.add(cipherAlgorithm);\n+        encryptedParams.add(transparentEncryption);\n \n         typeParams.add(encryptedParams);\n \n         // binary\n-        final AjaxTextFieldPanel mimeType = new AjaxTextFieldPanel(\"mimeType\",\n+        AjaxTextFieldPanel mimeType = new AjaxTextFieldPanel(\"mimeType\",\n                 getString(\"mimeType\"), new PropertyModel<>(schemaTO, \"mimeType\"));\n \n-        final WebMarkupContainer binaryParams = new WebMarkupContainer(\"binaryParams\");\n+        WebMarkupContainer binaryParams = new WebMarkupContainer(\"binaryParams\");\n         binaryParams.setOutputMarkupPlaceholderTag(true);\n         binaryParams.add(mimeType);\n         typeParams.add(binaryParams);\n@@ -296,7 +316,7 @@ private void showHide(final PlainSchemaTO schema, final AjaxDropDownChoicePanel<\n             final AjaxTextFieldPanel secretKey, final AjaxDropDownChoicePanel<CipherAlgorithm> cipherAlgorithm,\n             final WebMarkupContainer binaryParams, final AjaxTextFieldPanel mimeType) {\n \n-        final int typeOrdinal = Integer.parseInt(type.getField().getValue());\n+        int typeOrdinal = Integer.parseInt(type.getField().getValue());\n         if (AttrSchemaType.Long.ordinal() == typeOrdinal\n                 || AttrSchemaType.Double.ordinal() == typeOrdinal\n                 || AttrSchemaType.Date.ordinal() == typeOrdinal) {"},{"sha":"2b131f9f68853965d7d594a71d599a1f8d5f6c3f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrsWizardStep.java","status":"modified","additions":23,"deletions":20,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -175,7 +175,7 @@ public PageReference getPageReference() {\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-    protected FieldPanel getFieldPanel(final PlainSchemaTO schemaTO) {\n+    protected FieldPanel getFieldPanel(final PlainSchemaTO plainSchema) {\n         final boolean required;\n         final boolean readOnly;\n         final AttrSchemaType type;\n@@ -187,9 +187,9 @@ protected FieldPanel getFieldPanel(final PlainSchemaTO schemaTO) {\n             type = AttrSchemaType.String;\n             jexlHelp = true;\n         } else {\n-            required = schemaTO.getMandatoryCondition().equalsIgnoreCase(\"true\");\n-            readOnly = schemaTO.isReadonly();\n-            type = schemaTO.getType();\n+            required = plainSchema.getMandatoryCondition().equalsIgnoreCase(\"true\");\n+            readOnly = plainSchema.isReadonly();\n+            type = plainSchema.getType();\n             jexlHelp = false;\n \n         }\n@@ -199,27 +199,27 @@ protected FieldPanel getFieldPanel(final PlainSchemaTO schemaTO) {\n             case Boolean:\n                 panel = new AjaxCheckBoxPanel(\n                         \"panel\",\n-                        schemaTO.getLabel(SyncopeConsoleSession.get().getLocale()),\n+                        plainSchema.getLabel(SyncopeConsoleSession.get().getLocale()),\n                         new Model<>(),\n                         true);\n                 panel.setRequired(required);\n                 break;\n \n             case Date:\n-                String datePattern = schemaTO.getConversionPattern() == null\n+                String datePattern = plainSchema.getConversionPattern() == null\n                         ? SyncopeConstants.DEFAULT_DATE_PATTERN\n-                        : schemaTO.getConversionPattern();\n+                        : plainSchema.getConversionPattern();\n \n                 if (datePattern.contains(\"H\")) {\n                     panel = new AjaxDateTimeFieldPanel(\n                             \"panel\",\n-                            schemaTO.getLabel(SyncopeConsoleSession.get().getLocale()),\n+                            plainSchema.getLabel(SyncopeConsoleSession.get().getLocale()),\n                             new Model<>(),\n                             FastDateFormat.getInstance(datePattern));\n                 } else {\n                     panel = new AjaxDateFieldPanel(\n                             \"panel\",\n-                            schemaTO.getLabel(SyncopeConsoleSession.get().getLocale()),\n+                            plainSchema.getLabel(SyncopeConsoleSession.get().getLocale()),\n                             new Model<>(),\n                             FastDateFormat.getInstance(datePattern));\n                 }\n@@ -232,15 +232,15 @@ protected FieldPanel getFieldPanel(final PlainSchemaTO schemaTO) {\n \n             case Enum:\n                 panel = new AjaxDropDownChoicePanel<>(\"panel\",\n-                        schemaTO.getLabel(SyncopeConsoleSession.get().getLocale()), new Model<>(), true);\n-                ((AjaxDropDownChoicePanel<String>) panel).setChoices(SchemaUtils.getEnumeratedValues(schemaTO));\n+                        plainSchema.getLabel(SyncopeConsoleSession.get().getLocale()), new Model<>(), true);\n+                ((AjaxDropDownChoicePanel<String>) panel).setChoices(SchemaUtils.getEnumeratedValues(plainSchema));\n \n-                if (StringUtils.isNotBlank(schemaTO.getEnumerationKeys())) {\n+                if (StringUtils.isNotBlank(plainSchema.getEnumerationKeys())) {\n                     ((AjaxDropDownChoicePanel) panel).setChoiceRenderer(new IChoiceRenderer<String>() {\n \n                         private static final long serialVersionUID = -3724971416312135885L;\n \n-                        private final Map<String, String> valueMap = SchemaUtils.getEnumeratedKeyValues(schemaTO);\n+                        private final Map<String, String> valueMap = SchemaUtils.getEnumeratedKeyValues(plainSchema);\n \n                         @Override\n                         public String getDisplayValue(final String value) {\n@@ -268,7 +268,7 @@ public String getObject(\n             case Long:\n                 panel = new AjaxSpinnerFieldPanel.Builder<Long>().enableOnChange().build(\n                         \"panel\",\n-                        schemaTO.getLabel(SyncopeConsoleSession.get().getLocale()),\n+                        plainSchema.getLabel(SyncopeConsoleSession.get().getLocale()),\n                         Long.class,\n                         new Model<>());\n \n@@ -280,7 +280,7 @@ public String getObject(\n             case Double:\n                 panel = new AjaxSpinnerFieldPanel.Builder<Double>().enableOnChange().step(0.1).build(\n                         \"panel\",\n-                        schemaTO.getLabel(SyncopeConsoleSession.get().getLocale()),\n+                        plainSchema.getLabel(SyncopeConsoleSession.get().getLocale()),\n                         Double.class,\n                         new Model<>());\n \n@@ -293,9 +293,9 @@ public String getObject(\n                 final PageReference pageRef = getPageReference();\n                 panel = new BinaryFieldPanel(\n                         \"panel\",\n-                        schemaTO.getLabel(SyncopeConsoleSession.get().getLocale()),\n+                        plainSchema.getLabel(SyncopeConsoleSession.get().getLocale()),\n                         new Model<>(),\n-                        schemaTO.getMimeType(),\n+                        plainSchema.getMimeType(),\n                         fileKey) {\n \n                     private static final long serialVersionUID = -3268213909514986831L;\n@@ -312,8 +312,11 @@ protected PageReference getPageReference() {\n                 break;\n \n             case Encrypted:\n-                panel = new EncryptedFieldPanel(\"panel\",\n-                        schemaTO.getLabel(SyncopeConsoleSession.get().getLocale()), new Model<>(), true);\n+                panel = SyncopeConstants.ENCRYPTED_DECODE_CONVERSION_PATTERN.equals(plainSchema.getConversionPattern())\n+                        ? new AjaxTextFieldPanel(\"panel\",\n+                                plainSchema.getLabel(SyncopeConsoleSession.get().getLocale()), new Model<>(), true)\n+                        : new EncryptedFieldPanel(\"panel\",\n+                                plainSchema.getLabel(SyncopeConsoleSession.get().getLocale()), new Model<>(), true);\n \n                 if (required) {\n                     panel.addRequiredLabel();\n@@ -322,7 +325,7 @@ protected PageReference getPageReference() {\n \n             default:\n                 panel = new AjaxTextFieldPanel(\"panel\",\n-                        schemaTO.getLabel(SyncopeConsoleSession.get().getLocale()), new Model<>(), true);\n+                        plainSchema.getLabel(SyncopeConsoleSession.get().getLocale()), new Model<>(), true);\n \n                 if (jexlHelp) {\n                     AjaxTextFieldPanel.class.cast(panel).enableJexlHelp();"},{"sha":"6859c9dabc0922bb4bb0433bf086d4eb8156ee0b","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/PlainSchemaDetails.html","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.html?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -45,6 +45,9 @@\n         <div class=\"form-group\">\n           <span wicket:id=\"cipherAlgorithm\">[cipherAlgorithm]</span>\n         </div>\n+        <div class=\"form-group\">\n+          <span wicket:id=\"transparentEncryption\">[transparentEncryption]</span>\n+        </div>\n       </div>\n       <div wicket:id=\"binaryParams\">\n         <div class=\"form-group\">"},{"sha":"9367a075481758d6b18b445eadc67259e4b98d09","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/PlainSchemaDetails.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.properties?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -31,3 +31,4 @@ readonly=Read-only\n secretKey=Secret key\n cipherAlgorithm=Cipher algorithm\n mimeType=MIME Type\n+transparentEncryption=Transparent encryption?"},{"sha":"e9f4449fd79a321285288d431d1799433471e299","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/PlainSchemaDetails_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails_it.properties?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -31,3 +31,4 @@ multivalueAndUniqueConstr.validation=Le opzioni 'Multivalore' e 'Vincolo unique'\n secretKey=Chiave segreta\n cipherAlgorithm=Algoritmo di cifratura\n mimeType=MIME Type\n+transparentEncryption=Cifratura trasparente?"},{"sha":"6316527e30b33dd27bcc9929e5786a1a002647e6","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/PlainSchemaDetails_ja.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails_ja.properties?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -31,3 +31,4 @@ readonly=\\u8aad\\u307f\\u53d6\\u308a\\u5c02\\u7528\n secretKey=\\u79d8\\u5bc6\\u9375\n cipherAlgorithm=\\u6697\\u53f7\\u5316\\u30a2\\u30eb\\u30b4\\u30ea\\u30ba\\u30e0\n mimeType=MIME \\u30bf\\u30a4\\u30d7\n+transparentEncryption=Transparent encryption?"},{"sha":"88e664ca6d085f11f4200cc3306caa787d834301","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/PlainSchemaDetails_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails_pt_BR.properties?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -31,3 +31,4 @@ readonly=Apenas leitura\n secretKey=Chave secreta\n cipherAlgorithm=Algoritmo de criptografia\n mimeType=MIME Type\n+transparentEncryption=Transparent encryption?"},{"sha":"106c48309fc6e079c1ec4dc275f7b3f937e4d7bf","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/PlainSchemaDetails_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails_ru.properties?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -49,3 +49,4 @@ secretKey=\\u041a\\u043b\\u044e\\u0447 \\u0448\\u0438\\u0444\\u0440\\u043e\\u0432\\u0430\\u0\n cipherAlgorithm=\\u0410\\u043b\\u0433\\u043e\\u0440\\u0438\\u0442\\u043c \\u0448\\u0438\\u0444\\u0440\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f\n # mimeType=\\u00d0\\u00a2\\u00d0\\u00b8\\u00d0\\u00bf MIME\n mimeType=\\u0422\\u0438\\u043f MIME\n+transparentEncryption=Transparent encryption?"},{"sha":"cf10a52cc2c12a7b39d80e281ebb7a8705393b16","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -62,6 +62,8 @@ public final class SyncopeConstants {\n \n     public static final Pattern UUID_PATTERN = Pattern.compile(UUID_REGEX);\n \n+    public static final String ENCRYPTED_DECODE_CONVERSION_PATTERN = \"ENCRYPTED_DECODE_CONVERSION_PATTERN\";\n+\n     public static final String DOUBLE_DASH = \"--\";\n \n     public static final String CRLF = \"\\r\\n\";"},{"sha":"f89f6d6f31b421e0e9cffa4bab1dd8bf0414203c","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAJSONEntityListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityListener.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -28,15 +28,15 @@\n \n public abstract class JPAJSONEntityListener<A extends Any<?>> {\n \n-    protected abstract List<? extends JSONPlainAttr<A>> getValues(String plainAttrsJSON);\n+    protected abstract List<? extends JSONPlainAttr<A>> getAttrs(String plainAttrsJSON);\n \n     @SuppressWarnings(\"unchecked\")\n     protected void json2list(final JSONAttributable<A> entity, final boolean clearFirst) {\n         if (clearFirst) {\n             entity.getPlainAttrList().clear();\n         }\n         if (entity.getPlainAttrsJSON() != null) {\n-            getValues(entity.getPlainAttrsJSON()).stream().filter(attr -> attr.getSchema() != null).map(attr -> {\n+            getAttrs(entity.getPlainAttrsJSON()).stream().filter(attr -> attr.getSchema() != null).map(attr -> {\n                 if (entity instanceof Any) {\n                     attr.setOwner((A) entity);\n                 } else if (entity instanceof LinkedAccount) {"},{"sha":"f554332b533d1db71e1b85a7201a03221ea4d071","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAJSONAnyObjectListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObjectListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObjectListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObjectListener.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -33,7 +33,7 @@\n public class JPAJSONAnyObjectListener extends JPAJSONEntityListener<AnyObject> {\n \n     @Override\n-    protected List<? extends JSONPlainAttr<AnyObject>> getValues(final String plainAttrsJSON) {\n+    protected List<? extends JSONPlainAttr<AnyObject>> getAttrs(final String plainAttrsJSON) {\n         return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<JPAJSONAPlainAttr>>() {\n         });\n     }"},{"sha":"0574898cb4911ed45a9fce5e823950a5db2580b2","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAJSONGroupListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroupListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroupListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroupListener.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -33,7 +33,7 @@\n public class JPAJSONGroupListener extends JPAJSONEntityListener<Group> {\n \n     @Override\n-    protected List<? extends JSONPlainAttr<Group>> getValues(final String plainAttrsJSON) {\n+    protected List<? extends JSONPlainAttr<Group>> getAttrs(final String plainAttrsJSON) {\n         return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<JPAJSONGPlainAttr>>() {\n         });\n     }"},{"sha":"26436a4a167f7fd49136e9d71aac3c9d7668f5ae","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONLinkedAccountListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccountListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccountListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccountListener.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -33,7 +33,7 @@\n public class JPAJSONLinkedAccountListener extends JPAJSONEntityListener<User> {\n \n     @Override\n-    protected List<? extends JSONLAPlainAttr> getValues(final String plainAttrsJSON) {\n+    protected List<? extends JSONLAPlainAttr> getAttrs(final String plainAttrsJSON) {\n         return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<JPAJSONLAPlainAttr>>() {\n         });\n     }"},{"sha":"1b924cc9d51329af08597ecec75cb430b67d6c4f","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONUserListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUserListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUserListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUserListener.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -33,7 +33,7 @@\n public class JPAJSONUserListener extends JPAJSONEntityListener<User> {\n \n     @Override\n-    protected List<? extends JSONPlainAttr<User>> getValues(final String plainAttrsJSON) {\n+    protected List<? extends JSONPlainAttr<User>> getAttrs(final String plainAttrsJSON) {\n         return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<JPAJSONUPlainAttr>>() {\n         });\n     }"},{"sha":"b8d1a08ceb15d997a559c217ed63d6befc69f553","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/JPAJSONAttributableValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAJSONAttributableValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAJSONAttributableValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAJSONAttributableValidator.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -36,8 +36,8 @@ public boolean isValid(final JSONAttributable<?> entity, final ConstraintValidat\n         entity.getPlainAttrList().forEach(attr -> {\n             PlainAttr<?> plainAttr = (PlainAttr<?>) attr;\n             isValid.getAndSet(isValid.get() && attrValidator.isValid(plainAttr, context));\n-            plainAttr.getValues().forEach(value\n-                    -> isValid.getAndSet(isValid.get() && attrValueValidator.isValid(value, context)));\n+            plainAttr.getValues().forEach(\n+                    value -> isValid.getAndSet(isValid.get() && attrValueValidator.isValid(value, context)));\n         });\n \n         return isValid.get();"},{"sha":"8bac40913b18ed38d24cb4ab17ad3d90a84450b2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java","status":"modified","additions":58,"deletions":31,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -21,20 +21,22 @@\n import java.util.Base64;\n import java.util.Date;\n import java.util.Optional;\n-\n+import java.util.regex.Pattern;\n import javax.persistence.Lob;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.validation.entity.PlainAttrValueCheck;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.security.Encryptor;\n \n @MappedSuperclass\n@@ -43,6 +45,8 @@ public abstract class AbstractPlainAttrValue extends AbstractGeneratedKeyEntity\n \n     private static final long serialVersionUID = -9141923816611244785L;\n \n+    private static final Pattern SPRING_ENV_PROPERTY = Pattern.compile(\"^\\\\$\\\\{.*\\\\}$\");\n+\n     private String stringValue;\n \n     @Temporal(TemporalType.TIMESTAMP)\n@@ -125,6 +129,13 @@ public void setBinaryValue(final byte[] binaryValue) {\n         this.binaryValue = ArrayUtils.clone(binaryValue);\n     }\n \n+    protected String getSecretKey(final PlainSchema schema) {\n+        return SPRING_ENV_PROPERTY.matcher(schema.getSecretKey()).matches()\n+                ? ApplicationContextProvider.getApplicationContext().getEnvironment().\n+                        getProperty(StringUtils.substringBetween(schema.getSecretKey(), \"${\", \"}\"))\n+                : schema.getSecretKey();\n+    }\n+\n     @Override\n     public void parseValue(final PlainSchema schema, final String value) {\n         Exception exception = null;\n@@ -137,42 +148,42 @@ public void parseValue(final PlainSchema schema, final String value) {\n \n             case Long:\n                 try {\n-                    this.setLongValue(schema.getConversionPattern() == null\n-                            ? Long.valueOf(value)\n-                            : FormatUtils.parseNumber(value, schema.getConversionPattern()).longValue());\n-                } catch (Exception pe) {\n-                    exception = pe;\n-                }\n-                break;\n+                this.setLongValue(schema.getConversionPattern() == null\n+                        ? Long.valueOf(value)\n+                        : FormatUtils.parseNumber(value, schema.getConversionPattern()).longValue());\n+            } catch (Exception pe) {\n+                exception = pe;\n+            }\n+            break;\n \n             case Double:\n                 try {\n-                    this.setDoubleValue(schema.getConversionPattern() == null\n-                            ? Double.valueOf(value)\n-                            : FormatUtils.parseNumber(value, schema.getConversionPattern()).doubleValue());\n-                } catch (Exception pe) {\n-                    exception = pe;\n-                }\n-                break;\n+                this.setDoubleValue(schema.getConversionPattern() == null\n+                        ? Double.valueOf(value)\n+                        : FormatUtils.parseNumber(value, schema.getConversionPattern()).doubleValue());\n+            } catch (Exception pe) {\n+                exception = pe;\n+            }\n+            break;\n \n             case Date:\n                 try {\n-                    this.setDateValue(schema.getConversionPattern() == null\n-                            ? FormatUtils.parseDate(value)\n-                            : new Date(FormatUtils.parseDate(value, schema.getConversionPattern()).getTime()));\n-                } catch (Exception pe) {\n-                    exception = pe;\n-                }\n-                break;\n+                this.setDateValue(schema.getConversionPattern() == null\n+                        ? FormatUtils.parseDate(value)\n+                        : new Date(FormatUtils.parseDate(value, schema.getConversionPattern()).getTime()));\n+            } catch (Exception pe) {\n+                exception = pe;\n+            }\n+            break;\n \n             case Encrypted:\n                 try {\n-                    this.setStringValue(Encryptor.getInstance(schema.getSecretKey()).\n-                            encode(value, schema.getCipherAlgorithm()));\n-                } catch (Exception pe) {\n-                    exception = pe;\n-                }\n-                break;\n+                this.setStringValue(Encryptor.getInstance(getSecretKey(schema)).\n+                        encode(value, schema.getCipherAlgorithm()));\n+            } catch (Exception pe) {\n+                exception = pe;\n+            }\n+            break;\n \n             case Binary:\n                 this.setBinaryValue(Base64.getDecoder().decode(value));\n@@ -185,8 +196,8 @@ public void parseValue(final PlainSchema schema, final String value) {\n         }\n \n         if (exception != null) {\n-            throw new ParsingValidationException(\"While trying to parse '\" + value + \"' as \" + schema.getKey(),\n-                    exception);\n+            throw new ParsingValidationException(\n+                    \"While trying to parse '\" + value + \"' as \" + schema.getKey(), exception);\n         }\n     }\n \n@@ -280,9 +291,25 @@ private String getValueAsString(final AttrSchemaType type, final PlainSchema sch\n                 result = Base64.getEncoder().encodeToString(getBinaryValue());\n                 break;\n \n+            case Encrypted:\n+                if (schema == null\n+                        || !SyncopeConstants.ENCRYPTED_DECODE_CONVERSION_PATTERN.equals(schema.getConversionPattern())\n+                        || !schema.getCipherAlgorithm().isInvertible()) {\n+\n+                    result = getStringValue();\n+                } else {\n+                    try {\n+                        result = Encryptor.getInstance(getSecretKey(schema)).\n+                                decode(getStringValue(), schema.getCipherAlgorithm());\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not decode encrypted value {} for schema {}\", getStringValue(), schema, e);\n+                        result = getStringValue();\n+                    }\n+                }\n+                break;\n+\n             case String:\n             case Enum:\n-            case Encrypted:\n             default:\n                 result = getStringValue();\n         }"},{"sha":"54c773fe296fbb4b40f48866f1f536d7afa96e2a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainAttrTest.java","status":"modified","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -19,19 +19,27 @@\n package org.apache.syncope.core.persistence.jpa.inner;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.UnsupportedEncodingException;\n import java.util.Arrays;\n import java.util.Base64;\n import java.util.Random;\n import javax.validation.ValidationException;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -41,6 +49,7 @@\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -58,6 +67,9 @@ public class PlainAttrTest extends AbstractTest {\n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n+    @Autowired\n+    private AnyTypeClassDAO anyTypeClassDAO;\n+\n     @Tag(\"plainAttrTable\")\n     @Test\n     public void findByKey() {\n@@ -228,6 +240,56 @@ public void saveWithEncrypted() throws Exception {\n                 encode(\"testvalue\", obscureSchema.getCipherAlgorithm()), obscure.getValues().get(0).getStringValue());\n     }\n \n+    @Test\n+    public void encryptedWithKeyAsSysProp() throws Exception {\n+        PlainSchema obscureSchema = plainSchemaDAO.find(\"obscure\");\n+        assertNotNull(obscureSchema);\n+\n+        PlainSchema obscureWithKeyAsSysprop = entityFactory.newEntity(PlainSchema.class);\n+        obscureWithKeyAsSysprop.setKey(\"obscureWithKeyAsSysprop\");\n+        obscureWithKeyAsSysprop.setAnyTypeClass(obscureSchema.getAnyTypeClass());\n+        obscureWithKeyAsSysprop.setType(AttrSchemaType.Encrypted);\n+        obscureWithKeyAsSysprop.setCipherAlgorithm(obscureSchema.getCipherAlgorithm());\n+        obscureWithKeyAsSysprop.setSecretKey(\"${obscureSecretKey}\");\n+\n+        obscureWithKeyAsSysprop = plainSchemaDAO.save(obscureWithKeyAsSysprop);\n+\n+        System.setProperty(\"obscureSecretKey\", obscureSchema.getSecretKey());\n+\n+        UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n+        attr.setSchema(obscureWithKeyAsSysprop);\n+        attr.add(\"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+\n+        assertEquals(Encryptor.getInstance(obscureSchema.getSecretKey()).\n+                encode(\"testvalue\", obscureSchema.getCipherAlgorithm()), attr.getValues().get(0).getStringValue());\n+    }\n+\n+    @Test\n+    public void encryptedWithDecodeConversionPattern() throws Exception {\n+        PlainSchema obscureWithDecodeConversionPattern = entityFactory.newEntity(PlainSchema.class);\n+        obscureWithDecodeConversionPattern.setKey(\"obscureWithDecodeConversionPattern\");\n+        obscureWithDecodeConversionPattern.setAnyTypeClass(anyTypeClassDAO.find(\"other\"));\n+        obscureWithDecodeConversionPattern.setType(AttrSchemaType.Encrypted);\n+        obscureWithDecodeConversionPattern.setCipherAlgorithm(CipherAlgorithm.AES);\n+        obscureWithDecodeConversionPattern.setSecretKey(SecureRandomUtils.generateRandomUUID().toString());\n+\n+        obscureWithDecodeConversionPattern = plainSchemaDAO.save(obscureWithDecodeConversionPattern);\n+\n+        UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n+        attr.setSchema(obscureWithDecodeConversionPattern);\n+        attr.add(\"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        \n+        assertEquals(Encryptor.getInstance(obscureWithDecodeConversionPattern.getSecretKey()).\n+                encode(\"testvalue\", obscureWithDecodeConversionPattern.getCipherAlgorithm()),\n+                attr.getValues().get(0).getStringValue());\n+\n+        obscureWithDecodeConversionPattern.setConversionPattern(SyncopeConstants.ENCRYPTED_DECODE_CONVERSION_PATTERN);\n+        plainSchemaDAO.save(obscureWithDecodeConversionPattern);\n+\n+        assertNotEquals(\"testvalue\", attr.getValues().get(0).getStringValue());\n+        assertEquals(\"testvalue\", attr.getValuesAsStrings().get(0));\n+    }\n+\n     @Test\n     public void saveWithBinary() throws UnsupportedEncodingException {\n         User user = userDAO.find(\"1417acbe-cbf6-4277-9372-e75e04f97000\");"},{"sha":"0c0c730bd60244ae8694905f8f0b109683f597ab","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -332,9 +332,8 @@ public PropagationByResource<String> update(final AnyObject toBeUpdated, final A\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n-        anyObjectUR.getMemberships().stream().\n-                filter((membPatch) -> (membPatch.getGroup() != null)).forEachOrdered(membPatch -> {\n-            anyObject.getMembership(membPatch.getGroup()).ifPresent(membership -> {\n+        anyObjectUR.getMemberships().stream().filter(patch -> patch.getGroup() != null).forEach(patch -> {\n+            anyObject.getMembership(patch.getGroup()).ifPresent(membership -> {\n                 anyObject.remove(membership);\n                 membership.setLeftEnd(null);\n                 anyObject.getPlainAttrs(membership).forEach(attr -> {\n@@ -344,7 +343,7 @@ public PropagationByResource<String> update(final AnyObject toBeUpdated, final A\n                     plainAttrValueDAO.deleteAll(attr, anyUtils);\n                 });\n \n-                if (membPatch.getOperation() == PatchOperation.DELETE) {\n+                if (patch.getOperation() == PatchOperation.DELETE) {\n                     groupDAO.findAllResourceKeys(membership.getRightEnd().getKey()).stream().\n                             filter(reasons::containsKey).\n                             forEach(resource -> {\n@@ -353,18 +352,18 @@ public PropagationByResource<String> update(final AnyObject toBeUpdated, final A\n                             });\n                 }\n             });\n-            if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                Group group = groupDAO.find(membPatch.getGroup());\n+            if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                Group group = groupDAO.find(patch.getGroup());\n                 if (group == null) {\n-                    LOG.debug(\"Ignoring invalid group {}\", membPatch.getGroup());\n+                    LOG.debug(\"Ignoring invalid group {}\", patch.getGroup());\n                 } else if (anyObject.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {\n                     AMembership newMembership = entityFactory.newEntity(AMembership.class);\n                     newMembership.setRightEnd(group);\n                     newMembership.setLeftEnd(anyObject);\n \n                     anyObject.add(newMembership);\n \n-                    membPatch.getPlainAttrs().forEach(attrTO -> {\n+                    patch.getPlainAttrs().forEach(attrTO -> {\n                         PlainSchema schema = getPlainSchema(attrTO.getSchema());\n                         if (schema == null) {\n                             LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n@@ -382,10 +381,15 @@ public PropagationByResource<String> update(final AnyObject toBeUpdated, final A\n                                 newAttr.setSchema(schema);\n                                 anyObject.add(newAttr);\n \n-                                AttrPatch patch = new AttrPatch.Builder(attrTO).build();\n                                 processAttrPatch(\n-                                        anyObject, patch, schema, newAttr, anyUtils,\n-                                        resources, propByRes, invalidValues);\n+                                        anyObject,\n+                                        new AttrPatch.Builder(attrTO).build(),\n+                                        schema,\n+                                        newAttr,\n+                                        anyUtils,\n+                                        resources,\n+                                        propByRes,\n+                                        invalidValues);\n                             }\n                         }\n                     });"},{"sha":"3dcb28a2cce9dc662619400eec364060056f77ac","filename":"fit/core-reference/pom.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -39,6 +39,8 @@ under the License.\n     <jdbcdriver.groupId>com.h2database</jdbcdriver.groupId>\n     <jdbcdriver.artifactId>h2</jdbcdriver.artifactId>\n \n+    <obscureSecretKey>obscureSecretKeyValue</obscureSecretKey>\n+\n     <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n   </properties>\n \n@@ -297,6 +299,12 @@ under the License.\n             <timeout>300000</timeout>\n             <log>${cargo.log}</log>\n             <output>${cargo.output}</output>\n+            <systemProperties>\n+              <java.security.egd>file:/dev/./urandom</java.security.egd>\n+              <java.util.secureRandomSeed>true</java.util.secureRandomSeed>\n+              \n+              <obscureSecretKey>${obscureSecretKey}</obscureSecretKey>\n+            </systemProperties>\n             <dependencies>\n               <dependency>\n                 <groupId>com.h2database</groupId>\n@@ -446,6 +454,7 @@ under the License.\n             <configuration>\n               <systemPropertyVariables>\n                 <jaxrsContentType>${jaxrs.content.type}</jaxrsContentType>\n+                <obscureSecretKey>${obscureSecretKey}</obscureSecretKey>\n               </systemPropertyVariables>\n               <includes>\n                 <include>**/*ITCase.java</include>"},{"sha":"5944eb325d1ddc8638f7043f3f6b0dd174be5033","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -20,6 +20,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -78,6 +79,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n@@ -92,6 +94,7 @@\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n+import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n@@ -599,6 +602,57 @@ public void createWithMandatorySchema() {\n         }\n     }\n \n+    @Test\n+    public void encrypted() throws Exception {\n+        // 1. create encrypted schema with secret key as system property\n+        PlainSchemaTO encrypted = new PlainSchemaTO();\n+        encrypted.setKey(\"encrypted\" + getUUIDString());\n+        encrypted.setType(AttrSchemaType.Encrypted);\n+        encrypted.setCipherAlgorithm(CipherAlgorithm.SHA512);\n+        encrypted.setSecretKey(\"${obscureSecretKey}\");\n+        schemaService.create(SchemaType.PLAIN, encrypted);\n+\n+        // 2. add the new schema to the default group type\n+        AnyTypeTO type = anyTypeService.read(AnyTypeKind.GROUP.name());\n+        String typeClassName = type.getClasses().get(0);\n+        AnyTypeClassTO typeClass = anyTypeClassService.read(typeClassName);\n+        typeClass.getPlainSchemas().add(encrypted.getKey());\n+        anyTypeClassService.update(typeClass);\n+        typeClass = anyTypeClassService.read(typeClassName);\n+        assertTrue(typeClass.getPlainSchemas().contains(encrypted.getKey()));\n+\n+        // 3. create group, verify that the correct encrypted value is returned\n+        GroupCR groupCR = getSample(\"encrypted\");\n+        groupCR.getPlainAttrs().add(new Attr.Builder(encrypted.getKey()).value(\"testvalue\").build());\n+        GroupTO group = createGroup(groupCR).getEntity();\n+\n+        assertEquals(Encryptor.getInstance(System.getProperty(\"obscureSecretKey\")).\n+                encode(\"testvalue\", encrypted.getCipherAlgorithm()),\n+                group.getPlainAttr(encrypted.getKey()).get().getValues().get(0));\n+\n+        // 4. update schema to return cleartext values\n+        encrypted.setAnyTypeClass(typeClassName);\n+        encrypted.setCipherAlgorithm(CipherAlgorithm.AES);\n+        encrypted.setConversionPattern(SyncopeConstants.ENCRYPTED_DECODE_CONVERSION_PATTERN);\n+        schemaService.update(SchemaType.PLAIN, encrypted);\n+\n+        // 5. update group, verify that the cleartext value is returned\n+        GroupUR groupUR = new GroupUR();\n+        groupUR.setKey(group.getKey());\n+        groupUR.getPlainAttrs().add(new AttrPatch.Builder(\n+                new Attr.Builder(encrypted.getKey()).value(\"testvalue\").build()).build());\n+        group = updateGroup(groupUR).getEntity();\n+\n+        assertEquals(\"testvalue\", group.getPlainAttr(encrypted.getKey()).get().getValues().get(0));\n+\n+        // 6. update schema again to disallow cleartext values\n+        encrypted.setConversionPattern(null);\n+        schemaService.update(SchemaType.PLAIN, encrypted);\n+\n+        group = groupService.read(group.getKey());\n+        assertNotEquals(\"testvalue\", group.getPlainAttr(encrypted.getKey()).get().getValues().get(0));\n+    }\n+\n     @Test\n     public void anonymous() {\n         GroupService unauthenticated = clientFactory.create().getService(GroupService.class);"},{"sha":"c259ddd853f4cd216ddbe148e094bcec0cd90664","filename":"src/main/asciidoc/reference-guide/concepts/typemanagement.adoc","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8562fbdb20a9dcfd8caebbdd658300cbde78718c/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Ftypemanagement.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8562fbdb20a9dcfd8caebbdd658300cbde78718c/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Ftypemanagement.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Ftypemanagement.adoc?ref=8562fbdb20a9dcfd8caebbdd658300cbde78718c","patch":"@@ -50,8 +50,10 @@ https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/text/DateForma\n *** enumeration values (mandatory)\n *** enumeration labels (optional, values will be used alternatively)\n ** `Encrypted`\n-*** secret key\n+*** secret key (stored or referenced as https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-property-source-abstraction[Spring property^])\n *** cipher algorithm\n+*** whether transparent encryption is to be enabled, e.g. attribute values are stored as encrypted but available as\n+cleartext on-demand (requires AES ciphering)\n ** `Binary` - it is required to provide the declared mime type\n * Validator class - (optional) Java class validating the value(s) provided for attributes, see \n ifeval::[\"{snapshotOrRelease}\" == \"release\"]"}]}