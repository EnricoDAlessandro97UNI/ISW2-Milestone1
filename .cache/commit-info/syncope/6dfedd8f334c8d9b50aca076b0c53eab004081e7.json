{"sha":"6dfedd8f334c8d9b50aca076b0c53eab004081e7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZkZmVkZDhmMzM0YzhkOWI1MGFjYTA3NmIwYzUzZWFiMDA0MDgxZTc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-02T05:44:52Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-13T15:16:51Z"},"message":"[SYNCOPE-652] Still several things to refine, but it starts taking shape","tree":{"sha":"a97fe3681e010fa16102313176c5d78f2319e264","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a97fe3681e010fa16102313176c5d78f2319e264"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6dfedd8f334c8d9b50aca076b0c53eab004081e7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6dfedd8f334c8d9b50aca076b0c53eab004081e7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6dfedd8f334c8d9b50aca076b0c53eab004081e7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6dfedd8f334c8d9b50aca076b0c53eab004081e7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b2e84011274c072130fae8c8f082f7394c27c1e1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b2e84011274c072130fae8c8f082f7394c27c1e1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b2e84011274c072130fae8c8f082f7394c27c1e1"}],"stats":{"total":6249,"additions":3754,"deletions":2495},"files":[{"sha":"4ec5ae75b1124103ac6478cf1c6eaa09396fb8b1","filename":".travis.yml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/.travis.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/.travis.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.travis.yml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -13,13 +13,18 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n+cache:\n+  directories:\n+  - $HOME/.m2\n language: java\n jdk:\n   - openjdk7\n # default install is mvn install --quiet -DskipTests=true\n install: mvn --show-version --quiet -P all,skipTests\n #invoker.streamLogs: we cannot access to log files through Travis web ui, so display everything in the console\n-#script: mvn --show-version --quiet clean install -Dinvoker.streamLogs=true\n-script: mvn --show-version --quiet -PskipTests -Dinvoker.streamLogs=true\n+script:\n+  - sudo rm /etc/mavenrc\n+  - export MAVEN_OPTS=\"-Xmx2469m -XX:MaxPermSize=512m\"\n+  - mvn --show-version --quiet clean install -Dinvoker.streamLogs=true\n notifications:\n   webhooks: http://rovere.tirasa.net/cgi-bin/travis.cgi"},{"sha":"5c1d31f1899e6af720b45e6a12c4a99d8965358e","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/BulkActionModalPage.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBulkActionModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBulkActionModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBulkActionModalPage.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -101,19 +101,19 @@ public IModel<T> model(final T object) {\n \n             switch (action) {\n                 case DELETE:\n-                    bulkAction.setOperation(BulkAction.Type.DELETE);\n+                    bulkAction.setType(BulkAction.Type.DELETE);\n                     break;\n                 case SUSPEND:\n-                    bulkAction.setOperation(BulkAction.Type.SUSPEND);\n+                    bulkAction.setType(BulkAction.Type.SUSPEND);\n                     break;\n                 case REACTIVATE:\n-                    bulkAction.setOperation(BulkAction.Type.REACTIVATE);\n+                    bulkAction.setType(BulkAction.Type.REACTIVATE);\n                     break;\n                 case EXECUTE:\n-                    bulkAction.setOperation(BulkAction.Type.EXECUTE);\n+                    bulkAction.setType(BulkAction.Type.EXECUTE);\n                     break;\n                 case DRYRUN:\n-                    bulkAction.setOperation(BulkAction.Type.DRYRUN);\n+                    bulkAction.setType(BulkAction.Type.DRYRUN);\n                     break;\n                 default:\n                     LOG.error(\"Bulk action type not supported\");\n@@ -133,7 +133,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                     } catch (NoSuchMethodException | SecurityException | IllegalAccessException \n                             | IllegalArgumentException | InvocationTargetException e) {\n                         error(getString(Constants.ERROR)\n-                                + \": Operation \" + bulkAction.getOperation() + \" not supported\");\n+                                + \": Operation \" + bulkAction.getType() + \" not supported\");\n                         feedbackPanel.refresh(target);\n                     }\n "},{"sha":"4644fc084fe1860b5e5866e8749368196dc9038f","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.wrap.ResourceKey;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n@@ -123,7 +123,7 @@ public BulkActionResult bulkAction(final BulkAction action) {\n     public void unlink(final String etag, final long groupKey, final List<StatusBean> statuses) {\n         synchronized (this) {\n             GroupService service = getService(etag, GroupService.class);\n-            service.bulkDeassociation(groupKey, ResourceDeassociationActionType.UNLINK,\n+            service.deassociate(groupKey, ResourceDeassociationActionType.UNLINK,\n                     CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(),\n                             ResourceKey.class));\n             resetClient(GroupService.class);\n@@ -137,7 +137,7 @@ public void link(final String etag, final long groupKey, final List<StatusBean>\n             ResourceAssociationMod associationMod = new ResourceAssociationMod();\n             associationMod.getTargetResources().addAll(\n                     CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceKey.class));\n-            service.bulkAssociation(groupKey, ResourceAssociationActionType.LINK, associationMod);\n+            service.associate(groupKey, ResourceAssociationAction.LINK, associationMod);\n \n             resetClient(GroupService.class);\n         }\n@@ -147,7 +147,7 @@ public BulkActionResult deprovision(final String etag, final long groupKey, fina\n         BulkActionResult result;\n         synchronized (this) {\n             GroupService service = getService(etag, GroupService.class);\n-            result = service.bulkDeassociation(groupKey, ResourceDeassociationActionType.DEPROVISION,\n+            result = service.deassociate(groupKey, ResourceDeassociationActionType.DEPROVISION,\n                     CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(),\n                             ResourceKey.class)).\n                     readEntity(BulkActionResult.class);\n@@ -165,7 +165,7 @@ public BulkActionResult provision(final String etag, final long groupKey, final\n             associationMod.getTargetResources().addAll(\n                     CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceKey.class));\n \n-            result = service.bulkAssociation(groupKey, ResourceAssociationActionType.PROVISION, associationMod).\n+            result = service.associate(groupKey, ResourceAssociationAction.PROVISION, associationMod).\n                     readEntity(BulkActionResult.class);\n             resetClient(GroupService.class);\n         }\n@@ -176,7 +176,7 @@ public BulkActionResult unassign(final String etag, final long groupKey, final L\n         BulkActionResult result;\n         synchronized (this) {\n             GroupService service = getService(etag, GroupService.class);\n-            result = service.bulkDeassociation(groupKey, ResourceDeassociationActionType.UNASSIGN,\n+            result = service.deassociate(groupKey, ResourceDeassociationActionType.UNASSIGN,\n                     CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(),\n                             ResourceKey.class)).\n                     readEntity(BulkActionResult.class);\n@@ -194,7 +194,7 @@ public BulkActionResult assign(final String etag, final long groupKey, final Lis\n             associationMod.getTargetResources().addAll(\n                     CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceKey.class));\n \n-            result = service.bulkAssociation(groupKey, ResourceAssociationActionType.ASSIGN, associationMod).\n+            result = service.associate(groupKey, ResourceAssociationAction.ASSIGN, associationMod).\n                     readEntity(BulkActionResult.class);\n \n             resetClient(GroupService.class);"},{"sha":"5c5c062fc67807cdc865e8fdac1fb9cad2d32d29","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.wrap.ResourceKey;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n@@ -150,7 +150,7 @@ public BulkActionResult bulkAction(final BulkAction action) {\n     public void unlink(final String etag, final long userKey, final List<StatusBean> statuses) {\n         synchronized (this) {\n             UserService service = getService(etag, UserService.class);\n-            service.bulkDeassociation(userKey, ResourceDeassociationActionType.UNLINK,\n+            service.deassociate(userKey, ResourceDeassociationActionType.UNLINK,\n                     CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(),\n                             ResourceKey.class));\n             resetClient(UserService.class);\n@@ -164,7 +164,7 @@ public void link(final String etag, final long userKey, final List<StatusBean> s\n             ResourceAssociationMod associationMod = new ResourceAssociationMod();\n             associationMod.getTargetResources().addAll(\n                     CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceKey.class));\n-            service.bulkAssociation(userKey, ResourceAssociationActionType.LINK, associationMod);\n+            service.associate(userKey, ResourceAssociationAction.LINK, associationMod);\n \n             resetClient(UserService.class);\n         }\n@@ -174,7 +174,7 @@ public BulkActionResult deprovision(final String etag, final long userKey, final\n         BulkActionResult result;\n         synchronized (this) {\n             UserService service = getService(etag, UserService.class);\n-            result = service.bulkDeassociation(userKey, ResourceDeassociationActionType.DEPROVISION,\n+            result = service.deassociate(userKey, ResourceDeassociationActionType.DEPROVISION,\n                     CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(),\n                             ResourceKey.class)).\n                     readEntity(BulkActionResult.class);\n@@ -196,7 +196,7 @@ public BulkActionResult provision(final String etag, final long userKey,\n             associationMod.setChangePwd(changepwd);\n             associationMod.setPassword(password);\n \n-            result = service.bulkAssociation(userKey, ResourceAssociationActionType.PROVISION, associationMod).\n+            result = service.associate(userKey, ResourceAssociationAction.PROVISION, associationMod).\n                     readEntity(BulkActionResult.class);\n             resetClient(UserService.class);\n         }\n@@ -207,7 +207,7 @@ public BulkActionResult unassign(final String etag, final long userKey, final Li\n         BulkActionResult result;\n         synchronized (this) {\n             UserService service = getService(etag, UserService.class);\n-            result = service.bulkDeassociation(userKey, ResourceDeassociationActionType.UNASSIGN,\n+            result = service.deassociate(userKey, ResourceDeassociationActionType.UNASSIGN,\n                     CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(),\n                             ResourceKey.class)).\n                     readEntity(BulkActionResult.class);\n@@ -229,7 +229,7 @@ public BulkActionResult assign(final String etag, final long userKey,\n             associationMod.setChangePwd(changepwd);\n             associationMod.setPassword(password);\n \n-            result = service.bulkAssociation(userKey, ResourceAssociationActionType.ASSIGN, associationMod).\n+            result = service.associate(userKey, ResourceAssociationAction.ASSIGN, associationMod).\n                     readEntity(BulkActionResult.class);\n             resetClient(UserService.class);\n         }"},{"sha":"bb6fcdf8bfad4fc244a697cb12196f137d71fab7","filename":"client/old_console/src/main/java/org/apache/syncope/client/console/pages/Configuration.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConfiguration.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.pages;\n \n-import static org.apache.syncope.client.console.pages.AbstractBasePage.LOG;\n-\n import java.io.File;\n import java.io.Serializable;\n import java.util.ArrayList;"},{"sha":"5b46616323a8b8a6214fcf818d5ea86cb7d976ac","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkAction.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkAction.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -46,19 +46,19 @@ public enum Type {\n \n     }\n \n-    private Type operation;\n+    private Type type;\n \n     /**\n      * Serialized identifiers.\n      */\n     private final List<String> targets = new ArrayList<>();\n \n-    public Type getOperation() {\n-        return operation;\n+    public Type getType() {\n+        return type;\n     }\n \n-    public void setOperation(final Type operation) {\n-        this.operation = operation;\n+    public void setType(final Type type) {\n+        this.type = type;\n     }\n \n     @XmlElementWrapper(name = \"targets\")"},{"sha":"08e4c5351a0f26c1b1fe9b0c217329a1203493f4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SchedTaskTO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -33,7 +33,7 @@ public class SchedTaskTO extends AbstractTaskTO {\n \n     private String cronExpression;\n \n-    private String jobClassName;\n+    private String jobDelegateClassName;\n \n     private String name;\n \n@@ -51,12 +51,12 @@ public void setCronExpression(final String cronExpression) {\n         this.cronExpression = cronExpression;\n     }\n \n-    public String getJobClassName() {\n-        return jobClassName;\n+    public String getJobDelegateClassName() {\n+        return jobDelegateClassName;\n     }\n \n-    public void setJobClassName(final String jobClassName) {\n-        this.jobClassName = jobClassName;\n+    public void setJobDelegateClassName(final String jobDelegateClassName) {\n+        this.jobDelegateClassName = jobDelegateClassName;\n     }\n \n     @SuppressWarnings(\"CPD-START\")"},{"sha":"e1e73337d1e0a3f7cdd23e1fd9b35f83706d78e8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AbstractPolicySpec.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAbstractPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAbstractPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAbstractPolicySpec.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -24,6 +24,10 @@\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.syncope.common.lib.annotation.SchemaList;\n \n @XmlType\n@@ -80,4 +84,19 @@ public List<String> getSuffixesNotPermitted() {\n         return suffixesNotPermitted;\n     }\n \n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+\n }"},{"sha":"c3d4af54058d5a4766d758095305e2679860e517","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditElements.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditElements.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -26,6 +26,10 @@ public final class AuditElements implements Serializable {\n \n     private static final long serialVersionUID = -4385059255522273254L;\n \n+    public static final String AUTHENTICATION_CATEGORY = \"Authentication\";\n+\n+    public static final String LOGIN_EVENT = \"login\";\n+\n     @XmlEnum\n     public enum EventCategoryType {\n \n@@ -55,4 +59,8 @@ public enum Result {\n         FAILURE\n \n     }\n+\n+    private AuditElements() {\n+        // private constructor for static utility class\n+    }\n }"},{"sha":"f129a7dce98375c78726f28541fc8aa384fd0ee6","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/LoggerType.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FLoggerType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FLoggerType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FLoggerType.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -19,22 +19,23 @@\n package org.apache.syncope.common.lib.types;\n \n import javax.xml.bind.annotation.XmlEnum;\n+import org.apache.commons.lang3.StringUtils;\n \n @XmlEnum\n public enum LoggerType {\n \n     /**\n      * This type describes a common logger used to handle system and application events.\n      */\n-    LOG(\"\"),\n+    LOG(StringUtils.EMPTY),\n     /**\n      * Audit logger only focus on security related events, usually logging how did what and when.\n      * In case of a security incident audit loggers should allow an administrator to recall all\n      * actions a certain user has done.\n      */\n     AUDIT(\"syncope.audit\");\n \n-    private String prefix;\n+    private final String prefix;\n \n     LoggerType(final String prefix) {\n         this.prefix = prefix;"},{"sha":"efbe0efc0be43a09ea75f64409a177b377b53783","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ResourceAssociationAction.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FResourceAssociationAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FResourceAssociationAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FResourceAssociationAction.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -21,18 +21,18 @@\n import javax.xml.bind.annotation.XmlEnum;\n \n @XmlEnum\n-public enum ResourceAssociationActionType {\n+public enum ResourceAssociationAction {\n \n     /**\n-     * Add association between user/group on Syncope and external resource(s) without any propagation.\n+     * Link user/group/any object on Syncope and external resource(s) without any propagation.\n      */\n     LINK,\n     /**\n-     * Add user/group into external resource(s).\n+     * Send user/group/any object data to external resource(s).\n      */\n     PROVISION,\n     /**\n-     * Assign (link + provision) external resource(s) with user/group.\n+     * Assign (link + provision) external resource(s) to user/group/any object.\n      */\n     ASSIGN\n ","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ResourceAssociationActionType.java"},{"sha":"3cdf1fafb056efe995bb30a3007f281179a31737","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/CollectionWrapper.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FCollectionWrapper.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -57,9 +57,9 @@ public static <T extends AbstractWrappable<String>> List<String> unwrap(final Co\n \n     public static List<AuditLoggerName> wrapLogger(final Collection<LoggerTO> logger) {\n         List<AuditLoggerName> respons = new ArrayList<>();\n-        for (LoggerTO l : logger) {\n+        for (LoggerTO loggerTO : logger) {\n             try {\n-                respons.add(AuditLoggerName.fromLoggerName(l.getKey()));\n+                respons.add(AuditLoggerName.fromLoggerName(loggerTO.getKey()));\n             } catch (Exception ignore) {\n                 // ignore\n             }\n@@ -69,9 +69,9 @@ public static List<AuditLoggerName> wrapLogger(final Collection<LoggerTO> logger\n \n     public static List<LoggerTO> unwrapLogger(final Collection<AuditLoggerName> auditNames) {\n         List<LoggerTO> respons = new ArrayList<>();\n-        for (AuditLoggerName l : auditNames) {\n+        for (AuditLoggerName name : auditNames) {\n             LoggerTO loggerTO = new LoggerTO();\n-            loggerTO.setKey(l.toLoggerName());\n+            loggerTO.setKey(name.toLoggerName());\n             loggerTO.setLevel(LoggerLevel.DEBUG);\n             respons.add(loggerTO);\n         }"},{"sha":"1c0fda21b93f54a87de0c08ceac51e91293e0ba9","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.wrap.ResourceKey;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n@@ -150,7 +150,7 @@\n     @Path(\"{key}/deassociate/{type}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response bulkDeassociation(\n+    Response deassociate(\n             @NotNull @PathParam(\"key\") Long key,\n             @NotNull @PathParam(\"type\") ResourceDeassociationActionType type,\n             @NotNull List<ResourceKey> resourceNames);\n@@ -171,9 +171,9 @@ Response bulkDeassociation(\n     @Path(\"{key}/associate/{type}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response bulkAssociation(\n+    Response associate(\n             @NotNull @PathParam(\"key\") Long key,\n-            @NotNull @PathParam(\"type\") ResourceAssociationActionType type,\n+            @NotNull @PathParam(\"type\") ResourceAssociationAction type,\n             @NotNull ResourceAssociationMod associationMod);\n \n     /**"},{"sha":"7ce109fca10cbb0a64a74e1fc15b5fda07e02932","filename":"core/logic/pom.xml","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fpom.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -152,13 +152,35 @@ under the License.\n         <directory>${basedir}/src/test/resources</directory>\n         <filtering>true</filtering>\n       </testResource>\n+      <testResource>\n+        <directory>${basedir}/../persistence-jpa/src/main/resources</directory>\n+        <includes>\n+          <include>persistence.properties</include>\n+        </includes>\n+        <filtering>true</filtering>\n+      </testResource>\n       <testResource>\n         <directory>${basedir}/../persistence-jpa/src/test/resources</directory>\n         <filtering>true</filtering>\n       </testResource>\n     </testResources>\n     \n     <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>set-bundles</id>\n+            <phase>process-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      \n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-checkstyle-plugin</artifactId>"},{"sha":"38927cef467c49d930f6dca8f2bfd5bff841555b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":25,"deletions":32,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -55,7 +55,6 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.transaction.interceptor.TransactionInterceptor;\n \n /**\n  * Note that this controller does not extend {@link AbstractTransactionalLogic}, hence does not provide any\n@@ -96,7 +95,7 @@ public AnyObjectTO read(final Long anyObjectKey) {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     @Override\n     public int count(final List<String> realms) {\n         return anyObjectDAO.count(getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realms));\n@@ -133,7 +132,7 @@ public AnyObjectTO transform(final AnyObject input) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_SEARCH + \"')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     @Override\n     public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n         return searchDAO.count(\n@@ -142,7 +141,7 @@ public int searchCount(final SearchCond searchCondition, final List<String> real\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_SEARCH + \"')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     @Override\n     public List<AnyObjectTO> search(final SearchCond searchCondition, final int page, final int size,\n             final List<OrderByClause> orderBy, final List<String> realms, final boolean details) {\n@@ -239,29 +238,26 @@ public AnyObjectTO delete(final Long anyObjectKey) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public AnyObjectTO unlink(final Long anyObjectKey, final Collection<String> resources) {\n         AnyObjectMod anyObjectMod = new AnyObjectMod();\n         anyObjectMod.setKey(anyObjectKey);\n         anyObjectMod.getResourcesToRemove().addAll(resources);\n-        final Long updatedResult = provisioningManager.unlink(anyObjectMod);\n \n-        return binder.getAnyObjectTO(updatedResult);\n+        return binder.getAnyObjectTO(provisioningManager.unlink(anyObjectMod));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public AnyObjectTO link(final Long anyObjectKey, final Collection<String> resources) {\n         AnyObjectMod anyObjectMod = new AnyObjectMod();\n         anyObjectMod.setKey(anyObjectKey);\n         anyObjectMod.getResourcesToAdd().addAll(resources);\n+\n         return binder.getAnyObjectTO(provisioningManager.link(anyObjectMod));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public AnyObjectTO unassign(final Long anyObjectKey, final Collection<String> resources) {\n         AnyObjectMod anyObjectMod = new AnyObjectMod();\n@@ -271,44 +267,41 @@ public AnyObjectTO unassign(final Long anyObjectKey, final Collection<String> re\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n-    public AnyObjectTO assign(final Long anyObjectKey, final Collection<String> resources,\n-            final boolean changePwd, final String password) {\n+    public AnyObjectTO assign(\n+            final Long key,\n+            final Collection<String> resources,\n+            final boolean changepwd,\n+            final String password) {\n \n-        AnyObjectMod userMod = new AnyObjectMod();\n-        userMod.setKey(anyObjectKey);\n-        userMod.getResourcesToAdd().addAll(resources);\n-        return update(userMod);\n+        AnyObjectMod anyObjectMod = new AnyObjectMod();\n+        anyObjectMod.setKey(key);\n+        anyObjectMod.getResourcesToAdd().addAll(resources);\n+\n+        return update(anyObjectMod);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n-    public AnyObjectTO deprovision(final Long anyObjectKey, final Collection<String> resources) {\n-        AnyObject anyObject = anyObjectDAO.authFind(anyObjectKey);\n+    public AnyObjectTO deprovision(final Long key, final Collection<String> resources) {\n+        List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources);\n \n-        List<PropagationStatus> statuses = provisioningManager.deprovision(anyObjectKey, resources);\n-\n-        AnyObjectTO updatedTO = binder.getAnyObjectTO(anyObject, true);\n+        AnyObjectTO updatedTO = binder.getAnyObjectTO(key);\n         updatedTO.getPropagationStatusTOs().addAll(statuses);\n         return updatedTO;\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n-    public AnyObjectTO provision(final Long anyObjectKey, final Collection<String> resources,\n-            final boolean changePwd, final String password) {\n-\n-        AnyObjectTO original = binder.getAnyObjectTO(anyObjectKey);\n+    public AnyObjectTO provision(\n+            final Long key,\n+            final Collection<String> resources,\n+            final boolean changePwd,\n+            final String password) {\n \n-        //trick: assign and retrieve propagation statuses ...\n-        original.getPropagationStatusTOs().addAll(\n-                assign(anyObjectKey, resources, changePwd, password).getPropagationStatusTOs());\n+        AnyObjectTO original = binder.getAnyObjectTO(key);\n+        original.getPropagationStatusTOs().addAll(provisioningManager.provision(key, resources));\n \n-        // .... rollback.\n-        TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n         return original;\n     }\n "},{"sha":"15984989fc0e73a06bbb17b87428cfe3d278f69d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConfigurationLogic.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -23,6 +23,7 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConfTO;\n import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -97,7 +98,7 @@ public void set(final AttrTO value) {\n     @Transactional(readOnly = true)\n     public void export(final OutputStream os) {\n         try {\n-            exporter.export(os, uwfAdapter.getPrefix(), gwfAdapter.getPrefix());\n+            exporter.export(AuthContextUtils.getDomain(), os, uwfAdapter.getPrefix(), gwfAdapter.getPrefix());\n             LOG.debug(\"Database content successfully exported\");\n         } catch (Exception e) {\n             LOG.error(\"While exporting database content\", e);"},{"sha":"33b044779e6a0aae6e3a2577819b4d296708decb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":26,"deletions":32,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -56,7 +56,6 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.transaction.interceptor.TransactionInterceptor;\n \n /**\n  * Note that this controller does not extend {@link AbstractTransactionalLogic}, hence does not provide any\n@@ -114,7 +113,7 @@ public GroupTO transform(final Group input) {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     @Override\n     public int count(final List<String> realms) {\n         return groupDAO.count(getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realms));\n@@ -140,7 +139,7 @@ public GroupTO transform(final Group input) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_SEARCH + \"')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     @Override\n     public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n         return searchDAO.count(\n@@ -149,7 +148,7 @@ public int searchCount(final SearchCond searchCondition, final List<String> real\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_SEARCH + \"')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     @Override\n     public List<GroupTO> search(final SearchCond searchCondition, final int page, final int size,\n             final List<OrderByClause> orderBy, final List<String> realms, final boolean details) {\n@@ -256,75 +255,70 @@ public String transform(final Group group) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public GroupTO unlink(final Long groupKey, final Collection<String> resources) {\n-        final GroupMod groupMod = new GroupMod();\n+        GroupMod groupMod = new GroupMod();\n         groupMod.setKey(groupKey);\n         groupMod.getResourcesToRemove().addAll(resources);\n-        final Long updatedResult = provisioningManager.unlink(groupMod);\n \n-        return binder.getGroupTO(updatedResult);\n+        return binder.getGroupTO(provisioningManager.unlink(groupMod));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public GroupTO link(final Long groupKey, final Collection<String> resources) {\n-        final GroupMod groupMod = new GroupMod();\n+        GroupMod groupMod = new GroupMod();\n         groupMod.setKey(groupKey);\n         groupMod.getResourcesToAdd().addAll(resources);\n+\n         return binder.getGroupTO(provisioningManager.link(groupMod));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public GroupTO unassign(final Long groupKey, final Collection<String> resources) {\n-        final GroupMod groupMod = new GroupMod();\n+        GroupMod groupMod = new GroupMod();\n         groupMod.setKey(groupKey);\n         groupMod.getResourcesToRemove().addAll(resources);\n         return update(groupMod);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public GroupTO assign(\n-            final Long groupKey, final Collection<String> resources, final boolean changePwd, final String password) {\n+            final Long key,\n+            final Collection<String> resources,\n+            final boolean changepwd,\n+            final String password) {\n \n-        final GroupMod userMod = new GroupMod();\n-        userMod.setKey(groupKey);\n-        userMod.getResourcesToAdd().addAll(resources);\n-        return update(userMod);\n+        GroupMod groupMod = new GroupMod();\n+        groupMod.setKey(key);\n+        groupMod.getResourcesToAdd().addAll(resources);\n+\n+        return update(groupMod);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n-    public GroupTO deprovision(final Long groupKey, final Collection<String> resources) {\n-        final Group group = groupDAO.authFind(groupKey);\n-\n-        List<PropagationStatus> statuses = provisioningManager.deprovision(groupKey, resources);\n+    public GroupTO deprovision(final Long key, final Collection<String> resources) {\n+        List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources);\n \n-        GroupTO updatedTO = binder.getGroupTO(group, true);\n+        GroupTO updatedTO = binder.getGroupTO(key);\n         updatedTO.getPropagationStatusTOs().addAll(statuses);\n         return updatedTO;\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public GroupTO provision(\n-            final Long groupKey, final Collection<String> resources, final boolean changePwd, final String password) {\n-        GroupTO original = binder.getGroupTO(groupKey);\n+            final Long key,\n+            final Collection<String> resources,\n+            final boolean changePwd,\n+            final String password) {\n \n-        //trick: assign and retrieve propagation statuses ...\n-        original.getPropagationStatusTOs().addAll(\n-                assign(groupKey, resources, changePwd, password).getPropagationStatusTOs());\n+        GroupTO original = binder.getGroupTO(key);\n+        original.getPropagationStatusTOs().addAll(provisioningManager.provision(key, resources));\n \n-        // .... rollback.\n-        TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n         return original;\n     }\n "},{"sha":"d407dbac4febaef21d1bac24428c15e3fa9a56c3","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -46,6 +46,7 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n@@ -55,8 +56,9 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n-import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n+import org.apache.syncope.core.provisioning.java.sync.PushJobDelegate;\n+import org.apache.syncope.core.provisioning.java.sync.SyncJobDelegate;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n@@ -255,10 +257,10 @@ public List<EventCategoryTO> listAuditEvents() {\n                 }\n             }\n \n-            //SYNCOPE-608\n+            // SYNCOPE-608\n             EventCategoryTO authenticationControllerEvents = new EventCategoryTO();\n-            authenticationControllerEvents.setCategory(\"AuthenticationController\");\n-            authenticationControllerEvents.getEvents().add(\"login\");\n+            authenticationControllerEvents.setCategory(AuditElements.AUTHENTICATION_CATEGORY);\n+            authenticationControllerEvents.getEvents().add(AuditElements.LOGIN_EVENT);\n             events.add(authenticationControllerEvents);\n \n             events.add(new EventCategoryTO(EventCategoryType.PROPAGATION));\n@@ -305,15 +307,17 @@ public List<EventCategoryTO> listAuditEvents() {\n \n             for (SchedTask task : taskDAO.<SchedTask>findAll(TaskType.SCHEDULED)) {\n                 EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n-                eventCategoryTO.setCategory(Class.forName(task.getJobClassName()).getSimpleName());\n+                eventCategoryTO.setCategory(Class.forName(task.getJobDelegateClassName()).getSimpleName());\n                 events.add(eventCategoryTO);\n             }\n \n-            for (SyncTask task : taskDAO.<SyncTask>findAll(TaskType.SYNCHRONIZATION)) {\n-                EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n-                eventCategoryTO.setCategory(Class.forName(task.getJobClassName()).getSimpleName());\n-                events.add(eventCategoryTO);\n-            }\n+            EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n+            eventCategoryTO.setCategory(SyncJobDelegate.class.getSimpleName());\n+            events.add(eventCategoryTO);\n+\n+            eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n+            eventCategoryTO.setCategory(PushJobDelegate.class.getSimpleName());\n+            events.add(eventCategoryTO);\n         } catch (Exception e) {\n             LOG.error(\"Failure retrieving audit/notification events\", e);\n         }"},{"sha":"8dd20a8fc142523e9ad2b85aaa8cf4c14eeed098","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -131,7 +131,7 @@ public SyncopeTO info() {\n         syncopeTO.getReportlets().addAll(\n                 classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.REPORTLET));\n         syncopeTO.getTaskJobs().addAll(\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.TASKJOB));\n+                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.TASKJOBDELEGATE));\n         syncopeTO.getPropagationActions().addAll(\n                 classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.PROPAGATION_ACTIONS));\n         syncopeTO.getSyncActions().addAll("},{"sha":"9c119f3c755ec744a25111f5491cae89f9d4d7ed","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":40,"deletions":36,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -51,15 +52,15 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n-import org.apache.syncope.core.provisioning.api.job.TaskJob;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n-import org.apache.syncope.core.logic.notification.NotificationJob;\n+import org.apache.syncope.core.logic.notification.NotificationJobDelegate;\n+import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.quartz.JobDataMap;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n \n@@ -72,21 +73,21 @@ public class TaskLogic extends AbstractJobLogic<AbstractTaskTO> {\n     @Autowired\n     private TaskExecDAO taskExecDAO;\n \n+    @Autowired\n+    private ConfDAO confDAO;\n+\n     @Autowired\n     private TaskDataBinder binder;\n \n     @Autowired\n     private PropagationTaskExecutor taskExecutor;\n \n     @Autowired\n-    private NotificationJob notificationJob;\n+    private NotificationJobDelegate notificationJobDelegate;\n \n     @Autowired\n     private JobInstanceLoader jobInstanceLoader;\n \n-    @Autowired\n-    private SchedulerFactoryBean scheduler;\n-\n     @Autowired\n     private TaskUtilsFactory taskUtilsFactory;\n \n@@ -98,7 +99,9 @@ public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n         task = taskDAO.save(task);\n \n         try {\n-            jobInstanceLoader.registerJob(task, task.getJobClassName(), task.getCronExpression());\n+            jobInstanceLoader.registerJob(\n+                    task,\n+                    confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getKey(), e);\n \n@@ -128,7 +131,9 @@ public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n         task = taskDAO.save(task);\n \n         try {\n-            jobInstanceLoader.registerJob(task, task.getJobClassName(), task.getCronExpression());\n+            jobInstanceLoader.registerJob(\n+                    task,\n+                    confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getKey(), e);\n \n@@ -163,28 +168,28 @@ public T transform(final Task task) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.TASK_READ + \"')\")\n-    public <T extends AbstractTaskTO> T read(final Long taskId) {\n-        Task task = taskDAO.find(taskId);\n+    public <T extends AbstractTaskTO> T read(final Long taskKey) {\n+        Task task = taskDAO.find(taskKey);\n         if (task == null) {\n-            throw new NotFoundException(\"Task \" + taskId);\n+            throw new NotFoundException(\"Task \" + taskKey);\n         }\n         return binder.getTaskTO(task, taskUtilsFactory.getInstance(task));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.TASK_READ + \"')\")\n-    public TaskExecTO readExecution(final Long executionId) {\n-        TaskExec taskExec = taskExecDAO.find(executionId);\n+    public TaskExecTO readExecution(final Long execKey) {\n+        TaskExec taskExec = taskExecDAO.find(execKey);\n         if (taskExec == null) {\n-            throw new NotFoundException(\"Task execution \" + executionId);\n+            throw new NotFoundException(\"Task execution \" + execKey);\n         }\n         return binder.getTaskExecTO(taskExec);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.TASK_EXECUTE + \"')\")\n-    public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n-        Task task = taskDAO.find(taskId);\n+    public TaskExecTO execute(final Long taskKey, final boolean dryRun) {\n+        Task task = taskDAO.find(taskKey);\n         if (task == null) {\n-            throw new NotFoundException(\"Task \" + taskId);\n+            throw new NotFoundException(\"Task \" + taskKey);\n         }\n         TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n \n@@ -196,23 +201,22 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n                 break;\n \n             case NOTIFICATION:\n-                final TaskExec notExec = notificationJob.executeSingle((NotificationTask) task);\n+                final TaskExec notExec = notificationJobDelegate.executeSingle((NotificationTask) task);\n                 result = binder.getTaskExecTO(notExec);\n                 break;\n \n             case SCHEDULED:\n             case SYNCHRONIZATION:\n             case PUSH:\n                 try {\n-                    jobInstanceLoader.registerJob(task,\n-                            ((SchedTask) task).getJobClassName(),\n-                            ((SchedTask) task).getCronExpression());\n-\n-                    JobDataMap map = new JobDataMap();\n-                    map.put(TaskJob.DRY_RUN_JOBDETAIL_KEY, dryRun);\n+                    Map<String, Object> jobDataMap = jobInstanceLoader.registerJob(\n+                            (SchedTask) task,\n+                            confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n \n+                    jobDataMap.put(TaskJob.DRY_RUN_JOBDETAIL_KEY, dryRun);\n                     scheduler.getScheduler().triggerJob(\n-                            new JobKey(JobNamer.getJobName(task), Scheduler.DEFAULT_GROUP), map);\n+                            new JobKey(JobNamer.getJobName(task), Scheduler.DEFAULT_GROUP),\n+                            new JobDataMap(jobDataMap));\n                 } catch (Exception e) {\n                     LOG.error(\"While executing task {}\", task, e);\n \n@@ -222,7 +226,7 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n                 }\n \n                 result = new TaskExecTO();\n-                result.setTask(taskId);\n+                result.setTask(taskKey);\n                 result.setStartDate(new Date());\n                 result.setStatus(\"JOB_FIRED\");\n                 result.setMessage(\"Job fired; waiting for results...\");\n@@ -235,10 +239,10 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.TASK_READ + \"')\")\n-    public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus status, final String message) {\n-        TaskExec exec = taskExecDAO.find(executionId);\n+    public TaskExecTO report(final Long execKey, final PropagationTaskExecStatus status, final String message) {\n+        TaskExec exec = taskExecDAO.find(execKey);\n         if (exec == null) {\n-            throw new NotFoundException(\"Task execution \" + executionId);\n+            throw new NotFoundException(\"Task execution \" + execKey);\n         }\n \n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPropagationTaskExecReport);\n@@ -277,10 +281,10 @@ public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.TASK_DELETE + \"')\")\n-    public <T extends AbstractTaskTO> T delete(final Long taskId) {\n-        Task task = taskDAO.find(taskId);\n+    public <T extends AbstractTaskTO> T delete(final Long taskKey) {\n+        Task task = taskDAO.find(taskKey);\n         if (task == null) {\n-            throw new NotFoundException(\"Task \" + taskId);\n+            throw new NotFoundException(\"Task \" + taskKey);\n         }\n         TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n \n@@ -298,10 +302,10 @@ public <T extends AbstractTaskTO> T delete(final Long taskId) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.TASK_DELETE + \"')\")\n-    public TaskExecTO deleteExecution(final Long executionId) {\n-        TaskExec taskExec = taskExecDAO.find(executionId);\n+    public TaskExecTO deleteExecution(final Long execKey) {\n+        TaskExec taskExec = taskExecDAO.find(execKey);\n         if (taskExec == null) {\n-            throw new NotFoundException(\"Task execution \" + executionId);\n+            throw new NotFoundException(\"Task execution \" + execKey);\n         }\n \n         TaskExecTO taskExecutionToDelete = binder.getTaskExecTO(taskExec);"},{"sha":"28e7401fc1f0e1c123b8e5c5dc9271d6d2c8a118","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":25,"deletions":42,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -60,7 +60,6 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.transaction.interceptor.TransactionInterceptor;\n \n /**\n  * Note that this controller does not extend {@link AbstractTransactionalLogic}, hence does not provide any\n@@ -100,25 +99,27 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserMod> {\n     protected SyncopeLogic syncopeLogic;\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public String getUsername(final Long key) {\n         return binder.getUserTO(key).getUsername();\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public Long getKey(final String username) {\n         return binder.getUserTO(username).getKey();\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_LIST + \"')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     @Override\n     public int count(final List<String> realms) {\n         return userDAO.count(\n                 getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_LIST), realms));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_LIST + \"')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     @Override\n     public List<UserTO> list(\n             final int page, final int size, final List<OrderByClause> orderBy,\n@@ -152,7 +153,7 @@ public UserTO read(final Long key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_SEARCH + \"')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     @Override\n     public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n         return searchDAO.count(\n@@ -161,7 +162,7 @@ public int searchCount(final SearchCond searchCondition, final List<String> real\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_SEARCH + \"')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     @Override\n     public List<UserTO> search(final SearchCond searchCondition, final int page, final int size,\n             final List<OrderByClause> orderBy, final List<String> realms, final boolean details) {\n@@ -242,22 +243,21 @@ public UserTO update(final UserMod userMod) {\n         return updatedTO;\n     }\n \n-    protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final User user,\n-            final StatusMod statusMod) {\n+    protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final StatusMod statusMod) {\n         Map.Entry<Long, List<PropagationStatus>> updated;\n \n         switch (statusMod.getType()) {\n             case SUSPEND:\n-                updated = provisioningManager.suspend(user, statusMod);\n+                updated = provisioningManager.suspend(statusMod);\n                 break;\n \n             case REACTIVATE:\n-                updated = provisioningManager.reactivate(user, statusMod);\n+                updated = provisioningManager.reactivate(statusMod);\n                 break;\n \n             case ACTIVATE:\n             default:\n-                updated = provisioningManager.activate(user, statusMod);\n+                updated = provisioningManager.activate(statusMod);\n                 break;\n \n         }\n@@ -266,11 +266,8 @@ protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final Us\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO status(final StatusMod statusMod) {\n-        User user = userDAO.authFind(statusMod.getKey());\n-\n-        Map.Entry<Long, List<PropagationStatus>> updated = setStatusOnWfAdapter(user, statusMod);\n+        Map.Entry<Long, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusMod);\n         final UserTO savedTO = binder.getUserTO(updated.getKey());\n         savedTO.getPropagationStatusTOs().addAll(updated.getValue());\n         return savedTO;\n@@ -304,7 +301,7 @@ public void confirmPasswordReset(final String token, final String password) {\n         if (user == null) {\n             throw new NotFoundException(\"User with token \" + token);\n         }\n-        provisioningManager.confirmPasswordReset(user, token, password);\n+        provisioningManager.confirmPasswordReset(user.getKey(), token, password);\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n@@ -332,9 +329,8 @@ public String transform(final Group group) {\n \n         List<PropagationStatus> statuses = provisioningManager.delete(key);\n \n-        final UserTO deletedTO;\n-        User deleted = userDAO.find(key);\n-        if (deleted == null) {\n+        UserTO deletedTO;\n+        if (userDAO.find(key) == null) {\n             deletedTO = new UserTO();\n             deletedTO.setKey(key);\n         } else {\n@@ -346,47 +342,43 @@ public String transform(final Group group) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO unlink(final Long key, final Collection<String> resources) {\n-        final UserMod userMod = new UserMod();\n+        UserMod userMod = new UserMod();\n         userMod.setKey(key);\n         userMod.getResourcesToRemove().addAll(resources);\n-        Long updatedKey = provisioningManager.unlink(userMod);\n \n-        return binder.getUserTO(updatedKey);\n+        return binder.getUserTO(provisioningManager.unlink(userMod));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO link(final Long key, final Collection<String> resources) {\n-        final UserMod userMod = new UserMod();\n+        UserMod userMod = new UserMod();\n         userMod.setKey(key);\n         userMod.getResourcesToAdd().addAll(resources);\n+\n         return binder.getUserTO(provisioningManager.link(userMod));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO unassign(final Long key, final Collection<String> resources) {\n-        final UserMod userMod = new UserMod();\n+        UserMod userMod = new UserMod();\n         userMod.setKey(key);\n         userMod.getResourcesToRemove().addAll(resources);\n         return update(userMod);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO assign(\n             final Long key,\n             final Collection<String> resources,\n             final boolean changepwd,\n             final String password) {\n \n-        final UserMod userMod = new UserMod();\n+        UserMod userMod = new UserMod();\n         userMod.setKey(key);\n         userMod.getResourcesToAdd().addAll(resources);\n \n@@ -402,35 +394,26 @@ public UserTO assign(\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO deprovision(final Long key, final Collection<String> resources) {\n-        User user = userDAO.authFind(key);\n-\n         List<PropagationStatus> statuses = provisioningManager.deprovision(key, resources);\n \n-        final UserTO updatedUserTO = binder.getUserTO(user, true);\n-        updatedUserTO.getPropagationStatusTOs().addAll(statuses);\n-        return updatedUserTO;\n+        UserTO updatedTO = binder.getUserTO(key);\n+        updatedTO.getPropagationStatusTOs().addAll(statuses);\n+        return updatedTO;\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n-    @Transactional(readOnly = true)\n     @Override\n     public UserTO provision(\n             final Long key,\n             final Collection<String> resources,\n             final boolean changePwd,\n             final String password) {\n \n-        final UserTO original = binder.getUserTO(key);\n-\n-        //trick: assign and retrieve propagation statuses ...\n-        original.getPropagationStatusTOs().addAll(\n-                assign(key, resources, changePwd, password).getPropagationStatusTOs());\n+        UserTO original = binder.getUserTO(key);\n+        original.getPropagationStatusTOs().addAll(provisioningManager.provision(key, changePwd, password, resources));\n \n-        // .... rollback.\n-        TransactionInterceptor.currentTransactionStatus().setRollbackOnly();\n         return original;\n     }\n "},{"sha":"b35c42d89afddd3d7cafc9ed549b83309da1f506","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/audit/AuditConnectionFactory.java","status":"removed","additions":0,"deletions":159,"changes":159,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FAuditConnectionFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FAuditConnectionFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FAuditConnectionFactory.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -1,159 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.audit;\n-\n-import java.io.InputStream;\n-import java.sql.Connection;\n-import java.util.Properties;\n-import javax.naming.Context;\n-import javax.naming.InitialContext;\n-import javax.rmi.PortableRemoteObject;\n-import javax.sql.DataSource;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathConstants;\n-import javax.xml.xpath.XPathExpression;\n-import javax.xml.xpath.XPathFactory;\n-import org.apache.commons.dbcp2.BasicDataSource;\n-import org.apache.commons.io.IOUtils;\n-import org.springframework.core.io.ClassPathResource;\n-import org.springframework.core.io.FileSystemResource;\n-import org.springframework.core.io.Resource;\n-import org.springframework.core.io.support.PropertiesLoaderUtils;\n-import org.springframework.jdbc.datasource.DataSourceUtils;\n-import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n-import org.springframework.jdbc.datasource.init.ScriptUtils;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n-import org.w3c.dom.ls.DOMImplementationLS;\n-import org.w3c.dom.ls.LSInput;\n-import org.w3c.dom.ls.LSParser;\n-\n-/**\n- * LOG4J SQL connection factory that first attempts to obtain a {@link javax.sql.DataSource} from the JNDI name\n- * configured in Spring or, when not found, builds a new {@link javax.sql.DataSource DataSource} via Commons DBCP; if\n- * any datasource if found, the SQL init script is used to populate the database.\n- */\n-public final class AuditConnectionFactory {\n-\n-    private static DataSource DATASOURCE;\n-\n-    private static final String PERSISTENCE_CONTEXT = \"/persistenceContext.xml\";\n-\n-    static {\n-        // 1. Attempts to lookup for configured JNDI datasource (if present and available)\n-        InputStream springConf = AuditConnectionFactory.class.getResourceAsStream(PERSISTENCE_CONTEXT);\n-        String primary = null;\n-        String fallback = null;\n-        try {\n-            DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n-            DOMImplementationLS impl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n-            LSParser parser = impl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);\n-            LSInput lsinput = impl.createLSInput();\n-            lsinput.setByteStream(springConf);\n-            Document source = parser.parse(lsinput);\n-\n-            XPathFactory xPathfactory = XPathFactory.newInstance();\n-            XPath xpath = xPathfactory.newXPath();\n-\n-            XPathExpression expr = xpath.compile(\"//*[local-name()='bean' and @id='persistenceProperties']/\"\n-                    + \"child::*[local-name()='property' and @name='primary']/@value\");\n-            primary = (String) expr.evaluate(source, XPathConstants.STRING);\n-            expr = xpath.compile(\"//*[local-name()='bean' and @id='persistenceProperties']/\"\n-                    + \"child::*[local-name()='property' and @name='fallback']/@value\");\n-            fallback = (String) expr.evaluate(source, XPathConstants.STRING);\n-\n-            expr = xpath.compile(\"//*[local-name()='property' and @name='jndiName']/@value\");\n-            String jndiName = (String) expr.evaluate(source, XPathConstants.STRING);\n-\n-            Context ctx = new InitialContext();\n-            Object obj = ctx.lookup(jndiName);\n-\n-            DATASOURCE = (DataSource) PortableRemoteObject.narrow(obj, DataSource.class);\n-        } catch (Exception e) {\n-            // ignore\n-        } finally {\n-            IOUtils.closeQuietly(springConf);\n-        }\n-\n-        // 2. Creates Commons DBCP datasource\n-        String initSQLScript = null;\n-        try {\n-            Resource persistenceProperties = null;\n-            if (primary != null) {\n-                if (primary.startsWith(\"file:\")) {\n-                    persistenceProperties = new FileSystemResource(primary.substring(5));\n-                }\n-                if (primary.startsWith(\"classpath:\")) {\n-                    persistenceProperties = new ClassPathResource(primary.substring(10));\n-                }\n-            }\n-            if ((persistenceProperties == null || !persistenceProperties.exists()) && fallback != null) {\n-                if (fallback.startsWith(\"file:\")) {\n-                    persistenceProperties = new FileSystemResource(fallback.substring(5));\n-                }\n-                if (fallback.startsWith(\"classpath:\")) {\n-                    persistenceProperties = new ClassPathResource(fallback.substring(10));\n-                }\n-            }\n-            Properties persistence = PropertiesLoaderUtils.loadProperties(persistenceProperties);\n-\n-            initSQLScript = persistence.getProperty(\"audit.sql\");\n-\n-            if (DATASOURCE == null) {\n-                BasicDataSource bds = new BasicDataSource();\n-                bds.setDriverClassName(persistence.getProperty(\"jpa.driverClassName\"));\n-                bds.setUrl(persistence.getProperty(\"jpa.url\"));\n-                bds.setUsername(persistence.getProperty(\"jpa.username\"));\n-                bds.setPassword(persistence.getProperty(\"jpa.password\"));\n-\n-                bds.setLogAbandoned(true);\n-                bds.setRemoveAbandonedOnBorrow(true);\n-                bds.setRemoveAbandonedOnMaintenance(true);\n-\n-                DATASOURCE = bds;\n-            }\n-        } catch (Exception e) {\n-            throw new IllegalStateException(\"Audit datasource configuration failed\", e);\n-        }\n-\n-        // 3. Initializes the chosen datasource\n-        ResourceDatabasePopulator populator = new ResourceDatabasePopulator();\n-        populator.setScripts(new Resource[] { new ClassPathResource(\"/audit/\" + initSQLScript) });\n-        // forces no statement separation\n-        populator.setSeparator(ScriptUtils.EOF_STATEMENT_SEPARATOR);\n-        Connection conn = DataSourceUtils.getConnection(DATASOURCE);\n-        try {\n-            populator.populate(conn);\n-        } finally {\n-            DataSourceUtils.releaseConnection(conn, DATASOURCE);\n-        }\n-    }\n-\n-    public static Connection getConnection() {\n-        if (DATASOURCE != null) {\n-            return DataSourceUtils.getConnection(DATASOURCE);\n-        }\n-\n-        throw new IllegalStateException(\"Audit dataSource init failed: check logs\");\n-    }\n-\n-    private AuditConnectionFactory() {\n-        // empty constructor for static utility class\n-    }\n-}"},{"sha":"2bcd78f1220ebd62e0d2252a214ec24f5f149b2a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ImplementationClassNamesLoader.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FImplementationClassNamesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FImplementationClassNamesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FImplementationClassNamesLoader.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -25,16 +25,16 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.core.provisioning.api.job.PushJob;\n-import org.apache.syncope.core.provisioning.api.job.SyncJob;\n-import org.apache.syncope.core.provisioning.api.job.TaskJob;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.sync.PushActions;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n import org.apache.syncope.core.provisioning.api.sync.SyncCorrelationRule;\n import org.apache.syncope.core.logic.report.Reportlet;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n+import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n+import org.apache.syncope.core.provisioning.java.sync.PushJobDelegate;\n+import org.apache.syncope.core.provisioning.java.sync.SyncJobDelegate;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.config.BeanDefinition;\n@@ -52,7 +52,7 @@ public class ImplementationClassNamesLoader implements SyncopeLoader {\n     public enum Type {\n \n         REPORTLET,\n-        TASKJOB,\n+        TASKJOBDELEGATE,\n         PROPAGATION_ACTIONS,\n         SYNC_ACTIONS,\n         PUSH_ACTIONS,\n@@ -83,7 +83,7 @@ public void load() {\n \n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n         scanner.addIncludeFilter(new AssignableTypeFilter(Reportlet.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(TaskJob.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(SchedTaskJobDelegate.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SyncActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PushActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SyncCorrelationRule.class));\n@@ -102,11 +102,11 @@ public void load() {\n                     classNames.get(Type.REPORTLET).add(clazz.getName());\n                 }\n \n-                if (TaskJob.class.isAssignableFrom(clazz) && !isAbsractClazz\n-                        && !SyncJob.class.isAssignableFrom(clazz)\n-                        && !PushJob.class.isAssignableFrom(clazz)) {\n+                if (SchedTaskJobDelegate.class.isAssignableFrom(clazz) && !isAbsractClazz\n+                        && !SyncJobDelegate.class.isAssignableFrom(clazz)\n+                        && !PushJobDelegate.class.isAssignableFrom(clazz)) {\n \n-                    classNames.get(Type.TASKJOB).add(bd.getBeanClassName());\n+                    classNames.get(Type.TASKJOBDELEGATE).add(bd.getBeanClassName());\n                 }\n \n                 if (SyncActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {"},{"sha":"3e7e90ffb9dc36ed4cc6d6548ae2a5ab4edda405","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/JobInstanceLoaderImpl.java","status":"modified","additions":89,"deletions":92,"changes":181,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -19,11 +19,13 @@\n package org.apache.syncope.core.logic.init;\n \n import java.text.ParseException;\n-import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -37,17 +39,17 @@\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n-import org.apache.syncope.core.provisioning.api.job.SyncJob;\n-import org.apache.syncope.core.provisioning.api.job.TaskJob;\n-import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n import org.apache.syncope.core.logic.notification.NotificationJob;\n import org.apache.syncope.core.logic.report.ReportJob;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n-import org.apache.syncope.core.provisioning.api.job.PushJob;\n-import org.apache.syncope.core.provisioning.java.sync.PushJobImpl;\n-import org.apache.syncope.core.provisioning.java.sync.SyncJobImpl;\n+import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.provisioning.java.job.TaskJob;\n+import org.apache.syncope.core.provisioning.java.sync.PushJobDelegate;\n+import org.apache.syncope.core.provisioning.java.sync.SyncJobDelegate;\n import org.quartz.Job;\n+import org.quartz.JobDataMap;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n@@ -69,6 +71,9 @@ public class JobInstanceLoaderImpl implements JobInstanceLoader, SyncopeLoader {\n \n     private static final Logger LOG = LoggerFactory.getLogger(JobInstanceLoader.class);\n \n+    @Autowired\n+    private DomainsHolder domainsHolder;\n+\n     @Autowired\n     private SchedulerFactoryBean scheduler;\n \n@@ -81,7 +86,8 @@ public class JobInstanceLoaderImpl implements JobInstanceLoader, SyncopeLoader {\n     @Autowired\n     private ConfDAO confDAO;\n \n-    private void registerJob(final String jobName, final Job jobInstance, final String cronExpression)\n+    private void registerJob(\n+            final String jobName, final Job jobInstance, final String cronExpression, final Map<String, Object> jobMap)\n             throws SchedulerException, ParseException {\n \n         synchronized (scheduler.getScheduler()) {\n@@ -112,6 +118,7 @@ private void registerJob(final String jobName, final Job jobInstance, final Stri\n         jobDetail.setName(jobName);\n         jobDetail.setGroup(Scheduler.DEFAULT_GROUP);\n         jobDetail.setJobClass(jobInstance.getClass());\n+        jobDetail.setJobDataMap(new JobDataMap(jobMap));\n \n         // 3. Trigger\n         if (cronExpression == null) {\n@@ -127,12 +134,13 @@ private void registerJob(final String jobName, final Job jobInstance, final Stri\n         }\n     }\n \n-    private Job createSpringBean(final Class<?> jobClass) {\n-        Job jobInstance = null;\n+    @SuppressWarnings(\"unchecked\")\n+    private <T> T createSpringBean(final Class<T> jobClass) {\n+        T jobInstance = null;\n         for (int i = 0; i < 5 && jobInstance == null; i++) {\n             LOG.debug(\"{} attempt to create Spring bean for {}\", i, jobClass);\n             try {\n-                jobInstance = (Job) ApplicationContextProvider.getBeanFactory().\n+                jobInstance = (T) ApplicationContextProvider.getBeanFactory().\n                         createBean(jobClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n                 LOG.debug(\"{} attempt to create Spring bean for {} succeeded\", i, jobClass);\n             } catch (BeanCreationException e) {\n@@ -151,75 +159,43 @@ private Job createSpringBean(final Class<?> jobClass) {\n         return jobInstance;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n-    public void registerJob(final Task task, final String jobClassName, final String cronExpression)\n-            throws ClassNotFoundException, SchedulerException, ParseException {\n-\n-        Class<?> jobClass = Class.forName(jobClassName);\n-        if (SyncJob.class.equals(jobClass)) {\n-            jobClass = SyncJobImpl.class;\n-        } else if (PushJob.class.equals(jobClass)) {\n-            jobClass = PushJobImpl.class;\n-        }\n-\n-        Job jobInstance = createSpringBean(jobClass);\n-        if (jobInstance instanceof TaskJob) {\n-            ((TaskJob) jobInstance).setTaskId(task.getKey());\n-        }\n-\n-        // In case of synchronization job/task retrieve and set synchronization actions:\n-        // actions cannot be changed at runtime but connector and synchronization policies (reloaded at execution time).\n-        if (jobInstance instanceof SyncJob && task instanceof SyncTask) {\n-            final List<SyncActions> actions = new ArrayList<>();\n-            for (String className : ((SyncTask) task).getActionsClassNames()) {\n-                try {\n-                    Class<?> actionsClass = Class.forName(className);\n-\n-                    SyncActions syncActions = (SyncActions) ApplicationContextProvider.getBeanFactory().\n-                            createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-                    actions.add(syncActions);\n-                } catch (Exception e) {\n-                    LOG.info(\"Class '{}' not found\", className, e);\n-                }\n-            }\n+    public Map<String, Object> registerJob(final SchedTask task, final long interruptMaxRetries)\n+            throws SchedulerException, ParseException {\n \n-            ((SyncJob) jobInstance).setActions(actions);\n-        }\n+        TaskJob job = createSpringBean(TaskJob.class);\n+        job.setTaskKey(task.getKey());\n \n-        registerJob(JobNamer.getJobName(task), jobInstance, cronExpression);\n-    }\n+        String jobDelegateClassName = task instanceof SyncTask\n+                ? SyncJobDelegate.class.getName()\n+                : task instanceof PushTask\n+                        ? PushJobDelegate.class.getName()\n+                        : task.getJobDelegateClassName();\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public void registerTaskJob(final Long taskKey)\n-            throws ClassNotFoundException, SchedulerException, ParseException {\n+        Map<String, Object> jobMap = new HashMap<>();\n+        jobMap.put(JobInstanceLoader.DOMAIN, AuthContextUtils.getDomain());\n+        jobMap.put(TaskJob.DELEGATE_CLASS_KEY, jobDelegateClassName);\n+        jobMap.put(TaskJob.INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries);\n \n-        SchedTask task = taskDAO.find(taskKey);\n-        if (task == null) {\n-            throw new NotFoundException(\"Task \" + taskKey);\n-        } else {\n-            registerJob(task, task.getJobClassName(), task.getCronExpression());\n-        }\n+        registerJob(JobNamer.getJobName(task), job, task.getCronExpression(), jobMap);\n+        return jobMap;\n     }\n \n     @Override\n     public void registerJob(final Report report) throws SchedulerException, ParseException {\n-        Job jobInstance = createSpringBean(ReportJob.class);\n-        ((ReportJob) jobInstance).setReportKey(report.getKey());\n+        ReportJob job = createSpringBean(ReportJob.class);\n+        job.setReportKey(report.getKey());\n+\n+        Map<String, Object> jobMap = new HashMap<>();\n+        jobMap.put(JobInstanceLoader.DOMAIN, AuthContextUtils.getDomain());\n \n-        registerJob(JobNamer.getJobName(report), jobInstance, report.getCronExpression());\n+        registerJob(JobNamer.getJobName(report), job, report.getCronExpression(), jobMap);\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public void registerReportJob(final Long reportKey) throws SchedulerException, ParseException {\n-        Report report = reportDAO.find(reportKey);\n-        if (report == null) {\n-            throw new NotFoundException(\"Report \" + reportKey);\n-        } else {\n-            registerJob(report);\n-        }\n+    private void registerNotificationJob(final String cronExpression) throws SchedulerException, ParseException {\n+        NotificationJob job = createSpringBean(NotificationJob.class);\n+\n+        registerJob(\"taskNotificationJob\", job, cronExpression, Collections.<String, Object>emptyMap());\n     }\n \n     private void unregisterJob(final String jobName) {\n@@ -253,41 +229,62 @@ public Integer getPriority() {\n     @Transactional\n     @Override\n     public void load() {\n-        // 1. jobs for SchedTasks\n-        Set<SchedTask> tasks = new HashSet<>(taskDAO.<SchedTask>findAll(TaskType.SCHEDULED));\n-        tasks.addAll(taskDAO.<SyncTask>findAll(TaskType.SYNCHRONIZATION));\n-        tasks.addAll(taskDAO.<PushTask>findAll(TaskType.PUSH));\n-        for (SchedTask task : tasks) {\n+        AuthContextUtils.setFakeAuth(SyncopeConstants.MASTER_DOMAIN);\n+        String notificationJobCronExpression = StringUtils.EMPTY;\n+        long interruptMaxRetries = 1;\n+        try {\n+            CPlainAttr notificationJobCronExp =\n+                    confDAO.find(\"notificationjob.cronExpression\", NotificationJob.DEFAULT_CRON_EXP);\n+            if (!notificationJobCronExp.getValuesAsStrings().isEmpty()) {\n+                notificationJobCronExpression = notificationJobCronExp.getValuesAsStrings().get(0);\n+            }\n+\n+            interruptMaxRetries = confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue();\n+        } finally {\n+            AuthContextUtils.clearFakeAuth();\n+        }\n+\n+        for (String domain : domainsHolder.getDomains().keySet()) {\n+            AuthContextUtils.setFakeAuth(domain);\n+\n             try {\n-                registerJob(task, task.getJobClassName(), task.getCronExpression());\n-            } catch (Exception e) {\n-                LOG.error(\"While loading job instance for task \" + task.getKey(), e);\n+                // 1. jobs for SchedTasks\n+                Set<SchedTask> tasks = new HashSet<>(taskDAO.<SchedTask>findAll(TaskType.SCHEDULED));\n+                tasks.addAll(taskDAO.<SyncTask>findAll(TaskType.SYNCHRONIZATION));\n+                tasks.addAll(taskDAO.<PushTask>findAll(TaskType.PUSH));\n+                for (SchedTask task : tasks) {\n+                    try {\n+                        registerJob(task, interruptMaxRetries);\n+                    } catch (Exception e) {\n+                        LOG.error(\"While loading job instance for task \" + task.getKey(), e);\n+                    }\n+                }\n+\n+                // 2. ReportJobs\n+                for (Report report : reportDAO.findAll()) {\n+                    try {\n+                        registerJob(report);\n+                    } catch (Exception e) {\n+                        LOG.error(\"While loading job instance for report \" + report.getName(), e);\n+                    }\n+                }\n+            } finally {\n+                AuthContextUtils.clearFakeAuth();\n             }\n         }\n \n-        // 2. NotificationJob\n-        CPlainAttr notificationJobCronExp =\n-                confDAO.find(\"notificationjob.cronExpression\", NotificationJob.DEFAULT_CRON_EXP);\n-        if (StringUtils.isBlank(notificationJobCronExp.getValuesAsStrings().get(0))) {\n+        // 3. NotificationJob\n+        if (StringUtils.isBlank(notificationJobCronExpression)) {\n             LOG.debug(\"Empty value provided for NotificationJob's cron, not registering anything on Quartz\");\n         } else {\n             LOG.debug(\"NotificationJob's cron expression: {} - registering Quartz job and trigger\",\n-                    notificationJobCronExp);\n+                    notificationJobCronExpression);\n \n             try {\n-                registerJob(null, NotificationJob.class.getName(), notificationJobCronExp.getValuesAsStrings().get(0));\n+                registerNotificationJob(notificationJobCronExpression);\n             } catch (Exception e) {\n                 LOG.error(\"While loading NotificationJob instance\", e);\n             }\n         }\n-\n-        // 3. ReportJobs\n-        for (Report report : reportDAO.findAll()) {\n-            try {\n-                registerJob(report);\n-            } catch (Exception e) {\n-                LOG.error(\"While loading job instance for report \" + report.getName(), e);\n-            }\n-        }\n     }\n }"},{"sha":"e86b46ac29305b3cc0671e650856cf6de4b9029b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":62,"deletions":2,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,25 +18,39 @@\n  */\n package org.apache.syncope.core.logic.init;\n \n+import java.sql.Connection;\n+import java.sql.SQLException;\n import java.util.HashMap;\n import java.util.Map;\n+import javax.sql.DataSource;\n+import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.Appender;\n import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig;\n+import org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource;\n+import org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.common.lib.types.LoggerType;\n+import org.apache.syncope.core.misc.AuditManager;\n+import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class LoggerLoader implements SyncopeLoader {\n \n+    @Autowired\n+    private DomainsHolder domainsHolder;\n+\n     @Autowired\n     private LoggerDAO loggerDAO;\n \n@@ -51,6 +65,39 @@ public Integer getPriority() {\n     @Transactional\n     @Override\n     public void load() {\n+        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+\n+        // 1. Audit table and DataSource for each configured domain\n+        ColumnConfig[] columns = {\n+            ColumnConfig.createColumnConfig(ctx.getConfiguration(), \"EVENT_DATE\", null, null, \"true\", null, null),\n+            ColumnConfig.createColumnConfig(ctx.getConfiguration(), \"LOGGER_LEVEL\", \"%level\", null, null, null, null),\n+            ColumnConfig.createColumnConfig(ctx.getConfiguration(), \"LOGGER\", \"%logger\", null, null, null, null),\n+            ColumnConfig.createColumnConfig(ctx.getConfiguration(), \"MESSAGE\", \"%message\", null, null, null, null),\n+            ColumnConfig.createColumnConfig(ctx.getConfiguration(), \"THROWABLE\", \"%ex{full}\", null, null, null, null)\n+        };\n+        for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n+            Appender appender = ctx.getConfiguration().getAppender(\"audit_for_\" + entry.getKey());\n+            if (appender == null) {\n+                appender = JdbcAppender.createAppender(\n+                        \"audit_for_\" + entry.getKey(),\n+                        \"false\",\n+                        null,\n+                        new DataSourceConnectionSource(entry.getValue()),\n+                        \"0\",\n+                        \"SYNCOPEAUDIT\",\n+                        columns);\n+                appender.start();\n+                ctx.getConfiguration().addAppender(appender);\n+            }\n+\n+            LoggerConfig logConf = new LoggerConfig(\n+                    AuditManager.getDomainAuditLoggerName(entry.getKey()), null, false);\n+            logConf.addAppender(appender, Level.DEBUG, null);\n+            ctx.getConfiguration().addLogger(AuditManager.getDomainAuditLoggerName(entry.getKey()), logConf);\n+        }\n+        ctx.updateLoggers();\n+\n+        // 2. Aligning log4j conf with database content\n         Map<String, Logger> syncopeLoggers = new HashMap<>();\n         for (Logger syncopeLogger : loggerDAO.findAll(LoggerType.LOG)) {\n             syncopeLoggers.put(syncopeLogger.getKey(), syncopeLogger);\n@@ -60,8 +107,6 @@ public void load() {\n             syncopeLoggers.put(syncopeLogger.getKey(), syncopeLogger);\n         }\n \n-        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n-\n         /*\n          * Traverse all defined log4j loggers: if there is a matching SyncopeLogger, set log4j level accordingly,\n          * otherwise create a SyncopeLogger instance with given name and level.\n@@ -95,4 +140,19 @@ public void load() {\n \n         ctx.updateLoggers();\n     }\n+\n+    private static class DataSourceConnectionSource implements ConnectionSource {\n+\n+        private final DataSource dataSource;\n+\n+        public DataSourceConnectionSource(final DataSource dataSource) {\n+            this.dataSource = dataSource;\n+        }\n+\n+        @Override\n+        public Connection getConnection() throws SQLException {\n+            return DataSourceUtils.getConnection(dataSource);\n+        }\n+\n+    }\n }"},{"sha":"856fa13ee79cf63627a8065523a6e976b414200d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LogicInitializer.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLogicInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLogicInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLogicInitializer.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -23,6 +23,7 @@\n import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -61,6 +62,8 @@ public int compare(final SyncopeLoader o1, final SyncopeLoader o2) {\n             }\n         });\n \n+        ApplicationContextProvider.setBeanFactory(beanFactory);\n+\n         LOG.debug(\"Starting initialization...\");\n         for (SyncopeLoader loader : loaders) {\n             LOG.debug(\"Invoking {} with priority {}\", AopUtils.getTargetClass(loader).getName(), loader.getPriority());"},{"sha":"a0f21f315a61c25097c1e44282ce1626e132081e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/notification/NotificationJob.java","status":"modified","additions":15,"deletions":222,"changes":237,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,37 +18,21 @@\n  */\n package org.apache.syncope.core.logic.notification;\n \n-import java.util.Date;\n-import java.util.Properties;\n-import javax.mail.internet.MimeMessage;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.lib.types.AuditElements.Result;\n-import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.lib.types.TraceLevel;\n-import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.misc.AuditManager;\n-import org.apache.syncope.core.misc.ExceptionUtils2;\n-import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.Job;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.mail.javamail.JavaMailSender;\n-import org.springframework.mail.javamail.JavaMailSenderImpl;\n-import org.springframework.mail.javamail.MimeMessageHelper;\n import org.springframework.stereotype.Component;\n \n /**\n  * Periodically checks for notification to send.\n  *\n- * @see NotificationTask\n+ * @see org.apache.syncope.core.persistence.api.entity.task.NotificationTask\n  */\n @Component\n @DisallowConcurrentExecution\n@@ -63,221 +47,30 @@ public enum Status {\n \n     public static final String DEFAULT_CRON_EXP = \"0 0/5 * * * ?\";\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(NotificationJob.class);\n \n     @Autowired\n-    private AuditManager auditManager;\n+    private DomainsHolder domainsHolder;\n \n     @Autowired\n-    private NotificationManager notificationManager;\n-\n-    @Autowired\n-    private JavaMailSender mailSender;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    /**\n-     * Task DAO.\n-     */\n-    @Autowired\n-    private TaskDAO taskDAO;\n-\n-    private long maxRetries;\n-\n-    private void init() {\n-        maxRetries = notificationManager.getMaxRetries();\n-\n-        if (mailSender instanceof JavaMailSenderImpl\n-                && StringUtils.isNotBlank(((JavaMailSenderImpl) mailSender).getUsername())) {\n-\n-            Properties javaMailProperties = ((JavaMailSenderImpl) mailSender).getJavaMailProperties();\n-            javaMailProperties.setProperty(\"mail.smtp.auth\", \"true\");\n-            ((JavaMailSenderImpl) mailSender).setJavaMailProperties(javaMailProperties);\n-        }\n-    }\n-\n-    public TaskExec executeSingle(final NotificationTask task) {\n-        init();\n-\n-        TaskExec execution = entityFactory.newEntity(TaskExec.class);\n-        execution.setTask(task);\n-        execution.setStartDate(new Date());\n-\n-        boolean retryPossible = true;\n-\n-        if (StringUtils.isBlank(task.getSubject()) || task.getRecipients().isEmpty()\n-                || StringUtils.isBlank(task.getHtmlBody()) || StringUtils.isBlank(task.getTextBody())) {\n-\n-            String message = \"Could not fetch all required information for sending e-mails:\\n\"\n-                    + task.getRecipients() + \"\\n\"\n-                    + task.getSender() + \"\\n\"\n-                    + task.getSubject() + \"\\n\"\n-                    + task.getHtmlBody() + \"\\n\"\n-                    + task.getTextBody();\n-            LOG.error(message);\n-\n-            execution.setStatus(Status.NOT_SENT.name());\n-            retryPossible = false;\n-\n-            if (task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal()) {\n-                execution.setMessage(message);\n-            }\n-        } else {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"About to send e-mails:\\n\"\n-                        + task.getRecipients() + \"\\n\"\n-                        + task.getSender() + \"\\n\"\n-                        + task.getSubject() + \"\\n\"\n-                        + task.getHtmlBody() + \"\\n\"\n-                        + task.getTextBody() + \"\\n\");\n-            }\n-\n-            for (String to : task.getRecipients()) {\n-                try {\n-                    MimeMessage message = mailSender.createMimeMessage();\n-                    MimeMessageHelper helper = new MimeMessageHelper(message, true);\n-                    helper.setTo(to);\n-                    helper.setFrom(task.getSender());\n-                    helper.setSubject(task.getSubject());\n-                    helper.setText(task.getTextBody(), task.getHtmlBody());\n-\n-                    mailSender.send(message);\n-\n-                    execution.setStatus(Status.SENT.name());\n-\n-                    StringBuilder report = new StringBuilder();\n-                    switch (task.getTraceLevel()) {\n-                        case ALL:\n-                            report.append(\"FROM: \").append(task.getSender()).append('\\n').\n-                                    append(\"TO: \").append(to).append('\\n').\n-                                    append(\"SUBJECT: \").append(task.getSubject()).append('\\n').append('\\n').\n-                                    append(task.getTextBody()).append('\\n').append('\\n').\n-                                    append(task.getHtmlBody()).append('\\n');\n-                            break;\n-\n-                        case SUMMARY:\n-                            report.append(\"E-mail sent to \").append(to).append('\\n');\n-                            break;\n-\n-                        case FAILURES:\n-                        case NONE:\n-                        default:\n-                    }\n-                    if (report.length() > 0) {\n-                        execution.setMessage(report.toString());\n-                    }\n-\n-                    auditManager.audit(\n-                            AuditElements.EventCategoryType.TASK,\n-                            \"notification\",\n-                            null,\n-                            \"send\",\n-                            Result.SUCCESS,\n-                            null,\n-                            null,\n-                            task,\n-                            \"Successfully sent notification to \" + to);\n-                } catch (Exception e) {\n-                    LOG.error(\"Could not send e-mail\", e);\n-\n-                    execution.setStatus(Status.NOT_SENT.name());\n-                    if (task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal()) {\n-                        execution.setMessage(ExceptionUtils2.getFullStackTrace(e));\n-                    }\n-\n-                    auditManager.audit(\n-                            AuditElements.EventCategoryType.TASK,\n-                            \"notification\",\n-                            null,\n-                            \"send\",\n-                            Result.FAILURE,\n-                            null,\n-                            null,\n-                            task,\n-                            \"Could not send notification to \" + to, e);\n-                }\n-\n-                execution.setEndDate(new Date());\n-            }\n-        }\n-\n-        if (hasToBeRegistered(execution)) {\n-            execution = notificationManager.storeExec(execution);\n-            if (retryPossible && (Status.valueOf(execution.getStatus()) == Status.NOT_SENT)) {\n-                handleRetries(execution);\n-            }\n-        } else {\n-            notificationManager.setTaskExecuted(execution.getTask().getKey(), true);\n-        }\n-\n-        return execution;\n-    }\n+    private NotificationJobDelegate delegate;\n \n     @Override\n-    public void execute(final JobExecutionContext context)\n-            throws JobExecutionException {\n-\n+    public void execute(final JobExecutionContext context) throws JobExecutionException {\n         LOG.debug(\"Waking up...\");\n \n-        for (NotificationTask task : taskDAO.<NotificationTask>findToExec(TaskType.NOTIFICATION)) {\n-            LOG.debug(\"Found notification task {} to be executed: starting...\", task);\n-            executeSingle(task);\n-            LOG.debug(\"Notification task {} executed\", task);\n+        for (String domain : domainsHolder.getDomains().keySet()) {\n+            AuthContextUtils.setFakeAuth(domain);\n+            try {\n+                delegate.execute();\n+            } catch (Exception e) {\n+                throw new JobExecutionException(e);\n+            } finally {\n+                AuthContextUtils.clearFakeAuth();\n+            }\n         }\n \n         LOG.debug(\"Sleeping again...\");\n     }\n \n-    private boolean hasToBeRegistered(final TaskExec execution) {\n-        NotificationTask task = (NotificationTask) execution.getTask();\n-\n-        // True if either failed and failures have to be registered, or if ALL\n-        // has to be registered.\n-        return (Status.valueOf(execution.getStatus()) == Status.NOT_SENT\n-                && task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n-                || task.getTraceLevel() == TraceLevel.ALL;\n-    }\n-\n-    private void handleRetries(final TaskExec execution) {\n-        if (maxRetries <= 0) {\n-            return;\n-        }\n-\n-        long failedExecutionsCount = notificationManager.countExecutionsWithStatus(\n-                execution.getTask().getKey(), Status.NOT_SENT.name());\n-\n-        if (failedExecutionsCount <= maxRetries) {\n-            LOG.debug(\"Execution of notification task {} will be retried [{}/{}]\",\n-                    execution.getTask(), failedExecutionsCount, maxRetries);\n-            notificationManager.setTaskExecuted(execution.getTask().getKey(), false);\n-\n-            auditManager.audit(\n-                    AuditElements.EventCategoryType.TASK,\n-                    \"notification\",\n-                    null,\n-                    \"retry\",\n-                    Result.SUCCESS,\n-                    null,\n-                    null,\n-                    execution,\n-                    \"Notification task \" + execution.getTask().getKey() + \" will be retried\");\n-        } else {\n-            LOG.error(\"Maximum number of retries reached for task {} - giving up\", execution.getTask());\n-\n-            auditManager.audit(\n-                    AuditElements.EventCategoryType.TASK,\n-                    \"notification\",\n-                    null,\n-                    \"retry\",\n-                    Result.FAILURE,\n-                    null,\n-                    null,\n-                    execution,\n-                    \"Giving up retries on notification task \" + execution.getTask().getKey());\n-        }\n-    }\n }"},{"sha":"aaebe77786fd88c5763bdd09aa95e97dc529adbb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/notification/NotificationJobDelegate.java","status":"added","additions":258,"deletions":0,"changes":258,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJobDelegate.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.notification;\n+\n+import java.util.Date;\n+import java.util.Properties;\n+import javax.mail.internet.MimeMessage;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.core.misc.AuditManager;\n+import org.apache.syncope.core.misc.ExceptionUtils2;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mail.javamail.JavaMailSender;\n+import org.springframework.mail.javamail.JavaMailSenderImpl;\n+import org.springframework.mail.javamail.MimeMessageHelper;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class NotificationJobDelegate {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(NotificationJobDelegate.class);\n+\n+    /**\n+     * Task DAO.\n+     */\n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n+    @Autowired\n+    private JavaMailSender mailSender;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private AuditManager auditManager;\n+\n+    @Autowired\n+    private NotificationManager notificationManager;\n+\n+    private long maxRetries;\n+\n+    private void init() {\n+        maxRetries = notificationManager.getMaxRetries();\n+\n+        if (mailSender instanceof JavaMailSenderImpl\n+                && StringUtils.isNotBlank(((JavaMailSenderImpl) mailSender).getUsername())) {\n+\n+            Properties javaMailProperties = ((JavaMailSenderImpl) mailSender).getJavaMailProperties();\n+            javaMailProperties.setProperty(\"mail.smtp.auth\", \"true\");\n+            ((JavaMailSenderImpl) mailSender).setJavaMailProperties(javaMailProperties);\n+        }\n+    }\n+\n+    @Transactional\n+    public TaskExec executeSingle(final NotificationTask task) {\n+        init();\n+\n+        TaskExec execution = entityFactory.newEntity(TaskExec.class);\n+        execution.setTask(task);\n+        execution.setStartDate(new Date());\n+\n+        boolean retryPossible = true;\n+\n+        if (StringUtils.isBlank(task.getSubject()) || task.getRecipients().isEmpty()\n+                || StringUtils.isBlank(task.getHtmlBody()) || StringUtils.isBlank(task.getTextBody())) {\n+\n+            String message = \"Could not fetch all required information for sending e-mails:\\n\"\n+                    + task.getRecipients() + \"\\n\"\n+                    + task.getSender() + \"\\n\"\n+                    + task.getSubject() + \"\\n\"\n+                    + task.getHtmlBody() + \"\\n\"\n+                    + task.getTextBody();\n+            LOG.error(message);\n+\n+            execution.setStatus(NotificationJob.Status.NOT_SENT.name());\n+            retryPossible = false;\n+\n+            if (task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal()) {\n+                execution.setMessage(message);\n+            }\n+        } else {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"About to send e-mails:\\n\"\n+                        + task.getRecipients() + \"\\n\"\n+                        + task.getSender() + \"\\n\"\n+                        + task.getSubject() + \"\\n\"\n+                        + task.getHtmlBody() + \"\\n\"\n+                        + task.getTextBody() + \"\\n\");\n+            }\n+\n+            for (String to : task.getRecipients()) {\n+                try {\n+                    MimeMessage message = mailSender.createMimeMessage();\n+                    MimeMessageHelper helper = new MimeMessageHelper(message, true);\n+                    helper.setTo(to);\n+                    helper.setFrom(task.getSender());\n+                    helper.setSubject(task.getSubject());\n+                    helper.setText(task.getTextBody(), task.getHtmlBody());\n+\n+                    mailSender.send(message);\n+\n+                    execution.setStatus(NotificationJob.Status.SENT.name());\n+\n+                    StringBuilder report = new StringBuilder();\n+                    switch (task.getTraceLevel()) {\n+                        case ALL:\n+                            report.append(\"FROM: \").append(task.getSender()).append('\\n').\n+                                    append(\"TO: \").append(to).append('\\n').\n+                                    append(\"SUBJECT: \").append(task.getSubject()).append('\\n').append('\\n').\n+                                    append(task.getTextBody()).append('\\n').append('\\n').\n+                                    append(task.getHtmlBody()).append('\\n');\n+                            break;\n+\n+                        case SUMMARY:\n+                            report.append(\"E-mail sent to \").append(to).append('\\n');\n+                            break;\n+\n+                        case FAILURES:\n+                        case NONE:\n+                        default:\n+                    }\n+                    if (report.length() > 0) {\n+                        execution.setMessage(report.toString());\n+                    }\n+\n+                    auditManager.audit(\n+                            AuditElements.EventCategoryType.TASK,\n+                            \"notification\",\n+                            null,\n+                            \"send\",\n+                            AuditElements.Result.SUCCESS,\n+                            null,\n+                            null,\n+                            task,\n+                            \"Successfully sent notification to \" + to);\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not send e-mail\", e);\n+\n+                    execution.setStatus(NotificationJob.Status.NOT_SENT.name());\n+                    if (task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal()) {\n+                        execution.setMessage(ExceptionUtils2.getFullStackTrace(e));\n+                    }\n+\n+                    auditManager.audit(\n+                            AuditElements.EventCategoryType.TASK,\n+                            \"notification\",\n+                            null,\n+                            \"send\",\n+                            AuditElements.Result.FAILURE,\n+                            null,\n+                            null,\n+                            task,\n+                            \"Could not send notification to \" + to, e);\n+                }\n+\n+                execution.setEndDate(new Date());\n+            }\n+        }\n+\n+        if (hasToBeRegistered(execution)) {\n+            execution = notificationManager.storeExec(execution);\n+            if (retryPossible && (NotificationJob.Status.valueOf(execution.getStatus())\n+                    == NotificationJob.Status.NOT_SENT)) {\n+                handleRetries(execution);\n+            }\n+        } else {\n+            notificationManager.setTaskExecuted(execution.getTask().getKey(), true);\n+        }\n+\n+        return execution;\n+    }\n+\n+    @Transactional\n+    public void execute() throws JobExecutionException {\n+        for (NotificationTask task : taskDAO.<NotificationTask>findToExec(TaskType.NOTIFICATION)) {\n+            LOG.debug(\"Found notification task {} to be executed: starting...\", task);\n+            executeSingle(task);\n+            LOG.debug(\"Notification task {} executed\", task);\n+        }\n+    }\n+\n+    private boolean hasToBeRegistered(final TaskExec execution) {\n+        NotificationTask task = (NotificationTask) execution.getTask();\n+\n+        // True if either failed and failures have to be registered, or if ALL\n+        // has to be registered.\n+        return (NotificationJob.Status.valueOf(execution.getStatus()) == NotificationJob.Status.NOT_SENT\n+                && task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n+                || task.getTraceLevel() == TraceLevel.ALL;\n+    }\n+\n+    private void handleRetries(final TaskExec execution) {\n+        if (maxRetries <= 0) {\n+            return;\n+        }\n+\n+        long failedExecutionsCount = notificationManager.countExecutionsWithStatus(\n+                execution.getTask().getKey(), NotificationJob.Status.NOT_SENT.name());\n+\n+        if (failedExecutionsCount <= maxRetries) {\n+            LOG.debug(\"Execution of notification task {} will be retried [{}/{}]\",\n+                    execution.getTask(), failedExecutionsCount, maxRetries);\n+            notificationManager.setTaskExecuted(execution.getTask().getKey(), false);\n+\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.TASK,\n+                    \"notification\",\n+                    null,\n+                    \"retry\",\n+                    AuditElements.Result.SUCCESS,\n+                    null,\n+                    null,\n+                    execution,\n+                    \"Notification task \" + execution.getTask().getKey() + \" will be retried\");\n+        } else {\n+            LOG.error(\"Maximum number of retries reached for task {} - giving up\", execution.getTask());\n+\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.TASK,\n+                    \"notification\",\n+                    null,\n+                    \"retry\",\n+                    AuditElements.Result.FAILURE,\n+                    null,\n+                    null,\n+                    execution,\n+                    \"Giving up retries on notification task \" + execution.getTask().getKey());\n+        }\n+    }\n+}"},{"sha":"8e5af91f28bd5ba9f658a70650123f9ffb01571a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportJob.java","status":"modified","additions":9,"deletions":149,"changes":158,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,74 +18,28 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.util.Date;\n-import java.util.zip.Deflater;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipOutputStream;\n-import javax.xml.transform.OutputKeys;\n-import javax.xml.transform.Transformer;\n-import javax.xml.transform.sax.SAXTransformerFactory;\n-import javax.xml.transform.sax.TransformerHandler;\n-import javax.xml.transform.stream.StreamResult;\n-import org.apache.commons.io.IOUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.common.lib.types.ReportExecStatus;\n-import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n-import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.Report;\n-import org.apache.syncope.core.persistence.api.entity.ReportExec;\n-import org.apache.syncope.core.logic.ReportLogic;\n-import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.misc.ExceptionUtils2;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.Job;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n-import org.xml.sax.helpers.AttributesImpl;\n \n /**\n  * Quartz job for executing a given report.\n  */\n-@SuppressWarnings(\"unchecked\")\n @DisallowConcurrentExecution\n public class ReportJob implements Job {\n \n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(ReportJob.class);\n-\n-    /**\n-     * Report DAO.\n-     */\n-    @Autowired\n-    private ReportDAO reportDAO;\n-\n-    /**\n-     * Report execution DAO.\n-     */\n-    @Autowired\n-    private ReportExecDAO reportExecDAO;\n-\n-    @Autowired\n-    private ReportLogic dataBinder;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n     /**\n      * Key, set by the caller, for identifying the report to be executed.\n      */\n     private Long reportKey;\n \n+    @Autowired\n+    private ReportJobDelegate delegate;\n+\n     /**\n      * Report id setter.\n      *\n@@ -95,109 +49,15 @@ public void setReportKey(final Long reportKey) {\n         this.reportKey = reportKey;\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        Report report = reportDAO.find(reportKey);\n-        if (report == null) {\n-            throw new JobExecutionException(\"Report \" + reportKey + \" not found\");\n-        }\n-\n-        // 1. create execution\n-        ReportExec execution = entityFactory.newEntity(ReportExec.class);\n-        execution.setStatus(ReportExecStatus.STARTED);\n-        execution.setStartDate(new Date());\n-        execution.setReport(report);\n-        execution = reportExecDAO.save(execution);\n-\n-        report.addExec(execution);\n-        report = reportDAO.save(report);\n-\n-        // 2. define a SAX handler for generating result as XML\n-        TransformerHandler handler;\n-\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        ZipOutputStream zos = new ZipOutputStream(baos);\n-        zos.setLevel(Deflater.BEST_COMPRESSION);\n-        try {\n-            SAXTransformerFactory tFactory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n-            handler = tFactory.newTransformerHandler();\n-            Transformer serializer = handler.getTransformer();\n-            serializer.setOutputProperty(OutputKeys.ENCODING, SyncopeConstants.DEFAULT_ENCODING);\n-            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n-\n-            // a single ZipEntry in the ZipOutputStream\n-            zos.putNextEntry(new ZipEntry(report.getName()));\n-\n-            // streaming SAX handler in a compressed byte array stream\n-            handler.setResult(new StreamResult(zos));\n-        } catch (Exception e) {\n-            throw new JobExecutionException(\"While configuring for SAX generation\", e, true);\n-        }\n-\n-        execution.setStatus(ReportExecStatus.RUNNING);\n-        execution = reportExecDAO.save(execution);\n-\n-        // 3. actual report execution\n-        StringBuilder reportExecutionMessage = new StringBuilder();\n+        AuthContextUtils.setFakeAuth(context.getMergedJobDataMap().getString(JobInstanceLoader.DOMAIN));\n         try {\n-            // report header\n-            handler.startDocument();\n-            AttributesImpl atts = new AttributesImpl();\n-            atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_NAME, ReportXMLConst.XSD_STRING, report.getName());\n-            handler.startElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORT, atts);\n-\n-            // iterate over reportlet instances defined for this report\n-            for (ReportletConf reportletConf : report.getReportletConfs()) {\n-                Class<Reportlet> reportletClass =\n-                        dataBinder.findReportletClassHavingConfClass(reportletConf.getClass());\n-                if (reportletClass != null) {\n-                    Reportlet<ReportletConf> autowired =\n-                            (Reportlet<ReportletConf>) ApplicationContextProvider.getBeanFactory().\n-                            createBean(reportletClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                    autowired.setConf(reportletConf);\n-\n-                    // invoke reportlet\n-                    try {\n-                        autowired.extract(handler);\n-                    } catch (Exception e) {\n-                        execution.setStatus(ReportExecStatus.FAILURE);\n-\n-                        Throwable t = e instanceof ReportException\n-                                ? e.getCause()\n-                                : e;\n-                        reportExecutionMessage.\n-                                append(ExceptionUtils2.getFullStackTrace(t)).\n-                                append(\"\\n==================\\n\");\n-                    }\n-                }\n-            }\n-\n-            // report footer\n-            handler.endElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORT);\n-            handler.endDocument();\n-\n-            if (!ReportExecStatus.FAILURE.name().equals(execution.getStatus())) {\n-                execution.setStatus(ReportExecStatus.SUCCESS);\n-            }\n+            delegate.execute(reportKey);\n         } catch (Exception e) {\n-            execution.setStatus(ReportExecStatus.FAILURE);\n-            reportExecutionMessage.append(ExceptionUtils2.getFullStackTrace(e));\n-\n-            throw new JobExecutionException(e, true);\n+            throw new JobExecutionException(e);\n         } finally {\n-            try {\n-                zos.closeEntry();\n-                IOUtils.closeQuietly(zos);\n-                IOUtils.closeQuietly(baos);\n-            } catch (IOException e) {\n-                LOG.error(\"While closing StreamResult's backend\", e);\n-            }\n-\n-            execution.setExecResult(baos.toByteArray());\n-            execution.setMessage(reportExecutionMessage.toString());\n-            execution.setEndDate(new Date());\n-            reportExecDAO.save(execution);\n+            AuthContextUtils.clearFakeAuth();\n         }\n     }\n }"},{"sha":"9920c1f596bbc3f49742d368ed20f1f5880c1786","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportJobDelegate.java","status":"added","additions":181,"deletions":0,"changes":181,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.report;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.zip.Deflater;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.sax.SAXTransformerFactory;\n+import javax.xml.transform.sax.TransformerHandler;\n+import javax.xml.transform.stream.StreamResult;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.types.ReportExecStatus;\n+import org.apache.syncope.core.logic.ReportLogic;\n+import org.apache.syncope.core.misc.ExceptionUtils2;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Report;\n+import org.apache.syncope.core.persistence.api.entity.ReportExec;\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.xml.sax.helpers.AttributesImpl;\n+\n+@Component\n+public class ReportJobDelegate {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ReportJobDelegate.class);\n+\n+    /**\n+     * Report DAO.\n+     */\n+    @Autowired\n+    private ReportDAO reportDAO;\n+\n+    /**\n+     * Report execution DAO.\n+     */\n+    @Autowired\n+    private ReportExecDAO reportExecDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private ReportLogic dataBinder;\n+\n+    @Transactional\n+    public void execute(final Long reportKey) throws JobExecutionException {\n+        Report report = reportDAO.find(reportKey);\n+        if (report == null) {\n+            throw new JobExecutionException(\"Report \" + reportKey + \" not found\");\n+        }\n+\n+        // 1. create execution\n+        ReportExec execution = entityFactory.newEntity(ReportExec.class);\n+        execution.setStatus(ReportExecStatus.STARTED);\n+        execution.setStartDate(new Date());\n+        execution.setReport(report);\n+        execution = reportExecDAO.save(execution);\n+\n+        report.addExec(execution);\n+        report = reportDAO.save(report);\n+\n+        // 2. define a SAX handler for generating result as XML\n+        TransformerHandler handler;\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ZipOutputStream zos = new ZipOutputStream(baos);\n+        zos.setLevel(Deflater.BEST_COMPRESSION);\n+        try {\n+            SAXTransformerFactory tFactory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n+            handler = tFactory.newTransformerHandler();\n+            Transformer serializer = handler.getTransformer();\n+            serializer.setOutputProperty(OutputKeys.ENCODING, SyncopeConstants.DEFAULT_ENCODING);\n+            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+\n+            // a single ZipEntry in the ZipOutputStream\n+            zos.putNextEntry(new ZipEntry(report.getName()));\n+\n+            // streaming SAX handler in a compressed byte array stream\n+            handler.setResult(new StreamResult(zos));\n+        } catch (Exception e) {\n+            throw new JobExecutionException(\"While configuring for SAX generation\", e, true);\n+        }\n+\n+        execution.setStatus(ReportExecStatus.RUNNING);\n+        execution = reportExecDAO.save(execution);\n+\n+        // 3. actual report execution\n+        StringBuilder reportExecutionMessage = new StringBuilder();\n+        try {\n+            // report header\n+            handler.startDocument();\n+            AttributesImpl atts = new AttributesImpl();\n+            atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_NAME, ReportXMLConst.XSD_STRING, report.getName());\n+            handler.startElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORT, atts);\n+\n+            // iterate over reportlet instances defined for this report\n+            for (ReportletConf reportletConf : report.getReportletConfs()) {\n+                Class<Reportlet> reportletClass =\n+                        dataBinder.findReportletClassHavingConfClass(reportletConf.getClass());\n+                if (reportletClass != null) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Reportlet<ReportletConf> autowired =\n+                            (Reportlet<ReportletConf>) ApplicationContextProvider.getBeanFactory().\n+                            createBean(reportletClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                    autowired.setConf(reportletConf);\n+\n+                    // invoke reportlet\n+                    try {\n+                        autowired.extract(handler);\n+                    } catch (Exception e) {\n+                        execution.setStatus(ReportExecStatus.FAILURE);\n+\n+                        Throwable t = e instanceof ReportException\n+                                ? e.getCause()\n+                                : e;\n+                        reportExecutionMessage.\n+                                append(ExceptionUtils2.getFullStackTrace(t)).\n+                                append(\"\\n==================\\n\");\n+                    }\n+                }\n+            }\n+\n+            // report footer\n+            handler.endElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORT);\n+            handler.endDocument();\n+\n+            if (!ReportExecStatus.FAILURE.name().equals(execution.getStatus())) {\n+                execution.setStatus(ReportExecStatus.SUCCESS);\n+            }\n+        } catch (Exception e) {\n+            execution.setStatus(ReportExecStatus.FAILURE);\n+            reportExecutionMessage.append(ExceptionUtils2.getFullStackTrace(e));\n+\n+            throw new JobExecutionException(e, true);\n+        } finally {\n+            try {\n+                zos.closeEntry();\n+                IOUtils.closeQuietly(zos);\n+                IOUtils.closeQuietly(baos);\n+            } catch (IOException e) {\n+                LOG.error(\"While closing StreamResult's backend\", e);\n+            }\n+\n+            execution.setExecResult(baos.toByteArray());\n+            execution.setMessage(reportExecutionMessage.toString());\n+            execution.setEndDate(new Date());\n+            reportExecDAO.save(execution);\n+        }\n+    }\n+}"},{"sha":"d4b0fa4d239357fbd9886e5bee78aa3fc02dbfe5","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/AbstractTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -23,7 +23,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.test.context.transaction.TransactionConfiguration;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\n@@ -33,7 +33,7 @@\n     \"classpath:persistenceTest.xml\",\n     \"classpath:logicTest.xml\"\n })\n-@Transactional\n+@TransactionConfiguration(transactionManager = \"MasterTransactionManager\")\n public abstract class AbstractTest {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractTest.class);"},{"sha":"770bac900d851fcc71904fd4ad7ea54edff4c8ee","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/MappingTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMappingTest.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -31,7 +31,9 @@\n import org.identityconnectors.framework.common.objects.Name;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n+@Transactional\n public class MappingTest extends AbstractTest {\n \n     @Autowired"},{"sha":"6c208a2928022786ab9d5a1a717a1f3da74a675a","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/NotificationTest.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -79,7 +79,9 @@\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.transaction.annotation.Transactional;\n \n+@Transactional\n public class NotificationTest extends AbstractTest {\n \n     private static final String SMTP_HOST = \"localhost\";\n@@ -164,7 +166,7 @@ private static AttrTO attributeTO(final String schema, final String value) {\n     }\n \n     private static UserTO getSampleTO(final String email) {\n-        String uid = email;\n+        String uid = UUID.randomUUID().toString().substring(0, 8) + email;\n         UserTO userTO = new UserTO();\n         userTO.setPassword(\"password123\");\n         userTO.setUsername(uid);\n@@ -175,7 +177,7 @@ private static UserTO getSampleTO(final String email) {\n         userTO.getPlainAttrs().add(attributeTO(\"surname\", \"surname\"));\n         userTO.getPlainAttrs().add(attributeTO(\"type\", \"a type\"));\n         userTO.getPlainAttrs().add(attributeTO(\"userId\", uid));\n-        userTO.getPlainAttrs().add(attributeTO(\"email\", uid));\n+        userTO.getPlainAttrs().add(attributeTO(\"email\", email));\n         userTO.getPlainAttrs().add(attributeTO(\"loginDate\", new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())));\n         userTO.getDerAttrs().add(attributeTO(\"cn\", null));\n         userTO.getVirAttrs().add(attributeTO(\"virtualdata\", \"virtualvalue\"));"},{"sha":"2dca9188728d7069dbf4063fcd351a1eaedd22a8","filename":"core/logic/src/test/resources/logicTest.xml","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -26,6 +26,7 @@ under the License.\n     <property name=\"locations\">\n       <list>\n         <value>classpath:persistence.properties</value>\n+        <value>classpath:domains/*.properties</value>\n         <value>classpath:security.properties</value>\n         <value>classpath:connid.properties</value>\n         <value>classpath:mail.properties</value>\n@@ -37,10 +38,5 @@ under the License.\n     <property name=\"ignoreResourceNotFound\" value=\"true\"/>\n     <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n   </bean>\n-  \n-  <bean id=\"contentXML\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n-    <property name=\"primary\" value=\"file:${conf.directory}/content.xml\"/>\n-    <property name=\"fallback\" value=\"classpath:content.xml\"/>\n-  </bean>\n \n </beans>"},{"sha":"d3708958d897192c71b17566dccf633700415a9f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/AuditManager.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FAuditManager.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -23,13 +23,18 @@\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class AuditManager {\n@@ -39,6 +44,11 @@ public class AuditManager {\n     @Autowired\n     private LoggerDAO loggerDAO;\n \n+    public static String getDomainAuditLoggerName(final String domain) {\n+        return LoggerType.AUDIT.getPrefix() + \".\" + domain;\n+    }\n+\n+    @Transactional(readOnly = true)\n     public void audit(\n             final AuditElements.EventCategoryType type,\n             final String category,\n@@ -88,13 +98,22 @@ public void audit(\n             if (syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG) {\n                 StringBuilder auditMessage = new StringBuilder();\n \n-                final SecurityContext ctx = SecurityContextHolder.getContext();\n+                SecurityContext ctx = SecurityContextHolder.getContext();\n                 if (ctx != null && ctx.getAuthentication() != null) {\n                     auditMessage.append('[').append(ctx.getAuthentication().getName()).append(\"] \");\n                 }\n                 auditMessage.append(message);\n \n-                final Logger logger = LoggerFactory.getLogger(auditLoggerName.toLoggerName());\n+                String domain = AuthContextUtils.getDomain();\n+                if (input != null && input.length > 0 && input[0] instanceof UsernamePasswordAuthenticationToken) {\n+                    UsernamePasswordAuthenticationToken token =\n+                            UsernamePasswordAuthenticationToken.class.cast(input[0]);\n+                    if (token.getDetails() instanceof SyncopeAuthenticationDetails) {\n+                        domain = SyncopeAuthenticationDetails.class.cast(token.getDetails()).getDomain();\n+                    }\n+                }\n+\n+                Logger logger = LoggerFactory.getLogger(getDomainAuditLoggerName(domain));\n                 if (throwable == null) {\n                     logger.debug(auditMessage.toString());\n                 } else {"},{"sha":"95a16b135a5cde02069b6f8288fd5cd673db11d3","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -73,7 +73,7 @@\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n \n public final class MappingUtils {\n \n@@ -141,9 +141,9 @@ public static Pair<String, Set<Attribute>> prepareAttrs(\n         LOG.debug(\"Preparing resource attributes for {} with provision {} for attributes {}\",\n                 any, provision, any.getPlainAttrs());\n \n-        ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-        VirAttrCache virAttrCache = context.getBean(VirAttrCache.class);\n-        PasswordGenerator passwordGenerator = context.getBean(PasswordGenerator.class);\n+        DefaultListableBeanFactory beanFactory = ApplicationContextProvider.getBeanFactory();\n+        VirAttrCache virAttrCache = beanFactory.getBean(VirAttrCache.class);\n+        PasswordGenerator passwordGenerator = beanFactory.getBean(PasswordGenerator.class);\n \n         Set<Attribute> attributes = new HashSet<>();\n         String connObjectKey = null;\n@@ -227,9 +227,9 @@ private static Pair<String, Attribute> prepareAttr(\n \n         List<Any<?, ?, ?>> anys = new ArrayList<>();\n \n-        ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-        AnyUtilsFactory anyUtilsFactory = context.getBean(AnyUtilsFactory.class);\n-        VirAttrHandler virAttrHandler = context.getBean(VirAttrHandler.class);\n+        DefaultListableBeanFactory beanFactory = ApplicationContextProvider.getBeanFactory();\n+        AnyUtilsFactory anyUtilsFactory = beanFactory.getBean(AnyUtilsFactory.class);\n+        VirAttrHandler virAttrHandler = beanFactory.getBean(VirAttrHandler.class);\n \n         switch (mapItem.getIntMappingType().getAnyTypeKind()) {\n             case USER:\n@@ -240,7 +240,7 @@ private static Pair<String, Attribute> prepareAttr(\n \n             case GROUP:\n                 if (any instanceof User) {\n-                    UserDAO userDAO = context.getBean(UserDAO.class);\n+                    UserDAO userDAO = beanFactory.getBean(UserDAO.class);\n                     for (Group group : userDAO.findAllGroups((User) any)) {\n                         virAttrHandler.retrieveVirAttrValues(group);\n                         anys.add(group);\n@@ -271,15 +271,15 @@ private static Pair<String, Attribute> prepareAttr(\n             case UserPlainSchema:\n             case GroupPlainSchema:\n             case AnyObjectPlainSchema:\n-                final PlainSchemaDAO plainSchemaDAO = context.getBean(PlainSchemaDAO.class);\n+                PlainSchemaDAO plainSchemaDAO = beanFactory.getBean(PlainSchemaDAO.class);\n                 schema = plainSchemaDAO.find(mapItem.getIntAttrName());\n                 schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n                 break;\n \n             case UserVirtualSchema:\n             case GroupVirtualSchema:\n             case AnyObjectVirtualSchema:\n-                VirSchemaDAO virSchemaDAO = context.getBean(VirSchemaDAO.class);\n+                VirSchemaDAO virSchemaDAO = beanFactory.getBean(VirSchemaDAO.class);\n                 VirSchema virSchema = virSchemaDAO.find(mapItem.getIntAttrName());\n                 readOnlyVirSchema = (virSchema != null && virSchema.isReadonly());\n                 schemaType = AttrSchemaType.String;\n@@ -434,9 +434,9 @@ public static List<PlainAttrValue> getIntValues(final Provision provision,\n         LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", anys, mappingItem.getIntMappingType());\n \n         EntityFactory entityFactory =\n-                ApplicationContextProvider.getApplicationContext().getBean(EntityFactory.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(EntityFactory.class);\n         AnyUtilsFactory anyUtilsFactory =\n-                ApplicationContextProvider.getApplicationContext().getBean(AnyUtilsFactory.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(AnyUtilsFactory.class);\n         List<PlainAttrValue> values = new ArrayList<>();\n         PlainAttrValue attrValue;\n         switch (mappingItem.getIntMappingType()) {\n@@ -551,7 +551,7 @@ public static List<PlainAttrValue> getIntValues(final Provision provision,\n                 break;\n \n             case GroupOwnerSchema:\n-                AnyTypeDAO anyTypeDAO = ApplicationContextProvider.getApplicationContext().getBean(AnyTypeDAO.class);\n+                AnyTypeDAO anyTypeDAO = ApplicationContextProvider.getBeanFactory().getBean(AnyTypeDAO.class);\n                 Mapping uMapping = provision.getAnyType().equals(anyTypeDAO.findUser())\n                         ? null\n                         : provision.getMapping();"},{"sha":"13ddc84bd1ffd68c48d171bd4bb931ad6c91208a","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/AccountPolicyEnforcer.java","status":"modified","additions":3,"deletions":12,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -22,20 +22,15 @@\n import org.apache.syncope.common.lib.types.AccountPolicySpec;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.UserSuspender;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class AccountPolicyEnforcer implements PolicyEnforcer<AccountPolicySpec, User> {\n \n     private static final Pattern DEFAULT_PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n \n-    @Autowired(required = false)\n-    private UserSuspender userSuspender;\n-\n     @Override\n-    public void enforce(final AccountPolicySpec policy, final PolicyType type, final User user) {\n+    public boolean enforce(final AccountPolicySpec policy, final PolicyType type, final User user) {\n         if (user.getUsername() == null) {\n             throw new PolicyEnforceException(\"Invalid account\");\n         }\n@@ -90,11 +85,7 @@ public void enforce(final AccountPolicySpec policy, final PolicyType type, final\n         }\n \n         // check for subsequent failed logins\n-        if (userSuspender != null\n-                && user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n-                && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended()) {\n-\n-            userSuspender.suspend(user, policy.isPropagateSuspension());\n-        }\n+        return (user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n+                && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended());\n     }\n }"},{"sha":"1313d2e3d969d84047f74e6345093b8fc7a16a0d","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PasswordPolicyEnforcer.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -27,7 +27,7 @@\n public class PasswordPolicyEnforcer implements PolicyEnforcer<PasswordPolicySpec, User> {\n \n     @Override\n-    public void enforce(final PasswordPolicySpec policy, final PolicyType type, final User user) {\n+    public boolean enforce(final PasswordPolicySpec policy, final PolicyType type, final User user) {\n         final String clearPassword = user.getClearPassword();\n         final String password = user.getPassword();\n \n@@ -147,6 +147,8 @@ public void enforce(final PasswordPolicySpec policy, final PolicyType type, fina\n                 throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n             }\n         }\n+\n+        return false;\n     }\n \n     private boolean checkForDigit(final String str) {"},{"sha":"86e658388b3d2005c4d041f91cae0b5c143970ae","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PolicyEnforcer.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEnforcer.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -23,5 +23,13 @@\n \n public interface PolicyEnforcer<T extends PolicySpec, E> {\n \n-    void enforce(final T policy, final PolicyType type, final E object);\n+    /**\n+     * Check the given entity to see if it conforms with the indicated policy.\n+     *\n+     * @param policy\n+     * @param type\n+     * @param entity\n+     * @return whether user is to be suspended\n+     */\n+    boolean enforce(final T policy, final PolicyType type, final E entity);\n }"},{"sha":"fd6abd269a66a2f3d65a731d73f46c09ade94846","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PolicyEvaluator.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -34,9 +34,6 @@\n @Component\n public class PolicyEvaluator {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(PolicyEvaluator.class);\n \n     @SuppressWarnings(\"unchecked\")\n@@ -54,7 +51,7 @@ public <T extends PolicySpec> T evaluate(final Policy policy, final Any<?, ?, ?>\n                 BeanUtils.copyProperties(ppSpec, evaluatedPPSpec, new String[] { \"schemasNotPermitted\" });\n \n                 for (String schema : ppSpec.getSchemasNotPermitted()) {\n-                    PlainAttr attr = any.getPlainAttr(schema);\n+                    PlainAttr<?> attr = any.getPlainAttr(schema);\n                     if (attr != null) {\n                         List<String> values = attr.getValuesAsStrings();\n                         if (values != null && !values.isEmpty()) {"},{"sha":"38240d93195b19a5a9ff12aa17524d9582016536","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthContextUtils.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,12 +18,18 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n@@ -79,6 +85,27 @@ public static String getDomain() {\n         return domainKey;\n     }\n \n+    public static void setFakeAuth(final String domain) {\n+        List<GrantedAuthority> authorities = CollectionUtils.collect(Entitlement.values(),\n+                new Transformer<String, GrantedAuthority>() {\n+\n+                    @Override\n+                    public GrantedAuthority transform(final String entitlement) {\n+                        return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+                    }\n+                }, new ArrayList<GrantedAuthority>());\n+\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new User(ApplicationContextProvider.getBeanFactory().getBean(\"adminUser\", String.class),\n+                        \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(domain));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+    }\n+\n+    public static void clearFakeAuth() {\n+        SecurityContextHolder.clearContext();\n+    }\n+\n     /**\n      * Private default constructor, for static-only classes.\n      */"},{"sha":"44635be7aacbb5da7777665e198e459ca618500b","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/PasswordGenerator.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -215,7 +215,7 @@ private String generate(final PasswordPolicySpec policySpec) {\n         String[] generatedPassword = new String[policySpec.getMinLength()];\n \n         for (int i = 0; i < generatedPassword.length; i++) {\n-            generatedPassword[i] = \"\";\n+            generatedPassword[i] = StringUtils.EMPTY;\n         }\n \n         checkStartChar(generatedPassword, policySpec);\n@@ -224,7 +224,6 @@ private String generate(final PasswordPolicySpec policySpec) {\n \n         checkRequired(generatedPassword, policySpec);\n \n-        //filled empty chars\n         for (int firstEmptyChar = firstEmptyChar(generatedPassword);\n                 firstEmptyChar < generatedPassword.length - 1; firstEmptyChar++) {\n \n@@ -252,6 +251,10 @@ private void checkStartChar(final String[] generatedPassword, final PasswordPoli\n         if (policySpec.isMustntStartWithNonAlpha()) {\n             generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n         }\n+\n+        if (StringUtils.EMPTY.equals(generatedPassword[0])) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n+        }\n     }\n \n     private void checkEndChar(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n@@ -271,6 +274,10 @@ private void checkEndChar(final String[] generatedPassword, final PasswordPolicy\n         if (policySpec.isMustntEndWithNonAlpha()) {\n             generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n         }\n+\n+        if (StringUtils.EMPTY.equals(generatedPassword[policySpec.getMinLength() - 1])) {\n+            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n+        }\n     }\n \n     private int firstEmptyChar(final String[] generatedPStrings) {"},{"sha":"f452128c2487d16fc91bbce372d78a48a213cb31","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationProvider.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -191,23 +191,23 @@ public Authentication authenticate(final Authentication authentication) {\n \n             auditManager.audit(\n                     AuditElements.EventCategoryType.REST,\n-                    \"AuthenticationController\",\n+                    AuditElements.AUTHENTICATION_CATEGORY,\n                     null,\n-                    \"login\",\n+                    AuditElements.LOGIN_EVENT,\n                     Result.SUCCESS,\n                     null,\n                     authenticated,\n                     authentication,\n-                    \"Successfully authenticated, with groups: \" + token.getAuthorities());\n+                    \"Successfully authenticated, with entitlements: \" + token.getAuthorities());\n \n             LOG.debug(\"User {} successfully authenticated, with groups {}\",\n                     authentication.getPrincipal(), token.getAuthorities());\n         } else {\n             auditManager.audit(\n                     AuditElements.EventCategoryType.REST,\n-                    \"AuthenticationController\",\n+                    AuditElements.AUTHENTICATION_CATEGORY,\n                     null,\n-                    \"login\",\n+                    AuditElements.LOGIN_EVENT,\n                     Result.FAILURE,\n                     null,\n                     authenticated,"},{"sha":"100de1739a6a89a56c177a270527e8bf2a04afbb","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeGrantedAuthority.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -27,6 +27,8 @@\n import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.syncope.core.misc.RealmUtils;\n import org.springframework.security.core.GrantedAuthority;\n \n@@ -80,4 +82,9 @@ public int hashCode() {\n         return HashCodeBuilder.reflectionHashCode(this);\n     }\n \n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+\n }"},{"sha":"e67dcd69d6150bdd3d887926cc42fd8f6f1498f9","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/spring/ApplicationContextProvider.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FApplicationContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FApplicationContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FApplicationContextProvider.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -27,12 +27,22 @@ public class ApplicationContextProvider implements ApplicationContextAware {\n \n     private static ConfigurableApplicationContext CTX;\n \n+    private static DefaultListableBeanFactory BEAN_FACTORY;\n+\n     public static ConfigurableApplicationContext getApplicationContext() {\n         return CTX;\n     }\n \n     public static DefaultListableBeanFactory getBeanFactory() {\n-        return (DefaultListableBeanFactory) CTX.getBeanFactory();\n+        return BEAN_FACTORY == null\n+                ? CTX == null\n+                        ? null\n+                        : (DefaultListableBeanFactory) CTX.getBeanFactory()\n+                : BEAN_FACTORY;\n+    }\n+\n+    public static void setBeanFactory(final DefaultListableBeanFactory beanFactory) {\n+        BEAN_FACTORY = beanFactory;\n     }\n \n     /**"},{"sha":"1d8e27c23518cb6ded750d9dc95dc74daeea9b26","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/DomainsHolder.java","status":"renamed","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainsHolder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainsHolder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainsHolder.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -16,11 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.api.job;\n+package org.apache.syncope.core.persistence.api;\n \n-import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n-import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n+import java.util.Map;\n+import javax.sql.DataSource;\n \n-public interface SyncJob extends ProvisioningJob<SyncTask, SyncActions> {\n+public interface DomainsHolder {\n \n+    Map<String, DataSource> getDomains();\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/SyncJob.java"},{"sha":"5ed50dfc06e629b3b0ee123c2080c1108637ff39","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/content/ContentExporter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FContentExporter.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -24,6 +24,6 @@\n \n public interface ContentExporter {\n \n-    void export(OutputStream output, String uwfPrefix, String rwfPrefix) \n+    void export(String domain, OutputStream output, String uwfPrefix, String rwfPrefix) \n             throws SAXException, TransformerConfigurationException;\n }"},{"sha":"44528909a95a4f783183917cc44b25d419f86114","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -22,8 +22,6 @@\n \n public interface DAO<E extends Entity<KEY>, KEY> {\n \n-    String getDomain(E entity);\n-\n     void refresh(E entity);\n \n     void detach(E entity);"},{"sha":"0913ee18447bdd4f809f67e60cebff2758e9d420","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/SchedTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -24,15 +24,15 @@ public interface SchedTask extends Task {\n \n     String getDescription();\n \n-    String getJobClassName();\n+    String getJobDelegateClassName();\n \n     String getName();\n \n     void setCronExpression(String cronExpression);\n \n     void setDescription(String description);\n \n-    void setJobClassName(String jobClassName);\n+    void setJobDelegateClassName(String jobDelegateClassName);\n \n     void setName(String name);\n }"},{"sha":"7f1ff38493b7da8faf600b4a8c54e4f1df5b2d64","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -79,6 +79,11 @@ under the License.\n       <artifactId>spring-orm</artifactId>\n     </dependency>\n       \n+    <dependency>\n+      <groupId>org.aspectj</groupId>\n+      <artifactId>aspectjweaver</artifactId>\n+    </dependency>\n+    \n     <dependency>\n       <groupId>commons-io</groupId>\n       <artifactId>commons-io</artifactId>"},{"sha":"9e44efe897f6156da8ac8a9975c0f87ba3febb6d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/AbstractContentDealer.java","status":"modified","additions":2,"deletions":55,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FAbstractContentDealer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FAbstractContentDealer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FAbstractContentDealer.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,71 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.content;\n \n-import java.io.IOException;\n-import java.util.Properties;\n-import javax.annotation.Resource;\n-import javax.sql.DataSource;\n-import org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader;\n+import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.io.support.PropertiesLoaderUtils;\n-import org.springframework.dao.DataAccessException;\n-import org.springframework.jdbc.core.JdbcTemplate;\n \n public abstract class AbstractContentDealer {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractContentDealer.class);\n \n     protected static final String ROOT_ELEMENT = \"dataset\";\n \n-    @Resource(name = \"database.schema\")\n-    protected String dbSchema;\n-\n-    @Resource(name = \"indexesXML\")\n-    private ResourceWithFallbackLoader indexesXML;\n-\n-    @Resource(name = \"viewsXML\")\n-    private ResourceWithFallbackLoader viewsXML;\n-\n     @Autowired\n-    protected DataSource dataSource;\n-\n-    protected void createIndexes() throws IOException {\n-        LOG.debug(\"Creating indexes\");\n-\n-        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-\n-        Properties indexes = PropertiesLoaderUtils.loadProperties(indexesXML.getResource());\n-        for (String idx : indexes.stringPropertyNames()) {\n-            LOG.debug(\"Creating index {}\", indexes.get(idx).toString());\n-\n-            try {\n-                jdbcTemplate.execute(indexes.get(idx).toString());\n-            } catch (DataAccessException e) {\n-                LOG.error(\"Could not create index \", e);\n-            }\n-        }\n-\n-        LOG.debug(\"Indexes created\");\n-    }\n-\n-    protected void createViews() throws IOException {\n-        LOG.debug(\"Creating views\");\n-\n-        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-\n-        Properties views = PropertiesLoaderUtils.loadProperties(viewsXML.getResource());\n-        for (String idx : views.stringPropertyNames()) {\n-            LOG.debug(\"Creating view {}\", views.get(idx).toString());\n-\n-            try {\n-                jdbcTemplate.execute(views.get(idx).toString().replaceAll(\"\\\\n\", \" \"));\n-            } catch (DataAccessException e) {\n-                LOG.error(\"Could not create view \", e);\n-            }\n-        }\n+    protected DomainsHolder domainsHolder;\n \n-        LOG.debug(\"Views created\");\n-    }\n }"},{"sha":"17f4bce548fd5c1cbdc9502154d93dd3c8053fe2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":13,"deletions":23,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -40,6 +40,7 @@\n import java.util.Set;\n import java.util.TreeMap;\n import java.util.TreeSet;\n+import javax.sql.DataSource;\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerConfigurationException;\n@@ -50,6 +51,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.jpa.entity.JPAReportExec;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr;\n@@ -91,30 +93,13 @@ public class XMLContentExporter extends AbstractContentDealer implements Content\n                 JPAARelationship.TABLE, JPAAMembership.TABLE, JPAURelationship.TABLE, JPAUMembership.TABLE\n             }));\n \n-    protected static final Set<String> TABLE_SUFFIXES_TO_BE_INCLUDED =\n-            new HashSet<>(Arrays.asList(new String[] { \"TEMPLATE\" }));\n-\n     protected static final Map<String, String> TABLES_TO_BE_FILTERED =\n             Collections.singletonMap(\"TASK\", \"DTYPE <> 'PropagationTask'\");\n \n     protected static final Map<String, Set<String>> COLUMNS_TO_BE_NULLIFIED =\n             Collections.singletonMap(\"SYNCOPEGROUP\", Collections.singleton(\"USEROWNER_ID\"));\n \n-    private boolean isTableAllowed(final String tableName) {\n-        boolean allowed = true;\n-        for (String prefix : TABLE_PREFIXES_TO_BE_EXCLUDED) {\n-            if (tableName.toUpperCase().startsWith(prefix)) {\n-                for (String suffix : TABLE_SUFFIXES_TO_BE_INCLUDED) {\n-                    if (!tableName.toUpperCase().endsWith(suffix)) {\n-                        allowed = false;\n-                    }\n-                }\n-            }\n-        }\n-        return allowed;\n-    }\n-\n-    private List<String> sortByForeignKeys(final Connection conn, final Set<String> tableNames)\n+    private List<String> sortByForeignKeys(final String dbSchema, final Connection conn, final Set<String> tableNames)\n             throws SQLException {\n \n         Set<MultiParentNode<String>> roots = new HashSet<>();\n@@ -325,7 +310,7 @@ private void doExportTable(final TransformerHandler handler, final Connection co\n     }\n \n     @Override\n-    public void export(final OutputStream os, final String uwfPrefix, final String rwfPrefix)\n+    public void export(final String domain, final OutputStream os, final String uwfPrefix, final String rwfPrefix)\n             throws SAXException, TransformerConfigurationException {\n \n         if (StringUtils.isNotBlank(uwfPrefix)) {\n@@ -346,6 +331,13 @@ public void export(final OutputStream os, final String uwfPrefix, final String r\n         handler.startDocument();\n         handler.startElement(\"\", \"\", ROOT_ELEMENT, new AttributesImpl());\n \n+        DataSource dataSource = domainsHolder.getDomains().get(domain);\n+        if (dataSource == null) {\n+            throw new IllegalArgumentException(\"Could not find DataSource for domain \" + domain);\n+        }\n+\n+        String dbSchema = ApplicationContextProvider.getBeanFactory().getBean(domain + \"DatabaseSchema\", String.class);\n+\n         Connection conn = null;\n         ResultSet rs = null;\n         try {\n@@ -359,15 +351,13 @@ public void export(final OutputStream os, final String uwfPrefix, final String r\n             while (rs.next()) {\n                 String tableName = rs.getString(\"TABLE_NAME\");\n                 LOG.debug(\"Found table {}\", tableName);\n-                if (isTableAllowed(tableName)) {\n-                    tableNames.add(tableName);\n-                }\n+                tableNames.add(tableName);\n             }\n \n             LOG.debug(\"Tables to be exported {}\", tableNames);\n \n             // then sort tables based on foreign keys and dump\n-            for (String tableName : sortByForeignKeys(conn, tableNames)) {\n+            for (String tableName : sortByForeignKeys(dbSchema, conn, tableNames)) {\n                 try {\n                     doExportTable(handler, conn, tableName, TABLES_TO_BE_FILTERED.get(tableName.toUpperCase()));\n                 } catch (Exception e) {"},{"sha":"5d8cfc592c36d1a376da0a190a97a8bc7b9e7074","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java","status":"modified","additions":84,"deletions":29,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -20,75 +20,130 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Properties;\n import javax.annotation.Resource;\n+import javax.sql.DataSource;\n import javax.xml.parsers.SAXParser;\n import javax.xml.parsers.SAXParserFactory;\n import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader;\n import org.apache.syncope.core.persistence.api.content.ContentLoader;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPAConf;\n-import org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader;\n+import org.springframework.core.io.support.PropertiesLoaderUtils;\n import org.springframework.dao.DataAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n \n /**\n  * Initialize Database with default content if no data is present already.\n  */\n @Component\n public class XMLContentLoader extends AbstractContentDealer implements ContentLoader {\n \n-    @Resource(name = \"contentXML\")\n-    private ResourceWithFallbackLoader contentXML;\n+    @Resource(name = \"indexesXML\")\n+    private ResourceWithFallbackLoader indexesXML;\n+\n+    @Resource(name = \"viewsXML\")\n+    private ResourceWithFallbackLoader viewsXML;\n \n     @Override\n     public Integer getPriority() {\n         return 0;\n     }\n \n-    @Transactional\n     @Override\n     public void load() {\n-        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-\n-        boolean existingData;\n-        try {\n-            existingData = jdbcTemplate.queryForObject(\"SELECT COUNT(0) FROM \" + JPAConf.TABLE, Integer.class) > 0;\n-        } catch (DataAccessException e) {\n-            LOG.error(\"Could not access to table \" + JPAConf.TABLE, e);\n-            existingData = true;\n-        }\n-\n-        if (existingData) {\n-            LOG.info(\"Data found in the database, leaving untouched\");\n-        } else {\n-            LOG.info(\"Empty database found, loading default content\");\n+        for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n+            // create EntityManager so OpenJPA will build the SQL schema\n+            EntityManagerFactoryUtils.findEntityManagerFactory(\n+                    ApplicationContextProvider.getBeanFactory(), entry.getKey()).createEntityManager();\n \n+            JdbcTemplate jdbcTemplate = new JdbcTemplate(entry.getValue());\n+            boolean existingData;\n             try {\n-                loadDefaultContent();\n-            } catch (Exception e) {\n-                LOG.error(\"While loading default content\", e);\n+                existingData = jdbcTemplate.queryForObject(\"SELECT COUNT(0) FROM \" + JPAConf.TABLE, Integer.class) > 0;\n+            } catch (DataAccessException e) {\n+                LOG.error(\"[{}] Could not access to table \" + JPAConf.TABLE, entry.getKey(), e);\n+                existingData = true;\n             }\n-            try {\n-                createIndexes();\n-                createViews();\n-            } catch (IOException e) {\n-                LOG.error(\"While creating indexes and views\", e);\n+\n+            if (existingData) {\n+                LOG.info(\"[{}] Data found in the database, leaving untouched\", entry.getKey());\n+            } else {\n+                LOG.info(\"[{}] Empty database found, loading default content\", entry.getKey());\n+\n+                try {\n+                    ResourceWithFallbackLoader contentXML = ApplicationContextProvider.getBeanFactory().\n+                            getBean(entry.getKey() + \"ContentXML\", ResourceWithFallbackLoader.class);\n+                    loadDefaultContent(entry.getKey(), contentXML, entry.getValue());\n+                } catch (Exception e) {\n+                    LOG.error(\"[{}] While loading default content\", entry.getKey(), e);\n+                }\n+                try {\n+                    createIndexes(entry.getKey(), entry.getValue());\n+                    createViews(entry.getKey(), entry.getValue());\n+                } catch (IOException e) {\n+                    LOG.error(\"[{}] While creating indexes and views\", entry.getKey(), e);\n+                }\n             }\n         }\n     }\n \n-    private void loadDefaultContent() throws Exception {\n+    private void loadDefaultContent(\n+            final String domain, final ResourceWithFallbackLoader contentXML, final DataSource dataSource)\n+            throws Exception {\n+\n         SAXParserFactory factory = SAXParserFactory.newInstance();\n         InputStream in = null;\n         try {\n             in = contentXML.getResource().getInputStream();\n \n             SAXParser parser = factory.newSAXParser();\n             parser.parse(in, new ContentLoaderHandler(dataSource, ROOT_ELEMENT));\n-            LOG.debug(\"Default content successfully loaded\");\n+            LOG.debug(\"[{}] Default content successfully loaded\", domain);\n         } finally {\n             IOUtils.closeQuietly(in);\n         }\n     }\n+\n+    private void createIndexes(final String domain, final DataSource dataSource) throws IOException {\n+        LOG.debug(\"[{}] Creating indexes\", domain);\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+\n+        Properties indexes = PropertiesLoaderUtils.loadProperties(indexesXML.getResource());\n+        for (String idx : indexes.stringPropertyNames()) {\n+            LOG.debug(\"[{}] Creating index {}\", domain, indexes.get(idx).toString());\n+\n+            try {\n+                jdbcTemplate.execute(indexes.get(idx).toString());\n+            } catch (DataAccessException e) {\n+                LOG.error(\"[{}] Could not create index\", domain, e);\n+            }\n+        }\n+\n+        LOG.debug(\"Indexes created\");\n+    }\n+\n+    private void createViews(final String domain, final DataSource dataSource) throws IOException {\n+        LOG.debug(\"[{}] Creating views\", domain);\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+\n+        Properties views = PropertiesLoaderUtils.loadProperties(viewsXML.getResource());\n+        for (String idx : views.stringPropertyNames()) {\n+            LOG.debug(\"[{}] Creating view {}\", domain, views.get(idx).toString());\n+\n+            try {\n+                jdbcTemplate.execute(views.get(idx).toString().replaceAll(\"\\\\n\", \" \"));\n+            } catch (DataAccessException e) {\n+                LOG.error(\"[{}] Could not create view\", domain, e);\n+            }\n+        }\n+\n+        LOG.debug(\"Views created\");\n+    }\n }"},{"sha":"95f5b4e2c63196efbbf0bbd427f9b1e72332c82c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import static org.apache.syncope.core.persistence.jpa.dao.AbstractDAO.LOG;\n-\n import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -54,6 +52,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n public abstract class AbstractAnyDAO<A extends Any<?, ?, ?>> extends AbstractDAO<A, Long> implements AnyDAO<A> {\n \n@@ -81,6 +80,7 @@ protected AnyUtils getAnyUtils() {\n \n     protected abstract void securityChecks(A any);\n \n+    @Transactional(readOnly = true)\n     @Override\n     public A authFind(final Long key) {\n         if (key == null) {\n@@ -98,16 +98,17 @@ public A authFind(final Long key) {\n         return any;\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public A find(final Long key) {\n-        return (A) entityManager.find(getAnyUtils().anyClass(), key);\n+        return (A) entityManager().find(getAnyUtils().anyClass(), key);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public A findByWorkflowId(final String workflowId) {\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + getAnyUtils().anyClass().getSimpleName()\n+        Query query = entityManager().createQuery(\"SELECT e FROM \" + getAnyUtils().anyClass().getSimpleName()\n                 + \" e WHERE e.workflowId = :workflowId\", User.class);\n         query.setParameter(\"workflowId\", workflowId);\n \n@@ -122,7 +123,7 @@ public A findByWorkflowId(final String workflowId) {\n     }\n \n     private Query findByAttrValueQuery(final String entityName) {\n-        return entityManager.createQuery(\"SELECT e FROM \" + entityName + \" e\"\n+        return entityManager().createQuery(\"SELECT e FROM \" + entityName + \" e\"\n                 + \" WHERE e.attribute.schema.name = :schemaName AND (e.stringValue IS NOT NULL\"\n                 + \" AND e.stringValue = :stringValue)\"\n                 + \" OR (e.booleanValue IS NOT NULL AND e.booleanValue = :booleanValue)\"\n@@ -362,7 +363,7 @@ public List<A> findByDerAttrValue(final String schemaName, final String value) {\n             }\n         }\n \n-        Query query = entityManager.createNativeQuery(querystring.toString());\n+        Query query = entityManager().createNativeQuery(querystring.toString());\n \n         List<A> result = new ArrayList<>();\n         for (Object anyKey : query.getResultList()) {\n@@ -378,7 +379,7 @@ public List<A> findByDerAttrValue(final String schemaName, final String value) {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public List<A> findByResource(final ExternalResource resource) {\n-        Query query = entityManager.createQuery(\n+        Query query = entityManager().createQuery(\n                 \"SELECT e FROM \" + getAnyUtils().anyClass().getSimpleName() + \" e \"\n                 + \"WHERE :resource MEMBER OF e.resources\");\n         query.setParameter(\"resource\", resource);\n@@ -414,7 +415,7 @@ public final int count(final Set<String> adminRealms) {\n \n     @Override\n     public A save(final A any) {\n-        A merged = entityManager.merge(any);\n+        A merged = entityManager().merge(any);\n         for (VirAttr<?> virAttr : merged.getVirAttrs()) {\n             virAttr.getValues().clear();\n             virAttr.getValues().addAll(any.getVirAttr(virAttr.getSchema().getKey()).getValues());"},{"sha":"e5c1d66a15d4de1d1d84813eb0027648a0ac7b61","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -20,27 +20,33 @@\n \n import java.util.List;\n import javax.persistence.EntityManager;\n-import javax.persistence.PersistenceContext;\n-import javax.persistence.PersistenceContextType;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.DAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Configurable;\n-import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n import org.springframework.util.ReflectionUtils;\n \n @Configurable\n public abstract class AbstractDAO<E extends Entity<KEY>, KEY> implements DAO<E, KEY> {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(DAO.class);\n \n-    @Value(\"#{entityManager}\")\n-    @PersistenceContext(type = PersistenceContextType.TRANSACTION)\n-    protected EntityManager entityManager;\n+    protected EntityManager entityManager() {\n+        EntityManager entityManager = EntityManagerFactoryUtils.getTransactionalEntityManager(\n+                EntityManagerFactoryUtils.findEntityManagerFactory(\n+                        ApplicationContextProvider.getBeanFactory(), AuthContextUtils.getDomain()));\n+        if (entityManager == null) {\n+            throw new IllegalStateException(\"Could not find EntityManager for domain \" + AuthContextUtils.getDomain());\n+        }\n+\n+        return entityManager;\n+    }\n \n     protected String toOrderByStatement(final Class<? extends Entity<KEY>> beanClass, final String prefix,\n             final List<OrderByClause> orderByClauses) {\n@@ -63,28 +69,23 @@ protected String toOrderByStatement(final Class<? extends Entity<KEY>> beanClass\n         return statement.toString();\n     }\n \n-    @Override\n-    public String getDomain(final E entity) {\n-        return SyncopeConstants.MASTER_DOMAIN;\n-    }\n-\n     @Override\n     public void refresh(final E entity) {\n-        entityManager.refresh(entity);\n+        entityManager().refresh(entity);\n     }\n \n     @Override\n     public void detach(final E entity) {\n-        entityManager.detach(entity);\n+        entityManager().detach(entity);\n     }\n \n     @Override\n     public void flush() {\n-        entityManager.flush();\n+        entityManager().flush();\n     }\n \n     @Override\n     public void clear() {\n-        entityManager.clear();\n+        entityManager().clear();\n     }\n }"},{"sha":"75b903d3bdfe3cd085922993c4c12cc0e63dc6c0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -99,7 +99,7 @@ public final List<AnyObject> findAll(final String anyTypeName,\n \n     @Override\n     public List<ARelationship> findARelationships(final AnyObject anyObject) {\n-        TypedQuery<ARelationship> query = entityManager.createQuery(\n+        TypedQuery<ARelationship> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAARelationship.class.getSimpleName()\n                 + \" e WHERE e.rightEnd=:anyObject\", ARelationship.class);\n         query.setParameter(\"anyObject\", anyObject);\n@@ -109,7 +109,7 @@ public List<ARelationship> findARelationships(final AnyObject anyObject) {\n \n     @Override\n     public List<URelationship> findURelationships(final AnyObject anyObject) {\n-        TypedQuery<URelationship> query = entityManager.createQuery(\n+        TypedQuery<URelationship> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAURelationship.class.getSimpleName()\n                 + \" e WHERE e.rightEnd=:anyObject\", URelationship.class);\n         query.setParameter(\"anyObject\", anyObject);\n@@ -132,13 +132,13 @@ public void delete(final AnyObject any) {\n             group.getADynMembership().remove(any);\n         }\n \n-        entityManager.remove(any);\n+        entityManager().remove(any);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public List<Group> findDynGroupMemberships(final AnyObject anyObject) {\n-        TypedQuery<Group> query = entityManager.createQuery(\n+        TypedQuery<Group> query = entityManager().createQuery(\n                 \"SELECT e.group FROM \" + JPAADynGroupMembership.class.getSimpleName()\n                 + \" e WHERE :anyObject MEMBER OF e.anyObjects\", Group.class);\n         query.setParameter(\"anyObject\", anyObject);"},{"sha":"2b422ebf1ea87343d16d64a3b60b09c439f23bee","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -143,7 +143,7 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n         queryString.insert(0, \"SELECT COUNT(any_id) FROM (\");\n         queryString.append(\") count_any_id\");\n \n-        Query countQuery = entityManager.createNativeQuery(queryString.toString());\n+        Query countQuery = entityManager().createNativeQuery(queryString.toString());\n         fillWithParameters(countQuery, parameters);\n \n         return ((Number) countQuery.getSingleResult()).intValue();\n@@ -208,7 +208,7 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n             queryString.append(\") u WHERE any_id=?\").append(setParameter(parameters, any.getKey()));\n \n             // 3. prepare the search query\n-            Query query = entityManager.createNativeQuery(queryString.toString());\n+            Query query = entityManager().createNativeQuery(queryString.toString());\n \n             // 4. populate the search query with parameter values\n             fillWithParameters(query, parameters);\n@@ -371,7 +371,7 @@ private OrderBySupport parseOrderBy(final AnyTypeKind type, final SearchSupport\n                 append(buildOrderBy(orderBySupport));\n \n         // 3. prepare the search query\n-        Query query = entityManager.createNativeQuery(queryString.toString());\n+        Query query = entityManager().createNativeQuery(queryString.toString());\n \n         // 4. page starts from 1, while setFirtResult() starts from 0\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));"},{"sha":"9a014423ee4ad69a8f053c92d11fdb31f0683d13","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -51,19 +51,19 @@ public class JPAAnyTypeClassDAO extends AbstractDAO<AnyTypeClass, String> implem\n \n     @Override\n     public AnyTypeClass find(final String key) {\n-        return entityManager.find(JPAAnyTypeClass.class, key);\n+        return entityManager().find(JPAAnyTypeClass.class, key);\n     }\n \n     @Override\n     public List<AnyTypeClass> findAll() {\n-        TypedQuery<AnyTypeClass> query = entityManager.createQuery(\n+        TypedQuery<AnyTypeClass> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAAnyTypeClass.class.getSimpleName() + \" e \", AnyTypeClass.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public AnyTypeClass save(final AnyTypeClass anyTypeClass) {\n-        AnyTypeClass merge = entityManager.merge(anyTypeClass);\n+        AnyTypeClass merge = entityManager().merge(anyTypeClass);\n \n         for (PlainSchema schema : merge.getPlainSchemas()) {\n             schema.setAnyTypeClass(merge);\n@@ -99,7 +99,7 @@ public void delete(final String key) {\n             type.remove(anyTypeClass);\n         }\n \n-        entityManager.remove(anyTypeClass);\n+        entityManager().remove(anyTypeClass);\n     }\n \n }"},{"sha":"cf87a3bcb108736dafcaacdb1e3b831c7c84c39b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -32,7 +32,7 @@ public class JPAAnyTypeDAO extends AbstractDAO<AnyType, String> implements AnyTy\n \n     @Override\n     public AnyType find(final String key) {\n-        return entityManager.find(JPAAnyType.class, key);\n+        return entityManager().find(JPAAnyType.class, key);\n     }\n \n     @Override\n@@ -50,22 +50,22 @@ public List<AnyType> findByTypeClass(final AnyTypeClass anyTypeClass) {\n                 append(JPAAnyType.class.getSimpleName()).\n                 append(\" e WHERE :anyTypeClass MEMBER OF e.classes\");\n \n-        TypedQuery<AnyType> query = entityManager.createQuery(queryString.toString(), AnyType.class);\n+        TypedQuery<AnyType> query = entityManager().createQuery(queryString.toString(), AnyType.class);\n         query.setParameter(\"anyTypeClass\", anyTypeClass);\n \n         return query.getResultList();\n     }\n \n     @Override\n     public List<AnyType> findAll() {\n-        TypedQuery<AnyType> query = entityManager.createQuery(\n+        TypedQuery<AnyType> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAAnyType.class.getSimpleName() + \" e \", AnyType.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public AnyType save(final AnyType anyType) {\n-        return entityManager.merge(anyType);\n+        return entityManager().merge(anyType);\n     }\n \n     @Override\n@@ -79,7 +79,7 @@ public void delete(final String key) {\n             throw new IllegalArgumentException(key + \" cannot be deleted\");\n         }\n \n-        entityManager.remove(anyType);\n+        entityManager().remove(anyType);\n     }\n \n }"},{"sha":"4afe78e09f05ee8157733d45e647a48a3b59790e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -42,12 +42,12 @@ public class JPAConfDAO extends AbstractDAO<Conf, Long> implements ConfDAO {\n \n     @Override\n     public Conf get() {\n-        Conf instance = entityManager.find(JPAConf.class, 1L);\n+        Conf instance = entityManager().find(JPAConf.class, 1L);\n         if (instance == null) {\n             instance = new JPAConf();\n             instance.setKey(1L);\n \n-            instance = entityManager.merge(instance);\n+            instance = entityManager().merge(instance);\n         }\n \n         return instance;\n@@ -97,7 +97,7 @@ public Conf save(final CPlainAttr attr) {\n         instance.add(attr);\n         attr.setOwner(instance);\n \n-        return entityManager.merge(instance);\n+        return entityManager().merge(instance);\n     }\n \n     @Override\n@@ -106,7 +106,7 @@ public Conf delete(final String key) {\n         CPlainAttr attr = instance.getPlainAttr(key);\n         if (attr != null) {\n             instance.remove(attr);\n-            instance = entityManager.merge(instance);\n+            instance = entityManager().merge(instance);\n         }\n \n         return instance;"},{"sha":"eb027e9d10515940676279a88838edf92a9361cb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -44,19 +44,19 @@ public class JPAConnInstanceDAO extends AbstractDAO<ConnInstance, Long> implemen\n \n     @Override\n     public ConnInstance find(final Long key) {\n-        return entityManager.find(JPAConnInstance.class, key);\n+        return entityManager().find(JPAConnInstance.class, key);\n     }\n \n     @Override\n     public List<ConnInstance> findAll() {\n-        TypedQuery<ConnInstance> query = entityManager.createQuery(\n+        TypedQuery<ConnInstance> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAConnInstance.class.getSimpleName() + \" e\", ConnInstance.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public ConnInstance save(final ConnInstance connector) {\n-        final ConnInstance merged = entityManager.merge(connector);\n+        final ConnInstance merged = entityManager().merge(connector);\n \n         for (ExternalResource resource : merged.getResources()) {\n             try {\n@@ -86,7 +86,7 @@ public void execute(final ExternalResource input) {\n \n                 });\n \n-        entityManager.remove(connInstance);\n+        entityManager().remove(connInstance);\n \n         connRegistry.unregisterConnector(key.toString());\n     }"},{"sha":"8dff203537f6f2d23bbd86b087d1333f3a55157e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerAttrDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -49,19 +49,19 @@ public <T extends DerAttr<?>> Class<? extends AbstractDerAttr<?>> getJPAEntityRe\n \n     @Override\n     public <T extends DerAttr<?>> T find(final Long key, final Class<T> reference) {\n-        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+        return reference.cast(entityManager().find(getJPAEntityReference(reference), key));\n     }\n \n     @Override\n     public <T extends DerAttr<?>> List<T> findAll(final Class<T> reference) {\n-        TypedQuery<T> query = entityManager.createQuery(\n+        TypedQuery<T> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n         return query.getResultList();\n     }\n \n     @Override\n     public <T extends DerAttr<?>> T save(final T derAttr) {\n-        return entityManager.merge(derAttr);\n+        return entityManager().merge(derAttr);\n     }\n \n     @Override\n@@ -81,6 +81,6 @@ public <T extends DerAttr<?>> void delete(final T derAttr) {\n             ((Any<?, T, ?>) derAttr.getOwner()).remove(derAttr);\n         }\n \n-        entityManager.remove(derAttr);\n+        entityManager().remove(derAttr);\n     }\n }"},{"sha":"4ed17caad9a1cfd068f963be91917e36fe02c3d9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -45,7 +45,7 @@ public class JPADerSchemaDAO extends AbstractDAO<DerSchema, String> implements D\n \n     @Override\n     public DerSchema find(final String key) {\n-        return entityManager.find(JPADerSchema.class, key);\n+        return entityManager().find(JPADerSchema.class, key);\n     }\n \n     @Override\n@@ -54,15 +54,15 @@ public List<DerSchema> findByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n                 append(JPADerSchema.class.getSimpleName()).\n                 append(\" e WHERE e.anyTypeClass=:anyTypeClass\");\n \n-        TypedQuery<DerSchema> query = entityManager.createQuery(queryString.toString(), DerSchema.class);\n+        TypedQuery<DerSchema> query = entityManager().createQuery(queryString.toString(), DerSchema.class);\n         query.setParameter(\"anyTypeClass\", anyTypeClass);\n \n         return query.getResultList();\n     }\n \n     @Override\n     public List<DerSchema> findAll() {\n-        TypedQuery<DerSchema> query = entityManager.createQuery(\n+        TypedQuery<DerSchema> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPADerSchema.class.getSimpleName() + \" e\", DerSchema.class);\n         return query.getResultList();\n     }\n@@ -73,15 +73,15 @@ public <T extends DerAttr<?>> List<T> findAttrs(final DerSchema schema, final Cl\n                 append(((JPADerAttrDAO) derAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n                 append(\" e WHERE e.schema=:schema\");\n \n-        TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n+        TypedQuery<T> query = entityManager().createQuery(queryString.toString(), reference);\n         query.setParameter(\"schema\", schema);\n \n         return query.getResultList();\n     }\n \n     @Override\n     public DerSchema save(final DerSchema derSchema) {\n-        return entityManager.merge(derSchema);\n+        return entityManager().merge(derSchema);\n     }\n \n     @Override\n@@ -106,6 +106,6 @@ public void delete(final String key) {\n             schema.getAnyTypeClass().remove(schema);\n         }\n \n-        entityManager.remove(schema);\n+        entityManager().remove(schema);\n     }\n }"},{"sha":"b3bb1889e236d648cea9991f3a9b65fa199fb725","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADomainDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADomainDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADomainDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADomainDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -30,19 +30,19 @@ public class JPADomainDAO extends AbstractDAO<Domain, String> implements DomainD\n \n     @Override\n     public Domain find(final String key) {\n-        return entityManager.find(JPADomain.class, key);\n+        return entityManager().find(JPADomain.class, key);\n     }\n \n     @Override\n     public List<Domain> findAll() {\n-        TypedQuery<Domain> query = entityManager.createQuery(\n+        TypedQuery<Domain> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPADomain.class.getSimpleName() + \" e \", Domain.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public Domain save(final Domain anyTypeClass) {\n-        return entityManager.merge(anyTypeClass);\n+        return entityManager().merge(anyTypeClass);\n     }\n \n     @Override\n@@ -52,6 +52,6 @@ public void delete(final String key) {\n             return;\n         }\n \n-        entityManager.remove(domain);\n+        entityManager().remove(domain);\n     }\n }"},{"sha":"4a8a759e7bc6ef32a9b4c312d2500e248b14f3c7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -71,7 +71,7 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource, String\n \n     @Override\n     public ExternalResource find(final String name) {\n-        return entityManager.find(JPAExternalResource.class, name);\n+        return entityManager().find(JPAExternalResource.class, name);\n     }\n \n     private StringBuilder getByPolicyQuery(final PolicyType type) {\n@@ -99,29 +99,29 @@ private StringBuilder getByPolicyQuery(final PolicyType type) {\n \n     @Override\n     public List<ExternalResource> findByPolicy(final Policy policy) {\n-        TypedQuery<ExternalResource> query = entityManager.createQuery(\n+        TypedQuery<ExternalResource> query = entityManager().createQuery(\n                 getByPolicyQuery(policy.getType()).append(\" = :policy\").toString(), ExternalResource.class);\n         query.setParameter(\"policy\", policy);\n         return query.getResultList();\n     }\n \n     @Override\n     public List<ExternalResource> findWithoutPolicy(final PolicyType type) {\n-        TypedQuery<ExternalResource> query = entityManager.createQuery(\n+        TypedQuery<ExternalResource> query = entityManager().createQuery(\n                 getByPolicyQuery(type).append(\" IS NULL\").toString(), ExternalResource.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public List<ExternalResource> findAll() {\n-        TypedQuery<ExternalResource> query = entityManager.createQuery(\n+        TypedQuery<ExternalResource> query = entityManager().createQuery(\n                 \"SELECT e FROM  \" + JPAExternalResource.class.getSimpleName() + \" e\", ExternalResource.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public List<ExternalResource> findAllByPriority() {\n-        TypedQuery<ExternalResource> query = entityManager.createQuery(\n+        TypedQuery<ExternalResource> query = entityManager().createQuery(\n                 \"SELECT e FROM  \" + JPAExternalResource.class.getSimpleName() + \" e ORDER BY e.propagationPriority\",\n                 ExternalResource.class);\n         return query.getResultList();\n@@ -138,7 +138,7 @@ public List<ExternalResource> findAllByPriority() {\n     @Override\n     @Transactional(rollbackFor = { Throwable.class })\n     public ExternalResource save(final ExternalResource resource) {\n-        ExternalResource merged = entityManager.merge(resource);\n+        ExternalResource merged = entityManager().merge(resource);\n         try {\n             connRegistry.registerConnector(merged);\n         } catch (NotFoundException e) {\n@@ -154,7 +154,7 @@ public void deleteMapping(final String intAttrName, final IntMappingType intMapp\n             return;\n         }\n \n-        TypedQuery<MappingItem> query = entityManager.createQuery(\n+        TypedQuery<MappingItem> query = entityManager().createQuery(\n                 \"SELECT m FROM \" + JPAMappingItem.class.getSimpleName()\n                 + \" m WHERE m.intAttrName=:intAttrName AND m.intMappingType=:intMappingType\", MappingItem.class);\n         query.setParameter(\"intAttrName\", intAttrName);\n@@ -165,18 +165,18 @@ public void deleteMapping(final String intAttrName, final IntMappingType intMapp\n             itemKeys.add(item.getKey());\n         }\n         for (Long itemKey : itemKeys) {\n-            MappingItem item = entityManager.find(JPAMappingItem.class, itemKey);\n+            MappingItem item = entityManager().find(JPAMappingItem.class, itemKey);\n             if (item != null) {\n                 item.getMapping().remove(item);\n                 item.setMapping(null);\n \n-                entityManager.remove(item);\n+                entityManager().remove(item);\n             }\n         }\n \n         // Make empty query cache for *MappingItem and related *Mapping\n-        entityManager.getEntityManagerFactory().getCache().evict(JPAMappingItem.class);\n-        entityManager.getEntityManagerFactory().getCache().evict(JPAMapping.class);\n+        entityManager().getEntityManagerFactory().getCache().evict(JPAMappingItem.class);\n+        entityManager().getEntityManagerFactory().getCache().evict(JPAMapping.class);\n     }\n \n     @Override\n@@ -219,6 +219,6 @@ public void delete(final String name) {\n             provision.setResource(null);\n         }\n \n-        entityManager.remove(resource);\n+        entityManager().remove(resource);\n     }\n }"},{"sha":"368ea07f5bac3ed72e31ce929cb10b050e797faa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -88,7 +88,7 @@ public boolean evaluate(final String realm) {\n \n     @Override\n     public Group find(final String name) {\n-        TypedQuery<Group> query = entityManager.createQuery(\n+        TypedQuery<Group> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e WHERE e.name = :name\", Group.class);\n         query.setParameter(\"name\", name);\n \n@@ -116,7 +116,7 @@ public List<Group> findOwnedByUser(final Long userKey) {\n             queryString.append(\"OR e.groupOwner.id=\").append(groupKey).append(' ');\n         }\n \n-        TypedQuery<Group> query = entityManager.createQuery(queryString.toString(), Group.class);\n+        TypedQuery<Group> query = entityManager().createQuery(queryString.toString(), Group.class);\n         query.setParameter(\"owner\", owner);\n \n         return query.getResultList();\n@@ -133,15 +133,15 @@ public List<Group> findOwnedByGroup(final Long groupId) {\n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPAGroup.class.getSimpleName()).\n                 append(\" e WHERE e.groupOwner=:owner \");\n \n-        TypedQuery<Group> query = entityManager.createQuery(queryString.toString(), Group.class);\n+        TypedQuery<Group> query = entityManager().createQuery(queryString.toString(), Group.class);\n         query.setParameter(\"owner\", owner);\n \n         return query.getResultList();\n     }\n \n     @Override\n     public List<AMembership> findAMemberships(final Group group) {\n-        TypedQuery<AMembership> query = entityManager.createQuery(\n+        TypedQuery<AMembership> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAAMembership.class.getSimpleName()\n                 + \" e WHERE e.rightEnd=:group\", AMembership.class);\n         query.setParameter(\"group\", group);\n@@ -151,7 +151,7 @@ public List<AMembership> findAMemberships(final Group group) {\n \n     @Override\n     public List<UMembership> findUMemberships(final Group group) {\n-        TypedQuery<UMembership> query = entityManager.createQuery(\n+        TypedQuery<UMembership> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAUMembership.class.getSimpleName()\n                 + \" e WHERE e.rightEnd=:group\", UMembership.class);\n         query.setParameter(\"group\", group);\n@@ -190,16 +190,16 @@ public void delete(final Group group) {\n             membership.getLeftEnd().remove(membership);\n             anyObjectDAO.save(membership.getLeftEnd());\n \n-            entityManager.remove(membership);\n+            entityManager().remove(membership);\n         }\n         for (UMembership membership : findUMemberships(group)) {\n             membership.getLeftEnd().remove(membership);\n             userDAO.save(membership.getLeftEnd());\n \n-            entityManager.remove(membership);\n+            entityManager().remove(membership);\n         }\n \n-        entityManager.remove(group);\n+        entityManager().remove(group);\n     }\n \n     private void populateTransitiveResources("},{"sha":"9189e2a80c115cf34c0fe07d9fe290a7f2558a18","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPALoggerDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -32,12 +32,12 @@ public class JPALoggerDAO extends AbstractDAO<Logger, String> implements LoggerD\n \n     @Override\n     public Logger find(final String key) {\n-        return entityManager.find(JPALogger.class, key);\n+        return entityManager().find(JPALogger.class, key);\n     }\n \n     @Override\n     public List<Logger> findAll(final LoggerType type) {\n-        TypedQuery<Logger> query = entityManager.createQuery(\n+        TypedQuery<Logger> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPALogger.class.getSimpleName() + \" e WHERE e.type=:type\", Logger.class);\n         query.setParameter(\"type\", type);\n         return query.getResultList();\n@@ -49,12 +49,12 @@ public Logger save(final Logger logger) {\n         if (LoggerType.AUDIT == logger.getType() && LoggerLevel.OFF != logger.getLevel()) {\n             logger.setLevel(LoggerLevel.DEBUG);\n         }\n-        return entityManager.merge(logger);\n+        return entityManager().merge(logger);\n     }\n \n     @Override\n     public void delete(final Logger logger) {\n-        entityManager.remove(logger);\n+        entityManager().remove(logger);\n     }\n \n     @Override"},{"sha":"a43cf22d03d47a3bd3e1a2b769f2e7e4d847fac3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -30,23 +30,23 @@ public class JPANotificationDAO extends AbstractDAO<Notification, Long> implemen\n \n     @Override\n     public Notification find(final Long key) {\n-        return entityManager.find(JPANotification.class, key);\n+        return entityManager().find(JPANotification.class, key);\n     }\n \n     @Override\n     public List<Notification> findAll() {\n-        TypedQuery<Notification> query = entityManager.createQuery(\n+        TypedQuery<Notification> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPANotification.class.getSimpleName() + \" e\", Notification.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public Notification save(final Notification notification) {\n-        return entityManager.merge(notification);\n+        return entityManager().merge(notification);\n     }\n \n     @Override\n     public void delete(final Long key) {\n-        entityManager.remove(find(key));\n+        entityManager().remove(find(key));\n     }\n }"},{"sha":"d21d1f3102c578f374b3921ecd2cebc4f4efe753","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -51,7 +51,7 @@ public <T extends PlainAttr<?>> Class<? extends AbstractPlainAttr<?>> getJPAEnti\n \n     @Override\n     public <T extends PlainAttr<?>> T find(final Long key, final Class<T> reference) {\n-        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+        return reference.cast(entityManager().find(getJPAEntityReference(reference), key));\n     }\n \n     @Override\n@@ -71,6 +71,6 @@ public <T extends PlainAttr<?>> void delete(final T plainAttr) {\n             ((Any<T, ?, ?>) plainAttr.getOwner()).remove(plainAttr);\n         }\n \n-        entityManager.remove(plainAttr);\n+        entityManager().remove(plainAttr);\n     }\n }"},{"sha":"be2965c769d6bbe181e4fb23feb640e80b20b54e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -68,19 +68,19 @@ private <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getJP\n \n     @Override\n     public <T extends PlainAttrValue> T find(final Long key, final Class<T> reference) {\n-        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+        return reference.cast(entityManager().find(getJPAEntityReference(reference), key));\n     }\n \n     @Override\n     public <T extends PlainAttrValue> List<T> findAll(final Class<T> reference) {\n-        TypedQuery<T> query = entityManager.createQuery(\n+        TypedQuery<T> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n         return query.getResultList();\n     }\n \n     @Override\n     public <T extends PlainAttrValue> T save(final T attributeValue) {\n-        return entityManager.merge(attributeValue);\n+        return entityManager().merge(attributeValue);\n     }\n \n     @Override\n@@ -99,6 +99,6 @@ public <T extends PlainAttrValue> void delete(final T attrValue) {\n             attrValue.getAttr().remove(attrValue);\n         }\n \n-        entityManager.remove(attrValue);\n+        entityManager().remove(attrValue);\n     }\n }"},{"sha":"47e8fe38ad67c0a801dd74d8e640c6d58f1d45f4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -45,7 +45,7 @@ public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema, String> implemen\n \n     @Override\n     public PlainSchema find(final String key) {\n-        return entityManager.find(JPAPlainSchema.class, key);\n+        return entityManager().find(JPAPlainSchema.class, key);\n     }\n \n     @Override\n@@ -54,15 +54,15 @@ public List<PlainSchema> findByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n                 append(JPAPlainSchema.class.getSimpleName()).\n                 append(\" e WHERE e.anyTypeClass=:anyTypeClass\");\n \n-        TypedQuery<PlainSchema> query = entityManager.createQuery(queryString.toString(), PlainSchema.class);\n+        TypedQuery<PlainSchema> query = entityManager().createQuery(queryString.toString(), PlainSchema.class);\n         query.setParameter(\"anyTypeClass\", anyTypeClass);\n \n         return query.getResultList();\n     }\n \n     @Override\n     public List<PlainSchema> findAll() {\n-        TypedQuery<PlainSchema> query = entityManager.createQuery(\n+        TypedQuery<PlainSchema> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAPlainSchema.class.getSimpleName() + \" e\", PlainSchema.class);\n         return query.getResultList();\n     }\n@@ -73,15 +73,15 @@ public <T extends PlainAttr<?>> List<T> findAttrs(final PlainSchema schema, fina\n                 append(((JPAPlainAttrDAO) plainAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n                 append(\" e WHERE e.schema=:schema\");\n \n-        TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n+        TypedQuery<T> query = entityManager().createQuery(queryString.toString(), reference);\n         query.setParameter(\"schema\", schema);\n \n         return query.getResultList();\n     }\n \n     @Override\n     public PlainSchema save(final PlainSchema schema) {\n-        return entityManager.merge(schema);\n+        return entityManager().merge(schema);\n     }\n \n     @Override\n@@ -106,6 +106,6 @@ public void delete(final String key) {\n             schema.getAnyTypeClass().remove(schema);\n         }\n \n-        entityManager.remove(schema);\n+        entityManager().remove(schema);\n     }\n }"},{"sha":"ab0a8c523d6cd0cafc3c73db1049d3d1bdd8301b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -43,7 +43,7 @@ public class JPAPolicyDAO extends AbstractDAO<Policy, Long> implements PolicyDAO\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Policy> T find(final Long key) {\n-        final Query query = entityManager.createQuery(\n+        final Query query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAPolicy.class.getSimpleName() + \" e WHERE e.id=:id\");\n         query.setParameter(\"id\", key);\n \n@@ -56,7 +56,7 @@ public <T extends Policy> T find(final Long key) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Policy> List<T> find(final PolicyType type) {\n-        final Query query = entityManager.createQuery(\n+        final Query query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAPolicy.class.getSimpleName() + \" e WHERE e.type=:type\");\n         query.setParameter(\"type\", type);\n \n@@ -65,7 +65,7 @@ public <T extends Policy> List<T> find(final PolicyType type) {\n \n     @Override\n     public List<AccountPolicy> findByResource(final ExternalResource resource) {\n-        TypedQuery<AccountPolicy> query = entityManager.createQuery(\n+        TypedQuery<AccountPolicy> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAAccountPolicy.class.getSimpleName() + \" e \"\n                 + \"WHERE :resource MEMBER OF e.resources\", AccountPolicy.class);\n         query.setParameter(\"resource\", resource);\n@@ -75,14 +75,14 @@ public List<AccountPolicy> findByResource(final ExternalResource resource) {\n \n     @Override\n     public List<Policy> findAll() {\n-        TypedQuery<Policy> query = entityManager.createQuery(\n+        TypedQuery<Policy> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAPolicy.class.getSimpleName() + \" e\", Policy.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public <T extends Policy> T save(final T policy) {\n-        return entityManager.merge(policy);\n+        return entityManager().merge(policy);\n     }\n \n     @Override\n@@ -95,6 +95,6 @@ public <T extends Policy> void delete(final T policy) {\n             }\n         }\n \n-        entityManager.remove(policy);\n+        entityManager().remove(policy);\n     }\n }"},{"sha":"36ce550e35dbe11e2455d796e51cc5d6992824ca","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -50,7 +50,7 @@ public class JPARealmDAO extends AbstractDAO<Realm, Long> implements RealmDAO {\n \n     @Override\n     public Realm getRoot() {\n-        TypedQuery<Realm> query = entityManager.createQuery(\n+        TypedQuery<Realm> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e WHERE e.parent IS NULL\", Realm.class);\n \n         Realm result = null;\n@@ -65,7 +65,7 @@ public Realm getRoot() {\n \n     @Override\n     public Realm find(final Long key) {\n-        return entityManager.find(JPARealm.class, key);\n+        return entityManager().find(JPARealm.class, key);\n     }\n \n     @Override\n@@ -126,7 +126,7 @@ public <T extends Policy> List<Realm> findByPolicy(final T policy) {\n                 append(JPARealm.class.getSimpleName()).append(\" e WHERE e.\").\n                 append(policy instanceof AccountPolicy ? \"accountPolicy\" : \"passwordPolicy\").append(\"=:policy\");\n \n-        TypedQuery<Realm> query = entityManager.createQuery(queryString.toString(), Realm.class);\n+        TypedQuery<Realm> query = entityManager().createQuery(queryString.toString(), Realm.class);\n         query.setParameter(\"policy\", policy);\n \n         List<Realm> result = new ArrayList<>();\n@@ -154,7 +154,7 @@ public List<Realm> findAncestors(final Realm realm) {\n \n     @Override\n     public List<Realm> findChildren(final Realm realm) {\n-        TypedQuery<Realm> query = entityManager.createQuery(\n+        TypedQuery<Realm> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e WHERE e.parent=:realm\", Realm.class);\n         query.setParameter(\"realm\", realm);\n \n@@ -180,14 +180,14 @@ public List<Realm> findDescendants(final Realm realm) {\n \n     @Override\n     public List<Realm> findAll() {\n-        TypedQuery<Realm> query = entityManager.createQuery(\n+        TypedQuery<Realm> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e \", Realm.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public Realm save(final Realm realm) {\n-        return entityManager.merge(realm);\n+        return entityManager().merge(realm);\n     }\n \n     @Override\n@@ -199,7 +199,7 @@ public void delete(final Realm realm) {\n \n             toBeDeleted.setParent(null);\n \n-            entityManager.remove(toBeDeleted);\n+            entityManager().remove(toBeDeleted);\n         }\n     }\n "},{"sha":"5eb3951a108c12cc7e24c2e1270c53ed9cdeeda5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARelationshipTypeDAO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -39,27 +39,27 @@ public class JPARelationshipTypeDAO extends AbstractDAO<RelationshipType, String\n \n     @Override\n     public RelationshipType find(final String key) {\n-        return entityManager.find(JPARelationshipType.class, key);\n+        return entityManager().find(JPARelationshipType.class, key);\n     }\n \n     @Override\n     public List<RelationshipType> findAll() {\n-        TypedQuery<RelationshipType> query = entityManager.createQuery(\n+        TypedQuery<RelationshipType> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPARelationshipType.class.getSimpleName() + \" e \", RelationshipType.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public RelationshipType save(final RelationshipType anyType) {\n-        return entityManager.merge(anyType);\n+        return entityManager().merge(anyType);\n     }\n \n     private Collection<? extends Relationship<?, ?>> findRelationshipsByType(final RelationshipType type) {\n-        TypedQuery<ARelationship> aquery = entityManager.createQuery(\n+        TypedQuery<ARelationship> aquery = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAARelationship.class.getSimpleName() + \" e WHERE e.type=:type\",\n                 ARelationship.class);\n         aquery.setParameter(\"type\", type);\n-        TypedQuery<URelationship> uquery = entityManager.createQuery(\n+        TypedQuery<URelationship> uquery = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAURelationship.class.getSimpleName() + \" e WHERE e.type=:type\",\n                 URelationship.class);\n         uquery.setParameter(\"type\", type);\n@@ -86,10 +86,10 @@ public void delete(final String key) {\n             }\n \n             relationship.setLeftEnd(null);\n-            entityManager.remove(relationship);\n+            entityManager().remove(relationship);\n         }\n \n-        entityManager.remove(type);\n+        entityManager().remove(type);\n     }\n \n }"},{"sha":"6de5ffbfac80f40eae0d201a7cb08f7e1889b4bb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportDAO.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -32,20 +32,21 @@\n @Repository\n public class JPAReportDAO extends AbstractDAO<Report, Long> implements ReportDAO {\n \n-    @Override\n     @Transactional(readOnly = true)\n+    @Override\n     public Report find(final Long key) {\n-        return entityManager.find(JPAReport.class, key);\n+        return entityManager().find(JPAReport.class, key);\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public List<Report> findAll() {\n         return findAll(-1, -1, Collections.<OrderByClause>emptyList());\n     }\n \n     @Override\n     public List<Report> findAll(final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n-        final TypedQuery<Report> query = entityManager.createQuery(\n+        final TypedQuery<Report> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAReport.class.getSimpleName() + \" e \"\n                 + toOrderByStatement(Report.class, \"e\", orderByClauses), Report.class);\n \n@@ -62,14 +63,14 @@ public List<Report> findAll(final int page, final int itemsPerPage, final List<O\n \n     @Override\n     public int count() {\n-        Query countQuery = entityManager.createNativeQuery(\"SELECT COUNT(id) FROM \" + JPAReport.TABLE);\n+        Query countQuery = entityManager().createNativeQuery(\"SELECT COUNT(id) FROM \" + JPAReport.TABLE);\n         return ((Number) countQuery.getSingleResult()).intValue();\n     }\n \n     @Override\n     @Transactional(rollbackFor = Throwable.class)\n     public Report save(final Report report) {\n-        return entityManager.merge(report);\n+        return entityManager().merge(report);\n     }\n \n     @Override\n@@ -84,6 +85,6 @@ public void delete(final Long key) {\n \n     @Override\n     public void delete(final Report report) {\n-        entityManager.remove(report);\n+        entityManager().remove(report);\n     }\n }"},{"sha":"cf9e78147611c4191ad14c4106e90328dc0441a2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -32,11 +32,11 @@ public class JPAReportExecDAO extends AbstractDAO<ReportExec, Long> implements R\n \n     @Override\n     public ReportExec find(final Long key) {\n-        return entityManager.find(JPAReportExec.class, key);\n+        return entityManager().find(JPAReportExec.class, key);\n     }\n \n     private ReportExec findLatest(final Report report, final String field) {\n-        TypedQuery<ReportExec> query = entityManager.createQuery(\n+        TypedQuery<ReportExec> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAReportExec.class.getSimpleName() + \" e \"\n                 + \"WHERE e.report=:report ORDER BY e.\" + field + \" DESC\", ReportExec.class);\n         query.setParameter(\"report\", report);\n@@ -60,7 +60,7 @@ public ReportExec findLatestEnded(final Report report) {\n \n     @Override\n     public List<ReportExec> findAll() {\n-        TypedQuery<ReportExec> query = entityManager.createQuery(\n+        TypedQuery<ReportExec> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAReportExec.class.getSimpleName() + \" e\", ReportExec.class);\n         return query.getResultList();\n     }\n@@ -75,7 +75,7 @@ public List<ReportExec> findAll() {\n     @Override\n     @Transactional(rollbackFor = Throwable.class)\n     public ReportExec save(final ReportExec execution) {\n-        return entityManager.merge(execution);\n+        return entityManager().merge(execution);\n     }\n \n     @Override\n@@ -94,6 +94,6 @@ public void delete(final ReportExec execution) {\n             execution.getReport().removeExec(execution);\n         }\n \n-        entityManager.remove(execution);\n+        entityManager().remove(execution);\n     }\n }"},{"sha":"6fb5ec35d1a807670190976f0cdfdec2c99fdce4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -43,12 +43,12 @@ public class JPARoleDAO extends AbstractDAO<Role, Long> implements RoleDAO {\n \n     @Override\n     public Role find(final Long key) {\n-        return entityManager.find(JPARole.class, key);\n+        return entityManager().find(JPARole.class, key);\n     }\n \n     @Override\n     public Role find(final String name) {\n-        TypedQuery<Role> query = entityManager.createQuery(\n+        TypedQuery<Role> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPARole.class.getSimpleName() + \" e WHERE e.name=:name\", Role.class);\n         query.setParameter(\"name\", name);\n \n@@ -64,15 +64,15 @@ public Role find(final String name) {\n \n     @Override\n     public List<Role> findByRealm(final Realm realm) {\n-        TypedQuery<Role> query = entityManager.createQuery(\n+        TypedQuery<Role> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPARole.class.getSimpleName() + \" e WHERE :realm MEMBER OF e.realms\", Role.class);\n         query.setParameter(\"realm\", realm);\n         return query.getResultList();\n     }\n \n     @Override\n     public List<Role> findAll() {\n-        TypedQuery<Role> query = entityManager.createQuery(\n+        TypedQuery<Role> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPARole.class.getSimpleName() + \" e \", Role.class);\n         return query.getResultList();\n     }\n@@ -90,12 +90,12 @@ public Role save(final Role role) {\n             }\n         }\n \n-        return entityManager.merge(role);\n+        return entityManager().merge(role);\n     }\n \n     @Override\n     public void delete(final Role role) {\n-        entityManager.remove(role);\n+        entityManager().remove(role);\n     }\n \n     @Override"},{"sha":"7028080a302834482450a8c42d9b2881428dbd84","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASecurityQuestionDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASecurityQuestionDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASecurityQuestionDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASecurityQuestionDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -36,19 +36,19 @@ public class JPASecurityQuestionDAO extends AbstractDAO<SecurityQuestion, Long>\n \n     @Override\n     public SecurityQuestion find(final Long key) {\n-        return entityManager.find(JPASecurityQuestion.class, key);\n+        return entityManager().find(JPASecurityQuestion.class, key);\n     }\n \n     @Override\n     public List<SecurityQuestion> findAll() {\n-        final TypedQuery<SecurityQuestion> query = entityManager.createQuery(\n+        final TypedQuery<SecurityQuestion> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPASecurityQuestion.class.getSimpleName() + \" e \", SecurityQuestion.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public SecurityQuestion save(final SecurityQuestion securityQuestion) {\n-        return entityManager.merge(securityQuestion);\n+        return entityManager().merge(securityQuestion);\n     }\n \n     @Override\n@@ -64,7 +64,7 @@ public void delete(final Long key) {\n             userDAO.save(user);\n         }\n \n-        entityManager.remove(securityQuestion);\n+        entityManager().remove(securityQuestion);\n     }\n \n }"},{"sha":"a70f65e9f6c080b43735395527b442b0df19887b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -75,7 +75,7 @@ public Class<? extends Task> getEntityReference(final TaskType type) {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends Task> T find(final Long key) {\n-        return (T) entityManager.find(JPATask.class, key);\n+        return (T) entityManager().find(JPATask.class, key);\n     }\n \n     private <T extends Task> StringBuilder buildfindAllQuery(final TaskType type) {\n@@ -96,7 +96,7 @@ public <T extends Task> List<T> findToExec(final TaskType type) {\n         }\n         queryString.append(\"ORDER BY e.id DESC\");\n \n-        Query query = entityManager.createQuery(queryString.toString());\n+        Query query = entityManager().createQuery(queryString.toString());\n         query.setParameter(\"type\", type);\n         return query.getResultList();\n     }\n@@ -106,13 +106,14 @@ public <T extends Task> List<T> findToExec(final TaskType type) {\n     public <T extends Task> List<T> findAll(final ExternalResource resource, final TaskType type) {\n         StringBuilder queryString = buildfindAllQuery(type).append(\"AND e.resource=:resource ORDER BY e.id DESC\");\n \n-        final Query query = entityManager.createQuery(queryString.toString());\n+        final Query query = entityManager().createQuery(queryString.toString());\n         query.setParameter(\"type\", type);\n         query.setParameter(\"resource\", resource);\n \n         return query.getResultList();\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public <T extends Task> List<T> findAll(final TaskType type) {\n         return findAll(-1, -1, Collections.<OrderByClause>emptyList(), type);\n@@ -128,7 +129,7 @@ public <T extends Task> List<T> findAll(final int page, final int itemsPerPage,\n                 ? \"ORDER BY e.id DESC\"\n                 : toOrderByStatement(getEntityReference(type), \"e\", orderByClauses));\n \n-        Query query = entityManager.createQuery(queryString.toString());\n+        Query query = entityManager().createQuery(queryString.toString());\n         query.setParameter(\"type\", type);\n \n         query.setFirstResult(itemsPerPage * (page <= 0\n@@ -144,15 +145,15 @@ public <T extends Task> List<T> findAll(final int page, final int itemsPerPage,\n \n     @Override\n     public int count(final TaskType type) {\n-        Query countQuery = entityManager.createNativeQuery(\"SELECT COUNT(id) FROM Task WHERE TYPE=?1\");\n+        Query countQuery = entityManager().createNativeQuery(\"SELECT COUNT(id) FROM Task WHERE TYPE=?1\");\n         countQuery.setParameter(1, type.name());\n         return ((Number) countQuery.getSingleResult()).intValue();\n     }\n \n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public <T extends Task> T save(final T task) {\n-        return entityManager.merge(task);\n+        return entityManager().merge(task);\n     }\n \n     @Override\n@@ -167,7 +168,7 @@ public void delete(final Long id) {\n \n     @Override\n     public void delete(final Task task) {\n-        entityManager.remove(task);\n+        entityManager().remove(task);\n     }\n \n     @Override"},{"sha":"38155ff30e649a72d87b11d2e9536d0cfb346194","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -38,11 +38,11 @@ public class JPATaskExecDAO extends AbstractDAO<TaskExec, Long> implements TaskE\n \n     @Override\n     public TaskExec find(final Long key) {\n-        return entityManager.find(JPATaskExec.class, key);\n+        return entityManager().find(JPATaskExec.class, key);\n     }\n \n     private <T extends Task> TaskExec findLatest(final T task, final String field) {\n-        TypedQuery<TaskExec> query = entityManager.createQuery(\n+        TypedQuery<TaskExec> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPATaskExec.class.getSimpleName() + \" e \"\n                 + \"WHERE e.task=:task \"\n                 + \"ORDER BY e.\" + field + \" DESC\", TaskExec.class);\n@@ -71,13 +71,13 @@ public List<TaskExec> findAll(final TaskType type) {\n                 append(\" e WHERE e.task IN (\").append(\"SELECT t FROM \").\n                 append(taskDAO.getEntityReference(type).getSimpleName()).append(\" t)\");\n \n-        TypedQuery<TaskExec> query = entityManager.createQuery(queryString.toString(), TaskExec.class);\n+        TypedQuery<TaskExec> query = entityManager().createQuery(queryString.toString(), TaskExec.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public TaskExec save(final TaskExec execution) {\n-        return entityManager.merge(execution);\n+        return entityManager().merge(execution);\n     }\n \n     /**\n@@ -111,6 +111,6 @@ public void delete(final TaskExec execution) {\n             execution.getTask().removeExec(execution);\n         }\n \n-        entityManager.remove(execution);\n+        entityManager().remove(execution);\n     }\n }"},{"sha":"50564f23bee2f1fcb9fa6d51f7d1f9aac5b543d8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":175,"deletions":6,"changes":181,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -29,8 +29,17 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.types.AccountPolicySpec;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n+import org.apache.syncope.core.misc.policy.AccountPolicyEnforcer;\n+import org.apache.syncope.core.misc.policy.AccountPolicyException;\n+import org.apache.syncope.core.misc.policy.PasswordPolicyEnforcer;\n+import org.apache.syncope.core.misc.policy.PolicyEvaluator;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -40,14 +49,21 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n+import org.apache.syncope.core.provisioning.api.UserSuspender;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n@@ -56,15 +72,33 @@\n @Repository\n public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private GroupDAO groupDAO;\n \n     @Autowired\n     private RoleDAO roleDAO;\n \n+    @Resource(name = \"adminUser\")\n+    private String adminUser;\n+\n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n+    @Autowired\n+    private PolicyEvaluator evaluator;\n+\n+    @Autowired\n+    private PasswordPolicyEnforcer ppEnforcer;\n+\n+    @Autowired\n+    private AccountPolicyEnforcer apEnforcer;\n+\n+    @Autowired(required = false)\n+    private UserSuspender suspender;\n+\n     @Override\n     protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.USER);\n@@ -110,7 +144,7 @@ public User authFind(final String username) {\n \n     @Override\n     public User find(final String username) {\n-        TypedQuery<User> query = entityManager.createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n+        TypedQuery<User> query = entityManager().createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n                 + \" e WHERE e.username = :username\", User.class);\n         query.setParameter(\"username\", username);\n \n@@ -126,7 +160,7 @@ public User find(final String username) {\n \n     @Override\n     public User findByToken(final String token) {\n-        TypedQuery<User> query = entityManager.createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n+        TypedQuery<User> query = entityManager().createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n                 + \" e WHERE e.token LIKE :token\", User.class);\n         query.setParameter(\"token\", token);\n \n@@ -142,16 +176,151 @@ public User findByToken(final String token) {\n \n     @Override\n     public List<User> findBySecurityQuestion(final SecurityQuestion securityQuestion) {\n-        TypedQuery<User> query = entityManager.createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n+        TypedQuery<User> query = entityManager().createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n                 + \" e WHERE e.securityQuestion = :securityQuestion\", User.class);\n         query.setParameter(\"securityQuestion\", securityQuestion);\n \n         return query.getResultList();\n     }\n \n+    private List<PasswordPolicy> getPasswordPolicies(final User user) {\n+        List<PasswordPolicy> policies = new ArrayList<>();\n+\n+        PasswordPolicy policy;\n+\n+        // add resource policies\n+        for (ExternalResource resource : findAllResources(user)) {\n+            policy = resource.getPasswordPolicy();\n+            if (policy != null) {\n+                policies.add(policy);\n+            }\n+        }\n+\n+        // add realm policies\n+        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n+            policy = realm.getPasswordPolicy();\n+            if (policy != null) {\n+                policies.add(policy);\n+            }\n+        }\n+\n+        return policies;\n+    }\n+\n+    private List<AccountPolicy> getAccountPolicies(final User user) {\n+        List<AccountPolicy> policies = new ArrayList<>();\n+\n+        AccountPolicy policy;\n+\n+        // add resource policies        \n+        for (ExternalResource resource : findAllResources(user)) {\n+            policy = resource.getAccountPolicy();\n+            if (policy != null) {\n+                policies.add(policy);\n+            }\n+        }\n+\n+        // add realm policies\n+        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n+            policy = realm.getAccountPolicy();\n+            if (policy != null) {\n+                policies.add(policy);\n+            }\n+        }\n+\n+        return policies;\n+    }\n+\n+    private Pair<Boolean, Boolean> enforcePolicies(final User user) {\n+        // ------------------------------\n+        // Verify password policies\n+        // ------------------------------\n+        LOG.debug(\"Password Policy enforcement\");\n+\n+        try {\n+            int maxPPSpecHistory = 0;\n+            for (Policy policy : getPasswordPolicies(user)) {\n+                // evaluate policy\n+                PasswordPolicySpec ppSpec = evaluator.evaluate(policy, user);\n+                // enforce policy\n+                ppEnforcer.enforce(ppSpec, policy.getType(), user);\n+\n+                if (ppSpec.getHistoryLength() > maxPPSpecHistory) {\n+                    maxPPSpecHistory = ppSpec.getHistoryLength();\n+                }\n+            }\n+\n+            // update user's password history with encrypted password\n+            if (maxPPSpecHistory > 0 && user.getPassword() != null) {\n+                user.getPasswordHistory().add(user.getPassword());\n+            }\n+            // keep only the last maxPPSpecHistory items in user's password history\n+            if (maxPPSpecHistory < user.getPasswordHistory().size()) {\n+                for (int i = 0; i < user.getPasswordHistory().size() - maxPPSpecHistory; i++) {\n+                    user.getPasswordHistory().remove(i);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Invalid password for {}\", user, e);\n+            throw new InvalidEntityException(User.class, EntityViolationType.InvalidPassword, e.getMessage());\n+        } finally {\n+            // password has been validated, let's remove its clear version\n+            user.removeClearPassword();\n+        }\n+\n+        // ------------------------------\n+        // Verify account policies\n+        // ------------------------------\n+        LOG.debug(\"Account Policy enforcement\");\n+\n+        boolean suspend = false;\n+        boolean propagateSuspension = false;\n+        try {\n+            if (adminUser.equals(user.getUsername()) || anonymousUser.equals(user.getUsername())) {\n+                throw new AccountPolicyException(\"Not allowed: \" + user.getUsername());\n+            }\n+\n+            // invalid username\n+            for (Policy policy : getAccountPolicies(user)) {\n+                // evaluate policy\n+                AccountPolicySpec apSpec = evaluator.evaluate(policy, user);\n+\n+                // enforce policy\n+                suspend |= apEnforcer.enforce(apSpec, policy.getType(), user);\n+                propagateSuspension |= apSpec.isPropagateSuspension();\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Invalid username for {}\", user, e);\n+            throw new InvalidEntityException(User.class, EntityViolationType.InvalidUsername, e.getMessage());\n+        }\n+\n+        return ImmutablePair.of(suspend, propagateSuspension);\n+    }\n+\n     @Override\n     public User save(final User user) {\n+        // 1. save clear password value before save\n+        String clearPwd = user.getClearPassword();\n+\n+        // 2. save and flush to trigger entity validation        \n         User merged = super.save(user);\n+        entityManager().flush();\n+\n+        // 3. set back the sole clear password value\n+        JPAUser.class.cast(merged).setClearPassword(clearPwd);\n+\n+        // 4. enforce password and account policies\n+        Pair<Boolean, Boolean> enforceSuspend = null;\n+        try {\n+            enforceSuspend = enforcePolicies(merged);\n+        } catch (InvalidEntityException e) {\n+            entityManager().remove(merged);\n+            throw e;\n+        }\n+\n+        if (suspender != null && enforceSuspend.getKey()) {\n+            suspender.suspend(user, enforceSuspend.getValue());\n+        }\n \n         roleDAO.refreshDynMemberships(merged);\n         groupDAO.refreshDynMemberships(merged);\n@@ -168,13 +337,13 @@ public void delete(final User user) {\n             group.getUDynMembership().remove(user);\n         }\n \n-        entityManager.remove(user);\n+        entityManager().remove(user);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public List<Role> findDynRoleMemberships(final User user) {\n-        TypedQuery<Role> query = entityManager.createQuery(\n+        TypedQuery<Role> query = entityManager().createQuery(\n                 \"SELECT e.role FROM \" + JPADynRoleMembership.class.getSimpleName()\n                 + \" e WHERE :user MEMBER OF e.users\", Role.class);\n         query.setParameter(\"user\", user);\n@@ -185,7 +354,7 @@ public List<Role> findDynRoleMemberships(final User user) {\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public List<Group> findDynGroupMemberships(final User user) {\n-        TypedQuery<Group> query = entityManager.createQuery(\n+        TypedQuery<Group> query = entityManager().createQuery(\n                 \"SELECT e.group FROM \" + JPAUDynGroupMembership.class.getSimpleName()\n                 + \" e WHERE :user MEMBER OF e.users\", Group.class);\n         query.setParameter(\"user\", user);"},{"sha":"2c8b99f7d5b5d586ab12ea45cc1cd19ad9f13494","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirAttrDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -49,19 +49,19 @@ public <T extends VirAttr<?>> Class<? extends AbstractVirAttr<?>> getJPAEntityRe\n \n     @Override\n     public <T extends VirAttr<?>> T find(final Long key, final Class<T> reference) {\n-        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+        return reference.cast(entityManager().find(getJPAEntityReference(reference), key));\n     }\n \n     @Override\n     public <T extends VirAttr<?>> List<T> findAll(final Class<T> reference) {\n-        TypedQuery<T> query = entityManager.createQuery(\n+        TypedQuery<T> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n         return query.getResultList();\n     }\n \n     @Override\n     public <T extends VirAttr<?>> T save(final T virAttr) {\n-        return entityManager.merge(virAttr);\n+        return entityManager().merge(virAttr);\n     }\n \n     @Override\n@@ -81,6 +81,6 @@ public <T extends VirAttr<?>> void delete(final T virAttr) {\n             ((Any<?, ?, T>) virAttr.getOwner()).remove(virAttr);\n         }\n \n-        entityManager.remove(virAttr);\n+        entityManager().remove(virAttr);\n     }\n }"},{"sha":"46a06f6c66ae96363fab137cba62c2177c29587a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -45,7 +45,7 @@ public class JPAVirSchemaDAO extends AbstractDAO<VirSchema, String> implements V\n \n     @Override\n     public VirSchema find(final String key) {\n-        return entityManager.find(JPAVirSchema.class, key);\n+        return entityManager().find(JPAVirSchema.class, key);\n     }\n \n     @Override\n@@ -54,15 +54,15 @@ public List<VirSchema> findByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n                 append(JPAVirSchema.class.getSimpleName()).\n                 append(\" e WHERE e.anyTypeClass=:anyTypeClass\");\n \n-        TypedQuery<VirSchema> query = entityManager.createQuery(queryString.toString(), VirSchema.class);\n+        TypedQuery<VirSchema> query = entityManager().createQuery(queryString.toString(), VirSchema.class);\n         query.setParameter(\"anyTypeClass\", anyTypeClass);\n \n         return query.getResultList();\n     }\n \n     @Override\n     public List<VirSchema> findAll() {\n-        TypedQuery<VirSchema> query = entityManager.createQuery(\n+        TypedQuery<VirSchema> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAVirSchema.class.getSimpleName() + \" e\", VirSchema.class);\n         return query.getResultList();\n     }\n@@ -73,15 +73,15 @@ public <T extends VirAttr<?>> List<T> findAttrs(final VirSchema schema, final Cl\n                 append(((JPAVirAttrDAO) virAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n                 append(\" e WHERE e.schema=:schema\");\n \n-        TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n+        TypedQuery<T> query = entityManager().createQuery(queryString.toString(), reference);\n         query.setParameter(\"schema\", schema);\n \n         return query.getResultList();\n     }\n \n     @Override\n     public VirSchema save(final VirSchema virSchema) {\n-        return entityManager.merge(virSchema);\n+        return entityManager().merge(virSchema);\n     }\n \n     @Override\n@@ -106,6 +106,6 @@ public void delete(final String key) {\n             schema.getAnyTypeClass().remove(schema);\n         }\n \n-        entityManager.remove(schema);\n+        entityManager().remove(schema);\n     }\n }"},{"sha":"2913dc6653a6a87fb17a03ee2aaabfcd5c244288","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -125,7 +125,7 @@ public Long getKey() {\n \n     @Override\n     public AnyType getType() {\n-        return ApplicationContextProvider.getApplicationContext().getBean(AnyTypeDAO.class).findGroup();\n+        return ApplicationContextProvider.getBeanFactory().getBean(AnyTypeDAO.class).findGroup();\n     }\n \n     @Override"},{"sha":"463408ee3d407d055ab1ecbda7a47fb02174e7ad","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/AbstractProvisioningTask.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractProvisioningTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractProvisioningTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractProvisioningTask.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -80,15 +80,15 @@ public abstract class AbstractProvisioningTask extends JPASchedTask implements P\n     @Enumerated(EnumType.STRING)\n     protected MatchingRule matchingRule;\n \n-    public AbstractProvisioningTask(final TaskType type, final String jobClassName) {\n+    public AbstractProvisioningTask(final TaskType type, final String jobDelegateClassName) {\n         super();\n \n         this.type = type;\n-        super.setJobClassName(jobClassName);\n+        super.setJobDelegateClassName(jobDelegateClassName);\n     }\n \n     @Override\n-    public void setJobClassName(final String jobClassName) {\n+    public void setJobDelegateClassName(final String jobClassName) {\n         // fixed to SyncJob, cannot be changed\n     }\n "},{"sha":"190cc0fdcce48d060d9a86a959506fce7175cd77","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTask.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.task.AnyFilter;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n-import org.apache.syncope.core.provisioning.api.job.PushJob;\n \n @Entity\n @DiscriminatorValue(\"PushTask\")\n@@ -59,7 +58,7 @@ public class JPAPushTask extends AbstractProvisioningTask implements PushTask {\n      * Default constructor.\n      */\n     public JPAPushTask() {\n-        super(TaskType.PUSH, PushJob.class.getName());\n+        super(TaskType.PUSH, null);\n     }\n \n     @Override"},{"sha":"4f650bad706591bdd6880cce82d6683ef095c617","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASchedTask.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -34,8 +34,7 @@ public class JPASchedTask extends JPATask implements SchedTask {\n \n     protected String cronExpression;\n \n-    @NotNull\n-    protected String jobClassName;\n+    protected String jobDelegateClassName;\n \n     @NotNull\n     protected String name;\n@@ -58,13 +57,13 @@ public void setCronExpression(final String cronExpression) {\n     }\n \n     @Override\n-    public String getJobClassName() {\n-        return jobClassName;\n+    public String getJobDelegateClassName() {\n+        return jobDelegateClassName;\n     }\n \n     @Override\n-    public void setJobClassName(final String jobClassName) {\n-        this.jobClassName = jobClassName;\n+    public void setJobDelegateClassName(final String jobDelegateClassName) {\n+        this.jobDelegateClassName = jobDelegateClassName;\n     }\n \n     @Override"},{"sha":"f2da581ce958517ad6a741171bafed3052036d1a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASyncTask.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -40,7 +40,6 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n-import org.apache.syncope.core.provisioning.api.job.SyncJob;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n@@ -73,7 +72,7 @@ public class JPASyncTask extends AbstractProvisioningTask implements SyncTask {\n      * Default constructor.\n      */\n     public JPASyncTask() {\n-        super(TaskType.SYNCHRONIZATION, SyncJob.class.getName());\n+        super(TaskType.SYNCHRONIZATION, null);\n     }\n \n     @Override"},{"sha":"1f153daa838c3edf364ef814bd78115de55a1768","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -55,7 +55,6 @@\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.validation.entity.UserCheck;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPASecurityQuestion;\n import org.apache.syncope.core.misc.security.Encryptor;\n@@ -75,7 +74,6 @@\n @Entity\n @Table(name = JPAUser.TABLE)\n @Cacheable\n-@UserCheck\n public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> implements User {\n \n     private static final long serialVersionUID = -3905046855521446823L;\n@@ -212,7 +210,7 @@ public Long getKey() {\n \n     @Override\n     public AnyType getType() {\n-        return ApplicationContextProvider.getApplicationContext().getBean(AnyTypeDAO.class).findUser();\n+        return ApplicationContextProvider.getBeanFactory().getBean(AnyTypeDAO.class).findUser();\n     }\n \n     @Override\n@@ -252,9 +250,13 @@ public String getClearPassword() {\n         return clearPassword;\n     }\n \n+    public void setClearPassword(final String clearPassword) {\n+        this.clearPassword = clearPassword;\n+    }\n+\n     @Override\n     public void removeClearPassword() {\n-        clearPassword = null;\n+        setClearPassword(null);\n     }\n \n     @Override"},{"sha":"3e44864b60ea87ae7f77862fc23bb43b39b85907","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/spring/CommonEntityManagerFactoryConf.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FCommonEntityManagerFactoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FCommonEntityManagerFactoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FCommonEntityManagerFactoryConf.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.spring;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.ValidationMode;\n+import javax.sql.DataSource;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitPostProcessor;\n+\n+/**\n+ * Container for common configuration options among all EntityManagerFactory entities (one for each domain).\n+ * <br/>\n+ * Acts as a commodity place for fetching each domain's {@link DataSource}..\n+ */\n+public class CommonEntityManagerFactoryConf implements DomainsHolder, InitializingBean, ApplicationContextAware {\n+\n+    private ApplicationContext ctx;\n+\n+    private final Map<String, DataSource> domains = new HashMap<>();\n+\n+    private String[] packagesToScan;\n+\n+    private ValidationMode validationMode;\n+\n+    private PersistenceUnitPostProcessor[] postProcessors;\n+\n+    private final Map<String, Object> jpaPropertyMap = new HashMap<>();\n+\n+    @Override\n+    public void setApplicationContext(final ApplicationContext ctx) throws BeansException {\n+        this.ctx = ctx;\n+    }\n+\n+    @Override\n+    public void afterPropertiesSet() {\n+        for (Map.Entry<String, DataSource> entry : ctx.getBeansOfType(DataSource.class).entrySet()) {\n+            if (!entry.getKey().startsWith(\"local\")) {\n+                this.domains.put(\n+                        StringUtils.substringBefore(entry.getKey(), DataSource.class.getSimpleName()),\n+                        entry.getValue());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, DataSource> getDomains() {\n+        return domains;\n+    }\n+\n+    public String[] getPackagesToScan() {\n+        return packagesToScan;\n+    }\n+\n+    public void setPackagesToScan(final String... packagesToScan) {\n+        this.packagesToScan = packagesToScan;\n+    }\n+\n+    public ValidationMode getValidationMode() {\n+        return validationMode;\n+    }\n+\n+    public void setValidationMode(final ValidationMode validationMode) {\n+        this.validationMode = validationMode;\n+    }\n+\n+    public PersistenceUnitPostProcessor[] getPersistenceUnitPostProcessors() {\n+        return postProcessors;\n+    }\n+\n+    public void setPersistenceUnitPostProcessors(final PersistenceUnitPostProcessor... postProcessors) {\n+        this.postProcessors = postProcessors;\n+    }\n+\n+    public Map<String, ?> getJpaPropertyMap() {\n+        return jpaPropertyMap;\n+    }\n+\n+    public void setJpaPropertyMap(final Map<String, ?> jpaProperties) {\n+        if (jpaProperties != null) {\n+            this.jpaPropertyMap.putAll(jpaProperties);\n+        }\n+    }\n+\n+}"},{"sha":"a959f963dc74698d828891ba0cb86cfdf2af47d5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/spring/DomainEntityManagerFactoryBean.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FDomainEntityManagerFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FDomainEntityManagerFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FDomainEntityManagerFactoryBean.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.spring;\n+\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+/**\n+ * Extension of {@link LocalContainerEntityManagerFactoryBean} relying on {@link CommonEntityManagerFactoryConf} for\n+ * common configuration options.\n+ */\n+public class DomainEntityManagerFactoryBean extends LocalContainerEntityManagerFactoryBean {\n+\n+    private static final long serialVersionUID = 49152547930966545L;\n+\n+    public void setCommonEntityManagerFactoryConf(final CommonEntityManagerFactoryConf commonEMFConf) {\n+        super.setJpaPropertyMap(commonEMFConf.getJpaPropertyMap());\n+\n+        if (commonEMFConf.getPackagesToScan() != null) {\n+            super.setPackagesToScan(commonEMFConf.getPackagesToScan());\n+        }\n+\n+        super.setValidationMode(commonEMFConf.getValidationMode());\n+\n+        if (commonEMFConf.getPersistenceUnitPostProcessors() != null) {\n+            super.setPersistenceUnitPostProcessors(commonEMFConf.getPersistenceUnitPostProcessors());\n+        }\n+    }\n+\n+}"},{"sha":"42779ed9083caaa81d70b38c061b7fc7c46dcf83","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/spring/DomainTransactionInterceptor.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FDomainTransactionInterceptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FDomainTransactionInterceptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FDomainTransactionInterceptor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.spring;\n+\n+import java.lang.reflect.Method;\n+import org.aopalliance.intercept.MethodInvocation;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.transaction.interceptor.DefaultTransactionAttribute;\n+import org.springframework.transaction.interceptor.TransactionAttribute;\n+import org.springframework.transaction.interceptor.TransactionAttributeSource;\n+import org.springframework.transaction.interceptor.TransactionInterceptor;\n+\n+/**\n+ * Extends the standard {@link TransactionInterceptor} by dynamically setting the appropriate\n+ * {@link TransactionAttribute} qualifier according to the authentication domain of the caller - retrieved via\n+ * {@link AuthContextUtils#getDomain()}.\n+ */\n+public class DomainTransactionInterceptor extends TransactionInterceptor {\n+\n+    private static final long serialVersionUID = 5113728988680448551L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DomainTransactionInterceptor.class);\n+\n+    @Override\n+    public TransactionAttributeSource getTransactionAttributeSource() {\n+        final TransactionAttributeSource origTxAttrSource = super.getTransactionAttributeSource();\n+\n+        return new TransactionAttributeSource() {\n+\n+            @Override\n+            public TransactionAttribute getTransactionAttribute(final Method method, final Class<?> targetClass) {\n+                TransactionAttribute txAttr = origTxAttrSource.getTransactionAttribute(method, targetClass);\n+\n+                if (txAttr instanceof DefaultTransactionAttribute) {\n+                    ((DefaultTransactionAttribute) txAttr).setQualifier(AuthContextUtils.getDomain());\n+                }\n+\n+                return txAttr;\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public Object invoke(final MethodInvocation invocation) throws Throwable {\n+        try {\n+            return super.invoke(invocation);\n+        } catch (Throwable e) {\n+            LOG.debug(\"Error during {} invocation\", invocation.getMethod(), e);\n+            throw e;\n+        }\n+    }\n+}"},{"sha":"e9834263280302f6965c70758ac00c27fb2ca5fd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/spring/SpringComponentReplacer.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FSpringComponentReplacer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FSpringComponentReplacer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FSpringComponentReplacer.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.spring;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.interceptor.TransactionInterceptor;\n+\n+/**\n+ * Hack for dynamically replacing standard {@link TransactionInterceptor} with\n+ * {@link DomainTransactionInterceptor} in Spring context.\n+ */\n+@Component\n+public class SpringComponentReplacer implements BeanFactoryPostProcessor {\n+\n+    @Override\n+    public void postProcessBeanFactory(final ConfigurableListableBeanFactory factory) throws BeansException {\n+        for (String name : factory.getBeanNamesForType(TransactionInterceptor.class)) {\n+            BeanDefinition bd = factory.getBeanDefinition(name);\n+            bd.setBeanClassName(DomainTransactionInterceptor.class.getName());\n+        }\n+    }\n+}"},{"sha":"f1df70c97c5e1fe828b026d88c2711b0c5efec14","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/EntityValidationListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -49,7 +49,7 @@ public class EntityValidationListener {\n     @PrePersist\n     @PreUpdate\n     public void validate(final Object object) {\n-        final Validator validator = ApplicationContextProvider.getApplicationContext().getBean(Validator.class);\n+        final Validator validator = ApplicationContextProvider.getBeanFactory().getBean(Validator.class);\n         Set<ConstraintViolation<Object>> violations = validator.validate(object);\n         if (!violations.isEmpty()) {\n             LOG.warn(\"Bean validation errors found: {}\", violations);"},{"sha":"3c6449981a257e55a2300bc6b7bca13d2dc527eb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ProvisioningTaskValidator.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -37,11 +37,11 @@ public ProvisioningTaskValidator() {\n     }\n \n     @Override\n-    public boolean isValid(final ProvisioningTask object, final ConstraintValidatorContext context) {\n-        boolean isValid = schedV.isValid(object, context);\n+    public boolean isValid(final ProvisioningTask task, final ConstraintValidatorContext context) {\n+        boolean isValid = schedV.isValid(task, context);\n \n         if (isValid) {\n-            isValid = object.getResource() != null;\n+            isValid = task.getResource() != null;\n             if (!isValid) {\n                 LOG.error(\"Resource is null\");\n \n@@ -51,15 +51,15 @@ public boolean isValid(final ProvisioningTask object, final ConstraintValidatorC\n                         addPropertyNode(\"resource\").addConstraintViolation();\n             }\n \n-            if (!object.getActionsClassNames().isEmpty()) {\n-                for (String className : object.getActionsClassNames()) {\n+            if (!task.getActionsClassNames().isEmpty()) {\n+                for (String className : task.getActionsClassNames()) {\n                     Class<?> actionsClass = null;\n                     boolean isAssignable = false;\n                     try {\n                         actionsClass = Class.forName(className);\n-                        isAssignable = object instanceof JPASyncTask\n+                        isAssignable = task instanceof JPASyncTask\n                                 ? SyncActions.class.isAssignableFrom(actionsClass)\n-                                : object instanceof JPAPushTask\n+                                : task instanceof JPAPushTask\n                                         ? PushActions.class.isAssignableFrom(actionsClass)\n                                         : false;\n                     } catch (Exception e) {"},{"sha":"5c159c22ae3621bef6cfe3f68fd2359d681bd616","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SchedTaskValidator.java","status":"modified","additions":24,"deletions":20,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskValidator.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -21,39 +21,43 @@\n import java.text.ParseException;\n \n import javax.validation.ConstraintValidatorContext;\n+import org.apache.commons.lang3.ClassUtils;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n+import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.quartz.CronExpression;\n-import org.quartz.Job;\n \n public class SchedTaskValidator extends AbstractValidator<SchedTaskCheck, SchedTask> {\n \n     @Override\n-    public boolean isValid(final SchedTask object, final ConstraintValidatorContext context) {\n-        boolean isValid;\n+    public boolean isValid(final SchedTask task, final ConstraintValidatorContext context) {\n+        boolean isValid = true;\n \n-        Class<?> jobClass = null;\n-        try {\n-            jobClass = Class.forName(object.getJobClassName());\n-            isValid = Job.class.isAssignableFrom(jobClass);\n-        } catch (Exception e) {\n-            LOG.error(\"Invalid Job class specified\", e);\n-            isValid = false;\n-        }\n-        if (jobClass == null || !isValid) {\n-            isValid = false;\n+        if (!(task instanceof ProvisioningTask)) {\n+            Class<?> jobDelegateClass = null;\n+            try {\n+                jobDelegateClass = ClassUtils.getClass(task.getJobDelegateClassName());\n+                isValid = SchedTaskJobDelegate.class.isAssignableFrom(jobDelegateClass);\n+            } catch (Exception e) {\n+                LOG.error(\"Invalid JobDelegate class specified\", e);\n+                isValid = false;\n+            }\n+            if (jobDelegateClass == null || !isValid) {\n+                isValid = false;\n \n-            context.disableDefaultConstraintViolation();\n-            context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidSchedTask, \"Invalid job class name\")).\n-                    addPropertyNode(\"jobClassName\").addConstraintViolation();\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidSchedTask, \"Invalid job delegate class name\")).\n+                        addPropertyNode(\"jobDelegateClassName\").addConstraintViolation();\n+            }\n         }\n \n-        if (isValid && object.getCronExpression() != null) {\n+        if (isValid && task.getCronExpression() != null) {\n             try {\n-                new CronExpression(object.getCronExpression());\n+                new CronExpression(task.getCronExpression());\n             } catch (ParseException e) {\n-                LOG.error(\"Invalid cron expression '\" + object.getCronExpression() + \"'\", e);\n+                LOG.error(\"Invalid cron expression '\" + task.getCronExpression() + \"'\", e);\n                 isValid = false;\n \n                 context.disableDefaultConstraintViolation();"},{"sha":"2d9fec67cdb1cba1e7ac89d0f0c0c85668a029d2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/UserCheck.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserCheck.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.validation.entity;\n-\n-import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-import javax.validation.Constraint;\n-import javax.validation.Payload;\n-\n-@Target({ ElementType.TYPE })\n-@Retention(RetentionPolicy.RUNTIME)\n-@Constraint(validatedBy = UserValidator.class)\n-@Documented\n-public @interface UserCheck {\n-\n-    String message() default \"{org.apache.syncope.core.persistence.validation.user}\";\n-\n-    Class<?>[] groups() default {};\n-\n-    Class<? extends Payload>[] payload() default {};\n-}"},{"sha":"e142de349973785cad3fc176494a8b288af0d82c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/UserValidator.java","status":"removed","additions":0,"deletions":199,"changes":199,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -1,199 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.validation.entity;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.annotation.Resource;\n-import javax.validation.ConstraintValidatorContext;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n-import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.misc.policy.AccountPolicyEnforcer;\n-import org.apache.syncope.core.misc.policy.AccountPolicyException;\n-import org.apache.syncope.core.misc.policy.PasswordPolicyEnforcer;\n-import org.apache.syncope.core.misc.policy.PolicyEvaluator;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-public class UserValidator extends AbstractValidator<UserCheck, User> {\n-\n-    @Resource(name = \"adminUser\")\n-    private String adminUser;\n-\n-    @Resource(name = \"anonymousUser\")\n-    private String anonymousUser;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private RealmDAO realmDAO;\n-\n-    @Autowired\n-    private PolicyEvaluator evaluator;\n-\n-    @Autowired\n-    private PasswordPolicyEnforcer ppEnforcer;\n-\n-    @Autowired\n-    private AccountPolicyEnforcer apEnforcer;\n-\n-    @Override\n-    public boolean isValid(final User user, final ConstraintValidatorContext context) {\n-        context.disableDefaultConstraintViolation();\n-\n-        // need to treat it explicitly, otherwise policy evaluation will silently fail\n-        if (user.getRealm() == null) {\n-            context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidRealm, \"realm not specified\")).\n-                    addPropertyNode(\"realm\").addConstraintViolation();\n-\n-            return false;\n-        }\n-\n-        // ------------------------------\n-        // Verify password policies\n-        // ------------------------------\n-        LOG.debug(\"Password Policy enforcement\");\n-\n-        try {\n-            int maxPPSpecHistory = 0;\n-            for (Policy policy : getPasswordPolicies(user)) {\n-                // evaluate policy\n-                PasswordPolicySpec ppSpec = evaluator.evaluate(policy, user);\n-                // enforce policy\n-                ppEnforcer.enforce(ppSpec, policy.getType(), user);\n-\n-                if (ppSpec.getHistoryLength() > maxPPSpecHistory) {\n-                    maxPPSpecHistory = ppSpec.getHistoryLength();\n-                }\n-            }\n-\n-            // update user's password history with encrypted password\n-            if (maxPPSpecHistory > 0 && user.getPassword() != null) {\n-                user.getPasswordHistory().add(user.getPassword());\n-            }\n-            // keep only the last maxPPSpecHistory items in user's password history\n-            if (maxPPSpecHistory < user.getPasswordHistory().size()) {\n-                for (int i = 0; i < user.getPasswordHistory().size() - maxPPSpecHistory; i++) {\n-                    user.getPasswordHistory().remove(i);\n-                }\n-            }\n-        } catch (Exception e) {\n-            LOG.debug(\"Invalid password\");\n-\n-            context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidPassword, e.getMessage())).\n-                    addPropertyNode(\"password\").addConstraintViolation();\n-\n-            return false;\n-        } finally {\n-            // password has been validated, let's remove its clear version\n-            user.removeClearPassword();\n-        }\n-        // ------------------------------\n-\n-        // ------------------------------\n-        // Verify account policies\n-        // ------------------------------\n-        LOG.debug(\"Account Policy enforcement\");\n-\n-        try {\n-            if (adminUser.equals(user.getUsername()) || anonymousUser.equals(user.getUsername())) {\n-                throw new AccountPolicyException(\"Not allowed: \" + user.getUsername());\n-            }\n-\n-            // invalid username\n-            for (Policy policy : getAccountPolicies(user)) {\n-                // evaluate policy\n-                AccountPolicySpec accountPolicy = evaluator.evaluate(policy, user);\n-\n-                // enforce policy\n-                apEnforcer.enforce(accountPolicy, policy.getType(), user);\n-            }\n-        } catch (Exception e) {\n-            LOG.debug(\"Invalid username\");\n-\n-            context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidUsername, e.getMessage())).\n-                    addPropertyNode(\"username\").addConstraintViolation();\n-\n-            return false;\n-        }\n-        // ------------------------------\n-\n-        return true;\n-    }\n-\n-    private List<PasswordPolicy> getPasswordPolicies(final User user) {\n-        List<PasswordPolicy> policies = new ArrayList<>();\n-\n-        PasswordPolicy policy;\n-\n-        // add resource policies\n-        for (ExternalResource resource : userDAO.findAllResources(user)) {\n-            policy = resource.getPasswordPolicy();\n-            if (policy != null) {\n-                policies.add(policy);\n-            }\n-        }\n-\n-        // add realm policies\n-        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n-            policy = realm.getPasswordPolicy();\n-            if (policy != null) {\n-                policies.add(policy);\n-            }\n-        }\n-\n-        return policies;\n-    }\n-\n-    private List<AccountPolicy> getAccountPolicies(final User user) {\n-        List<AccountPolicy> policies = new ArrayList<>();\n-\n-        AccountPolicy policy;\n-\n-        // add resource policies\n-        for (ExternalResource resource : userDAO.findAllResources(user)) {\n-            policy = resource.getAccountPolicy();\n-            if (policy != null) {\n-                policies.add(policy);\n-            }\n-        }\n-\n-        // add realm policies\n-        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n-            policy = realm.getAccountPolicy();\n-            if (policy != null) {\n-                policies.add(policy);\n-            }\n-        }\n-\n-        return policies;\n-    }\n-}"},{"sha":"44ffb17cda9da7617a76362c4f0b8080ce3ae397","filename":"core/persistence-jpa/src/main/resources/audit/audit.sql","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit.sql?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -21,4 +21,6 @@ CREATE TABLE IF NOT EXISTS SYNCOPEAUDIT (\n   LOGGER VARCHAR(255) NOT NULL,\n   MESSAGE TEXT NOT NULL,\n   THROWABLE TEXT\n-)\n+);\n+\n+COMMIT;"},{"sha":"43fce14091dbf61bf020e531039ae49efd6048e8","filename":"core/persistence-jpa/src/main/resources/domains.xml","status":"renamed","additions":8,"deletions":20,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -21,32 +21,20 @@ under the License.\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\">\n-\n-  <bean id=\"entityManagerFactory\"\n-        class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n+  \n+  <import resource=\"classpath*:domains/*Domain.xml\"/>\n+    \n+  <bean id=\"commonEMFConf\" class=\"org.apache.syncope.core.persistence.jpa.spring.CommonEntityManagerFactoryConf\">\n     <property name=\"packagesToScan\" value=\"org.apache.syncope.core.persistence.jpa.entity\"/>\n     <property name=\"validationMode\" value=\"NONE\"/>\n-    <property name=\"mappingResources\">\n-      <list>\n-        <value>${jpa.orm}</value>\n-      </list>\n-    </property>\n-    <property name=\"persistenceUnitName\" value=\"syncopePersistenceUnit\"/>\n     <property name=\"persistenceUnitPostProcessors\">\n       <list>\n         <bean class=\"org.apache.syncope.core.persistence.jpa.spring.MultiJarAwarePersistenceUnitPostProcessor\"/>\n       </list>\n     </property>\n-    <property name=\"dataSource\" ref=\"dataSource\"/>\n-    <property name=\"jpaVendorAdapter\">\n-      <bean class=\"org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter\">\n-        <property name=\"showSql\" value=\"false\"/>\n-        <property name=\"generateDdl\" value=\"true\"/>\n-        <property name=\"databasePlatform\" value=\"${jpa.dialect}\"/>\n-      </bean>\n-    </property>\n     <property name=\"jpaPropertyMap\">\n       <map>\n+        <entry key=\"openjpa.Log\" value=\"slf4j\"/>\n         <!--<entry key=\"openjpa.Log\" value=\"SQL=TRACE\"/>\n         <entry key=\"openjpa.ConnectionFactoryProperties\" \n         value=\"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=80\"/>-->\n@@ -62,7 +50,7 @@ under the License.\n         <entry key=\"openjpa.QueryCache\" value=\"true\"/>\n         <entry key=\"openjpa.RemoteCommitProvider\" value=\"sjvm\"/>\n       </map>\n-    </property>\n+    </property>    \n   </bean>\n-\n-</beans>\n\\ No newline at end of file\n+  \n+</beans>","previous_filename":"core/persistence-jpa/src/main/resources/persistenceContextEMFactory.xml"},{"sha":"177e98835f361b6759d0be6dce8cdbd901fabfb8","filename":"core/persistence-jpa/src/main/resources/domains/Master.properties","status":"renamed","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMaster.properties?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -14,18 +14,15 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-content.directory=${conf.directory}\n-jpa.driverClassName=org.h2.Driver\n-jpa.url=jdbc:h2:mem:syncopedb;DB_CLOSE_DELAY=-1\n-jpa.username=sa\n-jpa.password=\n-jpa.dialect=org.apache.openjpa.jdbc.sql.H2Dictionary\n-jpa.pool.validationQuery=SELECT 1\n-jpa.orm=META-INF/spring-orm.xml\n-# note: other connection pool settings can also be configured here, see persistenceContext.xml\n-quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n-quartz.scheduler.idleWaitTime=5000\n-quartz.sql=tables_h2.sql\n-audit.sql=audit.sql\n-database.schema=\n+Master.driverClassName=org.postgresql.Driver\n+Master.url=jdbc:postgresql://localhost:5432/syncope\n+Master.schema=\n+Master.username=syncope\n+Master.password=syncope\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary\n+Master.orm=META-INF/spring-orm.xml\n \n+# note: other connection pool settings can also be configured here, see DataSource definition\n+Master.pool.validationQuery=SELECT 1\n+\n+Master.audit.sql=audit.sql","previous_filename":"core/persistence-jpa/src/test/resources/persistence.properties"},{"sha":"d90518f0e0ae69212d50a4b1f87b6290b7bd7956","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"renamed","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -85,6 +85,12 @@ under the License.\n   <CPlainAttr id=\"12\" owner_id=\"1\" schema_name=\"tasks.interruptMaxRetries\"/>\n   <CPlainAttrValue id=\"12\" attribute_id=\"12\" longValue=\"20\"/>\n \n+  <AnyType name=\"USER\" kind=\"USER\"/>\n+  <AnyTypeClass name=\"BaseUser\"/>\n+  <AnyType_AnyTypeClass anyType_name=\"USER\" anyTypeClass_name=\"baseUser\"/>\n+\n+  <AnyType name=\"GROUP\" kind=\"GROUP\"/>\n+  \n   <!-- For usage with admin console -->\n   <PlainSchema name=\"admin.user.layout\" type=\"String\"\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n@@ -99,19 +105,20 @@ under the License.\n   <PlainSchema name=\"self.membership.layout\" type=\"String\"\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n         \n-  <PlainSchema name=\"email\" type=\"String\"\n+  <PlainSchema name=\"email\" type=\"String\" anyTypeClass_name=\"BaseUser\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                validatorClass=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n   \n   <!-- Password reset notifications -->\n   <Notification id=\"1\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset request\" template=\"requestPasswordReset\" \n-                traceLevel=\"FAILURES\" userAbout=\"token!=$null\"/> \n+                traceLevel=\"FAILURES\"/> \n+  <AnyAbout id=\"1\" anyType_name=\"USER\" notification_id=\"1\" about=\"token!=$null\"/>\n   <Notification_events Notification_id=\"1\" event=\"[CUSTOM]:[]:[]:[requestPasswordReset]:[SUCCESS]\"/>\n   \n   <Notification id=\"2\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template=\"confirmPasswordReset\" \n-                traceLevel=\"FAILURES\" userAbout=\"token!=$null\"/> \n+                traceLevel=\"FAILURES\"/> \n   <Notification_events Notification_id=\"2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n \n </dataset>","previous_filename":"core/persistence-jpa/src/main/resources/content.xml"},{"sha":"5cb38c2a1cc51dc44a5ec21306a4c1405d2c4b75","filename":"core/persistence-jpa/src/main/resources/domains/MasterDomain.xml","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterDomain.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterDomain.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterDomain.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n+       xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd                           \n+                           http://www.springframework.org/schema/tx\n+                           http://www.springframework.org/schema/tx/spring-tx.xsd\n+                           http://www.springframework.org/schema/util\n+                           http://www.springframework.org/schema/util/spring-util.xsd\">\n+  \n+  <bean id=\"MasterContentXML\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n+    <property name=\"primary\" value=\"file:${content.directory}/domains/MasterContent.xml\"/>\n+    <property name=\"fallback\" value=\"classpath:domains/MasterContent.xml\"/>\n+  </bean>\n+  <bean id=\"MasterProperties\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n+    <property name=\"primary\" value=\"file:${content.directory}/domains/Master.properties\"/>\n+    <property name=\"fallback\" value=\"classpath:domains/Master.properties\"/>\n+  </bean>\n+  <bean id=\"MasterDatabaseSchema\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${Master.schema}\"/>\n+  </bean>\n+\n+  <!-- Use JNDI datasource as default but, when not available, revert to\n+  local datasource, with different properties for execution and testing. \n+  In any case, get all JDBC connections with a determined isolation level. -->\n+  <bean id=\"MasterDataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n+    <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeMasterDataSource\"/>\n+    <property name=\"defaultObject\" ref=\"localMasterDataSource\"/>\n+  </bean>\n+\n+  <bean id=\"localMasterDataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\" destroy-method=\"close\">\n+    <property name=\"driverClassName\" value=\"${Master.driverClassName}\"/>\n+    <property name=\"url\" value=\"${Master.url}\"/>\n+    <property name=\"username\" value=\"${Master.username}\"/>\n+    <property name=\"password\" value=\"${Master.password}\"/>\n+    <!-- connection pool configuration - transaction isolation, default READ_COMMITTED (see SYNCOPE-202) -->\n+    <property name=\"defaultTransactionIsolation\">\n+      <util:constant static-field=\"${Master.pool.defaultTransactionIsolation:java.sql.Connection.TRANSACTION_READ_COMMITTED}\"/>\n+    </property>\n+    <!-- connection pool configuration - default values taken from BasicDataSource default values -->\n+    <property name=\"initialSize\" value=\"${Master.pool.initialSize:0}\"/>\n+    <property name=\"maxTotal\" value=\"${Master.pool.maxActive:8}\"/>\n+    <property name=\"maxIdle\" value=\"${Master.pool.maxIdle:8}\"/>\n+    <property name=\"minIdle\" value=\"${Master.pool.minIdle:0}\"/>\n+    <property name=\"maxWaitMillis\" value=\"${Master.pool.maxWait:-1}\"/>\n+    <property name=\"validationQuery\" value=\"${Master.pool.validationQuery}\"/>\n+    <property name=\"validationQueryTimeout\" value=\"${Master.pool.validationQueryTimeout:-1}\"/>\n+    <property name=\"testOnBorrow\" value=\"${Master.pool.testOnBorrow:true}\"/>\n+    <property name=\"testOnReturn\" value=\"${Master.pool.testOnReturn:false}\"/>\n+    <property name=\"testWhileIdle\" value=\"${Master.pool.testWhileIdle:false}\"/>\n+    <property name=\"timeBetweenEvictionRunsMillis\" value=\"${Master.pool.timeBetweenEvictionRunsMillis:-1}\"/>\n+    <property name=\"numTestsPerEvictionRun\" value=\"${Master.pool.numTestsPerEvictionRun:3}\"/>\n+    <property name=\"minEvictableIdleTimeMillis\" value=\"${Master.pool.minEvictableIdleTimeMillis:1800000}\"/>\n+    <property name=\"removeAbandonedOnBorrow\" value=\"${Master.pool.removeAbandoned:false}\"/>\n+    <property name=\"removeAbandonedOnMaintenance\" value=\"${Master.pool.removeAbandoned:false}\"/>\n+    <property name=\"removeAbandonedTimeout\" value=\"${Master.pool.removeAbandonedTimeout:300}\"/>\n+    <property name=\"logAbandoned\" value=\"${Master.pool.logAbandoned:false}\"/>\n+  </bean>\n+  \n+  <bean class=\"org.springframework.jdbc.datasource.init.DataSourceInitializer\">\n+    <property name=\"dataSource\" ref=\"MasterDataSource\"/>\n+    <property name=\"enabled\" value=\"true\"/>\n+    <property name=\"databasePopulator\">\n+      <bean class=\"org.springframework.jdbc.datasource.init.ResourceDatabasePopulator\">\n+        <property name=\"continueOnError\" value=\"true\"/>\n+        <property name=\"ignoreFailedDrops\" value=\"true\"/>\n+        <property name=\"sqlScriptEncoding\" value=\"UTF-8\"/>\n+        <property name=\"scripts\">\n+          <array>\n+            <value type=\"org.springframework.core.io.Resource\">\n+              classpath:/audit/${Master.audit.sql}\n+            </value>\n+          </array>\n+        </property>\n+      </bean>\n+    </property>\n+  </bean>\n+  \n+  <bean id=\"MasterEntityManagerFactory\"\n+        class=\"org.apache.syncope.core.persistence.jpa.spring.DomainEntityManagerFactoryBean\">\n+    <property name=\"mappingResources\">\n+      <list>\n+        <value>${Master.orm}</value>\n+      </list>\n+    </property>\n+    <property name=\"persistenceUnitName\" value=\"Master\"/>\n+    <property name=\"dataSource\" ref=\"MasterDataSource\"/>\n+    <property name=\"jpaVendorAdapter\">\n+      <bean class=\"org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter\">\n+        <property name=\"showSql\" value=\"false\"/>\n+        <property name=\"generateDdl\" value=\"true\"/>\n+        <property name=\"databasePlatform\" value=\"${Master.databasePlatform}\"/>\n+      </bean>\n+    </property>\n+    <property name=\"commonEntityManagerFactoryConf\" ref=\"commonEMFConf\"/>\n+  </bean>  \n+\n+  <bean id=\"MasterTransactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n+    <property name=\"entityManagerFactory\" ref=\"MasterEntityManagerFactory\"/>\n+    <qualifier value=\"Master\"/>\n+  </bean>\n+  \n+  <tx:annotation-driven transaction-manager=\"MasterTransactionManager\"/>\n+  \n+</beans>\n\\ No newline at end of file"},{"sha":"5aa696c30fd2020cf57c51ef9d062554fa633ca7","filename":"core/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -15,16 +15,3 @@\n # specific language governing permissions and limitations\n # under the License.\n content.directory=${conf.directory}\n-jpa.driverClassName=org.postgresql.Driver\n-jpa.url=jdbc:postgresql://localhost:5432/syncope\n-jpa.username=syncope\n-jpa.password=syncope\n-jpa.dialect=org.apache.openjpa.jdbc.sql.PostgresDictionary\n-jpa.pool.validationQuery=SELECT 1\n-jpa.orm=META-INF/spring-orm.xml\n-# note: other connection pool settings can also be configured here, see persistenceContext.xml\n-quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n-quartz.sql=tables_postgres.sql\n-audit.sql=audit.sql\n-database.schema=\n-"},{"sha":"ad2d837114cd7359542141f3f336ec3d9018f87c","filename":"core/persistence-jpa/src/main/resources/persistenceContext.xml","status":"modified","additions":6,"deletions":87,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -20,53 +20,19 @@ under the License.\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n-       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n-       xmlns:util=\"http://www.springframework.org/schema/util\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://www.springframework.org/schema/context\n-                           http://www.springframework.org/schema/context/spring-context.xsd\n-                           http://www.springframework.org/schema/tx\n-                           http://www.springframework.org/schema/tx/spring-tx.xsd\n-                           http://www.springframework.org/schema/util\n-                           http://www.springframework.org/schema/util/spring-util.xsd\">\n-\n+                           http://www.springframework.org/schema/context/spring-context.xsd\">\n   \n-  <import resource=\"classpath:persistenceContextEMFactory.xml\"/>\n+  <import resource=\"domains.xml\"/>\n \n-  <bean id=\"nonJPAdbInitializer\" class=\"org.springframework.jdbc.datasource.init.DataSourceInitializer\">\n-    <property name=\"dataSource\" ref=\"dataSource\"/>\n-    <property name=\"enabled\" value=\"true\"/>\n-    <property name=\"databasePopulator\">\n-      <bean class=\"org.springframework.jdbc.datasource.init.ResourceDatabasePopulator\">\n-        <property name=\"continueOnError\" value=\"true\"/>\n-        <property name=\"ignoreFailedDrops\" value=\"true\"/>\n-        <property name=\"sqlScriptEncoding\" value=\"UTF-8\"/>\n-        <property name=\"scripts\">\n-          <array>\n-            <value type=\"org.springframework.core.io.Resource\">\n-              classpath:/quartz/${quartz.sql}\n-            </value>\n-          </array>\n-        </property>\n-      </bean>\n-    </property>\n-  </bean>\n-  \n   <context:annotation-config/>\n+  \n   <context:component-scan base-package=\"org.apache.syncope.core.persistence.jpa\"/>\n \n-  <bean id=\"database.schema\" class=\"java.lang.String\">\n-    <constructor-arg value=\"${database.schema}\"/>\n-  </bean>\n-  <bean id=\"persistenceProperties\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n-    <property name=\"primary\" value=\"file:${content.directory}/persistence.properties\"/>\n-    <property name=\"fallback\" value=\"classpath:persistence.properties\"/>\n-  </bean>\n-  <bean id=\"contentXML\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n-    <property name=\"primary\" value=\"file:${content.directory}/content.xml\"/>\n-    <property name=\"fallback\" value=\"classpath:content.xml\"/>\n-  </bean>\n+  <bean class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"/>\n+\n   <bean id=\"viewsXML\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n     <property name=\"primary\" value=\"file:${content.directory}/views.xml\"/>\n     <property name=\"fallback\" value=\"classpath:views.xml\"/>\n@@ -75,52 +41,5 @@ under the License.\n     <property name=\"primary\" value=\"file:${content.directory}/indexes.xml\"/>\n     <property name=\"fallback\" value=\"classpath:indexes.xml\"/>\n   </bean>\n-\n-  <!-- Use JNDI datasource as default but, when not available, revert to\n-  local datasource, with different properties for execution and testing. \n-  In any case, get all JDBC connections with a determined isolation level. -->\n-  <bean id=\"dataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n-    <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeDataSource\"/>\n-    <property name=\"defaultObject\" ref=\"localDataSource\"/>\n-  </bean>\n-\n-  <bean id=\"localDataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\" destroy-method=\"close\">\n-    <property name=\"driverClassName\" value=\"${jpa.driverClassName}\"/>\n-    <property name=\"url\" value=\"${jpa.url}\"/>\n-    <property name=\"username\" value=\"${jpa.username}\"/>\n-    <property name=\"password\" value=\"${jpa.password}\"/>\n-    <!-- connection pool configuration - transaction isolation, default READ_COMMITTED (see SYNCOPE-202) -->\n-    <property name=\"defaultTransactionIsolation\">\n-      <util:constant static-field=\"${jpa.pool.defaultTransactionIsolation:java.sql.Connection.TRANSACTION_READ_COMMITTED}\"/>\n-    </property>\n-    <!-- connection pool configuration - default values taken from BasicDataSource default values -->\n-    <property name=\"initialSize\" value=\"${jpa.pool.initialSize:0}\"/>\n-    <property name=\"maxTotal\" value=\"${jpa.pool.maxActive:8}\"/>\n-    <property name=\"maxIdle\" value=\"${jpa.pool.maxIdle:8}\"/>\n-    <property name=\"minIdle\" value=\"${jpa.pool.minIdle:0}\"/>\n-    <property name=\"maxWaitMillis\" value=\"${jpa.pool.maxWait:-1}\"/>\n-    <property name=\"validationQuery\" value=\"${jpa.pool.validationQuery}\"/>\n-    <property name=\"validationQueryTimeout\" value=\"${jpa.pool.validationQueryTimeout:-1}\"/>\n-    <property name=\"testOnBorrow\" value=\"${jpa.pool.testOnBorrow:true}\"/>\n-    <property name=\"testOnReturn\" value=\"${jpa.pool.testOnReturn:false}\"/>\n-    <property name=\"testWhileIdle\" value=\"${jpa.pool.testWhileIdle:false}\"/>\n-    <property name=\"timeBetweenEvictionRunsMillis\" value=\"${jpa.pool.timeBetweenEvictionRunsMillis:-1}\"/>\n-    <property name=\"numTestsPerEvictionRun\" value=\"${jpa.pool.numTestsPerEvictionRun:3}\"/>\n-    <property name=\"minEvictableIdleTimeMillis\" value=\"${jpa.pool.minEvictableIdleTimeMillis:1800000}\"/>\n-    <property name=\"removeAbandonedOnBorrow\" value=\"${jpa.pool.removeAbandoned:false}\"/>\n-    <property name=\"removeAbandonedOnMaintenance\" value=\"${jpa.pool.removeAbandoned:false}\"/>\n-    <property name=\"removeAbandonedTimeout\" value=\"${jpa.pool.removeAbandonedTimeout:300}\"/>\n-    <property name=\"logAbandoned\" value=\"${jpa.pool.logAbandoned:false}\"/>\n-  </bean>\n-\n-  <bean id=\"entityManager\" class=\"org.springframework.orm.jpa.support.SharedEntityManagerBean\">\n-    <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n-  </bean>\n-\n-  <bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n-    <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n-  </bean>\n-  <tx:annotation-driven/>\n-\n-  <bean id=\"validator\" class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"/>\n+  \n </beans>"},{"sha":"201708fbc781c14cc5af17e7990d2f160a0d1963","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/AbstractTest.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,15 +18,21 @@\n  */\n package org.apache.syncope.core.persistence.jpa;\n \n+import javax.persistence.EntityManager;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.transaction.TransactionConfiguration;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = { \"classpath:persistenceTest.xml\" })\n+@TransactionConfiguration(transactionManager = \"MasterTransactionManager\")\n public abstract class AbstractTest {\n \n     @Autowired\n@@ -35,4 +41,14 @@ public abstract class AbstractTest {\n     @Autowired\n     protected AnyUtilsFactory anyUtilsFactory;\n \n+    protected EntityManager entityManager() {\n+        EntityManager entityManager = EntityManagerFactoryUtils.getTransactionalEntityManager(\n+                EntityManagerFactoryUtils.findEntityManagerFactory(\n+                        ApplicationContextProvider.getBeanFactory(), AuthContextUtils.getDomain()));\n+        if (entityManager == null) {\n+            throw new IllegalStateException(\"Could not find EntityManager for domain \" + AuthContextUtils.getDomain());\n+        }\n+\n+        return entityManager;\n+    }\n }"},{"sha":"a39de84d140750022c463af86a8a90224c77b3b2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.misc.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.misc.security.SyncopeGrantedAuthority;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.context.transaction.TransactionConfiguration;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@TransactionConfiguration(transactionManager = \"TwoTransactionManager\")\n+@Transactional\n+public class MultitenancyTest extends AbstractTest {\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @BeforeClass\n+    public static void setAuthContext() {\n+        List<GrantedAuthority> authorities = CollectionUtils.collect(Entitlement.values(),\n+                new Transformer<String, GrantedAuthority>() {\n+\n+                    @Override\n+                    public GrantedAuthority transform(final String entitlement) {\n+                        return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+                    }\n+                }, new ArrayList<GrantedAuthority>());\n+\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new org.springframework.security.core.userdetails.User(\n+                        \"admin\", \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(\"Two\"));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+    }\n+\n+    @AfterClass\n+    public static void unsetAuthContext() {\n+        SecurityContextHolder.getContext().setAuthentication(null);\n+    }\n+\n+    @Test\n+    public void readPlainSchemas() {\n+        assertEquals(18, plainSchemaDAO.findAll().size());\n+    }\n+\n+    @Test\n+    public void readRealm() {\n+        assertEquals(1, realmDAO.findAll().size());\n+        assertEquals(realmDAO.getRoot(), realmDAO.findAll().get(0));\n+    }\n+\n+    @Test\n+    public void createUser() {\n+        assertNull(realmDAO.getRoot().getPasswordPolicy());\n+        assertTrue(userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 1000).isEmpty());\n+\n+        User user = entityFactory.newEntity(User.class);\n+        user.setRealm(realmDAO.getRoot());\n+        user.setPassword(\"password\", CipherAlgorithm.SHA256);\n+        user.setUsername(\"username\");\n+\n+        User actual = userDAO.save(user);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(0, actual.getPasswordHistory().size());\n+    }\n+}"},{"sha":"a7e0d83a32e30b7ee7e2652f4c4b0db2e27ec238","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -142,6 +142,7 @@ public void save() {\n         User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username\");\n         user.setRealm(realmDAO.find(\"/even/two\"));\n+        user.setCreator(\"admin\");\n         user.setCreationDate(new Date());\n \n         user.setPassword(\"pass\", CipherAlgorithm.SHA256);\n@@ -153,7 +154,7 @@ public void save() {\n             assertNotNull(e);\n         }\n \n-        user.setPassword(\"password\", CipherAlgorithm.SHA256);\n+        user.setPassword(\"password123\", CipherAlgorithm.SHA256);\n \n         user.setUsername(\"username!\");\n \n@@ -186,6 +187,7 @@ public void issue237() {\n         User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username\");\n         user.setRealm(realmDAO.find(\"/even/two\"));\n+        user.setCreator(\"admin\");\n         user.setCreationDate(new Date());\n \n         user.setPassword(\"password123\", CipherAlgorithm.AES);"},{"sha":"c9e00bb6240e8a99790817e51753c85211b763f2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeClassTest.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -23,7 +23,6 @@\n \n import static org.junit.Assert.assertTrue;\n \n-import javax.persistence.EntityManager;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -43,9 +42,6 @@ public class AnyTypeClassTest extends AbstractTest {\n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n-    @Autowired\n-    private EntityManager entityManager;\n-\n     @Test\n     public void create() {\n         PlainSchema newSchema = entityFactory.newEntity(PlainSchema.class);"},{"sha":"0777854ce39fa91e95090628bb47d95336e2a1c4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -62,9 +62,6 @@\n @Transactional\n public class GroupTest extends AbstractTest {\n \n-    @Autowired\n-    private EntityManager entityManager;\n-\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n@@ -144,7 +141,7 @@ public void delete() {\n      * this test class is architected.\n      */\n     private Collection<Group> findDynGroupMemberships(final User user) {\n-        TypedQuery<Group> query = entityManager.createQuery(\n+        TypedQuery<Group> query = entityManager().createQuery(\n                 \"SELECT e.group FROM \" + JPAUDynGroupMembership.class.getSimpleName()\n                 + \" e WHERE :user MEMBER OF e.users\", Group.class);\n         query.setParameter(\"user\", user);\n@@ -226,7 +223,7 @@ public Long transform(final User input) {\n \n         groupDAO.flush();\n \n-        assertNull(entityManager.find(JPAUDynGroupMembership.class, dynMembershipKey));\n+        assertNull(entityManager().find(JPAUDynGroupMembership.class, dynMembershipKey));\n \n         dynGroupMemberships = findDynGroupMemberships(user);\n         assertTrue(dynGroupMemberships.isEmpty());\n@@ -238,7 +235,7 @@ public Long transform(final User input) {\n      * this test class is architected.\n      */\n     private List<Group> findDynGroupMemberships(final AnyObject anyObject) {\n-        TypedQuery<Group> query = entityManager.createQuery(\n+        TypedQuery<Group> query = entityManager().createQuery(\n                 \"SELECT e.group FROM \" + JPAADynGroupMembership.class.getSimpleName()\n                 + \" e WHERE :anyObject MEMBER OF e.anyObjects\", Group.class);\n         query.setParameter(\"anyObject\", anyObject);\n@@ -319,7 +316,7 @@ public Long transform(final AnyObject input) {\n \n         groupDAO.flush();\n \n-        assertNull(entityManager.find(JPAADynGroupMembership.class, dynMembershipKey));\n+        assertNull(entityManager().find(JPAADynGroupMembership.class, dynMembershipKey));\n \n         dynGroupMemberships = findDynGroupMemberships(anyObject);\n         assertTrue(dynGroupMemberships.isEmpty());"},{"sha":"0e9c8db7322d96fb564eebcf68b441cd521ab31b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -56,9 +56,6 @@\n @Transactional\n public class ResourceTest extends AbstractTest {\n \n-    @Autowired\n-    private EntityManager entityManager;\n-\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n@@ -279,7 +276,7 @@ public void emptyMapping() {\n         resourceDAO.flush();\n \n         for (Long itemId : itemKeys) {\n-            assertNull(entityManager.find(JPAMappingItem.class, itemId));\n+            assertNull(entityManager().find(JPAMappingItem.class, itemId));\n         }\n     }\n "},{"sha":"c9c7ef255d9adc91c056c78cd6669ed1480fe31c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -26,7 +26,6 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n-import javax.persistence.EntityManager;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n@@ -50,9 +49,6 @@\n @Transactional\n public class RoleTest extends AbstractTest {\n \n-    @Autowired\n-    private EntityManager entityManager;\n-\n     @Autowired\n     private RoleDAO roleDAO;\n \n@@ -74,7 +70,7 @@ public class RoleTest extends AbstractTest {\n      * this test class is architected.\n      */\n     private Collection<Role> findDynRoleMemberships(final User user) {\n-        TypedQuery<Role> query = entityManager.createQuery(\n+        TypedQuery<Role> query = entityManager().createQuery(\n                 \"SELECT e.role FROM \" + JPADynRoleMembership.class.getSimpleName()\n                 + \" e WHERE :user MEMBER OF e.users\", Role.class);\n         query.setParameter(\"user\", user);\n@@ -159,7 +155,7 @@ public Long transform(final User input) {\n \n         roleDAO.flush();\n \n-        assertNull(entityManager.find(JPADynRoleMembership.class, dynMembershipKey));\n+        assertNull(entityManager().find(JPADynRoleMembership.class, dynMembershipKey));\n \n         dynRoleMemberships = findDynRoleMemberships(user);\n         assertTrue(dynRoleMemberships.isEmpty());"},{"sha":"6b72247052f17748350abc57ba9249c1a0c36dc6","filename":"core/persistence-jpa/src/test/resources/META-INF/persistence-enhance.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2FMETA-INF%2Fpersistence-enhance.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2FMETA-INF%2Fpersistence-enhance.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2FMETA-INF%2Fpersistence-enhance.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -23,7 +23,7 @@ under the License.\n                                  http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n              version=\"2.0\">\n   \n-  <persistence-unit name=\"syncopePersistenceUnit\">\n+  <persistence-unit name=\"Master\">\n     <mapping-file>META-INF/spring-orm.xml</mapping-file>\n     <validation-mode>NONE</validation-mode>    \n   </persistence-unit>"},{"sha":"40a385283847a62d082f1502f01d5ac27e551819","filename":"core/persistence-jpa/src/test/resources/domains/Master.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMaster.properties?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+Master.driverClassName=org.h2.Driver\n+Master.url=jdbc:h2:mem:syncopedb;DB_CLOSE_DELAY=-1\n+Master.schema=\n+Master.username=sa\n+Master.password=\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.H2Dictionary\n+Master.orm=META-INF/spring-orm.xml\n+\n+# note: other connection pool settings can also be configured here, see DataSource definition\n+Master.pool.validationQuery=SELECT 1\n+\n+Master.audit.sql=audit.sql"},{"sha":"2542a1a5670b23f2bdd0c6c90b271acd6929217e","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"renamed","additions":25,"deletions":32,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,6 +18,8 @@ specific language governing permissions and limitations\n under the License.\n -->\n <dataset>\n+  <SyncopeDomain name=\"Two\" adminCipherAlgorithm=\"SHA\" adminPwd=\"2AA60A8FF7FCD473D321E0146AFD9E26DF395147\"/>  \n+  \n   <SyncopeConf id=\"1\" \n                creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2014-06-20 11:00:00\" lastChangeDate=\"2014-06-20 11:00:00\"/>\n@@ -984,19 +986,20 @@ under the License.\n         xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"4\" name=\"CSV (update matching; assign unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\"/>\n+        unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\"/>\n   <AnyTemplate id=\"41\" syncTask_id=\"4\" anyType_name=\"USER\"\n                template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[\"csv\"],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[\"\"]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[{\"leftType\":null,\"leftKey\":0,\"rightType\":\"GROUP\",\"rightKey\":8,\"groupName\":null}],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}]}'/>\n   <AnyTemplate id=\"42\" syncTask_id=\"4\" anyType_name=\"GROUP\"\n                template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n-  <Task DTYPE=\"SchedTask\" type=\"SCHEDULED\" id=\"5\" name=\"SampleJob Task\" jobClassName=\"org.apache.syncope.core.provisioning.java.job.SampleJob\" cronExpression=\"0 0 0 1 * ?\"/>\n+  <Task DTYPE=\"SchedTask\" type=\"SCHEDULED\" id=\"5\" name=\"SampleJob Task\" \n+        jobDelegateClassName=\"org.apache.syncope.fit.core.reference.TestSampleJobDelegate\" cronExpression=\"0 0 0 1 * ?\"/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"6\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" anyKey=\"1\"\n         xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <TaskExec id=\"6\" task_id=\"6\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"7\" name=\"TestDB Task\" resource_name=\"resource-testdb\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <AnyTemplate id=\"71\" syncTask_id=\"7\" anyType_name=\"USER\"\n                template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;surname&apos;\"]}]}'/>\n   <AnyTemplate id=\"72\" syncTask_id=\"7\" anyType_name=\"GROUP\"\n@@ -1005,106 +1008,96 @@ under the License.\n         textBody=\"NOTIFICATION-81\" htmlBody=\"NOTIFICATION-81\" traceLevel=\"ALL\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"9\" name=\"TestDB2 Task\" resource_name=\"resource-testdb2\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"10\" name=\"TestDB Sync Task\" resource_name=\"resource-db-sync\"\n         destinationRealm_id=\"1\" fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"11\" name=\"LDAP Sync Task\" resource_name=\"resource-ldap\"\n         destinationRealm_id=\"1\" fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <AnyTemplate id=\"1\" syncTask_id=\"11\" anyType_name=\"USER\"\n                template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[{\"schema\":\"virtualReadOnly\",\"readonly\":true,\"values\":[\"\"]}],\"resources\":[\"resource-ldap\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[]}'/>\n   <AnyTemplate id=\"2\" syncTask_id=\"11\" anyType_name=\"GROUP\"\n                template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[{\"schema\":\"show\",\"readonly\":false,\"values\":[\"true\"]}]}'/>\n   <SyncTask_actionsClassNames SyncTask_id=\"11\" actionClassName=\"org.apache.syncope.core.provisioning.java.sync.LDAPMembershipSyncActions\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"12\" name=\"VirAttrCache test\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"0\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" fullReconciliation=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"13\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.PushJob\" \n+        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"         \n         unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\"/>  \n   <AnyFilter id=\"131\" anyType_name=\"USER\" pushTask_id=\"13\" filter=\"surname==Vivaldi\"/>\n   <AnyFilter id=\"132\" anyType_name=\"GROUP\" pushTask_id=\"13\" filter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"14\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.PushJob\" \n+        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"         \n         unmatchingRule=\"PROVISION\" matchingRule=\"IGNORE\"/>\n   <AnyFilter id=\"141\" anyType_name=\"USER\" pushTask_id=\"14\" filter=\"surname==Bellini\"/>\n   <AnyFilter id=\"142\" anyType_name=\"GROUP\" pushTask_id=\"14\" filter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"15\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.PushJob\"\n+        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n         unmatchingRule=\"UNLINK\" matchingRule=\"IGNORE\"/>\n   <AnyFilter id=\"151\" anyType_name=\"USER\" pushTask_id=\"15\" filter=\"surname==Puccini\"/>\n   <AnyFilter id=\"152\" anyType_name=\"GROUP\" pushTask_id=\"15\" filter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"16\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.PushJob\" \n+        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"         \n         unmatchingRule=\"IGNORE\" matchingRule=\"IGNORE\"/>\n   <AnyFilter id=\"161\" anyType_name=\"USER\" pushTask_id=\"16\" filter=\"surname==Verdi\"/>\n   <AnyFilter id=\"162\" anyType_name=\"GROUP\" pushTask_id=\"16\" filter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"17\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.PushJob\"\n+        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n         unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\"/>\n   <AnyFilter id=\"171\" anyType_name=\"USER\" pushTask_id=\"17\" filter=\"username==_NO_ONE_\"/>\n   <AnyFilter id=\"172\" anyType_name=\"GROUP\" pushTask_id=\"17\" filter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"18\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.PushJob\"\n+        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n         unmatchingRule=\"IGNORE\" matchingRule=\"DEPROVISION\"/>\n   <AnyFilter id=\"181\" anyType_name=\"USER\" pushTask_id=\"18\" filter=\"surname==Verdi\"/>\n   <AnyFilter id=\"182\" anyType_name=\"GROUP\" pushTask_id=\"18\" filter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"19\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.PushJob\"\n+        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n         unmatchingRule=\"IGNORE\" matchingRule=\"UNASSIGN\"/>\n   <AnyFilter id=\"191\" anyType_name=\"USER\" pushTask_id=\"19\" filter=\"surname==Rossini\"/>\n   <AnyFilter id=\"192\" anyType_name=\"GROUP\" pushTask_id=\"19\" filter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"20\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.PushJob\"\n+        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n         unmatchingRule=\"IGNORE\" matchingRule=\"LINK\"/>\n   <AnyFilter id=\"201\" anyType_name=\"USER\" pushTask_id=\"20\" filter=\"surname==Verdi\"/>\n   <AnyFilter id=\"202\" anyType_name=\"GROUP\" pushTask_id=\"20\" filter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"21\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.PushJob\"\n+        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n         unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\"/>\n   <AnyFilter id=\"211\" anyType_name=\"USER\" pushTask_id=\"21\" filter=\"surname==Verdi\"/>\n   <AnyFilter id=\"212\" anyType_name=\"GROUP\" pushTask_id=\"21\" filter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"22\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.PushJob\"\n+        \n         unmatchingRule=\"IGNORE\" matchingRule=\"UPDATE\"/>\n   <AnyFilter id=\"221\" anyType_name=\"USER\" pushTask_id=\"22\" filter=\"surname==Verdi\"/>\n   <AnyFilter id=\"222\" anyType_name=\"GROUP\" pushTask_id=\"22\" filter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"23\" name=\"Export on resource-ldap\" resource_name=\"resource-ldap\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.PushJob\"\n+        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"        \n         unmatchingRule=\"ASSIGN\" matchingRule=\"UNLINK\"/>\n   <AnyFilter id=\"231\" anyType_name=\"USER\" pushTask_id=\"23\" filter=\"username==_NO_ONE_\"/>\n   <AnyFilter id=\"232\" anyType_name=\"GROUP\" pushTask_id=\"23\" filter=\"name==citizen\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"24\" name=\"CSV Task (update matching; provision unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <AnyTemplate id=\"3\" syncTask_id=\"24\" anyType_name=\"USER\"\n                template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[{\"schema\":\"firstname\",\"readonly\":false,\"values\":[\"\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]}]}'/>\n   <AnyTemplate id=\"4\" syncTask_id=\"24\" anyType_name=\"GROUP\"\n                template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"25\" name=\"CSV (unlink matching; ignore unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\"/>\n+        unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"26\" name=\"CSV (ignore matching; assign unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\"/>\n+        unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\"/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"27\" propagationMode=\"ONE_PHASE\" propagationOperation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"resource-testdb\" anyTypeKind=\"USER\" anyKey=\"1\"\n         xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"28\" name=\"Scripted SQL\" resource_name=\"resource-db-scripted\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"0\" fullReconciliation=\"0\"\n-        jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n+        unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n \n   <Notification id=\"1\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset request\" template=\"requestPasswordReset\" ","previous_filename":"core/persistence-jpa/src/test/resources/content.xml"},{"sha":"b37a9698d1044f6ce3a472c81c9da3954dabbc96","filename":"core/persistence-jpa/src/test/resources/domains/Two.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwo.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwo.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwo.properties?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+Two.driverClassName=org.h2.Driver\n+Two.url=jdbc:h2:file:${project.build.directory}/test-classes/syncopetwo.db;DB_CLOSE_DELAY=-1\n+Two.schema=\n+Two.username=sa\n+Two.password=\n+Two.databasePlatform=org.apache.openjpa.jdbc.sql.H2Dictionary\n+Two.orm=META-INF/spring-orm.xml\n+\n+# note: other connection pool settings can also be configured here, see DataSource definition\n+Two.pool.validationQuery=SELECT 1\n+\n+Two.audit.sql=audit.sql"},{"sha":"92216fd74a82b531d828e1f620a3eb81cb0c2b71","filename":"core/persistence-jpa/src/test/resources/domains/TwoContent.xml","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,124 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<dataset>\n+  <Realm id=\"1\" name=\"/\"/>\n+\n+  <SyncopeConf id=\"1\" \n+               creator=\"admin\" lastModifier=\"admin\"\n+               creationDate=\"2014-06-20 11:00:00\" lastChangeDate=\"2014-06-20 11:00:00\"/>\n+\n+  <PlainSchema name=\"password.cipher.algorithm\" type=\"String\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"1\" owner_id=\"1\" schema_name=\"password.cipher.algorithm\"/>\n+  <CPlainAttrValue id=\"1\" attribute_id=\"1\" stringValue=\"SHA1\"/>\n+\n+  <!-- notificationjob.cronExpression:\n+  + not existing: NotificationJob runs according to Notification.DEFAULT_CRON_EXP\n+  + provided as empty string: NotificationJob disabled\n+  + provided as non-empty string: NotificationJob runs according to the given value -->\n+  <PlainSchema name=\"notificationjob.cronExpression\" type=\"String\"\n+               mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"2\" owner_id=\"1\" schema_name=\"notificationjob.cronExpression\"/>\n+  <CPlainAttrValue id=\"2\" attribute_id=\"2\" stringValue=\"\"/>\n+\n+  <PlainSchema name=\"notification.maxRetries\" type=\"Long\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"3\" owner_id=\"1\" schema_name=\"notification.maxRetries\"/>\n+  <CPlainAttrValue id=\"3\" attribute_id=\"3\" longValue=\"3\"/>\n+\n+  <PlainSchema name=\"token.length\" type=\"Long\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"4\" owner_id=\"1\" schema_name=\"token.length\"/>\n+  <CPlainAttrValue id=\"4\" attribute_id=\"4\" longValue=\"256\"/>\n+\n+  <PlainSchema name=\"token.expireTime\" type=\"Long\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"5\" owner_id=\"1\" schema_name=\"token.expireTime\"/>\n+  <CPlainAttrValue id=\"5\" attribute_id=\"5\" longValue=\"60\"/>\n+\n+  <PlainSchema name=\"selfRegistration.allowed\" type=\"Boolean\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"6\" owner_id=\"1\" schema_name=\"selfRegistration.allowed\"/>\n+  <CPlainAttrValue id=\"6\" attribute_id=\"6\" booleanValue=\"1\"/>\n+\n+  <PlainSchema name=\"passwordReset.allowed\" type=\"Boolean\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"7\" owner_id=\"1\" schema_name=\"passwordReset.allowed\"/>\n+  <CPlainAttrValue id=\"7\" attribute_id=\"7\" booleanValue=\"1\"/>\n+\n+  <PlainSchema name=\"passwordReset.securityQuestion\" type=\"Boolean\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"8\" owner_id=\"1\" schema_name=\"passwordReset.securityQuestion\"/>\n+  <CPlainAttrValue id=\"8\" attribute_id=\"8\" booleanValue=\"1\"/>\n+\n+  <PlainSchema name=\"authentication.statuses\" type=\"String\"\n+               mandatoryCondition=\"true\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"9\" owner_id=\"1\" schema_name=\"authentication.statuses\"/>\n+  <CPlainAttrValue id=\"9\" attribute_id=\"9\" stringValue=\"created\"/>\n+  <CPlainAttrValue id=\"10\" attribute_id=\"9\" stringValue=\"active\"/>\n+\n+  <!-- Save user login date upon successful authentication -->\n+  <PlainSchema name=\"log.lastlogindate\" type=\"Boolean\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"11\" owner_id=\"1\" schema_name=\"log.lastlogindate\"/>\n+  <CPlainAttrValue id=\"11\" attribute_id=\"11\" booleanValue=\"1\"/>\n+\n+  <PlainSchema name=\"tasks.interruptMaxRetries\" type=\"Long\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"12\" owner_id=\"1\" schema_name=\"tasks.interruptMaxRetries\"/>\n+  <CPlainAttrValue id=\"12\" attribute_id=\"12\" longValue=\"20\"/>\n+\n+  <AnyType name=\"USER\" kind=\"USER\"/>\n+  <AnyTypeClass name=\"BaseUser\"/>\n+  <AnyType_AnyTypeClass anyType_name=\"USER\" anyTypeClass_name=\"BaseUser\"/>\n+\n+  <AnyType name=\"GROUP\" kind=\"GROUP\"/>\n+  \n+  <!-- For usage with admin console -->\n+  <PlainSchema name=\"admin.user.layout\" type=\"String\"\n+               mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <PlainSchema name=\"self.user.layout\" type=\"String\"\n+               mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <PlainSchema name=\"admin.group.layout\" type=\"String\"\n+               mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <PlainSchema name=\"self.group.layout\" type=\"String\"\n+               mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <PlainSchema name=\"admin.membership.layout\" type=\"String\"\n+               mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <PlainSchema name=\"self.membership.layout\" type=\"String\"\n+               mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+        \n+  <PlainSchema name=\"email\" type=\"String\" anyTypeClass_name=\"BaseUser\"\n+               mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n+               validatorClass=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n+  \n+  <!-- Password reset notifications -->\n+  <Notification id=\"1\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n+                sender=\"admin@syncope.apache.org\" subject=\"Password Reset request\" template=\"requestPasswordReset\" \n+                traceLevel=\"FAILURES\"/> \n+  <AnyAbout id=\"1\" anyType_name=\"USER\" notification_id=\"1\" about=\"token!=$null\"/>\n+  <Notification_events Notification_id=\"1\" event=\"[CUSTOM]:[]:[]:[requestPasswordReset]:[SUCCESS]\"/>\n+  \n+  <Notification id=\"2\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n+                sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template=\"confirmPasswordReset\" \n+                traceLevel=\"FAILURES\"/> \n+  <Notification_events Notification_id=\"2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n+\n+</dataset>"},{"sha":"c7e7a9b480cb5fd57687b514f3c304f95ec642e1","filename":"core/persistence-jpa/src/test/resources/domains/TwoDomain.xml","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoDomain.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoDomain.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoDomain.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,125 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n+       xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd                           \n+                           http://www.springframework.org/schema/tx\n+                           http://www.springframework.org/schema/tx/spring-tx.xsd\n+                           http://www.springframework.org/schema/util\n+                           http://www.springframework.org/schema/util/spring-util.xsd\">\n+  \n+  <bean id=\"TwoContentXML\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n+    <property name=\"primary\" value=\"file:${content.directory}/domains/TwoContent.xml\"/>\n+    <property name=\"fallback\" value=\"classpath:domains/TwoContent.xml\"/>\n+  </bean>\n+  <bean id=\"TwoProperties\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n+    <property name=\"primary\" value=\"file:${content.directory}/domains/Two.properties\"/>\n+    <property name=\"fallback\" value=\"classpath:domains/Two.properties\"/>\n+  </bean>\n+  <bean id=\"TwoDatabaseSchema\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${Two.schema}\"/>\n+  </bean>\n+\n+  <!-- Use JNDI datasource as default but, when not available, revert to\n+  local datasource, with different properties for execution and testing. \n+  In any case, get all JDBC connections with a determined isolation level. -->\n+  <bean id=\"TwoDataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n+    <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeTwoDataSource\"/>\n+    <property name=\"defaultObject\" ref=\"localTwoDataSource\"/>\n+  </bean>\n+\n+  <bean id=\"localTwoDataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\" destroy-method=\"close\">\n+    <property name=\"driverClassName\" value=\"${Two.driverClassName}\"/>\n+    <property name=\"url\" value=\"${Two.url}\"/>\n+    <property name=\"username\" value=\"${Two.username}\"/>\n+    <property name=\"password\" value=\"${Two.password}\"/>\n+    <!-- connection pool configuration - transaction isolation, default READ_COMMITTED (see SYNCOPE-202) -->\n+    <property name=\"defaultTransactionIsolation\">\n+      <util:constant static-field=\"${Two.pool.defaultTransactionIsolation:java.sql.Connection.TRANSACTION_READ_COMMITTED}\"/>\n+    </property>\n+    <!-- connection pool configuration - default values taken from BasicDataSource default values -->\n+    <property name=\"initialSize\" value=\"${Two.pool.initialSize:0}\"/>\n+    <property name=\"maxTotal\" value=\"${Two.pool.maxActive:8}\"/>\n+    <property name=\"maxIdle\" value=\"${Two.pool.maxIdle:8}\"/>\n+    <property name=\"minIdle\" value=\"${Two.pool.minIdle:0}\"/>\n+    <property name=\"maxWaitMillis\" value=\"${Two.pool.maxWait:-1}\"/>\n+    <!--<property name=\"validationQuery\" value=\"${Two.pool.validationQuery}\"/>-->\n+    <property name=\"validationQueryTimeout\" value=\"${Two.pool.validationQueryTimeout:-1}\"/>\n+    <property name=\"testOnBorrow\" value=\"${Two.pool.testOnBorrow:true}\"/>\n+    <property name=\"testOnReturn\" value=\"${Two.pool.testOnReturn:false}\"/>\n+    <property name=\"testWhileIdle\" value=\"${Two.pool.testWhileIdle:false}\"/>\n+    <property name=\"timeBetweenEvictionRunsMillis\" value=\"${Two.pool.timeBetweenEvictionRunsMillis:-1}\"/>\n+    <property name=\"numTestsPerEvictionRun\" value=\"${Two.pool.numTestsPerEvictionRun:3}\"/>\n+    <property name=\"minEvictableIdleTimeMillis\" value=\"${Two.pool.minEvictableIdleTimeMillis:1800000}\"/>\n+    <property name=\"removeAbandonedOnBorrow\" value=\"${Two.pool.removeAbandoned:false}\"/>\n+    <property name=\"removeAbandonedOnMaintenance\" value=\"${Two.pool.removeAbandoned:false}\"/>\n+    <property name=\"removeAbandonedTimeout\" value=\"${Two.pool.removeAbandonedTimeout:300}\"/>\n+    <property name=\"logAbandoned\" value=\"${Two.pool.logAbandoned:false}\"/>\n+  </bean>\n+  \n+  <bean class=\"org.springframework.jdbc.datasource.init.DataSourceInitializer\">\n+    <property name=\"dataSource\" ref=\"TwoDataSource\"/>\n+    <property name=\"enabled\" value=\"true\"/>\n+    <property name=\"databasePopulator\">\n+      <bean class=\"org.springframework.jdbc.datasource.init.ResourceDatabasePopulator\">\n+        <property name=\"continueOnError\" value=\"true\"/>\n+        <property name=\"ignoreFailedDrops\" value=\"true\"/>\n+        <property name=\"sqlScriptEncoding\" value=\"UTF-8\"/>\n+        <property name=\"scripts\">\n+          <array>\n+            <value type=\"org.springframework.core.io.Resource\">\n+              classpath:/audit/${Two.audit.sql}\n+            </value>\n+          </array>\n+        </property>\n+      </bean>\n+    </property>\n+  </bean>\n+  \n+  <bean id=\"TwoEntityManagerFactory\"\n+        class=\"org.apache.syncope.core.persistence.jpa.spring.DomainEntityManagerFactoryBean\">\n+    <property name=\"mappingResources\">\n+      <list>\n+        <value>${Two.orm}</value>\n+      </list>\n+    </property>\n+    <property name=\"persistenceUnitName\" value=\"Two\"/>\n+    <property name=\"dataSource\" ref=\"TwoDataSource\"/>\n+    <property name=\"jpaVendorAdapter\">\n+      <bean class=\"org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter\">\n+        <property name=\"showSql\" value=\"false\"/>\n+        <property name=\"generateDdl\" value=\"true\"/>\n+        <property name=\"databasePlatform\" value=\"${Two.databasePlatform}\"/>\n+      </bean>\n+    </property>\n+    <property name=\"commonEntityManagerFactoryConf\" ref=\"commonEMFConf\"/>\n+  </bean>  \n+\n+  <bean id=\"TwoTransactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n+    <property name=\"entityManagerFactory\" ref=\"TwoEntityManagerFactory\"/>\n+    <qualifier value=\"Two\"/>\n+  </bean>\n+  \n+  <tx:annotation-driven transaction-manager=\"TwoTransactionManager\"/>\n+\n+</beans>\n\\ No newline at end of file"},{"sha":"da8f3219e90098b00cf302032aa037f1d5b27a97","filename":"core/persistence-jpa/src/test/resources/persistenceTest.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2FpersistenceTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2FpersistenceTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2FpersistenceTest.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -29,6 +29,7 @@ under the License.\n     <property name=\"locations\">\n       <list>\n         <value>classpath:persistence.properties</value>\n+        <value>classpath:domains/*.properties</value>\n         <value>classpath:security.properties</value>\n       </list>\n     </property>"},{"sha":"56459794ee5df8069ec7407e1d613f12833e1f8c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AnyObjectProvisioningManager.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,8 +18,13 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n+import java.util.Collection;\n+import java.util.List;\n import org.apache.syncope.common.lib.mod.AnyObjectMod;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n \n public interface AnyObjectProvisioningManager extends ProvisioningManager<AnyObjectTO, AnyObjectMod> {\n+\n+    List<PropagationStatus> provision(Long key, Collection<String> resources);\n }"},{"sha":"c74b5dfe569f36fd4cfad31185b21c3f1f711071","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/GroupProvisioningManager.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -31,4 +32,6 @@ public interface GroupProvisioningManager extends ProvisioningManager<GroupTO, G\n     Pair<Long, List<PropagationStatus>> create(\n             GroupTO groupTO, Map<Long, String> groupOwnerMap, Set<String> excludedResources);\n \n+    List<PropagationStatus> provision(Long key, Collection<String> resources);\n+\n }"},{"sha":"3378707f1dcd951388e0511d812067e34b6ed522","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserProvisioningManager.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -30,11 +31,11 @@\n \n public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserMod> {\n \n-    Pair<Long, List<PropagationStatus>> activate(User user, StatusMod statusMod);\n+    Pair<Long, List<PropagationStatus>> activate(StatusMod statusMod);\n \n-    Pair<Long, List<PropagationStatus>> reactivate(User user, StatusMod statusMod);\n+    Pair<Long, List<PropagationStatus>> reactivate(StatusMod statusMod);\n \n-    Pair<Long, List<PropagationStatus>> suspend(User user, StatusMod statusMod);\n+    Pair<Long, List<PropagationStatus>> suspend(StatusMod statusMod);\n \n     void innerSuspend(User user, boolean propagate);\n \n@@ -48,6 +49,8 @@ Pair<Long, List<PropagationStatus>> update(UserMod userMod, Long key,\n \n     void requestPasswordReset(Long key);\n \n-    void confirmPasswordReset(User user, String token, String password);\n+    void confirmPasswordReset(Long key, String token, String password);\n+\n+    List<PropagationStatus> provision(Long key, boolean changePwd, String password, Collection<String> resources);\n \n }"},{"sha":"14f0c83d87f582e791193c6002196ab0d891d527","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobInstanceLoader.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobInstanceLoader.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -19,20 +19,20 @@\n package org.apache.syncope.core.provisioning.api.job;\n \n import java.text.ParseException;\n+import java.util.Map;\n import org.apache.syncope.core.persistence.api.entity.Report;\n+import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.quartz.SchedulerException;\n \n public interface JobInstanceLoader {\n \n-    void registerJob(Task task, String jobClassName, String cronExpression)\n-            throws ClassNotFoundException, SchedulerException, ParseException;\n+    String DOMAIN = \"domain\";\n \n-    void registerJob(Report report) throws SchedulerException, ParseException;\n+    Map<String, Object> registerJob(final SchedTask task, final long interruptMaxRetries)\n+            throws SchedulerException, ParseException;\n \n-    void registerReportJob(Long reportKey) throws SchedulerException, ParseException;\n-\n-    void registerTaskJob(Long taskKey) throws ClassNotFoundException, SchedulerException, ParseException;\n+    void registerJob(final Report report) throws SchedulerException, ParseException;\n \n     void unregisterJob(Task task);\n "},{"sha":"22d7b546660ea4b0345e303f479a73d45e69e162","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobNamer.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamer.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -29,7 +29,7 @@ public final class JobNamer {\n \n     private static final Logger LOG = LoggerFactory.getLogger(JobNamer.class);\n \n-    private static Long getIdFromJobName(final String name, final String pattern, final int prefixLength) {\n+    private static Long getKeyFromJobName(final String name, final String pattern, final int prefixLength) {\n         Long result = null;\n \n         Matcher jobMatcher = Pattern.compile(pattern).matcher(name);\n@@ -45,17 +45,15 @@ private static Long getIdFromJobName(final String name, final String pattern, fi\n     }\n \n     public static Long getTaskKeyFromJobName(final String name) {\n-        return getIdFromJobName(name, \"taskJob[0-9]+\", 7);\n+        return getKeyFromJobName(name, \"taskJob[0-9]+\", 7);\n     }\n \n     public static Long getReportKeyFromJobName(final String name) {\n-        return getIdFromJobName(name, \"reportJob[0-9]+\", 9);\n+        return getKeyFromJobName(name, \"reportJob[0-9]+\", 9);\n     }\n \n     public static String getJobName(final Task task) {\n-        return task == null\n-                ? \"taskNotificationJob\"\n-                : \"taskJob\" + task.getKey();\n+        return \"taskJob\" + task.getKey();\n     }\n \n     public static String getJobName(final Report report) {"},{"sha":"9a6386f9a10c392b9648c842f37a95e1d8178ede","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/ProvisioningJob.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FProvisioningJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FProvisioningJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FProvisioningJob.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.api.job;\n-\n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningActions;\n-\n-public interface ProvisioningJob<T extends ProvisioningTask, A extends ProvisioningActions> extends TaskJob {\n-\n-    void setActions(List<A> actions);\n-}"},{"sha":"74e924775a24ad1962178d1370e8eda6cf876369","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/SchedTaskJobDelegate.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FSchedTaskJobDelegate.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.api.job;\n \n-import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n-import org.apache.syncope.core.provisioning.api.sync.PushActions;\n+import org.quartz.JobExecutionException;\n \n-public interface PushJob extends ProvisioningJob<PushTask, PushActions> {\n+public interface SchedTaskJobDelegate {\n \n+    void execute(Long taskKey, boolean dryRun) throws JobExecutionException;\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/PushJob.java"},{"sha":"3df89bcf18504a64308ae4a62e07151e5aea4ab5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/TaskJob.java","status":"removed","additions":0,"deletions":43,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FTaskJob.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -1,43 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.api.job;\n-\n-import org.quartz.DisallowConcurrentExecution;\n-import org.quartz.InterruptableJob;\n-\n-/**\n- * Interface for Quartz jobs bound to a given Task.\n- */\n-@DisallowConcurrentExecution\n-public interface TaskJob extends InterruptableJob {\n-\n-    String DRY_RUN_JOBDETAIL_KEY = \"dryRun\";\n-\n-    /**\n-     * Task execution status.\n-     */\n-    public enum Status {\n-\n-        SUCCESS,\n-        FAILURE\n-\n-    }\n-\n-    void setTaskId(Long taskId);\n-}"},{"sha":"315522306d3b364e9c834310e90d150c9d908aa1","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -27,7 +27,6 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n \n@@ -149,12 +148,12 @@ List<PropagationTask> getUserCreateTasks(Long key, Boolean enable,\n     /**\n      * Performs update on each resource associated to the user excluding the specified into 'resourceNames' parameter.\n      *\n-     * @param user to be propagated\n+     * @param key to be propagated\n      * @param enable whether user must be enabled or not\n      * @param noPropResourceNames external resource names not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserUpdateTasks(User user, Boolean enable, Collection<String> noPropResourceNames);\n+    List<PropagationTask> getUserUpdateTasks(Long key, Boolean enable, Collection<String> noPropResourceNames);\n \n     /**\n      * Performs update on each resource associated to the user."},{"sha":"85ea59f5ab56cf9a86fc242285688286b5034171","filename":"core/provisioning-java/pom.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fpom.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -149,6 +149,13 @@ under the License.\n         <directory>${basedir}/src/test/resources</directory>\n         <filtering>true</filtering>\n       </testResource>\n+      <testResource>\n+        <directory>${basedir}/../persistence-jpa/src/main/resources</directory>\n+        <includes>\n+          <include>persistence.properties</include>\n+        </includes>\n+        <filtering>true</filtering>\n+      </testResource>\n       <testResource>\n         <directory>${basedir}/../persistence-jpa/src/test/resources</directory>\n         <filtering>true</filtering>"},{"sha":"bcea03d733465cdde7e38dc11397bdde8ed59808","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -95,7 +95,7 @@ public ConnectorFacadeProxy(final ConnInstance connInstance) {\n         this.activeConnInstance = connInstance;\n \n         ConnIdBundleManager connIdBundleManager =\n-                ApplicationContextProvider.getApplicationContext().getBean(ConnIdBundleManager.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(ConnIdBundleManager.class);\n         ConnectorInfo info = connIdBundleManager.getConnectorInfo(connInstance);\n \n         // create default configuration"},{"sha":"38b3f2ac40eedc16505b285c18f01a855bd1df79","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -25,13 +25,13 @@\n import java.util.Set;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n-import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConnectorFacadeFactory;"},{"sha":"9722adbd959bde672a24355439d38d995d2b1785","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":34,"deletions":12,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n@@ -81,7 +82,7 @@ public Pair<Long, List<PropagationStatus>> create(\n         List<PropagationTask> tasks = propagationManager.getAnyObjectCreateTasks(\n                 created, anyObjectTO.getVirAttrs(), excludedResources);\n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n@@ -118,7 +119,7 @@ public Pair<Long, List<PropagationStatus>> update(\n         }\n \n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n@@ -130,20 +131,20 @@ public Pair<Long, List<PropagationStatus>> update(\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long anyObjectKey) {\n-        return delete(anyObjectKey, Collections.<String>emptySet());\n+    public List<PropagationStatus> delete(final Long key) {\n+        return delete(key, Collections.<String>emptySet());\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long anyObjectKey, final Set<String> excludedResources) {\n+    public List<PropagationStatus> delete(final Long key, final Set<String> excludedResources) {\n         List<PropagationTask> tasks = new ArrayList<>();\n \n-        AnyObject anyObject = anyObjectDAO.authFind(anyObjectKey);\n+        AnyObject anyObject = anyObjectDAO.authFind(key);\n         if (anyObject != null) {\n             tasks.addAll(propagationManager.getAnyObjectDeleteTasks(anyObject.getKey()));\n         }\n \n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getBeanFactory().\n                 getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n@@ -152,7 +153,7 @@ public List<PropagationStatus> delete(final Long anyObjectKey, final Set<String>\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        awfAdapter.delete(anyObjectKey);\n+        awfAdapter.delete(key);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -168,15 +169,36 @@ public Long link(final AnyObjectMod anyObjectMod) {\n     }\n \n     @Override\n-    public List<PropagationStatus> deprovision(final Long anyObjectKey, final Collection<String> resources) {\n-        AnyObject anyObject = anyObjectDAO.authFind(anyObjectKey);\n+    public List<PropagationStatus> provision(final Long key, final Collection<String> resources) {\n+        PropagationByResource propByRes = new PropagationByResource();\n+        for (String resource : resources) {\n+            propByRes.add(ResourceOperation.UPDATE, resource);\n+        }\n+\n+        WorkflowResult<Long> wfResult = new WorkflowResult<>(key, propByRes, \"update\");\n+\n+        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(wfResult, null, null, null);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        return propagationReporter.getStatuses();\n+    }\n+\n+    @Override\n+    public List<PropagationStatus> deprovision(final Long key, final Collection<String> resources) {\n+        AnyObject anyObject = anyObjectDAO.authFind(key);\n \n         Collection<String> noPropResourceName = CollectionUtils.removeAll(anyObject.getResourceNames(), resources);\n \n         List<PropagationTask> tasks = propagationManager.getAnyObjectDeleteTasks(\n-                anyObjectKey, new HashSet<>(resources), noPropResourceName);\n+                key, new HashSet<>(resources), noPropResourceName);\n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"457f74d9b4799aac9286772702e671f85bbf0a92","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":45,"deletions":17,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -81,8 +82,8 @@ public Pair<Long, List<PropagationStatus>> create(final GroupTO groupTO, final S\n \n         List<PropagationTask> tasks = propagationManager.getGroupCreateTasks(\n                 created, groupTO.getVirAttrs(), excludedResources);\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n-                PropagationReporter.class);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n@@ -98,22 +99,30 @@ public Pair<Long, List<PropagationStatus>> create(\n             final GroupTO groupTO, final Map<Long, String> groupOwnerMap, final Set<String> excludedResources) {\n \n         WorkflowResult<Long> created = gwfAdapter.create(groupTO);\n+\n+        // see ConnObjectUtils#getAnyTOFromConnObject for GroupOwnerSchema\n         AttrTO groupOwner = groupTO.getPlainAttrMap().get(StringUtils.EMPTY);\n         if (groupOwner != null) {\n             groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next());\n         }\n \n         List<PropagationTask> tasks = propagationManager.getGroupCreateTasks(\n                 created, groupTO.getVirAttrs(), excludedResources);\n-\n-        taskExecutor.execute(tasks);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n \n         return new ImmutablePair<>(created.getResult(), null);\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final GroupMod groupObjectMod) {\n-        return update(groupObjectMod, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> update(final GroupMod groupMod) {\n+        return update(groupMod, Collections.<String>emptySet());\n     }\n \n     @Override\n@@ -137,7 +146,7 @@ public Pair<Long, List<PropagationStatus>> update(\n         }\n \n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n@@ -149,15 +158,15 @@ public Pair<Long, List<PropagationStatus>> update(\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long groupObjectKey) {\n-        return delete(groupObjectKey, Collections.<String>emptySet());\n+    public List<PropagationStatus> delete(final Long key) {\n+        return delete(key, Collections.<String>emptySet());\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long groupKey, final Set<String> excludedResources) {\n+    public List<PropagationStatus> delete(final Long key, final Set<String> excludedResources) {\n         List<PropagationTask> tasks = new ArrayList<>();\n \n-        Group group = groupDAO.authFind(groupKey);\n+        Group group = groupDAO.authFind(key);\n         if (group != null) {\n             // Generate propagation tasks for deleting users from group resources, if they are on those resources only\n             // because of the reason being deleted (see SYNCOPE-357)\n@@ -180,7 +189,7 @@ public List<PropagationStatus> delete(final Long groupKey, final Set<String> exc\n             tasks.addAll(propagationManager.getGroupDeleteTasks(group.getKey()));\n         }\n \n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getBeanFactory().\n                 getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n@@ -189,7 +198,7 @@ public List<PropagationStatus> delete(final Long groupKey, final Set<String> exc\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        gwfAdapter.delete(groupKey);\n+        gwfAdapter.delete(key);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -201,15 +210,34 @@ public Long unlink(final GroupMod groupMod) {\n     }\n \n     @Override\n-    public List<PropagationStatus> deprovision(final Long groupKey, final Collection<String> resources) {\n-        Group group = groupDAO.authFind(groupKey);\n+    public List<PropagationStatus> provision(final Long key, final Collection<String> resources) {\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.addAll(ResourceOperation.UPDATE, resources);\n+\n+        WorkflowResult<Long> wfResult = new WorkflowResult<>(key, propByRes, \"update\");\n+\n+        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(wfResult, null, null, null);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        return propagationReporter.getStatuses();\n+    }\n+\n+    @Override\n+    public List<PropagationStatus> deprovision(final Long key, final Collection<String> resources) {\n+        Group group = groupDAO.authFind(key);\n \n         Collection<String> noPropResourceName = CollectionUtils.removeAll(group.getResourceNames(), resources);\n \n         List<PropagationTask> tasks = propagationManager.getGroupDeleteTasks(\n-                groupKey, new HashSet<>(resources), noPropResourceName);\n+                key, new HashSet<>(resources), noPropResourceName);\n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"0809607c92fac3c5e36db5e96d60d6dfba698db1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":75,"deletions":45,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -87,12 +88,8 @@ public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final Set\n     public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword,\n             final boolean disablePwdPolicyCheck, final Boolean enabled, final Set<String> excludedResources) {\n \n-        WorkflowResult<Pair<Long, Boolean>> created;\n-        try {\n-            created = uwfAdapter.create(userTO, disablePwdPolicyCheck, enabled, storePassword);\n-        } catch (PropagationException e) {\n-            throw e;\n-        }\n+        WorkflowResult<Pair<Long, Boolean>> created =\n+                uwfAdapter.create(userTO, disablePwdPolicyCheck, enabled, storePassword);\n \n         List<PropagationTask> tasks = propagationManager.getUserCreateTasks(\n                 created.getResult().getKey(),\n@@ -102,7 +99,7 @@ public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boo\n                 userTO.getVirAttrs(),\n                 excludedResources);\n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n@@ -129,7 +126,7 @@ public Pair<Long, List<PropagationStatus>> update(final UserMod userMod) {\n                     ? propagationManager.getUserUpdateTasks(updated, false, null)\n                     : Collections.<PropagationTask>emptyList());\n         }\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getBeanFactory().\n                 getBean(PropagationReporter.class);\n         if (!tasks.isEmpty()) {\n             try {\n@@ -140,9 +137,7 @@ public Pair<Long, List<PropagationStatus>> update(final UserMod userMod) {\n             }\n         }\n \n-        Pair<Long, List<PropagationStatus>> result = new ImmutablePair<>(\n-                updated.getResult().getKey().getKey(), propagationReporter.getStatuses());\n-        return result;\n+        return new ImmutablePair<>(updated.getResult().getKey().getKey(), propagationReporter.getStatuses());\n     }\n \n     @Override\n@@ -191,7 +186,7 @@ public Pair<Long, List<PropagationStatus>> update(final UserMod userMod, final L\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                 updated, updated.getResult().getKey().getPassword() != null, excludedResources);\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getBeanFactory().\n                 getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n@@ -204,21 +199,21 @@ public Pair<Long, List<PropagationStatus>> update(final UserMod userMod, final L\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long userKey) {\n-        return delete(userKey, Collections.<String>emptySet());\n+    public List<PropagationStatus> delete(final Long key) {\n+        return delete(key, Collections.<String>emptySet());\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long anyId, final Set<String> excludedResources) {\n+    public List<PropagationStatus> delete(final Long key, final Set<String> excludedResources) {\n         // Note here that we can only notify about \"delete\", not any other\n         // task defined in workflow process definition: this because this\n         // information could only be available after uwfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-        List<PropagationTask> tasks = propagationManager.getUserDeleteTasks(anyId, excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getUserDeleteTasks(key, excludedResources);\n \n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n@@ -227,7 +222,7 @@ public List<PropagationStatus> delete(final Long anyId, final Set<String> exclud\n         }\n \n         try {\n-            uwfAdapter.delete(anyId);\n+            uwfAdapter.delete(key);\n         } catch (PropagationException e) {\n             throw e;\n         }\n@@ -247,40 +242,40 @@ public Long link(final UserMod userMod) {\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> activate(final User user, final StatusMod statusMod) {\n+    public Pair<Long, List<PropagationStatus>> activate(final StatusMod statusMod) {\n         WorkflowResult<Long> updated = statusMod.isOnSyncope()\n-                ? uwfAdapter.activate(user.getKey(), statusMod.getToken())\n-                : new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n+                ? uwfAdapter.activate(statusMod.getKey(), statusMod.getToken())\n+                : new WorkflowResult<>(statusMod.getKey(), null, statusMod.getType().name().toLowerCase());\n \n-        return new ImmutablePair<>(updated.getResult(), propagateStatus(user, statusMod));\n+        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusMod));\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> reactivate(final User user, final StatusMod statusMod) {\n+    public Pair<Long, List<PropagationStatus>> reactivate(final StatusMod statusMod) {\n         WorkflowResult<Long> updated = statusMod.isOnSyncope()\n-                ? uwfAdapter.reactivate(user.getKey())\n-                : new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n+                ? uwfAdapter.reactivate(statusMod.getKey())\n+                : new WorkflowResult<>(statusMod.getKey(), null, statusMod.getType().name().toLowerCase());\n \n-        return new ImmutablePair<>(updated.getResult(), propagateStatus(user, statusMod));\n+        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusMod));\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> suspend(final User user, final StatusMod statusMod) {\n+    public Pair<Long, List<PropagationStatus>> suspend(final StatusMod statusMod) {\n         WorkflowResult<Long> updated = statusMod.isOnSyncope()\n-                ? uwfAdapter.suspend(user.getKey())\n-                : new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n+                ? uwfAdapter.suspend(statusMod.getKey())\n+                : new WorkflowResult<>(statusMod.getKey(), null, statusMod.getType().name().toLowerCase());\n \n-        return new ImmutablePair<>(updated.getResult(), propagateStatus(user, statusMod));\n+        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusMod));\n     }\n \n-    protected List<PropagationStatus> propagateStatus(final User user, final StatusMod statusMod) {\n-        Collection<String> noPropResourceNames =\n-                CollectionUtils.removeAll(userDAO.findAllResourceNames(user), statusMod.getResourceNames());\n+    protected List<PropagationStatus> propagateStatus(final StatusMod statusMod) {\n+        Collection<String> noPropResourceNames = CollectionUtils.removeAll(\n+                userDAO.findAllResourceNames(userDAO.find(statusMod.getKey())), statusMod.getResourceNames());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                user, statusMod.getType() != StatusMod.ModType.SUSPEND, noPropResourceNames);\n+                statusMod.getKey(), statusMod.getType() != StatusMod.ModType.SUSPEND, noPropResourceNames);\n         PropagationReporter propReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propReporter);\n         } catch (PropagationException e) {\n@@ -311,15 +306,50 @@ public void innerSuspend(final User user, final boolean propagate) {\n     }\n \n     @Override\n-    public List<PropagationStatus> deprovision(final Long userKey, final Collection<String> resources) {\n-        final User user = userDAO.authFind(userKey);\n+    public List<PropagationStatus> provision(\n+            final Long key, final boolean changePwd, final String password, final Collection<String> resources) {\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(key);\n+        userMod.getResourcesToAdd().addAll(resources);\n+\n+        if (changePwd) {\n+            StatusMod statusMod = new StatusMod();\n+            statusMod.setOnSyncope(false);\n+            statusMod.getResourceNames().addAll(resources);\n+            userMod.setPwdPropRequest(statusMod);\n+            userMod.setPassword(password);\n+        }\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.addAll(ResourceOperation.UPDATE, resources);\n+\n+        WorkflowResult<Pair<UserMod, Boolean>> wfResult = new WorkflowResult<Pair<UserMod, Boolean>>(\n+                ImmutablePair.of(userMod, (Boolean) null), propByRes, \"update\");\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        return propagationReporter.getStatuses();\n+    }\n+\n+    @Override\n+    public List<PropagationStatus> deprovision(final Long key, final Collection<String> resources) {\n+        User user = userDAO.authFind(key);\n \n         List<PropagationTask> tasks = propagationManager.getUserDeleteTasks(\n-                userKey,\n+                key,\n                 new HashSet<>(resources),\n                 CollectionUtils.removeAll(userDAO.findAllResourceNames(user), resources));\n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n@@ -331,24 +361,24 @@ public List<PropagationStatus> deprovision(final Long userKey, final Collection<\n     }\n \n     @Override\n-    public void requestPasswordReset(final Long id) {\n-        uwfAdapter.requestPasswordReset(id);\n+    public void requestPasswordReset(final Long key) {\n+        uwfAdapter.requestPasswordReset(key);\n     }\n \n     @Override\n-    public void confirmPasswordReset(final User user, final String token, final String password) {\n-        uwfAdapter.confirmPasswordReset(user.getKey(), token, password);\n+    public void confirmPasswordReset(final Long key, final String token, final String password) {\n+        uwfAdapter.confirmPasswordReset(key, token, password);\n \n         UserMod userMod = new UserMod();\n-        userMod.setKey(user.getKey());\n+        userMod.setKey(key);\n         userMod.setPassword(password);\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                 new WorkflowResult<Pair<UserMod, Boolean>>(\n                         new ImmutablePair<UserMod, Boolean>(userMod, null), null, \"confirmPasswordReset\"),\n                 true, null);\n         PropagationReporter propReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propReporter);\n         } catch (PropagationException e) {"},{"sha":"7ff9e84fe96e02ca0c2da29637ed5b27b7165a5d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/UserSuspenderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FUserSuspenderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FUserSuspenderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FUserSuspenderImpl.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import org.apache.syncope.core.provisioning.api.UserSuspender;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.UserSuspender;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"689037be6115fa56edb572b9111c31e124c65dd9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -345,8 +345,8 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n         Set<ExternalResource> resources = getAllResources(any);\n \n         // 5. attributes to be removed\n-        for (String attributeToBeRemoved : anyMod.getPlainAttrsToRemove()) {\n-            PlainSchema schema = getPlainSchema(attributeToBeRemoved);\n+        for (String attrToRemove : anyMod.getPlainAttrsToRemove()) {\n+            PlainSchema schema = getPlainSchema(attrToRemove);\n             if (schema != null) {\n                 PlainAttr<?> attr = any.getPlainAttr(schema.getKey());\n                 if (attr == null) {\n@@ -388,8 +388,8 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n         LOG.debug(\"Attributes to be removed:\\n{}\", propByRes);\n \n         // 6. attributes to be updated\n-        for (AttrMod attributeMod : anyMod.getPlainAttrsToUpdate()) {\n-            PlainSchema schema = getPlainSchema(attributeMod.getSchema());\n+        for (AttrMod attrMod : anyMod.getPlainAttrsToUpdate()) {\n+            PlainSchema schema = getPlainSchema(attrMod.getSchema());\n             PlainAttr attr = null;\n             if (schema != null) {\n                 attr = any.getPlainAttr(schema.getKey());\n@@ -407,7 +407,7 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n \n                 // 1.1 remove values\n                 Set<Long> valuesToBeRemoved = new HashSet<>();\n-                for (String valueToBeRemoved : attributeMod.getValuesToBeRemoved()) {\n+                for (String valueToBeRemoved : attrMod.getValuesToBeRemoved()) {\n                     if (attr.getSchema().isUniqueConstraint()) {\n                         if (attr.getUniqueValue() != null\n                                 && valueToBeRemoved.equals(attr.getUniqueValue().getValueAsString())) {\n@@ -422,17 +422,17 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n                         }\n                     }\n                 }\n-                for (Long attributeValueId : valuesToBeRemoved) {\n-                    plainAttrValueDAO.delete(attributeValueId, anyUtils.plainAttrValueClass());\n+                for (Long attrValueKey : valuesToBeRemoved) {\n+                    plainAttrValueDAO.delete(attrValueKey, anyUtils.plainAttrValueClass());\n                 }\n \n                 // 1.2 add values\n-                List<String> valuesToBeAdded = attributeMod.getValuesToBeAdded();\n+                List<String> valuesToBeAdded = attrMod.getValuesToBeAdded();\n                 if (valuesToBeAdded != null && !valuesToBeAdded.isEmpty()\n                         && (!schema.isUniqueConstraint() || attr.getUniqueValue() == null\n                         || !valuesToBeAdded.iterator().next().equals(attr.getUniqueValue().getValueAsString()))) {\n \n-                    fillAttribute(attributeMod.getValuesToBeAdded(), anyUtils, schema, attr, invalidValues);\n+                    fillAttribute(attrMod.getValuesToBeAdded(), anyUtils, schema, attr, invalidValues);\n                 }\n \n                 // if no values are in, the attribute can be safely removed"},{"sha":"08c7e1d4582787fb806b000d96b89ec2bb46d8a4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import static org.apache.syncope.core.provisioning.java.data.AbstractAnyDataBinder.LOG;\n-\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Map;"},{"sha":"fe135b27e043ba43cd5378798c1b80eaf01d33da","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import static org.apache.syncope.core.provisioning.java.data.AbstractAnyDataBinder.LOG;\n-\n import org.apache.syncope.core.provisioning.api.data.ConfigurationDataBinder;\n import java.util.Collections;\n import java.util.List;"},{"sha":"2295753a538847cc7045fc36bcc4f457ebbf3cbb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -61,6 +61,8 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.AnyFilter;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n+import org.apache.syncope.core.provisioning.java.sync.PushJobDelegate;\n+import org.apache.syncope.core.provisioning.java.sync.SyncJobDelegate;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.quartz.Trigger;\n@@ -147,6 +149,8 @@ private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO\n             final PushTask pushTask = (PushTask) task;\n             final PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n \n+            pushTask.setJobDelegateClassName(PushJobDelegate.class.getName());\n+\n             pushTask.setMatchingRule(pushTaskTO.getMatchingRule() == null\n                     ? MatchingRule.LINK : pushTaskTO.getMatchingRule());\n             pushTask.setUnmatchingRule(pushTaskTO.getUnmatchingRule() == null\n@@ -181,6 +185,8 @@ public boolean evaluate(final AnyFilter anyFilter) {\n \n             syncTask.setDestinationRealm(realmDAO.find(syncTaskTO.getDestinationRealm()));\n \n+            syncTask.setJobDelegateClassName(SyncJobDelegate.class.getName());\n+\n             syncTask.setMatchingRule(syncTaskTO.getMatchingRule() == null\n                     ? MatchingRule.UPDATE : syncTaskTO.getMatchingRule());\n             syncTask.setUnmatchingRule(syncTaskTO.getUnmatchingRule() == null\n@@ -239,7 +245,7 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtils taskU\n         task.setDescription(taskTO.getDescription());\n \n         if (taskUtils.getType() == TaskType.SCHEDULED) {\n-            task.setJobClassName(taskTO.getJobClassName());\n+            task.setJobDelegateClassName(taskTO.getJobDelegateClassName());\n         } else if (taskTO instanceof AbstractProvisioningTaskTO) {\n             AbstractProvisioningTaskTO provisioningTaskTO = (AbstractProvisioningTaskTO) taskTO;\n "},{"sha":"3042239bfab3032cdcacf931b3b5b752ce994cf1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java","status":"renamed","additions":27,"deletions":99,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -19,141 +19,87 @@\n package org.apache.syncope.core.provisioning.java.job;\n \n import java.util.Date;\n-import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.lib.types.AuditElements.Result;\n+import org.apache.syncope.core.misc.AuditManager;\n+import org.apache.syncope.core.misc.ExceptionUtils2;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.provisioning.api.job.TaskJob;\n-import org.apache.syncope.core.misc.AuditManager;\n-import org.apache.syncope.core.misc.DataFormat;\n-import org.apache.syncope.core.misc.ExceptionUtils2;\n-import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n-import org.quartz.DisallowConcurrentExecution;\n-import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n-import org.quartz.UnableToInterruptJobException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n-/**\n- * Abstract job implementation that delegates to concrete implementation the actual job execution and provides some\n- * base features.\n- * <strong>Extending this class will not provide support transaction management.</strong><br/>\n- * Extend <tt>AbstractTransactionalTaskJob</tt> for this purpose.\n- *\n- * @see AbstractTransactionalTaskJob\n- */\n-@DisallowConcurrentExecution\n-public abstract class AbstractTaskJob implements TaskJob {\n+public abstract class AbstractSchedTaskJobDelegate implements SchedTaskJobDelegate {\n \n-    /**\n-     * Task execution status.\n-     */\n-    public enum Status {\n-\n-        SUCCESS,\n-        FAILURE\n-\n-    }\n+    protected static final Logger LOG = LoggerFactory.getLogger(SchedTaskJobDelegate.class);\n \n     /**\n-     * Logger.\n+     * The actual task to be executed.\n      */\n-    protected static final Logger LOG = LoggerFactory.getLogger(AbstractTaskJob.class);\n+    protected Task task;\n \n     /**\n-     * Task DAO.\n+     * Task execution DAO.\n      */\n     @Autowired\n-    protected TaskDAO taskDAO;\n+    protected TaskExecDAO taskExecDAO;\n \n     /**\n-     * Task execution DAO.\n+     * Task DAO.\n      */\n     @Autowired\n-    private TaskExecDAO taskExecDAO;\n+    protected TaskDAO taskDAO;\n \n-    /**\n-     * Configuration DAO.\n-     */\n     @Autowired\n-    private ConfDAO confDAO;\n+    protected EntityFactory entityFactory;\n \n     /**\n      * Notification manager.\n      */\n     @Autowired\n-    private NotificationManager notificationManager;\n+    protected NotificationManager notificationManager;\n \n     /**\n      * Audit manager.\n      */\n     @Autowired\n-    private AuditManager auditManager;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    /**\n-     * Id, set by the caller, for identifying the task to be executed.\n-     */\n-    protected Long taskId;\n-\n-    /**\n-     * The actual task to be executed.\n-     */\n-    protected Task task;\n-\n-    /**\n-     * The current running thread containing the task to be executed.\n-     */\n-    protected AtomicReference<Thread> runningThread = new AtomicReference<Thread>();\n-\n-    /**\n-     * Task id setter.\n-     *\n-     * @param taskId to be set\n-     */\n-    @Override\n-    public void setTaskId(final Long taskId) {\n-        this.taskId = taskId;\n-    }\n+    protected AuditManager auditManager;\n \n+    @Transactional\n     @Override\n-    public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        this.runningThread.set(Thread.currentThread());\n-        task = taskDAO.find(taskId);\n+    public void execute(final Long taskKey, final boolean dryRun) throws JobExecutionException {\n+        task = taskDAO.find(taskKey);\n         if (task == null) {\n-            throw new JobExecutionException(\"Task \" + taskId + \" not found\");\n+            throw new JobExecutionException(\"Task \" + taskKey + \" not found\");\n         }\n \n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStartDate(new Date());\n         execution.setTask(task);\n \n-        Result result;\n+        AuditElements.Result result;\n \n         try {\n-            execution.setMessage(doExecute(context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY)));\n-            execution.setStatus(Status.SUCCESS.name());\n-            result = Result.SUCCESS;\n+            execution.setMessage(doExecute(dryRun));\n+            execution.setStatus(TaskJob.Status.SUCCESS.name());\n+            result = AuditElements.Result.SUCCESS;\n         } catch (JobExecutionException e) {\n-            LOG.error(\"While executing task \" + taskId, e);\n-            result = Result.FAILURE;\n+            LOG.error(\"While executing task \" + taskKey, e);\n+            result = AuditElements.Result.FAILURE;\n \n             execution.setMessage(ExceptionUtils2.getFullStackTrace(e));\n-            execution.setStatus(Status.FAILURE.name());\n+            execution.setStatus(TaskJob.Status.FAILURE.name());\n         }\n         execution.setEndDate(new Date());\n \n         if (hasToBeRegistered(execution)) {\n-            taskExecDAO.saveAndAdd(taskId, execution);\n+            taskExecDAO.saveAndAdd(taskKey, execution);\n         }\n         task = taskDAO.save(task);\n \n@@ -195,22 +141,4 @@ protected boolean hasToBeRegistered(final TaskExec execution) {\n         return false;\n     }\n \n-    @Override\n-    public void interrupt() throws UnableToInterruptJobException {\n-        Thread thread = this.runningThread.getAndSet(null);\n-        if (thread == null) {\n-            LOG.warn(\"Unable to retrieve the thread of the current job execution\");\n-        } else {\n-            LOG.info(\"Interrupting job from thread {} at {} \", thread.getId(), DataFormat.format(new Date()));\n-\n-            long maxRetry = confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue();\n-            for (int i = 0; i < maxRetry && thread.isAlive(); i++) {\n-                thread.interrupt();\n-            }\n-            // if the thread is still alive, it should be available in the next stop\n-            if (thread.isAlive()) {\n-                this.runningThread.set(thread);\n-            }\n-        }\n-    }\n }","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractTaskJob.java"},{"sha":"e0319050a1aa87615d2d3cdb50f779dc38981a10","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SampleJob.java","status":"removed","additions":0,"deletions":52,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSampleJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b2e84011274c072130fae8c8f082f7394c27c1e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSampleJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSampleJob.java?ref=b2e84011274c072130fae8c8f082f7394c27c1e1","patch":"@@ -1,52 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.job;\n-\n-import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.quartz.JobExecutionException;\n-\n-/**\n- * Sample implementation for execution a scheduled task.\n- *\n- * @see SchedTask\n- */\n-public class SampleJob extends AbstractTaskJob {\n-\n-    @Override\n-    protected String doExecute(final boolean dryRun) throws JobExecutionException {\n-        if (!(task instanceof SchedTask)) {\n-            throw new JobExecutionException(\"Task \" + taskId + \" isn't a SchedTask\");\n-        }\n-        final SchedTask schedTask = (SchedTask) this.task;\n-\n-        LOG.info(\"SampleJob {}running [SchedTask {}]\", (dryRun\n-                ? \"dry \"\n-                : \"\"), schedTask.getKey());\n-\n-        return (dryRun\n-                ? \"DRY \"\n-                : \"\") + \"RUNNING\";\n-    }\n-\n-    @Override\n-    protected boolean hasToBeRegistered(final TaskExec execution) {\n-        return true;\n-    }\n-}"},{"sha":"925c6e675169b92bc4c8b3749886511b46c43311","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SpringBeanJobFactory.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSpringBeanJobFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSpringBeanJobFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSpringBeanJobFactory.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -26,14 +26,18 @@\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ConfigurableApplicationContext;\n \n+/**\n+ * An implementation of SpringBeanJobFactory that retrieves the bean from the Spring context so that autowiring and\n+ * transactions work.\n+ */\n public class SpringBeanJobFactory extends org.springframework.scheduling.quartz.SpringBeanJobFactory {\n \n     private String[] ignoredUnknownProperties;\n \n     private SchedulerContext schedulerContext;\n \n     @Override\n-    public void setIgnoredUnknownProperties(final String[] ignoredUnknownProperties) {\n+    public void setIgnoredUnknownProperties(final String... ignoredUnknownProperties) {\n         String[] defensiveCopy = ignoredUnknownProperties.clone();\n         super.setIgnoredUnknownProperties(defensiveCopy);\n         this.ignoredUnknownProperties = defensiveCopy;\n@@ -45,12 +49,6 @@ public void setSchedulerContext(final SchedulerContext schedulerContext) {\n         this.schedulerContext = schedulerContext;\n     }\n \n-    /**\n-     * An implementation of SpringBeanJobFactory that retrieves the bean from the Spring context so that autowiring and\n-     * transactions work.\n-     *\n-     * {@inheritDoc}\n-     */\n     @Override\n     protected Object createJobInstance(final TriggerFiredBundle bundle) throws Exception {\n         final ApplicationContext ctx = ((ConfigurableApplicationContext) schedulerContext.get(\"applicationContext\"));"},{"sha":"2001e2213a504c222e7443ad44865592429aded8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.job;\n+\n+import java.util.Date;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.commons.lang3.ClassUtils;\n+import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n+import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n+import org.quartz.DisallowConcurrentExecution;\n+import org.quartz.InterruptableJob;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.quartz.UnableToInterruptJobException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+\n+@DisallowConcurrentExecution\n+public class TaskJob implements InterruptableJob {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TaskJob.class);\n+\n+    public static final String DRY_RUN_JOBDETAIL_KEY = \"dryRun\";\n+\n+    public static final String DELEGATE_CLASS_KEY = \"delegateClass\";\n+\n+    public static final String INTERRUPT_MAX_RETRIES_KEY = \"interruptMaxRetries\";\n+\n+    /**\n+     * Task execution status.\n+     */\n+    public enum Status {\n+\n+        SUCCESS,\n+        FAILURE\n+\n+    }\n+\n+    /**\n+     * The current running thread containing the task to be executed.\n+     */\n+    private final AtomicReference<Thread> runningThread = new AtomicReference<>();\n+\n+    /**\n+     * Key, set by the caller, for identifying the task to be executed.\n+     */\n+    private Long taskKey;\n+\n+    private long interruptMaxRetries = 1;\n+\n+    /**\n+     * Task key setter.\n+     *\n+     * @param taskKey to be set\n+     */\n+    public void setTaskKey(final Long taskKey) {\n+        this.taskKey = taskKey;\n+    }\n+\n+    @Override\n+    public void execute(final JobExecutionContext context) throws JobExecutionException {\n+        this.runningThread.set(Thread.currentThread());\n+        this.interruptMaxRetries = context.getMergedJobDataMap().getLong(INTERRUPT_MAX_RETRIES_KEY);\n+\n+        AuthContextUtils.setFakeAuth(context.getMergedJobDataMap().getString(JobInstanceLoader.DOMAIN));\n+        try {\n+            Class<?> delegateClass = ClassUtils.getClass(context.getMergedJobDataMap().getString(DELEGATE_CLASS_KEY));\n+\n+            ((SchedTaskJobDelegate) ApplicationContextProvider.getBeanFactory().\n+                    createBean(delegateClass, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false)).\n+                    execute(taskKey, context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY));\n+        } catch (Exception e) {\n+            throw new JobExecutionException(e);\n+        } finally {\n+            AuthContextUtils.clearFakeAuth();\n+        }\n+    }\n+\n+    @Override\n+    public void interrupt() throws UnableToInterruptJobException {\n+        Thread thread = this.runningThread.getAndSet(null);\n+        if (thread == null) {\n+            LOG.warn(\"Unable to retrieve the thread of the current job execution\");\n+        } else {\n+            LOG.info(\"Interrupting job from thread {} at {} \", thread.getId(), DataFormat.format(new Date()));\n+\n+            if (interruptMaxRetries < 1) {\n+                interruptMaxRetries = 1;\n+            }\n+            for (int i = 0; i < interruptMaxRetries && thread.isAlive(); i++) {\n+                thread.interrupt();\n+            }\n+            // if the thread is still alive, it should be available in the next stop\n+            if (thread.isAlive()) {\n+                this.runningThread.set(thread);\n+            }\n+        }\n+    }\n+}"},{"sha":"1c704df03a69cd1efbfcf40c057454e9a064622a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -195,11 +195,11 @@ public List<PropagationTask> getAnyObjectUpdateTasks(\n     }\n \n     @Override\n-    public List<PropagationTask> getUserUpdateTasks(final User user, final Boolean enable,\n+    public List<PropagationTask> getUserUpdateTasks(final Long key, final Boolean enable,\n             final Collection<String> noPropResourceNames) {\n \n         return getUpdateTasks(\n-                user, // user to be updated on external resources\n+                userDAO.find(key), // user to be updated on external resources\n                 null, // no password\n                 false,\n                 enable, // status to be propagated\n@@ -236,7 +236,7 @@ public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserMo\n         } else {\n             // b. generate the propagation task list in two phases: first the ones containing password,\n             // the the rest (with no password)\n-            final PropagationByResource origPropByRes = new PropagationByResource();\n+            PropagationByResource origPropByRes = new PropagationByResource();\n             origPropByRes.merge(wfResult.getPropByRes());\n \n             Set<String> pwdResourceNames = new HashSet<>(userMod.getPwdPropRequest().getResourceNames());"},{"sha":"0c8deb250c027456209cf9999902fee304e9ddee","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractProvisioningJobDelegate.java","status":"renamed","additions":8,"deletions":54,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJobDelegate.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,20 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.java.sync;\n \n-import static org.apache.syncope.common.lib.types.AnyTypeKind.USER;\n-\n import java.lang.reflect.ParameterizedType;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.TraceLevel;\n-import org.apache.syncope.core.misc.security.SyncopeAuthenticationDetails;\n-import org.apache.syncope.core.misc.security.SyncopeGrantedAuthority;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n@@ -42,25 +34,14 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningActions;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n-import org.apache.syncope.core.provisioning.java.job.AbstractTaskJob;\n+import org.apache.syncope.core.provisioning.java.job.AbstractSchedTaskJobDelegate;\n+import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n-import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.security.core.userdetails.User;\n \n-/**\n- * Job for executing synchronization tasks.\n- *\n- * @see AbstractTaskJob\n- * @see org.apache.syncope.core.persistence.api.entity.task.SyncTask\n- * @see org.apache.syncope.core.persistence.api.entity.task.PushTask\n- */\n-public abstract class AbstractProvisioningJob<T extends ProvisioningTask, A extends ProvisioningActions>\n-        extends AbstractTaskJob {\n+public abstract class AbstractProvisioningJobDelegate<T extends ProvisioningTask>\n+        extends AbstractSchedTaskJobDelegate {\n \n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n@@ -86,15 +67,6 @@\n     @Autowired\n     protected PolicyDAO policyDAO;\n \n-    /**\n-     * SyncJob actions.\n-     */\n-    protected List<A> actions;\n-\n-    public void setActions(final List<A> actions) {\n-        this.actions = actions;\n-    }\n-\n     /**\n      * Create a textual report of the synchronization, based on the trace level.\n      *\n@@ -398,25 +370,10 @@ protected String createReport(final Collection<ProvisioningResult> provResults,\n \n     @Override\n     protected String doExecute(final boolean dryRun) throws JobExecutionException {\n-        // PRE: grant all authorities (i.e. setup the SecurityContextHolder)\n-        List<GrantedAuthority> authorities = CollectionUtils.collect(Entitlement.values(),\n-                new Transformer<String, GrantedAuthority>() {\n-\n-                    @Override\n-                    public GrantedAuthority transform(final String entitlement) {\n-                        return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-                    }\n-                }, new ArrayList<GrantedAuthority>());\n-\n-        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n-                new User(adminUser, \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n-        auth.setDetails(new SyncopeAuthenticationDetails(taskDAO.getDomain(task)));\n-        SecurityContextHolder.getContext().setAuthentication(auth);\n-\n         try {\n             Class<T> clazz = getTaskClassReference();\n             if (!clazz.isAssignableFrom(task.getClass())) {\n-                throw new JobExecutionException(\"Task \" + taskId + \" isn't a SyncTask\");\n+                throw new JobExecutionException(\"Task \" + task.getKey() + \" isn't a ProvisioningTask\");\n             }\n \n             T provisioningTask = clazz.cast(task);\n@@ -445,20 +402,17 @@ public GrantedAuthority transform(final String entitlement) {\n                 return \"No mapping configured for both users and groups: aborting...\";\n             }\n \n-            return executeWithSecurityContext(\n+            return doExecuteProvisioning(\n                     provisioningTask,\n                     connector,\n                     dryRun);\n         } catch (Throwable t) {\n             LOG.error(\"While executing provisioning job {}\", getClass().getName(), t);\n             throw t;\n-        } finally {\n-            // POST: clean up the SecurityContextHolder\n-            SecurityContextHolder.clearContext();\n         }\n     }\n \n-    protected abstract String executeWithSecurityContext(\n+    protected abstract String doExecuteProvisioning(\n             final T task,\n             final Connector connector,\n             final boolean dryRun) throws JobExecutionException;\n@@ -468,7 +422,7 @@ protected boolean hasToBeRegistered(final TaskExec execution) {\n         final ProvisioningTask provTask = (ProvisioningTask) task;\n \n         // True if either failed and failures have to be registered, or if ALL has to be registered.\n-        return (Status.valueOf(execution.getStatus()) == Status.FAILURE\n+        return (TaskJob.Status.valueOf(execution.getStatus()) == TaskJob.Status.FAILURE\n                 && provTask.getResource().getSyncTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n                 || provTask.getResource().getSyncTraceLevel().ordinal() >= TraceLevel.SUMMARY.ordinal();\n     }","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractProvisioningJob.java"},{"sha":"6be21676d53a26134082ae474d19032a809b733f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -50,6 +50,7 @@\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.quartz.JobExecutionException;\n+import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHandler<PushTask, PushActions>\n@@ -71,7 +72,7 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan\n \n     protected abstract ConnectorObject getRemoteObject(String connObjectKey, ObjectClass objectClass);\n \n-    @Transactional\n+    @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public boolean handle(final long anyKey) {\n         Any<?, ?, ?> any = null;"},{"sha":"b0b5a588e35c946519f0e8119fa056271a756858","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -44,7 +44,9 @@\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n+@Transactional(rollbackFor = Throwable.class)\n public abstract class AbstractSyncResultHandler extends AbstractSyncopeResultHandler<SyncTask, SyncActions>\n         implements SyncopeSyncResultHandler {\n \n@@ -614,9 +616,7 @@ private List<ProvisioningResult> ignore(\n      * @param provision provisioning info\n      * @throws JobExecutionException in case of synchronization failure.\n      */\n-    protected void doHandle(final SyncDelta delta, final Provision provision)\n-            throws JobExecutionException {\n-\n+    protected void doHandle(final SyncDelta delta, final Provision provision) throws JobExecutionException {\n         AnyUtils anyUtils = getAnyUtils();\n \n         LOG.debug(\"Process {} for {} as {}\","},{"sha":"49a38d3d2cf6c8f3c89df403e6fafa0274a3d592","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncopeResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningActions;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n import org.apache.syncope.core.provisioning.api.sync.SyncopeResultHandler;\n import org.apache.syncope.core.misc.AuditManager;\n@@ -39,6 +38,7 @@\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningActions;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;"},{"sha":"ff6ff21fecaa6d087f5fc783c0893d05d86f6a3a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/PushJobDelegate.java","status":"renamed","additions":29,"deletions":26,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,42 +18,35 @@\n  */\n package org.apache.syncope.core.provisioning.java.sync;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n-import org.apache.syncope.core.provisioning.api.Connector;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.sync.PushActions;\n-import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.provisioning.api.job.PushJob;\n+import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.sync.AnyObjectPushResultHandler;\n import org.apache.syncope.core.provisioning.api.sync.GroupPushResultHandler;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n+import org.apache.syncope.core.provisioning.api.sync.PushActions;\n import org.apache.syncope.core.provisioning.api.sync.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.api.sync.UserPushResultHandler;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n \n-/**\n- * Job for executing synchronization (towards external resource) tasks.\n- *\n- * @see AbstractProvisioningJob\n- * @see PushTask\n- * @see PushActions\n- */\n-public class PushJobImpl extends AbstractProvisioningJob<PushTask, PushActions> implements PushJob {\n+public class PushJobDelegate extends AbstractProvisioningJobDelegate<PushTask> {\n \n     private static final int PAGE_SIZE = 1000;\n \n@@ -98,36 +91,46 @@ private AnyDAO<?> getAnyDAO(final AnyTypeKind anyTypeKind) {\n     }\n \n     @Override\n-    protected String executeWithSecurityContext(\n+    protected String doExecuteProvisioning(\n             final PushTask pushTask,\n             final Connector connector,\n             final boolean dryRun) throws JobExecutionException {\n \n         LOG.debug(\"Executing push on {}\", pushTask.getResource());\n \n-        ProvisioningProfile<PushTask, PushActions> profile = new ProvisioningProfile<>(connector, pushTask);\n-        if (actions != null) {\n-            profile.getActions().addAll(actions);\n+        List<PushActions> actions = new ArrayList<>();\n+        for (String className : pushTask.getActionsClassNames()) {\n+            try {\n+                Class<?> actionsClass = Class.forName(className);\n+\n+                PushActions syncActions = (PushActions) ApplicationContextProvider.getBeanFactory().\n+                        createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+                actions.add(syncActions);\n+            } catch (Exception e) {\n+                LOG.info(\"Class '{}' not found\", className, e);\n+            }\n         }\n+\n+        ProvisioningProfile<PushTask, PushActions> profile = new ProvisioningProfile<>(connector, pushTask);\n         profile.setDryRun(dryRun);\n         profile.setResAct(null);\n \n         AnyObjectPushResultHandler ahandler =\n-                (AnyObjectPushResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n+                (AnyObjectPushResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(AnyObjectPushResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n         ahandler.setProfile(profile);\n \n         UserPushResultHandler uhandler =\n-                (UserPushResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n+                (UserPushResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(UserPushResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n         uhandler.setProfile(profile);\n \n         GroupPushResultHandler ghandler =\n-                (GroupPushResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n+                (GroupPushResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(GroupPushResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n         ghandler.setProfile(profile);\n \n-        if (actions != null && !profile.isDryRun()) {\n+        if (!profile.isDryRun()) {\n             for (PushActions action : actions) {\n                 action.beforeAll(profile);\n             }\n@@ -176,7 +179,7 @@ protected String executeWithSecurityContext(\n             }\n         }\n \n-        if (actions != null && !profile.isDryRun()) {\n+        if (!profile.isDryRun()) {\n             for (PushActions action : actions) {\n                 action.afterAll(profile);\n             }","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/PushJobImpl.java"},{"sha":"245a74aecb36bd730494476c65feaea18c24e462","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncJobDelegate.java","status":"renamed","additions":44,"deletions":35,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,54 +18,52 @@\n  */\n package org.apache.syncope.core.provisioning.java.sync;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.mod.ReferenceMod;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.types.SyncPolicySpec;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.provisioning.api.Connector;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n-import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.provisioning.api.job.SyncJob;\n import org.apache.syncope.core.provisioning.api.sync.AnyObjectSyncResultHandler;\n import org.apache.syncope.core.provisioning.api.sync.GroupSyncResultHandler;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n+import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n import org.apache.syncope.core.provisioning.api.sync.UserSyncResultHandler;\n-import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n \n-/**\n- * Job for executing synchronization (from external resource) tasks.\n- *\n- * @see AbstractProvisioningJob\n- * @see SyncTask\n- */\n-public class SyncJobImpl extends AbstractProvisioningJob<SyncTask, SyncActions> implements SyncJob {\n+public class SyncJobDelegate extends AbstractProvisioningJobDelegate<SyncTask> {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n \n-    /**\n-     * Group workflow adapter.\n-     */\n     @Autowired\n-    private GroupWorkflowAdapter gwfAdapter;\n+    private GroupDAO groupDAO;\n \n     @Autowired\n     protected SyncUtils syncUtils;\n \n     protected void setGroupOwners(final GroupSyncResultHandler ghandler) {\n         for (Map.Entry<Long, String> entry : ghandler.getGroupOwnerMap().entrySet()) {\n-            GroupMod groupMod = new GroupMod();\n-            groupMod.setKey(entry.getKey());\n+            Group group = groupDAO.find(entry.getKey());\n+            if (group == null) {\n+                throw new NotFoundException(\"Group \" + entry.getKey());\n+            }\n \n             if (StringUtils.isBlank(entry.getValue())) {\n-                groupMod.setGroupOwner(null);\n-                groupMod.setUserOwner(null);\n+                group.setGroupOwner(null);\n+                group.setUserOwner(null);\n             } else {\n                 Long userKey = syncUtils.findMatchingAnyKey(\n                         anyTypeDAO.findUser(),\n@@ -81,51 +79,62 @@ protected void setGroupOwners(final GroupSyncResultHandler ghandler) {\n                             ghandler.getProfile().getConnector());\n \n                     if (groupKey != null) {\n-                        groupMod.setGroupOwner(new ReferenceMod(groupKey));\n+                        group.setGroupOwner(groupDAO.find(groupKey));\n                     }\n                 } else {\n-                    groupMod.setUserOwner(new ReferenceMod(userKey));\n+                    group.setUserOwner(userDAO.find(userKey));\n                 }\n             }\n \n-            gwfAdapter.update(groupMod);\n+            groupDAO.save(group);\n         }\n     }\n \n     @Override\n-    protected String executeWithSecurityContext(\n+    protected String doExecuteProvisioning(\n             final SyncTask syncTask,\n             final Connector connector,\n             final boolean dryRun) throws JobExecutionException {\n \n         LOG.debug(\"Executing sync on {}\", syncTask.getResource());\n \n-        ProvisioningProfile<SyncTask, SyncActions> profile = new ProvisioningProfile<>(connector, syncTask);\n-        if (actions != null) {\n-            profile.getActions().addAll(actions);\n+        List<SyncActions> actions = new ArrayList<>();\n+        for (String className : syncTask.getActionsClassNames()) {\n+            try {\n+                Class<?> actionsClass = Class.forName(className);\n+                SyncActions syncActions = (SyncActions) ApplicationContextProvider.getBeanFactory().\n+                        createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+\n+                actions.add(syncActions);\n+            } catch (Exception e) {\n+                LOG.info(\"Class '{}' not found\", className, e);\n+            }\n         }\n+\n+        ProvisioningProfile<SyncTask, SyncActions> profile = new ProvisioningProfile<>(connector, syncTask);\n+        profile.getActions().addAll(actions);\n         profile.setDryRun(dryRun);\n         profile.setResAct(getSyncPolicySpec(syncTask).getConflictResolutionAction());\n \n         // Prepare handler for SyncDelta objects (any objects)\n         AnyObjectSyncResultHandler ahandler =\n-                (AnyObjectSyncResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n+                (AnyObjectSyncResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(AnyObjectSyncResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n         ahandler.setProfile(profile);\n \n         // Prepare handler for SyncDelta objects (users)\n         UserSyncResultHandler uhandler =\n-                (UserSyncResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n+                (UserSyncResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(UserSyncResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n         uhandler.setProfile(profile);\n \n         // Prepare handler for SyncDelta objects (groups)\n         GroupSyncResultHandler ghandler =\n-                (GroupSyncResultHandler) ApplicationContextProvider.getApplicationContext().getBeanFactory().\n+                (GroupSyncResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(GroupSyncResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n         ghandler.setProfile(profile);\n \n-        if (actions != null && !profile.isDryRun()) {\n+        if (!profile.isDryRun()) {\n             for (SyncActions action : actions) {\n                 action.beforeAll(profile);\n             }\n@@ -182,7 +191,7 @@ protected String executeWithSecurityContext(\n             LOG.error(\"While setting group owners\", e);\n         }\n \n-        if (actions != null && !profile.isDryRun()) {\n+        if (!profile.isDryRun()) {\n             for (SyncActions action : actions) {\n                 action.afterAll(profile);\n             }","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncJobImpl.java"},{"sha":"dc5cdf037387af94de3f784eb172d76e0095d292","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -64,7 +64,9 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n+@Transactional(readOnly = true)\n @Component\n public class SyncUtils {\n "},{"sha":"20a36731e04c7ff375052dcf869d757ff8ecba50","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserSyncResultHandlerImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -107,12 +107,11 @@ protected void doDeprovision(\n             final Long key,\n             final boolean unlink) {\n \n-        taskExecutor.execute(\n-                propagationManager.getUserDeleteTasks(\n-                        key, Collections.singleton(profile.getTask().getResource().getKey())));\n+        taskExecutor.execute(propagationManager.getUserDeleteTasks(\n+                key, Collections.singleton(profile.getTask().getResource().getKey())));\n \n         if (unlink) {\n-            final UserMod userMod = new UserMod();\n+            UserMod userMod = new UserMod();\n             userMod.setKey(key);\n             userMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n         }"},{"sha":"59e59160d7a88b47e3809a4a7bd274f1a54395c1","filename":"core/provisioning-java/src/main/resources/provisioning.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,3 +18,6 @@ userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserPro\n groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\n anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n+\n+quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n+quartz.sql=tables_postgres.sql"},{"sha":"2f0f617a0dbbb8ec7e333644c82d8eeeda277727","filename":"core/provisioning-java/src/main/resources/provisioningContext.xml","status":"modified","additions":23,"deletions":4,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -35,14 +35,33 @@ under the License.\n   <bean class=\"${groupProvisioningManager}\"/>\n   <bean class=\"${anyObjectProvisioningManager}\"/>\n \n+  <bean id=\"quartzDataSourceInit\" class=\"org.springframework.jdbc.datasource.init.DataSourceInitializer\">\n+    <property name=\"dataSource\" ref=\"MasterDataSource\"/>\n+    <property name=\"enabled\" value=\"true\"/>\n+    <property name=\"databasePopulator\">\n+      <bean class=\"org.springframework.jdbc.datasource.init.ResourceDatabasePopulator\">\n+        <property name=\"continueOnError\" value=\"true\"/>\n+        <property name=\"ignoreFailedDrops\" value=\"true\"/>\n+        <property name=\"sqlScriptEncoding\" value=\"UTF-8\"/>\n+        <property name=\"scripts\">\n+          <array>\n+            <value type=\"org.springframework.core.io.Resource\">\n+              classpath:/quartz/${quartz.sql}\n+            </value>\n+          </array>\n+        </property>\n+      </bean>\n+    </property>\n+  </bean>\n+\n   <bean id=\"scheduler\" class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\"\n-        lazy-init=\"false\" depends-on=\"nonJPAdbInitializer\">\n+        lazy-init=\"false\" depends-on=\"quartzDataSourceInit\">\n     <property name=\"autoStartup\" value=\"true\"/>\n     <property name=\"applicationContextSchedulerContextKey\" value=\"applicationContext\"/>\n     <property name=\"waitForJobsToCompleteOnShutdown\" value=\"true\"/>\n     <property name=\"overwriteExistingJobs\" value=\"true\"/>\n-    <property name=\"dataSource\" ref=\"dataSource\"/>\n-    <property name=\"transactionManager\" ref=\"transactionManager\"/>\n+    <property name=\"dataSource\" ref=\"MasterDataSource\"/>\n+    <property name=\"transactionManager\" ref=\"MasterTransactionManager\"/>\n     <property name=\"jobFactory\">\n       <bean class=\"org.apache.syncope.core.provisioning.java.job.SpringBeanJobFactory\"/>\n     </property>\n@@ -104,7 +123,7 @@ under the License.\n     <constructor-arg index=\"1\" value=\"true\"/>\n   </bean>\n \n-  <bean id=\"connIdBundleManager\" class=\"org.apache.syncope.core.provisioning.java.ConnIdBundleManagerImpl\" scope=\"singleton\">\n+  <bean id=\"connIdBundleManager\" class=\"org.apache.syncope.core.provisioning.java.ConnIdBundleManagerImpl\">\n     <property name=\"stringLocations\" value=\"${connid.locations}\"/>\n   </bean>\n "},{"sha":"e798223d2bef8300a76f5147a9f4a8188f2a6604","filename":"core/provisioning-java/src/main/resources/quartz/tables_h2.sql","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_h2.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_h2.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_h2.sql?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","previous_filename":"core/persistence-jpa/src/main/resources/quartz/tables_h2.sql"},{"sha":"ebb8e59702733989df95b2792d20d08f8b775dd6","filename":"core/provisioning-java/src/main/resources/quartz/tables_mariadb.sql","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mariadb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mariadb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mariadb.sql?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","previous_filename":"core/persistence-jpa/src/main/resources/quartz/tables_mariadb.sql"},{"sha":"ebb8e59702733989df95b2792d20d08f8b775dd6","filename":"core/provisioning-java/src/main/resources/quartz/tables_mysql.sql","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql.sql?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","previous_filename":"core/persistence-jpa/src/main/resources/quartz/tables_mysql.sql"},{"sha":"c54493ed85c2cc9b1dbfb2abd2a206c03b353389","filename":"core/provisioning-java/src/main/resources/quartz/tables_mysql_innodb.sql","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql_innodb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql_innodb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql_innodb.sql?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","previous_filename":"core/persistence-jpa/src/main/resources/quartz/tables_mysql_innodb.sql"},{"sha":"4384ac59498df2ee32cd1dc003179f91f412128f","filename":"core/provisioning-java/src/main/resources/quartz/tables_oracle.sql","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","previous_filename":"core/persistence-jpa/src/main/resources/quartz/tables_oracle.sql"},{"sha":"9b7800f6e61c39c2b5fbf11ddbcbdbcd13f3031d","filename":"core/provisioning-java/src/main/resources/quartz/tables_postgres.sql","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_postgres.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_postgres.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_postgres.sql?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","previous_filename":"core/persistence-jpa/src/main/resources/quartz/tables_postgres.sql"},{"sha":"288b990f9bb6a7d4c5d8d42ee147a9d6c2d76a57","filename":"core/provisioning-java/src/main/resources/quartz/tables_sqlServer.sql","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_sqlServer.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_sqlServer.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_sqlServer.sql?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","previous_filename":"core/persistence-jpa/src/main/resources/quartz/tables_sqlServer.sql"},{"sha":"07bda8a09167b8392f53a27aa82357f46465c503","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/AbstractTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -21,6 +21,7 @@\n import org.junit.runner.RunWith;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.transaction.TransactionConfiguration;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\n@@ -29,5 +30,6 @@\n     \"classpath:workflowContext.xml\",\n     \"classpath:provisioningTest.xml\"\n })\n+@TransactionConfiguration(transactionManager = \"MasterTransactionManager\")\n public abstract class AbstractTest {\n }"},{"sha":"1a71b89b0a56edc05bcfd668768d1c517329de02","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ConnectorManagerTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -65,7 +65,7 @@ public void load() {\n         }\n \n         assertEquals(expected,\n-                ApplicationContextProvider.getApplicationContext().\n+                ApplicationContextProvider.getBeanFactory().\n                 getBeanNamesForType(Connector.class, false, true).length);\n     }\n }"},{"sha":"98392af4afe71e6787830d98d74ea6be548de1ca","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/TestInitializer.java","status":"renamed","additions":13,"deletions":11,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FTestInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FTestInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FTestInitializer.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -16,20 +16,22 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java.job;\n+package org.apache.syncope.core.provisioning.java;\n \n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.content.ContentLoader;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n \n-/**\n- * Abstract job implementation for transactional execution.\n- */\n-public abstract class AbstractTransactionalTaskJob extends AbstractTaskJob {\n+@Component\n+public class TestInitializer implements InitializingBean {\n+\n+    @Autowired\n+    private ContentLoader contentLoader;\n \n-    @Transactional\n     @Override\n-    public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        super.execute(context);\n+    public void afterPropertiesSet() throws Exception {\n+        contentLoader.load();\n     }\n+\n }","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractTransactionalTaskJob.java"},{"sha":"54797a5ee1449ac4796b9bc96df4077ce8105118","filename":"core/provisioning-java/src/test/resources/provisioningTest.xml","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2FprovisioningTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2FprovisioningTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2FprovisioningTest.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -26,6 +26,7 @@ under the License.\n     <property name=\"locations\">\n       <list>\n         <value>classpath:persistence.properties</value>\n+        <value>classpath:domains/*.properties</value>\n         <value>classpath:security.properties</value>\n         <value>classpath:connid.properties</value>\n         <value>classpath:mail.properties</value>\n@@ -37,10 +38,4 @@ under the License.\n     <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n   </bean>\n   \n-  <bean id=\"contentXML\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n-    <property name=\"primary\" value=\"file:${conf.directory}/content.xml\"/>\n-    <property name=\"fallback\" value=\"classpath:content.xml\"/>\n-  </bean>\n-  <bean class=\"org.apache.syncope.core.persistence.jpa.content.XMLContentLoader\" init-method=\"load\"/>\n-  \n </beans>"},{"sha":"d54dbca4442edcfa3674aed6742a9c2f49bbedbd","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import static org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl.LOG;\n-\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -34,7 +32,7 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.wrap.ResourceKey;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n@@ -129,7 +127,7 @@ public Response delete(final Long key) {\n     }\n \n     @Override\n-    public Response bulkDeassociation(\n+    public Response deassociate(\n             final Long key, final ResourceDeassociationActionType type, final List<ResourceKey> resourceNames) {\n \n         TO any = getAnyLogic().read(key);\n@@ -174,8 +172,8 @@ public Response bulkDeassociation(\n     }\n \n     @Override\n-    public Response bulkAssociation(\n-            final Long key, final ResourceAssociationActionType type, final ResourceAssociationMod associationMod) {\n+    public Response associate(\n+            final Long key, final ResourceAssociationAction type, final ResourceAssociationMod associationMod) {\n \n         TO any = getAnyLogic().read(key);\n \n@@ -211,7 +209,7 @@ public Response bulkAssociation(\n \n         BulkActionResult result = new BulkActionResult();\n \n-        if (type == ResourceAssociationActionType.LINK) {\n+        if (type == ResourceAssociationAction.LINK) {\n             for (ResourceKey resourceName : associationMod.getTargetResources()) {\n                 result.getResults().put(resourceName.getElement(),\n                         updated.getResources().contains(resourceName.getElement())\n@@ -234,7 +232,7 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n \n         BulkActionResult result = new BulkActionResult();\n \n-        switch (bulkAction.getOperation()) {\n+        switch (bulkAction.getType()) {\n             case DELETE:\n                 for (String key : bulkAction.getTargets()) {\n                     try {"},{"sha":"bc431655bea2b4306a36a3ca3c1d1df86c7eedf4","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -132,7 +132,7 @@ public void reload() {\n     public BulkActionResult bulk(final BulkAction bulkAction) {\n         BulkActionResult result = new BulkActionResult();\n \n-        if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n+        if (bulkAction.getType() == BulkAction.Type.DELETE) {\n             for (String key : bulkAction.getTargets()) {\n                 try {\n                     result.getResults().put("},{"sha":"179e021131a2744780fbec279cf6c1154ba75203","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -144,7 +144,7 @@ public BulkActionResult bulkDeassociation(\n     public BulkActionResult bulk(final BulkAction bulkAction) {\n         BulkActionResult result = new BulkActionResult();\n \n-        if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n+        if (bulkAction.getType() == BulkAction.Type.DELETE) {\n             for (String name : bulkAction.getTargets()) {\n                 try {\n                     result.getResults().put(logic.delete(name).getKey(), BulkActionResult.Status.SUCCESS);"},{"sha":"3acf5c8602018a6074a5f102b5eb5b74d2df4450","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -124,7 +124,7 @@ public void update(final AbstractTaskTO taskTO) {\n     public BulkActionResult bulk(final BulkAction bulkAction) {\n         BulkActionResult result = new BulkActionResult();\n \n-        switch (bulkAction.getOperation()) {\n+        switch (bulkAction.getType()) {\n             case DELETE:\n                 for (String key : bulkAction.getTargets()) {\n                     try {"},{"sha":"494a03eb41f2607b94e48b6af91bf7a7324ac00e","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiDefinitionLoader.java","status":"modified","additions":36,"deletions":31,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiDefinitionLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiDefinitionLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiDefinitionLoader.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -24,15 +24,17 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.List;\n+import java.util.Map;\n import javax.annotation.Resource;\n import org.activiti.editor.constants.ModelDataJsonConstants;\n-import org.activiti.engine.RepositoryService;\n+import org.activiti.engine.ProcessEngine;\n import org.activiti.engine.repository.Model;\n import org.activiti.engine.repository.ProcessDefinition;\n import org.activiti.spring.SpringProcessEngineConfiguration;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n+import org.apache.syncope.core.workflow.activiti.spring.DomainProcessEngine;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -47,13 +49,7 @@ public class ActivitiDefinitionLoader implements SyncopeLoader {\n     private ResourceWithFallbackLoader userWorkflowDef;\n \n     @Autowired\n-    private RepositoryService repositoryService;\n-\n-    @Autowired\n-    private SpringProcessEngineConfiguration conf;\n-\n-    @Autowired\n-    private ActivitiImportUtils importUtils;\n+    private DomainProcessEngine dpEngine;\n \n     @Override\n     public Integer getPriority() {\n@@ -62,42 +58,51 @@ public Integer getPriority() {\n \n     @Override\n     public void load() {\n-        List<ProcessDefinition> processes = repositoryService.createProcessDefinitionQuery().processDefinitionKey(\n-                ActivitiUserWorkflowAdapter.WF_PROCESS_ID).list();\n-        LOG.debug(ActivitiUserWorkflowAdapter.WF_PROCESS_ID + \" Activiti processes in repository: {}\", processes);\n+        byte[] wfDef = new byte[0];\n \n-        // Only loads process definition from file if not found in repository\n-        if (processes.isEmpty()) {\n-            InputStream wfIn = null;\n-            try {\n-                wfIn = userWorkflowDef.getResource().getInputStream();\n-                repositoryService.createDeployment().addInputStream(ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE,\n-                        new ByteArrayInputStream(IOUtils.toByteArray(wfIn))).deploy();\n+        InputStream wfIn = null;\n+        try {\n+            wfIn = userWorkflowDef.getResource().getInputStream();\n+            wfDef = IOUtils.toByteArray(wfIn);\n+        } catch (IOException e) {\n+            LOG.error(\"While loading \" + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n+        } finally {\n+            IOUtils.closeQuietly(wfIn);\n+        }\n \n-                ProcessDefinition procDef = repositoryService.createProcessDefinitionQuery().processDefinitionKey(\n-                        ActivitiUserWorkflowAdapter.WF_PROCESS_ID).latestVersion().singleResult();\n+        for (Map.Entry<String, ProcessEngine> entry : dpEngine.getEngines().entrySet()) {\n+            List<ProcessDefinition> processes = entry.getValue().getRepositoryService().\n+                    createProcessDefinitionQuery().processDefinitionKey(ActivitiUserWorkflowAdapter.WF_PROCESS_ID).\n+                    list();\n+            LOG.debug(ActivitiUserWorkflowAdapter.WF_PROCESS_ID + \" Activiti processes in repository: {}\", processes);\n \n-                Model model = repositoryService.newModel();\n+            // Only loads process definition from file if not found in repository\n+            if (processes.isEmpty()) {\n+                entry.getValue().getRepositoryService().createDeployment().addInputStream(\n+                        ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, new ByteArrayInputStream(wfDef)).deploy();\n+\n+                ProcessDefinition procDef = entry.getValue().getRepositoryService().createProcessDefinitionQuery().\n+                        processDefinitionKey(ActivitiUserWorkflowAdapter.WF_PROCESS_ID).latestVersion().\n+                        singleResult();\n+\n+                Model model = entry.getValue().getRepositoryService().newModel();\n                 ObjectNode modelObjectNode = new ObjectMapper().createObjectNode();\n                 modelObjectNode.put(ModelDataJsonConstants.MODEL_NAME, procDef.getName());\n                 modelObjectNode.put(ModelDataJsonConstants.MODEL_REVISION, 1);\n                 modelObjectNode.put(ModelDataJsonConstants.MODEL_DESCRIPTION, procDef.getDescription());\n                 model.setMetaInfo(modelObjectNode.toString());\n                 model.setName(procDef.getName());\n                 model.setDeploymentId(procDef.getDeploymentId());\n-                importUtils.fromJSON(procDef, model);\n+                ActivitiImportUtils.fromJSON(entry.getValue(), procDef, model);\n \n-                LOG.debug(\"Activiti Workflow definition loaded\");\n-            } catch (IOException e) {\n-                LOG.error(\"While loading \" + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n-            } finally {\n-                IOUtils.closeQuietly(wfIn);\n+                LOG.debug(\"Activiti Workflow definition loaded for domain {}\", entry.getKey());\n             }\n-        }\n \n-        // jump to the next ID block\n-        for (int i = 0; i < conf.getIdBlockSize(); i++) {\n-            conf.getIdGenerator().getNextId();\n+            // jump to the next ID block\n+            for (int i = 0; i < entry.getValue().getProcessEngineConfiguration().getIdBlockSize(); i++) {\n+                SpringProcessEngineConfiguration.class.cast(entry.getValue().getProcessEngineConfiguration()).\n+                        getIdGenerator().getNextId();\n+            }\n         }\n     }\n }"},{"sha":"5df8ac497c41dff5e908951dcc038cc5a5a78c1f","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiImportUtils.java","status":"modified","additions":18,"deletions":17,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiImportUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiImportUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiImportUtils.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -28,53 +28,50 @@\n import org.activiti.bpmn.model.BpmnModel;\n import org.activiti.editor.language.json.converter.BpmnJsonConverter;\n import org.activiti.engine.ActivitiException;\n-import org.activiti.engine.RepositoryService;\n+import org.activiti.engine.ProcessEngine;\n import org.activiti.engine.repository.Model;\n import org.activiti.engine.repository.ProcessDefinition;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n-public class ActivitiImportUtils {\n+public final class ActivitiImportUtils {\n \n-    @Autowired\n-    private RepositoryService repositoryService;\n-\n-    public void fromXML(final byte[] definition) {\n+    public static void fromXML(final ProcessEngine engine, final byte[] definition) {\n         try {\n-            repositoryService.createDeployment().addInputStream(ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE,\n-                    new ByteArrayInputStream(definition)).deploy();\n+            engine.getRepositoryService().createDeployment().\n+                    addInputStream(ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE,\n+                            new ByteArrayInputStream(definition)).deploy();\n         } catch (ActivitiException e) {\n             throw new WorkflowException(\"While updating process \" + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n         }\n     }\n \n-    public void fromJSON(final byte[] definition, final ProcessDefinition procDef, final Model model) {\n+    public static void fromJSON(\n+            final ProcessEngine engine, final byte[] definition, final ProcessDefinition procDef, final Model model) {\n+\n         try {\n             model.setVersion(procDef.getVersion());\n             model.setDeploymentId(procDef.getDeploymentId());\n-            repositoryService.saveModel(model);\n+            engine.getRepositoryService().saveModel(model);\n \n-            repositoryService.addModelEditorSource(model.getId(), definition);\n+            engine.getRepositoryService().addModelEditorSource(model.getId(), definition);\n         } catch (Exception e) {\n             throw new WorkflowException(\"While updating process \" + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n         }\n     }\n \n-    public void fromJSON(final ProcessDefinition procDef, final Model model) {\n+    public static void fromJSON(final ProcessEngine engine, final ProcessDefinition procDef, final Model model) {\n         InputStream bpmnStream = null;\n         InputStreamReader isr = null;\n         XMLStreamReader xtr = null;\n         try {\n-            bpmnStream = repositoryService.getResourceAsStream(\n+            bpmnStream = engine.getRepositoryService().getResourceAsStream(\n                     procDef.getDeploymentId(), procDef.getResourceName());\n             isr = new InputStreamReader(bpmnStream);\n             xtr = XMLInputFactory.newInstance().createXMLStreamReader(isr);\n             BpmnModel bpmnModel = new BpmnXMLConverter().convertToBpmnModel(xtr);\n \n-            fromJSON(new BpmnJsonConverter().convertToJson(bpmnModel).toString().getBytes(), procDef, model);\n+            fromJSON(engine, new BpmnJsonConverter().convertToJson(bpmnModel).toString().getBytes(), procDef, model);\n         } catch (Exception e) {\n             throw new WorkflowException(\"While updating process \" + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n         } finally {\n@@ -89,4 +86,8 @@ public void fromJSON(final ProcessDefinition procDef, final Model model) {\n             IOUtils.closeQuietly(bpmnStream);\n         }\n     }\n+\n+    private ActivitiImportUtils() {\n+        // private constructor for static utility class\n+    }\n }"},{"sha":"1ce0d97e79323f750e45568c912988a7be9dc809","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":61,"deletions":73,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -38,11 +38,7 @@\n import org.activiti.editor.constants.ModelDataJsonConstants;\n import org.activiti.editor.language.json.converter.BpmnJsonConverter;\n import org.activiti.engine.ActivitiException;\n-import org.activiti.engine.FormService;\n-import org.activiti.engine.HistoryService;\n-import org.activiti.engine.RepositoryService;\n-import org.activiti.engine.RuntimeService;\n-import org.activiti.engine.TaskService;\n+import org.activiti.engine.ProcessEngine;\n import org.activiti.engine.form.FormProperty;\n import org.activiti.engine.form.FormType;\n import org.activiti.engine.form.TaskFormData;\n@@ -136,22 +132,7 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     protected String adminUser;\n \n     @Autowired\n-    protected RuntimeService runtimeService;\n-\n-    @Autowired\n-    protected TaskService taskService;\n-\n-    @Autowired\n-    protected FormService formService;\n-\n-    @Autowired\n-    protected HistoryService historyService;\n-\n-    @Autowired\n-    protected RepositoryService repositoryService;\n-\n-    @Autowired\n-    protected ActivitiImportUtils importUtils;\n+    protected ProcessEngine engine;\n \n     @Autowired\n     protected UserDataBinder userDataBinder;\n@@ -176,7 +157,7 @@ protected void throwException(final ActivitiException e, final String defaultMes\n     }\n \n     protected void updateStatus(final User user) {\n-        List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n+        List<Task> tasks = engine.getTaskService().createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {\n             LOG.warn(\"While setting user status: unexpected task number ({})\", tasks.size());\n         } else {\n@@ -187,12 +168,12 @@ protected void updateStatus(final User user) {\n     protected String getFormTask(final User user) {\n         String result = null;\n \n-        List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n+        List<Task> tasks = engine.getTaskService().createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {\n             LOG.warn(\"While checking if form task: unexpected task number ({})\", tasks.size());\n         } else {\n             try {\n-                TaskFormData formData = formService.getTaskFormData(tasks.get(0).getId());\n+                TaskFormData formData = engine.getFormService().getTaskFormData(tasks.get(0).getId());\n                 if (formData != null && !formData.getFormProperties().isEmpty()) {\n                     result = tasks.get(0).getId();\n                 }\n@@ -207,8 +188,8 @@ protected String getFormTask(final User user) {\n     protected Set<String> getPerformedTasks(final User user) {\n         final Set<String> result = new HashSet<>();\n \n-        for (HistoricActivityInstance task\n-                : historyService.createHistoricActivityInstanceQuery().executionId(user.getWorkflowId()).list()) {\n+        for (HistoricActivityInstance task : engine.getHistoryService().createHistoricActivityInstanceQuery().\n+                executionId(user.getWorkflowId()).list()) {\n \n             result.add(task.getActivityId());\n         }\n@@ -223,14 +204,14 @@ protected void saveForFormSubmit(final User user, final String password, final P\n         String formTaskId = getFormTask(user);\n         if (formTaskId != null) {\n             // SYNCOPE-238: This is needed to simplify the task query in this.getForms()\n-            taskService.setVariableLocal(formTaskId, TASK_IS_FORM, Boolean.TRUE);\n-            runtimeService.setVariable(user.getWorkflowId(), PROP_BY_RESOURCE, propByRes);\n+            engine.getTaskService().setVariableLocal(formTaskId, TASK_IS_FORM, Boolean.TRUE);\n+            engine.getRuntimeService().setVariable(user.getWorkflowId(), PROP_BY_RESOURCE, propByRes);\n             if (propByRes != null) {\n                 propByRes.clear();\n             }\n \n             if (StringUtils.isNotBlank(password)) {\n-                runtimeService.setVariable(user.getWorkflowId(), ENCRYPTED_PWD, encrypt(password));\n+                engine.getRuntimeService().setVariable(user.getWorkflowId(), ENCRYPTED_PWD, encrypt(password));\n             }\n         }\n     }\n@@ -259,15 +240,15 @@ public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boo\n \n         ProcessInstance processInstance = null;\n         try {\n-            processInstance = runtimeService.startProcessInstanceByKey(WF_PROCESS_ID, variables);\n+            processInstance = engine.getRuntimeService().startProcessInstanceByKey(WF_PROCESS_ID, variables);\n         } catch (ActivitiException e) {\n             throwException(e, \"While starting \" + WF_PROCESS_ID + \" instance\");\n         }\n \n-        User user = runtimeService.getVariable(processInstance.getProcessInstanceId(), USER, User.class);\n+        User user = engine.getRuntimeService().getVariable(processInstance.getProcessInstanceId(), USER, User.class);\n \n         Boolean updatedEnabled =\n-                runtimeService.getVariable(processInstance.getProcessInstanceId(), ENABLED, Boolean.class);\n+                engine.getRuntimeService().getVariable(processInstance.getProcessInstanceId(), ENABLED, Boolean.class);\n         if (updatedEnabled != null) {\n             user.setSuspended(!updatedEnabled);\n         }\n@@ -280,8 +261,8 @@ public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boo\n         updateStatus(user);\n         user = userDAO.save(user);\n \n-        Boolean propagateEnable =\n-                runtimeService.getVariable(processInstance.getProcessInstanceId(), PROPAGATE_ENABLE, Boolean.class);\n+        Boolean propagateEnable = engine.getRuntimeService().getVariable(\n+                processInstance.getProcessInstanceId(), PROPAGATE_ENABLE, Boolean.class);\n         if (propagateEnable == null) {\n             propagateEnable = enabled;\n         }\n@@ -315,10 +296,10 @@ protected Set<String> doExecuteTask(final User user, final String task, final Ma\n             throw new WorkflowException(new NotFoundException(\"Empty workflow id for \" + user));\n         }\n \n-        List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n+        List<Task> tasks = engine.getTaskService().createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n         if (tasks.size() == 1) {\n             try {\n-                taskService.complete(tasks.get(0).getId(), variables);\n+                engine.getTaskService().complete(tasks.get(0).getId(), variables);\n             } catch (ActivitiException e) {\n                 throwException(e, \"While completing task '\" + tasks.get(0).getName() + \"' for \" + user);\n             }\n@@ -349,14 +330,15 @@ protected WorkflowResult<Pair<UserMod, Boolean>> doUpdate(final User user, final\n         updateStatus(user);\n         User updated = userDAO.save(user);\n \n-        PropagationByResource propByRes =\n-                runtimeService.getVariable(user.getWorkflowId(), PROP_BY_RESOURCE, PropagationByResource.class);\n-        UserMod updatedMod =\n-                runtimeService.getVariable(user.getWorkflowId(), USER_MOD, UserMod.class);\n+        PropagationByResource propByRes = engine.getRuntimeService().getVariable(\n+                user.getWorkflowId(), PROP_BY_RESOURCE, PropagationByResource.class);\n+        UserMod updatedMod = engine.getRuntimeService().getVariable(\n+                user.getWorkflowId(), USER_MOD, UserMod.class);\n \n         saveForFormSubmit(updated, updatedMod.getPassword(), propByRes);\n \n-        Boolean propagateEnable = runtimeService.getVariable(user.getWorkflowId(), PROPAGATE_ENABLE, Boolean.class);\n+        Boolean propagateEnable = engine.getRuntimeService().getVariable(\n+                user.getWorkflowId(), PROPAGATE_ENABLE, Boolean.class);\n \n         return new WorkflowResult<Pair<UserMod, Boolean>>(\n                 new ImmutablePair<>(updatedMod, propagateEnable), propByRes, tasks);\n@@ -413,15 +395,15 @@ protected void doDelete(final User user) {\n \n         saveForFormSubmit(user, null, propByRes);\n \n-        if (runtimeService.createProcessInstanceQuery().\n+        if (engine.getRuntimeService().createProcessInstanceQuery().\n                 processInstanceId(user.getWorkflowId()).active().list().isEmpty()) {\n \n             userDAO.delete(user.getKey());\n \n-            if (!historyService.createHistoricProcessInstanceQuery().\n+            if (!engine.getHistoryService().createHistoricProcessInstanceQuery().\n                     processInstanceId(user.getWorkflowId()).list().isEmpty()) {\n \n-                historyService.deleteHistoricProcessInstance(user.getWorkflowId());\n+                engine.getHistoryService().deleteHistoricProcessInstance(user.getWorkflowId());\n             }\n         } else {\n             updateStatus(user);\n@@ -445,7 +427,7 @@ public WorkflowResult<Long> execute(final UserTO userTO, final String taskId) {\n \n     protected ProcessDefinition getProcessDefinition() {\n         try {\n-            return repositoryService.createProcessDefinitionQuery().processDefinitionKey(\n+            return engine.getRepositoryService().createProcessDefinitionQuery().processDefinitionKey(\n                     ActivitiUserWorkflowAdapter.WF_PROCESS_ID).latestVersion().singleResult();\n         } catch (ActivitiException e) {\n             throw new WorkflowException(\"While accessing process \" + ActivitiUserWorkflowAdapter.WF_PROCESS_ID, e);\n@@ -455,7 +437,8 @@ protected ProcessDefinition getProcessDefinition() {\n \n     protected Model getModel(final ProcessDefinition procDef) {\n         try {\n-            Model model = repositoryService.createModelQuery().deploymentId(procDef.getDeploymentId()).singleResult();\n+            Model model = engine.getRepositoryService().createModelQuery().\n+                    deploymentId(procDef.getDeploymentId()).singleResult();\n             if (model == null) {\n                 throw new NotFoundException(\"Could not find Model for deployment \" + procDef.getDeploymentId());\n             }\n@@ -468,7 +451,8 @@ protected Model getModel(final ProcessDefinition procDef) {\n     protected void exportProcessResource(final String resourceName, final OutputStream os) {\n         ProcessDefinition procDef = getProcessDefinition();\n \n-        InputStream procDefIS = repositoryService.getResourceAsStream(procDef.getDeploymentId(), resourceName);\n+        InputStream procDefIS = engine.getRepositoryService().getResourceAsStream(procDef.getDeploymentId(),\n+                resourceName);\n         try {\n             IOUtils.copy(procDefIS, os);\n         } catch (IOException e) {\n@@ -486,7 +470,7 @@ protected void exportProcessModel(final OutputStream os) {\n             ObjectNode modelNode = (ObjectNode) objectMapper.readTree(model.getMetaInfo());\n             modelNode.put(ModelDataJsonConstants.MODEL_ID, model.getId());\n             modelNode.replace(MODEL_DATA_JSON_MODEL,\n-                    objectMapper.readTree(repositoryService.getModelEditorSource(model.getId())));\n+                    objectMapper.readTree(engine.getRepositoryService().getModelEditorSource(model.getId())));\n \n             os.write(modelNode.toString().getBytes());\n         } catch (IOException e) {\n@@ -529,20 +513,21 @@ public void importDefinition(final WorkflowDefinitionFormat format, final String\n                     }\n \n                     BpmnModel bpmnModel = new BpmnJsonConverter().convertToBpmnModel(definitionNode);\n-                    importUtils.fromXML(new BpmnXMLConverter().convertToXML(bpmnModel));\n+                    ActivitiImportUtils.fromXML(engine, new BpmnXMLConverter().convertToXML(bpmnModel));\n                 } catch (Exception e) {\n                     throw new WorkflowException(\"While updating process \"\n                             + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n                 }\n \n-                importUtils.fromJSON(definitionNode.toString().getBytes(), getProcessDefinition(), model);\n+                ActivitiImportUtils.fromJSON(\n+                        engine, definitionNode.toString().getBytes(), getProcessDefinition(), model);\n                 break;\n \n             case XML:\n             default:\n-                importUtils.fromXML(definition.getBytes());\n+                ActivitiImportUtils.fromXML(engine, definition.getBytes());\n \n-                importUtils.fromJSON(getProcessDefinition(), model);\n+                ActivitiImportUtils.fromJSON(engine, getProcessDefinition(), model);\n         }\n     }\n \n@@ -569,7 +554,7 @@ protected WorkflowFormPropertyType fromActivitiFormType(final FormType activitiF\n     }\n \n     protected WorkflowFormTO getFormTO(final Task task) {\n-        return getFormTO(task, formService.getTaskFormData(task.getId()));\n+        return getFormTO(task, engine.getFormService().getTaskFormData(task.getId()));\n     }\n \n     protected WorkflowFormTO getFormTO(final Task task, final TaskFormData fd) {\n@@ -583,7 +568,8 @@ protected WorkflowFormTO getFormTO(final Task task, final TaskFormData fd) {\n     protected WorkflowFormTO getFormTO(final HistoricTaskInstance task) {\n         final List<HistoricFormPropertyEntity> props = new ArrayList<>();\n \n-        for (HistoricDetail historicDetail : historyService.createHistoricDetailQuery().taskId(task.getId()).list()) {\n+        for (HistoricDetail historicDetail\n+                : engine.getHistoryService().createHistoricDetailQuery().taskId(task.getId()).list()) {\n \n             if (historicDetail instanceof HistoricFormPropertyEntity) {\n                 props.add((HistoricFormPropertyEntity) historicDetail);\n@@ -594,7 +580,8 @@ protected WorkflowFormTO getFormTO(final HistoricTaskInstance task) {\n                 task.getProcessInstanceId(), task.getId(), task.getFormKey(), props);\n         BeanUtils.copyProperties(task, formTO);\n \n-        final HistoricActivityInstance historicActivityInstance = historyService.createHistoricActivityInstanceQuery().\n+        final HistoricActivityInstance historicActivityInstance = engine.getHistoryService().\n+                createHistoricActivityInstanceQuery().\n                 executionId(task.getExecutionId()).activityType(\"userTask\").activityName(task.getName()).singleResult();\n \n         if (historicActivityInstance != null) {\n@@ -676,15 +663,15 @@ public List<WorkflowFormTO> getForms() {\n \n         final String authUser = AuthContextUtils.getUsername();\n         if (adminUser.equals(authUser)) {\n-            forms.addAll(getForms(taskService.createTaskQuery().\n+            forms.addAll(getForms(engine.getTaskService().createTaskQuery().\n                     taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE)));\n         } else {\n             User user = userDAO.find(authUser);\n             if (user == null) {\n                 throw new NotFoundException(\"Syncope User \" + authUser);\n             }\n \n-            forms.addAll(getForms(taskService.createTaskQuery().\n+            forms.addAll(getForms(engine.getTaskService().createTaskQuery().\n                     taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE).\n                     taskCandidateOrAssigned(user.getKey().toString())));\n \n@@ -693,7 +680,7 @@ public List<WorkflowFormTO> getForms() {\n                 candidateGroups.add(groupId.toString());\n             }\n             if (!candidateGroups.isEmpty()) {\n-                forms.addAll(getForms(taskService.createTaskQuery().\n+                forms.addAll(getForms(engine.getTaskService().createTaskQuery().\n                         taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE).\n                         taskCandidateGroupIn(candidateGroups)));\n             }\n@@ -705,10 +692,10 @@ public List<WorkflowFormTO> getForms() {\n     @Override\n     public List<WorkflowFormTO> getForms(final String workflowId, final String name) {\n         List<WorkflowFormTO> forms = getForms(\n-                taskService.createTaskQuery().processInstanceId(workflowId).taskName(name).\n+                engine.getTaskService().createTaskQuery().processInstanceId(workflowId).taskName(name).\n                 taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE));\n \n-        forms.addAll(getForms(historyService.createHistoricTaskInstanceQuery().taskName(name).\n+        forms.addAll(getForms(engine.getHistoryService().createHistoricTaskInstanceQuery().taskName(name).\n                 taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE)));\n \n         return forms;\n@@ -739,14 +726,14 @@ public List<WorkflowFormTO> getForms(final String workflowId, final String name)\n     public WorkflowFormTO getForm(final String workflowId) {\n         Task task;\n         try {\n-            task = taskService.createTaskQuery().processInstanceId(workflowId).singleResult();\n+            task = engine.getTaskService().createTaskQuery().processInstanceId(workflowId).singleResult();\n         } catch (ActivitiException e) {\n             throw new WorkflowException(\"While reading form for workflow instance \" + workflowId, e);\n         }\n \n         TaskFormData formData;\n         try {\n-            formData = formService.getTaskFormData(task.getId());\n+            formData = engine.getFormService().getTaskFormData(task.getId());\n         } catch (ActivitiException e) {\n             LOG.debug(\"No form found for task {}\", task.getId(), e);\n             formData = null;\n@@ -763,14 +750,14 @@ public WorkflowFormTO getForm(final String workflowId) {\n     protected Pair<Task, TaskFormData> checkTask(final String taskId, final String authUser) {\n         Task task;\n         try {\n-            task = taskService.createTaskQuery().taskId(taskId).singleResult();\n+            task = engine.getTaskService().createTaskQuery().taskId(taskId).singleResult();\n         } catch (ActivitiException e) {\n             throw new NotFoundException(\"Activiti Task \" + taskId, e);\n         }\n \n         TaskFormData formData;\n         try {\n-            formData = formService.getTaskFormData(task.getId());\n+            formData = engine.getFormService().getTaskFormData(task.getId());\n         } catch (ActivitiException e) {\n             throw new NotFoundException(\"Form for Activiti Task \" + taskId, e);\n         }\n@@ -792,7 +779,8 @@ public WorkflowFormTO claimForm(final String taskId) {\n         Pair<Task, TaskFormData> checked = checkTask(taskId, authUser);\n \n         if (!adminUser.equals(authUser)) {\n-            List<Task> tasksForUser = taskService.createTaskQuery().taskId(taskId).taskCandidateUser(authUser).list();\n+            List<Task> tasksForUser = engine.getTaskService().createTaskQuery().taskId(taskId).taskCandidateUser(\n+                    authUser).list();\n             if (tasksForUser.isEmpty()) {\n                 throw new WorkflowException(\n                         new IllegalArgumentException(authUser + \" is not candidate for task \" + taskId));\n@@ -801,8 +789,8 @@ public WorkflowFormTO claimForm(final String taskId) {\n \n         Task task;\n         try {\n-            taskService.setOwner(taskId, authUser);\n-            task = taskService.createTaskQuery().taskId(taskId).singleResult();\n+            engine.getTaskService().setOwner(taskId, authUser);\n+            task = engine.getTaskService().createTaskQuery().taskId(taskId).singleResult();\n         } catch (ActivitiException e) {\n             throw new WorkflowException(\"While reading task \" + taskId, e);\n         }\n@@ -828,8 +816,8 @@ public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form) {\n \n         Set<String> preTasks = getPerformedTasks(user);\n         try {\n-            formService.submitTaskFormData(form.getTaskId(), form.getPropertiesForSubmit());\n-            runtimeService.setVariable(user.getWorkflowId(), FORM_SUBMITTER, authUser);\n+            engine.getFormService().submitTaskFormData(form.getTaskId(), form.getPropertiesForSubmit());\n+            engine.getRuntimeService().setVariable(user.getWorkflowId(), FORM_SUBMITTER, authUser);\n         } catch (ActivitiException e) {\n             throwException(e, \"While submitting form for task \" + form.getTaskId());\n         }\n@@ -842,20 +830,20 @@ public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form) {\n         User updated = userDAO.save(user);\n \n         // see if there is any propagation to be done\n-        PropagationByResource propByRes =\n-                runtimeService.getVariable(user.getWorkflowId(), PROP_BY_RESOURCE, PropagationByResource.class);\n+        PropagationByResource propByRes = engine.getRuntimeService().getVariable(\n+                user.getWorkflowId(), PROP_BY_RESOURCE, PropagationByResource.class);\n \n         // fetch - if available - the encrypted password\n         String clearPassword = null;\n-        String encryptedPwd = runtimeService.getVariable(user.getWorkflowId(), ENCRYPTED_PWD, String.class);\n+        String encryptedPwd = engine.getRuntimeService().getVariable(user.getWorkflowId(), ENCRYPTED_PWD, String.class);\n         if (StringUtils.isNotBlank(encryptedPwd)) {\n             clearPassword = decrypt(encryptedPwd);\n         }\n \n         // supports approval chains\n         saveForFormSubmit(user, clearPassword, propByRes);\n \n-        UserMod userMod = runtimeService.getVariable(user.getWorkflowId(), USER_MOD, UserMod.class);\n+        UserMod userMod = engine.getRuntimeService().getVariable(user.getWorkflowId(), USER_MOD, UserMod.class);\n         if (userMod == null) {\n             userMod = new UserMod();\n             userMod.setKey(updated.getKey());"},{"sha":"83619c7d2f54ac970c579faa046c5ede6275d5fc","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/spring/DomainProcessEngine.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Fspring%2FDomainProcessEngine.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Fspring%2FDomainProcessEngine.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Fspring%2FDomainProcessEngine.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.activiti.spring;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import org.activiti.engine.FormService;\n+import org.activiti.engine.HistoryService;\n+import org.activiti.engine.IdentityService;\n+import org.activiti.engine.ManagementService;\n+import org.activiti.engine.ProcessEngine;\n+import org.activiti.engine.ProcessEngineConfiguration;\n+import org.activiti.engine.RepositoryService;\n+import org.activiti.engine.RuntimeService;\n+import org.activiti.engine.TaskService;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+\n+/**\n+ * {@link ProcessEngine} delegating actual method invocation to the inner map of {@link ProcessEngine} instances,\n+ * one for each Syncope domain.\n+ */\n+public class DomainProcessEngine implements ProcessEngine {\n+\n+    private final Map<String, ProcessEngine> engines;\n+\n+    public DomainProcessEngine(final Map<String, ProcessEngine> engines) {\n+        this.engines = Collections.synchronizedMap(engines);\n+    }\n+\n+    public Map<String, ProcessEngine> getEngines() {\n+        return engines;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return engines.get(AuthContextUtils.getDomain()).getName();\n+    }\n+\n+    @Override\n+    public void close() {\n+        for (ProcessEngine engine : engines.values()) {\n+            engine.close();\n+        }\n+    }\n+\n+    @Override\n+    public RepositoryService getRepositoryService() {\n+        return engines.get(AuthContextUtils.getDomain()).getRepositoryService();\n+    }\n+\n+    @Override\n+    public RuntimeService getRuntimeService() {\n+        return engines.get(AuthContextUtils.getDomain()).getRuntimeService();\n+    }\n+\n+    @Override\n+    public FormService getFormService() {\n+        return engines.get(AuthContextUtils.getDomain()).getFormService();\n+    }\n+\n+    @Override\n+    public TaskService getTaskService() {\n+        return engines.get(AuthContextUtils.getDomain()).getTaskService();\n+    }\n+\n+    @Override\n+    public HistoryService getHistoryService() {\n+        return engines.get(AuthContextUtils.getDomain()).getHistoryService();\n+    }\n+\n+    @Override\n+    public IdentityService getIdentityService() {\n+        return engines.get(AuthContextUtils.getDomain()).getIdentityService();\n+    }\n+\n+    @Override\n+    public ManagementService getManagementService() {\n+        return engines.get(AuthContextUtils.getDomain()).getManagementService();\n+    }\n+\n+    @Override\n+    public ProcessEngineConfiguration getProcessEngineConfiguration() {\n+        return engines.get(AuthContextUtils.getDomain()).getProcessEngineConfiguration();\n+    }\n+\n+}"},{"sha":"cf112bdc136a6106c5995eeb142f0b0ccc2cf953","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/spring/DomainProcessEngineFactoryBean.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Fspring%2FDomainProcessEngineFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Fspring%2FDomainProcessEngineFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Fspring%2FDomainProcessEngineFactoryBean.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.activiti.spring;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.sql.DataSource;\n+import org.activiti.engine.ProcessEngine;\n+import org.activiti.engine.impl.cfg.SpringBeanFactoryProxyMap;\n+import org.activiti.spring.SpringExpressionManager;\n+import org.activiti.spring.SpringProcessEngineConfiguration;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.beans.factory.FactoryBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.transaction.PlatformTransactionManager;\n+\n+/**\n+ * Spring factory for {@link DomainProcessEngine} which takes the provided {@link SpringProcessEngineConfiguration} as\n+ * template for each of the configured Syncope domains.\n+ */\n+public class DomainProcessEngineFactoryBean\n+        implements FactoryBean<DomainProcessEngine>, DisposableBean, ApplicationContextAware {\n+\n+    private ApplicationContext ctx;\n+\n+    private DomainProcessEngine engine;\n+\n+    @Override\n+    public void setApplicationContext(final ApplicationContext ctx) throws BeansException {\n+        this.ctx = ctx;\n+    }\n+\n+    @Override\n+    public DomainProcessEngine getObject() throws Exception {\n+        if (engine == null) {\n+            Map<String, ProcessEngine> engines = new HashMap<>();\n+\n+            for (Map.Entry<String, DataSource> entry : ctx.getBeansOfType(DataSource.class).entrySet()) {\n+                if (!entry.getKey().startsWith(\"local\")) {\n+                    String domain = StringUtils.substringBefore(entry.getKey(), DataSource.class.getSimpleName());\n+                    DataSource dataSource = entry.getValue();\n+                    PlatformTransactionManager transactionManager = ctx.getBean(\n+                            domain + \"TransactionManager\", PlatformTransactionManager.class);\n+                    Object entityManagerFactory = ctx.getBean(domain + \"EntityManagerFactory\");\n+\n+                    SpringProcessEngineConfiguration conf = ctx.getBean(SpringProcessEngineConfiguration.class);\n+                    conf.setDataSource(dataSource);\n+                    conf.setTransactionManager(transactionManager);\n+                    conf.setTransactionsExternallyManaged(true);\n+                    conf.setJpaEntityManagerFactory(entityManagerFactory);\n+                    if (conf.getBeans() == null) {\n+                        conf.setBeans(new SpringBeanFactoryProxyMap(ctx));\n+                    }\n+                    if (conf.getExpressionManager() == null) {\n+                        conf.setExpressionManager(new SpringExpressionManager(ctx, conf.getBeans()));\n+                    }\n+\n+                    engines.put(domain, conf.buildProcessEngine());\n+                }\n+            }\n+\n+            engine = new DomainProcessEngine(engines);\n+        }\n+\n+        return engine;\n+    }\n+\n+    @Override\n+    public Class<DomainProcessEngine> getObjectType() {\n+        return DomainProcessEngine.class;\n+    }\n+\n+    @Override\n+    public boolean isSingleton() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void destroy() throws Exception {\n+        if (engine != null) {\n+            engine.close();\n+        }\n+    }\n+\n+}"},{"sha":"ff898adf38fbbb2b28e2c3aa82ec7fadc2a5e16a","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/AbstractActivitiServiceTask.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FAbstractActivitiServiceTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FAbstractActivitiServiceTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FAbstractActivitiServiceTask.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.activiti.task;\n \n-import org.activiti.engine.RuntimeService;\n+import org.activiti.engine.ProcessEngine;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -31,13 +31,10 @@\n @Component\n public abstract class AbstractActivitiServiceTask {\n \n-    /**\n-     * Logger.\n-     */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractActivitiServiceTask.class);\n \n     @Autowired\n-    protected RuntimeService runtimeService;\n+    protected ProcessEngine engine;\n \n     @Transactional(rollbackFor = { Throwable.class })\n     public void execute(final String executionId) {"},{"sha":"51dfb504193eba002d338f027c451abb3751893f","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/AutoActivate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FAutoActivate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FAutoActivate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FAutoActivate.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -26,6 +26,6 @@ public class AutoActivate extends AbstractActivitiServiceTask {\n \n     @Override\n     protected void doExecute(final String executionId) {\n-        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.PROPAGATE_ENABLE, Boolean.TRUE);\n+        engine.getRuntimeService().setVariable(executionId, ActivitiUserWorkflowAdapter.PROPAGATE_ENABLE, Boolean.TRUE);\n     }\n }"},{"sha":"e911f983ef35a19e01e8ab8a5b74f0c92e1e46f3","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/Create.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FCreate.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -37,15 +37,17 @@ public class Create extends AbstractActivitiServiceTask {\n \n     @Override\n     protected void doExecute(final String executionId) {\n-        UserTO userTO = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_TO, UserTO.class);\n+        UserTO userTO = engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.USER_TO, UserTO.class);\n         Boolean storePassword =\n-                runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.STORE_PASSWORD, Boolean.class);\n+                engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.STORE_PASSWORD, Boolean.class);\n         // create and set workflow id\n         User user = entityFactory.newEntity(User.class);\n         dataBinder.create(user, userTO, storePassword == null ? true : storePassword);\n         user.setWorkflowId(executionId);\n \n         // report user as result\n-        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER, user);\n+        engine.getRuntimeService().setVariable(executionId, ActivitiUserWorkflowAdapter.USER, user);\n     }\n }"},{"sha":"79337519a5ab74f9c17c1797e1438d4d0b6f735c","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/Delete.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FDelete.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -27,14 +27,15 @@ public class Delete extends AbstractActivitiServiceTask {\n \n     @Override\n     protected void doExecute(final String executionId) {\n-        User user = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER, User.class);\n+        User user = engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.USER, User.class);\n \n         // Do something with user...\n         if (user != null) {\n             user.checkToken(\"\");\n         }\n \n         // remove user variable\n-        runtimeService.removeVariable(executionId, ActivitiUserWorkflowAdapter.USER);\n+        engine.getRuntimeService().removeVariable(executionId, ActivitiUserWorkflowAdapter.USER);\n     }\n }"},{"sha":"9ce694165fc6828d70f2df6a2b5fd8c49b05f671","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/GenerateToken.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FGenerateToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FGenerateToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FGenerateToken.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -32,12 +32,13 @@ public class GenerateToken extends AbstractActivitiServiceTask {\n \n     @Override\n     protected void doExecute(final String executionId) {\n-        User user = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER, User.class);\n+        User user = engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.USER, User.class);\n \n         user.generateToken(\n                 confDAO.find(\"token.length\", \"256\").getValues().get(0).getLongValue().intValue(),\n                 confDAO.find(\"token.expireTime\", \"60\").getValues().get(0).getLongValue().intValue());\n \n-        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER, user);\n+        engine.getRuntimeService().setVariable(executionId, ActivitiUserWorkflowAdapter.USER, user);\n     }\n }"},{"sha":"54e7852a2bc2bf68a68e71a07ba416c744b877bb","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/Notify.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FNotify.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FNotify.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FNotify.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -40,9 +40,12 @@ public class Notify extends AbstractActivitiServiceTask {\n \n     @Override\n     protected void doExecute(final String executionId) {\n-        User user = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER, User.class);\n-        UserTO userTO = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_TO, UserTO.class);\n-        String event = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.EVENT, String.class);\n+        User user = engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.USER, User.class);\n+        UserTO userTO = engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.USER_TO, UserTO.class);\n+        String event = engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.EVENT, String.class);\n \n         if (StringUtils.isNotBlank(event)) {\n             notificationManager.createTasks("},{"sha":"10e9afe4e9d71ffb405edebe689c2cf62cfda92d","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/PasswordReset.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FPasswordReset.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FPasswordReset.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FPasswordReset.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -28,17 +28,20 @@ public class PasswordReset extends AbstractActivitiServiceTask {\n \n     @Override\n     protected void doExecute(final String executionId) {\n-        User user = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER, User.class);\n-        String token = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.TOKEN, String.class);\n-        String password = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.PASSWORD, String.class);\n+        User user = engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.USER, User.class);\n+        String token = engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.TOKEN, String.class);\n+        String password = engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.PASSWORD, String.class);\n \n         if (!user.checkToken(token)) {\n             throw new WorkflowException(new IllegalArgumentException(\"Wrong token: \" + token + \" for \" + user));\n         }\n \n         user.removeToken();\n         user.setPassword(password, user.getCipherAlgorithm());\n-        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER, user);\n+        engine.getRuntimeService().setVariable(executionId, ActivitiUserWorkflowAdapter.USER, user);\n     }\n \n }"},{"sha":"e4ee6496fcd8721b98176f4b48f229f186f49ea8","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/Update.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -35,9 +35,11 @@ public class Update extends AbstractActivitiServiceTask {\n \n     @Override\n     protected void doExecute(final String executionId) {\n-        User user = runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER, User.class);\n+        User user = engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.USER, User.class);\n         UserMod userMod =\n-                runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, UserMod.class);\n+                engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, UserMod.class);\n \n         // update password internally only if required\n         UserMod updatedMod = SerializationUtils.clone(userMod);\n@@ -50,8 +52,8 @@ protected void doExecute(final String executionId) {\n         updatedMod.setPassword(updatedPwd);\n \n         // report updated user and propagation by resource as result\n-        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER, user);\n-        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, updatedMod);\n-        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE, propByRes);\n+        engine.getRuntimeService().setVariable(executionId, ActivitiUserWorkflowAdapter.USER, user);\n+        engine.getRuntimeService().setVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, updatedMod);\n+        engine.getRuntimeService().setVariable(executionId, ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE, propByRes);\n     }\n }"},{"sha":"81058e1bef91bf87d6d61e6016da3684df1883aa","filename":"core/workflow-activiti/src/main/resources/workflowActivitiContext.xml","status":"modified","additions":2,"deletions":15,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fresources%2FworkflowActivitiContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fresources%2FworkflowActivitiContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fresources%2FworkflowActivitiContext.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -35,13 +35,10 @@ under the License.\n   <bean id=\"syncopeActivitiUserManager\" class=\"org.apache.syncope.core.workflow.activiti.SyncopeUserManager\"/>\n   <bean id=\"syncopeActivitiGroupManager\" class=\"org.apache.syncope.core.workflow.activiti.SyncopeGroupManager\"/>\n \n-  <bean id=\"processEngineConfiguration\" class=\"org.activiti.spring.SpringProcessEngineConfiguration\">\n-    <property name=\"dataSource\" ref=\"dataSource\"/>\n-    <property name=\"transactionManager\" ref=\"transactionManager\"/>\n+  <bean class=\"org.activiti.spring.SpringProcessEngineConfiguration\" scope=\"prototype\">\n     <property name=\"transactionsExternallyManaged\" value=\"true\"/>\n     <property name=\"databaseSchemaUpdate\" value=\"true\"/>\n \n-    <property name=\"jpaEntityManagerFactory\" ref=\"entityManagerFactory\"/>\n     <property name=\"jpaHandleTransaction\" value=\"true\"/>\n     <property name=\"jpaCloseEntityManager\" value=\"false\"/>\n \n@@ -64,17 +61,7 @@ under the License.\n     </property>\n   </bean>\n \n-  <bean id=\"processEngine\" class=\"org.activiti.spring.ProcessEngineFactoryBean\">\n-    <property name=\"processEngineConfiguration\" ref=\"processEngineConfiguration\"/>\n-  </bean>\n-\n-  <bean id=\"repositoryService\" factory-bean=\"processEngine\" factory-method=\"getRepositoryService\"/>\n-  <bean id=\"runtimeService\" factory-bean=\"processEngine\" factory-method=\"getRuntimeService\"/>\n-  <bean id=\"taskService\" factory-bean=\"processEngine\" factory-method=\"getTaskService\"/>\n-  <bean id=\"historyService\" factory-bean=\"processEngine\" factory-method=\"getHistoryService\"/>\n-  <bean id=\"managementService\" factory-bean=\"processEngine\" factory-method=\"getManagementService\"/>\n-  <bean id=\"identityService\" factory-bean=\"processEngine\" factory-method=\"getIdentityService\"/>\n-  <bean id=\"formService\" factory-bean=\"processEngine\" factory-method=\"getFormService\"/>\n+  <bean class=\"org.apache.syncope.core.workflow.activiti.spring.DomainProcessEngineFactoryBean\"/>\n \n   <context:component-scan base-package=\"org.apache.syncope.core.workflow.activiti\"/>\n     "},{"sha":"fbf29c330843db651e33809f82740a359185ee68","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/UserWorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -90,15 +90,15 @@ WorkflowResult<Pair<Long, Boolean>> create(\n     /**\n      * Suspend an user.\n      *\n-     * @param userKey user to be suspended\n+     * @param key to be suspended\n      * @return user just suspended\n      */\n-    WorkflowResult<Long> suspend(Long userKey);\n+    WorkflowResult<Long> suspend(Long key);\n \n     /**\n      * Suspend an user.\n      *\n-     * @param user to be suspended\n+     * @param user user to be suspended\n      * @return user just suspended\n      */\n     WorkflowResult<Long> suspend(User user);"},{"sha":"3f0d61ab32d1889f9db45ea07e734fae81e3103d","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractAnyObjectWorkflowAdapter.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -26,9 +26,10 @@\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = { Throwable.class })\n+@Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = { Throwable.class })\n public abstract class AbstractAnyObjectWorkflowAdapter implements AnyObjectWorkflowAdapter {\n \n     @Autowired"},{"sha":"2b921ce6439a58ca1374e5b0d3238b98f788c8cd","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractGroupWorkflowAdapter.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -26,9 +26,10 @@\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = { Throwable.class })\n+@Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = { Throwable.class })\n public abstract class AbstractGroupWorkflowAdapter implements GroupWorkflowAdapter {\n \n     @Autowired"},{"sha":"ecc1c01d2d049600c1fbda80a2ce9f6171b97c4a","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -29,9 +29,10 @@\n import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.EncryptorFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = { Throwable.class })\n+@Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = { Throwable.class })\n public abstract class AbstractUserWorkflowAdapter implements UserWorkflowAdapter {\n \n     @Autowired"},{"sha":"3d56daf04b5a7b1b01fb26ae9517c2e3879f3765","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -35,12 +35,10 @@\n import org.apache.syncope.core.workflow.api.WorkflowDefinitionFormat;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n \n /**\n  * Simple implementation basically not involving any workflow engine.\n  */\n-@Transactional(rollbackFor = { Throwable.class })\n public class DefaultUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n     @Autowired"},{"sha":"97bb299416c4383686a2503f539400e566cce0b2","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/init/CamelRouteLoader.java","status":"modified","additions":18,"deletions":10,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -24,6 +24,7 @@\n import javax.sql.DataSource;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader;\n+import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n import org.apache.syncope.core.persistence.api.entity.CamelEntityFactory;\n import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n@@ -60,7 +61,7 @@ public class CamelRouteLoader implements SyncopeLoader {\n     private ResourceWithFallbackLoader anyObjectRoutesLoader;\n \n     @Autowired\n-    private DataSource dataSource;\n+    private DomainsHolder domainsHolder;\n \n     @Autowired\n     private CamelEntityFactory entityFactory;\n@@ -77,15 +78,20 @@ public Integer getPriority() {\n     public void load() {\n         synchronized (this) {\n             if (!loaded) {\n-                loadRoutes(userRoutesLoader.getResource(), AnyTypeKind.USER);\n-                loadRoutes(groupRoutesLoader.getResource(), AnyTypeKind.GROUP);\n-                loadRoutes(anyObjectRoutesLoader.getResource(), AnyTypeKind.ANY_OBJECT);\n+                for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n+                    loadRoutes(entry.getKey(), entry.getValue(),\n+                            userRoutesLoader.getResource(), AnyTypeKind.USER);\n+                    loadRoutes(entry.getKey(), entry.getValue(),\n+                            groupRoutesLoader.getResource(), AnyTypeKind.GROUP);\n+                    loadRoutes(entry.getKey(), entry.getValue(),\n+                            anyObjectRoutesLoader.getResource(), AnyTypeKind.ANY_OBJECT);\n+                }\n                 loaded = true;\n             }\n         }\n     }\n \n-    private boolean loadRoutesFor(final AnyTypeKind anyTypeKind) {\n+    private boolean loadRoutesFor(final DataSource dataSource, final AnyTypeKind anyTypeKind) {\n         final String sql = String.format(\"SELECT * FROM %s WHERE ANYTYPEKIND = ?\", CamelRoute.class.getSimpleName());\n         final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n         final List<Map<String, Object>> rows = jdbcTemplate.queryForList(sql, new Object[] { anyTypeKind.name() });\n@@ -106,8 +112,10 @@ private String nodeToString(final Node content, final DOMImplementationLS domImp\n         return writer.toString();\n     }\n \n-    private void loadRoutes(final Resource resource, final AnyTypeKind anyTypeKind) {\n-        if (loadRoutesFor(anyTypeKind)) {\n+    private void loadRoutes(\n+            final String domain, final DataSource dataSource, final Resource resource, final AnyTypeKind anyTypeKind) {\n+\n+        if (loadRoutesFor(dataSource, anyTypeKind)) {\n             String query = String.format(\"INSERT INTO %s(NAME, ANYTYPEKIND, CONTENT) VALUES (?, ?, ?)\",\n                     CamelRoute.class.getSimpleName());\n             JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n@@ -132,12 +140,12 @@ private void loadRoutes(final Resource resource, final AnyTypeKind anyTypeKind)\n                     route.setContent(routeContent);\n \n                     jdbcTemplate.update(query, new Object[] { routeId, anyTypeKind.name(), routeContent });\n-                    LOG.info(\"Route successfully loaded: {}\", routeId);\n+                    LOG.info(\"[{}] Route successfully loaded: {}\", domain, routeId);\n                 }\n             } catch (DataAccessException e) {\n-                LOG.error(\"While trying to store queries {}\", e);\n+                LOG.error(\"[{}] While trying to store queries\", domain, e);\n             } catch (Exception e) {\n-                LOG.error(\"Route load failed {}\", e.getMessage());\n+                LOG.error(\"[{}] Route load failed {}\", domain, e.getMessage());\n             }\n         }\n     }"},{"sha":"88949927fe4963d774cdadca30974cd930fb9d52","filename":"ext/camel/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPACamelRouteDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPACamelRouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPACamelRouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPACamelRouteDAO.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -32,13 +32,13 @@ public class JPACamelRouteDAO extends AbstractDAO<CamelRoute, String> implements\n \n     @Override\n     public CamelRoute find(final String key) {\n-        return entityManager.find(JPACamelRoute.class, key);\n+        return entityManager().find(JPACamelRoute.class, key);\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n     public List<CamelRoute> find(final AnyTypeKind anyTypeKind) {\n-        TypedQuery<CamelRoute> query = entityManager.createQuery(\n+        TypedQuery<CamelRoute> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPACamelRoute.class.getSimpleName()\n                 + \" e WHERE e.anyTypeKind = :anyTypeKind\", CamelRoute.class);\n         query.setParameter(\"anyTypeKind\", anyTypeKind);\n@@ -49,21 +49,21 @@ public List<CamelRoute> find(final AnyTypeKind anyTypeKind) {\n     @Transactional(readOnly = true)\n     @Override\n     public List<CamelRoute> findAll() {\n-        TypedQuery<CamelRoute> query = entityManager.createQuery(\n+        TypedQuery<CamelRoute> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPACamelRoute.class.getSimpleName() + \" e \", CamelRoute.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public CamelRoute save(final CamelRoute route) {\n-        return entityManager.merge(route);\n+        return entityManager().merge(route);\n     }\n \n     @Override\n     public void delete(final String key) {\n         CamelRoute route = find(key);\n         if (route != null) {\n-            entityManager.remove(route);\n+            entityManager().remove(route);\n         }\n     }\n "},{"sha":"bb01cd30f98f0199ebba78a6b6931fb6f01ed17e","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelAnyObjectProvisioningManager.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -141,6 +141,25 @@ public Long link(final AnyObjectMod anyObjectMod) {\n         return exchange.getIn().getBody(Long.class);\n     }\n \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<PropagationStatus> provision(final Long key, final Collection<String> resources) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:provisionAnyObjectPort\");\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"resources\", resources);\n+\n+        sendMessage(\"direct:provisionAnyObject\", key, props);\n+\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(List.class);\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<PropagationStatus> deprovision(final Long anyObjectKey, final Collection<String> resources) {"},{"sha":"bc0c85444d586d8d78ee79bc6de59570488e14b5","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelGroupProvisioningManager.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -163,13 +163,32 @@ public Long link(final GroupMod groupMod) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public List<PropagationStatus> deprovision(final Long groupKey, final Collection<String> resources) {\n+    public List<PropagationStatus> provision(final Long key, final Collection<String> resources) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:provisionGroupPort\");\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"resources\", resources);\n+\n+        sendMessage(\"direct:provisionGroup\", key, props);\n+\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(List.class);\n+    }\n+    \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<PropagationStatus> deprovision(final Long key, final Collection<String> resources) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:deprovisionGroupPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"resources\", resources);\n \n-        sendMessage(\"direct:deprovisionGroup\", groupKey, props);\n+        sendMessage(\"direct:deprovisionGroup\", key, props);\n \n         Exchange exchange = pollingConsumer.receive();\n "},{"sha":"8b5ad89b2b278451613f5d149a1bb02aa36026f4","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":41,"deletions":18,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -147,19 +147,19 @@ public Long unlink(final UserMod userMod) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> activate(final User user, final StatusMod statusMod) {\n+    public Pair<Long, List<PropagationStatus>> activate(final StatusMod statusMod) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"token\", statusMod.getToken());\n-        props.put(\"user\", user);\n+        props.put(\"userKey\", statusMod.getKey());\n         props.put(\"statusMod\", statusMod);\n \n         if (statusMod.isOnSyncope()) {\n-            sendMessage(\"direct:activateUser\", user.getKey(), props);\n+            sendMessage(\"direct:activateUser\", statusMod.getKey(), props);\n         } else {\n             WorkflowResult<Long> updated =\n-                    new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n+                    new WorkflowResult<>(statusMod.getKey(), null, statusMod.getType().name().toLowerCase());\n             sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n@@ -174,18 +174,18 @@ public Pair<Long, List<PropagationStatus>> activate(final User user, final Statu\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> reactivate(final User user, final StatusMod statusMod) {\n+    public Pair<Long, List<PropagationStatus>> reactivate(final StatusMod statusMod) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"user\", user);\n+        props.put(\"userKey\", statusMod.getKey());\n         props.put(\"statusMod\", statusMod);\n \n         if (statusMod.isOnSyncope()) {\n-            sendMessage(\"direct:reactivateUser\", user.getKey(), props);\n+            sendMessage(\"direct:reactivateUser\", statusMod.getKey(), props);\n         } else {\n             WorkflowResult<Long> updated =\n-                    new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n+                    new WorkflowResult<>(statusMod.getKey(), null, statusMod.getType().name().toLowerCase());\n             sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n@@ -200,18 +200,18 @@ public Pair<Long, List<PropagationStatus>> reactivate(final User user, final Sta\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> suspend(final User user, final StatusMod statusMod) {\n+    public Pair<Long, List<PropagationStatus>> suspend(final StatusMod statusMod) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"user\", user);\n+        props.put(\"userKey\", statusMod.getKey());\n         props.put(\"statusMod\", statusMod);\n \n         if (statusMod.isOnSyncope()) {\n-            sendMessage(\"direct:suspendUser\", user.getKey(), props);\n+            sendMessage(\"direct:suspendUser\", statusMod.getKey(), props);\n         } else {\n             WorkflowResult<Long> updated =\n-                    new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n+                    new WorkflowResult<>(statusMod.getKey(), null, statusMod.getType().name().toLowerCase());\n             sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n@@ -240,6 +240,30 @@ public Long link(final UserMod anyMod) {\n         return exchange.getIn().getBody(Long.class);\n     }\n \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<PropagationStatus> provision(\n+            final Long key, final boolean changePwd, final String password, final Collection<String> resources) {\n+\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:provisionPort\");\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"key\", key);\n+        props.put(\"changePwd\", changePwd);\n+        props.put(\"password\", password);\n+        props.put(\"resources\", resources);\n+\n+        sendMessage(\"direct:provisionUser\", key, props);\n+\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(List.class);\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<PropagationStatus> deprovision(final Long user, final Collection<String> resources) {\n@@ -268,7 +292,7 @@ public Pair<Long, List<PropagationStatus>> update(\n         PollingConsumer pollingConsumer = getConsumer(\"direct:updateInSyncPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"key\", key);\n+        props.put(\"userKey\", key);\n         props.put(\"result\", result);\n         props.put(\"enabled\", enabled);\n         props.put(\"excludedResources\", excludedResources);\n@@ -301,7 +325,7 @@ public void innerSuspend(final User user, final boolean propagate) {\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"propagate\", propagate);\n \n-        sendMessage(\"direct:innerSuspendUser\", user, props);\n+        sendMessage(\"direct:innerSuspendUser\", user.getKey(), props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -324,16 +348,15 @@ public void requestPasswordReset(final Long userKey) {\n     }\n \n     @Override\n-    public void confirmPasswordReset(final User user, final String token, final String password) {\n+    public void confirmPasswordReset(final Long key, final String token, final String password) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:confirmPwdResetPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"user\", user);\n-        props.put(\"userKey\", user.getKey());\n+        props.put(\"userKey\", key);\n         props.put(\"token\", token);\n         props.put(\"password\", password);\n \n-        sendMessage(\"direct:confirmPwdReset\", user, props);\n+        sendMessage(\"direct:confirmPwdReset\", key, props);\n \n         Exchange exchange = pollingConsumer.receive();\n "},{"sha":"63162305ecba4559c024ee8eeef4e6bedd2459de","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectCreateProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectCreateProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -57,7 +57,7 @@ public void process(final Exchange exchange) {\n         List<PropagationTask> tasks =\n                 propagationManager.getAnyObjectCreateTasks(created, any.getVirAttrs(), excludedResource);\n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"5045ab7580f97ac592897c94252df11b7f21b203","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectDeleteProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeleteProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -69,7 +69,7 @@ public void process(final Exchange exchange) throws Exception {\n         }\n \n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"5836a9f7a7b939e1fc3b5088ec4599bfd88f0d00","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectDeprovisionProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeprovisionProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -64,7 +64,7 @@ public void process(final Exchange exchange) {\n         List<PropagationTask> tasks =\n                 propagationManager.getAnyObjectDeleteTasks(anyObjectKey, new HashSet<>(resources), noPropResourceNames);\n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"ff9466d0198a2afdd1ce2446c520947f7a989a37","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectProvisionProcessor.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.processor;\n+\n+import java.util.List;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AnyObjectProvisionProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AnyObjectProvisionProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    protected AnyObjectDAO anyObjectDAO;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) {\n+        Long key = exchange.getIn().getBody(Long.class);\n+        List<String> resources = exchange.getProperty(\"resources\", List.class);\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.addAll(ResourceOperation.UPDATE, resources);\n+\n+        WorkflowResult<Long> wfResult = new WorkflowResult<>(key, propByRes, \"update\");\n+\n+        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(wfResult, null, null, null);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        exchange.getOut().setBody(propagationReporter.getStatuses());\n+    }\n+\n+}"},{"sha":"04009efb69d32bc4a9aec5d88dacd68b7914cd83","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectUpdateProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -76,7 +76,7 @@ public void process(final Exchange exchange) {\n         }\n \n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"0fb7058e19220f1206bdce10a70b7bccabe9e0bb","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupCreateProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -57,7 +57,7 @@ public void process(final Exchange exchange) {\n         List<PropagationTask> tasks =\n                 propagationManager.getGroupCreateTasks(created, any.getVirAttrs(), excludedResource);\n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"00b71d44abbd338040aea33848cfd1c903fafcb2","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupDeleteProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -90,7 +90,7 @@ public void process(final Exchange exchange) throws Exception {\n         }\n \n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"cd36bfbc1d849cca005aa4d90d55cdeee69687e0","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupDeprovisionProcessor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -40,7 +40,7 @@\n @Component\n public class GroupDeprovisionProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UserDeprovisionProcessor.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(GroupDeprovisionProcessor.class);\n \n     @Autowired\n     protected PropagationManager propagationManager;\n@@ -64,7 +64,7 @@ public void process(final Exchange exchange) {\n         List<PropagationTask> tasks =\n                 propagationManager.getGroupDeleteTasks(groupKey, new HashSet<>(resources), noPropResourceNames);\n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"23f47a7d464135c3247b27ab7ce754a7205ff76a","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupProvisionProcessor.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.processor;\n+\n+import java.util.List;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class GroupProvisionProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GroupProvisionProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    protected GroupDAO groupDAO;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) {\n+        Long key = exchange.getIn().getBody(Long.class);\n+        List<String> resources = exchange.getProperty(\"resources\", List.class);\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.addAll(ResourceOperation.UPDATE, resources);\n+\n+        WorkflowResult<Long> wfResult = new WorkflowResult<>(key, propByRes, \"update\");\n+\n+        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(wfResult, null, null, null);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        exchange.getOut().setBody(propagationReporter.getStatuses());\n+    }\n+\n+}"},{"sha":"1bdbb6c47d01db7213930eaad8f7564bfbd64c4c","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupUpdateProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -76,7 +76,7 @@ public void process(final Exchange exchange) {\n         }\n \n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"a586f09166f7ca8cbdeb3e7c62b419ceb8c12160","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserConfirmPwdResetProcessor.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n@@ -50,18 +49,18 @@ public class UserConfirmPwdResetProcessor implements Processor {\n \n     @Override\n     public void process(final Exchange exchange) {\n-        User user = exchange.getProperty(\"user\", User.class);\n+        Long key = exchange.getProperty(\"userKey\", Long.class);\n \n         UserMod userMod = new UserMod();\n-        userMod.setKey(user.getKey());\n+        userMod.setKey(key);\n         userMod.setPassword(exchange.getProperty(\"password\", String.class));\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                 new WorkflowResult<Pair<UserMod, Boolean>>(\n                         new ImmutablePair<UserMod, Boolean>(userMod, null), null, \"confirmPasswordReset\"),\n                 true, null);\n         PropagationReporter propReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propReporter);\n         } catch (PropagationException e) {"},{"sha":"ea06c9d90f2c44c468ce0b825088ae4bd3022a61","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserCreateProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -65,7 +65,7 @@ public void process(final Exchange exchange) {\n                     actual.getVirAttrs(),\n                     excludedResources);\n             PropagationReporter propagationReporter =\n-                    ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                    ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n             try {\n                 taskExecutor.execute(tasks, propagationReporter);\n             } catch (PropagationException e) {"},{"sha":"b6218a96b0572eddc0c4d316c9057265d7af57a6","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserDeleteProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -58,7 +58,7 @@ public void process(final Exchange exchange) throws Exception {\n         List<PropagationTask> tasks = propagationManager.getUserDeleteTasks(userKey, excludedResource);\n \n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"642870a540c59fce305cd2d7bc30ded1d9aca6fd","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserDeprovisionProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -63,7 +63,7 @@ public void process(final Exchange exchange) {\n                 new HashSet<>(resources),\n                 CollectionUtils.removeAll(userDAO.findAllResourceNames(user), resources));\n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"f85c37380f8229134bc2e26bcb787276f172a292","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserProvisionProcessor.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.processor;\n+\n+import java.util.List;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UserProvisionProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserProvisionProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    protected UserDAO userDAO;\n+\n+    @Override\n+    public void process(final Exchange exchange) {\n+        Long key = exchange.getIn().getBody(Long.class);\n+        Boolean changePwd = exchange.getProperty(\"changePwd\", Boolean.class);\n+        String password = exchange.getProperty(\"password\", String.class);\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> resources = exchange.getProperty(\"resources\", List.class);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(key);\n+        userMod.getResourcesToAdd().addAll(resources);\n+\n+        if (changePwd) {\n+            StatusMod statusMod = new StatusMod();\n+            statusMod.setOnSyncope(false);\n+            statusMod.getResourceNames().addAll(resources);\n+            userMod.setPwdPropRequest(statusMod);\n+            userMod.setPassword(password);\n+        }\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+        for (String resource : resources) {\n+            propByRes.add(ResourceOperation.UPDATE, resource);\n+        }\n+\n+        WorkflowResult<Pair<UserMod, Boolean>> wfResult = new WorkflowResult<Pair<UserMod, Boolean>>(\n+                ImmutablePair.of(userMod, (Boolean) null), propByRes, \"update\");\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        exchange.getOut().setBody(propagationReporter.getStatuses());\n+    }\n+\n+}"},{"sha":"75ab0271f3efcad24e89893e7fffdb1e217a2fd5","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserSetStatusInSyncProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -44,7 +44,7 @@ public void process(final Exchange exchange) {\n         WorkflowResult<Map.Entry<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n \n         Boolean enabled = exchange.getProperty(\"enabled\", Boolean.class);\n-        Long key = exchange.getProperty(\"key\", Long.class);\n+        Long key = exchange.getProperty(\"userKey\", Long.class);\n \n         if (enabled != null) {\n             User user = userDAO.find(key);"},{"sha":"cbc8fb7ede2eb4b9d4594f4e6b0501acf5fd2b55","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserStatusPropagationProcessor.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n@@ -52,22 +51,22 @@ public class UserStatusPropagationProcessor implements Processor {\n \n     @Autowired\n     protected UserDAO userDAO;\n-    \n+\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void process(final Exchange exchange) {\n         WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n \n-        User user = exchange.getProperty(\"user\", User.class);\n+        Long key = exchange.getProperty(\"userKey\", Long.class);\n         StatusMod statusMod = exchange.getProperty(\"statusMod\", StatusMod.class);\n \n-        Collection<String> resourcesToBeExcluded =\n-                CollectionUtils.removeAll(userDAO.findAllResourceNames(user), statusMod.getResourceNames());\n+        Collection<String> resourcesToBeExcluded = CollectionUtils.removeAll(\n+                userDAO.findAllResourceNames(userDAO.find(key)), statusMod.getResourceNames());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                user, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);\n+                key, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);\n         PropagationReporter propReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propReporter);\n         } catch (PropagationException e) {"},{"sha":"dcd271dc4b2da7555c6711b51e9591f9737b73bf","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateInSyncProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -55,7 +55,7 @@ public void process(final Exchange exchange) {\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated, updated.getResult().getKey().\n                 getPassword() != null, excludedResources);"},{"sha":"1dc19f588c384e62626b79f2ff490b9742cbac63","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -74,7 +74,7 @@ public void process(final Exchange exchange) {\n         }\n \n         PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         if (!tasks.isEmpty()) {\n             try {\n                 taskExecutor.execute(tasks, propagationReporter);"},{"sha":"9cbde1631b3b9758c6529dbbae3a676b3ba6d520","filename":"ext/camel/provisioning-camel/src/main/resources/anyObjectRoutes.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FanyObjectRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FanyObjectRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FanyObjectRoutes.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -112,6 +112,12 @@ under the License.\n     </doTry>            \n   </route>\n         \n+  <route id=\"provisionAnyObject\">\n+    <from uri=\"direct:provisionAnyObject\"/>            \n+    <process ref=\"anyObjectProvisionProcessor\"/>\n+    <to uri=\"direct:provisionAnyObjectPort\"/>              \n+  </route>\n+\n   <route id=\"deprovisionAnyObject\">\n     <from uri=\"direct:deprovisionAnyObject\"/>            \n     <process ref=\"anyObjectDeprovisionProcessor\"/>"},{"sha":"ac643450b3aebdac09a5ee515011dc8ebb1b24ba","filename":"ext/camel/provisioning-camel/src/main/resources/groupRoutes.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -131,6 +131,12 @@ under the License.\n     </doTry>            \n   </route>\n         \n+  <route id=\"provisionGroup\">\n+    <from uri=\"direct:provisionGroup\"/>            \n+    <process ref=\"groupProvisionProcessor\"/>\n+    <to uri=\"direct:provisionGroupPort\"/>              \n+  </route>\n+\n   <route id=\"deprovisionGroup\">\n     <from uri=\"direct:deprovisionGroup\"/>            \n     <process ref=\"groupDeprovisionProcessor\"/>"},{"sha":"aca6a462220bffac21627a3292a1c09ebc138e87","filename":"ext/camel/provisioning-camel/src/main/resources/userRoutes.xml","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -185,7 +185,13 @@ under the License.\n     <process ref=\"userStatusPropagationProcessor\"/>\n     <to uri=\"direct:statusPort\"/> \n   </route>\n-        \n+    \n+  <route id=\"provisionUser\">\n+    <from uri=\"direct:provisionUser\"/>            \n+    <process ref=\"userProvisionProcessor\"/>\n+    <to uri=\"direct:provisionPort\"/>              \n+  </route>\n+                \n   <route id=\"deprovisionUser\">\n     <from uri=\"direct:deprovisionUser\"/>            \n     <process ref=\"userDeprovisionProcessor\"/>"},{"sha":"d7e27dc34df2210b4f93f27dee7e790c39f8a49c","filename":"fit/core-reference/pom.xml","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -261,7 +261,7 @@ under the License.\n             </deployable>\n             <deployable>\n               <location>${project.build.directory}/${project.build.finalName}</location>\n-              <pingURL>http://localhost:${cargo.servlet.port}/syncope/db.jsp</pingURL>\n+              <pingURL>http://localhost:${cargo.servlet.port}/syncope/cacheStats.jsp</pingURL>\n               <pingTimeout>60000</pingTimeout>\n               <properties>\n                 <context>syncope</context>\n@@ -310,13 +310,17 @@ under the License.\n         <filtering>true</filtering>\n       </resource>\n       <resource>\n-        <directory>${basedir}/../../core/persistence-jpa/src/test/resources</directory>\n+        <directory>${basedir}/../../core/persistence-jpa/src/main/resources</directory>\n         <includes>\n-          <include>content.xml</include>\n           <include>persistence.properties</include>\n         </includes>\n         <filtering>true</filtering>\n       </resource>\n+      <resource>\n+        <directory>${basedir}/../../core/persistence-jpa/src/test/resources/domains</directory>\n+        <targetPath>${project.build.directory}/classes/domains</targetPath>\n+        <filtering>true</filtering>\n+      </resource>\n       <resource>\n         <directory>${basedir}/../../core/misc/src/main/resources</directory>\n         <includes>\n@@ -803,7 +807,7 @@ under the License.\n                 <transformationSet>\n                   <dir>${project.build.directory}/classes</dir>\n                   <includes>\n-                    <include>content.xml</include>\n+                    <include>domains/MasterContent.xml</include>\n                   </includes>\n                   <outputDir>${project.build.directory}/classes</outputDir>\n                   <stylesheet>${basedir}/src/test/resources/addActivitiToContent.xsl</stylesheet>"},{"sha":"1c58a040e4cc1247069168a20130d2de395e84df","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestSampleJobDelegate.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJobDelegate.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -21,20 +21,20 @@\n import java.util.Date;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.provisioning.java.job.AbstractTaskJob;\n+import org.apache.syncope.core.provisioning.java.job.AbstractSchedTaskJobDelegate;\n import org.quartz.JobExecutionException;\n \n /**\n  * Sample implementation for execution a scheduled task.\n  *\n  * @see SchedTask\n  */\n-public class TestSampleJob extends AbstractTaskJob {\n+public class TestSampleJobDelegate extends AbstractSchedTaskJobDelegate {\n \n     @Override\n     protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         if (!(task instanceof SchedTask)) {\n-            throw new JobExecutionException(\"Task \" + taskId + \" isn't a SchedTask\");\n+            throw new JobExecutionException(\"Task \" + task.getKey() + \" isn't a SchedTask\");\n         }\n \n         for (int i = 0; i < 10; i++) {","previous_filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestSampleJob.java"},{"sha":"015ca726fbe9b52bea86d6a3c15032cdacd7a720","filename":"fit/core-reference/src/main/resources/all/provisioning.properties","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,4 +18,8 @@ camel.directory=${conf.directory}\n userProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelUserProvisioningManager\n groupProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelGroupProvisioningManager\n anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n-virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n\\ No newline at end of file\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n+\n+quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n+quartz.sql=tables_h2.sql\n+quartz.scheduler.idleWaitTime=5000"},{"sha":"ecdb57dbd67df81396ae5de08947ea999351383b","filename":"fit/core-reference/src/main/resources/coreContext.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FcoreContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FcoreContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FcoreContext.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -29,6 +29,7 @@ under the License.\n     <property name=\"locations\">\n       <list>\n         <value>file:${conf.directory}/persistence.properties</value>\n+        <value>file:${conf.directory}/domains/*.properties</value>\n         <value>file:${conf.directory}/security.properties</value>\n         <value>file:${conf.directory}/connid.properties</value>\n         <value>file:${conf.directory}/mail.properties</value>\n@@ -42,6 +43,7 @@ under the License.\n     <property name=\"locations\">\n       <list>\n         <value>classpath:persistence.properties</value>\n+        <value>classpath:domains/*.properties</value>\n         <value>classpath:security.properties</value>\n         <value>classpath:connid.properties</value>\n         <value>classpath:mail.properties</value>"},{"sha":"b50d9cbe1fcaf82d6ca840fbd802c6db7d24f912","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":12,"deletions":23,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -21,8 +21,8 @@ under the License.\n \n   <appenders>\n     \n-    <RollingRandomAccessFile name=\"main\" fileName=\"${log.directory}/server.log\"\n-                             filePattern=\"${log.directory}/server-%d{yyyy-MM-dd}.log.gz\"\n+    <RollingRandomAccessFile name=\"main\" fileName=\"${log.directory}/core.log\"\n+                             filePattern=\"${log.directory}/core-%d{yyyy-MM-dd}.log.gz\"\n                              immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n         <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n@@ -33,8 +33,8 @@ under the License.\n       </Policies>\n     </RollingRandomAccessFile>\n \n-    <RollingRandomAccessFile name=\"persistence\" fileName=\"${log.directory}/server-persistence.log\"\n-                             filePattern=\"${log.directory}/server-persistence-%d{yyyy-MM-dd}.log.gz\"\n+    <RollingRandomAccessFile name=\"persistence\" fileName=\"${log.directory}/core-persistence.log\"\n+                             filePattern=\"${log.directory}/core-persistence-%d{yyyy-MM-dd}.log.gz\"\n                              immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n         <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n@@ -45,8 +45,8 @@ under the License.\n       </Policies>\n     </RollingRandomAccessFile>\n \n-    <RollingRandomAccessFile name=\"rest\" fileName=\"${log.directory}/server-rest.log\"\n-                             filePattern=\"${log.directory}/server-rest-%d{yyyy-MM-dd}.log.gz\"\n+    <RollingRandomAccessFile name=\"rest\" fileName=\"${log.directory}/core-rest.log\"\n+                             filePattern=\"${log.directory}/core-rest-%d{yyyy-MM-dd}.log.gz\"\n                              immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n         <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n@@ -57,8 +57,8 @@ under the License.\n       </Policies>\n     </RollingRandomAccessFile>\n \n-    <RollingRandomAccessFile name=\"connid\" fileName=\"${log.directory}/server-connid.log\"\n-                             filePattern=\"${log.directory}/server-connid-%d{yyyy-MM-dd}.log.gz\"\n+    <RollingRandomAccessFile name=\"connid\" fileName=\"${log.directory}/core-connid.log\"\n+                             filePattern=\"${log.directory}/core-connid-%d{yyyy-MM-dd}.log.gz\"\n                              immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n         <pattern>%d{HH:mm:ss.SSS} %-5level %msg%n</pattern>\n@@ -68,17 +68,7 @@ under the License.\n         <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n       </Policies>\n     </RollingRandomAccessFile>\n-\n-    <!-- Audit -->    \n-    <Jdbc name=\"audit\" tableName=\"SYNCOPEAUDIT\">\n-      <ConnectionFactory class=\"org.apache.syncope.core.logic.audit.AuditConnectionFactory\" method=\"getConnection\"/>\n-      <Column name=\"EVENT_DATE\" isEventTimestamp=\"true\"/>\n-      <Column name=\"LOGGER_LEVEL\" pattern=\"%level\" isUnicode=\"false\"/>\n-      <Column name=\"LOGGER\" pattern=\"%logger\" isUnicode=\"false\"/>\n-      <Column name=\"MESSAGE\" pattern=\"%message\" isUnicode=\"false\"/>\n-      <Column name=\"THROWABLE\" pattern=\"%ex{full}\" isUnicode=\"false\"/>\n-    </Jdbc>\n-\n+    \n   </appenders>\n   \n   <loggers>\n@@ -122,13 +112,12 @@ under the License.\n     <asyncLogger name=\"org.springframework\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n+    <asyncLogger name=\"org.quartz\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n     <asyncLogger name=\"org.apache.camel\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n-         \n-    <logger name=\"syncope.audit\" additivity=\"false\" level=\"DEBUG\">\n-      <appender-ref ref=\"audit\"/>\n-    </logger>\n     \n     <root level=\"INFO\">\n       <appender-ref ref=\"main\"/>"},{"sha":"a67787fdc274335ec2d2b65d8ee181c1b42928d9","filename":"fit/core-reference/src/main/resources/provisioning.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,3 +18,7 @@ userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserPro\n groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\n anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n+\n+quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n+quartz.sql=tables_h2.sql\n+quartz.scheduler.idleWaitTime=5000\n\\ No newline at end of file"},{"sha":"ba380c53c13569cf8835c91483f0eb12d3eba67d","filename":"fit/core-reference/src/main/webapp/cacheStats.jsp","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fwebapp%2FcacheStats.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Fmain%2Fwebapp%2FcacheStats.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fwebapp%2FcacheStats.jsp?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -16,6 +16,7 @@ KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n --%>\n+<%@page import=\"org.springframework.beans.factory.support.DefaultListableBeanFactory\"%>\n <%@page import=\"org.apache.syncope.common.lib.SyncopeConstants\"%>\n <%@page import=\"org.apache.syncope.core.misc.spring.ApplicationContextProvider\"%>\n <%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n@@ -72,9 +73,9 @@ under the License.\n   <body>\n     <p/>\n     <%\n-        ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+        DefaultListableBeanFactory beanFactory = ApplicationContextProvider.getBeanFactory();\n \n-        EntityManagerFactory emf = context.getBean(EntityManagerFactory.class);\n+        EntityManagerFactory emf = beanFactory.getBean(\"MasterEntityManagerFactory\", EntityManagerFactory.class);\n         OpenJPAEntityManagerFactory oemf = OpenJPAPersistence.cast(emf);\n \n         QueryStatistics<QueryKey> queryStatistics ="},{"sha":"58b100448093312e426ad846643d2514389998a7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AnyTypeITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyTypeITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyTypeITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyTypeITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import static org.apache.syncope.fit.core.reference.AbstractITCase.getUUIDString;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;"},{"sha":"9d810b6a4a7a3d1a096e8b7d6f4a7d9313161c19","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -258,25 +258,25 @@ public void checkFailedLogins() {\n         assertEquals(0, getFailedLogins(userService4, userId));\n     }\n \n-    @Test\n+    //@Test\n     public void checkUserSuspension() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"checkSuspension@syncope.apache.org\");\n         userTO.setRealm(\"/odd\");\n         userTO.getRoles().add(2L);\n \n         userTO = createUser(userTO);\n-        long userId = userTO.getKey();\n+        long userKey = userTO.getKey();\n         assertNotNull(userTO);\n \n-        assertEquals(0, getFailedLogins(userService, userId));\n+        assertEquals(0, getFailedLogins(userService, userKey));\n \n         // authentications failed ...\n         SyncopeClient badPwdClient = clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n         assertReadFails(badPwdClient);\n         assertReadFails(badPwdClient);\n         assertReadFails(badPwdClient);\n \n-        assertEquals(3, getFailedLogins(userService, userId));\n+        assertEquals(3, getFailedLogins(userService, userKey));\n \n         // last authentication before suspension\n         assertReadFails(badPwdClient);\n@@ -352,7 +352,7 @@ public void issueSYNCOPE164() throws Exception {\n         assertNotNull(user);\n \n         // 2. unlink the resource from the created user\n-        assertNotNull(userService.bulkDeassociation(user.getKey(),\n+        assertNotNull(userService.deassociate(user.getKey(),\n                 ResourceDeassociationActionType.UNLINK,\n                 CollectionWrapper.wrap(RESOURCE_NAME_TESTDB, ResourceKey.class)).\n                 readEntity(BulkActionResult.class));"},{"sha":"1904bafd3db04fb7f95f9374cb43717f35a1044e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/CamelRouteITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import static org.apache.syncope.fit.core.reference.AbstractITCase.anyTypeClassService;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n@@ -46,7 +45,7 @@ public void userRoutes() {\n \n         List<CamelRouteTO> userRoutes = camelRouteService.list(AnyTypeKind.USER);\n         assertNotNull(userRoutes);\n-        assertEquals(15, userRoutes.size());\n+        assertEquals(16, userRoutes.size());\n         for (CamelRouteTO route : userRoutes) {\n             assertNotNull(route.getContent());\n         }\n@@ -58,7 +57,7 @@ public void groupRoutes() {\n \n         List<CamelRouteTO> groupRoutes = camelRouteService.list(AnyTypeKind.GROUP);\n         assertNotNull(groupRoutes);\n-        assertEquals(7, groupRoutes.size());\n+        assertEquals(8, groupRoutes.size());\n         for (CamelRouteTO route : groupRoutes) {\n             assertNotNull(route.getContent());\n         }"},{"sha":"583e3d9a3ec7b4bfde5cc8abe13e5a51522d46c7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConnectorITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -686,7 +686,7 @@ public void reload() {\n     @Test\n     public void bulkAction() {\n         final BulkAction bulkAction = new BulkAction();\n-        bulkAction.setOperation(BulkAction.Type.DELETE);\n+        bulkAction.setType(BulkAction.Type.DELETE);\n \n         ConnInstanceTO conn = connectorService.read(101L);\n "},{"sha":"924a24bfa702ab1a9e1b6ac131cb313d9f12fdf4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ExceptionMapperITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import static org.apache.syncope.fit.core.reference.AbstractITCase.anyTypeClassService;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n \n@@ -105,7 +104,7 @@ public void uniqueSchemaConstraint() {\n             fail();\n         } catch (Exception e) {\n             String message = ERROR_MESSAGES.getProperty(\"errMessage.UniqueConstraintViolation\");\n-            assertEquals(e.getMessage(), \"DataIntegrityViolation [\" + message + \"]\");\n+            assertEquals(\"EntityExists [\" + message + \"]\", e.getMessage());\n         }\n     }\n "},{"sha":"7fece69711a3dfc327e167ce7209693304a88379","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -60,7 +60,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.wrap.ResourceKey;\n@@ -323,7 +323,7 @@ public void unlink() {\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n \n-        assertNotNull(groupService.bulkDeassociation(actual.getKey(),\n+        assertNotNull(groupService.deassociate(actual.getKey(),\n                 ResourceDeassociationActionType.UNLINK,\n                 CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class)).\n                 readEntity(BulkActionResult.class));\n@@ -352,7 +352,7 @@ public void link() {\n \n         ResourceAssociationMod associationMod = new ResourceAssociationMod();\n         associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class));\n-        assertNotNull(groupService.bulkAssociation(actual.getKey(), ResourceAssociationActionType.LINK, associationMod).\n+        assertNotNull(groupService.associate(actual.getKey(), ResourceAssociationAction.LINK, associationMod).\n                 readEntity(BulkActionResult.class));\n \n         actual = groupService.read(actual.getKey());\n@@ -373,7 +373,7 @@ public void unassign() {\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n \n-        assertNotNull(groupService.bulkDeassociation(actual.getKey(),\n+        assertNotNull(groupService.deassociate(actual.getKey(),\n                 ResourceDeassociationActionType.UNASSIGN,\n                 CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class)).\n                 readEntity(BulkActionResult.class));\n@@ -407,8 +407,8 @@ public void assign() {\n \n         ResourceAssociationMod associationMod = new ResourceAssociationMod();\n         associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class));\n-        assertNotNull(groupService.bulkAssociation(actual.getKey(),\n-                ResourceAssociationActionType.ASSIGN, associationMod).\n+        assertNotNull(groupService.associate(actual.getKey(),\n+                ResourceAssociationAction.ASSIGN, associationMod).\n                 readEntity(BulkActionResult.class));\n \n         actual = groupService.read(actual.getKey());\n@@ -424,7 +424,7 @@ public void deprovision() {\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n \n-        assertNotNull(groupService.bulkDeassociation(actual.getKey(),\n+        assertNotNull(groupService.deassociate(actual.getKey(),\n                 ResourceDeassociationActionType.DEPROVISION,\n                 CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class)).\n                 readEntity(BulkActionResult.class));\n@@ -458,8 +458,8 @@ public void provision() {\n \n         ResourceAssociationMod associationMod = new ResourceAssociationMod();\n         associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class));\n-        assertNotNull(groupService.bulkAssociation(actual.getKey(),\n-                ResourceAssociationActionType.PROVISION, associationMod).\n+        assertNotNull(groupService.associate(actual.getKey(),\n+                ResourceAssociationAction.PROVISION, associationMod).\n                 readEntity(BulkActionResult.class));\n \n         actual = groupService.read(actual.getKey());\n@@ -485,16 +485,16 @@ public void deprovisionUnlinked() {\n \n         ResourceAssociationMod associationMod = new ResourceAssociationMod();\n         associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class));\n-        assertNotNull(groupService.bulkAssociation(actual.getKey(),\n-                ResourceAssociationActionType.PROVISION, associationMod).\n+        assertNotNull(groupService.associate(actual.getKey(),\n+                ResourceAssociationAction.PROVISION, associationMod).\n                 readEntity(BulkActionResult.class));\n \n         actual = groupService.read(actual.getKey());\n         assertTrue(actual.getResources().isEmpty());\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n \n-        assertNotNull(groupService.bulkDeassociation(actual.getKey(),\n+        assertNotNull(groupService.deassociate(actual.getKey(),\n                 ResourceDeassociationActionType.DEPROVISION,\n                 CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class)).\n                 readEntity(BulkActionResult.class));"},{"sha":"40fe8a1901f99750dbb9583df688a40a5c79deca","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/LoggerITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLoggerITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -197,7 +197,7 @@ public void listAuditEvents() {\n         found = false;\n         for (EventCategoryTO eventCategoryTO : events) {\n             if (EventCategoryType.TASK == eventCategoryTO.getType()\n-                    && \"SampleJob\".equals(eventCategoryTO.getCategory())) {\n+                    && \"TestSampleJobDelegate\".equals(eventCategoryTO.getCategory())) {\n                 found = true;\n             }\n         }\n@@ -206,7 +206,7 @@ public void listAuditEvents() {\n         found = false;\n         for (EventCategoryTO eventCategoryTO : events) {\n             if (EventCategoryType.TASK == eventCategoryTO.getType()\n-                    && \"SyncJob\".equals(eventCategoryTO.getCategory())) {\n+                    && \"SyncJobDelegate\".equals(eventCategoryTO.getCategory())) {\n                 found = true;\n             }\n         }"},{"sha":"56abdb869acb210fba2475d2e924335e2e5dd9f5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PropagationTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -141,7 +141,7 @@ public void bulkAction() {\n         assertFalse(after.isEmpty());\n \n         BulkAction bulkAction = new BulkAction();\n-        bulkAction.setOperation(BulkAction.Type.DELETE);\n+        bulkAction.setType(BulkAction.Type.DELETE);\n \n         for (PropagationTaskTO taskTO : after) {\n             bulkAction.getTargets().add(String.valueOf(taskTO.getKey()));"},{"sha":"ca9d8a4fcc7c5ab6ba75d401a11e41822fe2e370","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import static org.apache.syncope.fit.core.reference.AbstractITCase.anyTypeClassService;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -109,7 +108,7 @@ public void createPushTask() {\n         task = taskService.read(actual.getKey());\n         assertNotNull(task);\n         assertEquals(task.getKey(), actual.getKey());\n-        assertEquals(task.getJobClassName(), actual.getJobClassName());\n+        assertEquals(task.getJobDelegateClassName(), actual.getJobDelegateClassName());\n         assertEquals(task.getFilters().get(AnyTypeKind.USER.name()),\n                 actual.getFilters().get(AnyTypeKind.USER.name()));\n         assertEquals(task.getFilters().get(AnyTypeKind.GROUP.name()),\n@@ -194,7 +193,7 @@ public void pushMatchingUser() throws Exception {\n         assertTrue(userService.read(1L).getResources().contains(RESOURCE_NAME_TESTDB2));\n         assertFalse(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n \n-        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n         assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n         assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='rossini'\").size());\n "},{"sha":"6242d96d79913e0baa131b42264bab0128e78005","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ResourceITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -481,7 +481,7 @@ public void bulkAction() {\n         assertNotNull(resourceService.read(\"forBulk2\"));\n \n         final BulkAction bulkAction = new BulkAction();\n-        bulkAction.setOperation(BulkAction.Type.DELETE);\n+        bulkAction.setType(BulkAction.Type.DELETE);\n \n         bulkAction.getTargets().add(String.valueOf(\"forBulk1\"));\n         bulkAction.getTargets().add(String.valueOf(\"forBulk2\"));"},{"sha":"30425f9960bd365e40aea4d9a006745e49ee44af","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.service.TaskService;\n-import org.apache.syncope.core.provisioning.api.job.SyncJob;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -86,7 +85,7 @@ public void issueSYNCOPE144() {\n         SchedTaskTO task = new SchedTaskTO();\n         task.setName(\"issueSYNCOPE144\");\n         task.setDescription(\"issueSYNCOPE144 Description\");\n-        task.setJobClassName(SyncJob.class.getName());\n+        task.setJobDelegateClassName(TestSampleJobDelegate.class.getName());\n \n         Response response = taskService.create(task);\n         SchedTaskTO actual = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n@@ -117,7 +116,7 @@ public void issueSYNCOPE660() {\n         SchedTaskTO task = new SchedTaskTO();\n         task.setName(\"issueSYNCOPE660\");\n         task.setDescription(\"issueSYNCOPE660 Description\");\n-        task.setJobClassName(TestSampleJob.class.getName());\n+        task.setJobDelegateClassName(TestSampleJobDelegate.class.getName());\n \n         Response response = taskService.create(task);\n         task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);"},{"sha":"9f277fa417361ffd0e69637f9fdffb7d2d0243d7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -126,7 +126,7 @@ public void create() {\n         task = taskService.read(actual.getKey());\n         assertNotNull(task);\n         assertEquals(actual.getKey(), task.getKey());\n-        assertEquals(actual.getJobClassName(), task.getJobClassName());\n+        assertEquals(actual.getJobDelegateClassName(), task.getJobDelegateClassName());\n         assertEquals(userTemplate, task.getTemplates().get(AnyTypeKind.USER.name()));\n         assertEquals(groupTemplate, task.getTemplates().get(AnyTypeKind.GROUP.name()));\n     }\n@@ -231,14 +231,11 @@ public boolean evaluate(final AttrTO attributeTO) {\n             assertNotNull(userTO);\n             assertEquals(\"active\", userTO.getStatus());\n \n-            // SYNCOPE-317\n-            execProvisioningTask(SYNC_TASK_ID, 50, false);\n-\n-            final Set<Long> pushTaskIds = new HashSet<>();\n-            pushTaskIds.add(25L);\n-            pushTaskIds.add(26L);\n+            Set<Long> otherSyncTaskKeys = new HashSet<>();\n+            otherSyncTaskKeys.add(25L);\n+            otherSyncTaskKeys.add(26L);\n+            execProvisioningTasks(otherSyncTaskKeys, 50, false);\n \n-            execProvisioningTasks(pushTaskIds, 50, false);\n             // Matching --> UNLINK\n             assertFalse(readUser(\"test9\").getResources().contains(RESOURCE_NAME_CSV));\n             assertFalse(readUser(\"test7\").getResources().contains(RESOURCE_NAME_CSV));\n@@ -290,7 +287,7 @@ private void ldapCleanup() {\n                 build());\n         if (matchingGroups.getSize() > 0) {\n             for (GroupTO group : matchingGroups.getResult()) {\n-                groupService.bulkDeassociation(group.getKey(),\n+                groupService.deassociate(group.getKey(),\n                         ResourceDeassociationActionType.UNLINK,\n                         CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class));\n                 groupService.delete(group.getKey());\n@@ -302,7 +299,7 @@ private void ldapCleanup() {\n                 build());\n         if (matchingUsers.getSize() > 0) {\n             for (UserTO user : matchingUsers.getResult()) {\n-                userService.bulkDeassociation(user.getKey(),\n+                userService.deassociate(user.getKey(),\n                         ResourceDeassociationActionType.UNLINK,\n                         CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class));\n                 userService.delete(user.getKey());\n@@ -352,6 +349,9 @@ public void reconcileFromLDAP() {\n         assertEquals(\"true\", groupTO.getPlainAttrMap().get(\"show\").getValues().get(0));\n         assertEquals(matchingUsers.getResult().iterator().next().getKey(), groupTO.getUserOwner(), 0);\n         assertNull(groupTO.getGroupOwner());\n+\n+        // SYNCOPE-317\n+        execProvisioningTask(11L, 50, false);\n     }\n \n     @Test\n@@ -376,7 +376,7 @@ public void reconcileFromScriptedSQL() {\n                         is(\"location\").equalTo(\"sync*\").query()).build());\n         assertTrue(matchingPrinters.getSize() > 0);\n         for (AnyObjectTO printer : matchingPrinters.getResult()) {\n-            anyObjectService.bulkDeassociation(printer.getKey(),\n+            anyObjectService.deassociate(printer.getKey(),\n                     ResourceDeassociationActionType.UNLINK,\n                     CollectionWrapper.wrap(RESOURCE_NAME_DBSCRIPTED, ResourceKey.class));\n             anyObjectService.delete(printer.getKey());\n@@ -678,7 +678,7 @@ public void issueSYNCOPE313DB() throws Exception {\n         syncTask = taskService.read(actual.getKey());\n         assertNotNull(syncTask);\n         assertEquals(actual.getKey(), syncTask.getKey());\n-        assertEquals(actual.getJobClassName(), syncTask.getJobClassName());\n+        assertEquals(actual.getJobDelegateClassName(), syncTask.getJobDelegateClassName());\n \n         TaskExecTO execution = execProvisioningTask(syncTask.getKey(), 50, false);\n         final String status = execution.getStatus();\n@@ -755,7 +755,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         syncTask = taskService.read(actual.getKey());\n         assertNotNull(syncTask);\n         assertEquals(actual.getKey(), syncTask.getKey());\n-        assertEquals(actual.getJobClassName(), syncTask.getJobClassName());\n+        assertEquals(actual.getJobDelegateClassName(), syncTask.getJobDelegateClassName());\n \n         TaskExecTO execution = execProvisioningTask(syncTask.getKey(), 50, false);\n         String status = execution.getStatus();"},{"sha":"4cecdf7bf58b3a882bc34459aa657fd52a8992ea","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":23,"deletions":31,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -47,7 +47,6 @@\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n@@ -70,7 +69,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n-import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.wrap.ResourceKey;\n@@ -436,7 +435,7 @@ public void create() {\n             createUser(userTO);\n             fail();\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.DataIntegrityViolation, e.getType());\n+            assertEquals(ClientExceptionType.GenericPersistence, e.getType());\n         }\n     }\n \n@@ -923,8 +922,9 @@ public void suspendReactivateOnResource() {\n         assertTrue(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n     }\n \n+    @Test\n     public void updateMultivalueAttribute() {\n-        UserTO userTO = getSampleTO(\"multivalue@syncope.apache.org\");\n+        UserTO userTO = getUniqueSampleTO(\"multivalue@syncope.apache.org\");\n         userTO.getResources().clear();\n         userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n@@ -938,11 +938,8 @@ public void updateMultivalueAttribute() {\n \n         UserMod userMod = new UserMod();\n \n-        AttrMod loginDateMod = new AttrMod();\n-        loginDateMod.getValuesToBeAdded().add(\"2000-01-01\");\n-\n         userMod.setKey(userTO.getKey());\n-        userMod.getPlainAttrsToUpdate().add(loginDateMod);\n+        userMod.getPlainAttrsToUpdate().add(attrMod(\"loginDate\", \"2000-01-01\"));\n \n         userTO = updateUser(userMod);\n         assertNotNull(userTO);\n@@ -1519,18 +1516,15 @@ public void mappingPurpose() {\n \n     @Test\n     public void issueSYNCOPE265() {\n-        for (long i = 1; i <= 5; i++) {\n+        for (long key = 1; key <= 5; key++) {\n             UserMod userMod = new UserMod();\n-            userMod.setKey(i);\n-\n-            AttrMod attributeMod = new AttrMod();\n-            attributeMod.setSchema(\"type\");\n-            attributeMod.getValuesToBeAdded().add(\"a type\");\n+            userMod.setKey(key);\n \n             userMod.getPlainAttrsToRemove().add(\"type\");\n-            userMod.getPlainAttrsToUpdate().add(attributeMod);\n+            userMod.getPlainAttrsToUpdate().add(attrMod(\"type\", \"a type\"));\n \n             UserTO userTO = updateUser(userMod);\n+\n             assertEquals(\"a type\", userTO.getPlainAttrMap().get(\"type\").getValues().get(0));\n         }\n     }\n@@ -1549,21 +1543,21 @@ public void bulkActions() {\n \n         assertEquals(11, bulkAction.getTargets().size());\n \n-        bulkAction.setOperation(BulkAction.Type.SUSPEND);\n+        bulkAction.setType(BulkAction.Type.SUSPEND);\n         BulkActionResult res = userService.bulk(bulkAction);\n         assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n         assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n         assertEquals(\"suspended\", userService.read(\n                 Long.parseLong(res.getResultByStatus(Status.SUCCESS).get(3))).getStatus());\n \n-        bulkAction.setOperation(BulkAction.Type.REACTIVATE);\n+        bulkAction.setType(BulkAction.Type.REACTIVATE);\n         res = userService.bulk(bulkAction);\n         assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n         assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n         assertEquals(\"active\", userService.read(\n                 Long.parseLong(res.getResultByStatus(Status.SUCCESS).get(3))).getStatus());\n \n-        bulkAction.setOperation(BulkAction.Type.DELETE);\n+        bulkAction.setType(BulkAction.Type.DELETE);\n         res = userService.bulk(bulkAction);\n         assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n         assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n@@ -1765,7 +1759,7 @@ public void unlink() {\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        assertNotNull(userService.bulkDeassociation(actual.getKey(),\n+        assertNotNull(userService.deassociate(actual.getKey(),\n                 ResourceDeassociationActionType.UNLINK,\n                 CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class)).\n                 readEntity(BulkActionResult.class));\n@@ -1801,8 +1795,7 @@ public void link() {\n         final ResourceAssociationMod associationMod = new ResourceAssociationMod();\n         associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class));\n \n-        assertNotNull(userService.bulkAssociation(\n-                actual.getKey(), ResourceAssociationActionType.LINK, associationMod).readEntity(BulkActionResult.class));\n+        assertNotNull(userService.associate(actual.getKey(), ResourceAssociationAction.LINK, associationMod).readEntity(BulkActionResult.class));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1831,7 +1824,7 @@ public void unassign() {\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        assertNotNull(userService.bulkDeassociation(actual.getKey(),\n+        assertNotNull(userService.deassociate(actual.getKey(),\n                 ResourceDeassociationActionType.UNASSIGN,\n                 CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class)).\n                 readEntity(BulkActionResult.class));\n@@ -1869,12 +1862,12 @@ public void assign() {\n             assertNotNull(e);\n         }\n \n-        final ResourceAssociationMod associationMod = new ResourceAssociationMod();\n+        ResourceAssociationMod associationMod = new ResourceAssociationMod();\n         associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class));\n         associationMod.setChangePwd(true);\n         associationMod.setPassword(\"password\");\n \n-        assertNotNull(userService.bulkAssociation(actual.getKey(), ResourceAssociationActionType.ASSIGN, associationMod)\n+        assertNotNull(userService.associate(actual.getKey(), ResourceAssociationAction.ASSIGN, associationMod)\n                 .readEntity(BulkActionResult.class));\n \n         actual = userService.read(actual.getKey());\n@@ -1898,7 +1891,7 @@ public void deprovision() {\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        assertNotNull(userService.bulkDeassociation(actual.getKey(),\n+        assertNotNull(userService.deassociate(actual.getKey(),\n                 ResourceDeassociationActionType.DEPROVISION,\n                 CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class)).\n                 readEntity(BulkActionResult.class));\n@@ -1936,14 +1929,13 @@ public void provision() {\n             assertNotNull(e);\n         }\n \n-        final ResourceAssociationMod associationMod = new ResourceAssociationMod();\n+        ResourceAssociationMod associationMod = new ResourceAssociationMod();\n         associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class));\n         associationMod.setChangePwd(true);\n         associationMod.setPassword(\"password\");\n \n-        assertNotNull(userService.bulkAssociation(actual.getKey(), ResourceAssociationActionType.PROVISION,\n-                associationMod)\n-                .readEntity(BulkActionResult.class));\n+        assertNotNull(userService.associate(actual.getKey(), ResourceAssociationAction.PROVISION, associationMod).\n+                readEntity(BulkActionResult.class));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1977,7 +1969,7 @@ public void deprovisionUnlinked() {\n         associationMod.setChangePwd(true);\n         associationMod.setPassword(\"password\");\n \n-        assertNotNull(userService.bulkAssociation(actual.getKey(), ResourceAssociationActionType.PROVISION,\n+        assertNotNull(userService.associate(actual.getKey(), ResourceAssociationAction.PROVISION,\n                 associationMod)\n                 .readEntity(BulkActionResult.class));\n \n@@ -1986,7 +1978,7 @@ public void deprovisionUnlinked() {\n         assertTrue(actual.getResources().isEmpty());\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        assertNotNull(userService.bulkDeassociation(actual.getKey(),\n+        assertNotNull(userService.deassociate(actual.getKey(),\n                 ResourceDeassociationActionType.DEPROVISION,\n                 CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class)).\n                 readEntity(BulkActionResult.class));"}]}