{"sha":"8948088ddca0eef141d06ddbd9459fa073f67158","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg5NDgwODhkZGNhMGVlZjE0MWQwNmRkYmQ5NDU5ZmEwNzNmNjcxNTg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-07-13T16:34:31Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-07-13T16:34:31Z"},"message":"[SYNCOPE-102] Preventing concurrent executions of the same report\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1361292 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f45ba941a1884b9651258dab086ceaac7d16ae5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1f45ba941a1884b9651258dab086ceaac7d16ae5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8948088ddca0eef141d06ddbd9459fa073f67158","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8948088ddca0eef141d06ddbd9459fa073f67158","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8948088ddca0eef141d06ddbd9459fa073f67158","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8948088ddca0eef141d06ddbd9459fa073f67158/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"04c1a55d2a7c44f52e282aebe08cf68172433e6b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04c1a55d2a7c44f52e282aebe08cf68172433e6b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/04c1a55d2a7c44f52e282aebe08cf68172433e6b"}],"stats":{"total":142,"additions":114,"deletions":28},"files":[{"sha":"93afabdeb741c8def082ee2607e20364b6c100c5","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":40,"deletions":26,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8948088ddca0eef141d06ddbd9459fa073f67158/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8948088ddca0eef141d06ddbd9459fa073f67158/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=8948088ddca0eef141d06ddbd9459fa073f67158","patch":"@@ -359,33 +359,47 @@ public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) throw\n             throw new NotFoundException(\"Report \" + reportId);\n         }\n \n-        try {\n-            jobInstanceLoader.registerJob(report);\n+        ReportExecTO result;\n \n-            JobDataMap map = new JobDataMap();\n-            scheduler.getScheduler().triggerJob(JobInstanceLoader.getJobName(report), Scheduler.DEFAULT_GROUP, map);\n+        ReportExec latestExec = reportExecDAO.findLatestStarted(report);\n+        if (latestExec != null\n+                && (ReportExecStatus.STARTED.name().equals(latestExec.getStatus())\n+                || ReportExecStatus.RUNNING.name().equals(latestExec.getStatus()))) {\n \n-            auditManager.audit(Category.report, ReportSubCategory.execute, Result.success,\n-                    \"Successfully started execution for report: \" + report.getId());\n-        } catch (Exception e) {\n-            LOG.error(\"While executing report {}\", report, e);\n+            LOG.debug(\"Found a non-terminated execution for report {}: not triggering a new execution\", report);\n+            \n+            result = binder.getReportExecTO(latestExec);\n+        } else {\n+            LOG.debug(\"Triggering a new execution of report {}\", report);\n \n-            auditManager.audit(Category.report, ReportSubCategory.execute, Result.failure,\n-                    \"Could not start execution for report: \" + report.getId(), e);\n+            try {\n+                jobInstanceLoader.registerJob(report);\n \n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n-            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n-            sce.addElement(e.getMessage());\n-            scce.addException(sce);\n-            throw scce;\n-        }\n+                JobDataMap map = new JobDataMap();\n+                scheduler.getScheduler().triggerJob(JobInstanceLoader.getJobName(report), Scheduler.DEFAULT_GROUP, map);\n+\n+                auditManager.audit(Category.report, ReportSubCategory.execute, Result.success,\n+                        \"Successfully started execution for report: \" + report.getId());\n+            } catch (Exception e) {\n+                LOG.error(\"While executing report {}\", report, e);\n+\n+                auditManager.audit(Category.report, ReportSubCategory.execute, Result.failure,\n+                        \"Could not start execution for report: \" + report.getId(), e);\n+\n+                SyncopeClientCompositeErrorException scce =\n+                        new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+                SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n+                sce.addElement(e.getMessage());\n+                scce.addException(sce);\n+                throw scce;\n+            }\n \n-        ReportExecTO result = new ReportExecTO();\n-        result.setReport(reportId);\n-        result.setStartDate(new Date());\n-        result.setStatus(ReportExecStatus.STARTED);\n-        result.setMessage(\"Job fired; waiting for results...\");\n+            result = new ReportExecTO();\n+            result.setReport(reportId);\n+            result.setStartDate(new Date());\n+            result.setStatus(ReportExecStatus.STARTED);\n+            result.setMessage(\"Job fired; waiting for results...\");\n+        }\n \n         return result;\n     }\n@@ -399,7 +413,7 @@ public ReportTO delete(@PathVariable(\"reportId\") final Long reportId)\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportId);\n         }\n-        \n+\n         ReportTO deletedReport = binder.getReportTO(report);\n \n         jobInstanceLoader.unregisterJob(report);\n@@ -408,7 +422,7 @@ public ReportTO delete(@PathVariable(\"reportId\") final Long reportId)\n \n         auditManager.audit(Category.report, ReportSubCategory.delete, Result.success,\n                 \"Successfully deleted report: \" + report.getId());\n-        \n+\n         return deletedReport;\n     }\n \n@@ -423,12 +437,12 @@ public ReportExecTO deleteExecution(@PathVariable(\"executionId\") final Long exec\n         }\n \n         ReportExecTO reportExecToDelete = binder.getReportExecTO(reportExec);\n-                \n+\n         reportExecDAO.delete(reportExec);\n \n         auditManager.audit(Category.report, ReportSubCategory.deleteExecution, Result.success,\n                 \"Successfully deleted report execution: \" + reportExec.getId());\n-        \n+\n         return reportExecToDelete;\n     }\n }"},{"sha":"081669db839cfca8409cf7154e45c67299c594b5","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":74,"deletions":2,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8948088ddca0eef141d06ddbd9459fa073f67158/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8948088ddca0eef141d06ddbd9459fa073f67158/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=8948088ddca0eef141d06ddbd9459fa073f67158","patch":"@@ -264,6 +264,7 @@ public void executeAndExport()\n         assertFalse(export.isEmpty());\n     }\n \n+    @Test\n     public void issueSYNCOPE43() {\n         ReportTO reportTO = new ReportTO();\n         reportTO.setName(\"issueSYNCOPE43\");\n@@ -275,18 +276,89 @@ public void issueSYNCOPE43() {\n         assertNotNull(execution);\n \n         int maxit = 50;\n-\n         do {\n             try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n             }\n \n-            reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n+            reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, reportTO.getId());\n \n             maxit--;\n         } while (reportTO.getExecutions().isEmpty() && maxit > 0);\n \n         assertEquals(1, reportTO.getExecutions().size());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE102() throws IOException {\n+        // Create\n+        ReportTO reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n+        reportTO.setId(0);\n+        reportTO.setName(\"issueSYNCOPE102\");\n+        reportTO = restTemplate.postForObject(BASE_URL + \"report/create\", reportTO, ReportTO.class);\n+        assertNotNull(reportTO);\n+\n+        // Execute (multiple requests)\n+        for (int i = 0; i < 10; i++) {\n+            ReportExecTO execution = restTemplate.postForObject(BASE_URL + \"report/execute/{reportId}\", null,\n+                    ReportExecTO.class, reportTO.getId());\n+            assertNotNull(execution);\n+        }\n+\n+        // Wait for one execution\n+        int maxit = 50;\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, reportTO.getId());\n+\n+            maxit--;\n+        } while (reportTO.getExecutions().isEmpty() && maxit > 0);\n+\n+        assertTrue(!reportTO.getExecutions().isEmpty());\n+\n+        // Export\n+        final HttpClient client = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient();\n+        final AuthScope scope = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getAuthScope();\n+        final HttpHost targetHost = new HttpHost(scope.getHost(), scope.getPort(), scope.getScheme());\n+\n+        // Add AuthCache to the execution context\n+        BasicHttpContext localcontext = new BasicHttpContext();\n+\n+        // Generate BASIC scheme object and add it to the local auth cache\n+        AuthCache authCache = new BasicAuthCache();\n+        authCache.put(targetHost, new BasicScheme());\n+        localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);\n+\n+        HttpResponse response = null;\n+\n+        maxit = 10;\n+\n+        // issueSYNCOPE89\n+        ((PoolingClientConnectionManager) client.getConnectionManager()).setDefaultMaxPerRoute(10);\n+\n+        HttpGet getMethod = new HttpGet(BASE_URL + \"report/execution/export/\" + reportTO.getExecutions().\n+                iterator().next().getId());\n+\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            response = client.execute(targetHost, getMethod, localcontext);\n+\n+            maxit--;\n+        } while ((response == null || response.getStatusLine().getStatusCode() != 200) && maxit > 0);\n+\n+        assertEquals(200, response.getStatusLine().getStatusCode());\n+\n+        String export = EntityUtils.toString(response.getEntity()).trim();\n+        assertNotNull(export);\n+        assertFalse(export.isEmpty());\n+    }\n }"}]}