{"sha":"f0018fe490d54397643edaa52a8d524472fca344","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYwMDE4ZmU0OTBkNTQzOTc2NDNlZGFhNTJhOGQ1MjQ0NzJmY2EzNDQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-12-01T10:44:33Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-12-01T13:56:35Z"},"message":"[SYNCOPE-1241] Avoid carrying around PropagationTask (JPA) instances, use PropagationTaskTO instead","tree":{"sha":"a258782cd70c60a801bbf7308f66b6a2721ea21c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a258782cd70c60a801bbf7308f66b6a2721ea21c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f0018fe490d54397643edaa52a8d524472fca344","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f0018fe490d54397643edaa52a8d524472fca344","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f0018fe490d54397643edaa52a8d524472fca344","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f0018fe490d54397643edaa52a8d524472fca344/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"189c5ccacc023828562fa1200819857c59459d84","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/189c5ccacc023828562fa1200819857c59459d84","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/189c5ccacc023828562fa1200819857c59459d84"}],"stats":{"total":311,"additions":174,"deletions":137},"files":[{"sha":"3ef94de352b521628aa5022fedabd9d9ace00e81","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationTaskTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -43,6 +43,8 @@ public class PropagationTaskTO extends AbstractTaskTO {\n \n     private AnyTypeKind anyTypeKind;\n \n+    private String anyType;\n+\n     private String entityKey;\n \n     public String getConnObjectKey() {\n@@ -101,6 +103,14 @@ public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n         this.anyTypeKind = anyTypeKind;\n     }\n \n+    public String getAnyType() {\n+        return anyType;\n+    }\n+\n+    public void setAnyType(final String anyType) {\n+        this.anyType = anyType;\n+    }\n+\n     public String getEntityKey() {\n         return entityKey;\n     }"},{"sha":"4c2a8cc9526c92f628145962fdaea4d598773fe4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -26,6 +26,7 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -41,7 +42,6 @@\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -121,7 +121,7 @@ public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO\n         realm.getResourceKeys().forEach(resource -> {\n             propByRes.add(ResourceOperation.CREATE, resource);\n         });\n-        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);\n \n         ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n@@ -143,7 +143,7 @@ public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n         PropagationByResource propByRes = binder.update(realm, realmTO);\n         realm = realmDAO.save(realm);\n \n-        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);\n \n         ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n@@ -186,7 +186,7 @@ public ProvisioningResult<RealmTO> delete(final String fullPath) {\n         realm.getResourceKeys().forEach(resource -> {\n             propByRes.add(ResourceOperation.DELETE, resource);\n         });\n-        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);\n \n         ProvisioningResult<RealmTO> result = new ProvisioningResult<>();"},{"sha":"834458d946c9d969b61257d50f717569c31f2730","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -43,7 +44,6 @@\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n@@ -191,10 +191,12 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n             throw sce;\n         }\n \n+        TaskUtils taskUtil = taskUtilsFactory.getInstance(task);\n+\n         ExecTO result = null;\n-        switch (taskUtilsFactory.getInstance(task).getType()) {\n+        switch (taskUtil.getType()) {\n             case PROPAGATION:\n-                TaskExec propExec = taskExecutor.execute((PropagationTask) task);\n+                TaskExec propExec = taskExecutor.execute((PropagationTaskTO) binder.getTaskTO(task, taskUtil, false));\n                 result = binder.getExecTO(propExec);\n                 break;\n "},{"sha":"62b43ae93ddafb8d3b402e8ee579b35229ac873c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -23,11 +23,11 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n@@ -70,7 +70,7 @@ public UserTO executeWorkflowTask(final UserTO userTO, final String taskId) {\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(\n                 new WorkflowResult<>(\n                         Pair.<UserPatch, Boolean>of(userPatch, null),\n                         updated.getPropByRes(), updated.getPerformedTasks()));\n@@ -104,7 +104,7 @@ public UserTO submitForm(final WorkflowFormTO form) {\n         if (updated.getResult() instanceof UserPatch\n                 && updated.getPropByRes() != null && !updated.getPropByRes().isEmpty()) {\n \n-            List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n+            List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(\n                     new WorkflowResult<>(\n                             Pair.of((UserPatch) updated.getResult(), Boolean.TRUE),\n                             updated.getPropByRes(),"},{"sha":"6994a47f63eba14d1ded14dbb6a4e29f04df8134","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -23,10 +23,10 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n \n public interface PropagationManager {\n@@ -41,7 +41,7 @@ public interface PropagationManager {\n      * @param noPropResourceKeys external resources performing not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getCreateTasks(\n+    List<PropagationTaskTO> getCreateTasks(\n             AnyTypeKind kind,\n             String key,\n             PropagationByResource propByRes,\n@@ -59,7 +59,7 @@ List<PropagationTask> getCreateTasks(\n      * @param noPropResourceKeys external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserCreateTasks(\n+    List<PropagationTaskTO> getUserCreateTasks(\n             String key,\n             String password,\n             Boolean enable,\n@@ -79,7 +79,7 @@ List<PropagationTask> getUserCreateTasks(\n      * @param noPropResourceKeys external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUpdateTasks(\n+    List<PropagationTaskTO> getUpdateTasks(\n             AnyTypeKind kind,\n             String key,\n             boolean changePwd,\n@@ -96,7 +96,7 @@ List<PropagationTask> getUpdateTasks(\n      * @param noPropResourceKeys external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserUpdateTasks(\n+    List<PropagationTaskTO> getUserUpdateTasks(\n             WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n             boolean changePwd,\n             Collection<String> noPropResourceKeys);\n@@ -108,7 +108,7 @@ List<PropagationTask> getUserUpdateTasks(\n      * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult);\n+    List<PropagationTaskTO> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult);\n \n     /**\n      * Create the delete tasks for the any object from each resource associated, unless in {@code noPropResourceKeys}.\n@@ -119,7 +119,7 @@ List<PropagationTask> getUserUpdateTasks(\n      * @param noPropResourceKeys external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getDeleteTasks(\n+    List<PropagationTaskTO> getDeleteTasks(\n             AnyTypeKind kind,\n             String key,\n             PropagationByResource propByRes,\n@@ -133,7 +133,7 @@ List<PropagationTask> getDeleteTasks(\n      * @param noPropResourceKeys external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> createTasks(\n+    List<PropagationTaskTO> createTasks(\n             Realm realm,\n             PropagationByResource propByRes,\n             Collection<String> noPropResourceKeys);"},{"sha":"a27f02a5b5facc5656816544cdb1d6c82f7cc3f5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationReporter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -21,8 +21,8 @@\n import java.util.Collection;\n import java.util.List;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n /**\n@@ -36,7 +36,7 @@ public interface PropagationReporter {\n      * @param failingResource failing resource name\n      * @param tasks propagation tasks performed before failure\n      */\n-    void onPriorityResourceFailure(String failingResource, Collection<PropagationTask> tasks);\n+    void onPriorityResourceFailure(String failingResource, Collection<PropagationTaskTO> tasks);\n \n     /**\n      * Report propagation status after executions in case of success or non-blocking failure\n@@ -49,7 +49,7 @@ public interface PropagationReporter {\n      * @param afterObj retrieved connector object after operation execution\n      */\n     void onSuccessOrNonPriorityResourceFailures(\n-            PropagationTask propagationTask,\n+            PropagationTaskTO propagationTask,\n             PropagationTaskExecStatus execStatus,\n             String failureReason,\n             ConnectorObject beforeObj,"},{"sha":"d1e9c10ca1e7b15d20e64e5fc0ec6262872cfd4e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskCallable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskCallable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskCallable.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -19,14 +19,14 @@\n package org.apache.syncope.core.provisioning.api.propagation;\n \n import java.util.concurrent.Callable;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n \n public interface PropagationTaskCallable extends Callable<TaskExec> {\n \n     void setExecutor(PropagationTaskExecutor executor);\n \n-    void setTask(PropagationTask task);\n+    void setTaskTO(PropagationTaskTO taskTO);\n \n     void setReporter(PropagationReporter reporter);\n }"},{"sha":"af3bfc34879fc69a0042d08cc89e4f3f4fe6bfec","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.core.provisioning.api.propagation;\n \n import java.util.Collection;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n \n /**\n  * Execute propagation tasks.\n  *\n- * @see PropagationTask\n+ * @see PropagationTaskTO\n  */\n public interface PropagationTaskExecutor {\n \n@@ -47,7 +47,7 @@ public interface PropagationTaskExecutor {\n      * @param task to be executed\n      * @return the generated TaskExec\n      */\n-    TaskExec execute(PropagationTask task);\n+    TaskExec execute(PropagationTaskTO task);\n \n     /**\n      * Execute a collection of PropagationTask objects.\n@@ -58,5 +58,5 @@ public interface PropagationTaskExecutor {\n      * @param nullPriorityAsync asynchronously executes tasks related to resources with no priority\n      * @return reporter to report propagation execution status\n      */\n-    PropagationReporter execute(Collection<PropagationTask> tasks, boolean nullPriorityAsync);\n+    PropagationReporter execute(Collection<PropagationTaskTO> tasks, boolean nullPriorityAsync);\n }"},{"sha":"bffc136ed9d00d0c3ad7660a6f6493b01690ff9e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -27,11 +27,11 @@\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n@@ -75,7 +75,7 @@ public Pair<String, List<PropagationStatus>> create(\n \n         WorkflowResult<String> created = awfAdapter.create(anyObjectTO);\n \n-        List<PropagationTask> tasks = propagationManager.getCreateTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getCreateTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 created.getResult(),\n                 created.getPropByRes(),\n@@ -100,7 +100,7 @@ public Pair<AnyObjectPatch, List<PropagationStatus>> update(\n \n         WorkflowResult<AnyObjectPatch> updated = awfAdapter.update(anyObjectPatch);\n \n-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 updated.getResult().getKey(),\n                 false,\n@@ -131,7 +131,7 @@ public List<PropagationStatus> delete(\n         // information could only be available after awfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 key,\n                 propByRes,\n@@ -164,7 +164,7 @@ public List<PropagationStatus> provision(\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 key,\n                 false,\n@@ -184,7 +184,7 @@ public List<PropagationStatus> deprovision(\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.DELETE, resources);\n \n-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 key,\n                 propByRes,"},{"sha":"ebf13765efea5e1d33278d93934cebfa27c7aa0b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -33,10 +33,10 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -73,7 +73,7 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager\n     public Pair<String, List<PropagationStatus>> create(final GroupTO groupTO, final boolean nullPriorityAsync) {\n         WorkflowResult<String> created = gwfAdapter.create(groupTO);\n \n-        List<PropagationTask> tasks = propagationManager.getCreateTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getCreateTasks(\n                 AnyTypeKind.GROUP,\n                 created.getResult(),\n                 created.getPropByRes(),\n@@ -100,7 +100,7 @@ public Pair<String, List<PropagationStatus>> create(\n             groupOwnerMap.put(created.getResult(), groupOwner.get().getValues().iterator().next());\n         }\n \n-        List<PropagationTask> tasks = propagationManager.getCreateTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getCreateTasks(\n                 AnyTypeKind.GROUP,\n                 created.getResult(),\n                 created.getPropByRes(),\n@@ -125,7 +125,7 @@ public Pair<GroupPatch, List<PropagationStatus>> update(\n \n         WorkflowResult<GroupPatch> updated = gwfAdapter.update(groupPatch);\n \n-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.GROUP,\n                 updated.getResult().getKey(),\n                 false,\n@@ -148,7 +148,7 @@ public List<PropagationStatus> delete(final String key, final boolean nullPriori\n     public List<PropagationStatus> delete(\n             final String key, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n-        List<PropagationTask> tasks = new ArrayList<>();\n+        List<PropagationTaskTO> tasks = new ArrayList<>();\n \n         // Generate propagation tasks for deleting users and any objects from group resources, \n         // if they are on those resources only because of the reason being deleted (see SYNCOPE-357)\n@@ -195,7 +195,7 @@ public List<PropagationStatus> provision(\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.GROUP,\n                 key,\n                 false,\n@@ -215,7 +215,7 @@ public List<PropagationStatus> deprovision(\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.DELETE, resources);\n \n-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(\n                 AnyTypeKind.GROUP,\n                 key,\n                 propByRes,"},{"sha":"e507bbdcd95ba13b388c863147d681a1fdae52c9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PatchOperation;\n@@ -41,7 +42,6 @@\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -99,7 +99,7 @@ public Pair<String, List<PropagationStatus>> create(\n         WorkflowResult<Pair<String, Boolean>> created =\n                 uwfAdapter.create(userTO, disablePwdPolicyCheck, enabled, storePassword);\n \n-        List<PropagationTask> tasks = propagationManager.getUserCreateTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getUserCreateTasks(\n                 created.getResult().getLeft(),\n                 userTO.getPassword(),\n                 created.getResult().getRight(),\n@@ -115,7 +115,7 @@ public Pair<String, List<PropagationStatus>> create(\n     public Pair<UserPatch, List<PropagationStatus>> update(final UserPatch userPatch, final boolean nullPriorityAsync) {\n         WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.update(userPatch);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n+        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(updated);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n         return Pair.of(updated.getResult().getLeft(), propagationReporter.getStatuses());\n@@ -173,7 +173,7 @@ public Pair<UserPatch, List<PropagationStatus>> update(\n             }\n         }\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(\n                 updated, updated.getResult().getLeft().getPassword() != null, excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n@@ -198,7 +198,7 @@ public List<PropagationStatus> delete(\n         // information could only be available after uwfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(\n                 AnyTypeKind.USER,\n                 key,\n                 propByRes,\n@@ -263,7 +263,7 @@ protected List<PropagationStatus> propagateStatus(\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());\n-        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.USER,\n                 statusPatch.getKey(),\n                 false,\n@@ -285,10 +285,9 @@ public void internalSuspend(final String key) {\n             UserPatch userPatch = new UserPatch();\n             userPatch.setKey(updated.getLeft().getResult());\n \n-            List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                    new WorkflowResult<>(\n-                            Pair.of(userPatch, Boolean.FALSE),\n-                            updated.getLeft().getPropByRes(), updated.getLeft().getPerformedTasks()));\n+            List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(new WorkflowResult<>(\n+                    Pair.of(userPatch, Boolean.FALSE),\n+                    updated.getLeft().getPropByRes(), updated.getLeft().getPerformedTasks()));\n             taskExecutor.execute(tasks, false);\n         }\n     }\n@@ -321,7 +320,7 @@ public List<PropagationStatus> provision(\n         WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<>(\n                 ImmutablePair.of(userPatch, (Boolean) null), propByRes, \"update\");\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n+        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();\n@@ -334,7 +333,7 @@ public List<PropagationStatus> deprovision(\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.DELETE, resources);\n \n-        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(\n                 AnyTypeKind.USER,\n                 key,\n                 propByRes,\n@@ -355,7 +354,7 @@ public void requestPasswordReset(final String key) {\n     public void confirmPasswordReset(final String key, final String token, final String password) {\n         WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.confirmPasswordReset(key, token, password);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n+        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(updated);\n \n         taskExecutor.execute(tasks, false);\n     }"},{"sha":"b22d175019e786362d0512b9d6b5aaf6a3cd255b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":23,"deletions":9,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.java.propagation;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n@@ -27,6 +28,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n@@ -63,6 +65,7 @@\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n@@ -154,7 +157,7 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     protected VirAttrCache virAttrCache;\n \n     @Override\n-    public TaskExec execute(final PropagationTask task) {\n+    public TaskExec execute(final PropagationTaskTO task) {\n         return execute(task, null);\n     }\n \n@@ -331,7 +334,22 @@ protected Uid delete(\n         return result;\n     }\n \n-    protected TaskExec execute(final PropagationTask task, final PropagationReporter reporter) {\n+    protected TaskExec execute(final PropagationTaskTO taskTO, final PropagationReporter reporter) {\n+        PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n+        task.setResource(resourceDAO.find(taskTO.getResource()));\n+        task.setObjectClassName(taskTO.getObjectClassName());\n+        task.setAnyTypeKind(taskTO.getAnyTypeKind());\n+        task.setAnyType(taskTO.getAnyType());\n+        task.setEntityKey(taskTO.getEntityKey());\n+        task.setOperation(taskTO.getOperation());\n+        task.setConnObjectKey(taskTO.getConnObjectKey());\n+        task.setOldConnObjectKey(taskTO.getOldConnObjectKey());\n+        Set<Attribute> attributes = new HashSet<>();\n+        if (StringUtils.isNotBlank(taskTO.getAttributes())) {\n+            attributes.addAll(Arrays.asList(POJOHelper.deserialize(taskTO.getAttributes(), Attribute[].class)));\n+        }\n+        task.setAttributes(attributes);\n+\n         List<PropagationActions> actions = getPropagationActions(task.getResource());\n \n         String resource = task.getResource().getKey();\n@@ -459,17 +477,14 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n                 execution.setTask(task);\n                 task.add(execution);\n \n-                // ensure that the resource instance is refreshed, as it might have been read from another thread\n-                task.setResource(resourceDAO.find(task.getResource().getKey()));\n-\n                 taskDAO.save(task);\n                 // needed to generate a value for the execution key\n                 taskDAO.flush();\n             }\n \n             if (reporter != null) {\n                 reporter.onSuccessOrNonPriorityResourceFailures(\n-                        task,\n+                        taskTO,\n                         PropagationTaskExecStatus.valueOf(execution.getStatus()),\n                         failureReason,\n                         beforeObj,\n@@ -490,7 +505,6 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n \n         if (notificationsAvailable || auditRequested) {\n             ExecTO execTO = taskDataBinder.getExecTO(execution);\n-            PropagationTaskTO taskTO = taskDataBinder.getTaskTO(task, taskUtilsFactory.getInstance(task), false);\n             notificationManager.createTasks(AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, resource,\n                     operation,\n                     result,\n@@ -509,10 +523,10 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n     }\n \n     protected abstract void doExecute(\n-            Collection<PropagationTask> tasks, PropagationReporter reporter, boolean nullPriorityAsync);\n+            Collection<PropagationTaskTO> tasks, PropagationReporter reporter, boolean nullPriorityAsync);\n \n     @Override\n-    public PropagationReporter execute(final Collection<PropagationTask> tasks, final boolean nullPriorityAsync) {\n+    public PropagationReporter execute(final Collection<PropagationTaskTO> tasks, final boolean nullPriorityAsync) {\n         PropagationReporter reporter = new DefaultPropagationReporter();\n         try {\n             doExecute(tasks, reporter, nullPriorityAsync);"},{"sha":"2932147bb614efa163cbc16ff198232ac5ae92bd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -24,6 +24,7 @@\n import java.util.List;\n import java.util.Optional;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -46,14 +47,14 @@ protected boolean add(final PropagationStatus status) {\n \n     @Override\n     public void onSuccessOrNonPriorityResourceFailures(\n-            final PropagationTask propagationTask,\n+            final PropagationTaskTO taskTO,\n             final PropagationTaskExecStatus executionStatus,\n             final String failureReason,\n             final ConnectorObject beforeObj,\n             final ConnectorObject afterObj) {\n \n         PropagationStatus status = new PropagationStatus();\n-        status.setResource(propagationTask.getResource().getKey());\n+        status.setResource(taskTO.getResource());\n         status.setStatus(executionStatus);\n         status.setFailureReason(failureReason);\n \n@@ -69,15 +70,15 @@ public void onSuccessOrNonPriorityResourceFailures(\n     }\n \n     @Override\n-    public void onPriorityResourceFailure(final String failingResource, final Collection<PropagationTask> tasks) {\n+    public void onPriorityResourceFailure(final String failingResource, final Collection<PropagationTaskTO> tasks) {\n         LOG.debug(\"Propagation error: {} priority resource failed to propagate\", failingResource);\n \n-        Optional<PropagationTask> propagationTask = tasks.stream().\n-                filter(task -> task.getResource().getKey().equals(failingResource)).findFirst();\n+        Optional<PropagationTaskTO> propagationTask = tasks.stream().\n+                filter(task -> task.getResource().equals(failingResource)).findFirst();\n \n         if (propagationTask.isPresent()) {\n             PropagationStatus status = new PropagationStatus();\n-            status.setResource(propagationTask.get().getResource().getKey());\n+            status.setResource(propagationTask.get().getResource());\n             status.setStatus(PropagationTaskExecStatus.FAILURE);\n             status.setFailureReason(\n                     \"Propagation error: \" + failingResource + \" priority resource failed to propagate.\");"},{"sha":"e714a5f86b6dc317dd3d9614c00f0d966192ae74","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationTaskCallable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationTaskCallable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationTaskCallable.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.core.provisioning.java.propagation;\n \n import java.util.Collection;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskCallable;\n@@ -48,7 +48,7 @@ public class DefaultPropagationTaskCallable implements PropagationTaskCallable {\n \n     protected AbstractPropagationTaskExecutor executor;\n \n-    protected PropagationTask task;\n+    protected PropagationTaskTO taskTO;\n \n     protected PropagationReporter reporter;\n \n@@ -67,8 +67,8 @@ public void setExecutor(final PropagationTaskExecutor executor) {\n     }\n \n     @Override\n-    public void setTask(final PropagationTask task) {\n-        this.task = task;\n+    public void setTaskTO(final PropagationTaskTO taskTO) {\n+        this.taskTO = taskTO;\n     }\n \n     @Override\n@@ -84,11 +84,11 @@ public TaskExec call() throws Exception {\n         auth.setDetails(new SyncopeAuthenticationDetails(domain));\n         SecurityContextHolder.getContext().setAuthentication(auth);\n \n-        LOG.debug(\"Execution started for {}\", task);\n+        LOG.debug(\"Execution started for {}\", taskTO);\n \n-        TaskExec execution = executor.execute(task, reporter);\n+        TaskExec execution = executor.execute(taskTO, reporter);\n \n-        LOG.debug(\"Execution completed for {}, {}\", task, execution);\n+        LOG.debug(\"Execution completed for {}, {}\", taskTO, execution);\n \n         return execution;\n     }"},{"sha":"1b583e0c24d3a3439da7bb2e6825460df2451770","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":26,"deletions":16,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -31,11 +31,13 @@\n import java.util.concurrent.ExecutorCompletionService;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -59,35 +61,38 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec\n      * Creates new instances of {@link PropagationTaskCallable} for usage with\n      * {@link java.util.concurrent.CompletionService}.\n      *\n-     * @param task to be executed\n+     * @param taskTO to be executed\n      * @param reporter to report propagation execution status\n      * @return new {@link PropagationTaskCallable} instance for usage with\n      * {@link java.util.concurrent.CompletionService}\n      */\n     protected PropagationTaskCallable newPropagationTaskCallable(\n-            final PropagationTask task, final PropagationReporter reporter) {\n+            final PropagationTaskTO taskTO, final PropagationReporter reporter) {\n \n         PropagationTaskCallable callable = (PropagationTaskCallable) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultPropagationTaskCallable.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n         callable.setExecutor(this);\n-        callable.setTask(task);\n+        callable.setTaskTO(taskTO);\n         callable.setReporter(reporter);\n \n         return callable;\n     }\n \n     @Override\n     protected void doExecute(\n-            final Collection<PropagationTask> tasks,\n+            final Collection<PropagationTaskTO> tasks,\n             final PropagationReporter reporter,\n             final boolean nullPriorityAsync) {\n \n-        List<PropagationTask> prioritizedTasks = tasks.stream().\n-                filter(task -> task.getResource().getPropagationPriority() != null).collect(Collectors.toList());\n-        Collections.sort(prioritizedTasks, new PriorityComparator());\n+        Map<PropagationTaskTO, ExternalResource> taskToResource = tasks.stream().\n+                collect(Collectors.toMap(Function.identity(), task -> resourceDAO.find(task.getResource())));\n+\n+        List<PropagationTaskTO> prioritizedTasks = tasks.stream().\n+                filter(task -> taskToResource.get(task).getPropagationPriority() != null).collect(Collectors.toList());\n+        Collections.sort(prioritizedTasks, new PriorityComparator(taskToResource));\n         LOG.debug(\"Propagation tasks sorted by priority, for serial execution: {}\", prioritizedTasks);\n \n-        Collection<PropagationTask> concurrentTasks = tasks.stream().\n+        Collection<PropagationTaskTO> concurrentTasks = tasks.stream().\n                 filter(task -> !prioritizedTasks.contains(task)).collect(Collectors.toSet());\n         LOG.debug(\"Propagation tasks for concurrent execution: {}\", concurrentTasks);\n \n@@ -103,14 +108,13 @@ protected void doExecute(\n                 execStatus = PropagationTaskExecStatus.FAILURE;\n             }\n             if (execStatus != PropagationTaskExecStatus.SUCCESS) {\n-                throw new PropagationException(\n-                        task.getResource().getKey(), execution == null ? null : execution.getMessage());\n+                throw new PropagationException(task.getResource(), execution == null ? null : execution.getMessage());\n             }\n         });\n \n         // then process non-priority resources concurrently...\n         final CompletionService<TaskExec> completionService = new ExecutorCompletionService<>(executor);\n-        Map<PropagationTask, Future<TaskExec>> nullPriority = new HashMap<>(concurrentTasks.size());\n+        Map<PropagationTaskTO, Future<TaskExec>> nullPriority = new HashMap<>(concurrentTasks.size());\n         concurrentTasks.forEach(task -> {\n             try {\n                 nullPriority.put(\n@@ -155,14 +159,20 @@ protected void doExecute(\n     /**\n      * Compare propagation tasks according to related ExternalResource's priority.\n      */\n-    protected static class PriorityComparator implements Comparator<PropagationTask>, Serializable {\n+    protected static class PriorityComparator implements Comparator<PropagationTaskTO>, Serializable {\n \n         private static final long serialVersionUID = -1969355670784448878L;\n \n+        private final Map<PropagationTaskTO, ExternalResource> taskToResource;\n+\n+        public PriorityComparator(final Map<PropagationTaskTO, ExternalResource> taskToResource) {\n+            this.taskToResource = taskToResource;\n+        }\n+\n         @Override\n-        public int compare(final PropagationTask task1, final PropagationTask task2) {\n-            int prop1 = task1.getResource().getPropagationPriority();\n-            int prop2 = task2.getResource().getPropagationPriority();\n+        public int compare(final PropagationTaskTO task1, final PropagationTaskTO task2) {\n+            int prop1 = taskToResource.get(task1).getPropagationPriority();\n+            int prop2 = taskToResource.get(task2).getPropagationPriority();\n \n             return prop1 > prop2\n                     ? 1"},{"sha":"f9986cba7a5cd0f881001d2ccd880f13660607ff","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":23,"deletions":22,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -31,14 +31,14 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n@@ -56,6 +56,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -132,7 +133,7 @@ protected AnyDAO<? extends Any<?>> dao(final AnyTypeKind kind) {\n     }\n \n     @Override\n-    public List<PropagationTask> getCreateTasks(\n+    public List<PropagationTaskTO> getCreateTasks(\n             final AnyTypeKind kind,\n             final String key,\n             final PropagationByResource propByRes,\n@@ -143,7 +144,7 @@ public List<PropagationTask> getCreateTasks(\n     }\n \n     @Override\n-    public List<PropagationTask> getUserCreateTasks(\n+    public List<PropagationTaskTO> getUserCreateTasks(\n             final String key,\n             final String password,\n             final Boolean enable,\n@@ -154,7 +155,7 @@ public List<PropagationTask> getUserCreateTasks(\n         return getCreateTasks(userDAO.authFind(key), password, enable, propByRes, vAttrs, noPropResourceKeys);\n     }\n \n-    protected List<PropagationTask> getCreateTasks(\n+    protected List<PropagationTaskTO> getCreateTasks(\n             final Any<?> any,\n             final String password,\n             final Boolean enable,\n@@ -163,7 +164,7 @@ protected List<PropagationTask> getCreateTasks(\n             final Collection<String> noPropResourceKeys) {\n \n         if (propByRes == null || propByRes.isEmpty()) {\n-            return Collections.<PropagationTask>emptyList();\n+            return Collections.<PropagationTaskTO>emptyList();\n         }\n \n         if (noPropResourceKeys != null) {\n@@ -174,7 +175,7 @@ protected List<PropagationTask> getCreateTasks(\n     }\n \n     @Override\n-    public List<PropagationTask> getUpdateTasks(\n+    public List<PropagationTaskTO> getUpdateTasks(\n             final AnyTypeKind kind,\n             final String key,\n             final boolean changePwd,\n@@ -187,7 +188,7 @@ public List<PropagationTask> getUpdateTasks(\n     }\n \n     @Override\n-    public List<PropagationTask> getUserUpdateTasks(\n+    public List<PropagationTaskTO> getUserUpdateTasks(\n             final WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n             final boolean changePwd,\n             final Collection<String> noPropResourceKeys) {\n@@ -205,11 +206,11 @@ public List<PropagationTask> getUserUpdateTasks(\n     }\n \n     @Override\n-    public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserPatch, Boolean>> wfResult) {\n+    public List<PropagationTaskTO> getUserUpdateTasks(final WorkflowResult<Pair<UserPatch, Boolean>> wfResult) {\n         UserPatch userPatch = wfResult.getResult().getKey();\n \n         // Propagate password update only to requested resources\n-        List<PropagationTask> tasks = new ArrayList<>();\n+        List<PropagationTaskTO> tasks = new ArrayList<>();\n         if (userPatch.getPassword() == null) {\n             // a. no specific password propagation request: generate propagation tasks for any resource associated\n             tasks = getUserUpdateTasks(wfResult, false, null);\n@@ -247,7 +248,7 @@ public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserPa\n         return tasks;\n     }\n \n-    protected List<PropagationTask> getUpdateTasks(\n+    protected List<PropagationTaskTO> getUpdateTasks(\n             final Any<?> any,\n             final String password,\n             final boolean changePwd,\n@@ -271,7 +272,7 @@ protected List<PropagationTask> getUpdateTasks(\n     }\n \n     @Override\n-    public List<PropagationTask> getDeleteTasks(\n+    public List<PropagationTaskTO> getDeleteTasks(\n             final AnyTypeKind kind,\n             final String key,\n             final PropagationByResource propByRes,\n@@ -294,7 +295,7 @@ public List<PropagationTask> getDeleteTasks(\n         return getDeleteTasks(any, localPropByRes, noPropResourceKeys);\n     }\n \n-    protected List<PropagationTask> getDeleteTasks(\n+    protected List<PropagationTaskTO> getDeleteTasks(\n             final Any<?> any,\n             final PropagationByResource propByRes,\n             final Collection<String> noPropResourceKeys) {\n@@ -314,7 +315,7 @@ protected List<PropagationTask> getDeleteTasks(\n      * @param vAttrs virtual attributes to be set\n      * @return list of propagation tasks created\n      */\n-    protected List<PropagationTask> createTasks(final Any<?> any,\n+    protected List<PropagationTaskTO> createTasks(final Any<?> any,\n             final String password, final boolean changePwd,\n             final Boolean enable, final boolean deleteOnResource, final PropagationByResource propByRes,\n             final Collection<AttrTO> vAttrs) {\n@@ -358,7 +359,7 @@ protected List<PropagationTask> createTasks(final Any<?> any,\n         }\n         LOG.debug(\"With virtual attributes {}:\\n{}\\n{}\", any, propByRes, vAttrMap);\n \n-        List<PropagationTask> tasks = new ArrayList<>();\n+        List<PropagationTaskTO> tasks = new ArrayList<>();\n \n         propByRes.asMap().entrySet().forEach(entry -> {\n             ExternalResource resource = resourceDAO.find(entry.getKey());\n@@ -376,8 +377,8 @@ protected List<PropagationTask> createTasks(final Any<?> any,\n                 LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n                         any.getType(), resource);\n             } else {\n-                PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n-                task.setResource(resource);\n+                PropagationTaskTO task = new PropagationTaskTO();\n+                task.setResource(resource.getKey());\n                 task.setObjectClassName(provision.getObjectClass().getObjectClassValue());\n                 task.setAnyTypeKind(any.getType().getKind());\n                 task.setAnyType(any.getType().getKey());\n@@ -418,7 +419,7 @@ protected List<PropagationTask> createTasks(final Any<?> any,\n                     preparedAttrs.getValue().addAll(vAttrMap.get(resource.getKey()));\n                 }\n \n-                task.setAttributes(preparedAttrs.getValue());\n+                task.setAttributes(POJOHelper.serialize(preparedAttrs.getValue()));\n \n                 tasks.add(task);\n \n@@ -430,7 +431,7 @@ protected List<PropagationTask> createTasks(final Any<?> any,\n     }\n \n     @Override\n-    public List<PropagationTask> createTasks(\n+    public List<PropagationTaskTO> createTasks(\n             final Realm realm,\n             final PropagationByResource propByRes,\n             final Collection<String> noPropResourceKeys) {\n@@ -445,7 +446,7 @@ public List<PropagationTask> createTasks(\n         propByRes.purge();\n         LOG.debug(\"After purge {}:\\n{}\", realm, propByRes);\n \n-        List<PropagationTask> tasks = new ArrayList<>();\n+        List<PropagationTaskTO> tasks = new ArrayList<>();\n \n         propByRes.asMap().entrySet().forEach(entry -> {\n             ExternalResource resource = resourceDAO.find(entry.getKey());\n@@ -459,16 +460,16 @@ public List<PropagationTask> createTasks(\n                 LOG.warn(\"Requesting propagation for {} but no ConnObjectLink provided for {}\",\n                         realm.getFullPath(), resource);\n             } else {\n-                PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n-                task.setResource(resource);\n+                PropagationTaskTO task = new PropagationTaskTO();\n+                task.setResource(resource.getKey());\n                 task.setObjectClassName(orgUnit.getObjectClass().getObjectClassValue());\n                 task.setEntityKey(realm.getKey());\n                 task.setOperation(entry.getValue());\n                 task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n \n                 Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrs(realm, orgUnit);\n                 task.setConnObjectKey(preparedAttrs.getKey());\n-                task.setAttributes(preparedAttrs.getValue());\n+                task.setAttributes(POJOHelper.serialize(preparedAttrs.getValue()));\n \n                 tasks.add(task);\n "},{"sha":"c274dc6898a435a926b69d83d155bfca517369f8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -24,6 +24,7 @@\n import java.util.Set;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n@@ -40,7 +41,6 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n@@ -236,7 +236,7 @@ private void create(\n             for (String resource : realm.getResourceKeys()) {\n                 propByRes.add(ResourceOperation.CREATE, resource);\n             }\n-            List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+            List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);\n             taskExecutor.execute(tasks, false);\n \n             RealmTO actual = binder.getRealmTO(realm, true);\n@@ -319,7 +319,7 @@ private List<ProvisioningReport> update(final SyncDelta delta, final List<String\n                         realm = realmDAO.save(realm);\n                         RealmTO updated = binder.getRealmTO(realm, true);\n \n-                        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+                        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);\n                         taskExecutor.execute(tasks, false);\n \n                         for (PullActions action : profile.getActions()) {\n@@ -607,7 +607,7 @@ private List<ProvisioningReport> delete(final SyncDelta delta, final List<String\n                         for (String resource : realm.getResourceKeys()) {\n                             propByRes.add(ResourceOperation.DELETE, resource);\n                         }\n-                        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+                        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);\n                         taskExecutor.execute(tasks, false);\n \n                         realmDAO.delete(realm);"},{"sha":"3d35c937c03ae471813d0fd9a4fd6b79e358eee1","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -24,8 +24,8 @@\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n \n public class ConfirmPasswordResetProducer extends AbstractProducer {\n@@ -41,7 +41,7 @@ public void process(final Exchange exchange) throws Exception {\n             WorkflowResult<Pair<UserPatch, Boolean>> updated =\n                     (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n \n-            List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(updated);\n+            List<PropagationTaskTO> tasks = getPropagationManager().getUserUpdateTasks(updated);\n \n             getPropagationTaskExecutor().execute(tasks, false);\n         }"},{"sha":"7b49da626552208feaa4da481880590409f98273","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -31,9 +31,9 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n \n@@ -55,7 +55,7 @@ public void process(final Exchange exchange) throws Exception {\n                 WorkflowResult<Pair<String, Boolean>> created =\n                         (WorkflowResult<Pair<String, Boolean>>) exchange.getIn().getBody();\n \n-                List<PropagationTask> tasks = getPropagationManager().getUserCreateTasks(\n+                List<PropagationTaskTO> tasks = getPropagationManager().getUserCreateTasks(\n                         created.getResult().getKey(),\n                         ((UserTO) actual).getPassword(),\n                         created.getResult().getValue(),\n@@ -77,7 +77,7 @@ public void process(final Exchange exchange) throws Exception {\n                         groupOwnerMap.put(created.getResult(), groupOwner.get().getValues().iterator().next());\n                     }\n \n-                    List<PropagationTask> tasks = getPropagationManager().getCreateTasks(\n+                    List<PropagationTaskTO> tasks = getPropagationManager().getCreateTasks(\n                             AnyTypeKind.GROUP,\n                             created.getResult(),\n                             created.getPropByRes(),\n@@ -87,7 +87,7 @@ public void process(final Exchange exchange) throws Exception {\n \n                     exchange.getOut().setBody(Pair.of(created.getResult(), null));\n                 } else {\n-                    List<PropagationTask> tasks = getPropagationManager().getCreateTasks(\n+                    List<PropagationTaskTO> tasks = getPropagationManager().getCreateTasks(\n                             actual instanceof AnyObjectTO ? AnyTypeKind.ANY_OBJECT : AnyTypeKind.GROUP,\n                             created.getResult(),\n                             created.getPropByRes(),"},{"sha":"2f22b1b27f9f21830ca8deecbd62de80e8cb0461","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -25,10 +25,10 @@\n \n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -58,7 +58,7 @@ public void process(final Exchange exchange) throws Exception {\n         Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         if (null != getAnyTypeKind()) {\n-            List<PropagationTask> tasks;\n+            List<PropagationTaskTO> tasks;\n             PropagationReporter propagationReporter;\n             switch (getAnyTypeKind()) {\n                 case USER:"},{"sha":"5521782981be3f0ddd627baed75c200a0248bbce","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -23,12 +23,12 @@\n \n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n \n@@ -62,7 +62,7 @@ public void process(final Exchange exchange) throws Exception {\n \n         if (null != getAnyTypeKind()) {\n             PropagationByResource propByRes = new PropagationByResource();\n-            List<PropagationTask> tasks;\n+            List<PropagationTaskTO> tasks;\n             PropagationReporter propagationReporter;\n             switch (getAnyTypeKind()) {\n                 case USER:"},{"sha":"fe533c16a3efbbabafc272dfcd2c8087748ca2fd","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -28,10 +28,10 @@\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -70,7 +70,7 @@ public void process(final Exchange exchange) throws Exception {\n             WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<>(\n                     ImmutablePair.of(userPatch, (Boolean) null), propByRes, \"update\");\n \n-            List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(wfResult, changePwd, null);\n+            List<PropagationTaskTO> tasks = getPropagationManager().getUserUpdateTasks(wfResult, changePwd, null);\n             PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n             exchange.getOut().setBody(propagationReporter.getStatuses());\n@@ -83,7 +83,7 @@ public void process(final Exchange exchange) throws Exception {\n                 anyTypeKind = getAnyTypeKind();\n             }\n \n-            List<PropagationTask> tasks = getPropagationManager().getUpdateTasks(\n+            List<PropagationTaskTO> tasks = getPropagationManager().getUpdateTasks(\n                     anyTypeKind,\n                     key,\n                     false,"},{"sha":"96983a45217619fd3cd1a463908217065da7457e","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -27,11 +27,11 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -92,7 +92,7 @@ public void process(final Exchange exchange) throws Exception {\n \n             PropagationByResource propByRes = new PropagationByResource();\n             propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());\n-            List<PropagationTask> tasks = getPropagationManager().getUpdateTasks(\n+            List<PropagationTaskTO> tasks = getPropagationManager().getUpdateTasks(\n                     AnyTypeKind.USER,\n                     statusPatch.getKey(),\n                     false,"},{"sha":"27feae811955ed38ed035eaf06ca112f84d87afb","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -24,8 +24,8 @@\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n \n public class SuspendProducer extends AbstractProducer {\n@@ -46,7 +46,7 @@ public void process(final Exchange exchange) throws Exception {\n                 UserPatch userPatch = new UserPatch();\n                 userPatch.setKey(updated.getKey().getResult());\n \n-                List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(\n+                List<PropagationTaskTO> tasks = getPropagationManager().getUserUpdateTasks(\n                         new WorkflowResult<>(\n                                 Pair.of(userPatch, Boolean.FALSE),\n                                 updated.getKey().getPropByRes(), updated.getKey().getPerformedTasks()));"},{"sha":"f89182b171de284ec6db3bcfee5d8bb107402166","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f0018fe490d54397643edaa52a8d524472fca344/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java?ref=f0018fe490d54397643edaa52a8d524472fca344","patch":"@@ -27,8 +27,8 @@\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n \n@@ -50,7 +50,7 @@ public void process(final Exchange exchange) throws Exception {\n                 WorkflowResult<Pair<UserPatch, Boolean>> updated =\n                         (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n \n-                List<PropagationTask> tasks;\n+                List<PropagationTaskTO> tasks;\n                 if (isPull()) {\n                     boolean passwordNotNull = updated.getResult().getKey().getPassword() != null;\n                     tasks = getPropagationManager().getUserUpdateTasks(updated, passwordNotNull, excludedResources);\n@@ -66,7 +66,7 @@ public void process(final Exchange exchange) throws Exception {\n                 WorkflowResult<? extends AnyPatch> updated =\n                         (WorkflowResult<? extends AnyPatch>) exchange.getIn().getBody();\n \n-                List<PropagationTask> tasks = getPropagationManager().getUpdateTasks(\n+                List<PropagationTaskTO> tasks = getPropagationManager().getUpdateTasks(\n                         actual instanceof AnyObjectPatch ? AnyTypeKind.ANY_OBJECT : AnyTypeKind.GROUP,\n                         updated.getResult().getKey(),\n                         false,"}]}