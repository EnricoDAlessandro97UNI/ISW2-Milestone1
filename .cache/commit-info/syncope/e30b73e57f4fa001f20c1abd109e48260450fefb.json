{"sha":"e30b73e57f4fa001f20c1abd109e48260450fefb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUzMGI3M2U1N2Y0ZmEwMDFmMjBjMWFiZDEwOWU0ODI2MDQ1MGZlZmI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-07-02T08:00:10Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-07-02T08:05:35Z"},"message":"Clearing up interactions across Remediation, Audit and Delegation","tree":{"sha":"36fa9ef4f91f83102b2f37318472293671e6ae55","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/36fa9ef4f91f83102b2f37318472293671e6ae55"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e30b73e57f4fa001f20c1abd109e48260450fefb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e30b73e57f4fa001f20c1abd109e48260450fefb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e30b73e57f4fa001f20c1abd109e48260450fefb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e30b73e57f4fa001f20c1abd109e48260450fefb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1edd5c6b197110323eb87d6446ffd0e69add7883","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1edd5c6b197110323eb87d6446ffd0e69add7883","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1edd5c6b197110323eb87d6446ffd0e69add7883"}],"stats":{"total":121,"additions":50,"deletions":71},"files":[{"sha":"ffeab22a9b77e9ebfef087d0df71660b3e383ed2","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/RemediationLogic.java","status":"modified","additions":23,"deletions":53,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e30b73e57f4fa001f20c1abd109e48260450fefb/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e30b73e57f4fa001f20c1abd109e48260450fefb/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java?ref=e30b73e57f4fa001f20c1abd109e48260450fefb","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.reflect.Method;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -46,7 +47,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class RemediationLogic extends AbstractTransactionalLogic<RemediationTO> {\n+public class RemediationLogic extends AbstractLogic<RemediationTO> {\n \n     @Autowired\n     private UserLogic userLogic;\n@@ -81,111 +82,80 @@ public Pair<Integer, List<RemediationTO>> list(\n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_READ + \"')\")\n     @Transactional(readOnly = true)\n     public RemediationTO read(final String key) {\n-        Remediation remediation = remediationDAO.find(key);\n-        if (remediation == null) {\n-            LOG.error(\"Could not find remediation '\" + key + '\\'');\n-\n-            throw new NotFoundException(key);\n-        }\n+        Remediation remediation = Optional.ofNullable(remediationDAO.find(key)).\n+                orElseThrow(() -> new NotFoundException(key));\n \n         return binder.getRemediationTO(remediation);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_DELETE + \"')\")\n+    @Transactional\n     public void delete(final String key) {\n-        Remediation remediation = remediationDAO.find(key);\n-        if (remediation == null) {\n-            LOG.error(\"Could not find remediation '\" + key + '\\'');\n+        Optional.ofNullable(remediationDAO.find(key)).\n+                orElseThrow(() -> new NotFoundException(key));\n \n-            throw new NotFoundException(key);\n-        }\n-\n-        remediationDAO.delete(remediation);\n+        remediationDAO.delete(key);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_REMEDY + \"')\")\n     public ProvisioningResult<?> remedy(final String key, final AnyCR anyCR, final boolean nullPriorityAsync) {\n-        Remediation remediation = remediationDAO.find(key);\n-        if (remediation == null) {\n-            LOG.error(\"Could not find remediation '\" + key + '\\'');\n-\n-            throw new NotFoundException(key);\n-        }\n-\n         ProvisioningResult<?> result;\n-        switch (remediation.getAnyType().getKind()) {\n-            case USER:\n-            default:\n+        switch (read(key).getAnyType()) {\n+            case \"USER\":\n                 result = userLogic.create((UserCR) anyCR, nullPriorityAsync);\n                 break;\n \n-            case GROUP:\n+            case \"GROUP\":\n                 result = groupLogic.create((GroupCR) anyCR, nullPriorityAsync);\n                 break;\n \n-            case ANY_OBJECT:\n+            default:\n                 result = anyObjectLogic.create((AnyObjectCR) anyCR, nullPriorityAsync);\n         }\n \n-        remediationDAO.delete(remediation);\n+        remediationDAO.delete(key);\n \n         return result;\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_REMEDY + \"')\")\n     public ProvisioningResult<?> remedy(final String key, final AnyUR anyUR, final boolean nullPriorityAsync) {\n-        Remediation remediation = remediationDAO.find(key);\n-        if (remediation == null) {\n-            LOG.error(\"Could not find remediation '\" + key + '\\'');\n-\n-            throw new NotFoundException(key);\n-        }\n-\n         ProvisioningResult<?> result;\n-        switch (remediation.getAnyType().getKind()) {\n-            case USER:\n-            default:\n+        switch (read(key).getAnyType()) {\n+            case \"USER\":\n                 result = userLogic.update((UserUR) anyUR, nullPriorityAsync);\n                 break;\n \n-            case GROUP:\n+            case \"GROUP\":\n                 result = groupLogic.update((GroupUR) anyUR, nullPriorityAsync);\n                 break;\n \n-            case ANY_OBJECT:\n+            default:\n                 result = anyObjectLogic.update((AnyObjectUR) anyUR, nullPriorityAsync);\n         }\n \n-        remediationDAO.delete(remediation);\n+        remediationDAO.delete(key);\n \n         return result;\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_REMEDY + \"')\")\n     public ProvisioningResult<?> remedy(final String key, final String anyKey, final boolean nullPriorityAsync) {\n-        Remediation remediation = remediationDAO.find(key);\n-        if (remediation == null) {\n-            LOG.error(\"Could not find remediation '\" + key + '\\'');\n-\n-            throw new NotFoundException(key);\n-        }\n-\n         ProvisioningResult<?> result;\n-        switch (remediation.getAnyType().getKind()) {\n-            case USER:\n-            default:\n+        switch (read(key).getAnyType()) {\n+            case \"USER\":\n                 result = userLogic.delete(anyKey, nullPriorityAsync);\n                 break;\n \n-            case GROUP:\n+            case \"GROUP\":\n                 result = groupLogic.delete(anyKey, nullPriorityAsync);\n                 break;\n \n-            case ANY_OBJECT:\n+            default:\n                 result = anyObjectLogic.delete(anyKey, nullPriorityAsync);\n         }\n \n-        remediationDAO.delete(remediation);\n+        remediationDAO.delete(key);\n \n         return result;\n     }"},{"sha":"675f4d3becbb9daf9ce346a48b94a8355a5ea9c9","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LogicInvocationHandler.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e30b73e57f4fa001f20c1abd109e48260450fefb/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e30b73e57f4fa001f20c1abd109e48260450fefb/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java?ref=e30b73e57f4fa001f20c1abd109e48260450fefb","patch":"@@ -19,14 +19,11 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.HashMap;\n-import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n-import org.apache.syncope.core.provisioning.java.job.AfterHandlingJob;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.aspectj.lang.ProceedingJoinPoint;\n import org.aspectj.lang.annotation.Around;\n@@ -35,7 +32,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n \n @Aspect\n public class LogicInvocationHandler {\n@@ -48,9 +44,6 @@ public class LogicInvocationHandler {\n     @Autowired\n     private AuditManager auditManager;\n \n-    @Autowired\n-    private SchedulerFactoryBean scheduler;\n-\n     @Around(\"execution(* org.apache.syncope.core.logic.AbstractLogic+.*(..))\")\n     public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n         Class<?> clazz = joinPoint.getTarget().getClass();\n@@ -98,8 +91,7 @@ public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n             throw t;\n         } finally {\n             if (notificationsAvailable || auditRequested) {\n-                Map<String, Object> jobMap = new HashMap<>();\n-                jobMap.put(AfterHandlingEvent.JOBMAP_KEY, new AfterHandlingEvent(\n+                AfterHandlingEvent afterHandlingEvent = new AfterHandlingEvent(\n                         AuthContextUtils.getWho(),\n                         AuditElements.EventCategoryType.LOGIC,\n                         category,\n@@ -108,8 +100,16 @@ public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n                         condition,\n                         before,\n                         output,\n-                        input));\n-                AfterHandlingJob.schedule(scheduler, jobMap);\n+                        input);\n+                AuthContextUtils.callAsAdmin(AuthContextUtils.getDomain(), () -> {\n+                    try {\n+                        notificationManager.createTasks(afterHandlingEvent);\n+                        auditManager.audit(afterHandlingEvent);\n+                    } catch (Throwable t) {\n+                        LOG.error(\"While managing Audit and Notifications\", t);\n+                    }\n+                    return null;\n+                });\n             }\n         }\n     }"},{"sha":"f8aefa169b318523f14c854e2df75af552bd07c1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARemediationDAO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e30b73e57f4fa001f20c1abd109e48260450fefb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e30b73e57f4fa001f20c1abd109e48260450fefb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java?ref=e30b73e57f4fa001f20c1abd109e48260450fefb","patch":"@@ -29,11 +29,13 @@\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.jpa.entity.JPARemediation;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ReflectionUtils;\n \n @Repository\n public class JPARemediationDAO extends AbstractDAO<Remediation> implements RemediationDAO {\n \n+    @Transactional(readOnly = true)\n     @Override\n     public Remediation find(final String key) {\n         return entityManager().find(JPARemediation.class, key);\n@@ -122,6 +124,7 @@ public void delete(final Remediation remediation) {\n         entityManager().remove(remediation);\n     }\n \n+    @Transactional\n     @Override\n     public void delete(final String key) {\n         Remediation remediation = find(key);\n@@ -131,5 +134,4 @@ public void delete(final String key) {\n \n         delete(remediation);\n     }\n-\n }"},{"sha":"5f8ceccc632ab7e6d67c11a7aadafc191aaf3391","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e30b73e57f4fa001f20c1abd109e48260450fefb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e30b73e57f4fa001f20c1abd109e48260450fefb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java?ref=e30b73e57f4fa001f20c1abd109e48260450fefb","patch":"@@ -31,6 +31,7 @@\n import org.quartz.JobDataMap;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n+import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.quartz.Trigger;\n import org.quartz.TriggerBuilder;\n@@ -53,18 +54,18 @@ public static void schedule(final SchedulerFactoryBean scheduler, final Map<Stri\n         @SuppressWarnings(\"unchecked\")\n         AfterHandlingJob jobInstance = (AfterHandlingJob) ApplicationContextProvider.getBeanFactory().\n                 createBean(AfterHandlingJob.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-        String jobName = AfterHandlingJob.class.getName() + SecureRandomUtils.generateRandomUUID();\n+        String jobName = AfterHandlingJob.class.getSimpleName() + SecureRandomUtils.generateRandomUUID();\n \n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n \n         ApplicationContextProvider.getBeanFactory().registerSingleton(jobName, jobInstance);\n \n         JobBuilder jobDetailBuilder = JobBuilder.newJob(AfterHandlingJob.class).\n-                withIdentity(jobName).\n+                withIdentity(jobName, Scheduler.DEFAULT_GROUP).\n                 usingJobData(new JobDataMap(jobMap));\n \n         TriggerBuilder<Trigger> triggerBuilder = TriggerBuilder.newTrigger().\n-                withIdentity(JobNamer.getTriggerName(jobName)).\n+                withIdentity(JobNamer.getTriggerName(jobName), Scheduler.DEFAULT_GROUP).\n                 startNow();\n \n         try {\n@@ -93,6 +94,8 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n                     });\n         } catch (RuntimeException e) {\n             throw new JobExecutionException(\"While handling notification / audit events\", e);\n+        } finally {\n+            ApplicationContextProvider.getBeanFactory().destroySingleton(context.getJobDetail().getKey().getName());\n         }\n     }\n }"},{"sha":"49370bebbc48b753e1a1772287a18fd54900d437","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e30b73e57f4fa001f20c1abd109e48260450fefb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e30b73e57f4fa001f20c1abd109e48260450fefb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java?ref=e30b73e57f4fa001f20c1abd109e48260450fefb","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n@@ -121,6 +122,8 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n         } catch (RuntimeException e) {\n             LOG.error(\"While setting memberships\", e);\n             throw new JobExecutionException(\"While executing memberships\", e);\n+        } finally {\n+            ApplicationContextProvider.getBeanFactory().destroySingleton(context.getJobDetail().getKey().getName());\n         }\n     }\n }"},{"sha":"cdf4483c45b051d89141234134b34db47df78a8a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SchedulingPullActions.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e30b73e57f4fa001f20c1abd109e48260450fefb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e30b73e57f4fa001f20c1abd109e48260450fefb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java?ref=e30b73e57f4fa001f20c1abd109e48260450fefb","patch":"@@ -29,6 +29,7 @@\n import org.quartz.JobBuilder;\n import org.quartz.JobDataMap;\n import org.quartz.JobExecutionException;\n+import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.quartz.Trigger;\n import org.quartz.TriggerBuilder;\n@@ -52,18 +53,18 @@ protected <T extends Job> void schedule(final Class<T> reference, final Map<Stri\n         @SuppressWarnings(\"unchecked\")\n         T jobInstance = (T) ApplicationContextProvider.getBeanFactory().\n                 createBean(reference, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-        String jobName = getClass().getName() + SecureRandomUtils.generateRandomUUID();\n+        String jobName = getClass().getSimpleName() + SecureRandomUtils.generateRandomUUID();\n \n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n \n         ApplicationContextProvider.getBeanFactory().registerSingleton(jobName, jobInstance);\n \n         JobBuilder jobDetailBuilder = JobBuilder.newJob(reference).\n-                withIdentity(jobName).\n+                withIdentity(jobName, Scheduler.DEFAULT_GROUP).\n                 usingJobData(new JobDataMap(jobMap));\n \n         TriggerBuilder<Trigger> triggerBuilder = TriggerBuilder.newTrigger().\n-                withIdentity(JobNamer.getTriggerName(jobName)).\n+                withIdentity(JobNamer.getTriggerName(jobName), Scheduler.DEFAULT_GROUP).\n                 startNow();\n \n         try {"}]}