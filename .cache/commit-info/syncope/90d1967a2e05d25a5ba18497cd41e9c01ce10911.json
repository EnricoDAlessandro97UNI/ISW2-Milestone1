{"sha":"90d1967a2e05d25a5ba18497cd41e9c01ce10911","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkwZDE5NjdhMmUwNWQyNWE1YmExODQ5N2NkNDFlOWMwMWNlMTA5MTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-12T08:24:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-12T08:24:45Z"},"message":"[SYNCOPE-250] Patch applied: thanks Christian!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1420564 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e62cfa7f2bf473c40e2373253171c41739317e20","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e62cfa7f2bf473c40e2373253171c41739317e20"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/90d1967a2e05d25a5ba18497cd41e9c01ce10911","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90d1967a2e05d25a5ba18497cd41e9c01ce10911","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/90d1967a2e05d25a5ba18497cd41e9c01ce10911","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90d1967a2e05d25a5ba18497cd41e9c01ce10911/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b050f05696c65705b95f59659403f107d379a0c3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b050f05696c65705b95f59659403f107d379a0c3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b050f05696c65705b95f59659403f107d379a0c3"}],"stats":{"total":108,"additions":32,"deletions":76},"files":[{"sha":"76d9328f15ebbfe319f414ab1957cd61b1fd948e","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":32,"deletions":76,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d1967a2e05d25a5ba18497cd41e9c01ce10911/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d1967a2e05d25a5ba18497cd41e9c01ce10911/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=90d1967a2e05d25a5ba18497cd41e9c01ce10911","patch":"@@ -55,7 +55,6 @@\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.quartz.SchedulerException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -155,59 +154,47 @@ public void setupSecurity() {\n     }\n \n     @Before\n-    public void setupSMTP() {\n-        try {\n-            SyncopeConf smtpHostConf = confDAO.find(\"smtp.host\");\n-            smtpHostConf.setValue(smtpHost);\n-            confDAO.save(smtpHostConf);\n-\n-            SyncopeConf smtpPortConf = confDAO.find(\"smtp.port\");\n-            smtpPortConf.setValue(Integer.toString(smtpPort));\n-            confDAO.save(smtpPortConf);\n-        } catch (Exception e) {\n-            LOG.error(\"Unexpected exception\", e);\n-            fail(\"Unexpected exception while setting SMTP host and port\");\n-        }\n-\n+    public void setupSMTP() throws Exception {\n+        SyncopeConf smtpHostConf = confDAO.find(\"smtp.host\");\n+        smtpHostConf.setValue(smtpHost);\n+        confDAO.save(smtpHostConf);\n+\n+        SyncopeConf smtpPortConf = confDAO.find(\"smtp.port\");\n+        smtpPortConf.setValue(Integer.toString(smtpPort));\n+        confDAO.save(smtpPortConf);\n         confDAO.flush();\n     }\n \n-    private boolean verifyMail(final String sender, final String subject) {\n+    private boolean verifyMail(final String sender, final String subject) throws Exception {\n         LOG.info(\"Waiting for notification to be sent...\");\n         try {\n             Thread.sleep(1000);\n         } catch (InterruptedException e) {\n         }\n \n         boolean found = false;\n-        try {\n-            Session session = Session.getDefaultInstance(System.getProperties());\n-            Store store = session.getStore(\"pop3\");\n-            store.connect(pop3Host, pop3Port, mailAddress, mailPassword);\n-\n-            Folder inbox = store.getFolder(\"INBOX\");\n-            assertNotNull(inbox);\n-            inbox.open(Folder.READ_WRITE);\n-\n-            Message[] messages = inbox.getMessages();\n-            for (int i = 0; i < messages.length; i++) {\n-                if (sender.equals(messages[i].getFrom()[0].toString()) && subject.equals(messages[i].getSubject())) {\n-                    found = true;\n-                    messages[i].setFlag(Flag.DELETED, true);\n-                }\n+        Session session = Session.getDefaultInstance(System.getProperties());\n+        Store store = session.getStore(\"pop3\");\n+        store.connect(pop3Host, pop3Port, mailAddress, mailPassword);\n+\n+        Folder inbox = store.getFolder(\"INBOX\");\n+        assertNotNull(inbox);\n+        inbox.open(Folder.READ_WRITE);\n+\n+        Message[] messages = inbox.getMessages();\n+        for (int i = 0; i < messages.length; i++) {\n+            if (sender.equals(messages[i].getFrom()[0].toString()) && subject.equals(messages[i].getSubject())) {\n+                found = true;\n+                messages[i].setFlag(Flag.DELETED, true);\n             }\n-            inbox.close(true);\n-            store.close();\n-        } catch (Exception e) {\n-            LOG.error(\"Unexpected exception\", e);\n-            fail(\"Unexpected exception while fetching e-mail\");\n         }\n-\n+        inbox.close(true);\n+        store.close();\n         return found;\n     }\n \n     @Test\n-    public void notifyByMail() {\n+    public void notifyByMail() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n         notification.addEvent(\"create\");\n@@ -242,20 +229,10 @@ public void notifyByMail() {\n         membershipTO.setRoleId(7);\n         userTO.addMembership(membershipTO);\n \n-        try {\n-            userController.create(new MockHttpServletResponse(), userTO);\n-        } catch (Exception e) {\n-            LOG.error(\"Unexpected exception\", e);\n-            fail(\"Unexpected exception while creating\");\n-        }\n+        userController.create(new MockHttpServletResponse(), userTO);\n \n         // 3. force Quartz job execution and verify e-mail\n-        try {\n-            notificationJob.execute(null);\n-        } catch (SchedulerException e) {\n-            LOG.error(\"Unexpected exception\", e);\n-            fail(\"Unexpected exception while triggering notification job\");\n-        }\n+        notificationJob.execute(null);\n         assertTrue(verifyMail(sender, subject));\n \n         // 4. get NotificationTask id\n@@ -268,17 +245,12 @@ public void notifyByMail() {\n         assertNotNull(taskId);\n \n         // 5. execute Notification task and verify e-mail\n-        try {\n-            taskController.execute(taskId, false);\n-        } catch (Exception e) {\n-            LOG.error(\"Unexpected exception\", e);\n-            fail(\"Unexpected exception while executing notification task\");\n-        }\n+        taskController.execute(taskId, false);\n         assertTrue(verifyMail(sender, subject));\n     }\n \n     @Test\n-    public void issueSYNCOPE192() {\n+    public void issueSYNCOPE192() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n         notification.addEvent(\"create\");\n@@ -314,20 +286,10 @@ public void issueSYNCOPE192() {\n         membershipTO.setRoleId(7);\n         userTO.addMembership(membershipTO);\n \n-        try {\n-            userController.create(new MockHttpServletResponse(), userTO);\n-        } catch (Exception e) {\n-            LOG.error(\"Unexpected exception\", e);\n-            fail(\"Unexpected exception while creating\");\n-        }\n+        userController.create(new MockHttpServletResponse(), userTO);\n \n         // 3. force Quartz job execution and verify e-mail\n-        try {\n-            notificationJob.execute(null);\n-        } catch (SchedulerException e) {\n-            LOG.error(\"Unexpected exception\", e);\n-            fail(\"Unexpected exception while triggering notification job\");\n-        }\n+        notificationJob.execute(null);\n         assertTrue(verifyMail(sender, subject));\n \n         // 4. get NotificationTask id\n@@ -340,13 +302,7 @@ public void issueSYNCOPE192() {\n         assertNotNull(taskId);\n \n         // 5. verify that last exec status was updated\n-        NotificationTaskTO task = null;\n-        try {\n-            task = (NotificationTaskTO) taskController.read(taskId);\n-        } catch (Exception e) {\n-            LOG.error(\"Unexpected exception\", e);\n-            fail(\"Unexpected exception while reading notification task\");\n-        }\n+        NotificationTaskTO task = (NotificationTaskTO) taskController.read(taskId);\n         assertNotNull(task);\n         assertTrue(task.getExecutions().isEmpty());\n         assertTrue(task.isExecuted());"}]}