{"sha":"aa6cf1057499970d1c3d5b6f737f660646f16c89","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFhNmNmMTA1NzQ5OTk3MGQxYzNkNWI2ZjczN2Y2NjA2NDZmMTZjODk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-07-25T08:51:09Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-07-25T08:51:09Z"},"message":"Some refinements and small bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247047 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c36a8ef29359512ae95d755354165e3e8533b3b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7c36a8ef29359512ae95d755354165e3e8533b3b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/aa6cf1057499970d1c3d5b6f737f660646f16c89","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aa6cf1057499970d1c3d5b6f737f660646f16c89","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aa6cf1057499970d1c3d5b6f737f660646f16c89","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aa6cf1057499970d1c3d5b6f737f660646f16c89/comments","author":null,"committer":null,"parents":[{"sha":"803ba44fa12c73c4d7e298bec196ddfd560754ac","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/803ba44fa12c73c4d7e298bec196ddfd560754ac","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/803ba44fa12c73c4d7e298bec196ddfd560754ac"}],"stats":{"total":173,"additions":159,"deletions":14},"files":[{"sha":"c0628bd41d792e59aab5ef6d67508f875202fa70","filename":"client/src/main/java/org/syncope/client/to/SchedTaskTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa6cf1057499970d1c3d5b6f737f660646f16c89/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa6cf1057499970d1c3d5b6f737f660646f16c89/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchedTaskTO.java?ref=aa6cf1057499970d1c3d5b6f737f660646f16c89","patch":"@@ -45,18 +45,18 @@ public void setJobClassName(String jobClassName) {\n     }\n \n     public Date getLastExec() {\n-        return lastExec;\n+        return new Date(lastExec.getTime());\n     }\n \n     public void setLastExec(Date lastExec) {\n-        this.lastExec = lastExec;\n+        this.lastExec = new Date(lastExec.getTime());\n     }\n \n     public Date getNextExec() {\n-        return nextExec;\n+        return new Date(nextExec.getTime());\n     }\n \n     public void setNextExec(Date nextExec) {\n-        this.nextExec = nextExec;\n+        this.nextExec = new Date(nextExec.getTime());\n     }\n }"},{"sha":"3d20cadac8ba3bfe88b43f14da92064d0013e5f9","filename":"client/src/main/java/org/syncope/types/EntityViolationType.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa6cf1057499970d1c3d5b6f737f660646f16c89/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa6cf1057499970d1c3d5b6f737f660646f16c89/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=aa6cf1057499970d1c3d5b6f737f660646f16c89","patch":"@@ -34,7 +34,9 @@ public enum EntityViolationType {\n     InvalidPropagationTask(\n     \"org.syncope.core.validation.propagationtask.invalid\"),\n     InvalidSchedTask(\n-    \"org.syncope.core.validation.schedtask.invalid\");\n+    \"org.syncope.core.validation.schedtask.invalid\"),\n+    InvalidSyncTask(\n+    \"org.syncope.core.validation.synctask.invalid\");\n \n     private String message;\n "},{"sha":"f3aa72c2779bfcb63a5b4ad9c12645ecefda6ac5","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa6cf1057499970d1c3d5b6f737f660646f16c89/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa6cf1057499970d1c3d5b6f737f660646f16c89/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=aa6cf1057499970d1c3d5b6f737f660646f16c89","patch":"@@ -22,11 +22,11 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.validation.entity.SchedTaskCheck;\n+import org.syncope.core.persistence.validation.entity.SyncTaskCheck;\n import org.syncope.core.scheduling.SyncJob;\n \n @Entity\n-@SchedTaskCheck\n+@SyncTaskCheck\n public class SyncTask extends SchedTask {\n \n     private static final long serialVersionUID = -4141057723006682562L;"},{"sha":"53b69942766c53fd18d2253dfbe5fb2ad911d4c8","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":27,"deletions":5,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa6cf1057499970d1c3d5b6f737f660646f16c89/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa6cf1057499970d1c3d5b6f737f660646f16c89/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=aa6cf1057499970d1c3d5b6f737f660646f16c89","patch":"@@ -18,6 +18,8 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.SchedTask;\n+import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.dao.TaskDAO;\n@@ -31,13 +33,33 @@ public <T extends Task> T find(final Long id) {\n         return (T) entityManager.find(Task.class, id);\n     }\n \n+    private <T extends Task> StringBuilder buildfindAllQuery(\n+            final Class<T> reference) {\n+\n+        StringBuilder queryString =\n+                new StringBuilder(\"SELECT e FROM \").append(reference.\n+                getSimpleName()).append(\" e \");\n+        if (SchedTask.class.equals(reference)) {\n+            queryString.append(\"WHERE e NOT IN (FROM \").\n+                    append(SyncTask.class.getName()).append(\") \");\n+        }\n+\n+        return queryString;\n+    }\n+\n     @Override\n     public <T extends Task> List<T> findAll(\n             final TargetResource resource, final Class<T> reference) {\n \n-        final Query query = entityManager.createQuery(\"SELECT e FROM \"\n-                + reference.getSimpleName() + \" e \"\n-                + \"WHERE e.resource=:resource\");\n+        StringBuilder queryString = buildfindAllQuery(reference);\n+        if (SchedTask.class.equals(reference)) {\n+                queryString.append(\"AND \");\n+        } else {\n+                queryString.append(\"WHERE \");            \n+        }\n+        queryString.append(\"e.resource=:resource\");\n+\n+        final Query query = entityManager.createQuery(queryString.toString());\n         query.setParameter(\"resource\", resource);\n \n         return query.getResultList();\n@@ -52,8 +74,8 @@ public <T extends Task> List<T> findAll(final Class<T> reference) {\n     public <T extends Task> List<T> findAll(final int page,\n             final int itemsPerPage, final Class<T> reference) {\n \n-        final Query query = entityManager.createQuery(\"SELECT e FROM \"\n-                + reference.getSimpleName() + \" e\");\n+        final Query query = entityManager.createQuery(\n+                buildfindAllQuery(reference).toString());\n \n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n "},{"sha":"d74974d5cac8e3cf4ed2306e58e0c1e6a4b9800c","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SyncTaskCheck.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa6cf1057499970d1c3d5b6f737f660646f16c89/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa6cf1057499970d1c3d5b6f737f660646f16c89/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskCheck.java?ref=aa6cf1057499970d1c3d5b6f737f660646f16c89","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = SyncTaskValidator.class)\n+@Documented\n+public @interface SyncTaskCheck {\n+\n+    String message() default \"{org.syncope.core.validation.synctask}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"9b826848c8bb53a2561e421981e4307ac059fa03","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SyncTaskValidator.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa6cf1057499970d1c3d5b6f737f660646f16c89/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa6cf1057499970d1c3d5b6f737f660646f16c89/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java?ref=aa6cf1057499970d1c3d5b6f737f660646f16c89","patch":"@@ -0,0 +1,65 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.syncope.core.persistence.beans.SyncTask;\n+import org.syncope.types.EntityViolationType;\n+\n+public class SyncTaskValidator extends AbstractValidator\n+        implements ConstraintValidator<SyncTaskCheck, SyncTask> {\n+\n+    private final SchedTaskValidator schedV;\n+\n+    public SyncTaskValidator() {\n+        super();\n+\n+        schedV = new SchedTaskValidator();\n+    }\n+\n+    @Override\n+    public void initialize(final SyncTaskCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(final SyncTask object,\n+            final ConstraintValidatorContext context) {\n+\n+        boolean isValid;\n+\n+        if (object == null) {\n+            isValid = true;\n+        } else {\n+            isValid = schedV.isValid(object, context);\n+\n+            if (isValid) {\n+                isValid = object.getResource() != null;\n+\n+                if (!isValid) {\n+                    LOG.error(\"Resource is null\");\n+\n+                    context.disableDefaultConstraintViolation();\n+                    context.buildConstraintViolationWithTemplate(\n+                            EntityViolationType.InvalidSyncTask.toString()).\n+                            addNode(object + \".resource is NULL\").\n+                            addConstraintViolation();\n+                }\n+            }\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"556071eef4227e034fedbb42d0b9f2b2cdf16a72","filename":"core/src/test/java/org/syncope/core/persistence/dao/TaskTest.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa6cf1057499970d1c3d5b6f737f660646f16c89/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa6cf1057499970d1c3d5b6f737f660646f16c89/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java?ref=aa6cf1057499970d1c3d5b6f737f660646f16c89","patch":"@@ -27,6 +27,7 @@\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.SchedTask;\n import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.types.PropagationMode;\n@@ -43,8 +44,14 @@ public class TaskTest extends AbstractTest {\n \n     @Test\n     public final void findAll() {\n-        List<PropagationTask> list = taskDAO.findAll(PropagationTask.class);\n-        assertEquals(3, list.size());\n+        List<PropagationTask> plist = taskDAO.findAll(PropagationTask.class);\n+        assertEquals(3, plist.size());\n+\n+        List<SchedTask> sclist = taskDAO.findAll(SchedTask.class);\n+        assertEquals(1, sclist.size());\n+\n+        List<SyncTask> sylist = taskDAO.findAll(SyncTask.class);\n+        assertEquals(1, sylist.size());\n     }\n \n     @Test\n@@ -81,6 +88,7 @@ public final void saveSyncTask() {\n         task.addDefaultResource(resource);\n         task.setCronExpression(\"BLA BLA\");\n \n+        // this save() fails because of an invalid Cron Expression\n         InvalidEntityException exception = null;\n         try {\n             taskDAO.save(task);\n@@ -90,6 +98,17 @@ public final void saveSyncTask() {\n         assertNotNull(exception);\n \n         task.setCronExpression(null);\n+        // this save() fails because a SyncTask requires a target resource\n+        exception = null;\n+        try {\n+            taskDAO.save(task);\n+        } catch (InvalidEntityException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+\n+        // this save() finally works\n+        task.setResource(resource);\n         task = taskDAO.save(task);\n         assertNotNull(task);\n "}]}