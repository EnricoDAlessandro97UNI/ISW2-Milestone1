{"sha":"9589199482b8823bb630bf901014f816f179475e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk1ODkxOTk0ODJiODgyM2JiNjMwYmY5MDEwMTRmODE2ZjE3OTQ3NWU=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T13:08:49Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T13:08:49Z"},"message":"Fixed SYNCOPE-581","tree":{"sha":"413b77edba3e097521963ab1234e0abc3fcf0323","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/413b77edba3e097521963ab1234e0abc3fcf0323"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9589199482b8823bb630bf901014f816f179475e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9589199482b8823bb630bf901014f816f179475e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9589199482b8823bb630bf901014f816f179475e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9589199482b8823bb630bf901014f816f179475e/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"4a28d6c835e8f47658e5a8ef6d171249750f992e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4a28d6c835e8f47658e5a8ef6d171249750f992e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4a28d6c835e8f47658e5a8ef6d171249750f992e"}],"stats":{"total":424,"additions":262,"deletions":162},"files":[{"sha":"b374e33c89a74baef9a58b47fd751e871727b450","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/AbstractCommand.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9589199482b8823bb630bf901014f816f179475e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9589199482b8823bb630bf901014f816f179475e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java?ref=9589199482b8823bb630bf901014f816f179475e","patch":"@@ -18,15 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n-import com.beust.jcommander.Parameter;\n+import org.apache.syncope.client.cli.Input;\n \n public abstract class AbstractCommand {\n \n-    @Parameter(names = {\"-h\", \"--help\"})\n-    protected boolean help = false;\n-\n-    @Parameter(names = {\"-l\", \"--list\"})\n-    protected boolean list = false;\n-\n-    protected abstract void execute();\n+    public abstract void execute(final Input input);\n }"},{"sha":"282e2d1ef94e14574ceb4ee830a685241a629db1","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ConfigurationCommand.java","status":"modified","additions":259,"deletions":153,"changes":412,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9589199482b8823bb630bf901014f816f179475e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9589199482b8823bb630bf901014f816f179475e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java?ref=9589199482b8823bb630bf901014f816f179475e","patch":"@@ -18,192 +18,298 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n-import com.beust.jcommander.DynamicParameter;\n-import com.beust.jcommander.Parameter;\n-import com.beust.jcommander.Parameters;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.SequenceInputStream;\n-import java.util.HashMap;\n-import java.util.Map;\n import javax.xml.parsers.ParserConfigurationException;\n import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.TransformerException;\n+import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.messages.UsageMessages;\n import org.apache.syncope.client.cli.util.XMLUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConfTO;\n import org.apache.syncope.common.rest.api.service.ConfigurationService;\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.xml.sax.SAXException;\n \n-@Parameters(\n-        commandNames = \"config\",\n-        optionPrefixes = \"-\",\n-        separators = \"=\",\n-        commandDescription = \"Apache Syncope configuration service\")\n+@Command(name = \"configuration\")\n public class ConfigurationCommand extends AbstractCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ConfigurationCommand.class);\n \n     private static final String EXPORT_FILE_NAME = \"/content.xml\";\n \n-    private final String helpMessage = \"Usage: config [options]\\n\"\n+    private static final String HELP_MESSAGE = \"Usage: config [options]\\n\"\n             + \"  Options:\\n\"\n-            + \"    -h, --help \\n\"\n-            + \"    -l, --list \\n\"\n-            + \"    -r, --read \\n\"\n-            + \"       Syntax: -r={CONF-NAME} \\n\"\n-            + \"    -u, --update \\n\"\n-            + \"       Syntax: {CONF-NAME}={CONF-VALUE} \\n\"\n-            + \"    -c, --create \\n\"\n-            + \"       Syntax: {CONF-NAME}={CONF-VALUE} \\n\"\n-            + \"    -d, --delete \\n\"\n-            + \"       Syntax: -d={CONF-NAME}\"\n-            + \"    -v, --validators \\n\"\n-            + \"    -mt, --mail-templates \\n\"\n-            + \"    -e, --export \\n\"\n-            + \"       Syntax: -e={WHERE-DIR} \\n\";\n-\n-    @Parameter(names = { \"-r\", \"--read\" })\n-    private String confNameToRead;\n-\n-    @DynamicParameter(names = { \"-u\", \"--update\" })\n-    private final Map<String, String> updateConf = new HashMap<>();\n-\n-    @DynamicParameter(names = { \"-c\", \"--create\" })\n-    private final Map<String, String> createConf = new HashMap<>();\n-\n-    @Parameter(names = { \"-d\", \"--delete\" })\n-    private String confNameToDelete;\n-\n-    @Parameter(names = { \"-v\", \"--validators\" })\n-    private boolean validators = false;\n-\n-    @Parameter(names = { \"-mt\", \"--mail-templates\" })\n-    private boolean mailTemplates = false;\n-\n-    @Parameter(names = { \"-e\", \"--export\" })\n-    private String export;\n+            + \"    --help \\n\"\n+            + \"    --list \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {CONF-NAME} {CONF-NAME} [...] \\n\"\n+            + \"    --update \\n\"\n+            + \"       Syntax: --update {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\\n\"\n+            + \"    --create \\n\"\n+            + \"       Syntax: --create {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {CONF-NAME} {CONF-NAME} [...]\\n\"\n+            + \"    --export \\n\"\n+            + \"       Syntax: --export {WHERE-DIR}\";\n \n     @Override\n-    public void execute() {\n-        final SyncopeService syncopeService = SyncopeServices.get(SyncopeService.class);\n-        final ConfigurationService configurationService = SyncopeServices.get(ConfigurationService.class);\n-\n+    public void execute(final Input input) {\n         LOG.debug(\"Logger service successfully created\");\n+        LOG.debug(\"Option: {}\", input.getOption());\n+        LOG.debug(\"Parameters:\");\n+        for (final String parameter : input.getParameters()) {\n+            LOG.debug(\"   > \" + parameter);\n+        }\n+\n+        final String[] parameters = input.getParameters();\n \n-        if (help) {\n-            LOG.debug(\"- configuration help command\");\n-            System.out.println(helpMessage);\n-        } else if (list) {\n-            LOG.debug(\"- configuration list command\");\n-            try {\n-                final ConfTO confTO = configurationService.list();\n-                for (final AttrTO attrTO : confTO.getPlainAttrMap().values()) {\n-                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n-                            + \" - readonly: \" + attrTO.isReadonly());\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        final ConfigurationService configurationService = SyncopeServices.get(ConfigurationService.class);\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST:\n+                try {\n+                    final ConfTO confTO = configurationService.list();\n+                    System.out.println(\"\\n - Configuration key: \" + confTO.getKey());\n+                    System.out.println(\"\");\n+                    System.out.println(\"Plain attributes\");\n+                    for (final AttrTO attrTO : confTO.getPlainAttrMap().values()) {\n+                        System.out.println(\" - Conf key: \" + attrTO.getSchema());\n+                        System.out.println(\"    - value(s): \" + attrTO.getValues());\n+                        System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n+                    }\n+                    System.out.println(\"\");\n+                    System.out.println(\"Derived attributes\");\n+                    for (final AttrTO attrTO : confTO.getDerAttrMap().values()) {\n+                        System.out.println(\" - Conf key: \" + attrTO.getSchema());\n+                        System.out.println(\"    - value(s): \" + attrTO.getValues());\n+                        System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n+                    }\n+                    System.out.println(\"\");\n+                    System.out.println(\"Virtual attributes\");\n+                    for (final AttrTO attrTO : confTO.getVirAttrMap().values()) {\n+                        System.out.println(\" - Conf key: \" + attrTO.getSchema());\n+                        System.out.println(\"    - value(s): \" + attrTO.getValues());\n+                        System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n+                    }\n+                    System.out.println(\"\");\n+                } catch (final Exception ex) {\n+                    UsageMessages.printErrorMessage(ex.getMessage());\n+                    break;\n                 }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (StringUtils.isNotBlank(confNameToRead)) {\n-            LOG.debug(\"- configuration read {} command\", confNameToRead);\n-            try {\n-                final AttrTO attrTO = configurationService.get(confNameToRead);\n-                System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n-                        + \" - readonly: \" + attrTO.isReadonly());\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (!updateConf.isEmpty()) {\n-            LOG.debug(\"- configuration update command with params {}\", updateConf);\n-            try {\n-                for (final Map.Entry<String, String> entrySet : updateConf.entrySet()) {\n-                    final AttrTO attrTO = configurationService.get(entrySet.getKey());\n-                    attrTO.getValues().clear();\n-                    attrTO.getValues().add(entrySet.getValue());\n-                    configurationService.set(attrTO);\n-                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n-                            + \" - readonly: \" + attrTO.isReadonly());\n+                break;\n+            case READ:\n+                final String readErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"configuration --read {CONF-NAME} {CONF-NAME} [...]\");\n+                if (parameters.length >= 1) {\n+                    AttrTO attrTO;\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            attrTO = configurationService.get(parameter);\n+                            System.out.println(\"\\n - Conf key: \" + attrTO.getSchema());\n+                            System.out.println(\"    - value(s): \" + attrTO.getValues());\n+                            System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n+                            System.out.println(\"\");\n+                        } catch (final SyncopeClientException | WebServiceException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\"Configuration \" + parameters[0] + \" doesn't exist!\");\n+                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                                UsageMessages.printErrorMessage(\"You cannot delete configuration \" + parameters[0]);\n+                            } else {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                            }\n+                            break;\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(readErrorMessage);\n                 }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (!createConf.isEmpty()) {\n-            LOG.debug(\"- configuration create command with params {}\", createConf);\n-            try {\n-                for (final Map.Entry<String, String> entrySet : createConf.entrySet()) {\n-                    final AttrTO attrTO = new AttrTO();\n-                    attrTO.setSchema(entrySet.getKey());\n-                    attrTO.getValues().add(entrySet.getValue());\n-                    configurationService.set(attrTO);\n-                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" created with value(s) \" + attrTO.getValues()\n-                            + \" - readonly: \" + attrTO.isReadonly());\n+                break;\n+            case UPDATE:\n+                final String updateErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"configuration --update {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\");\n+                if (parameters.length >= 1) {\n+                    Input.PairParameter pairParameter = null;\n+                    AttrTO attrTO;\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            pairParameter = input.toPairParameter(parameter);\n+                            attrTO = configurationService.get(pairParameter.getKey());\n+                            attrTO.getValues().clear();\n+                            attrTO.getValues().add(pairParameter.getValue());\n+                            configurationService.set(attrTO);\n+                            System.out.println(\"\\n - Conf key \" + attrTO.getSchema() + \" updated. New value is:\");\n+                            System.out.println(\"    - value(s): \" + attrTO.getValues());\n+                            System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n+                            System.out.println(\"\");\n+                        } catch (final IllegalArgumentException ex) {\n+                            UsageMessages.printErrorMessage(ex.getMessage(), updateErrorMessage);\n+                            break;\n+                        } catch (final SyncopeClientException | WebServiceException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\n+                                        \"Configuration \" + pairParameter.getKey() + \" doesn't exist!\");\n+                            } else if (ex.getMessage().startsWith(\"InvalidValues\")) {\n+                                UsageMessages.printErrorMessage(\n+                                        pairParameter.getValue() + \" is not a valid value for \"\n+                                        + pairParameter.getKey());\n+                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                                UsageMessages.printErrorMessage(\"You cannot delete configuration \" + parameters[0]);\n+                            } else {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                            }\n+                            break;\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(updateErrorMessage);\n                 }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (StringUtils.isNotBlank(confNameToDelete)) {\n-            try {\n-                LOG.debug(\"- configuration delete {} command\", confNameToDelete);\n-                configurationService.delete(confNameToDelete);\n-                System.out.println(\" - Conf \" + confNameToDelete + \" deleted!\");\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (validators) {\n-            LOG.debug(\"- configuration validators command\");\n-            try {\n-                System.out.println(\"Conf validator class: \");\n-                for (final String validator : syncopeService.info().getValidators()) {\n-                    System.out.println(\"  *** \" + validator);\n+                break;\n+            case CREATE:\n+                final String createErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"configuration --create {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\");\n+                if (parameters.length >= 1) {\n+                    Input.PairParameter pairParameter = null;\n+                    AttrTO attrTO;\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            pairParameter = input.toPairParameter(parameter);\n+                            attrTO = new AttrTO();\n+                            attrTO.setSchema(pairParameter.getKey());\n+                            attrTO.getValues().add(pairParameter.getValue());\n+                            configurationService.set(attrTO);\n+                            System.out.println(\"\\n - Conf key \" + attrTO.getSchema() + \" created. Value is:\");\n+                            System.out.println(\"    - value(s): \" + attrTO.getValues());\n+                            System.out.println(\"    - readonly: \" + attrTO.isReadonly());\n+                            System.out.println(\"\");\n+                        } catch (final IllegalArgumentException ex) {\n+                            UsageMessages.printErrorMessage(ex.getMessage(), createErrorMessage);\n+                            break;\n+                        } catch (final SyncopeClientException | WebServiceException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\n+                                        \"Configuration schema \"\n+                                        + pairParameter.getKey() + \" doesn't exist! Create it before.\");\n+                            } else {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                            }\n+                            break;\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(createErrorMessage);\n                 }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (mailTemplates) {\n-            LOG.debug(\"- configuration mailTemplates command\");\n-            try {\n-                System.out.println(\"Conf mail template for:\");\n-                for (final String mailTemplate : syncopeService.info().getMailTemplates()) {\n-                    System.out.println(\"  *** \" + mailTemplate);\n+                break;\n+            case DELETE:\n+                final String deleteErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"configuration --delete {CONF-NAME} {CONF-NAME} [...]\");\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            configurationService.delete(parameter);\n+                            System.out.println(\"\\n - Conf \" + parameter + \" deleted!\\n\");\n+                        } catch (final SyncopeClientException | WebServiceException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\"Configuration \" + parameter + \" doesn't exist!\");\n+                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                                UsageMessages.printErrorMessage(\"You cannot delete configuration\", parameter);\n+                            } else {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                            }\n+                            break;\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(deleteErrorMessage);\n                 }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (StringUtils.isNotBlank(export)) {\n-            LOG.debug(\"- configuration export command, directory where xml will be export: {}\", export);\n-\n-            try {\n-                XMLUtils.createXMLFile((SequenceInputStream) configurationService.export().getEntity(), export\n-                        + EXPORT_FILE_NAME);\n-                System.out.println(\" - \" + export + EXPORT_FILE_NAME + \" successfully created\");\n-            } catch (final IOException ex) {\n-                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n-                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-            } catch (final ParserConfigurationException ex) {\n-                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n-                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-            } catch (final SAXException ex) {\n-                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n-                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-            } catch (final TransformerConfigurationException ex) {\n-                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n-                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-            } catch (final TransformerException ex) {\n-                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n-                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-            } catch (final SyncopeClientException ex) {\n-                LOG.error(\"Error calling configuration service\", ex);\n-                System.out.println(\" - Error calling configuration service \" + ex.getMessage());\n-            }\n-        } else {\n-            System.out.println(helpMessage);\n+                break;\n+            case EXPORT:\n+                final String exportErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"configuration --export {WHERE-DIR}\");\n+                if (parameters.length == 1) {\n+                    try {\n+                        XMLUtils.createXMLFile((SequenceInputStream) configurationService.export().getEntity(),\n+                                parameters[0] + EXPORT_FILE_NAME);\n+                        System.out.println(\" - \" + parameters[0] + EXPORT_FILE_NAME + \" successfully created\");\n+                    } catch (final IOException ex) {\n+                        UsageMessages.printErrorMessage(ex.getMessage());\n+                    } catch (ParserConfigurationException | SAXException | TransformerConfigurationException ex) {\n+                        LOG.error(\"Error creating content.xml file in {} directory\", parameters[0], ex);\n+                        UsageMessages.printErrorMessage(\n+                                \"Error creating \" + parameters[0] + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+                        break;\n+                    } catch (final TransformerException ex) {\n+                        LOG.error(\"Error creating content.xml file in {} directory\", parameters[0], ex);\n+                        if (ex.getCause() instanceof FileNotFoundException) {\n+                            UsageMessages.printErrorMessage(\"Permission denied on \" + parameters[0]);\n+                        } else {\n+                            UsageMessages.printErrorMessage(\n+                                    \"Error creating \" + parameters[0] + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+                        }\n+                        break;\n+                    } catch (final SyncopeClientException ex) {\n+                        LOG.error(\"Error calling configuration service\", ex);\n+                        UsageMessages.printErrorMessage(\"Error calling configuration service \" + ex.getMessage());\n+                        break;\n+                    }\n+                } else {\n+                    System.out.println(exportErrorMessage);\n+                }\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                System.out.println(input.getOption() + \" is not a valid option.\");\n+                System.out.println(\"\");\n+                System.out.println(HELP_MESSAGE);\n+                break;\n         }\n     }\n \n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        READ(\"--read\"),\n+        UPDATE(\"--update\"),\n+        CREATE(\"--create\"),\n+        DELETE(\"--delete\"),\n+        EXPORT(\"--export\");\n+\n+        private final String optionName;\n+\n+        private Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+    }\n }"},{"sha":"04428970536c894d290263bf5534808e1ecac070","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/UsageMessages.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9589199482b8823bb630bf901014f816f179475e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FUsageMessages.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9589199482b8823bb630bf901014f816f179475e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FUsageMessages.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FUsageMessages.java?ref=9589199482b8823bb630bf901014f816f179475e","patch":"@@ -22,7 +22,7 @@ public final class UsageMessages {\n \n     private static final String OPTION_COMMAND_MESSAGE_TEMPLATE = \"\\n - Usage: %s\\n\";\n \n-    public static final String optionCommandMessage(final String message) {\n+    public static String optionCommandMessage(final String message) {\n         return String.format(OPTION_COMMAND_MESSAGE_TEMPLATE, message);\n     }\n "}]}