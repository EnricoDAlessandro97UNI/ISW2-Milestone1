{"sha":"b764f567b5900b707431467ccbc8c18b1cac5a36","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI3NjRmNTY3YjU5MDBiNzA3NDMxNDY3Y2NiYzhjMThiMWNhYzVhMzY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-09-15T12:54:25Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-09-15T12:57:31Z"},"message":"[SYNCOPE-1591] Introducing support for fetch statements, used by archetype to populate Flowable tables for test users","tree":{"sha":"2c021dd64f3760ac8473b635ebed1bd74eea33e8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2c021dd64f3760ac8473b635ebed1bd74eea33e8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b764f567b5900b707431467ccbc8c18b1cac5a36","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b764f567b5900b707431467ccbc8c18b1cac5a36","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b764f567b5900b707431467ccbc8c18b1cac5a36","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b764f567b5900b707431467ccbc8c18b1cac5a36/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8e26009e9f61eb61188b29f0c3072bf984e28df1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8e26009e9f61eb61188b29f0c3072bf984e28df1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8e26009e9f61eb61188b29f0c3072bf984e28df1"}],"stats":{"total":169,"additions":89,"deletions":80},"files":[{"sha":"70aa21bcbb888451e7c63d2dde5c8943245f2fb1","filename":"archetype/src/main/resources/archetype-resources/core/src/test/resources/addFlowableToContent.xsl","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b764f567b5900b707431467ccbc8c18b1cac5a36/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Ftest%2Fresources%2FaddFlowableToContent.xsl","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b764f567b5900b707431467ccbc8c18b1cac5a36/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Ftest%2Fresources%2FaddFlowableToContent.xsl","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Ftest%2Fresources%2FaddFlowableToContent.xsl?ref=b764f567b5900b707431467ccbc8c18b1cac5a36","patch":"@@ -23,28 +23,30 @@\n   <xsl:template match=\"/dataset\">\n     <dataset>\n       <xsl:apply-templates/>\n-      \n-      <ACT_RU_EXECUTION ID_=\"4\" REV_=\"2\" PROC_INST_ID_=\"4\" BUSINESS_KEY_=\"userWorkflow:1417acbe-cbf6-4277-9372-e75e04f97000\" PROC_DEF_ID_=\"userWorkflow:1:4\" ACT_ID_=\"active\" IS_ACTIVE_=\"1\" IS_CONCURRENT_=\"0\" IS_SCOPE_=\"1\" IS_EVENT_SCOPE_=\"0\" SUSPENSION_STATE_=\"1\"/>\n-      <ACT_RU_TASK ID_=\"5\" REV_=\"2\" EXECUTION_ID_=\"4\" PROC_INST_ID_=\"4\" PROC_DEF_ID_=\"userWorkflow:1:4\" NAME_=\"Active\" TASK_DEF_KEY_=\"active\" PRIORITY_=\"50\" CREATE_TIME_=\"2013-02-25T17:19:03+0100\"/>\n \n-      <ACT_RU_EXECUTION ID_=\"6\" REV_=\"2\" PROC_INST_ID_=\"6\" BUSINESS_KEY_=\"userWorkflow:74cd8ece-715a-44a4-a736-e17b46c4e7e6\" PROC_DEF_ID_=\"userWorkflow:1:4\" ACT_ID_=\"active\" IS_ACTIVE_=\"1\" IS_CONCURRENT_=\"0\" IS_SCOPE_=\"1\" IS_EVENT_SCOPE_=\"0\" SUSPENSION_STATE_=\"1\"/>\n-      <ACT_RU_TASK ID_=\"7\" REV_=\"2\" EXECUTION_ID_=\"6\" PROC_INST_ID_=\"6\" PROC_DEF_ID_=\"userWorkflow:1:4\" NAME_=\"Active\" TASK_DEF_KEY_=\"active\" PRIORITY_=\"50\" CREATE_TIME_=\"2013-02-25T17:19:03+0100\"/>\n+      <fetch key=\"procDef\" query=\"SELECT ID_ FROM ACT_RE_PROCDEF WHERE KEY_='userWorkflow'\"/>\n \n-      <ACT_RU_EXECUTION ID_=\"8\" REV_=\"2\" PROC_INST_ID_=\"8\" BUSINESS_KEY_=\"userWorkflow:b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\" PROC_DEF_ID_=\"userWorkflow:1:4\" ACT_ID_=\"active\" IS_ACTIVE_=\"1\" IS_CONCURRENT_=\"0\" IS_SCOPE_=\"1\" IS_EVENT_SCOPE_=\"0\" SUSPENSION_STATE_=\"1\"/>\n-      <ACT_RU_TASK ID_=\"9\" REV_=\"2\" EXECUTION_ID_=\"8\" PROC_INST_ID_=\"8\" PROC_DEF_ID_=\"userWorkflow:1:4\" NAME_=\"Active\" TASK_DEF_KEY_=\"active\" PRIORITY_=\"50\" CREATE_TIME_=\"2013-02-25T17:19:03+0100\"/>\n+      <ACT_RU_EXECUTION ID_=\"4\" REV_=\"2\" PROC_INST_ID_=\"4\" BUSINESS_KEY_=\"userWorkflow:1417acbe-cbf6-4277-9372-e75e04f97000\" PROC_DEF_ID_=\"${{procDef}}\" ACT_ID_=\"active\" IS_ACTIVE_=\"1\" IS_CONCURRENT_=\"0\" IS_SCOPE_=\"1\" IS_EVENT_SCOPE_=\"0\" SUSPENSION_STATE_=\"1\"/>\n+      <ACT_RU_TASK ID_=\"5\" REV_=\"2\" EXECUTION_ID_=\"4\" PROC_INST_ID_=\"4\" PROC_DEF_ID_=\"${{procDef}}\" NAME_=\"Active\" TASK_DEF_KEY_=\"active\" PRIORITY_=\"50\" CREATE_TIME_=\"2013-02-25T17:19:03+0100\"/>\n \n-      <ACT_RU_EXECUTION ID_=\"10\" REV_=\"2\" PROC_INST_ID_=\"10\" BUSINESS_KEY_=\"userWorkflow:c9b2dec2-00a7-4855-97c0-d854842b4b24\" PROC_DEF_ID_=\"userWorkflow:1:4\" ACT_ID_=\"active\" IS_ACTIVE_=\"1\" IS_CONCURRENT_=\"0\" IS_SCOPE_=\"1\" IS_EVENT_SCOPE_=\"0\" SUSPENSION_STATE_=\"1\"/>\n-      <ACT_RU_TASK ID_=\"11\" REV_=\"2\" EXECUTION_ID_=\"10\" PROC_INST_ID_=\"10\" PROC_DEF_ID_=\"userWorkflow:1:4\" NAME_=\"Active\" TASK_DEF_KEY_=\"active\" PRIORITY_=\"50\" CREATE_TIME_=\"2013-02-25T17:19:03+0100\"/>\n+      <ACT_RU_EXECUTION ID_=\"6\" REV_=\"2\" PROC_INST_ID_=\"6\" BUSINESS_KEY_=\"userWorkflow:74cd8ece-715a-44a4-a736-e17b46c4e7e6\" PROC_DEF_ID_=\"${{procDef}}\" ACT_ID_=\"active\" IS_ACTIVE_=\"1\" IS_CONCURRENT_=\"0\" IS_SCOPE_=\"1\" IS_EVENT_SCOPE_=\"0\" SUSPENSION_STATE_=\"1\"/>\n+      <ACT_RU_TASK ID_=\"7\" REV_=\"2\" EXECUTION_ID_=\"6\" PROC_INST_ID_=\"6\" PROC_DEF_ID_=\"${{procDef}}\" NAME_=\"Active\" TASK_DEF_KEY_=\"active\" PRIORITY_=\"50\" CREATE_TIME_=\"2013-02-25T17:19:03+0100\"/>\n \n-      <ACT_RU_EXECUTION ID_=\"12\" REV_=\"2\" PROC_INST_ID_=\"12\" BUSINESS_KEY_=\"userWorkflow:823074dc-d280-436d-a7dd-07399fae48ec\" PROC_DEF_ID_=\"userWorkflow:1:4\" ACT_ID_=\"active\" IS_ACTIVE_=\"1\" IS_CONCURRENT_=\"0\" IS_SCOPE_=\"1\" IS_EVENT_SCOPE_=\"0\" SUSPENSION_STATE_=\"1\"/>\n-      <ACT_RU_TASK ID_=\"13\" REV_=\"2\" EXECUTION_ID_=\"12\" PROC_INST_ID_=\"12\" PROC_DEF_ID_=\"userWorkflow:1:4\" NAME_=\"Active\" TASK_DEF_KEY_=\"active\" PRIORITY_=\"50\" CREATE_TIME_=\"2013-02-25T17:19:03+0100\"/>\n+      <ACT_RU_EXECUTION ID_=\"8\" REV_=\"2\" PROC_INST_ID_=\"8\" BUSINESS_KEY_=\"userWorkflow:b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\" PROC_DEF_ID_=\"${{procDef}}\" ACT_ID_=\"active\" IS_ACTIVE_=\"1\" IS_CONCURRENT_=\"0\" IS_SCOPE_=\"1\" IS_EVENT_SCOPE_=\"0\" SUSPENSION_STATE_=\"1\"/>\n+      <ACT_RU_TASK ID_=\"9\" REV_=\"2\" EXECUTION_ID_=\"8\" PROC_INST_ID_=\"8\" PROC_DEF_ID_=\"${{procDef}}\" NAME_=\"Active\" TASK_DEF_KEY_=\"active\" PRIORITY_=\"50\" CREATE_TIME_=\"2013-02-25T17:19:03+0100\"/>\n+\n+      <ACT_RU_EXECUTION ID_=\"10\" REV_=\"2\" PROC_INST_ID_=\"10\" BUSINESS_KEY_=\"userWorkflow:c9b2dec2-00a7-4855-97c0-d854842b4b24\" PROC_DEF_ID_=\"${{procDef}}\" ACT_ID_=\"active\" IS_ACTIVE_=\"1\" IS_CONCURRENT_=\"0\" IS_SCOPE_=\"1\" IS_EVENT_SCOPE_=\"0\" SUSPENSION_STATE_=\"1\"/>\n+      <ACT_RU_TASK ID_=\"11\" REV_=\"2\" EXECUTION_ID_=\"10\" PROC_INST_ID_=\"10\" PROC_DEF_ID_=\"${{procDef}}\" NAME_=\"Active\" TASK_DEF_KEY_=\"active\" PRIORITY_=\"50\" CREATE_TIME_=\"2013-02-25T17:19:03+0100\"/>\n+\n+      <ACT_RU_EXECUTION ID_=\"12\" REV_=\"2\" PROC_INST_ID_=\"12\" BUSINESS_KEY_=\"userWorkflow:823074dc-d280-436d-a7dd-07399fae48ec\" PROC_DEF_ID_=\"${{procDef}}\" ACT_ID_=\"active\" IS_ACTIVE_=\"1\" IS_CONCURRENT_=\"0\" IS_SCOPE_=\"1\" IS_EVENT_SCOPE_=\"0\" SUSPENSION_STATE_=\"1\"/>\n+      <ACT_RU_TASK ID_=\"13\" REV_=\"2\" EXECUTION_ID_=\"12\" PROC_INST_ID_=\"12\" PROC_DEF_ID_=\"${{procDef}}\" NAME_=\"Active\" TASK_DEF_KEY_=\"active\" PRIORITY_=\"50\" CREATE_TIME_=\"2013-02-25T17:19:03+0100\"/>\n     </dataset>\n   </xsl:template>\n-  \n+\n   <xsl:template match=\"node()|@*|comment()\">\n     <xsl:copy>\n       <xsl:apply-templates select=\"@*|node()\"/>\n     </xsl:copy>\n   </xsl:template>\n \n-</xsl:stylesheet>\n\\ No newline at end of file\n+</xsl:stylesheet>"},{"sha":"1673e9b2ae2861a8d380da8e4645a8cf2099c7b2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/ContentLoaderHandler.java","status":"modified","additions":74,"deletions":67,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b764f567b5900b707431467ccbc8c18b1cac5a36/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b764f567b5900b707431467ccbc8c18b1cac5a36/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java?ref=b764f567b5900b707431467ccbc8c18b1cac5a36","patch":"@@ -51,7 +51,9 @@ public class ContentLoaderHandler extends DefaultHandler {\n \n     private final boolean continueOnError;\n \n-    private final StringSubstitutor envParamSubstitutor;\n+    private final Map<String, String> fetches = new HashMap<>();\n+\n+    private final StringSubstitutor paramSubstitutor;\n \n     public ContentLoaderHandler(\n             final DataSource dataSource,\n@@ -62,8 +64,8 @@ public ContentLoaderHandler(\n         this.jdbcTemplate = new JdbcTemplate(dataSource);\n         this.rootElement = rootElement;\n         this.continueOnError = continueOnError;\n-        this.envParamSubstitutor = new StringSubstitutor(key -> {\n-            String value = env.getProperty(key);\n+        this.paramSubstitutor = new StringSubstitutor(key -> {\n+            String value = env.getProperty(key, fetches.get(key));\n             return StringUtils.isBlank(value) ? null : value;\n         });\n     }\n@@ -86,7 +88,7 @@ private Object[] getParameters(final String tableName, final Attributes attrs) {\n                 colType = Types.VARCHAR;\n             }\n \n-            String value = envParamSubstitutor.replace(attrs.getValue(i));\n+            String value = paramSubstitutor.replace(attrs.getValue(i));\n             if (value == null) {\n                 LOG.warn(\"Variable ${} could not be resolved\", attrs.getValue(i));\n                 value = attrs.getValue(i);\n@@ -97,53 +99,53 @@ private Object[] getParameters(final String tableName, final Attributes attrs) {\n                 case Types.TINYINT:\n                 case Types.SMALLINT:\n                     try {\n-                        parameters[i] = Integer.valueOf(value);\n-                    } catch (NumberFormatException e) {\n-                        LOG.error(\"Unparsable Integer '{}'\", value);\n-                        parameters[i] = value;\n-                    }\n-                    break;\n+                    parameters[i] = Integer.valueOf(value);\n+                } catch (NumberFormatException e) {\n+                    LOG.error(\"Unparsable Integer '{}'\", value);\n+                    parameters[i] = value;\n+                }\n+                break;\n \n                 case Types.NUMERIC:\n                 case Types.DECIMAL:\n                 case Types.BIGINT:\n                     try {\n-                        parameters[i] = Long.valueOf(value);\n-                    } catch (NumberFormatException e) {\n-                        LOG.error(\"Unparsable Long '{}'\", value);\n-                        parameters[i] = value;\n-                    }\n-                    break;\n+                    parameters[i] = Long.valueOf(value);\n+                } catch (NumberFormatException e) {\n+                    LOG.error(\"Unparsable Long '{}'\", value);\n+                    parameters[i] = value;\n+                }\n+                break;\n \n                 case Types.DOUBLE:\n                     try {\n-                        parameters[i] = Double.valueOf(value);\n-                    } catch (NumberFormatException e) {\n-                        LOG.error(\"Unparsable Double '{}'\", value);\n-                        parameters[i] = value;\n-                    }\n-                    break;\n+                    parameters[i] = Double.valueOf(value);\n+                } catch (NumberFormatException e) {\n+                    LOG.error(\"Unparsable Double '{}'\", value);\n+                    parameters[i] = value;\n+                }\n+                break;\n \n                 case Types.REAL:\n                 case Types.FLOAT:\n                     try {\n-                        parameters[i] = Float.valueOf(value);\n-                    } catch (NumberFormatException e) {\n-                        LOG.error(\"Unparsable Float '{}'\", value);\n-                        parameters[i] = value;\n-                    }\n-                    break;\n+                    parameters[i] = Float.valueOf(value);\n+                } catch (NumberFormatException e) {\n+                    LOG.error(\"Unparsable Float '{}'\", value);\n+                    parameters[i] = value;\n+                }\n+                break;\n \n                 case Types.DATE:\n                 case Types.TIME:\n                 case Types.TIMESTAMP:\n                     try {\n-                        parameters[i] = FormatUtils.parseDate(value);\n-                    } catch (ParseException e) {\n-                        LOG.error(\"Unparsable Date '{}'\", value);\n-                        parameters[i] = value;\n-                    }\n-                    break;\n+                    parameters[i] = FormatUtils.parseDate(value);\n+                } catch (ParseException e) {\n+                    LOG.error(\"Unparsable Date '{}'\", value);\n+                    parameters[i] = value;\n+                }\n+                break;\n \n                 case Types.BIT:\n                 case Types.BOOLEAN:\n@@ -154,22 +156,22 @@ private Object[] getParameters(final String tableName, final Attributes attrs) {\n                 case Types.VARBINARY:\n                 case Types.LONGVARBINARY:\n                     try {\n-                        parameters[i] = DatatypeConverter.parseHexBinary(value);\n-                    } catch (IllegalArgumentException e) {\n-                        parameters[i] = value;\n-                    }\n-                    break;\n+                    parameters[i] = DatatypeConverter.parseHexBinary(value);\n+                } catch (IllegalArgumentException e) {\n+                    parameters[i] = value;\n+                }\n+                break;\n \n                 case Types.BLOB:\n                     try {\n-                        parameters[i] = DatatypeConverter.parseHexBinary(value);\n-                    } catch (IllegalArgumentException e) {\n-                        LOG.warn(\"Error decoding hex string to specify a blob parameter\", e);\n-                        parameters[i] = value;\n-                    } catch (Exception e) {\n-                        LOG.warn(\"Error creating a new blob parameter\", e);\n-                    }\n-                    break;\n+                    parameters[i] = DatatypeConverter.parseHexBinary(value);\n+                } catch (IllegalArgumentException e) {\n+                    LOG.warn(\"Error decoding hex string to specify a blob parameter\", e);\n+                    parameters[i] = value;\n+                } catch (Exception e) {\n+                    LOG.warn(\"Error creating a new blob parameter\", e);\n+                }\n+                break;\n \n                 default:\n                     parameters[i] = value;\n@@ -187,27 +189,32 @@ public void startElement(final String uri, final String localName, final String\n         if (rootElement.equals(qName)) {\n             return;\n         }\n-\n-        StringBuilder query = new StringBuilder(\"INSERT INTO \").append(qName).append('(');\n-\n-        StringBuilder values = new StringBuilder();\n-\n-        for (int i = 0; i < atts.getLength(); i++) {\n-            query.append(atts.getQName(i));\n-            values.append('?');\n-            if (i < atts.getLength() - 1) {\n-                query.append(',');\n-                values.append(',');\n+        if (\"fetch\".equalsIgnoreCase(qName)) {\n+            String value = jdbcTemplate.queryForObject(atts.getValue(\"query\"), String.class);\n+            String key = atts.getValue(\"key\");\n+            fetches.put(key, value);\n+        } else {\n+            StringBuilder query = new StringBuilder(\"INSERT INTO \").append(qName).append('(');\n+\n+            StringBuilder values = new StringBuilder();\n+\n+            for (int i = 0; i < atts.getLength(); i++) {\n+                query.append(atts.getQName(i));\n+                values.append('?');\n+                if (i < atts.getLength() - 1) {\n+                    query.append(',');\n+                    values.append(',');\n+                }\n             }\n-        }\n-        query.append(\") VALUES (\").append(values).append(')');\n-\n-        try {\n-            jdbcTemplate.update(query.toString(), getParameters(qName, atts));\n-        } catch (DataAccessException e) {\n-            LOG.error(\"While trying to perform {} with params {}\", query, getParameters(qName, atts), e);\n-            if (!continueOnError) {\n-                throw e;\n+            query.append(\") VALUES (\").append(values).append(')');\n+\n+            try {\n+                jdbcTemplate.update(query.toString(), getParameters(qName, atts));\n+            } catch (DataAccessException e) {\n+                LOG.error(\"While trying to perform {} with params {}\", query, getParameters(qName, atts), e);\n+                if (!continueOnError) {\n+                    throw e;\n+                }\n             }\n         }\n     }"}]}