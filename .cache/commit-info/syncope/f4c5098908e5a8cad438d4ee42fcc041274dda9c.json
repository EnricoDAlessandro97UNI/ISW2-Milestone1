{"sha":"f4c5098908e5a8cad438d4ee42fcc041274dda9c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY0YzUwOTg5MDhlNWE4Y2FkNDM4ZDRlZTQyZmNjMDQxMjc0ZGRhOWM=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-05-04T10:29:14Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-05-04T10:29:14Z"},"message":"SYNCOPE-81 #comment task execution used to be saved twice\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1333862 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8f4b8a9875b6ca41da7287ee53727818d3c065dd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8f4b8a9875b6ca41da7287ee53727818d3c065dd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f4c5098908e5a8cad438d4ee42fcc041274dda9c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f4c5098908e5a8cad438d4ee42fcc041274dda9c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f4c5098908e5a8cad438d4ee42fcc041274dda9c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f4c5098908e5a8cad438d4ee42fcc041274dda9c/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"ce43d66932693ce35ec9434a164d5400ce373c9a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce43d66932693ce35ec9434a164d5400ce373c9a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ce43d66932693ce35ec9434a164d5400ce373c9a"}],"stats":{"total":83,"additions":59,"deletions":24},"files":[{"sha":"b69d27aba92954547f8f37f4bf54053ae1936118","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f4c5098908e5a8cad438d4ee42fcc041274dda9c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f4c5098908e5a8cad438d4ee42fcc041274dda9c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=f4c5098908e5a8cad438d4ee42fcc041274dda9c","patch":"@@ -25,13 +25,6 @@\n import java.util.Map;\n import java.util.Set;\n import javassist.NotFoundException;\n-import org.apache.velocity.app.VelocityEngine;\n-import org.apache.velocity.exception.VelocityException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.ui.velocity.VelocityEngineUtils;\n import org.apache.syncope.core.persistence.beans.Notification;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n@@ -52,6 +45,13 @@\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.types.IntMappingType;\n+import org.apache.velocity.app.VelocityEngine;\n+import org.apache.velocity.exception.VelocityException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.ui.velocity.VelocityEngineUtils;\n \n /**\n  * Create notification tasks that will be executed by NotificationJob.\n@@ -253,7 +253,7 @@ private String getRecipientEmail(\n      */\n     public TaskExec storeExecution(final TaskExec execution) {\n         NotificationTask task = taskDAO.find(execution.getTask().getId());\n-        task.addExec(execution);\n+        execution.setTask(task);\n         return taskExecDAO.save(execution);\n     }\n "},{"sha":"3a38be9e2c343efce0041b0e90315bfb185f8ebd","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":48,"deletions":16,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f4c5098908e5a8cad438d4ee42fcc041274dda9c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f4c5098908e5a8cad438d4ee42fcc041274dda9c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=f4c5098908e5a8cad438d4ee42fcc041274dda9c","patch":"@@ -28,6 +28,7 @@\n import org.springframework.web.client.HttpStatusCodeException;\n import org.apache.syncope.client.to.AttributeTO;\n import org.apache.syncope.client.to.MembershipTO;\n+import org.apache.syncope.client.to.NotificationTaskTO;\n import org.apache.syncope.client.to.TaskExecTO;\n import org.apache.syncope.client.to.PropagationTaskTO;\n import org.apache.syncope.client.to.SchedTaskTO;\n@@ -171,8 +172,7 @@ public void deal() {\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n-        TaskExecTO execution = restTemplate\n-                .postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 1);\n+        TaskExecTO execution = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 1);\n         assertEquals(PropagationTaskExecStatus.SUBMITTED.name(), execution.getStatus());\n \n         execution = restTemplate.getForObject(BASE_URL + \"task/execution/report/{executionId}\"\n@@ -182,8 +182,8 @@ public void deal() {\n \n         restTemplate.getForObject(BASE_URL + \"task/delete/{taskId}\", PropagationTaskTO.class, 1);\n         try {\n-            restTemplate.getForObject(BASE_URL + \"task/execution/read/{executionId}\", TaskExecTO.class, execution\n-                    .getId());\n+            restTemplate.getForObject(BASE_URL + \"task/execution/read/{executionId}\", TaskExecTO.class,\n+                    execution.getId());\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -317,8 +317,7 @@ public void sync() {\n         assertTrue(Integer.valueOf(userTO.getAttributeMap().get(\"fullname\").getValues().get(0)) <= 10);\n \n         // check for user template\n-        userTO = \n-            restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"test7\");\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"test7\");\n         assertNotNull(userTO);\n         assertEquals(\"TYPE_OTHER\", userTO.getAttributeMap().get(\"type\").getValues().get(0));\n         assertEquals(2, userTO.getResources().size());\n@@ -327,8 +326,7 @@ public void sync() {\n         assertEquals(1, userTO.getMemberships().size());\n         assertTrue(userTO.getMemberships().get(0).getAttributeMap().containsKey(\"subscriptionDate\"));\n \n-        userTO = \n-            restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"test8\");\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"test8\");\n         assertNotNull(userTO);\n         assertEquals(\"TYPE_8\", userTO.getAttributeMap().get(\"type\").getValues().get(0));\n \n@@ -341,13 +339,11 @@ public void sync() {\n         // * expected disabled user test1\n         // * expected enabled user test2\n \n-        userTO = \n-            restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"test1\");\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"test1\");\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        userTO = \n-            restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"test3\");\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"test3\");\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n     }\n@@ -419,17 +415,16 @@ public void reconcile() {\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n-        final UserTO userTO = \n-            restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"testuser1\");\n+        final UserTO userTO =\n+                restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"testuser1\");\n \n         assertNotNull(userTO);\n         assertEquals(\"reconciled@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n     }\n \n     @Test\n     public void issue196() {\n-        TaskExecTO execution = restTemplate\n-                .postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 6);\n+        TaskExecTO execution = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 6);\n         assertNotNull(execution);\n         assertEquals(0, execution.getId());\n         assertNotNull(execution.getTask());\n@@ -464,4 +459,41 @@ public void dryRun() {\n \n         assertEquals(\"SUCCESS\", taskTO.getExecutions().get(0).getStatus());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE81() {\n+        NotificationTaskTO taskTO = restTemplate.getForObject(\n+                BASE_URL + \"task/read/{taskId}\", NotificationTaskTO.class, 8L);\n+\n+        assertNotNull(taskTO);\n+        assertTrue(taskTO.getExecutions().isEmpty());\n+\n+        TaskExecTO execution = restTemplate.postForObject(\n+                BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, taskTO.getId());\n+        assertEquals(\"NOT_SENT\", execution.getStatus());\n+\n+        int i = 0;\n+        int maxit = 50;\n+\n+        // wait for sync completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            taskTO = restTemplate.getForObject(\n+                    BASE_URL + \"task/read/{taskId}\", NotificationTaskTO.class, taskTO.getId());\n+\n+            assertNotNull(taskTO);\n+            assertNotNull(taskTO.getExecutions());\n+\n+            i++;\n+        } while (taskTO.getExecutions().isEmpty() && i < maxit);\n+\n+        assertFalse(taskTO.getExecutions().isEmpty());\n+\n+        taskTO = restTemplate.getForObject(BASE_URL + \"task/delete/{taskId}\", NotificationTaskTO.class, taskTO.getId());\n+        assertNotNull(taskTO);\n+    }\n }"},{"sha":"314a439e716ac9623849757efc83956daca286c0","filename":"core/src/test/resources/content.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f4c5098908e5a8cad438d4ee42fcc041274dda9c/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f4c5098908e5a8cad438d4ee42fcc041274dda9c/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=f4c5098908e5a8cad438d4ee42fcc041274dda9c","patch":"@@ -493,6 +493,9 @@ under the License.\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n         jobClassName=\"org.apache.syncope.core.scheduling.SyncJob\"/>\n \n+  <Task DTYPE=\"NotificationTask\" id=\"8\" sender=\"admin@prova.org\" subject=\"notification\" textBody=\"\" htmlBody=\"\" traceLevel=\"ALL\"/>\n+  <NotificationTask_Recipients notificationtask_id=\"8\" element=\"recipient@prova.org\"/>\n+\n     <!-- Authentication and authorization -->\n   <Entitlement name=\"base\"/>\n   <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>"}]}