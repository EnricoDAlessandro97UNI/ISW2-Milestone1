{"sha":"42130611fef3f3d7b5de62ae299f826f42bd5b10","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQyMTMwNjExZmVmM2YzZDdiNWRlNjJhZTI5OWY4MjZmNDJiZDViMTA=","commit":{"author":{"name":"DimaAy","email":"dima.ayash@tirasa.net","date":"2020-05-08T14:22:38Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-05-08T14:22:38Z"},"message":"[SYNCOPE-1557] complete policies manipulating (#186)\n\n* [SYNCOPE-1557] complete policies manipulating\r\n\r\nremove\r\n\r\nITCase attempt\r\n\r\nCleanup + sample working test for ClientApp\r\n\r\nSyncopeServiceRegistry tests\r\n\r\n[SYNCOPE-1557] authModules  manipulating\r\n\r\n[SYNCOPE-1557] complete policies manipulating and adding more  tests\r\n\r\n* rename and fix\r\n\r\n* remove unneeded parenthesis","tree":{"sha":"f813d5377f4218e3db7a8b3b362f41a6ebcfd94a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f813d5377f4218e3db7a8b3b362f41a6ebcfd94a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/42130611fef3f3d7b5de62ae299f826f42bd5b10","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetWsuCRBK7hj4Ov3rIwAAdHIIAGjkJqMzgjOV6tHPPgWgaaSP\nFfn/aIVGxFVfqOWM/TWCRIwko9IOh9njjpw1oWkCKOqo4ujibsvw0tIjFl6V4fcP\nLCrgjWddmV+yWA4ozL5eYa0VqUjE2ovkfOQdUYdRI7drFXKfKOBs3KGHiVAvm2Uv\n6MqPvW6UP+Nk/w5Yogqsw0HpvyoreOYlVY/E1CPMieIwnpKRA3pYEFIjZaomOS6z\nEo8UD1gb2e3wjTw0ibcjZ5d6wQ2q2wwndKcckS+7BrZTO8+0JHcW5Gr5mL4BP2iq\nwLbC8IFArSj0BKFmGuk2H8HqZb4bCynOPYvBezqBiCTC59VlPJbFcDFdbk4KNUE=\n=0RDe\n-----END PGP SIGNATURE-----\n","payload":"tree f813d5377f4218e3db7a8b3b362f41a6ebcfd94a\nparent f479709624c1207befa8ea77db0ae2d5de2df29d\nauthor DimaAy <dima.ayash@tirasa.net> 1588947758 +0200\ncommitter GitHub <noreply@github.com> 1588947758 +0200\n\n[SYNCOPE-1557] complete policies manipulating (#186)\n\n* [SYNCOPE-1557] complete policies manipulating\r\n\r\nremove\r\n\r\nITCase attempt\r\n\r\nCleanup + sample working test for ClientApp\r\n\r\nSyncopeServiceRegistry tests\r\n\r\n[SYNCOPE-1557] authModules  manipulating\r\n\r\n[SYNCOPE-1557] complete policies manipulating and adding more  tests\r\n\r\n* rename and fix\r\n\r\n* remove unneeded parenthesis"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/42130611fef3f3d7b5de62ae299f826f42bd5b10","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/42130611fef3f3d7b5de62ae299f826f42bd5b10","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/42130611fef3f3d7b5de62ae299f826f42bd5b10/comments","author":{"login":"DimaAy","id":19169906,"node_id":"MDQ6VXNlcjE5MTY5OTA2","avatar_url":"https://avatars.githubusercontent.com/u/19169906?v=4","gravatar_id":"","url":"https://api.github.com/users/DimaAy","html_url":"https://github.com/DimaAy","followers_url":"https://api.github.com/users/DimaAy/followers","following_url":"https://api.github.com/users/DimaAy/following{/other_user}","gists_url":"https://api.github.com/users/DimaAy/gists{/gist_id}","starred_url":"https://api.github.com/users/DimaAy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DimaAy/subscriptions","organizations_url":"https://api.github.com/users/DimaAy/orgs","repos_url":"https://api.github.com/users/DimaAy/repos","events_url":"https://api.github.com/users/DimaAy/events{/privacy}","received_events_url":"https://api.github.com/users/DimaAy/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"f479709624c1207befa8ea77db0ae2d5de2df29d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f479709624c1207befa8ea77db0ae2d5de2df29d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f479709624c1207befa8ea77db0ae2d5de2df29d"}],"stats":{"total":1054,"additions":718,"deletions":336},"files":[{"sha":"82ab76e8ccf492cc5b9148388961f08706cd6708","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/WAClientApp.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.common.lib.wa;\n \n import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n@@ -36,6 +38,8 @@ public class WAClientApp implements Serializable {\n \n     private AttrReleasePolicyConf attrReleasePolicyConf;\n \n+    private final Map<String, Object> releaseAttrs = new HashMap<>();\n+\n     public ClientAppTO getClientAppTO() {\n         return clientAppTO;\n     }\n@@ -67,4 +71,8 @@ public AttrReleasePolicyConf getAttrReleasePolicyConf() {\n     public void setAttrReleasePolicyConf(final AttrReleasePolicyConf attrReleasePolicyConf) {\n         this.attrReleasePolicyConf = attrReleasePolicyConf;\n     }\n+\n+    public Map<String, Object> getReleaseAttrs() {\n+        return releaseAttrs;\n+    }\n }"},{"sha":"1027a1b77176a774c40ffef5ebaf44888c23d853","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/AbstractClientApp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FAbstractClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FAbstractClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FAbstractClientApp.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -114,7 +114,7 @@ public AttrReleasePolicy getAttrReleasePolicy() {\n \n     @Override\n     public void setAttrReleasePolicy(final AttrReleasePolicy policy) {\n-        checkType(policy, JPAAccessPolicy.class);\n+        checkType(policy, JPAAttrReleasePolicy.class);\n         this.attrReleasePolicy = (JPAAttrReleasePolicy) policy;\n     }\n "},{"sha":"1ed14181fa76f9af3685c735db33d6963d39c012","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/wa/WAClientAppBinderImpl.java","status":"modified","additions":36,"deletions":6,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppBinderImpl.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.syncope.core.provisioning.java.data.wa;\n \n+import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n import org.slf4j.Logger;\n@@ -35,28 +39,54 @@ public class WAClientAppBinderImpl implements WAClientAppBinder {\n     @Autowired\n     private ClientAppDataBinder clientAppDataBinder;\n \n+    @Autowired\n+    private AuthModuleDAO authModuleDAO;\n+\n     @Override\n     public WAClientApp getWAClientApp(final ClientApp clientApp) {\n         WAClientApp waClientApp = new WAClientApp();\n         waClientApp.setClientAppTO(clientAppDataBinder.getClientAppTO(clientApp));\n \n         try {\n+            AuthPolicyConf authPolicyConf = null;\n             if (clientApp.getAuthPolicy() != null) {\n-                waClientApp.setAuthPolicyConf((clientApp.getAuthPolicy()).getConf());\n+                authPolicyConf = clientApp.getAuthPolicy().getConf();\n+                waClientApp.setAuthPolicyConf(clientApp.getAuthPolicy().getConf());\n             } else if (clientApp.getRealm().getAuthPolicy() != null) {\n-                waClientApp.setAuthPolicyConf((clientApp.getRealm().getAuthPolicy()).getConf());\n+                authPolicyConf = clientApp.getRealm().getAuthPolicy().getConf();\n+                waClientApp.setAuthPolicyConf(clientApp.getRealm().getAuthPolicy().getConf());\n             }\n \n             if (clientApp.getAccessPolicy() != null) {\n-                waClientApp.setAccessPolicyConf((clientApp.getAccessPolicy()).getConf());\n+                waClientApp.setAccessPolicyConf(clientApp.getAccessPolicy().getConf());\n             } else if (clientApp.getRealm().getAccessPolicy() != null) {\n-                waClientApp.setAccessPolicyConf((clientApp.getRealm().getAccessPolicy()).getConf());\n+                waClientApp.setAccessPolicyConf(clientApp.getRealm().getAccessPolicy().getConf());\n             }\n \n             if (clientApp.getAttrReleasePolicy() != null) {\n-                waClientApp.setAttrReleasePolicyConf((clientApp.getAttrReleasePolicy()).getConf());\n+                waClientApp.setAttrReleasePolicyConf(clientApp.getAttrReleasePolicy().getConf());\n             } else if (clientApp.getRealm().getAttrReleasePolicy() != null) {\n-                waClientApp.setAttrReleasePolicyConf((clientApp.getRealm().getAttrReleasePolicy()).getConf());\n+                waClientApp.setAttrReleasePolicyConf(clientApp.getRealm().getAttrReleasePolicy().getConf());\n+            }\n+\n+            if (authPolicyConf instanceof DefaultAuthPolicyConf\n+                    && !((DefaultAuthPolicyConf) authPolicyConf).getAuthModules().isEmpty()) {\n+                ((DefaultAuthPolicyConf) authPolicyConf).getAuthModules().forEach(authModuleKey -> {\n+                    AuthModule authModule = authModuleDAO.find(authModuleKey);\n+                    if (authModule == null) {\n+                        LOG.warn(\"AuthModule \" + authModuleKey + \" not found\");\n+                    } else {\n+                        authModule.getItems().forEach(item -> waClientApp.getReleaseAttrs().put(\n+                                item.getExtAttrName(), item.getIntAttrName()));\n+                    }\n+                });\n+            }\n+            if (waClientApp.getReleaseAttrs().isEmpty()) {\n+                if (clientApp.getAttrReleasePolicy() != null) {\n+                    waClientApp.setAttrReleasePolicyConf(clientApp.getAttrReleasePolicy().getConf());\n+                } else if (clientApp.getRealm().getAttrReleasePolicy() != null) {\n+                    waClientApp.setAttrReleasePolicyConf(clientApp.getRealm().getAttrReleasePolicy().getConf());\n+                }\n             }\n         } catch (Exception e) {\n             LOG.error(\"While building the configuration from an application's policy \", e);"},{"sha":"ef677758bc66a761a85da51c8355c1c59aa97e58","filename":"docker/wa/src/main/resources/application.properties","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -26,8 +26,17 @@ spring.http.encoding.force=true\n \n server.servlet.contextPath=/syncope-wa\n \n-spring.resources.static-locations=classpath:/syncope/static,classpath:/static\n-spring.thymeleaf.templateResolverOrder=1 \n+spring.resources.static-locations=classpath:/thymeleaf/static,classpath:/static\n+\n+management.endpoints.web.exposure.include=health,loggers,refresh,registeredServices\n+management.endpoint.health.show-details=always\n+\n+management.endpoint.health.enabled=true\n+management.endpoint.loggers.enabled=true\n+management.endpoint.refresh.enabled=true\n+management.endpoint.registeredServices.enabled=true\n+\n+cas.serviceRegistry.schedule.enabled=false\n \n ##\n # Allow configuration classes to override bean definitions from Spring Boot"},{"sha":"91c7dcf553fbdc8d4ceeae362a9020ab19cf7a90","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -31,6 +31,7 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.Set;\n import java.util.UUID;\n import javax.naming.Context;\n import javax.naming.NamingException;\n@@ -66,6 +67,11 @@\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -78,11 +84,13 @@\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.client.ClientAppTO;\n import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -132,6 +140,7 @@\n import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataConfService;\n import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowTaskService;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.core.CoreITContext;\n import org.apache.syncope.fit.core.UserITCase;\n import org.identityconnectors.common.security.Encryptor;\n@@ -814,4 +823,41 @@ protected <T extends ClientAppTO> T createClientApp(final ClientAppType type, fi\n         }\n         return (T) getObject(response.getLocation(), ClientAppService.class, clientAppTO.getClass());\n     }\n+\n+    protected static AuthPolicyTO buildAuthPolicyTO(final String authModuleKey) {\n+        AuthPolicyTO policy = new AuthPolicyTO();\n+        policy.setDescription(\"Test Authentication policy\");\n+\n+        DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n+        conf.setName(\"TestAuthConf\");\n+        conf.getAuthModules().add(authModuleKey);\n+        policy.setConf(conf);\n+\n+        return policy;\n+    }\n+\n+    protected static AttrReleasePolicyTO buildAttributeReleasePolicyTO(final String policyName) {\n+        AttrReleasePolicyTO policy = new AttrReleasePolicyTO();\n+        policy.setDescription(\"Test Attribute Release policy\");\n+\n+        AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n+        conf.setName(\"MyDefaultAttrReleasePolicyConf\");\n+        conf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n+        policy.setConf(conf);\n+\n+        return policy;\n+    }\n+\n+    protected static AccessPolicyTO buildAccessPolicyTO() {\n+        AccessPolicyTO policy = new AccessPolicyTO();\n+        policy.setDescription(\"Test Access policy\");\n+\n+        DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n+        conf.setEnabled(true);\n+        conf.setName(\"TestAccessPolicyConf\");\n+        conf.getRequiredAttrs().put(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n+        policy.setConf(conf);\n+\n+        return policy;\n+    }\n }"},{"sha":"9dfb160c659909e31f005066fa9b9b3531f6ab1f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":4,"deletions":40,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -59,43 +59,7 @@\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n \n public class PolicyITCase extends AbstractITCase {\n-\n-    private static AuthPolicyTO buildAuthPolicyTO() {\n-        AuthPolicyTO policy = new AuthPolicyTO();\n-        policy.setDescription(\"Test Authentication policy\");\n-\n-        DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n-        conf.getAuthModules().addAll(List.of(\"LdapAuthentication1\"));\n-        policy.setConf(conf);\n-\n-        return policy;\n-    }\n-\n-    private static AttrReleasePolicyTO buildAttributeReleasePolicyTO(final String policyName) {\n-        AttrReleasePolicyTO policy = new AttrReleasePolicyTO();\n-        policy.setDescription(\"Test Attribute Release policy\");\n-\n-        AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n-        conf.setName(\"MyDefaultAttrReleasePolicyConf\");\n-        conf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n-        policy.setConf(conf);\n-\n-        return policy;\n-    }\n-\n-    private static AccessPolicyTO buildAccessPolicyTO() {\n-        AccessPolicyTO policy = new AccessPolicyTO();\n-        policy.setDescription(\"Test Access policy\");\n-\n-        DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n-        conf.setEnabled(true);\n-        conf.setName(\"TestAccessPolicyConf\");\n-        conf.getRequiredAttrs().put(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n-        policy.setConf(conf);\n-\n-        return policy;\n-    }\n-\n+ \n     private PullPolicyTO buildPullPolicyTO() throws IOException {\n         ImplementationTO corrRule = null;\n         try {\n@@ -222,7 +186,7 @@ public void create() throws IOException {\n         assertEquals(\"TestPushRule\", pushPolicyTO.getCorrelationRules().get(AnyTypeKind.USER.name()));\n \n         AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH,\n-                buildAuthPolicyTO());\n+                buildAuthPolicyTO(\"LdapAuthentication1\"));\n         assertNotNull(authPolicyTO);\n         assertEquals(\"Test Authentication policy\", authPolicyTO.getDescription());\n \n@@ -263,7 +227,7 @@ public void updatePasswordPolicy() {\n \n     @Test\n     public void updateAuthPolicy() {\n-        AuthPolicyTO newAuthPolicyTO = buildAuthPolicyTO();\n+        AuthPolicyTO newAuthPolicyTO = buildAuthPolicyTO(\"LdapAuthentication1\");\n         assertNotNull(newAuthPolicyTO);\n         newAuthPolicyTO = createPolicy(PolicyType.AUTH, newAuthPolicyTO);\n \n@@ -341,7 +305,7 @@ public void delete() throws IOException {\n             assertNotNull(e);\n         }\n \n-        AuthPolicyTO authPolicy = buildAuthPolicyTO();\n+        AuthPolicyTO authPolicy = buildAuthPolicyTO(\"LdapAuthentication1\");\n \n         AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH, authPolicy);\n         assertNotNull(authPolicyTO);"},{"sha":"b3c00292a033f80869c4756872e779fdcffeb3a3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/WAClientAppITCase.java","status":"modified","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -18,16 +18,24 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n@@ -80,4 +88,71 @@ public void read() {\n         registeredSamlClientApp = waClientAppService.read(samlspto.getName(), ClientAppType.SAML2SP);\n         assertNotNull(registeredSamlClientApp);\n     }\n+\n+    @Test\n+    public void readWithPolicies() {\n+        OIDCRPTO oidcrpto = buildOIDCRP();\n+\n+        AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH,\n+                buildAuthPolicyTO(\"be456831-593d-4003-b273-4c3fb61700df\"));\n+\n+        AccessPolicyTO accessPolicyTO = createPolicy(PolicyType.ACCESS,\n+                buildAccessPolicyTO());\n+\n+        String policyName = \"TestAttrReleasePolicy\" + getUUIDString();\n+        AttrReleasePolicyTO attrReleasePolicyTO = createPolicy(PolicyType.ATTR_RELEASE,\n+                buildAttributeReleasePolicyTO(policyName));\n+\n+        oidcrpto.setAuthPolicy(authPolicyTO.getKey());\n+        oidcrpto.setAccessPolicy(accessPolicyTO.getKey());\n+        oidcrpto.setAttrReleasePolicy(attrReleasePolicyTO.getKey());\n+\n+        oidcrpto = createClientApp(ClientAppType.OIDCRP, oidcrpto);\n+\n+        WAClientApp waClientApp = waClientAppService.read(oidcrpto.getClientAppId(), null);\n+        assertNotNull(waClientApp);\n+        assertEquals(\"TestAuthConf\", waClientApp.getAuthPolicyConf().getName());\n+        assertEquals(\"TestAccessPolicyConf\", waClientApp.getAccessPolicyConf().getName());\n+        assertEquals(\"MyDefaultAttrReleasePolicyConf\", waClientApp.getAttrReleasePolicyConf().getName());\n+        assertTrue(waClientApp.getReleaseAttrs().isEmpty());\n+\n+        // add items to the authentication module\n+        addItems();\n+        waClientApp = waClientAppService.read(oidcrpto.getClientAppId(), null);\n+        assertNotNull(waClientApp);\n+        assertFalse(waClientApp.getReleaseAttrs().isEmpty());\n+        assertEquals(\"uid\", waClientApp.getReleaseAttrs().get(\"username\"));\n+        assertEquals(\"cn\", waClientApp.getReleaseAttrs().get(\"fullname\"));\n+        removeItems();\n+    }\n+\n+    private void addItems() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n+\n+        ItemTO keyMapping = new ItemTO();\n+        keyMapping.setIntAttrName(\"uid\");\n+        keyMapping.setExtAttrName(\"username\");\n+        authModuleTO.add(keyMapping);\n+\n+        ItemTO fullnameMapping = new ItemTO();\n+        fullnameMapping.setIntAttrName(\"cn\");\n+        fullnameMapping.setExtAttrName(\"fullname\");\n+        authModuleTO.add(fullnameMapping);\n+\n+        authModuleService.update(authModuleTO);\n+\n+        authModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        assertFalse(authModuleTO.getItems().isEmpty());\n+    }\n+\n+    private void removeItems() {\n+        AuthModuleTO authModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        authModuleTO.getItems().clear();\n+\n+        authModuleService.update(authModuleTO);\n+\n+        authModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        assertTrue(authModuleTO.getItems().isEmpty());\n+    }\n+\n }"},{"sha":"f4190b055cab74565faaac1fce8f58db4d67f1d9","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":80,"deletions":47,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.wa.bootstrap;\n \n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n import org.apereo.cas.configuration.CasCoreConfigurationUtils;\n import org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties;\n@@ -32,8 +35,8 @@\n import org.apereo.cas.configuration.model.support.radius.RadiusProperties;\n import org.apereo.cas.configuration.model.support.syncope.SyncopeAuthenticationProperties;\n import org.apereo.cas.util.model.TriStateBoolean;\n-\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n@@ -54,10 +57,6 @@\n import org.springframework.core.env.MapPropertySource;\n import org.springframework.core.env.PropertySource;\n \n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-\n @Order\n public class SyncopeWAPropertySourceLocator implements PropertySourceLocator {\n \n@@ -69,46 +68,59 @@ public SyncopeWAPropertySourceLocator(final WARestClient waRestClient) {\n         this.waRestClient = waRestClient;\n     }\n \n-    private static void mapSyncopeAuthModuleConf(final CasConfigurationProperties casProperties,\n-                                                 final AuthModuleConf authConf) {\n+    private static void mapSyncopeAuthModuleConf(\n+            final CasConfigurationProperties casProperties,\n+            final AuthModuleConf authConf) {\n+\n         SyncopeAuthModuleConf conf = SyncopeAuthModuleConf.class.cast(authConf);\n+\n         SyncopeAuthenticationProperties syncopeProps = new SyncopeAuthenticationProperties();\n         syncopeProps.setName(conf.getName());\n         syncopeProps.setDomain(conf.getDomain());\n         syncopeProps.setUrl(conf.getUrl());\n+\n         casProperties.getAuthn().setSyncope(syncopeProps);\n     }\n \n-    private static void mapStaticAuthModuleConf(final CasConfigurationProperties casProperties,\n-                                                final AuthModuleConf authConf) {\n+    private static void mapStaticAuthModuleConf(\n+            final CasConfigurationProperties casProperties,\n+            final AuthModuleConf authConf) {\n+\n         StaticAuthModuleConf conf = StaticAuthModuleConf.class.cast(authConf);\n+\n         AcceptAuthenticationProperties staticProps = new AcceptAuthenticationProperties();\n         staticProps.setName(conf.getName());\n         String users = conf.getUsers().entrySet().stream().\n-            map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n-            collect(Collectors.joining(\",\"));\n+                map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n+                collect(Collectors.joining(\",\"));\n         staticProps.setUsers(users);\n+\n         casProperties.getAuthn().setAccept(staticProps);\n     }\n \n-    private static void mapLdapAuthModuleConf(final CasConfigurationProperties casProperties,\n-                                              final AuthModuleConf authConf) {\n-        LDAPAuthModuleConf ldapConf = LDAPAuthModuleConf.class.cast(authConf);\n+    private static void mapLdapAuthModuleConf(\n+            final CasConfigurationProperties casProperties,\n+            final AuthModuleConf authConf) {\n+\n+        LDAPAuthModuleConf conf = LDAPAuthModuleConf.class.cast(authConf);\n \n         LdapAuthenticationProperties ldapProps = new LdapAuthenticationProperties();\n-        ldapProps.setName(ldapConf.getName());\n-        ldapProps.setBaseDn(ldapConf.getBaseDn());\n-        ldapProps.setBindCredential(ldapConf.getBindCredential());\n-        ldapProps.setSearchFilter(ldapConf.getSearchFilter());\n-        ldapProps.setPrincipalAttributeId(ldapConf.getUserIdAttribute());\n-        ldapProps.setLdapUrl(ldapConf.getLdapUrl());\n-        ldapProps.setSubtreeSearch(ldapConf.isSubtreeSearch());\n-        ldapProps.setPrincipalAttributeList(ldapConf.getPrincipalAttributeList());\n+        ldapProps.setName(conf.getName());\n+        ldapProps.setBaseDn(conf.getBaseDn());\n+        ldapProps.setBindCredential(conf.getBindCredential());\n+        ldapProps.setSearchFilter(conf.getSearchFilter());\n+        ldapProps.setPrincipalAttributeId(conf.getUserIdAttribute());\n+        ldapProps.setLdapUrl(conf.getLdapUrl());\n+        ldapProps.setSubtreeSearch(conf.isSubtreeSearch());\n+        ldapProps.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n+\n         casProperties.getAuthn().getLdap().add(ldapProps);\n     }\n \n-    private static void mapGoogleMfaAuthModuleConf(final CasConfigurationProperties casProperties,\n-                                                   final AuthModuleConf authConf) {\n+    private static void mapGoogleMfaAuthModuleConf(\n+            final CasConfigurationProperties casProperties,\n+            final AuthModuleConf authConf) {\n+\n         GoogleMfaAuthModuleConf conf = GoogleMfaAuthModuleConf.class.cast(authConf);\n \n         GoogleAuthenticatorMultifactorProperties props = new GoogleAuthenticatorMultifactorProperties();\n@@ -122,8 +134,10 @@ private static void mapGoogleMfaAuthModuleConf(final CasConfigurationProperties\n         casProperties.getAuthn().getMfa().setGauth(props);\n     }\n \n-    private static void mapU2fAuthModuleConf(final CasConfigurationProperties casProperties,\n-                                             final AuthModuleConf authConf) {\n+    private static void mapU2fAuthModuleConf(\n+            final CasConfigurationProperties casProperties,\n+            final AuthModuleConf authConf) {\n+\n         U2FAuthModuleConf conf = U2FAuthModuleConf.class.cast(authConf);\n \n         U2FMultifactorProperties props = new U2FMultifactorProperties();\n@@ -132,25 +146,33 @@ private static void mapU2fAuthModuleConf(final CasConfigurationProperties casPro\n         props.setExpireDevicesTimeUnit(TimeUnit.valueOf(conf.getExpireDevicesTimeUnit()));\n         props.setExpireRegistrations(conf.getExpireRegistrations());\n         props.setExpireRegistrationsTimeUnit(TimeUnit.valueOf(conf.getExpireRegistrationsTimeUnit()));\n+\n         casProperties.getAuthn().getMfa().setU2f(props);\n     }\n \n-    private static void mapJaasAuthModuleConf(final CasConfigurationProperties casProperties,\n-                                              final AuthModuleConf authConf) {\n+    private static void mapJaasAuthModuleConf(\n+            final CasConfigurationProperties casProperties,\n+            final AuthModuleConf authConf) {\n+\n         JaasAuthModuleConf conf = JaasAuthModuleConf.class.cast(authConf);\n+\n         JaasAuthenticationProperties props = new JaasAuthenticationProperties();\n         props.setName(conf.getName());\n         props.setLoginConfigType(conf.getLoginConfigType());\n         props.setKerberosKdcSystemProperty(conf.getKerberosKdcSystemProperty());\n         props.setKerberosRealmSystemProperty(conf.getKerberosRealmSystemProperty());\n         props.setLoginConfigType(conf.getLoginConfigurationFile());\n         props.setRealm(conf.getRealm());\n+\n         casProperties.getAuthn().getJaas().add(props);\n     }\n \n-    private static void mapJdbcAuthModuleConf(final CasConfigurationProperties casProperties,\n-                                              final AuthModuleConf authConf) {\n+    private static void mapJdbcAuthModuleConf(\n+            final CasConfigurationProperties casProperties,\n+            final AuthModuleConf authConf) {\n+\n         JDBCAuthModuleConf conf = JDBCAuthModuleConf.class.cast(authConf);\n+\n         QueryJdbcAuthenticationProperties props = new QueryJdbcAuthenticationProperties();\n         props.setName(conf.getName());\n         props.setSql(conf.getSql());\n@@ -163,12 +185,16 @@ private static void mapJdbcAuthModuleConf(final CasConfigurationProperties casPr\n         props.setUrl(conf.getUrl());\n         props.setUser(conf.getUser());\n         props.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n+\n         casProperties.getAuthn().getJdbc().getQuery().add(props);\n     }\n \n-    private static void mapOidcAuthModuleConf(final CasConfigurationProperties casProperties,\n-                                              final AuthModuleConf authConf) {\n+    private static void mapOidcAuthModuleConf(\n+            final CasConfigurationProperties casProperties,\n+            final AuthModuleConf authConf) {\n+\n         OIDCAuthModuleConf conf = OIDCAuthModuleConf.class.cast(authConf);\n+\n         Pac4jGenericOidcClientProperties props = new Pac4jGenericOidcClientProperties();\n         props.setId(conf.getId());\n         props.setCustomParams(conf.getCustomParams());\n@@ -183,12 +209,16 @@ private static void mapOidcAuthModuleConf(final CasConfigurationProperties casPr\n         props.setPrincipalAttributeId(conf.getUserIdAttribute());\n         Pac4jOidcClientProperties client = new Pac4jOidcClientProperties();\n         client.setGeneric(props);\n+\n         casProperties.getAuthn().getPac4j().getOidc().add(client);\n     }\n \n-    private static void mapRadiusAuthModuleConf(final CasConfigurationProperties casProperties,\n-                                                final AuthModuleConf authConf) {\n+    private static void mapRadiusAuthModuleConf(\n+            final CasConfigurationProperties casProperties,\n+            final AuthModuleConf authConf) {\n+\n         RadiusAuthModuleConf conf = RadiusAuthModuleConf.class.cast(authConf);\n+\n         RadiusProperties props = new RadiusProperties();\n         props.setName(conf.getName());\n \n@@ -211,9 +241,12 @@ private static void mapRadiusAuthModuleConf(final CasConfigurationProperties cas\n         casProperties.getAuthn().setRadius(props);\n     }\n \n-    private static void mapSaml2IdPAuthModuleConf(final CasConfigurationProperties casProperties,\n-                                                  final AuthModuleConf authConf) {\n+    private static void mapSaml2IdPAuthModuleConf(\n+            final CasConfigurationProperties casProperties,\n+            final AuthModuleConf authConf) {\n+\n         SAML2IdPAuthModuleConf conf = SAML2IdPAuthModuleConf.class.cast(authConf);\n+\n         Pac4jSamlClientProperties props = new Pac4jSamlClientProperties();\n         props.setAcceptedSkew(conf.getAcceptedSkew());\n         props.setAssertionConsumerServiceIndex(conf.getAssertionConsumerServiceIndex());\n@@ -236,28 +269,28 @@ private static void mapSaml2IdPAuthModuleConf(final CasConfigurationProperties c\n         props.setSignatureCanonicalizationAlgorithm(conf.getSignatureCanonicalizationAlgorithm());\n         props.setSignatureReferenceDigestMethods(conf.getSignatureReferenceDigestMethods());\n         props.setPrincipalAttributeId(conf.getUserIdAttribute());\n-        if (StringUtils.isBlank(conf.getNameIdPolicyAllowCreate())) {\n-            props.setNameIdPolicyAllowCreate(TriStateBoolean.UNDEFINED);\n-        } else {\n-            props.setNameIdPolicyAllowCreate(TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n-        }\n+        props.setNameIdPolicyAllowCreate(StringUtils.isBlank(conf.getNameIdPolicyAllowCreate())\n+                ? TriStateBoolean.UNDEFINED\n+                : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n+\n         casProperties.getAuthn().getPac4j().getSaml().add(props);\n     }\n \n     @Override\n     public PropertySource<?> locate(final Environment environment) {\n-        if (!WARestClient.isReady()) {\n+        SyncopeClient syncopeClient = waRestClient.getSyncopeClient();\n+        if (syncopeClient == null) {\n             LOG.warn(\"Application context is not ready to bootstrap WA configuration\");\n             return null;\n         }\n+\n         LOG.info(\"Bootstrapping WA configuration\");\n-        AuthModuleService authService = waRestClient.getSyncopeClient().getService(AuthModuleService.class);\n+        AuthModuleService authService = syncopeClient.getService(AuthModuleService.class);\n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n         authService.list().forEach(authModuleTO -> {\n-\n             AuthModuleConf authConf = authModuleTO.getConf();\n-            LOG.debug(\"Mapping auth module {}:{} as conf {}\", authModuleTO.getKey(),\n-                authModuleTO.getName(), authConf.getName());\n+            LOG.debug(\"Mapping auth module {}:{} as conf {}\",\n+                    authModuleTO.getKey(), authModuleTO.getName(), authConf.getName());\n             if (authConf instanceof LDAPAuthModuleConf) {\n                 mapLdapAuthModuleConf(casProperties, authConf);\n             }"},{"sha":"b5e8d6e3107baab30328158d08bc750b85f045b2","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/WARestClient.java","status":"modified","additions":21,"deletions":18,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWARestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWARestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FWARestClient.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.wa.bootstrap;\n \n+import java.util.Optional;\n import org.apereo.cas.util.spring.ApplicationContextProvider;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -54,43 +55,45 @@ public WARestClient(\n \n     public SyncopeClient getSyncopeClient() {\n         synchronized (this) {\n-            if (client == null && isReady()) {\n-                try {\n-                    client = new SyncopeClientFactoryBean().\n-                            setAddress(getCore().getAddress()).\n-                            setUseCompression(useGZIPCompression).\n-                            create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey));\n-                } catch (Exception e) {\n-                    LOG.error(\"Could not init SyncopeClient\", e);\n-                }\n+            if (client == null) {\n+                getCore().ifPresent(core -> {\n+                    try {\n+                        client = new SyncopeClientFactoryBean().\n+                                setAddress(core.getAddress()).\n+                                setUseCompression(useGZIPCompression).\n+                                create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey));\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not init SyncopeClient\", e);\n+                    }\n+                });\n             }\n-        }\n \n-        return client;\n+            return client;\n+        }\n     }\n \n-    private static NetworkService getCore() {\n+    private static Optional<NetworkService> getCore() {\n         try {\n-            final ApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+            ApplicationContext context = ApplicationContextProvider.getApplicationContext();\n             if (context == null) {\n-                return null;\n+                return Optional.empty();\n             }\n \n             Collection<ServiceOps> serviceOpsList = context.getBeansOfType(ServiceOps.class).values();\n             if (serviceOpsList.isEmpty()) {\n-                return null;\n+                return Optional.empty();\n             }\n             ServiceOps serviceOps = serviceOpsList.iterator().next();\n-            return serviceOps.get(NetworkService.Type.CORE);\n+            return Optional.of(serviceOps.get(NetworkService.Type.CORE));\n         } catch (KeymasterException e) {\n             LOG.trace(e.getMessage());\n         }\n-        return null;\n+        return Optional.empty();\n     }\n \n     public static boolean isReady() {\n         try {\n-            return getCore() != null;\n+            return getCore().isPresent();\n         } catch (Exception e) {\n             LOG.trace(e.getMessage());\n         }"},{"sha":"180672fb5da3205c169acebfa22c3d5b6b3e9275","filename":"wa/starter/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -243,6 +243,12 @@ under the License.\n       <artifactId>bcpkix-jdk15on</artifactId>\n     </dependency>\n     \n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-transports-http-jetty</artifactId>\n+      <version>${cxf.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.syncope.common.keymaster</groupId>\n       <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>"},{"sha":"11e1fc231fe4abaccf061ca9e97ece9121896cc7","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeServiceRegistry.java","status":"modified","additions":39,"deletions":24,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeServiceRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeServiceRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeServiceRegistry.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -22,6 +22,7 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.stream.Collectors;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.services.AbstractServiceRegistry;\n@@ -38,7 +39,7 @@ public class SyncopeServiceRegistry extends AbstractServiceRegistry {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeServiceRegistry.class);\n \n-    private final WARestClient restClient;\n+    private final WARestClient waRestClient;\n \n     private final RegisteredServiceMapper registeredServiceMapper;\n \n@@ -49,7 +50,7 @@ public SyncopeServiceRegistry(\n             final Collection<ServiceRegistryListener> serviceRegistryListeners) {\n \n         super(applicationContext, serviceRegistryListeners);\n-        this.restClient = restClient;\n+        this.waRestClient = restClient;\n         this.registeredServiceMapper = registeredServiceMapper;\n     }\n \n@@ -65,69 +66,83 @@ public boolean delete(final RegisteredService registeredService) {\n \n     @Override\n     public Collection<RegisteredService> load() {\n-        if (WARestClient.isReady()) {\n+        SyncopeClient syncopeClient = waRestClient.getSyncopeClient();\n+        if (syncopeClient == null) {\n+            LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+            return List.of();\n+        } else {\n             LOG.info(\"Loading application definitions\");\n-            return restClient.getSyncopeClient().getService(WAClientAppService.class).list().stream().\n+            return waRestClient.getSyncopeClient().getService(WAClientAppService.class).list().stream().\n                     map(clientApp -> registeredServiceMapper.toRegisteredService(clientApp)).\n                     collect(Collectors.toList());\n         }\n-        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n-        return List.of();\n     }\n \n     @Override\n     public RegisteredService findServiceById(final long id) {\n-        if (WARestClient.isReady()) {\n+        SyncopeClient syncopeClient = waRestClient.getSyncopeClient();\n+        if (syncopeClient == null) {\n+            LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+            return null;\n+        } else {\n             LOG.info(\"Searching for application definition by id {}\", id);\n-            return registeredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+            return registeredServiceMapper.toRegisteredService(waRestClient.getSyncopeClient().\n                     getService(WAClientAppService.class).read(id, null));\n         }\n-        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n-        return null;\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends RegisteredService> T findServiceById(final long id, final Class<T> clazz) {\n-        if (WARestClient.isReady()) {\n+        SyncopeClient syncopeClient = waRestClient.getSyncopeClient();\n+        if (syncopeClient == null) {\n+            LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+            return null;\n+        } else {\n             LOG.info(\"Searching for application definition by id {} and type {}\", id, clazz);\n             if (clazz.isInstance(OidcRegisteredService.class)) {\n-                return (T) registeredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                return (T) registeredServiceMapper.toRegisteredService(waRestClient.getSyncopeClient().\n                         getService(WAClientAppService.class).read(id, ClientAppType.OIDCRP));\n             } else if (clazz.isInstance(SamlRegisteredService.class)) {\n-                return (T) registeredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                return (T) registeredServiceMapper.toRegisteredService(waRestClient.getSyncopeClient().\n                         getService(WAClientAppService.class).read(id, ClientAppType.SAML2SP));\n+            } else {\n+                return null;\n             }\n         }\n-        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n-        return null;\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends RegisteredService> T findServiceByExactServiceName(final String name, final Class<T> clazz) {\n-        if (WARestClient.isReady()) {\n+        SyncopeClient syncopeClient = waRestClient.getSyncopeClient();\n+        if (syncopeClient == null) {\n+            LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+            return null;\n+        } else {\n             LOG.info(\"Searching for application definition by name {} and type {}\", name, clazz);\n             if (clazz.isInstance(OidcRegisteredService.class)) {\n-                return (T) registeredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                return (T) registeredServiceMapper.toRegisteredService(waRestClient.getSyncopeClient().\n                         getService(WAClientAppService.class).read(name, ClientAppType.OIDCRP));\n             } else if (clazz.isInstance(SamlRegisteredService.class)) {\n-                return (T) registeredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                return (T) registeredServiceMapper.toRegisteredService(waRestClient.getSyncopeClient().\n                         getService(WAClientAppService.class).read(name, ClientAppType.SAML2SP));\n+            } else {\n+                return null;\n             }\n         }\n-        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n-        return null;\n     }\n \n     @Override\n     public RegisteredService findServiceByExactServiceName(final String name) {\n-        if (WARestClient.isReady()) {\n+        SyncopeClient syncopeClient = waRestClient.getSyncopeClient();\n+        if (syncopeClient == null) {\n+            LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+            return null;\n+        } else {\n             LOG.info(\"Searching for application definition by name {}\", name);\n-            return registeredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+            return registeredServiceMapper.toRegisteredService(waRestClient.getSyncopeClient().\n                     getService(WAClientAppService.class).read(name, null));\n         }\n-        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n-        return null;\n     }\n }"},{"sha":"1dd690f7be49d73bcf82ba757de2c609cc21c118","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAAuditTrailManager.java","status":"modified","additions":18,"deletions":17,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAAuditTrailManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAAuditTrailManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAAuditTrailManager.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -16,11 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter;\n \n+import java.time.LocalDate;\n+import java.util.Map;\n+import java.util.Set;\n import org.apereo.cas.audit.spi.AbstractAuditTrailManager;\n-\n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.log.AuditEntry;\n@@ -32,48 +33,48 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.time.LocalDate;\n-import java.util.Map;\n-import java.util.Set;\n+import org.apache.syncope.client.lib.SyncopeClient;\n \n public class SyncopeWAAuditTrailManager extends AbstractAuditTrailManager {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAAuditTrailManager.class);\n+\n     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n-    private final WARestClient restClient;\n+    private final WARestClient waRestClient;\n \n     SyncopeWAAuditTrailManager(final WARestClient restClient) {\n         super(true);\n-        this.restClient = restClient;\n+        this.waRestClient = restClient;\n     }\n \n     @Override\n     protected void saveAuditRecord(final AuditActionContext audit) {\n-        if (!WARestClient.isReady()) {\n+        SyncopeClient syncopeClient = waRestClient.getSyncopeClient();\n+        if (syncopeClient == null) {\n             LOG.debug(\"Syncope client is not yet ready to store audit record\");\n             return;\n         }\n \n         LOG.info(\"Loading application definitions\");\n-        LoggerService loggerService = restClient.getSyncopeClient().\n-            getService(LoggerService.class);\n+        LoggerService loggerService = syncopeClient.getService(LoggerService.class);\n \n-        try {             \n+        try {\n             String output = OBJECT_MAPPER.writeValueAsString(Map.of(\"resource\", audit.getResourceOperatedUpon(),\n-                \"clientIpAddress\", audit.getClientIpAddress(),\n-                \"serverIpAddress\", audit.getServerIpAddress()));\n+                    \"clientIpAddress\", audit.getClientIpAddress(),\n+                    \"serverIpAddress\", audit.getServerIpAddress()));\n \n             AuditEntry auditEntry = new AuditEntry();\n             auditEntry.setWho(audit.getPrincipal());\n             auditEntry.setDate(audit.getWhenActionWasPerformed());\n             auditEntry.setOutput(output);\n             AuditElements.Result result = StringUtils.containsIgnoreCase(audit.getActionPerformed(), \"fail\")\n-                ? AuditElements.Result.FAILURE\n-                : AuditElements.Result.SUCCESS;\n+                    ? AuditElements.Result.FAILURE\n+                    : AuditElements.Result.SUCCESS;\n \n             AuditLoggerName auditLogger = new AuditLoggerName(AuditElements.EventCategoryType.WA,\n-                \"LoggerLogic\", AuditElements.AUTHENTICATION_CATEGORY.toUpperCase(),\n-                audit.getActionPerformed(), result);\n+                    \"LoggerLogic\", AuditElements.AUTHENTICATION_CATEGORY.toUpperCase(),\n+                    audit.getActionPerformed(), result);\n \n             auditEntry.setLogger(auditLogger);\n             loggerService.create(auditEntry);"},{"sha":"62e2d7b994ceee6b43f8c66c6638e6129566cf27","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAConfiguration.java","status":"modified","additions":4,"deletions":15,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -82,53 +82,42 @@ public class SyncopeWAConfiguration {\n     @Bean\n     public RegisteredServiceMapper registeredServiceMapper() {\n         Map<String, AuthMapper> authPolicyConfMappers = new HashMap<>();\n-        Map<String, AuthMapper> registeredServiceAuthenticationPolicyMappers = new HashMap<>();\n         ctx.getBeansOfType(AuthMapper.class).forEach((name, bean) -> {\n             AuthMapFor authMapFor = ctx.findAnnotationOnBean(name, AuthMapFor.class);\n             if (authMapFor != null) {\n                 authPolicyConfMappers.put(authMapFor.authPolicyConfClass().getName(), bean);\n-                registeredServiceAuthenticationPolicyMappers.put(\n-                        authMapFor.registeredServiceAuthenticationPolicyClass().getName(), bean);\n             }\n         });\n \n         Map<String, AccessMapper> accessPolicyConfMappers = new HashMap<>();\n-        Map<String, AccessMapper> registeredServiceAccessStrategyMappers = new HashMap<>();\n         ctx.getBeansOfType(AccessMapper.class).forEach((name, bean) -> {\n             AccessMapFor accessMapFor = ctx.findAnnotationOnBean(name, AccessMapFor.class);\n             if (accessMapFor != null) {\n                 accessPolicyConfMappers.put(accessMapFor.accessPolicyConfClass().getName(), bean);\n-                registeredServiceAccessStrategyMappers.put(\n-                        accessMapFor.registeredServiceAccessStrategyClass().getName(), bean);\n             }\n         });\n \n         Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers = new HashMap<>();\n-        Map<String, AttrReleaseMapper> registeredServiceAttributeReleasePolicyMappers = new HashMap<>();\n         ctx.getBeansOfType(AttrReleaseMapper.class).forEach((name, bean) -> {\n             AttrReleaseMapFor attrReleaseMapFor = ctx.findAnnotationOnBean(name, AttrReleaseMapFor.class);\n             if (attrReleaseMapFor != null) {\n                 attrReleasePolicyConfMappers.put(attrReleaseMapFor.attrReleasePolicyConfClass().getName(), bean);\n-                registeredServiceAttributeReleasePolicyMappers.put(\n-                        attrReleaseMapFor.registeredServiceAttributeReleasePolicyClass().getName(), bean);\n             }\n         });\n \n         Map<String, ClientAppMapper> clientAppTOMappers = new HashMap<>();\n-        Map<String, ClientAppMapper> registeredServiceMappers = new HashMap<>();\n         ctx.getBeansOfType(ClientAppMapper.class).forEach((name, bean) -> {\n             ClientAppMapFor clientAppMapFor = ctx.findAnnotationOnBean(name, ClientAppMapFor.class);\n             if (clientAppMapFor != null) {\n                 clientAppTOMappers.put(clientAppMapFor.clientAppClass().getName(), bean);\n-                registeredServiceMappers.put(clientAppMapFor.registeredServiceClass().getName(), bean);\n             }\n         });\n \n         return new RegisteredServiceMapper(\n-                authPolicyConfMappers, registeredServiceAuthenticationPolicyMappers,\n-                accessPolicyConfMappers, registeredServiceAccessStrategyMappers,\n-                attrReleasePolicyConfMappers, registeredServiceAttributeReleasePolicyMappers,\n-                clientAppTOMappers, registeredServiceMappers);\n+                authPolicyConfMappers,\n+                accessPolicyConfMappers,\n+                attrReleasePolicyConfMappers,\n+                clientAppTOMappers);\n     }\n \n     @Autowired"},{"sha":"9ed254328844d704acd94aa6d18a7c34743f959b","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AccessMapFor.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapFor.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -23,13 +23,10 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n-import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n \n @Target({ ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)\n public @interface AccessMapFor {\n \n     Class<? extends AccessPolicyConf> accessPolicyConfClass();\n-\n-    Class<? extends RegisteredServiceAccessStrategy> registeredServiceAccessStrategyClass();\n }"},{"sha":"d0eb5ab5706088f6e12a1bb9427ca7d170e8b37e","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AccessMapper.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -24,6 +24,4 @@\n public interface AccessMapper {\n \n     RegisteredServiceAccessStrategy build(AccessPolicyConf conf);\n-\n-    AccessPolicyConf build(RegisteredServiceAccessStrategy strategy);\n }"},{"sha":"bcb44c874b88d84b6d1c3fbaecf09bd99292ff73","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AllowedAttrReleaseMapper.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAllowedAttrReleaseMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAllowedAttrReleaseMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAllowedAttrReleaseMapper.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -25,9 +25,7 @@\n import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n import org.springframework.stereotype.Component;\n \n-@AttrReleaseMapFor(\n-        attrReleasePolicyConfClass = AllowedAttrReleasePolicyConf.class,\n-        registeredServiceAttributeReleasePolicyClass = ReturnAllowedAttributeReleasePolicy.class)\n+@AttrReleaseMapFor(attrReleasePolicyConfClass = AllowedAttrReleasePolicyConf.class)\n @Component\n public class AllowedAttrReleaseMapper implements AttrReleaseMapper {\n \n@@ -45,10 +43,4 @@ public RegisteredServiceAttributeReleasePolicy build(final AttrReleasePolicyConf\n         return attributeReleasePolicy;\n     }\n \n-    @Override\n-    public AttrReleasePolicyConf build(final RegisteredServiceAttributeReleasePolicy policy) {\n-        AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n-        conf.getAllowedAttrs().addAll(((ReturnAllowedAttributeReleasePolicy) policy).getAllowedAttributes());\n-        return conf;\n-    }\n }"},{"sha":"f28390dce8381de07a223ad58dae058c506cbbfe","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AttrReleaseMapFor.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapFor.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -23,13 +23,10 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n-import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n \n @Target({ ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)\n public @interface AttrReleaseMapFor {\n \n     Class<? extends AttrReleasePolicyConf> attrReleasePolicyConfClass();\n-\n-    Class<? extends RegisteredServiceAttributeReleasePolicy> registeredServiceAttributeReleasePolicyClass();\n }"},{"sha":"ba5e916beba79084efccc055d8cf301d35bf8e92","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AttrReleaseMapper.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -24,6 +24,4 @@\n public interface AttrReleaseMapper {\n \n     RegisteredServiceAttributeReleasePolicy build(AttrReleasePolicyConf conf);\n-\n-    AttrReleasePolicyConf build(RegisteredServiceAttributeReleasePolicy policy);\n }"},{"sha":"f5fb5e4a06217e161e20cf65f432c845a1386d76","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AuthMapFor.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapFor.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -23,13 +23,10 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n-import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n \n @Target({ ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)\n public @interface AuthMapFor {\n \n     Class<? extends AuthPolicyConf> authPolicyConfClass();\n-\n-    Class<? extends RegisteredServiceAuthenticationPolicy> registeredServiceAuthenticationPolicyClass();\n }"},{"sha":"c021b66bfd0983ca60a86fd639c83a9b7a29deef","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AuthMapper.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -24,6 +24,4 @@\n public interface AuthMapper {\n \n     RegisteredServiceAuthenticationPolicy build(AuthPolicyConf conf);\n-\n-    AuthPolicyConf build(RegisteredServiceAuthenticationPolicy policy);\n }"},{"sha":"0d61c29e237728c4376be64a58696284306c5cf0","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/ClientAppMapFor.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapFor.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -23,13 +23,10 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n import org.apache.syncope.common.lib.to.client.ClientAppTO;\n-import org.apereo.cas.services.RegisteredService;\n \n @Target({ ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)\n public @interface ClientAppMapFor {\n \n     Class<? extends ClientAppTO> clientAppClass();\n-\n-    Class<? extends RegisteredService> registeredServiceClass();\n }"},{"sha":"b783136984b5e87ec98eadaf5ecbe201c69e56b3","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/ClientAppMapper.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -31,6 +31,4 @@ RegisteredService build(\n             RegisteredServiceAuthenticationPolicy authPolicy,\n             RegisteredServiceAccessStrategy accessStrategy,\n             RegisteredServiceAttributeReleasePolicy attributeReleasePolicy);\n-\n-    ClientAppTO buid(RegisteredService service);\n }"},{"sha":"323b3b1264f0d1957779345a1c0db06b9847743d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAccessMapper.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -24,9 +24,7 @@\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.springframework.stereotype.Component;\n \n-@AccessMapFor(\n-        accessPolicyConfClass = DefaultAccessPolicyConf.class,\n-        registeredServiceAccessStrategyClass = DefaultRegisteredServiceAccessStrategy.class)\n+@AccessMapFor(accessPolicyConfClass = DefaultAccessPolicyConf.class)\n @Component\n public class DefaultAccessMapper implements AccessMapper {\n \n@@ -38,12 +36,4 @@ public RegisteredServiceAccessStrategy build(final AccessPolicyConf conf) {\n         return accessStrategy;\n     }\n \n-    @Override\n-    public AccessPolicyConf build(final RegisteredServiceAccessStrategy strategy) {\n-        DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n-        conf.setEnabled(((DefaultRegisteredServiceAccessStrategy) strategy).isEnabled());\n-        conf.setSsoEnabled(((DefaultRegisteredServiceAccessStrategy) strategy).isSsoEnabled());\n-        conf.getRequiredAttrs().putAll(((DefaultRegisteredServiceAccessStrategy) strategy).getRejectedAttributes());\n-        return conf;\n-    }\n }"},{"sha":"10945e7458fc58b31c0bf45a39b60e6b3589b0e0","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAuthMapper.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n+import java.util.HashSet;\n import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n@@ -26,9 +27,7 @@\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n import org.springframework.stereotype.Component;\n \n-@AuthMapFor(\n-        authPolicyConfClass = DefaultAuthPolicyConf.class,\n-        registeredServiceAuthenticationPolicyClass = DefaultRegisteredServiceAuthenticationPolicy.class)\n+@AuthMapFor(authPolicyConfClass = DefaultAuthPolicyConf.class)\n @Component\n public class DefaultAuthMapper implements AuthMapper {\n \n@@ -39,15 +38,12 @@ public RegisteredServiceAuthenticationPolicy build(final AuthPolicyConf conf) {\n                 new AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria();\n         criteria.setTryAll(((DefaultAuthPolicyCriteriaConf) conf.getCriteria()).isAll());\n         authPolicy.setCriteria(criteria);\n+\n+        if (conf instanceof DefaultAuthPolicyConf && !((DefaultAuthPolicyConf) conf).getAuthModules().isEmpty()) {\n+            authPolicy.setRequiredAuthenticationHandlers(\n+                    new HashSet<>(((DefaultAuthPolicyConf) conf).getAuthModules()));\n+        }\n         return authPolicy;\n     }\n \n-    @Override\n-    public AuthPolicyConf build(final RegisteredServiceAuthenticationPolicy policy) {\n-        DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n-        DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n-        criteria.setAll(((DefaultAuthPolicyCriteriaConf) policy.getCriteria()).isAll());\n-        conf.setCriteria(criteria);\n-        return conf;\n-    }\n }"},{"sha":"a14923eeaa9afac2fc550b11f23df72261aa4347","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPTOMapper.java","status":"modified","additions":2,"deletions":21,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -18,19 +18,17 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n-import java.util.Arrays;\n import java.util.HashSet;\n import org.apache.syncope.common.lib.to.client.ClientAppTO;\n import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n-import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apereo.cas.services.OidcRegisteredService;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n import org.springframework.stereotype.Component;\n \n-@ClientAppMapFor(clientAppClass = OIDCRPTO.class, registeredServiceClass = OidcRegisteredService.class)\n+@ClientAppMapFor(clientAppClass = OIDCRPTO.class)\n @Component\n public class OIDCRPTOMapper implements ClientAppMapper {\n \n@@ -47,6 +45,7 @@ public RegisteredService build(\n \n         String redirectURIs = String.join(\"|\", rp.getRedirectUris());\n         service.setServiceId(redirectURIs);\n+        service.setId(rp.getClientAppId());\n         service.setName(rp.getName());\n         service.setDescription(rp.getDescription());\n         service.setAccessStrategy(accessStrategy);\n@@ -65,22 +64,4 @@ public RegisteredService build(\n         return service;\n     }\n \n-    public ClientAppTO buid(final RegisteredService service) {\n-        OidcRegisteredService oidc = OidcRegisteredService.class.cast(service);\n-\n-        OIDCRPTO oidcrpto = new OIDCRPTO();\n-\n-        oidcrpto.getRedirectUris().addAll(Arrays.asList(oidc.getServiceId().split(\"|\")));\n-        oidcrpto.setName(oidc.getName());\n-        oidcrpto.setDescription(oidc.getDescription());\n-        oidcrpto.setClientId(oidc.getClientId());\n-        oidcrpto.setClientSecret(oidc.getClientSecret());\n-        oidcrpto.setSignIdToken(oidc.isSignIdToken());\n-        oidcrpto.setJwks(oidc.getJwks());\n-        oidcrpto.setSubjectType(OIDCSubjectType.valueOf(oidc.getSubjectType()));\n-        oidcrpto.getSupportedGrantTypes().addAll(oidc.getSupportedGrantTypes());\n-        oidcrpto.getSupportedResponseTypes().addAll(oidc.getSupportedResponseTypes());\n-\n-        return oidcrpto;\n-    }\n }"},{"sha":"3a310095f656afb982d00f0b6a1a66e492d9f044","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/RegisteredServiceMapper.java","status":"modified","additions":8,"deletions":51,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -21,49 +21,33 @@\n import java.util.Map;\n import java.util.Optional;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n-import org.springframework.stereotype.Component;\n+import org.apereo.cas.services.ReturnMappedAttributeReleasePolicy;\n \n-@Component\n public class RegisteredServiceMapper {\n \n     protected final Map<String, AuthMapper> authPolicyConfMappers;\n \n-    protected final Map<String, AuthMapper> registeredServiceAuthenticationPolicyMappers;\n-\n     protected final Map<String, AccessMapper> accessPolicyConfMappers;\n \n-    protected final Map<String, AccessMapper> registeredServiceAccessStrategyMappers;\n-\n     protected final Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers;\n \n-    protected final Map<String, AttrReleaseMapper> registeredServiceAttributeReleasePolicyMappers;\n-\n     protected final Map<String, ClientAppMapper> clientAppTOMappers;\n \n-    protected final Map<String, ClientAppMapper> registeredServiceMappers;\n-\n     public RegisteredServiceMapper(\n             final Map<String, AuthMapper> authPolicyConfMappers,\n-            final Map<String, AuthMapper> registeredServiceAuthenticationPolicyMappers,\n             final Map<String, AccessMapper> accessPolicyConfMappers,\n-            final Map<String, AccessMapper> registeredServiceAccessStrategyMappers,\n             final Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers,\n-            final Map<String, AttrReleaseMapper> registeredServiceAttributeReleasePolicyMappers,\n-            final Map<String, ClientAppMapper> clientAppTOMappers,\n-            final Map<String, ClientAppMapper> registeredServiceMappers) {\n+            final Map<String, ClientAppMapper> clientAppTOMappers) {\n \n         this.authPolicyConfMappers = authPolicyConfMappers;\n-        this.registeredServiceAuthenticationPolicyMappers = registeredServiceAuthenticationPolicyMappers;\n         this.accessPolicyConfMappers = accessPolicyConfMappers;\n-        this.registeredServiceAccessStrategyMappers = registeredServiceAccessStrategyMappers;\n         this.attrReleasePolicyConfMappers = attrReleasePolicyConfMappers;\n-        this.registeredServiceAttributeReleasePolicyMappers = registeredServiceAttributeReleasePolicyMappers;\n         this.clientAppTOMappers = clientAppTOMappers;\n-        this.registeredServiceMappers = registeredServiceMappers;\n     }\n \n     public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n@@ -84,11 +68,15 @@ public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n         }\n \n         RegisteredServiceAttributeReleasePolicy attributeReleasePolicy = null;\n-        if (clientApp.getAttrReleasePolicyConf() != null) {\n+        if (!clientApp.getReleaseAttrs().isEmpty()) {\n+            attributeReleasePolicy = new ReturnMappedAttributeReleasePolicy(clientApp.getReleaseAttrs());\n+        } else if (clientApp.getAttrReleasePolicyConf() != null) {\n             AttrReleaseMapper attrReleasePolicyConfMapper =\n                     attrReleasePolicyConfMappers.get(clientApp.getAttrReleasePolicyConf().getClass().getName());\n             attributeReleasePolicy = Optional.ofNullable(attrReleasePolicyConfMapper).\n                     map(mapper -> mapper.build(clientApp.getAttrReleasePolicyConf())).orElse(null);\n+        } else {\n+            attributeReleasePolicy = new DenyAllAttributeReleasePolicy();\n         }\n \n         ClientAppMapper clientAppMapper = clientAppTOMappers.get(clientApp.getClientAppTO().getClass().getName());\n@@ -97,35 +85,4 @@ public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n         }\n         return clientAppMapper.build(clientApp.getClientAppTO(), authPolicy, accessStrategy, attributeReleasePolicy);\n     }\n-\n-    public WAClientApp fromRegisteredService(final RegisteredService service) {\n-        WAClientApp clientApp = new WAClientApp();\n-\n-        if (service.getAuthenticationPolicy() != null) {\n-            AuthMapper authMapper = registeredServiceAuthenticationPolicyMappers.get(\n-                    service.getAuthenticationPolicy().getClass().getName());\n-            clientApp.setAuthPolicyConf(Optional.ofNullable(authMapper).\n-                    map(mapper -> mapper.build(service.getAuthenticationPolicy())).orElse(null));\n-        }\n-\n-        if (service.getAccessStrategy() != null) {\n-            AccessMapper accessPolicyConfMapper = registeredServiceAccessStrategyMappers.get(\n-                    service.getAccessStrategy().getClass().getName());\n-            clientApp.setAccessPolicyConf(Optional.ofNullable(accessPolicyConfMapper).\n-                    map(mapper -> mapper.build(service.getAccessStrategy())).orElse(null));\n-        }\n-\n-        if (service.getAttributeReleasePolicy() != null) {\n-            AttrReleaseMapper attrReleasePolicyConfMapper = registeredServiceAttributeReleasePolicyMappers.get(\n-                    service.getAttributeReleasePolicy().getClass().getName());\n-            clientApp.setAttrReleasePolicyConf(Optional.ofNullable(attrReleasePolicyConfMapper).\n-                    map(mapper -> mapper.build(service.getAttributeReleasePolicy())).orElse(null));\n-        }\n-\n-        ClientAppMapper clientAppMapper = registeredServiceMappers.get(service.getClass().getName());\n-        clientApp.setClientAppTO(Optional.ofNullable(clientAppMapper).\n-                map(mapper -> mapper.buid(service)).orElse(null));\n-\n-        return clientApp;\n-    }\n }"},{"sha":"170bb2854199c682c5f8c2423e25b8e1c818865e","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/SAML2SPTOMapper.java","status":"modified","additions":3,"deletions":29,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -20,15 +20,14 @@\n \n import org.apache.syncope.common.lib.to.client.ClientAppTO;\n import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n-import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n import org.apereo.cas.support.saml.services.SamlRegisteredService;\n import org.springframework.stereotype.Component;\n \n-@ClientAppMapFor(clientAppClass = SAML2SPTO.class, registeredServiceClass = SamlRegisteredService.class)\n+@ClientAppMapFor(clientAppClass = SAML2SPTO.class)\n @Component\n public class SAML2SPTOMapper implements ClientAppMapper {\n \n@@ -44,6 +43,7 @@ public RegisteredService build(\n         SamlRegisteredService service = new SamlRegisteredService();\n \n         service.setServiceId(sp.getEntityId());\n+        service.setId(sp.getClientAppId());\n         service.setName(sp.getName());\n         service.setDescription(sp.getDescription());\n         service.setAccessStrategy(accessStrategy);\n@@ -58,37 +58,11 @@ public RegisteredService build(\n         service.setEncryptAssertions(sp.isEncryptAssertions());\n         service.setRequiredAuthenticationContextClass(sp.getRequiredAuthenticationContextClass());\n         service.setRequiredNameIdFormat(sp.getRequiredNameIdFormat().getNameId());\n-        service.setSkewAllowance(sp.getSkewAllowance());\n+        service.setSkewAllowance(sp.getSkewAllowance() == null ? 0 : sp.getSkewAllowance());\n         service.setNameIdQualifier(sp.getNameIdQualifier());\n         service.setAssertionAudiences(sp.getAssertionAudiences());\n         service.setServiceProviderNameIdQualifier(sp.getServiceProviderNameIdQualifier());\n \n         return service;\n     }\n-\n-    @Override\n-    public ClientAppTO buid(final RegisteredService service) {\n-        SamlRegisteredService saml = SamlRegisteredService.class.cast(service);\n-\n-        SAML2SPTO saml2spto = new SAML2SPTO();\n-\n-        saml2spto.setEntityId(saml.getServiceId());\n-        saml2spto.setName(saml.getName());\n-        saml2spto.setDescription(saml.getDescription());\n-\n-        saml2spto.setMetadataLocation(saml.getMetadataLocation());\n-        saml2spto.setMetadataSignatureLocation(saml.getMetadataSignatureLocation());\n-        saml2spto.setSignAssertions(saml.isSignAssertions());\n-        saml2spto.setSignResponses(saml.isSignResponses());\n-        saml2spto.setEncryptionOptional(saml.isEncryptionOptional());\n-        saml2spto.setEncryptAssertions(saml.isEncryptAssertions());\n-        saml2spto.setRequiredAuthenticationContextClass(saml.getRequiredAuthenticationContextClass());\n-        saml2spto.setRequiredNameIdFormat(SAML2SPNameId.valueOf(saml.getRequiredNameIdFormat()));\n-        saml2spto.setSkewAllowance(saml.getSkewAllowance());\n-        saml2spto.setNameIdQualifier(saml.getNameIdQualifier());\n-        saml2spto.setAssertionAudiences(saml.getAssertionAudiences());\n-        saml2spto.setServiceProviderNameIdQualifier(saml.getServiceProviderNameIdQualifier());\n-\n-        return saml2spto;\n-    }\n }"},{"sha":"a3fee6b285c50b5dc7ace3f94b4ce2ab6ead34a4","filename":"wa/starter/src/main/resources/application.properties","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -28,12 +28,15 @@ server.servlet.contextPath=/syncope-wa\n \n spring.resources.static-locations=classpath:/thymeleaf/static,classpath:/static\n \n-management.endpoints.web.exposure.include=health,loggers,refresh\n+management.endpoints.web.exposure.include=health,loggers,refresh,registeredServices\n management.endpoint.health.show-details=always\n \n management.endpoint.health.enabled=true\n management.endpoint.loggers.enabled=true\n management.endpoint.refresh.enabled=true\n+management.endpoint.registeredServices.enabled=true\n+\n+cas.serviceRegistry.schedule.enabled=false\n \n ##\n # Allow configuration classes to override bean definitions from Spring Boot"},{"sha":"990c7fd71a1547253781cea582347d2a9152c6af","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/AbstractTest.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter;\n+\n+import java.util.UUID;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, properties = {\n+    \"cas.authn.accept.users=mrossi::password\",\n+    \"cas.sso.allow-missing-service-parameter=true\"\n+})\n+@ContextConfiguration(initializers = ZookeeperTestingServer.class)\n+public abstract class AbstractTest {\n+\n+    @LocalServerPort\n+    protected int port;\n+\n+    protected static String getUUIDString() {\n+        return UUID.randomUUID().toString().substring(0, 8);\n+    }\n+}"},{"sha":"938f85025698980dbbbec22f161f42cc04b96cde","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/BasicTest.java","status":"renamed","additions":2,"deletions":13,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FBasicTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FBasicTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FBasicTest.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -44,19 +44,8 @@\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n import org.junit.jupiter.api.Test;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.web.server.LocalServerPort;\n-import org.springframework.test.context.ContextConfiguration;\n-\n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, properties = {\n-    \"cas.authn.accept.users=mrossi::password\",\n-    \"cas.sso.allow-missing-service-parameter=true\"\n-})\n-@ContextConfiguration(initializers = ZookeeperTestingServer.class)\n-public class SyncopeWATest {\n-\n-    @LocalServerPort\n-    private int port;\n+\n+public class BasicTest extends AbstractTest {\n \n     private String getLoginURL() {\n         return \"http://localhost:\" + port + \"/syncope-wa/login\";","previous_filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeWATest.java"},{"sha":"16d4cabd41c7f5d2d2bb4d087856669369255648","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeCoreTestingServer.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.ws.rs.NotFoundException;\n+import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;\n+import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.context.event.ContextRefreshedEvent;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SyncopeCoreTestingServer implements ApplicationListener<ContextRefreshedEvent> {\n+\n+    public static final String ADDRESS = \"http://localhost:9080/syncope/rest\";\n+\n+    public static final List<WAClientApp> APPS = new ArrayList<>();\n+\n+    @Autowired\n+    private ServiceOps serviceOps;\n+\n+    @Override\n+    public void onApplicationEvent(final ContextRefreshedEvent event) {\n+        synchronized (serviceOps) {\n+            if (serviceOps.list(NetworkService.Type.CORE).isEmpty()) {\n+                // 1. start (mocked) Core as embedded CXF\n+                JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();\n+                sf.setAddress(ADDRESS);\n+                sf.setResourceClasses(WAClientAppService.class);\n+                sf.setResourceProvider(\n+                        WAClientAppService.class,\n+                        new SingletonResourceProvider(new StubWAClientAppService(), true));\n+                sf.setProviders(List.of(new JacksonJsonProvider()));\n+                sf.create();\n+\n+                // 2. register Core in Keymaster\n+                NetworkService core = new NetworkService();\n+                core.setType(NetworkService.Type.CORE);\n+                core.setAddress(ADDRESS);\n+                serviceOps.register(core);\n+            }\n+        }\n+    }\n+\n+    public class StubWAClientAppService implements WAClientAppService {\n+\n+        @Override\n+        public List<WAClientApp> list() {\n+            return APPS;\n+        }\n+\n+        @Override\n+        public WAClientApp read(final Long clientAppId, final ClientAppType type) {\n+            return APPS.stream().filter(app -> Objects.equals(clientAppId, app.getClientAppTO().getClientAppId())).\n+                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n+        }\n+\n+        @Override\n+        public WAClientApp read(final String name, final ClientAppType type) {\n+            return APPS.stream().filter(app -> Objects.equals(name, app.getClientAppTO().getName())).\n+                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n+        }\n+    }\n+}"},{"sha":"0d0e372af43853ebb81a1337b843a5b22f2c56d8","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeServiceRegistryTest.java","status":"added","additions":212,"deletions":0,"changes":212,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42130611fef3f3d7b5de62ae299f826f42bd5b10/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeServiceRegistryTest.java?ref=42130611fef3f3d7b5de62ae299f826f42bd5b10","patch":"@@ -0,0 +1,212 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n+import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredService;\n+import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n+import org.apereo.cas.services.ReturnMappedAttributeReleasePolicy;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.saml.services.SamlRegisteredService;\n+import org.apereo.cas.util.RandomUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class SyncopeServiceRegistryTest extends AbstractTest {\n+\n+    @Autowired\n+    private WARestClient wARestClient;\n+\n+    @Autowired\n+    private ServicesManager servicesManager;\n+\n+    private static OIDCRPTO buildOIDCRP() {\n+        OIDCRPTO oidcrpTO = new OIDCRPTO();\n+        oidcrpTO.setName(\"ExampleRP_\" + getUUIDString());\n+        oidcrpTO.setClientAppId(RandomUtils.nextLong());\n+        oidcrpTO.setDescription(\"Example OIDC RP application\");\n+        oidcrpTO.setClientId(\"clientId_\" + getUUIDString());\n+        oidcrpTO.setClientSecret(\"secret\");\n+        oidcrpTO.getRedirectUris().addAll(List.of(\"uri1\", \"uri2\"));\n+        oidcrpTO.setSubjectType(OIDCSubjectType.PUBLIC);\n+        oidcrpTO.getSupportedGrantTypes().add(\"something\");\n+        oidcrpTO.getSupportedResponseTypes().add(\"something\");\n+\n+        return oidcrpTO;\n+    }\n+\n+    protected SAML2SPTO buildSAML2SP() {\n+        SAML2SPTO saml2spto = new SAML2SPTO();\n+        saml2spto.setName(\"ExampleSAML2SP_\" + getUUIDString());\n+        saml2spto.setClientAppId(RandomUtils.nextLong());\n+        saml2spto.setDescription(\"Example SAML 2.0 service provider\");\n+        saml2spto.setEntityId(\"SAML2SPEntityId_\" + getUUIDString());\n+        saml2spto.setMetadataLocation(\"file:./test.xml\");\n+        saml2spto.setRequiredNameIdFormat(SAML2SPNameId.EMAIL_ADDRESS);\n+        saml2spto.setEncryptionOptional(true);\n+        saml2spto.setEncryptAssertions(true);\n+\n+        return saml2spto;\n+    }\n+\n+    private void addAttributes(final boolean withReleaseAttributes,\n+            final boolean withAttrReleasePolicy,\n+            final WAClientApp waClientApp) {\n+        DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n+        DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n+        criteria.setAll(true);\n+        authPolicyConf.setCriteria(criteria);\n+        authPolicyConf.getAuthModules().add(\"TestAuthModule\");\n+\n+        waClientApp.setAuthPolicyConf(authPolicyConf);\n+\n+        if (withReleaseAttributes) {\n+            Map<String, Object> releaseAttrs;\n+            releaseAttrs = new HashMap<>();\n+            releaseAttrs.put(\"uid\", \"username\");\n+            releaseAttrs.put(\"cn\", \"fullname\");\n+            waClientApp.getReleaseAttrs().putAll(releaseAttrs);\n+        }\n+\n+        DefaultAccessPolicyConf accessPolicyConf = new DefaultAccessPolicyConf();\n+        accessPolicyConf.setEnabled(true);\n+        accessPolicyConf.getRequiredAttrs().put(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n+        waClientApp.setAccessPolicyConf(accessPolicyConf);\n+\n+        if (withAttrReleasePolicy) {\n+            AllowedAttrReleasePolicyConf attrReleasePolicyConf = new AllowedAttrReleasePolicyConf();\n+            attrReleasePolicyConf.getAllowedAttrs().add(\"cn\");\n+            waClientApp.setAttrReleasePolicyConf(attrReleasePolicyConf);\n+        }\n+    }\n+\n+    @Test\n+    public void addClientApp() {\n+        // 1. start with no client apps defined on mocked Core\n+        SyncopeClient syncopeClient = wARestClient.getSyncopeClient();\n+        assertNotNull(syncopeClient);\n+\n+        SyncopeCoreTestingServer.APPS.clear();\n+\n+        WAClientAppService service = syncopeClient.getService(WAClientAppService.class);\n+        assertTrue(service.list().isEmpty());\n+\n+        // 2. add one client app on mocked Core, nothing on WA yet\n+        WAClientApp waClientApp = new WAClientApp();\n+        waClientApp.setClientAppTO(buildOIDCRP());\n+        Long clientAppId = waClientApp.getClientAppTO().getClientAppId();\n+        addAttributes(true, true, waClientApp);\n+\n+        SyncopeCoreTestingServer.APPS.add(waClientApp);\n+        List<WAClientApp> apps = service.list();\n+        assertEquals(1, apps.size());\n+\n+        assertNull(servicesManager.findServiceBy(clientAppId));\n+\n+        // 3. trigger client app refresh\n+        Collection<RegisteredService> load = servicesManager.load();\n+        assertEquals(3, load.size());\n+\n+        // 4. look for the service created above\n+        RegisteredService found = servicesManager.findServiceBy(clientAppId);\n+        assertNotNull(found);\n+        assertTrue(found instanceof OidcRegisteredService);\n+        OidcRegisteredService oidcRegisteredService = OidcRegisteredService.class.cast(found);\n+        OIDCRPTO oidcrpto = OIDCRPTO.class.cast(waClientApp.getClientAppTO());\n+        assertEquals(\"uri1|uri2\", oidcRegisteredService.getServiceId());\n+        assertEquals(oidcrpto.getClientId(), oidcRegisteredService.getClientId());\n+        assertEquals(oidcrpto.getClientSecret(), oidcRegisteredService.getClientSecret());\n+        assertTrue(oidcRegisteredService.getAuthenticationPolicy().getRequiredAuthenticationHandlers().\n+                contains(\"TestAuthModule\"));\n+        assertTrue(((AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria) oidcRegisteredService.\n+                getAuthenticationPolicy().getCriteria()).isTryAll());\n+        assertTrue(oidcRegisteredService.getAttributeReleasePolicy() instanceof ReturnMappedAttributeReleasePolicy);\n+        assertFalse(oidcRegisteredService.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy);\n+        assertFalse(oidcRegisteredService.getAttributeReleasePolicy() instanceof DenyAllAttributeReleasePolicy);\n+\n+        // 5. more client with different attributes \n+        waClientApp = new WAClientApp();\n+        waClientApp.setClientAppTO(buildSAML2SP());\n+        clientAppId = waClientApp.getClientAppTO().getClientAppId();\n+        addAttributes(false, true, waClientApp);\n+\n+        SyncopeCoreTestingServer.APPS.add(waClientApp);\n+        apps = service.list();\n+        assertEquals(2, apps.size());\n+\n+        load = servicesManager.load();\n+        assertEquals(4, load.size());\n+\n+        found = servicesManager.findServiceBy(clientAppId);\n+        assertTrue(found instanceof SamlRegisteredService);\n+        SamlRegisteredService samlRegisteredService = SamlRegisteredService.class.cast(found);\n+        SAML2SPTO samlspto = SAML2SPTO.class.cast(waClientApp.getClientAppTO());\n+        assertEquals(samlspto.getMetadataLocation(), samlRegisteredService.getMetadataLocation());\n+        assertEquals(samlspto.getEntityId(), samlRegisteredService.getServiceId());\n+        assertTrue(samlRegisteredService.getAuthenticationPolicy().getRequiredAuthenticationHandlers().\n+                contains(\"TestAuthModule\"));\n+        assertNotNull(found.getAccessStrategy());\n+        assertFalse(samlRegisteredService.getAttributeReleasePolicy() instanceof ReturnMappedAttributeReleasePolicy);\n+        assertTrue(samlRegisteredService.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy);\n+        assertFalse(samlRegisteredService.getAttributeReleasePolicy() instanceof DenyAllAttributeReleasePolicy);\n+\n+        waClientApp = new WAClientApp();\n+        waClientApp.setClientAppTO(buildSAML2SP());\n+        clientAppId = waClientApp.getClientAppTO().getClientAppId();\n+        addAttributes(false, false, waClientApp);\n+\n+        SyncopeCoreTestingServer.APPS.add(waClientApp);\n+        apps = service.list();\n+        assertEquals(3, apps.size());\n+\n+        load = servicesManager.load();\n+        assertEquals(5, load.size());\n+\n+        found = servicesManager.findServiceBy(clientAppId);\n+        assertFalse(found.getAttributeReleasePolicy() instanceof ReturnMappedAttributeReleasePolicy);\n+        assertFalse(found.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy);\n+        assertTrue(found.getAttributeReleasePolicy() instanceof DenyAllAttributeReleasePolicy);\n+\n+    }\n+}"}]}