{"sha":"c4433f5264fde58fd923b355861d889302fe769e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM0NDMzZjUyNjRmZGU1OGZkOTIzYjM1NTg2MWQ4ODkzMDJmZTc2OWU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-03-23T11:36:14Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-03-23T11:43:18Z"},"message":"[SYNCOPE-1050] Adopting the same approach used by Admin Console for extension pages and widgets","tree":{"sha":"a07de70839d398665fa15c69590dd4bc030d31f5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a07de70839d398665fa15c69590dd4bc030d31f5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c4433f5264fde58fd923b355861d889302fe769e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c4433f5264fde58fd923b355861d889302fe769e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c4433f5264fde58fd923b355861d889302fe769e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c4433f5264fde58fd923b355861d889302fe769e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2a7358f452a3a8d65353a4d04bf445caabf39a73","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a7358f452a3a8d65353a4d04bf445caabf39a73","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a7358f452a3a8d65353a4d04bf445caabf39a73"}],"stats":{"total":736,"additions":387,"deletions":349},"files":[{"sha":"99d4c0b503926defdac5c734837636127d30a2b0","filename":"client/enduser/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fpom.xml?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -43,6 +43,11 @@ under the License.\n       <artifactId>javax.servlet-api</artifactId>\n       <scope>provided</scope>\n     </dependency>\n+\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-context</artifactId>\n+    </dependency>\n     \n     <dependency>\n       <groupId>org.apache.wicket</groupId>"},{"sha":"756d2f9d84a1ab2fb23bae77e267ad957eec128d","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java","status":"modified","additions":33,"deletions":213,"changes":246,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -18,31 +18,17 @@\n  */\n package org.apache.syncope.client.enduser;\n \n-import org.apache.syncope.client.enduser.resources.UserSelfIsLogged;\n import java.io.File;\n import java.io.InputStream;\n import java.io.Serializable;\n import org.apache.syncope.client.enduser.pages.HomePage;\n import java.util.Properties;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.lang3.BooleanUtils;\n-import org.apache.syncope.client.enduser.resources.CaptchaResource;\n-import org.apache.syncope.client.enduser.resources.InfoResource;\n-import org.apache.syncope.client.enduser.resources.LoginResource;\n-import org.apache.syncope.client.enduser.resources.LogoutResource;\n-import org.apache.syncope.client.enduser.resources.SchemaResource;\n-import org.apache.syncope.client.enduser.resources.SecurityQuestionResource;\n-import org.apache.syncope.client.enduser.resources.AnyTypeClassResource;\n-import org.apache.syncope.client.enduser.resources.AnyTypeResource;\n-import org.apache.syncope.client.enduser.resources.GroupResource;\n-import org.apache.syncope.client.enduser.resources.ExternalResourceResource;\n-import org.apache.syncope.client.enduser.resources.RealmResource;\n-import org.apache.syncope.client.enduser.resources.UserSelfChangePassword;\n-import org.apache.syncope.client.enduser.resources.UserSelfConfirmPasswordReset;\n-import org.apache.syncope.client.enduser.resources.UserSelfCreateResource;\n-import org.apache.syncope.client.enduser.resources.UserSelfPasswordReset;\n-import org.apache.syncope.client.enduser.resources.UserSelfReadResource;\n-import org.apache.syncope.client.enduser.resources.UserSelfUpdateResource;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n+import org.apache.syncope.client.enduser.init.ClassPathScanImplementationLookup;\n+import org.apache.syncope.client.enduser.init.EnduserInitializer;\n+import org.apache.syncope.client.enduser.resources.BaseResource;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.wicket.Page;\n@@ -54,11 +40,15 @@\n import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.request.resource.ResourceReference;\n import org.apache.wicket.util.lang.Args;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class SyncopeEnduserApplication extends WebApplication implements Serializable {\n \n     private static final long serialVersionUID = -6445919351044845120L;\n \n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeEnduserApplication.class);\n+\n     private static final String ENDUSER_PROPERTIES = \"enduser.properties\";\n \n     public static SyncopeEnduserApplication get() {\n@@ -140,202 +130,32 @@ protected void init() {\n                 setContentType(SyncopeClientFactoryBean.ContentType.JSON).\n                 setUseCompression(BooleanUtils.toBoolean(useGZIPCompression));\n \n-        // resource to provide login functionality managed by wicket\n-        mountResource(\"/api/login\", new ResourceReference(\"login\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new LoginResource();\n-            }\n-        });\n-\n-        // resource to provide logout functionality managed by wicket\n-        mountResource(\"/api/logout\", new ResourceReference(\"logout\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new LogoutResource();\n-            }\n-        });\n-\n-        mountResource(\"/api/self/islogged\", new ResourceReference(\"userSelfIsLogged\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new UserSelfIsLogged();\n-            }\n-        });\n-\n-        // resource to retrieve info about logged user\n-        mountResource(\"/api/self/read\", new ResourceReference(\"userSelfRead\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new UserSelfReadResource();\n-            }\n-        });\n-\n-        // resource to provide user self create functionality managed by wicket\n-        mountResource(\"/api/self/create\", new ResourceReference(\"userSelfCreate\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new UserSelfCreateResource();\n-            }\n-        });\n-\n-        // resource to provide user self update functionality managed by wicket\n-        mountResource(\"/api/self/update\", new ResourceReference(\"userSelfUpdate\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new UserSelfUpdateResource();\n-            }\n-        });\n-\n-        mountResource(\"/api/self/requestPasswordReset\", new ResourceReference(\"userSelfPasswordReset\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new UserSelfPasswordReset();\n-            }\n-        });\n-\n-        mountResource(\"/api/self/confirmPasswordReset\", new ResourceReference(\"userSelfConfirmPasswordReset\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new UserSelfConfirmPasswordReset();\n-            }\n-        });\n-\n-        mountResource(\"/api/self/changePassword\", new ResourceReference(\"userSelfChangePassword\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new UserSelfChangePassword();\n-            }\n-        });\n-\n-        mountResource(\"/api/schemas\", new ResourceReference(\"schemas\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new SchemaResource();\n-            }\n-        });\n-\n-        mountResource(\"/api/resources\", new ResourceReference(\"resources\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new ExternalResourceResource();\n-            }\n-        });\n-\n-        mountResource(\"/api/securityQuestions\", new ResourceReference(\"securityQuestions\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new SecurityQuestionResource();\n-            }\n-        });\n-\n-        mountResource(\"/api/securityQuestions/byUser/${username}\", new ResourceReference(\"securityQuestions\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new SecurityQuestionResource();\n-            }\n-        });\n-\n-        mountResource(\"/api/info\", new ResourceReference(\"info\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new InfoResource();\n-            }\n-        });\n-\n-        // resource to get a fresh captcha image\n-        mountResource(\"/api/captcha\", new ResourceReference(\"captcha\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new CaptchaResource();\n-            }\n-        });\n-\n-        mountResource(\"/api/realms\", new ResourceReference(\"realms\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new RealmResource();\n-            }\n-        });\n-\n-        mountResource(\"/api/groups\", new ResourceReference(\"groups\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new GroupResource();\n-            }\n-        });\n-\n-        mountResource(\"/api/auxiliaryClasses\", new ResourceReference(\"auxClasses\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new AnyTypeClassResource();\n-            }\n-        });\n-\n-        mountResource(\"/api/anyTypes\", new ResourceReference(\"anyType\") {\n-\n-            private static final long serialVersionUID = -128426276529456602L;\n-\n-            @Override\n-            public IResource getResource() {\n-                return new AnyTypeResource();\n+        // mount resources\n+        ClassPathScanImplementationLookup classPathScanImplementationLookup =\n+                (ClassPathScanImplementationLookup) getServletContext().\n+                        getAttribute(EnduserInitializer.CLASSPATH_LOOKUP);\n+        for (final Class<? extends BaseResource> resource : classPathScanImplementationLookup.getResources()) {\n+            Resource annotation = resource.getAnnotation(Resource.class);\n+            if (annotation == null) {\n+                LOG.debug(\"No @Resource annotation found on {}, ignoring\", resource.getName());\n+            } else {\n+                try {\n+                    final BaseResource instance = resource.newInstance();\n+\n+                    mountResource(annotation.path(), new ResourceReference(annotation.key()) {\n+\n+                        private static final long serialVersionUID = -128426276529456602L;\n+\n+                        @Override\n+                        public IResource getResource() {\n+                            return instance;\n+                        }\n+                    });\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not instantiate {}\", resource.getName(), e);\n+                }\n             }\n-        });\n-\n+        }\n     }\n \n     @Override"},{"sha":"b54e142062c4e23ab8c13377d6c19a2a2d174ace","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/annotations/Resource.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fannotations%2FResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fannotations%2FResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fannotations%2FResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.annotations;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Documented\n+public @interface Resource {\n+\n+    /**\n+     * @return string for {@link org.apache.wicket.request.resource.ResourceReference#ResourceReference}\n+     */\n+    String key();\n+\n+    /**\n+     * @return path for{@link org.apache.wicket.protocol.http.WebApplication#mountResource}\n+     */\n+    String path();\n+\n+}"},{"sha":"2761a19f980d0cbbc3fb74967b8ff51e67e15b27","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/init/ClassPathScanImplementationLookup.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.init;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n+import org.apache.syncope.client.enduser.resources.BaseResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n+import org.springframework.core.type.filter.AssignableTypeFilter;\n+import org.springframework.util.ClassUtils;\n+\n+public class ClassPathScanImplementationLookup {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ClassPathScanImplementationLookup.class);\n+\n+    private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope.client.enduser\";\n+\n+    private List<Class<? extends BaseResource>> resources;\n+\n+    /**\n+     * This method can be overridden by subclasses to customize classpath scan.\n+     *\n+     * @return basePackage for classpath scanning\n+     */\n+    protected String getBasePackage() {\n+        return DEFAULT_BASE_PACKAGE;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void load() {\n+        resources = new ArrayList<>();\n+\n+        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n+        scanner.addIncludeFilter(new AssignableTypeFilter(BaseResource.class));\n+\n+        for (BeanDefinition bd : scanner.findCandidateComponents(getBasePackage())) {\n+            try {\n+                Class<?> clazz = ClassUtils.resolveClassName(bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n+                boolean isAbsractClazz = Modifier.isAbstract(clazz.getModifiers());\n+\n+                if (!isAbsractClazz) {\n+                    if (BaseResource.class.isAssignableFrom(clazz)) {\n+                        if (clazz.isAnnotationPresent(Resource.class)) {\n+                            resources.add((Class<? extends BaseResource>) clazz);\n+                        } else {\n+                            LOG.error(\"Could not find annotation {} in {}, ignoring\",\n+                                    Resource.class.getName(), clazz.getName());\n+                        }\n+                    }\n+                }\n+            } catch (Throwable t) {\n+                LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n+            }\n+        }\n+        resources = Collections.unmodifiableList(resources);\n+    }\n+\n+    public List<Class<? extends BaseResource>> getResources() {\n+        return resources;\n+    }\n+\n+}"},{"sha":"6295cd2d05eea1b686ef3b6e057123729d4821e8","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/init/EnduserInitializer.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FEnduserInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FEnduserInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FEnduserInitializer.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.init;\n+\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.annotation.WebListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Take care of all initializations needed by Syncope Enduser to run up and safe.\n+ */\n+@WebListener\n+public class EnduserInitializer implements ServletContextListener {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(EnduserInitializer.class);\n+\n+    public static final String CLASSPATH_LOOKUP = \"CLASSPATH_LOOKUP\";\n+\n+    @Override\n+    public void contextInitialized(final ServletContextEvent sce) {\n+        ClassPathScanImplementationLookup lookup = new ClassPathScanImplementationLookup();\n+        lookup.load();\n+        sce.getServletContext().setAttribute(CLASSPATH_LOOKUP, lookup);\n+\n+        LOG.debug(\"Initialization completed\");\n+    }\n+\n+    @Override\n+    public void contextDestroyed(final ServletContextEvent sce) {\n+        // nothing to do\n+    }\n+\n+}"},{"sha":"443699495afe674fe111d3c93b136768451439c2","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/pages/HomePage.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FHomePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FHomePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FHomePage.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -28,7 +28,6 @@ public class HomePage extends WebPage {\n \n     public HomePage(final PageParameters parameters) {\n         super(parameters);\n-//        throw new RedirectToUrlException(\"/app/\");\n         throw new NonResettingRestartException(\"/app/\");\n     }\n "},{"sha":"1fda74f2943baa1faee3294f1d2fb9ee75ae2ea7","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/AnyTypeClassResource.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAnyTypeClassResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAnyTypeClassResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAnyTypeClassResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -24,20 +24,16 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.wicket.request.resource.AbstractResource;\n \n-public class AnyTypeClassResource extends AbstractBaseResource {\n+@Resource(key = \"auxClasses\", path = \"/api/auxiliaryClasses\")\n+public class AnyTypeClassResource extends BaseResource {\n \n     private static final long serialVersionUID = 7475706378304995200L;\n \n-    private final AnyTypeClassService anyTypeClassService;\n-\n-    public AnyTypeClassResource() {\n-        anyTypeClassService = SyncopeEnduserSession.get().getService(AnyTypeClassService.class);\n-    }\n-\n     @Override\n     protected ResourceResponse newResourceResponse(final Attributes attributes) {\n \n@@ -54,7 +50,8 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                 return response;\n             }\n \n-            final List<AnyTypeClassTO> anyTypeClassTOs = anyTypeClassService.list();\n+            final List<AnyTypeClassTO> anyTypeClassTOs =\n+                    SyncopeEnduserSession.get().getService(AnyTypeClassService.class).list();\n \n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n             response.setWriteCallback(new AbstractResource.WriteCallback() {"},{"sha":"87ee08c243fffb3b2f1b1adc7e0b01367ebaf5f5","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/AnyTypeResource.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAnyTypeResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAnyTypeResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAnyTypeResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -23,20 +23,16 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.wicket.request.resource.AbstractResource;\n \n-public class AnyTypeResource extends AbstractBaseResource {\n+@Resource(key = \"anyType\", path = \"/api/anyTypes\")\n+public class AnyTypeResource extends BaseResource {\n \n     private static final long serialVersionUID = 7475706378304995200L;\n \n-    private final AnyTypeService anyTypeService;\n-\n-    public AnyTypeResource() {\n-        anyTypeService = SyncopeEnduserSession.get().getService(AnyTypeService.class);\n-    }\n-\n     @Override\n     protected ResourceResponse newResourceResponse(final Attributes attributes) {\n         LOG.debug(\"Get all available auxiliary classes\");\n@@ -53,7 +49,7 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n             }\n \n             String kind = attributes.getParameters().get(0).toString();\n-            final AnyTypeTO anyTypeTO = anyTypeService.read(kind);\n+            final AnyTypeTO anyTypeTO = SyncopeEnduserSession.get().getService(AnyTypeService.class).read(kind);\n \n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n "},{"sha":"2540f5dc12ec83b73ea4e8a274dcc31fa28f8fb9","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/BaseResource.java","status":"renamed","additions":3,"deletions":19,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -24,44 +24,28 @@\n import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public abstract class AbstractBaseResource extends AbstractResource {\n+public abstract class BaseResource extends AbstractResource {\n \n     private static final long serialVersionUID = -7875801358718612782L;\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(AbstractBaseResource.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(BaseResource.class);\n \n     protected static final ObjectMapper MAPPER = new ObjectMapper();\n \n-    protected final boolean isSelfRegistrationAllowed() {\n-        Boolean result = null;\n-        try {\n-            result = SyncopeEnduserSession.get().getPlatformInfo().isSelfRegAllowed();\n-        } catch (SyncopeClientException e) {\n-            LOG.error(\"While seeking if self registration is allowed\", e);\n-        }\n-\n-        return result == null\n-                ? false\n-                : result;\n-    }\n-\n     protected final boolean xsrfCheck(final HttpServletRequest request) {\n         final String requestXSRFHeader = request.getHeader(SyncopeEnduserConstants.XSRF_HEADER_NAME);\n-\n         return SyncopeEnduserApplication.get().isXsrfEnabled()\n                 ? StringUtils.isNotBlank(requestXSRFHeader)\n                 && SyncopeEnduserSession.get().getCookieUtils().\n-                getCookie(SyncopeEnduserConstants.XSRF_COOKIE).getValue().equals(requestXSRFHeader)\n+                        getCookie(SyncopeEnduserConstants.XSRF_COOKIE).getValue().equals(requestXSRFHeader)\n                 : true;\n     }\n \n     protected final boolean captchaCheck(final String enteredCaptcha, final Object currentCaptcha) {\n-\n         return SyncopeEnduserApplication.get().isCaptchaEnabled()\n                 ? StringUtils.isBlank(currentCaptcha.toString()) || enteredCaptcha == null\n                 ? false","previous_filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/AbstractBaseResource.java"},{"sha":"7cae2110da67d9a42233422146a5a812d421f5c0","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/CaptchaResource.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -21,11 +21,13 @@\n import javax.servlet.http.HttpServletRequest;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.wicket.extensions.markup.html.captcha.CaptchaImageResource;\n import org.apache.wicket.request.cycle.RequestCycle;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+@Resource(key = \"captcha\", path = \"/api/captcha\")\n public class CaptchaResource extends CaptchaImageResource {\n \n     private static final long serialVersionUID = 8293404296348102926L;"},{"sha":"4c69d67dcb693d1bcf4b3033f753ef87a5468e28","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/ExternalResourceResource.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FExternalResourceResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FExternalResourceResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FExternalResourceResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -24,21 +24,17 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n \n-public class ExternalResourceResource extends AbstractBaseResource {\n+@Resource(key = \"resources\", path = \"/api/resources\")\n+public class ExternalResourceResource extends BaseResource {\n \n     private static final long serialVersionUID = 7475706378304995200L;\n \n-    private final ResourceService resourceService;\n-\n-    public ExternalResourceResource() {\n-        resourceService = SyncopeEnduserSession.get().getService(ResourceService.class);\n-    }\n-\n     @Override\n     protected AbstractResource.ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n         LOG.debug(\"Search all available resources\");\n@@ -54,7 +50,7 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n                 return response;\n             }\n \n-            final List<ResourceTO> resourceTOs = resourceService.list();\n+            final List<ResourceTO> resourceTOs = SyncopeEnduserSession.get().getService(ResourceService.class).list();\n \n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n             response.setWriteCallback(new AbstractResource.WriteCallback() {"},{"sha":"93cd002116c097a264ab3fcdd72d1c1479cfb67d","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/GroupResource.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FGroupResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FGroupResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FGroupResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -19,28 +19,25 @@\n package org.apache.syncope.client.enduser.resources;\n \n import java.io.IOException;\n+import java.net.URLDecoder;\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.wicket.request.resource.AbstractResource;\n \n-public class GroupResource extends AbstractBaseResource {\n+@Resource(key = \"groups\", path = \"/api/groups\")\n+public class GroupResource extends BaseResource {\n \n     private static final long serialVersionUID = 7475706378304995200L;\n \n-    private final GroupService groupService;\n-\n-    public GroupResource() {\n-        groupService = SyncopeEnduserSession.get().getService(GroupService.class);\n-    }\n-\n     @Override\n     protected ResourceResponse newResourceResponse(final Attributes attributes) {\n         LOG.debug(\"Search all available groups\");\n@@ -55,9 +52,10 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                 return response;\n             }\n \n-            String realm = java.net.URLDecoder.decode(attributes.getParameters().get(\"realm\").\n+            String realm = URLDecoder.decode(attributes.getParameters().get(\"realm\").\n                     toString(SyncopeConstants.ROOT_REALM), \"UTF-8\");\n-            final List<GroupTO> groupTOs = groupService.search(new AnyQuery.Builder().realm(realm).\n+            final List<GroupTO> groupTOs = SyncopeEnduserSession.get().\n+                    getService(GroupService.class).search(new AnyQuery.Builder().realm(realm).\n                     fiql(SyncopeClient.getGroupSearchConditionBuilder().isAssignable().query()).\n                     build()).getResult();\n             response.setTextEncoding(StandardCharsets.UTF_8.name());"},{"sha":"172628ec2a4607500fa503f27e59f76f9f6343b4","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/InfoResource.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -25,11 +25,13 @@\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.adapters.PlatformInfoAdapter;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.client.enduser.util.SaltGenerator;\n import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.util.cookies.CookieUtils;\n \n-public class InfoResource extends AbstractBaseResource {\n+@Resource(key = \"info\", path = \"/api/info\")\n+public class InfoResource extends BaseResource {\n \n     private static final long serialVersionUID = 6453101466981543020L;\n "},{"sha":"7007b9fe1ac8e0bd0c1a7774ff2c9f5193cb30e1","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/LoginResource.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FLoginResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FLoginResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FLoginResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -26,11 +26,13 @@\n import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n import org.apache.syncope.client.enduser.model.Credentials;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.util.io.IOUtils;\n \n-public class LoginResource extends AbstractBaseResource {\n+@Resource(key = \"login\", path = \"/api/login\")\n+public class LoginResource extends BaseResource {\n \n     private static final long serialVersionUID = -7720997467070461915L;\n "},{"sha":"789729e7e89cb666194f7f0cdcf8fecb8d960196","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/LogoutResource.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FLogoutResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FLogoutResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FLogoutResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.client.enduser.resources;\n \n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n \n-public class LogoutResource extends AbstractBaseResource {\n+@Resource(key = \"logout\", path = \"/api/logout\")\n+public class LogoutResource extends BaseResource {\n \n     private static final long serialVersionUID = -648841355644985051L;\n "},{"sha":"6faafaf06678d7510bed8689519b76b72c85da32","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/RealmResource.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FRealmResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FRealmResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FRealmResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -24,20 +24,16 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.wicket.request.resource.AbstractResource;\n \n-public class RealmResource extends AbstractBaseResource {\n+@Resource(key = \"realms\", path = \"/api/realms\")\n+public class RealmResource extends BaseResource {\n \n     private static final long serialVersionUID = 7475706378304995200L;\n \n-    private final RealmService realmService;\n-\n-    public RealmResource() {\n-        realmService = SyncopeEnduserSession.get().getService(RealmService.class);\n-    }\n-\n     @Override\n     protected ResourceResponse newResourceResponse(final Attributes attributes) {\n         LOG.debug(\"Search all available realms\");\n@@ -52,7 +48,7 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                 return response;\n             }\n \n-            final List<RealmTO> realmTOs = realmService.list();\n+            final List<RealmTO> realmTOs = SyncopeEnduserSession.get().getService(RealmService.class).list();\n \n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n "},{"sha":"b6a601a9b44cb8c8c902fc23f53cee0df4adeff9","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":7,"deletions":15,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -27,6 +27,7 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.client.enduser.model.SchemaResponse;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n@@ -42,22 +43,11 @@\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n \n-public class SchemaResource extends AbstractBaseResource {\n+@Resource(key = \"schemas\", path = \"/api/schemas\")\n+public class SchemaResource extends BaseResource {\n \n     private static final long serialVersionUID = 6453101466981543020L;\n \n-    private final AnyTypeService anyTypeService;\n-\n-    private final SchemaService schemaService;\n-\n-    private final GroupService groupService;\n-\n-    public SchemaResource() {\n-        anyTypeService = SyncopeEnduserSession.get().getService(AnyTypeService.class);\n-        schemaService = SyncopeEnduserSession.get().getService(SchemaService.class);\n-        groupService = SyncopeEnduserSession.get().getService(GroupService.class);\n-    }\n-\n     @Override\n     protected AbstractResource.ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n         LOG.debug(\"Search all {} any type kind related schemas\", AnyTypeKind.USER.name());\n@@ -77,7 +67,7 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n \n             final String groupParam = attributes.getParameters().get(\"group\").toString();\n             if (groupParam != null) {\n-                PagedResult<GroupTO> groups = groupService.search(\n+                PagedResult<GroupTO> groups = SyncopeEnduserSession.get().getService(GroupService.class).search(\n                         new AnyQuery.Builder().realm(\"/\").page(1).size(1000).build());\n                 GroupTO group = IterableUtils.find(groups.getResult(), new Predicate<GroupTO>() {\n \n@@ -95,11 +85,13 @@ public boolean evaluate(final GroupTO item) {\n                 if (anyTypeClass != null) {\n                     classes = Collections.singletonList(anyTypeClass);\n                 } else {\n-                    AnyTypeTO anyTypeUserTO = anyTypeService.read(AnyTypeKind.USER.name());\n+                    AnyTypeTO anyTypeUserTO = SyncopeEnduserSession.get().getService(AnyTypeService.class).\n+                            read(AnyTypeKind.USER.name());\n                     classes = anyTypeUserTO.getClasses();\n                 }\n             }\n \n+            SchemaService schemaService = SyncopeEnduserSession.get().getService(SchemaService.class);\n             final List<AbstractSchemaTO> plainSchemas = classes.isEmpty()\n                     ? Collections.<AbstractSchemaTO>emptyList()\n                     : schemaService.list("},{"sha":"68051ff29b2b8796493acf19bd98b0dffabb2525","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SecurityQuestionByUsernameResource.java","status":"renamed","additions":5,"deletions":21,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSecurityQuestionByUsernameResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSecurityQuestionByUsernameResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSecurityQuestionByUsernameResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -20,36 +20,30 @@\n \n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n-import java.util.List;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.util.string.StringValue;\n \n-public class SecurityQuestionResource extends AbstractBaseResource {\n+@Resource(key = \"securityQuestionByUsername\", path = \"/api/securityQuestions/byUser/${username}\")\n+public class SecurityQuestionByUsernameResource extends BaseResource {\n \n     private static final long serialVersionUID = 6453101466981543020L;\n \n-    private final SecurityQuestionService securityQuestionService;\n-\n-    public SecurityQuestionResource() {\n-        securityQuestionService = SyncopeEnduserSession.get().getService(SecurityQuestionService.class);\n-    }\n-\n     @Override\n     protected AbstractResource.ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n         LOG.debug(\"List available security questions\");\n \n         AbstractResource.ResourceResponse response = new AbstractResource.ResourceResponse();\n \n         try {\n-\n             HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n \n             if (!xsrfCheck(request)) {\n@@ -60,26 +54,16 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n \n             PageParameters parameters = attributes.getParameters();\n             StringValue username = parameters.get(\"username\");\n-            //if the username is defined then retrieve its security questions, otherwise retrieve all security questions\n             if (!username.isEmpty()) {\n-                final SecurityQuestionTO securityQuestionTO = securityQuestionService.readByUser(username.toString());\n+                final SecurityQuestionTO securityQuestionTO = SyncopeEnduserSession.get().\n+                        getService(SecurityQuestionService.class).readByUser(username.toString());\n                 response.setWriteCallback(new AbstractResource.WriteCallback() {\n \n                     @Override\n                     public void writeData(final IResource.Attributes attributes) throws IOException {\n                         attributes.getResponse().write(MAPPER.writeValueAsString(securityQuestionTO));\n                     }\n                 });\n-            } else {\n-                final List<SecurityQuestionTO> securityQuestionTOs = securityQuestionService.list();\n-\n-                response.setWriteCallback(new AbstractResource.WriteCallback() {\n-\n-                    @Override\n-                    public void writeData(final IResource.Attributes attributes) throws IOException {\n-                        attributes.getResponse().write(MAPPER.writeValueAsString(securityQuestionTOs));\n-                    }\n-                });\n             }\n \n             response.setContentType(MediaType.APPLICATION_JSON);","previous_filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SecurityQuestionResource.java"},{"sha":"5adba6cb7ae94d3b46c71e684fc5f5acfd75fb29","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SecurityQuestionsResource.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSecurityQuestionsResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSecurityQuestionsResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSecurityQuestionsResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.resources;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n+import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n+import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n+import org.apache.wicket.request.resource.AbstractResource;\n+import org.apache.wicket.request.resource.IResource;\n+\n+@Resource(key = \"securityQuestions\", path = \"/api/securityQuestions\")\n+public class SecurityQuestionsResource extends BaseResource {\n+\n+    private static final long serialVersionUID = 6453101466981543020L;\n+\n+    @Override\n+    protected AbstractResource.ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n+        LOG.debug(\"List available security questions\");\n+\n+        AbstractResource.ResourceResponse response = new AbstractResource.ResourceResponse();\n+\n+        try {\n+            HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n+\n+            if (!xsrfCheck(request)) {\n+                LOG.error(\"XSRF TOKEN does not match\");\n+                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n+                return response;\n+            }\n+\n+            final List<SecurityQuestionTO> securityQuestionTOs = SyncopeEnduserSession.get().\n+                    getService(SecurityQuestionService.class).list();\n+            response.setWriteCallback(new AbstractResource.WriteCallback() {\n+\n+                @Override\n+                public void writeData(final IResource.Attributes attributes) throws IOException {\n+                    attributes.getResponse().write(MAPPER.writeValueAsString(securityQuestionTOs));\n+                }\n+            });\n+\n+            response.setContentType(MediaType.APPLICATION_JSON);\n+            response.setTextEncoding(StandardCharsets.UTF_8.name());\n+            response.setStatusCode(Response.Status.OK.getStatusCode());\n+        } catch (Exception e) {\n+            LOG.error(\"Error retrieving security questions\", e);\n+            response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()\n+                    .append(\"ErrorMessage{{ \")\n+                    .append(e.getMessage())\n+                    .append(\" }}\")\n+                    .toString());\n+        }\n+\n+        return response;\n+    }\n+\n+}"},{"sha":"85e66a9f80de7ef83501af5ae77f977a63cb528c","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfChangePassword.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfChangePassword.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfChangePassword.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfChangePassword.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -24,20 +24,16 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n \n-public class UserSelfChangePassword extends AbstractBaseResource {\n+@Resource(key = \"userSelfChangePassword\", path = \"/api/self/changePassword\")\n+public class UserSelfChangePassword extends BaseResource {\n \n     private static final long serialVersionUID = -2721621682300247583L;\n \n-    private final UserSelfService userSelfService;\n-\n-    public UserSelfChangePassword() {\n-        userSelfService = SyncopeEnduserSession.get().getService(UserSelfService.class);\n-    }\n-\n     @Override\n     protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n         AbstractResource.ResourceResponse response = new AbstractResource.ResourceResponse();\n@@ -55,7 +51,8 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n             if (parameters.get(\"newPassword\") == null || parameters.get(\"newPassword\").length == 0) {\n                 throw new Exception(\"A new correct password should be provided\");\n             }\n-            userSelfService.changePassword(parameters.get(\"newPassword\")[0]);\n+            SyncopeEnduserSession.get().getService(UserSelfService.class).\n+                    changePassword(parameters.get(\"newPassword\")[0]);\n \n             final String responseMessage = new StringBuilder().append(\"Password changed correctly\").toString();\n \n@@ -70,7 +67,6 @@ public void writeData(final Attributes attributes) throws IOException {\n             });\n \n             response.setStatusCode(Response.Status.OK.getStatusCode());\n-\n         } catch (final Exception e) {\n             LOG.error(\"Error while updating user\", e);\n             response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()"},{"sha":"e9691b3155113d6c8a104e8d104233a7d0ad0e4c","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfConfirmPasswordReset.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfConfirmPasswordReset.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfConfirmPasswordReset.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfConfirmPasswordReset.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -24,20 +24,16 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n \n-public class UserSelfConfirmPasswordReset extends AbstractBaseResource {\n+@Resource(key = \"userSelfConfirmPasswordReset\", path = \"/api/self/confirmPasswordReset\")\n+public class UserSelfConfirmPasswordReset extends BaseResource {\n \n     private static final long serialVersionUID = -2721621682300247583L;\n \n-    private final UserSelfService userSelfService;\n-\n-    public UserSelfConfirmPasswordReset() {\n-        userSelfService = SyncopeEnduserSession.get().getService(UserSelfService.class);\n-    }\n-\n     @Override\n     protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n         AbstractResource.ResourceResponse response = new AbstractResource.ResourceResponse();\n@@ -61,7 +57,8 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n             if (parameters.get(\"newPassword\") == null || parameters.get(\"newPassword\").length == 0) {\n                 throw new Exception(\"A new correct password should be provided\");\n             }\n-            userSelfService.confirmPasswordReset(token, parameters.get(\"newPassword\")[0]);\n+            SyncopeEnduserSession.get().getService(UserSelfService.class).\n+                    confirmPasswordReset(token, parameters.get(\"newPassword\")[0]);\n \n             final String responseMessage = new StringBuilder().append(\"Password changed correctly\").toString();\n "},{"sha":"010b9b6c2f5ac0cfdee74cda403e94383c968f0d","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.client.enduser.resources;\n \n+import static org.apache.syncope.client.enduser.resources.BaseResource.LOG;\n+\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n@@ -33,20 +35,30 @@\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n \n-public class UserSelfCreateResource extends AbstractBaseResource {\n+@Resource(key = \"userSelfCreate\", path = \"/api/self/create\")\n+public class UserSelfCreateResource extends BaseResource {\n \n     private static final long serialVersionUID = -2721621682300247583L;\n \n-    private final UserSelfService userSelfService;\n+    private boolean isSelfRegistrationAllowed() {\n+        Boolean result = null;\n+        try {\n+            result = SyncopeEnduserSession.get().getPlatformInfo().isSelfRegAllowed();\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"While seeking if self registration is allowed\", e);\n+        }\n \n-    public UserSelfCreateResource() {\n-        userSelfService = SyncopeEnduserSession.get().getService(UserSelfService.class);\n+        return result == null\n+                ? false\n+                : result;\n     }\n \n     @Override\n@@ -175,7 +187,7 @@ public boolean evaluate(final MembershipTO item) {\n                 LOG.trace(\"Received user self registration request is: [{}]\", userTO);\n \n                 // adapt request and create user\n-                final Response res = userSelfService.create(userTO, true);\n+                final Response res = SyncopeEnduserSession.get().getService(UserSelfService.class).create(userTO, true);\n \n                 response.setTextEncoding(StandardCharsets.UTF_8.name());\n "},{"sha":"bc9f3c59824d566eff6869c82923d01cd03c0ada","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfIsLogged.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfIsLogged.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfIsLogged.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfIsLogged.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -22,9 +22,11 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.wicket.request.resource.IResource;\n \n-public class UserSelfIsLogged extends AbstractBaseResource {\n+@Resource(key = \"userSelfIsLogged\", path = \"/api/self/islogged\")\n+public class UserSelfIsLogged extends BaseResource {\n \n     private static final long serialVersionUID = -8716361267586908871L;\n "},{"sha":"d431cfe2377157f7d6ff773e9bf7a420be342d4e","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfPasswordReset.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfPasswordReset.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfPasswordReset.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfPasswordReset.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -26,20 +26,16 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n \n-public class UserSelfPasswordReset extends AbstractBaseResource {\n+@Resource(key = \"userSelfPasswordReset\", path = \"/api/self/requestPasswordReset\")\n+public class UserSelfPasswordReset extends BaseResource {\n \n     private static final long serialVersionUID = -2721621682300247583L;\n \n-    private final UserSelfService userSelfService;\n-\n-    public UserSelfPasswordReset() {\n-        userSelfService = SyncopeEnduserSession.get().getService(UserSelfService.class);\n-    }\n-\n     @Override\n     protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n         AbstractResource.ResourceResponse response = new AbstractResource.ResourceResponse();\n@@ -71,9 +67,11 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                 if (ArrayUtils.isEmpty(securityAnswerParam)) {\n                     throw new Exception(\"A correct security answer should be provided\");\n                 }\n-                userSelfService.requestPasswordReset(usernameParam[0], securityAnswerParam[0]);\n+                SyncopeEnduserSession.get().getService(UserSelfService.class).\n+                        requestPasswordReset(usernameParam[0], securityAnswerParam[0]);\n             } else {\n-                userSelfService.requestPasswordReset(usernameParam[0], null);\n+                SyncopeEnduserSession.get().getService(UserSelfService.class).\n+                        requestPasswordReset(usernameParam[0], null);\n             }\n             final String responseMessage = new StringBuilder().\n                     append(\"Password reset request sent for user \").append(usernameParam[0]).toString();\n@@ -88,7 +86,6 @@ public void writeData(final Attributes attributes) throws IOException {\n             });\n \n             response.setStatusCode(Response.Status.OK.getStatusCode());\n-\n         } catch (final Exception e) {\n             LOG.error(\"Error while updating user\", e);\n             response.setError(Response.Status.BAD_REQUEST.getStatusCode(),"},{"sha":"fc6f4fd07505edab91d14638dc1ab3627eb783b8","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -29,14 +29,16 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n \n-public class UserSelfReadResource extends AbstractBaseResource {\n+@Resource(key = \"userSelfRead\", path = \"/api/self/read\")\n+public class UserSelfReadResource extends BaseResource {\n \n     private static final long serialVersionUID = -9184809392631523912L;\n "},{"sha":"dc465537c043dcd16a3cadaf7c2687226cfb43e3","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4433f5264fde58fd923b355861d889302fe769e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=c4433f5264fde58fd923b355861d889302fe769e","patch":"@@ -33,6 +33,7 @@\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -41,7 +42,8 @@\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n \n-public class UserSelfUpdateResource extends AbstractBaseResource {\n+@Resource(key = \"userSelfUpdate\", path = \"/api/self/update\")\n+public class UserSelfUpdateResource extends BaseResource {\n \n     private static final long serialVersionUID = -2721621682300247583L;\n \n@@ -182,7 +184,6 @@ public void writeData(final Attributes attributes) throws IOException {\n             });\n \n             response.setStatusCode(res.getStatus());\n-\n         } catch (final Exception e) {\n             LOG.error(\"Error while updating user\", e);\n             response.setError(Response.Status.BAD_REQUEST.getStatusCode(),"}]}