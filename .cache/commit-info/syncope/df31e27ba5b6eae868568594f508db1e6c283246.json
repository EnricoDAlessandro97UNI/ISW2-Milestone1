{"sha":"df31e27ba5b6eae868568594f508db1e6c283246","node_id":"C_kwDOJfYA1toAKGRmMzFlMjdiYTViNmVhZTg2ODU2ODU5NGY1MDhkYjFlNmMyODMyNDY","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2023-02-08T09:05:17Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-02-08T09:07:24Z"},"message":"[SYNCOPE-1728] fixes wrong label in BeanPanel and avoid not serializa… (#408)\n\n* [SYNCOPE-1728] fixes wrong label in BeanPanel and avoid not serializable exception","tree":{"sha":"0ce3a5ee4b0427c2bb63f6d3e49e43a60d5f8211","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0ce3a5ee4b0427c2bb63f6d3e49e43a60d5f8211"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/df31e27ba5b6eae868568594f508db1e6c283246","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/df31e27ba5b6eae868568594f508db1e6c283246","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/df31e27ba5b6eae868568594f508db1e6c283246","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/df31e27ba5b6eae868568594f508db1e6c283246/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6c6617c122c5270f457d42acd851feb8ceb1d5b1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6c6617c122c5270f457d42acd851feb8ceb1d5b1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6c6617c122c5270f457d42acd851feb8ceb1d5b1"}],"stats":{"total":35,"additions":18,"deletions":17},"files":[{"sha":"bc3e8079a3e4fbd359380bb9109b308000a47261","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":18,"deletions":17,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/df31e27ba5b6eae868568594f508db1e6c283246/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/df31e27ba5b6eae868568594f508db1e6c283246/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=df31e27ba5b6eae868568594f508db1e6c283246","patch":"@@ -248,7 +248,8 @@ protected void populateItem(final ListItem<String> item) {\n                                 new ListModel(List.of(listItemType.getEnumConstants()))).hideLabel();\n                     } else {\n                         Triple<FieldPanel, Boolean, Optional<String>> single =\n-                                buildSinglePanel(bean.getObject(), field.getType(), field, \"value\");\n+                                buildSinglePanel(bean.getObject(), field.getType(), field.getName(),\n+                                        field.getAnnotation(io.swagger.v3.oas.annotations.media.Schema.class), \"panel\");\n \n                         setRequired(item, single.getMiddle());\n                         single.getRight().ifPresent(description -> setDescription(item, description));\n@@ -264,7 +265,8 @@ protected void populateItem(final ListItem<String> item) {\n                             \"value\", fieldName, new PropertyModel<>(bean, fieldName)).hideLabel();\n                 } else {\n                     Triple<FieldPanel, Boolean, Optional<String>> single =\n-                            buildSinglePanel(bean.getObject(), field.getType(), field, \"value\");\n+                            buildSinglePanel(bean.getObject(), field.getType(), field.getName(),\n+                                    field.getAnnotation(io.swagger.v3.oas.annotations.media.Schema.class), \"value\");\n \n                     setRequired(item, single.getMiddle());\n                     single.getRight().ifPresent(description -> setDescription(item, description));\n@@ -277,35 +279,36 @@ protected void populateItem(final ListItem<String> item) {\n         }.setReuseItems(true).setOutputMarkupId(true));\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    private static Triple<FieldPanel, Boolean, Optional<String>> buildSinglePanel(\n-            final Serializable bean, final Class<?> type, final Field field, final String id) {\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    private Triple<FieldPanel, Boolean, Optional<String>> buildSinglePanel(\n+            final Serializable bean, final Class<?> type, final String fieldName,\n+            final io.swagger.v3.oas.annotations.media.Schema schema, final String id) {\n \n-        PropertyModel model = new PropertyModel<>(bean, field.getName());\n+        PropertyModel model = new PropertyModel<>(bean, fieldName);\n \n         FieldPanel panel;\n         if (ClassUtils.isAssignable(Boolean.class, type)) {\n-            panel = new AjaxCheckBoxPanel(id, field.getName(), model);\n+            panel = new AjaxCheckBoxPanel(id, fieldName, model);\n         } else if (ClassUtils.isAssignable(Number.class, type)) {\n             panel = new AjaxSpinnerFieldPanel.Builder<>().build(\n-                    id, field.getName(), (Class<Number>) ClassUtils.resolvePrimitiveIfNecessary(type), model);\n+                    id, fieldName, (Class<Number>) ClassUtils.resolvePrimitiveIfNecessary(type), model);\n         } else if (Date.class.equals(type)) {\n-            panel = new AjaxDateTimeFieldPanel(id, field.getName(), model,\n+            panel = new AjaxDateTimeFieldPanel(id, fieldName, model,\n                     DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT);\n         } else if (OffsetDateTime.class.equals(type)) {\n-            panel = new AjaxDateTimeFieldPanel(id, field.getName(), new DateOps.WrappedDateModel(model),\n+            panel = new AjaxDateTimeFieldPanel(id, fieldName, new DateOps.WrappedDateModel(model),\n                     DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT);\n         } else if (type.isEnum()) {\n-            panel = new AjaxDropDownChoicePanel(id, field.getName(), model).\n+            panel = new AjaxDropDownChoicePanel(id, fieldName, model).\n                     setChoices(List.of(type.getEnumConstants()));\n         } else if (Duration.class.equals(type)) {\n-            panel = new AjaxTextFieldPanel(id, field.getName(), new IModel<>() {\n+            panel = new AjaxTextFieldPanel(id, fieldName, new IModel<>() {\n \n                 private static final long serialVersionUID = 807008909842554829L;\n \n                 @Override\n                 public String getObject() {\n-                    return Optional.ofNullable(PropertyResolver.getValue(field.getName(), bean)).\n+                    return Optional.ofNullable(PropertyResolver.getValue(fieldName, bean)).\n                             map(Object::toString).orElse(null);\n                 }\n \n@@ -314,19 +317,17 @@ public void setObject(final String object) {\n                     PropertyResolverConverter prc = new PropertyResolverConverter(\n                             SyncopeWebApplication.get().getConverterLocator(),\n                             SyncopeConsoleSession.get().getLocale());\n-                    PropertyResolver.setValue(field.getName(), bean, Duration.parse(object), prc);\n+                    PropertyResolver.setValue(fieldName, bean, Duration.parse(object), prc);\n                 }\n             });\n         } else {\n             // treat as String if nothing matched above\n-            panel = new AjaxTextFieldPanel(id, field.getName(), model);\n+            panel = new AjaxTextFieldPanel(id, fieldName, model);\n         }\n \n         boolean required = false;\n         Optional<String> description = Optional.empty();\n \n-        io.swagger.v3.oas.annotations.media.Schema schema =\n-                field.getAnnotation(io.swagger.v3.oas.annotations.media.Schema.class);\n         if (schema != null) {\n             panel.setReadOnly(schema.accessMode() == Schema.AccessMode.READ_ONLY);\n "}]}