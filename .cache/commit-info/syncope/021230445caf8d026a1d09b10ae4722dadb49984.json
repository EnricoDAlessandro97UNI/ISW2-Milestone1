{"sha":"021230445caf8d026a1d09b10ae4722dadb49984","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAyMTIzMDQ0NWNhZjhkMDI2YTFkMDliMTBhZTQ3MjJkYWRiNDk5ODQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-08T11:32:27Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-08T11:40:00Z"},"message":"[SYNCOPE-1077] Extension provided, not enabled by default in fit/core-reference (profile available)","tree":{"sha":"44f488ec2afc110e2fdf6b8800e1a4b4e4d8f39e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/44f488ec2afc110e2fdf6b8800e1a4b4e4d8f39e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/021230445caf8d026a1d09b10ae4722dadb49984","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/021230445caf8d026a1d09b10ae4722dadb49984","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/021230445caf8d026a1d09b10ae4722dadb49984","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/021230445caf8d026a1d09b10ae4722dadb49984/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9e09aa1288e78b68cd48c60f26af93d7c427b136","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9e09aa1288e78b68cd48c60f26af93d7c427b136","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9e09aa1288e78b68cd48c60f26af93d7c427b136"}],"stats":{"total":2780,"additions":2265,"deletions":515},"files":[{"sha":"1eedd675bab25ad86fc18b8282931ca072027f86","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/Constants.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -45,7 +45,7 @@ public final class Constants {\n \n     public static final String USERNAME_FIELD_NAME = \"username\";\n \n-    public static final String OBJNAME_FIELD_NAME = \"name\";\n+    public static final String NAME_FIELD_NAME = \"name\";\n \n     public static final String DEFAULT_TOKEN_FIELD_NAME = \"token\";\n "},{"sha":"23af8fc2767e1a51b5dbb9b0f54148a60ee269d5","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/InfoResource.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.enduser.resources;\n \n-import static org.apache.syncope.client.enduser.resources.BaseResource.MAPPER;\n-\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.HashMap;"},{"sha":"b08820104e5fa2ae2c0e91e1a331e1cee667922d","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.enduser.resources;\n \n-import static org.apache.syncope.client.enduser.resources.BaseResource.MAPPER;\n-\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;"},{"sha":"8b42285e4db3cbeded9bd9fb4e3bc2b6152d869a","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.enduser.resources;\n \n-import static org.apache.syncope.client.enduser.resources.BaseResource.LOG;\n-\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;"},{"sha":"c4cb6c191c2a1bff6f520b71567784ec854b2baa","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.enduser.resources;\n \n-import static org.apache.syncope.client.enduser.resources.BaseResource.MAPPER;\n-\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Map;"},{"sha":"bbe843dcb07099c214143518a0a2e7fe8050291d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/info/PlatformInfo.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -59,6 +59,8 @@ public class PlatformInfo extends AbstractBaseBean {\n \n     private String passwordGenerator;\n \n+    private String anySearchDAO;\n+\n     private final Set<String> entitlements = new HashSet<>();\n \n     private final Set<String> reportletConfs = new HashSet<>();\n@@ -148,6 +150,14 @@ public void setPasswordGenerator(final String passwordGenerator) {\n         this.passwordGenerator = passwordGenerator;\n     }\n \n+    public String getAnySearchDAO() {\n+        return anySearchDAO;\n+    }\n+\n+    public void setAnySearchDAO(final String anySearchDAO) {\n+        this.anySearchDAO = anySearchDAO;\n+    }\n+\n     @XmlElementWrapper(name = \"entitlements\")\n     @XmlElement(name = \"entitlement\")\n     @JsonProperty(\"entitlements\")"},{"sha":"2c01e6604710b81914716050eabf651c1f716d56","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.ImplementationLookup.Type;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -138,6 +139,9 @@ public class SyncopeLogic extends AbstractLogic<AbstractBaseBean> {\n     @Autowired\n     private PasswordGenerator passwordGenerator;\n \n+    @Autowired\n+    private AnySearchDAO anySearchDAO;\n+\n     @Autowired\n     private ImplementationLookup implLookup;\n \n@@ -173,8 +177,9 @@ public PlatformInfo platform() {\n                 PLATFORM_INFO.setAnyObjectProvisioningManager(AopUtils.getTargetClass(aProvisioningManager).getName());\n                 PLATFORM_INFO.setUserProvisioningManager(AopUtils.getTargetClass(uProvisioningManager).getName());\n                 PLATFORM_INFO.setGroupProvisioningManager(AopUtils.getTargetClass(gProvisioningManager).getName());\n-                PLATFORM_INFO.setVirAttrCache(virAttrCache.getClass().getName());\n-                PLATFORM_INFO.setPasswordGenerator(passwordGenerator.getClass().getName());\n+                PLATFORM_INFO.setVirAttrCache(AopUtils.getTargetClass(virAttrCache).getName());\n+                PLATFORM_INFO.setPasswordGenerator(AopUtils.getTargetClass(passwordGenerator).getName());\n+                PLATFORM_INFO.setAnySearchDAO(AopUtils.getTargetClass(anySearchDAO).getName());\n \n                 PLATFORM_INFO.getReportletConfs().addAll(implLookup.getClassNames(Type.REPORTLET_CONF));\n                 PLATFORM_INFO.getAccountRules().addAll(implLookup.getClassNames(Type.ACCOUNT_RULE_CONF));"},{"sha":"3799150c029158203d899251f7b985645c0bb0d3","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":24,"deletions":23,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -28,34 +28,35 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.core.persistence.api.dao.Reportlet;\n-import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup.Type;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationRecipientsProvider;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n-import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n+import org.apache.syncope.core.provisioning.api.pushpull.ReconciliationFilterBuilder;\n+import org.apache.syncope.core.provisioning.java.data.JEXLMappingItemTransformerImpl;\n+import org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate;\n+import org.apache.syncope.core.provisioning.java.pushpull.PlainAttrsPullCorrelationRule;\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n+import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n import org.springframework.core.type.filter.AssignableTypeFilter;\n import org.springframework.util.ClassUtils;\n-import org.apache.syncope.core.provisioning.api.pushpull.ReconciliationFilterBuilder;\n-import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;\n-import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n-import org.apache.syncope.core.provisioning.java.data.JEXLMappingItemTransformerImpl;\n-import org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate;\n-import org.apache.syncope.core.provisioning.java.pushpull.PlainAttrsPullCorrelationRule;\n \n /**\n  * Cache class names for all implementations of Syncope interfaces found in classpath, for later usage.\n@@ -119,9 +120,9 @@ public void load() {\n             try {\n                 Class<?> clazz = ClassUtils.resolveClassName(\n                         bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n-                boolean isAbsractClazz = Modifier.isAbstract(clazz.getModifiers());\n+                boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n \n-                if (Reportlet.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                if (Reportlet.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     ReportletConfClass annotation = clazz.getAnnotation(ReportletConfClass.class);\n                     if (annotation == null) {\n                         LOG.warn(\"Found Reportlet {} without declared configuration\", clazz.getName());\n@@ -131,7 +132,7 @@ public void load() {\n                     }\n                 }\n \n-                if (AccountRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                if (AccountRule.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     AccountRuleConfClass annotation = clazz.getAnnotation(AccountRuleConfClass.class);\n                     if (annotation == null) {\n                         LOG.warn(\"Found account policy rule {} without declared configuration\", clazz.getName());\n@@ -141,7 +142,7 @@ public void load() {\n                     }\n                 }\n \n-                if (PasswordRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                if (PasswordRule.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     PasswordRuleConfClass annotation = clazz.getAnnotation(PasswordRuleConfClass.class);\n                     if (annotation == null) {\n                         LOG.warn(\"Found password policy rule {} without declared configuration\", clazz.getName());\n@@ -151,50 +152,50 @@ public void load() {\n                     }\n                 }\n \n-                if (MappingItemTransformer.class.isAssignableFrom(clazz) && !isAbsractClazz\n+                if (MappingItemTransformer.class.isAssignableFrom(clazz) && !isAbstractClazz\n                         && !clazz.equals(JEXLMappingItemTransformerImpl.class)) {\n \n                     classNames.get(Type.MAPPING_ITEM_TRANSFORMER).add(clazz.getName());\n                 }\n \n-                if (SchedTaskJobDelegate.class.isAssignableFrom(clazz) && !isAbsractClazz\n+                if (SchedTaskJobDelegate.class.isAssignableFrom(clazz) && !isAbstractClazz\n                         && !PullJobDelegate.class.isAssignableFrom(clazz)\n                         && !PushJobDelegate.class.isAssignableFrom(clazz)\n                         && !GroupMemberProvisionTaskJobDelegate.class.isAssignableFrom(clazz)) {\n \n                     classNames.get(Type.TASKJOBDELEGATE).add(bd.getBeanClassName());\n                 }\n \n-                if (ReconciliationFilterBuilder.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                if (ReconciliationFilterBuilder.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     classNames.get(Type.RECONCILIATION_FILTER_BUILDER).add(bd.getBeanClassName());\n                 }\n \n-                if (LogicActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                if (LogicActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     classNames.get(Type.LOGIC_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n-                if (PropagationActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                if (PropagationActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     classNames.get(Type.PROPAGATION_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n-                if (PullActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                if (PullActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     classNames.get(Type.PULL_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n-                if (PushActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                if (PushActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     classNames.get(Type.PUSH_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n-                if (PullCorrelationRule.class.isAssignableFrom(clazz) && !isAbsractClazz\n+                if (PullCorrelationRule.class.isAssignableFrom(clazz) && !isAbstractClazz\n                         && !PlainAttrsPullCorrelationRule.class.isAssignableFrom(clazz)) {\n                     classNames.get(Type.PULL_CORRELATION_RULE).add(bd.getBeanClassName());\n                 }\n \n-                if (Validator.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                if (Validator.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     classNames.get(Type.VALIDATOR).add(bd.getBeanClassName());\n                 }\n \n-                if (NotificationRecipientsProvider.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                if (NotificationRecipientsProvider.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     classNames.get(Type.NOTIFICATION_RECIPIENTS_PROVIDER).add(bd.getBeanClassName());\n                 }\n             } catch (Throwable t) {"},{"sha":"0aeaf0a02040d2d8546a3f097ea8e882b7621908","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/GroupReportlet.java","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -47,8 +48,6 @@\n @ReportletConfClass(GroupReportletConf.class)\n public class GroupReportlet extends AbstractReportlet {\n \n-    private static final int PAGE_SIZE = 10;\n-\n     @Autowired\n     private GroupDAO groupDAO;\n \n@@ -297,15 +296,21 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n \n         doExtractConf(handler);\n \n-        if (StringUtils.isBlank(this.conf.getMatchingCond())) {\n-            doExtract(handler, groupDAO.findAll());\n-        } else {\n-            for (int page = 1; page <= (count() / PAGE_SIZE) + 1; page++) {\n-                List<Group> groups = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+        for (int page = 1; page <= (count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+            List<Group> groups;\n+            if (StringUtils.isBlank(this.conf.getMatchingCond())) {\n+                groups = groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE);\n+            } else {\n+                groups = searchDAO.search(\n+                        SyncopeConstants.FULL_ADMIN_REALMS,\n                         SearchCondConverter.convert(this.conf.getMatchingCond()),\n-                        page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), AnyTypeKind.GROUP);\n-                doExtract(handler, groups);\n+                        page,\n+                        AnyDAO.DEFAULT_PAGE_SIZE,\n+                        Collections.<OrderByClause>emptyList(),\n+                        AnyTypeKind.USER);\n             }\n+\n+            doExtract(handler, groups);\n         }\n     }\n }"},{"sha":"4922015b69e17b3fe8ddce53633d42ba7691e360","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReconciliationReportlet.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReconciliationReportlet.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.report.ReconciliationReportletConf.Feature;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n@@ -402,7 +403,9 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n             atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(userDAO.count()));\n             handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.USER) + \"s\", atts);\n \n-            doExtract(handler, userDAO.findAll());\n+            for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                doExtract(handler, userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE));\n+            }\n         } else {\n             SearchCond cond = SearchCondConverter.convert(this.conf.getUserMatchingCond());\n \n@@ -419,7 +422,9 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n             atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(groupDAO.count()));\n             handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.GROUP) + \"s\", atts);\n \n-            doExtract(handler, groupDAO.findAll());\n+            for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                doExtract(handler, groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE));\n+            }\n         } else {\n             SearchCond cond = SearchCondConverter.convert(this.conf.getUserMatchingCond());\n "},{"sha":"bb1048b79227e94065c925fd4d4fb5d07c81c339","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -53,8 +54,6 @@\n @ReportletConfClass(UserReportletConf.class)\n public class UserReportlet extends AbstractReportlet {\n \n-    private static final int PAGE_SIZE = 10;\n-\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -364,15 +363,21 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n \n         doExtractConf(handler);\n \n-        if (StringUtils.isBlank(this.conf.getMatchingCond())) {\n-            doExtract(handler, userDAO.findAll());\n-        } else {\n-            for (int page = 1; page <= (count() / PAGE_SIZE) + 1; page++) {\n-                List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+        for (int page = 1; page <= (count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+            List<User> users;\n+            if (StringUtils.isBlank(this.conf.getMatchingCond())) {\n+                users = userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE);\n+            } else {\n+                users = searchDAO.search(\n+                        SyncopeConstants.FULL_ADMIN_REALMS,\n                         SearchCondConverter.convert(this.conf.getMatchingCond()),\n-                        page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), AnyTypeKind.USER);\n-                doExtract(handler, users);\n+                        page,\n+                        AnyDAO.DEFAULT_PAGE_SIZE,\n+                        Collections.<OrderByClause>emptyList(),\n+                        AnyTypeKind.USER);\n             }\n+\n+            doExtract(handler, users);\n         }\n     }\n }"},{"sha":"44c0c8c3345a887942acb03989d0c3c77b5cbabd","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -28,6 +28,8 @@\n \n public interface AnyDAO<A extends Any<?>> extends DAO<A> {\n \n+    int DEFAULT_PAGE_SIZE = 10;\n+\n     A authFind(String key);\n \n     A find(String key);\n@@ -53,11 +55,18 @@\n     List<A> findByResource(ExternalResource resource);\n \n     /**\n-     * Find any objects without any limitation.\n+     * @return the total number of any objects of type {@link A}\n+     */\n+    int count();\n+\n+    /**\n+     * Find any objects without any limitation, according to given page and items per page.\n      *\n-     * @return all any objects of type {@link A} available.\n+     * @param page search result page\n+     * @param itemsPerPage items per search result page\n+     * @return any objects of type {@link A} matching the provided conditions\n      */\n-    List<A> findAll();\n+    List<A> findAll(int page, int itemsPerPage);\n \n     /**\n      * Find any objects visible from the given admin realms, according to given page and items per page, sorted as"},{"sha":"c3a4cd7532306219caa7e037d5c82f15607bb8e3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n \n public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n@@ -46,15 +45,13 @@ public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n     List<Group> findDynGroupMemberships(AnyObject anyObject);\n \n-    List<ARelationship> findARelationships(AnyObject anyObject);\n-\n-    List<URelationship> findURelationships(AnyObject anyObject);\n+    List<ARelationship> findAllARelationships(AnyObject anyObject);\n \n     Collection<Group> findAllGroups(AnyObject anyObject);\n \n     Collection<String> findAllGroupKeys(AnyObject anyObject);\n \n     Collection<ExternalResource> findAllResources(AnyObject anyObject);\n \n-    Collection<String> findAllResourceNames(String key);\n+    Collection<String> findAllResourceKeys(String key);\n }"},{"sha":"c74e430303c465de4ecc8a439556d2023c561c1e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -30,8 +30,6 @@\n \n public interface GroupDAO extends AnyDAO<Group> {\n \n-    int count();\n-\n     Map<String, Integer> countByRealm();\n \n     Group findByName(String name);"},{"sha":"55efa93b7788575661e524290347106efba2adac","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -30,8 +30,6 @@\n \n public interface UserDAO extends AnyDAO<User> {\n \n-    int count();\n-\n     Map<String, Integer> countByRealm();\n \n     Map<String, Integer> countByStatus();\n@@ -58,7 +56,7 @@ public interface UserDAO extends AnyDAO<User> {\n \n     Collection<ExternalResource> findAllResources(User user);\n \n-    Collection<String> findAllResourceNames(String key);\n+    Collection<String> findAllResourceKeys(String key);\n \n     Pair<Boolean, Boolean> enforcePolicies(User user);\n }"},{"sha":"c653f238a7c3026fc6dc913c9463fa5231ad4c3d","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -97,11 +97,6 @@ under the License.\n       <artifactId>commons-jexl3</artifactId>\n     </dependency>\n       \n-    <dependency>\n-      <groupId>org.quartz-scheduler</groupId>\n-      <artifactId>quartz</artifactId>\n-    </dependency>\n-      \n     <dependency>\n       <groupId>org.apache.syncope.core</groupId>\n       <artifactId>syncope-core-workflow-api</artifactId>"},{"sha":"f348a060ac72b2e02ac0ec94d059fd5828096d5a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -36,7 +36,6 @@\n import org.apache.commons.jexl3.parser.ParserConstants;\n import org.apache.commons.jexl3.parser.Token;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n@@ -64,11 +63,16 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> implements AnyDAO<A> {\n \n+    @Autowired\n+    protected ApplicationEventPublisher publisher;\n+\n     private PlainSchemaDAO plainSchemaDAO;\n \n     private DerSchemaDAO derSchemaDAO;\n@@ -425,11 +429,6 @@ public List<A> findByResource(final ExternalResource resource) {\n         return query.getResultList();\n     }\n \n-    @Override\n-    public final List<A> findAll() {\n-        return findAll(SyncopeConstants.FULL_ADMIN_REALMS, -1, -1, Collections.<OrderByClause>emptyList());\n-    }\n-\n     private SearchCond getAllMatchingCond() {\n         AnyCond idCond = new AnyCond(AttributeCond.Type.ISNOTNULL);\n         idCond.setSchema(\"id\");"},{"sha":"d9b4e95bad07f37f6b75f3f5a6282e24461e74e4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"added","additions":343,"deletions":0,"changes":343,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,343 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.Entity;\n+import javax.validation.ValidationException;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.commons.lang3.ClassUtils;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.ReflectionUtils;\n+\n+public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implements AnySearchDAO {\n+\n+    @Autowired\n+    protected RealmDAO realmDAO;\n+\n+    @Autowired\n+    protected AnyObjectDAO anyObjectDAO;\n+\n+    @Autowired\n+    protected UserDAO userDAO;\n+\n+    @Autowired\n+    protected GroupDAO groupDAO;\n+\n+    @Autowired\n+    protected PlainSchemaDAO schemaDAO;\n+\n+    @Autowired\n+    protected AnyUtilsFactory anyUtilsFactory;\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public <T extends Any<?>> List<T> searchAssignable(final String realmFullPath, final AnyTypeKind kind) {\n+        AssignableCond assignableCond = new AssignableCond();\n+        assignableCond.setRealmFullPath(realmFullPath);\n+        return search(SearchCond.getLeafCond(assignableCond), kind);\n+    }\n+\n+    protected abstract int doCount(Set<String> adminRealms, SearchCond cond, AnyTypeKind kind);\n+\n+    @Override\n+    public int count(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n+        if (adminRealms == null || adminRealms.isEmpty()) {\n+            LOG.error(\"No realms provided\");\n+            return 0;\n+        }\n+\n+        LOG.debug(\"Search condition:\\n{}\", cond);\n+        if (cond == null || !cond.isValid()) {\n+            LOG.error(\"Invalid search condition:\\n{}\", cond);\n+            return 0;\n+        }\n+\n+        return doCount(adminRealms, cond, kind);\n+    }\n+\n+    @Override\n+    public <T extends Any<?>> List<T> search(final SearchCond cond, final AnyTypeKind kind) {\n+        return search(cond, Collections.<OrderByClause>emptyList(), kind);\n+    }\n+\n+    @Override\n+    public <T extends Any<?>> List<T> search(\n+            final SearchCond cond, final List<OrderByClause> orderBy, final AnyTypeKind kind) {\n+\n+        return search(SyncopeConstants.FULL_ADMIN_REALMS, cond, -1, -1, orderBy, kind);\n+    }\n+\n+    protected abstract <T extends Any<?>> List<T> doSearch(\n+            Set<String> adminRealms,\n+            SearchCond searchCondition,\n+            int page,\n+            int itemsPerPage,\n+            List<OrderByClause> orderBy,\n+            AnyTypeKind kind);\n+\n+    protected Pair<PlainSchema, PlainAttrValue> check(final AttributeCond cond, final AnyTypeKind kind) {\n+        AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);\n+\n+        PlainSchema schema = schemaDAO.find(cond.getSchema());\n+        if (schema == null) {\n+            LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n+            throw new IllegalArgumentException();\n+        }\n+\n+        PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n+        try {\n+            if (cond.getType() != AttributeCond.Type.LIKE\n+                    && cond.getType() != AttributeCond.Type.ILIKE\n+                    && cond.getType() != AttributeCond.Type.ISNULL\n+                    && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+\n+                schema.getValidator().validate(cond.getExpression(), attrValue);\n+            }\n+        } catch (ValidationException e) {\n+            LOG.error(\"Could not validate expression '\" + cond.getExpression() + \"'\", e);\n+            throw new IllegalArgumentException();\n+        }\n+\n+        return Pair.of(schema, attrValue);\n+    }\n+\n+    protected Triple<PlainSchema, PlainAttrValue, AnyCond> check(final AnyCond cond, final AnyTypeKind kind) {\n+        AnyCond condClone = SerializationUtils.clone(cond);\n+\n+        AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);\n+\n+        // Keeps track of difference between entity's getKey() and JPA @Id fields\n+        if (\"key\".equals(condClone.getSchema())) {\n+            condClone.setSchema(\"id\");\n+        }\n+\n+        Field anyField = ReflectionUtils.findField(attrUtils.anyClass(), condClone.getSchema());\n+        if (anyField == null) {\n+            LOG.warn(\"Ignoring invalid schema '{}'\", condClone.getSchema());\n+            throw new IllegalArgumentException();\n+        }\n+\n+        PlainSchema schema = new JPAPlainSchema();\n+        schema.setKey(anyField.getName());\n+        for (AttrSchemaType attrSchemaType : AttrSchemaType.values()) {\n+            if (anyField.getType().isAssignableFrom(attrSchemaType.getType())) {\n+                schema.setType(attrSchemaType);\n+            }\n+        }\n+\n+        // Deal with any Integer fields logically mapping to boolean values\n+        boolean foundBooleanMin = false;\n+        boolean foundBooleanMax = false;\n+        if (Integer.class.equals(anyField.getType())) {\n+            for (Annotation annotation : anyField.getAnnotations()) {\n+                if (Min.class.equals(annotation.annotationType())) {\n+                    foundBooleanMin = ((Min) annotation).value() == 0;\n+                } else if (Max.class.equals(annotation.annotationType())) {\n+                    foundBooleanMax = ((Max) annotation).value() == 1;\n+                }\n+            }\n+        }\n+        if (foundBooleanMin && foundBooleanMax) {\n+            schema.setType(AttrSchemaType.Boolean);\n+        }\n+\n+        // Deal with any fields representing relationships to other entities\n+        if (anyField.getType().getAnnotation(Entity.class) != null) {\n+            Method relMethod = null;\n+            try {\n+                relMethod = ClassUtils.getPublicMethod(anyField.getType(), \"getKey\", new Class<?>[0]);\n+            } catch (Exception e) {\n+                LOG.error(\"Could not find {}#getKey\", anyField.getType(), e);\n+            }\n+\n+            if (relMethod != null && String.class.isAssignableFrom(relMethod.getReturnType())) {\n+                condClone.setSchema(condClone.getSchema() + \"_id\");\n+                schema.setType(AttrSchemaType.String);\n+            }\n+        }\n+\n+        PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n+        if (condClone.getType() != AttributeCond.Type.LIKE\n+                && condClone.getType() != AttributeCond.Type.ILIKE\n+                && condClone.getType() != AttributeCond.Type.ISNULL\n+                && condClone.getType() != AttributeCond.Type.ISNOTNULL) {\n+\n+            try {\n+                schema.getValidator().validate(condClone.getExpression(), attrValue);\n+            } catch (ValidationException e) {\n+                LOG.error(\"Could not validate expression '\" + condClone.getExpression() + \"'\", e);\n+                throw new IllegalArgumentException();\n+            }\n+        }\n+\n+        return Triple.of(schema, attrValue, condClone);\n+    }\n+\n+    protected String check(final MembershipCond cond) {\n+        String groupKey;\n+        if (SyncopeConstants.UUID_PATTERN.matcher(cond.getGroup()).matches()) {\n+            groupKey = cond.getGroup();\n+        } else {\n+            Group group = groupDAO.findByName(cond.getGroup());\n+            groupKey = group == null ? null : group.getKey();\n+        }\n+        if (groupKey == null) {\n+            LOG.error(\"Could not find group for '\" + cond.getGroup() + \"'\");\n+            throw new IllegalArgumentException();\n+        }\n+\n+        return groupKey;\n+    }\n+\n+    protected String check(final RelationshipCond cond) {\n+        String rightAnyObjectKey;\n+        if (SyncopeConstants.UUID_PATTERN.matcher(cond.getAnyObject()).matches()) {\n+            rightAnyObjectKey = cond.getAnyObject();\n+        } else {\n+            AnyObject anyObject = anyObjectDAO.findByName(cond.getAnyObject());\n+            rightAnyObjectKey = anyObject == null ? null : anyObject.getKey();\n+        }\n+        if (rightAnyObjectKey == null) {\n+            LOG.error(\"Could not find any object for '\" + cond.getAnyObject() + \"'\");\n+            throw new IllegalArgumentException();\n+        }\n+\n+        return rightAnyObjectKey;\n+    }\n+\n+    protected Realm check(final AssignableCond cond) {\n+        Realm realm = realmDAO.findByFullPath(cond.getRealmFullPath());\n+        if (realm == null) {\n+            LOG.error(\"Could not find realm for '\" + cond.getRealmFullPath() + \"'\");\n+            throw new IllegalArgumentException();\n+        }\n+\n+        return realm;\n+    }\n+\n+    protected String check(final MemberCond cond) {\n+        String memberKey;\n+        if (SyncopeConstants.UUID_PATTERN.matcher(cond.getMember()).matches()) {\n+            memberKey = cond.getMember();\n+        } else {\n+            Any<?> member = userDAO.findByUsername(cond.getMember());\n+            if (member == null) {\n+                member = anyObjectDAO.findByName(cond.getMember());\n+            }\n+            memberKey = member == null ? null : member.getKey();\n+        }\n+        if (memberKey == null) {\n+            LOG.error(\"Could not find user or any object for '\" + cond.getMember() + \"'\");\n+            throw new IllegalArgumentException();\n+        }\n+\n+        return memberKey;\n+    }\n+\n+    protected <T extends Any<?>> List<T> buildResult(final List<Object> raw, final AnyTypeKind kind) {\n+        List<T> result = new ArrayList<>();\n+\n+        for (Object anyKey : raw) {\n+            String actualKey = anyKey instanceof Object[]\n+                    ? (String) ((Object[]) anyKey)[0]\n+                    : ((String) anyKey);\n+\n+            @SuppressWarnings(\"unchecked\")\n+            T any = kind == AnyTypeKind.USER\n+                    ? (T) userDAO.find(actualKey)\n+                    : kind == AnyTypeKind.GROUP\n+                            ? (T) groupDAO.find(actualKey)\n+                            : (T) anyObjectDAO.find(actualKey);\n+            if (any == null) {\n+                LOG.error(\"Could not find {} with id {}, even if returned by native query\", kind, actualKey);\n+            } else if (!result.contains(any)) {\n+                result.add(any);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends Any<?>> List<T> search(\n+            final Set<String> adminRealms,\n+            final SearchCond cond,\n+            final int page,\n+            final int itemsPerPage,\n+            final List<OrderByClause> orderBy,\n+            final AnyTypeKind kind) {\n+\n+        if (adminRealms == null || adminRealms.isEmpty()) {\n+            LOG.error(\"No realms provided\");\n+            return Collections.<T>emptyList();\n+        }\n+\n+        LOG.debug(\"Search condition:\\n{}\", cond);\n+        if (cond == null || !cond.isValid()) {\n+            LOG.error(\"Invalid search condition:\\n{}\", cond);\n+            return Collections.<T>emptyList();\n+        }\n+\n+        return doSearch(adminRealms, cond, page, itemsPerPage, orderBy, kind);\n+    }\n+\n+    @Override\n+    public <T extends Any<?>> boolean matches(final T any, final SearchCond cond) {\n+        return search(cond, any.getType().getKind()).contains(any);\n+    }\n+}"},{"sha":"a64afe36ebfe9e504c3eb8ea8f45af2bd043ef30","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":37,"deletions":8,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -59,6 +59,8 @@\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.event.AnyCreatedUpdatedEvent;\n+import org.apache.syncope.core.spring.event.AnyDeletedEvent;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n@@ -175,34 +177,60 @@ public AnyObject authFindByName(final String name) {\n     }\n \n     @Override\n-    public List<ARelationship> findARelationships(final AnyObject anyObject) {\n+    public List<ARelationship> findAllARelationships(final AnyObject anyObject) {\n         TypedQuery<ARelationship> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAARelationship.class.getSimpleName()\n-                + \" e WHERE e.rightEnd=:anyObject\", ARelationship.class);\n+                + \" e WHERE e.rightEnd=:anyObject OR e.leftEnd=:anyObject\", ARelationship.class);\n         query.setParameter(\"anyObject\", anyObject);\n \n         return query.getResultList();\n     }\n \n     @Override\n-    public List<URelationship> findURelationships(final AnyObject anyObject) {\n-        TypedQuery<URelationship> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAURelationship.class.getSimpleName()\n-                + \" e WHERE e.rightEnd=:anyObject\", URelationship.class);\n-        query.setParameter(\"anyObject\", anyObject);\n+    public int count() {\n+        Query query = entityManager().createQuery(\n+                \"SELECT COUNT(e) FROM  \" + JPAAnyObject.class.getSimpleName() + \" e\");\n+        return ((Number) query.getSingleResult()).intValue();\n+    }\n+\n+    @Override\n+    public List<AnyObject> findAll(final int page, final int itemsPerPage) {\n+        TypedQuery<AnyObject> query = entityManager().createQuery(\n+                \"SELECT e FROM  \" + JPAAnyObject.class.getSimpleName() + \" e\", AnyObject.class);\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+        query.setMaxResults(itemsPerPage);\n \n         return query.getResultList();\n     }\n \n     @Override\n     public AnyObject save(final AnyObject anyObject) {\n         AnyObject merged = super.save(anyObject);\n+        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged));\n \n         groupDAO().refreshDynMemberships(merged);\n \n         return merged;\n     }\n \n+    private List<ARelationship> findARelationships(final AnyObject anyObject) {\n+        TypedQuery<ARelationship> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAARelationship.class.getSimpleName()\n+                + \" e WHERE e.rightEnd=:anyObject\", ARelationship.class);\n+        query.setParameter(\"anyObject\", anyObject);\n+\n+        return query.getResultList();\n+    }\n+\n+    private List<URelationship> findURelationships(final AnyObject anyObject) {\n+        TypedQuery<URelationship> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAURelationship.class.getSimpleName()\n+                + \" e WHERE e.rightEnd=:anyObject\", URelationship.class);\n+        query.setParameter(\"anyObject\", anyObject);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public void delete(final AnyObject any) {\n         for (Group group : findDynGroupMemberships(any)) {\n@@ -223,6 +251,7 @@ public void delete(final AnyObject any) {\n         }\n \n         entityManager().remove(any);\n+        publisher.publishEvent(new AnyDeletedEvent(this, AnyTypeKind.ANY_OBJECT, any.getKey()));\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n@@ -287,7 +316,7 @@ public Collection<ExternalResource> findAllResources(final AnyObject anyObject)\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n-    public Collection<String> findAllResourceNames(final String key) {\n+    public Collection<String> findAllResourceKeys(final String key) {\n         return CollectionUtils.collect(findAllResources(authFind(key)), EntityUtils.<ExternalResource>keyTransformer());\n     }\n "},{"sha":"276b5703a82f108ed453a2553a1991ad51c6a1e1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":71,"deletions":283,"changes":354,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -18,36 +18,23 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import javax.persistence.Entity;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n-import javax.validation.ValidationException;\n-import javax.validation.constraints.Max;\n-import javax.validation.constraints.Min;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.lang3.ClassUtils;\n-import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -62,42 +49,18 @@\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Propagation;\n-import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ReflectionUtils;\n \n-@Repository\n-public class JPAAnySearchDAO extends AbstractDAO<Any<?>> implements AnySearchDAO {\n+/**\n+ * Search engine implementation for users, groups and any objects, based on self-updating SQL views.\n+ */\n+public class JPAAnySearchDAO extends AbstractAnySearchDAO {\n \n     private static final String EMPTY_QUERY = \"SELECT any_id FROM user_search_attr WHERE 1=2\";\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n-\n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n-    @Autowired\n-    private PlainSchemaDAO schemaDAO;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n     private String getAdminRealmsFilter(\n             final Set<String> adminRealms,\n             final SearchSupport svs,\n@@ -135,11 +98,11 @@ private String getAdminRealmsFilter(\n     }\n \n     @Override\n-    public int count(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind typeKind) {\n+    protected int doCount(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n \n         // 1. get the query string from the search condition\n-        SearchSupport svs = new SearchSupport(typeKind);\n+        SearchSupport svs = new SearchSupport(kind);\n         StringBuilder queryString = getQuery(cond, parameters, svs);\n \n         // 2. take into account administrative realms\n@@ -156,78 +119,56 @@ public int count(final Set<String> adminRealms, final SearchCond cond, final Any\n         return ((Number) countQuery.getSingleResult()).intValue();\n     }\n \n-    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n-    @Override\n-    public <T extends Any<?>> List<T> searchAssignable(final String realmFullPath, final AnyTypeKind kind) {\n-        AssignableCond assignableCond = new AssignableCond();\n-        assignableCond.setRealmFullPath(realmFullPath);\n-        return search(SearchCond.getLeafCond(assignableCond), kind);\n-    }\n-\n-    @Override\n-    public <T extends Any<?>> List<T> search(final SearchCond cond, final AnyTypeKind typeKind) {\n-        return search(cond, Collections.<OrderByClause>emptyList(), typeKind);\n-    }\n-\n     @Override\n-    public <T extends Any<?>> List<T> search(\n-            final SearchCond cond, final List<OrderByClause> orderBy, final AnyTypeKind typeKind) {\n-\n-        return search(SyncopeConstants.FULL_ADMIN_REALMS, cond, -1, -1, orderBy, typeKind);\n-    }\n-\n-    @Override\n-    public <T extends Any<?>> List<T> search(\n-            final Set<String> adminRealms, final SearchCond cond, final int page, final int itemsPerPage,\n-            final List<OrderByClause> orderBy, final AnyTypeKind typeKind) {\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends Any<?>> List<T> doSearch(\n+            final Set<String> adminRealms,\n+            final SearchCond cond,\n+            final int page,\n+            final int itemsPerPage,\n+            final List<OrderByClause> orderBy,\n+            final AnyTypeKind kind) {\n \n-        List<T> result = Collections.<T>emptyList();\n+        try {\n+            List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n \n-        if (adminRealms != null && !adminRealms.isEmpty()) {\n-            LOG.debug(\"Search condition:\\n{}\", cond);\n+            // 1. get the query string from the search condition\n+            SearchSupport svs = new SearchSupport(kind);\n+            StringBuilder queryString = getQuery(cond, parameters, svs);\n \n-            if (cond != null && cond.isValid()) {\n-                try {\n-                    result = doSearch(adminRealms, cond, page, itemsPerPage, orderBy, typeKind);\n-                } catch (Exception e) {\n-                    LOG.error(\"While searching for {}\", typeKind, e);\n-                }\n+            // 2. take into account realms and ordering\n+            OrderBySupport obs = parseOrderBy(kind, svs, orderBy);\n+            if (queryString.charAt(0) == '(') {\n+                queryString.insert(0, buildSelect(obs));\n+                queryString.append(buildWhere(svs, obs));\n             } else {\n-                LOG.error(\"Invalid search condition:\\n{}\", cond);\n+                queryString.insert(0, buildSelect(obs).append('('));\n+                queryString.append(')').append(buildWhere(svs, obs));\n             }\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends Any<?>> boolean matches(final T any, final SearchCond cond) {\n-        List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n-\n-        // 1. get the query string from the search condition\n-        SearchSupport svs = new SearchSupport(any.getType().getKind());\n-        StringBuilder queryString = getQuery(cond, parameters, svs);\n-\n-        boolean matches;\n-        if (queryString.length() == 0) {\n-            // Could be empty: got into a group search with a single membership condition ...\n-            matches = false;\n-        } else {\n-            // 2. take into account the passed user\n-            queryString.insert(0, \"SELECT u.any_id FROM (\");\n-            queryString.append(\") u WHERE any_id=?\").append(setParameter(parameters, any.getKey()));\n+            queryString.\n+                    append(getAdminRealmsFilter(adminRealms, svs, parameters)).\n+                    append(buildOrderBy(obs));\n \n             // 3. prepare the search query\n             Query query = entityManager().createNativeQuery(queryString.toString());\n \n-            // 4. populate the search query with parameter values\n+            // 4. page starts from 1, while setFirtResult() starts from 0\n+            query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+\n+            if (itemsPerPage >= 0) {\n+                query.setMaxResults(itemsPerPage);\n+            }\n+\n+            // 5. populate the search query with parameter values\n             fillWithParameters(query, parameters);\n \n-            // 5. executes query\n-            matches = !query.getResultList().isEmpty();\n+            // 6. Prepare the result (avoiding duplicates)\n+            return buildResult(query.getResultList(), kind);\n+        } catch (Exception e) {\n+            LOG.error(\"While searching for {}\", kind, e);\n         }\n \n-        return matches;\n+        return Collections.emptyList();\n     }\n \n     private int setParameter(final List<Object> parameters, final Object parameter) {\n@@ -370,67 +311,6 @@ private OrderBySupport parseOrderBy(final AnyTypeKind type, final SearchSupport\n         return obs;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private <T extends Any<?>> List<T> doSearch(final Set<String> adminRealms,\n-            final SearchCond cond, final int page, final int itemsPerPage, final List<OrderByClause> orderBy,\n-            final AnyTypeKind typeKind) {\n-\n-        List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n-\n-        // 1. get the query string from the search condition\n-        SearchSupport svs = new SearchSupport(typeKind);\n-        StringBuilder queryString = getQuery(cond, parameters, svs);\n-\n-        // 2. take into account administrative groups and ordering\n-        OrderBySupport obs = parseOrderBy(typeKind, svs, orderBy);\n-        if (queryString.charAt(0) == '(') {\n-            queryString.insert(0, buildSelect(obs));\n-            queryString.append(buildWhere(svs, obs));\n-        } else {\n-            queryString.insert(0, buildSelect(obs).append('('));\n-            queryString.append(')').append(buildWhere(svs, obs));\n-        }\n-        queryString.\n-                append(getAdminRealmsFilter(adminRealms, svs, parameters)).\n-                append(buildOrderBy(obs));\n-\n-        // 3. prepare the search query\n-        Query query = entityManager().createNativeQuery(queryString.toString());\n-\n-        // 4. page starts from 1, while setFirtResult() starts from 0\n-        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n-\n-        if (itemsPerPage >= 0) {\n-            query.setMaxResults(itemsPerPage);\n-        }\n-\n-        // 5. populate the search query with parameter values\n-        fillWithParameters(query, parameters);\n-\n-        // 6. Prepare the result (avoiding duplicates)\n-        List<T> result = new ArrayList<>();\n-\n-        for (Object anyKey : query.getResultList()) {\n-            String actualKey = anyKey instanceof Object[]\n-                    ? (String) ((Object[]) anyKey)[0]\n-                    : ((String) anyKey);\n-\n-            T any = typeKind == AnyTypeKind.USER\n-                    ? (T) userDAO.find(actualKey)\n-                    : typeKind == AnyTypeKind.GROUP\n-                            ? (T) groupDAO.find(actualKey)\n-                            : (T) anyObjectDAO.find(actualKey);\n-            if (any == null) {\n-                LOG.error(\"Could not find {} with id {}, even though returned by the native query\",\n-                        typeKind, actualKey);\n-            } else if (!result.contains(any)) {\n-                result.add(any);\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n     private StringBuilder getQuery(final SearchCond cond, final List<Object> parameters, final SearchSupport svs) {\n         StringBuilder query = new StringBuilder();\n \n@@ -548,13 +428,9 @@ private String getQuery(\n             final RelationshipCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n         String rightAnyObjectKey;\n-        if (SyncopeConstants.UUID_PATTERN.matcher(cond.getAnyObject()).matches()) {\n-            rightAnyObjectKey = cond.getAnyObject();\n-        } else {\n-            AnyObject anyObject = anyObjectDAO.findByName(cond.getAnyObject());\n-            rightAnyObjectKey = anyObject == null ? null : anyObject.getKey();\n-        }\n-        if (rightAnyObjectKey == null) {\n+        try {\n+            rightAnyObjectKey = check(cond);\n+        } catch (IllegalArgumentException e) {\n             return EMPTY_QUERY;\n         }\n \n@@ -579,13 +455,9 @@ private String getQuery(\n             final MembershipCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n         String groupKey;\n-        if (SyncopeConstants.UUID_PATTERN.matcher(cond.getGroup()).matches()) {\n-            groupKey = cond.getGroup();\n-        } else {\n-            Group group = groupDAO.findByName(cond.getGroup());\n-            groupKey = group == null ? null : group.getKey();\n-        }\n-        if (groupKey == null) {\n+        try {\n+            groupKey = check(cond);\n+        } catch (IllegalArgumentException e) {\n             return EMPTY_QUERY;\n         }\n \n@@ -678,8 +550,10 @@ private String getQuery(\n     }\n \n     private String getQuery(final AssignableCond cond, final List<Object> parameters, final SearchSupport svs) {\n-        Realm realm = realmDAO.findByFullPath(cond.getRealmFullPath());\n-        if (realm == null) {\n+        Realm realm;\n+        try {\n+            realm = check(cond);\n+        } catch (IllegalArgumentException e) {\n             return EMPTY_QUERY;\n         }\n \n@@ -705,16 +579,9 @@ private String getQuery(\n             final MemberCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n         String memberKey;\n-        if (SyncopeConstants.UUID_PATTERN.matcher(cond.getMember()).matches()) {\n-            memberKey = cond.getMember();\n-        } else {\n-            Any<?> member = userDAO.findByUsername(cond.getMember());\n-            if (member == null) {\n-                member = anyObjectDAO.findByName(cond.getMember());\n-            }\n-            memberKey = member == null ? null : member.getKey();\n-        }\n-        if (memberKey == null) {\n+        try {\n+            memberKey = check(cond);\n+        } catch (IllegalArgumentException e) {\n             return EMPTY_QUERY;\n         }\n \n@@ -746,7 +613,7 @@ private String getQuery(\n         return query.toString();\n     }\n \n-    private void fillAttributeQuery(\n+    private void fillAttrQuery(\n             final StringBuilder query,\n             final PlainAttrValue attrValue,\n             final PlainSchema schema,\n@@ -864,28 +731,10 @@ private void fillAttributeQuery(\n     private String getQuery(\n             final AttributeCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n-        AnyUtils attrUtils = anyUtilsFactory.getInstance(svs.anyTypeKind);\n-\n-        PlainSchema schema = schemaDAO.find(cond.getSchema());\n-        if (schema == null) {\n-            LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n-            return EMPTY_QUERY;\n-        }\n-\n-        // keep track of involvement of non-mandatory schemas in the search condition\n-        svs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());\n-\n-        PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n+        Pair<PlainSchema, PlainAttrValue> checked;\n         try {\n-            if (cond.getType() != AttributeCond.Type.LIKE\n-                    && cond.getType() != AttributeCond.Type.ILIKE\n-                    && cond.getType() != AttributeCond.Type.ISNULL\n-                    && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n-\n-                schema.getValidator().validate(cond.getExpression(), attrValue);\n-            }\n-        } catch (ValidationException e) {\n-            LOG.error(\"Could not validate expression '\" + cond.getExpression() + \"'\", e);\n+            checked = check(cond, svs.anyTypeKind);\n+        } catch (IllegalArgumentException e) {\n             return EMPTY_QUERY;\n         }\n \n@@ -895,22 +744,22 @@ private String getQuery(\n                 query.append(svs.field().name).\n                         append(\" WHERE any_id NOT IN (SELECT any_id FROM \").\n                         append(svs.nullAttr().name).\n-                        append(\" WHERE schema_id='\").append(schema.getKey()).append(\"')\");\n+                        append(\" WHERE schema_id='\").append(checked.getLeft().getKey()).append(\"')\");\n                 break;\n \n             case ISNULL:\n                 query.append(svs.nullAttr().name).\n-                        append(\" WHERE schema_id='\").append(schema.getKey()).append(\"'\");\n+                        append(\" WHERE schema_id='\").append(checked.getLeft().getKey()).append(\"'\");\n                 break;\n \n             default:\n-                if (schema.isUniqueConstraint()) {\n+                if (checked.getLeft().isUniqueConstraint()) {\n                     query.append(svs.uniqueAttr().name);\n                 } else {\n                     query.append(svs.attr().name);\n                 }\n-                query.append(\" WHERE schema_id='\").append(schema.getKey());\n-                fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);\n+                query.append(\" WHERE schema_id='\").append(checked.getLeft().getKey());\n+                fillAttrQuery(query, checked.getRight(), checked.getLeft(), cond, not, parameters, svs);\n         }\n \n         return query.toString();\n@@ -919,78 +768,17 @@ private String getQuery(\n     private String getQuery(\n             final AnyCond cond, final boolean not, final List<Object> parameters, final SearchSupport svs) {\n \n-        AnyCond condClone = SerializationUtils.clone(cond);\n-\n-        AnyUtils attrUtils = anyUtilsFactory.getInstance(svs.anyTypeKind);\n-\n-        // Keeps track of difference between entity's getKey() and JPA @Id fields\n-        if (\"key\".equals(condClone.getSchema())) {\n-            condClone.setSchema(\"id\");\n-        }\n-\n-        Field anyField = ReflectionUtils.findField(attrUtils.anyClass(), condClone.getSchema());\n-        if (anyField == null) {\n-            LOG.warn(\"Ignoring invalid schema '{}'\", condClone.getSchema());\n+        Triple<PlainSchema, PlainAttrValue, AnyCond> checked;\n+        try {\n+            checked = check(cond, svs.anyTypeKind);\n+        } catch (IllegalArgumentException e) {\n             return EMPTY_QUERY;\n         }\n \n-        PlainSchema schema = new JPAPlainSchema();\n-        schema.setKey(anyField.getName());\n-        for (AttrSchemaType attrSchemaType : AttrSchemaType.values()) {\n-            if (anyField.getType().isAssignableFrom(attrSchemaType.getType())) {\n-                schema.setType(attrSchemaType);\n-            }\n-        }\n-\n-        // Deal with any Integer fields logically mapping to boolean values\n-        boolean foundBooleanMin = false;\n-        boolean foundBooleanMax = false;\n-        if (Integer.class.equals(anyField.getType())) {\n-            for (Annotation annotation : anyField.getAnnotations()) {\n-                if (Min.class.equals(annotation.annotationType())) {\n-                    foundBooleanMin = ((Min) annotation).value() == 0;\n-                } else if (Max.class.equals(annotation.annotationType())) {\n-                    foundBooleanMax = ((Max) annotation).value() == 1;\n-                }\n-            }\n-        }\n-        if (foundBooleanMin && foundBooleanMax) {\n-            schema.setType(AttrSchemaType.Boolean);\n-        }\n-\n-        // Deal with any fields representing relationships to other entities\n-        if (anyField.getType().getAnnotation(Entity.class) != null) {\n-            Method relMethod = null;\n-            try {\n-                relMethod = ClassUtils.getPublicMethod(anyField.getType(), \"getKey\", new Class<?>[0]);\n-            } catch (Exception e) {\n-                LOG.error(\"Could not find {}#getKey\", anyField.getType(), e);\n-            }\n-\n-            if (relMethod != null && String.class.isAssignableFrom(relMethod.getReturnType())) {\n-                condClone.setSchema(condClone.getSchema() + \"_id\");\n-                schema.setType(AttrSchemaType.String);\n-            }\n-        }\n-\n-        PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n-        if (condClone.getType() != AttributeCond.Type.LIKE\n-                && condClone.getType() != AttributeCond.Type.ILIKE\n-                && condClone.getType() != AttributeCond.Type.ISNULL\n-                && condClone.getType() != AttributeCond.Type.ISNOTNULL) {\n-\n-            try {\n-                schema.getValidator().validate(condClone.getExpression(), attrValue);\n-            } catch (ValidationException e) {\n-                LOG.error(\"Could not validate expression '\" + condClone.getExpression() + \"'\", e);\n-                return EMPTY_QUERY;\n-            }\n-        }\n-\n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n \n-        fillAttributeQuery(query, attrValue, schema, condClone, not, parameters, svs);\n+        fillAttrQuery(query, checked.getMiddle(), checked.getLeft(), checked.getRight(), not, parameters, svs);\n \n         return query.toString();\n     }"},{"sha":"54423b8dc960eed9b04d5db51f3d0ccab47c25cf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":99,"deletions":23,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n@@ -59,7 +60,11 @@\n import org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.event.AnyCreatedUpdatedEvent;\n+import org.apache.syncope.core.spring.event.AnyDeletedEvent;\n+import org.springframework.aop.support.AopUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -69,9 +74,11 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n     @Autowired\n     private PlainAttrDAO plainAttrDAO;\n \n+    private UserDAO userDAO;\n+\n     private AnyObjectDAO anyObjectDAO;\n \n-    private UserDAO userDAO;\n+    private AnySearchDAO jpaAnySearchDAO;\n \n     private UserDAO userDAO() {\n         synchronized (this) {\n@@ -91,6 +98,20 @@ private AnyObjectDAO anyObjectDAO() {\n         return anyObjectDAO;\n     }\n \n+    private AnySearchDAO jpaAnySearchDAO() {\n+        synchronized (this) {\n+            if (jpaAnySearchDAO == null) {\n+                if (AopUtils.getTargetClass(searchDAO()).equals(JPAAnySearchDAO.class)) {\n+                    jpaAnySearchDAO = searchDAO();\n+                } else {\n+                    jpaAnySearchDAO = (AnySearchDAO) ApplicationContextProvider.getBeanFactory().\n+                            createBean(JPAAnySearchDAO.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+                }\n+            }\n+        }\n+        return jpaAnySearchDAO;\n+    }\n+\n     @Override\n     protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.GROUP);\n@@ -204,8 +225,8 @@ public List<Group> findOwnedByGroup(final String groupKey) {\n     @Override\n     public List<AMembership> findAMemberships(final Group group) {\n         TypedQuery<AMembership> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAAMembership.class.getSimpleName()\n-                + \" e WHERE e.rightEnd=:group\", AMembership.class);\n+                \"SELECT e FROM \" + JPAAMembership.class.getSimpleName() + \" e WHERE e.rightEnd=:group\",\n+                AMembership.class);\n         query.setParameter(\"group\", group);\n \n         return query.getResultList();\n@@ -214,13 +235,23 @@ public List<AMembership> findAMemberships(final Group group) {\n     @Override\n     public List<UMembership> findUMemberships(final Group group) {\n         TypedQuery<UMembership> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAUMembership.class.getSimpleName()\n-                + \" e WHERE e.rightEnd=:group\", UMembership.class);\n+                \"SELECT e FROM \" + JPAUMembership.class.getSimpleName() + \" e WHERE e.rightEnd=:group\",\n+                UMembership.class);\n         query.setParameter(\"group\", group);\n \n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<Group> findAll(final int page, final int itemsPerPage) {\n+        TypedQuery<Group> query = entityManager().createQuery(\n+                \"SELECT e FROM  \" + JPAGroup.class.getSimpleName() + \" e\", Group.class);\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+        query.setMaxResults(itemsPerPage);\n+\n+        return query.getResultList();\n+    }\n+\n     private SearchCond buildDynMembershipCond(final String baseCondFIQL, final Realm groupRealm) {\n         AssignableCond cond = new AssignableCond();\n         cond.setRealmFullPath(groupRealm.getFullPath());\n@@ -232,6 +263,7 @@ private SearchCond buildDynMembershipCond(final String baseCondFIQL, final Realm\n     @Override\n     public Group save(final Group group) {\n         Group merged = super.save(group);\n+        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged));\n \n         // refresh dynaminc memberships\n         if (merged.getUDynMembership() != null) {\n@@ -242,6 +274,7 @@ public Group save(final Group group) {\n             merged.getUDynMembership().getMembers().clear();\n             for (User user : matching) {\n                 merged.getUDynMembership().add(user);\n+                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user));\n             }\n         }\n         for (ADynGroupMembership memb : merged.getADynMemberships()) {\n@@ -252,6 +285,7 @@ public Group save(final Group group) {\n             memb.getMembers().clear();\n             for (AnyObject anyObject : matching) {\n                 memb.add(anyObject);\n+                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, anyObject));\n             }\n         }\n \n@@ -272,6 +306,7 @@ public void delete(final Group group) {\n             }\n \n             anyObjectDAO().save(leftEnd);\n+            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd));\n         }\n         for (UMembership membership : findUMemberships(group)) {\n             User leftEnd = membership.getLeftEnd();\n@@ -285,9 +320,11 @@ public void delete(final Group group) {\n             }\n \n             userDAO().save(leftEnd);\n+            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd));\n         }\n \n         entityManager().remove(group);\n+        publisher.publishEvent(new AnyDeletedEvent(this, AnyTypeKind.GROUP, group.getKey()));\n     }\n \n     @Override\n@@ -300,35 +337,74 @@ public List<TypeExtension> findTypeExtensions(final AnyTypeClass anyTypeClass) {\n         return query.getResultList();\n     }\n \n+    private List<Group> findWithADynMemberships(final int page, final int itemsPerPage) {\n+        TypedQuery<Group> query = entityManager().createQuery(\n+                \"SELECT e FROM  \" + JPAGroup.class.getSimpleName() + \" e WHERE e.aDynMemberships IS NOT EMPTY\",\n+                Group.class);\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+        query.setMaxResults(itemsPerPage);\n+\n+        return query.getResultList();\n+    }\n+\n     @Transactional\n     @Override\n     public void refreshDynMemberships(final AnyObject anyObject) {\n-        for (Group group : findAll()) {\n-            for (ADynGroupMembership memb : group.getADynMemberships()) {\n-                if (searchDAO().matches(\n-                        anyObject,\n-                        buildDynMembershipCond(memb.getFIQLCond(), group.getRealm()))) {\n-\n-                    memb.add(anyObject);\n-                } else {\n-                    memb.getMembers().remove(anyObject);\n+        Query countQuery = entityManager().createQuery(\n+                \"SELECT COUNT(e) FROM  \" + JPAGroup.class.getSimpleName() + \" e WHERE e.aDynMemberships IS NOT EMPTY\");\n+        int count = ((Number) countQuery.getSingleResult()).intValue();\n+\n+        for (int page = 1; page <= (count / DEFAULT_PAGE_SIZE) + 1; page++) {\n+            for (Group group : findWithADynMemberships(page, DEFAULT_PAGE_SIZE)) {\n+                if (!group.getADynMemberships().isEmpty()) {\n+                    for (ADynGroupMembership memb : group.getADynMemberships()) {\n+                        if (jpaAnySearchDAO().matches(\n+                                anyObject,\n+                                buildDynMembershipCond(memb.getFIQLCond(), group.getRealm()))) {\n+\n+                            memb.add(anyObject);\n+                            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group));\n+                        } else {\n+                            memb.getMembers().remove(anyObject);\n+                            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group));\n+                        }\n+                    }\n                 }\n             }\n         }\n+\n+    }\n+\n+    private List<Group> findWithUDynMemberships(final int page, final int itemsPerPage) {\n+        TypedQuery<Group> query = entityManager().createQuery(\n+                \"SELECT e FROM  \" + JPAGroup.class.getSimpleName() + \" e WHERE e.uDynMembership IS NOT NULL\",\n+                Group.class);\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+        query.setMaxResults(itemsPerPage);\n+\n+        return query.getResultList();\n     }\n \n     @Transactional\n     @Override\n     public void refreshDynMemberships(final User user) {\n-        for (Group group : findAll()) {\n-            if (group.getUDynMembership() != null) {\n-                if (searchDAO().matches(\n-                        user,\n-                        buildDynMembershipCond(group.getUDynMembership().getFIQLCond(), group.getRealm()))) {\n-\n-                    group.getUDynMembership().add(user);\n-                } else {\n-                    group.getUDynMembership().getMembers().remove(user);\n+        Query countQuery = entityManager().createQuery(\n+                \"SELECT COUNT(e) FROM  \" + JPAGroup.class.getSimpleName() + \" e WHERE e.uDynMembership IS NOT NULL\");\n+        int count = ((Number) countQuery.getSingleResult()).intValue();\n+\n+        for (int page = 1; page <= (count / DEFAULT_PAGE_SIZE) + 1; page++) {\n+            for (Group group : findWithUDynMemberships(page, DEFAULT_PAGE_SIZE)) {\n+                if (group.getUDynMembership() != null) {\n+                    if (jpaAnySearchDAO().matches(\n+                            user,\n+                            buildDynMembershipCond(group.getUDynMembership().getFIQLCond(), group.getRealm()))) {\n+\n+                        group.getUDynMembership().add(user);\n+                        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group));\n+                    } else {\n+                        group.getUDynMembership().getMembers().remove(user);\n+                        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group));\n+                    }\n                 }\n             }\n         }"},{"sha":"a5cabbbd41aa6750f960caceeba8551e430c82b4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -31,12 +31,18 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.event.AnyCreatedUpdatedEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPARoleDAO extends AbstractDAO<Role> implements RoleDAO {\n \n+    @Autowired\n+    private ApplicationEventPublisher publisher;\n+\n     private AnySearchDAO searchDAO;\n \n     private AnySearchDAO searchDAO() {\n@@ -85,6 +91,7 @@ public Role save(final Role role) {\n             role.getDynMembership().getMembers().clear();\n             for (User user : matchingUsers) {\n                 role.getDynMembership().add(user);\n+                publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user));\n             }\n         }\n \n@@ -99,6 +106,7 @@ public void delete(final Role role) {\n \n         for (User user : query.getResultList()) {\n             user.getRoles().remove(role);\n+            publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, user));\n         }\n \n         entityManager().remove(role);"},{"sha":"a6b438338b0c6e4f3cbdfe8c5444e73d3d5289a5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -76,6 +76,8 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n+import org.apache.syncope.core.spring.event.AnyCreatedUpdatedEvent;\n+import org.apache.syncope.core.spring.event.AnyDeletedEvent;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.stereotype.Repository;\n@@ -270,6 +272,16 @@ private List<PasswordPolicy> getPasswordPolicies(final User user) {\n         return policies;\n     }\n \n+    @Override\n+    public List<User> findAll(final int page, final int itemsPerPage) {\n+        TypedQuery<User> query = entityManager().createQuery(\n+                \"SELECT e FROM  \" + JPAUser.class.getSimpleName() + \" e\", User.class);\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+        query.setMaxResults(itemsPerPage);\n+\n+        return query.getResultList();\n+    }\n+\n     private List<AccountPolicy> getAccountPolicies(final User user) {\n         List<AccountPolicy> policies = new ArrayList<>();\n \n@@ -430,6 +442,8 @@ public User save(final User user) {\n             throw e;\n         }\n \n+        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged));\n+\n         roleDAO.refreshDynMemberships(merged);\n         groupDAO().refreshDynMemberships(merged);\n \n@@ -451,6 +465,7 @@ public void delete(final User user) {\n         }\n \n         entityManager().remove(user);\n+        publisher.publishEvent(new AnyDeletedEvent(this, AnyTypeKind.USER, user.getKey()));\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n@@ -561,7 +576,7 @@ public Collection<ExternalResource> findAllResources(final User user) {\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n-    public Collection<String> findAllResourceNames(final String key) {\n+    public Collection<String> findAllResourceKeys(final String key) {\n         return CollectionUtils.collect(findAllResources(authFind(key)), EntityUtils.keyTransformer());\n     }\n "},{"sha":"7f2f6f6f3ef1578995fbeaf53424006073b50197","filename":"core/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -15,3 +15,4 @@\n # specific language governing permissions and limitations\n # under the License.\n content.directory=${conf.directory}\n+any.search.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO"},{"sha":"50153a4c1e3b216fde255df816a8575de137e30e","filename":"core/persistence-jpa/src/main/resources/persistenceContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -30,6 +30,7 @@ under the License.\n   <context:annotation-config/>\n   \n   <context:component-scan base-package=\"org.apache.syncope.core.persistence.jpa\"/>\n+  <bean class=\"${any.search.dao}\"/>\n \n   <bean class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"/>\n "},{"sha":"3f4d48acae12f7d7852c84fb3259815e5e998944","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyObjectTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -47,7 +47,7 @@ public class AnyObjectTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<AnyObject> list = anyObjectDAO.findAll();\n+        List<AnyObject> list = anyObjectDAO.findAll(1, 100);\n         assertFalse(list.isEmpty());\n     }\n "},{"sha":"c3ef956afe4156f632d7762cf3511673b68cff8f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GroupTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -47,7 +47,7 @@ public class GroupTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<Group> list = groupDAO.findAll();\n+        List<Group> list = groupDAO.findAll(1, 100);\n         assertEquals(\"did not get expected number of groups \", 16, list.size());\n     }\n "},{"sha":"80077a73702621bb23c81f2f325f026929c2fb26","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -95,7 +95,7 @@ public void readRealm() {\n     @Test\n     public void createUser() {\n         assertNull(realmDAO.getRoot().getPasswordPolicy());\n-        assertTrue(userDAO.findAll().isEmpty());\n+        assertTrue(userDAO.findAll(1, 100).isEmpty());\n \n         User user = entityFactory.newEntity(User.class);\n         user.setRealm(realmDAO.getRoot());"},{"sha":"9988f5ac560c8da4aa8045208a9c23e3a7bd51ac","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -26,7 +26,6 @@\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n-import java.util.UUID;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n@@ -56,7 +55,7 @@ public class UserTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<User> list = userDAO.findAll();\n+        List<User> list = userDAO.findAll(1, 100);\n         assertEquals(\"did not get expected number of users\", 5, list.size());\n     }\n "},{"sha":"f91aa7ef4b5c9d8272e607cba3147da3bc23b9bb","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -22,9 +22,7 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -60,8 +58,7 @@ public class AnySearchTest extends AbstractTest {\n \n     @Test\n     public void issueSYNCOPE95() {\n-        Set<Group> groups = new HashSet<>(groupDAO.findAll());\n-        for (Group group : groups) {\n+        for (Group group : groupDAO.findAll(1, 100)) {\n             groupDAO.delete(group.getKey());\n         }\n         groupDAO.flush();"},{"sha":"ede95f760c0ac0d859956f2f0aa988b6848cf4be","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -82,9 +82,6 @@ public class UserTest extends AbstractTest {\n     public void delete() {\n         List<UMembership> memberships = groupDAO.findUMemberships(groupDAO.findByName(\"managingDirector\"));\n         assertFalse(memberships.isEmpty());\n-        List<URelationship> relationships = anyObjectDAO.findURelationships(\n-                anyObjectDAO.find(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\"));\n-        assertFalse(relationships.isEmpty());\n \n         userDAO.delete(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n \n@@ -97,9 +94,6 @@ public void delete() {\n \n         memberships = groupDAO.findUMemberships(groupDAO.findByName(\"managingDirector\"));\n         assertTrue(memberships.isEmpty());\n-        relationships = anyObjectDAO.findURelationships(\n-                anyObjectDAO.find(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\"));\n-        assertTrue(relationships.isEmpty());\n     }\n \n     @Test"},{"sha":"ad966de5c2864bbddb903f30e988a5745fff3f4b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -176,7 +176,7 @@ public List<PropagationStatus> deprovision(\n                 AnyTypeKind.ANY_OBJECT,\n                 key,\n                 propByRes,\n-                CollectionUtils.removeAll(anyObjectDAO.findAllResourceNames(key), resources));\n+                CollectionUtils.removeAll(anyObjectDAO.findAllResourceKeys(key), resources));\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();"},{"sha":"df9881da6e3d2d33f6e741f2475d38ed734d5644","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -36,13 +36,13 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -192,7 +192,7 @@ public List<PropagationStatus> delete(\n             final String key, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceNames(key));\n+        propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceKeys(key));\n \n         // Note here that we can only notify about \"delete\", not any other\n         // task defined in workflow process definition: this because this\n@@ -344,7 +344,7 @@ public List<PropagationStatus> deprovision(\n                 AnyTypeKind.USER,\n                 key,\n                 propByRes,\n-                CollectionUtils.removeAll(userDAO.findAllResourceNames(key), resources));\n+                CollectionUtils.removeAll(userDAO.findAllResourceKeys(key), resources));\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();"},{"sha":"0a8566cca7088301293d0fe24be6a750cddb77e3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ExpiredAccessTokenCleanup.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FExpiredAccessTokenCleanup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FExpiredAccessTokenCleanup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FExpiredAccessTokenCleanup.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -34,9 +34,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n             LOG.debug(\"Successfully deleted {} expired access tokens\", deleted);\n         }\n \n-        return (dryRun\n-                ? \"DRY \"\n-                : \"\") + \"RUNNING\";\n+        return \"SUCCESS\";\n     }\n \n }"},{"sha":"8b3f4e58dfb9202c08964313b8d82a40e370397e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/IdentityRecertification.java","status":"modified","additions":18,"deletions":27,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -18,13 +18,10 @@\n  */\r\n package org.apache.syncope.core.provisioning.java.job;\r\n \r\n-import java.util.Collections;\r\n-import java.util.Date;\r\n import org.apache.commons.lang3.StringUtils;\r\n-import org.apache.syncope.common.lib.SyncopeConstants;\r\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\r\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\r\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\r\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\r\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\r\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\r\n import org.apache.syncope.core.persistence.api.entity.user.User;\r\n@@ -36,8 +33,6 @@ public class IdentityRecertification extends AbstractSchedTaskJobDelegate {\n \r\n     private static final String RECERTIFICATION_TIME = \"identity.recertification.day.interval\";\r\n \r\n-    private static final int PAGE_SIZE = 10;\r\n-\r\n     @Autowired\r\n     private ConfDAO confDAO;\r\n \r\n@@ -65,51 +60,47 @@ protected void init() {\n         }\r\n     }\r\n \r\n-    protected boolean isToBeRecertified(final User user) {\r\n-        Date lastCertificationDate = user.getLastRecertification();\r\n+    protected boolean isToBeRecertified(final User user, final long now) {\r\n+        if (!user.isSuspended()\r\n+                && (user.getLastRecertification() == null\r\n+                || user.getLastRecertification().getTime() + recertificationTime < now)) {\r\n \r\n-        if (lastCertificationDate != null) {\r\n-            if (lastCertificationDate.getTime() + recertificationTime < System.currentTimeMillis()) {\r\n-                LOG.debug(\"{} is to be recertified\", user);\r\n-                return true;\r\n-            } else {\r\n-                LOG.debug(\"{} do not need to be recertified\", user);\r\n-                return false;\r\n-            }\r\n+            LOG.debug(\"{} is to be recertified\", user);\r\n+            return true;\r\n         }\r\n \r\n-        return true;\r\n+        LOG.debug(\"{} does not need to be recertified\", user);\r\n+        return false;\r\n     }\r\n \r\n     @Override\r\n     protected String doExecute(final boolean dryRun) throws JobExecutionException {\r\n-        LOG.info(\"IdentityRecertification {} running [SchedTask {}]\", (dryRun\r\n-                ? \"dry \"\r\n-                : \"\"), task.getKey());\r\n+        LOG.info(\"IdentityRecertification {} running [SchedTask {}]\", dryRun ? \"dry \" : \"\", task.getKey());\r\n \r\n         init();\r\n         if (recertificationTime == -1) {\r\n             LOG.debug(\"Identity Recertification disabled\");\r\n             return (\"IDENTITY RECERTIFICATION DISABLED\");\r\n         }\r\n \r\n-        for (int page = 1; page <= (userDAO.count() / PAGE_SIZE) + 1; page++) {\r\n-            for (User user : userDAO.findAll(\r\n-                    SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE, Collections.<OrderByClause>emptyList())) {\r\n+        if (dryRun) {\r\n+            return \"DRY RUN\";\r\n+        }\r\n \r\n+        long now = System.currentTimeMillis();\r\n+        for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\r\n+            for (User user : userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\r\n                 LOG.debug(\"Processing user: {}\", user.getUsername());\r\n \r\n-                if (StringUtils.isNotBlank(user.getWorkflowId()) && isToBeRecertified(user) && !dryRun) {\r\n+                if (StringUtils.isNotBlank(user.getWorkflowId()) && isToBeRecertified(user, now)) {\r\n                     uwfAdapter.requestCertify(user);\r\n                 } else {\r\n                     LOG.warn(\"Workflow for {} is null or empty\", user);\r\n                 }\r\n             }\r\n         }\r\n \r\n-        return (dryRun\r\n-                ? \"DRY \"\r\n-                : \"\") + \"RUNNING\";\r\n+        return \"SUCCESS\";\r\n     }\r\n \r\n     @Override\r"},{"sha":"5464276275ceae1d78f22ea184be0177943ab8f9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -312,7 +312,7 @@ protected Uid delete(\n                 switch (task.getAnyTypeKind()) {\n                     case USER:\n                         try {\n-                            resources = userDAO.findAllResourceNames(task.getEntityKey());\n+                            resources = userDAO.findAllResourceKeys(task.getEntityKey());\n                         } catch (Exception e) {\n                             LOG.error(\"Could not read user {}\", task.getEntityKey(), e);\n                         }\n@@ -329,7 +329,7 @@ protected Uid delete(\n                     case ANY_OBJECT:\n                     default:\n                         try {\n-                            resources = anyObjectDAO.findAllResourceNames(task.getEntityKey());\n+                            resources = anyObjectDAO.findAllResourceKeys(task.getEntityKey());\n                         } catch (Exception e) {\n                             LOG.error(\"Could not read any object {}\", task.getEntityKey(), e);\n                         }"},{"sha":"f1ec7995300b6eb7d3968cd39049f61636f1ff36","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -229,7 +229,7 @@ public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserPa\n             origPropByRes.merge(wfResult.getPropByRes());\n \n             Set<String> pwdResourceNames = new HashSet<>(userPatch.getPassword().getResources());\n-            Collection<String> currentResourceNames = userDAO.findAllResourceNames(userPatch.getKey());\n+            Collection<String> currentResourceNames = userDAO.findAllResourceKeys(userPatch.getKey());\n             pwdResourceNames.retainAll(currentResourceNames);\n             PropagationByResource pwdPropByRes = new PropagationByResource();\n             pwdPropByRes.addAll(ResourceOperation.UPDATE, pwdResourceNames);"},{"sha":"7c3bbe3e3df205ff71e19feffbf2578b92d46547","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -51,8 +52,6 @@\n \n public class PushJobDelegate extends AbstractProvisioningJobDelegate<PushTask> {\n \n-    private static final int PAGE_SIZE = 1000;\n-\n     /**\n      * User DAO.\n      */\n@@ -201,15 +200,21 @@ protected String doExecuteProvisioning(\n                         ? null\n                         : pushTask.getFilter(provision.getAnyType()).getFIQLCond();\n                 if (StringUtils.isBlank(filter)) {\n-                    doHandle(anyDAO.findAll(), handler, pushTask.getResource());\n+                    for (int page = 1; page <= (anyDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                        doHandle(anyDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE), handler, pushTask.getResource());\n+                    }\n                 } else {\n-                    int count = anyDAO.count(SyncopeConstants.FULL_ADMIN_REALMS);\n-                    for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n+                    SearchCond cond = SearchCondConverter.convert(filter);\n+                    int count = searchDAO.count(\n+                            SyncopeConstants.FULL_ADMIN_REALMS,\n+                            cond,\n+                            provision.getAnyType().getKind());\n+                    for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                         List<? extends Any<?>> anys = searchDAO.search(\n                                 SyncopeConstants.FULL_ADMIN_REALMS,\n-                                SearchCondConverter.convert(filter),\n+                                cond,\n                                 page,\n-                                PAGE_SIZE,\n+                                AnyDAO.DEFAULT_PAGE_SIZE,\n                                 Collections.<OrderByClause>emptyList(),\n                                 provision.getAnyType().getKind());\n                         doHandle(anys, handler, pushTask.getResource());"},{"sha":"c252744a33b3fd8be413eddd6f2bf1de140651ae","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/event/AnyCreatedUpdatedEvent.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fevent%2FAnyCreatedUpdatedEvent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fevent%2FAnyCreatedUpdatedEvent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fevent%2FAnyCreatedUpdatedEvent.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.event;\n+\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.springframework.context.ApplicationEvent;\n+\n+public class AnyCreatedUpdatedEvent<A extends Any<?>> extends ApplicationEvent {\n+\n+    private static final long serialVersionUID = -781747175059834365L;\n+\n+    private final A any;\n+\n+    public AnyCreatedUpdatedEvent(final Object source, final A any) {\n+        super(source);\n+        this.any = any;\n+    }\n+\n+    public A getAny() {\n+        return any;\n+    }\n+\n+}"},{"sha":"bd180dec19af57ba881331fd7010860a21fb7c58","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/event/AnyDeletedEvent.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fevent%2FAnyDeletedEvent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fevent%2FAnyDeletedEvent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fevent%2FAnyDeletedEvent.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.event;\n+\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.springframework.context.ApplicationEvent;\n+\n+public class AnyDeletedEvent extends ApplicationEvent {\n+\n+    private final AnyTypeKind anyTypeKind;\n+\n+    private final String anyKey;\n+\n+    public AnyDeletedEvent(final Object source, final AnyTypeKind anyTypeKind, final String anyKey) {\n+        super(source);\n+        this.anyTypeKind = anyTypeKind;\n+        this.anyKey = anyKey;\n+    }\n+\n+    public AnyTypeKind getAnyTypeKind() {\n+        return anyTypeKind;\n+    }\n+\n+    public String getAnyKey() {\n+        return anyKey;\n+    }\n+\n+}"},{"sha":"753b4e99c2f63c3e7d701fde9f8a404ce57da52d","filename":"core/workflow-activiti/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-activiti%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-activiti%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fpom.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -74,11 +74,6 @@ under the License.\n       <artifactId>syncope-core-workflow-java</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-    <dependency>\n-      <groupId>org.apache.syncope.core</groupId>\n-      <artifactId>syncope-core-spring</artifactId>\n-      <version>${project.version}</version>\n-    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"732d6dd5a3b2ee5d53b1cbd6f4268a9da4c28ab5","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -216,21 +216,12 @@ protected void saveForFormSubmit(final User user, final String password, final P\n     }\n \n     @Override\n-    public WorkflowResult<Pair<String, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n+    protected WorkflowResult<Pair<String, Boolean>> doCreate(\n+            final UserTO userTO,\n+            final boolean disablePwdPolicyCheck,\n+            final Boolean enabled,\n             final boolean storePassword) {\n \n-        return create(userTO, disablePwdPolicyCheck, null, storePassword);\n-    }\n-\n-    @Override\n-    public WorkflowResult<Pair<String, Boolean>> create(final UserTO userTO, final boolean storePassword) {\n-        return create(userTO, false, storePassword);\n-    }\n-\n-    @Override\n-    public WorkflowResult<Pair<String, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n-            final Boolean enabled, final boolean storePassword) {\n-\n         Map<String, Object> variables = new HashMap<>();\n         variables.put(WF_EXECUTOR, AuthContextUtils.getUsername());\n         variables.put(USER_TO, userTO);"},{"sha":"992e3d1f51848c65418364756ef5ba13772936d8","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeGroupQueryImpl.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -27,6 +27,7 @@\n import org.activiti.engine.impl.persistence.entity.GroupEntity;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n \n public class SyncopeGroupQueryImpl implements GroupQuery {\n@@ -111,15 +112,17 @@ private void execute() {\n             }\n         }\n         if (result == null) {\n-            result = CollectionUtils.collect(groupDAO.findAll(),\n-                    new Transformer<org.apache.syncope.core.persistence.api.entity.group.Group, Group>() {\n-\n-                @Override\n-                public Group transform(final org.apache.syncope.core.persistence.api.entity.group.Group user) {\n-                    return fromSyncopeGroup(user);\n-                }\n-\n-            }, new ArrayList<Group>());\n+            result = new ArrayList<>();\n+            for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                CollectionUtils.collect(groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE),\n+                        new Transformer<org.apache.syncope.core.persistence.api.entity.group.Group, Group>() {\n+\n+                    @Override\n+                    public Group transform(final org.apache.syncope.core.persistence.api.entity.group.Group group) {\n+                        return fromSyncopeGroup(group);\n+                    }\n+                }, result);\n+            }\n         }\n     }\n "},{"sha":"b7fa2e916c896752abe31487feea86d9d5b7f96b","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeUserQueryImpl.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -27,6 +27,7 @@\n import org.activiti.engine.impl.persistence.entity.UserEntity;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -156,15 +157,17 @@ private void execute() {\n         }\n         // THIS CAN BE *VERY* DANGEROUS\n         if (result == null) {\n-            result = CollectionUtils.collect(userDAO.findAll(),\n-                    new Transformer<org.apache.syncope.core.persistence.api.entity.user.User, User>() {\n-\n-                @Override\n-                public User transform(final org.apache.syncope.core.persistence.api.entity.user.User user) {\n-                    return fromSyncopeUser(user);\n-                }\n-\n-            }, new ArrayList<User>());\n+            result = new ArrayList<>();\n+            for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                CollectionUtils.collect(userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE),\n+                        new Transformer<org.apache.syncope.core.persistence.api.entity.user.User, User>() {\n+\n+                    @Override\n+                    public User transform(final org.apache.syncope.core.persistence.api.entity.user.User user) {\n+                        return fromSyncopeUser(user);\n+                    }\n+                }, result);\n+            }\n         }\n     }\n "},{"sha":"3b1d75d2d4730854f89a53bf1c9f7b0d1a6d8cc6","filename":"core/workflow-java/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fpom.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -52,6 +52,11 @@ under the License.\n       <artifactId>syncope-core-workflow-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-spring</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>    \n   </dependencies>\n \n   <build>"},{"sha":"232470a65868168262b9f4e155754cefd89f7c49","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractAnyObjectWorkflowAdapter.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.workflow.java;\n \n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -48,6 +49,13 @@ public String getPrefix() {\n         return null;\n     }\n \n+    protected abstract WorkflowResult<String> doCreate(AnyObjectTO anyObjectTO);\n+\n+    @Override\n+    public WorkflowResult<String> create(final AnyObjectTO anyObjectTO) {\n+        return doCreate(anyObjectTO);\n+    }\n+\n     protected abstract WorkflowResult<String> doUpdate(AnyObject anyObject, AnyObjectPatch anyObjectPatch);\n \n     @Override"},{"sha":"0689b947d870beee18fd2912071d82ea4bcf9fa1","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractGroupWorkflowAdapter.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.workflow.java;\n \n import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -47,6 +48,13 @@ public String getPrefix() {\n         return null;\n     }\n \n+    protected abstract WorkflowResult<String> doCreate(GroupTO groupTO);\n+\n+    @Override\n+    public WorkflowResult<String> create(final GroupTO groupTO) {\n+        return doCreate(groupTO);\n+    }\n+\n     protected abstract WorkflowResult<String> doUpdate(Group group, GroupPatch groupPatch);\n \n     @Override"},{"sha":"d11293446e718cf6de9ac721ddca464d40b2a077","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":30,"deletions":4,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -21,6 +21,7 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -50,12 +51,12 @@ public abstract class AbstractUserWorkflowAdapter implements UserWorkflowAdapter\n     @Autowired\n     protected EntityFactory entityFactory;\n \n-    public static String encrypt(final String clear) {\n+    protected String encrypt(final String clear) {\n         byte[] encryptedBytes = EncryptorFactory.getInstance().getDefaultEncryptor().encrypt(clear.getBytes());\n         return Base64.encode(encryptedBytes);\n     }\n \n-    public static String decrypt(final String crypted) {\n+    protected String decrypt(final String crypted) {\n         byte[] decryptedBytes = EncryptorFactory.getInstance().getDefaultEncryptor().decrypt(Base64.decode(crypted));\n         return new String(decryptedBytes);\n     }\n@@ -65,6 +66,31 @@ public String getPrefix() {\n         return null;\n     }\n \n+    @Override\n+    public WorkflowResult<Pair<String, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n+            final boolean storePassword) {\n+\n+        return create(userTO, disablePwdPolicyCheck, null, storePassword);\n+    }\n+\n+    @Override\n+    public WorkflowResult<Pair<String, Boolean>> create(final UserTO userTO, final boolean storePassword) {\n+        return create(userTO, false, storePassword);\n+    }\n+\n+    protected abstract WorkflowResult<Pair<String, Boolean>> doCreate(\n+            UserTO userTO, boolean disablePwdPolicyCheck, Boolean enabled, boolean storePassword);\n+\n+    @Override\n+    public WorkflowResult<Pair<String, Boolean>> create(\n+            final UserTO userTO,\n+            final boolean disablePwdPolicyCheck,\n+            final Boolean enabled,\n+            final boolean storePassword) {\n+\n+        return doCreate(userTO, disablePwdPolicyCheck, enabled, storePassword);\n+    }\n+\n     protected abstract WorkflowResult<String> doActivate(User user, String token);\n \n     @Override\n@@ -148,7 +174,7 @@ public WorkflowResult<Pair<UserPatch, Boolean>> confirmPasswordReset(\n     protected abstract void doDelete(User user);\n \n     @Override\n-    public void delete(final String key) {\n-        doDelete(userDAO.authFind(key));\n+    public void delete(final String userKey) {\n+        doDelete(userDAO.authFind(userKey));\n     }\n }"},{"sha":"8852aa08e78a3548610300564eae9f00126b2f30","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultAnyObjectWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -38,7 +38,7 @@\n public class DefaultAnyObjectWorkflowAdapter extends AbstractAnyObjectWorkflowAdapter {\n \n     @Override\n-    public WorkflowResult<String> create(final AnyObjectTO anyObjectTO) {\n+    protected WorkflowResult<String> doCreate(final AnyObjectTO anyObjectTO) {\n         AnyObject anyObject = entityFactory.newEntity(AnyObject.class);\n         dataBinder.create(anyObject, anyObjectTO);\n         anyObject = anyObjectDAO.save(anyObject);"},{"sha":"f5c9837775d313af39b44b3c889f131c9b7a2042","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultGroupWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -38,7 +38,7 @@\n public class DefaultGroupWorkflowAdapter extends AbstractGroupWorkflowAdapter {\n \n     @Override\n-    public WorkflowResult<String> create(final GroupTO groupTO) {\n+    protected WorkflowResult<String> doCreate(final GroupTO groupTO) {\n         Group group = entityFactory.newEntity(Group.class);\n         dataBinder.create(group, groupTO);\n         group = groupDAO.save(group);"},{"sha":"b94930b74b98b373119aef187665bb4cd896bdd3","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":5,"deletions":14,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -48,21 +48,12 @@ public class DefaultUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     private ConfDAO confDAO;\n \n     @Override\n-    public WorkflowResult<Pair<String, Boolean>> create(final UserTO userTO, final boolean storePassword) {\n-        return create(userTO, false, true);\n-    }\n-\n-    @Override\n-    public WorkflowResult<Pair<String, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n+    protected WorkflowResult<Pair<String, Boolean>> doCreate(\n+            final UserTO userTO,\n+            final boolean disablePwdPolicyCheck,\n+            final Boolean enabled,\n             final boolean storePassword) {\n \n-        return create(userTO, disablePwdPolicyCheck, null, storePassword);\n-    }\n-\n-    @Override\n-    public WorkflowResult<Pair<String, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n-            final Boolean enabled, final boolean storePassword) {\n-\n         User user = entityFactory.newEntity(User.class);\n         dataBinder.create(user, userTO, storePassword);\n \n@@ -195,7 +186,7 @@ public WorkflowResult<UserPatch> submitForm(final WorkflowFormTO form) {\n \n     @Override\n     public WorkflowResult<String> requestCertify(final User user) {\n-        throw new UnsupportedOperationException(\"Not supported.\");\n+        throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n     }\n \n     @Override"},{"sha":"35784612d65fa0329f6e1fbcec1ccb28cf4124cb","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -63,7 +63,7 @@ public void process(final Exchange exchange) throws Exception {\n             switch (getAnyTypeKind()) {\n                 case USER:\n                     PropagationByResource propByRes = new PropagationByResource();\n-                    propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceNames(key));\n+                    propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceKeys(key));\n                     // Note here that we can only notify about \"delete\", not any other\n                     // task defined in workflow process definition: this because this\n                     // information could only be available after uwfAdapter.delete(), which"},{"sha":"5b20d111438433598a580f06b98d99d61b0a3e22","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -71,7 +71,7 @@ public void process(final Exchange exchange) throws Exception {\n                             AnyTypeKind.USER,\n                             key,\n                             propByRes,\n-                            CollectionUtils.removeAll(userDAO.findAllResourceNames(key), resources));\n+                            CollectionUtils.removeAll(userDAO.findAllResourceKeys(key), resources));\n                     propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n                     exchange.getOut().setBody(propagationReporter.getStatuses());\n                     break;\n@@ -93,7 +93,7 @@ public void process(final Exchange exchange) throws Exception {\n                             AnyTypeKind.ANY_OBJECT,\n                             key,\n                             propByRes,\n-                            CollectionUtils.removeAll(anyObjectDAO.findAllResourceNames(key), resources));\n+                            CollectionUtils.removeAll(anyObjectDAO.findAllResourceKeys(key), resources));\n                     propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n                     exchange.getOut().setBody(propagationReporter.getStatuses());\n                     break;"},{"sha":"48d7f1cc50ddf3edc806342ad7bb1c4f7e65f35a","filename":"ext/elasticsearch/client-elasticsearch/pom.xml","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fclient-elasticsearch%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fclient-elasticsearch%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fpom.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-elasticsearch</artifactId>\n+    <version>2.0.4-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: Elasticsearch Client</name>\n+  <description>Apache Syncope Ext: Elasticsearch Client</description>\n+  <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n+  <artifactId>syncope-ext-elasticsearch-client</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-spring</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+      \n+    <dependency>\n+      <groupId>org.elasticsearch.client</groupId>\n+      <artifactId>transport</artifactId>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"e4a30f96eee0696f6059dcfaec315e05e4753e13","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientFactoryBean.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientFactoryBean.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.elasticsearch.client;\n+\n+import java.net.InetAddress;\n+import java.util.Map;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.InetSocketTransportAddress;\n+import org.elasticsearch.transport.client.PreBuiltTransportClient;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.beans.factory.FactoryBean;\n+\n+/**\n+ * Spring {@link FactoryBean} for getting the Elasticsearch's {@link Client} singleton instance.\n+ */\n+public class ElasticsearchClientFactoryBean implements FactoryBean<Client>, DisposableBean {\n+\n+    private Map<String, Object> settings;\n+\n+    private Map<String, Integer> addresses;\n+\n+    private Client client;\n+\n+    public void setSettings(final Map<String, Object> settings) {\n+        this.settings = settings;\n+    }\n+\n+    public void setAddresses(final Map<String, Integer> addresses) {\n+        this.addresses = addresses;\n+    }\n+\n+    @Override\n+    public Client getObject() throws Exception {\n+        synchronized (this) {\n+            if (client == null) {\n+                PreBuiltTransportClient tClient = new PreBuiltTransportClient(Settings.builder().put(settings).build());\n+\n+                for (Map.Entry<String, Integer> entry : addresses.entrySet()) {\n+                    tClient.addTransportAddress(\n+                            new InetSocketTransportAddress(InetAddress.getByName(entry.getKey()), entry.getValue()));\n+                }\n+\n+                client = tClient;\n+            }\n+        }\n+        return client;\n+    }\n+\n+    @Override\n+    public Class<?> getObjectType() {\n+        return Client.class;\n+    }\n+\n+    @Override\n+    public boolean isSingleton() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void destroy() throws Exception {\n+        if (client != null) {\n+            client.close();\n+        }\n+    }\n+\n+}"},{"sha":"3e20acdf8ad2b573fe40bc15852956a57aa75aa9","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchIndexManager.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.elasticsearch.client;\n+\n+import java.io.IOException;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.spring.event.AnyCreatedUpdatedEvent;\n+import org.apache.syncope.core.spring.event.AnyDeletedEvent;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.elasticsearch.action.delete.DeleteResponse;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.WriteRequest;\n+import org.elasticsearch.action.update.UpdateResponse;\n+import org.elasticsearch.client.Client;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.event.TransactionalEventListener;\n+\n+/**\n+ * Listen to any create / update and delete in order to keep the Elastsicsearch indexes consistent.\n+ */\n+public class ElasticsearchIndexManager {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ElasticsearchIndexManager.class);\n+\n+    @Autowired\n+    private Client client;\n+\n+    @Autowired\n+    private ElasticsearchUtils elasticsearchUtils;\n+\n+    @TransactionalEventListener\n+    public void after(final AnyCreatedUpdatedEvent<Any<?>> event) throws IOException {\n+        GetResponse getResponse = client.prepareGet(AuthContextUtils.getDomain().toLowerCase(),\n+                event.getAny().getType().getKind().name(),\n+                event.getAny().getKey()).\n+                get();\n+        if (getResponse.isExists()) {\n+            LOG.debug(\"About to update index for {}\", event.getAny());\n+\n+            UpdateResponse response = client.prepareUpdate(\n+                    AuthContextUtils.getDomain().toLowerCase(),\n+                    event.getAny().getType().getKind().name(),\n+                    event.getAny().getKey()).\n+                    setDoc(elasticsearchUtils.builder(event.getAny())).\n+                    setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).\n+                    get();\n+            LOG.debug(\"Index successfully updated for {}: {}\", event.getAny(), response);\n+        } else {\n+            LOG.debug(\"About to create index for {}\", event.getAny());\n+\n+            IndexResponse response = client.prepareIndex(\n+                    AuthContextUtils.getDomain().toLowerCase(),\n+                    event.getAny().getType().getKind().name(),\n+                    event.getAny().getKey()).\n+                    setSource(elasticsearchUtils.builder(event.getAny())).\n+                    setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).\n+                    get();\n+\n+            LOG.debug(\"Index successfully created for {}: {}\", event.getAny(), response);\n+        }\n+    }\n+\n+    @TransactionalEventListener\n+    public void after(final AnyDeletedEvent event) {\n+        LOG.debug(\"About to delete index for {}[{}]\", event.getAnyTypeKind(), event.getAnyKey());\n+\n+        DeleteResponse response = client.prepareDelete(\n+                AuthContextUtils.getDomain().toLowerCase(),\n+                event.getAnyTypeKind().name(),\n+                event.getAnyKey()).\n+                setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE).\n+                get();\n+\n+        LOG.debug(\"Index successfully deleted for {}[{}]: {}\", event.getAnyTypeKind(), event.getAnyKey(), response);\n+    }\n+}"},{"sha":"572ef37fd2879d225aa77295fcd8d128b5b33763","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"added","additions":194,"deletions":0,"changes":194,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.elasticsearch.client;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Utility methods for usage with Elasticsearch.\n+ */\n+public class ElasticsearchUtils {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n+    private int indexMaxResultWindow = 10000;\n+\n+    public void setIndexMaxResultWindow(final int indexMaxResultWindow) {\n+        this.indexMaxResultWindow = indexMaxResultWindow;\n+    }\n+\n+    public int getIndexMaxResultWindow() {\n+        return indexMaxResultWindow;\n+    }\n+\n+    /**\n+     * Returns the builder specialized with content from the provided any.\n+     *\n+     * @param any user, group or any object to index\n+     * @return builder specialized with content from the provided any\n+     * @throws IOException in case of errors\n+     */\n+    @Transactional\n+    public XContentBuilder builder(final Any<?> any) throws IOException {\n+        XContentBuilder builder = XContentFactory.jsonBuilder().\n+                startObject().\n+                field(\"id\", any.getKey()).\n+                field(\"realm\", any.getRealm().getFullPath()).\n+                field(\"anyType\", any.getType().getKey()).\n+                field(\"creationDate\", any.getCreationDate()).\n+                field(\"creator\", any.getCreator()).\n+                field(\"lastChangeDate\", any.getLastChangeDate()).\n+                field(\"lastModified\", any.getLastModifier()).\n+                field(\"status\", any.getStatus()).\n+                field(\"resources\",\n+                        any instanceof User\n+                                ? userDAO.findAllResourceKeys(any.getKey())\n+                                : any instanceof AnyObject\n+                                        ? anyObjectDAO.findAllResourceKeys(any.getKey())\n+                                        : any.getResourceKeys());\n+\n+        if (any instanceof AnyObject) {\n+            AnyObject anyObject = ((AnyObject) any);\n+            builder = builder.field(\"name\", anyObject.getName());\n+\n+            List<Object> memberships = new ArrayList<Object>(anyObjectDAO.findAllGroupKeys(anyObject));\n+            builder = builder.field(\"memberships\", memberships);\n+\n+            List<Object> relationships = new ArrayList<>();\n+            List<Object> relationshipTypes = new ArrayList<>();\n+            for (ARelationship relationship : anyObjectDAO.findAllARelationships(anyObject)) {\n+                relationships.add(relationship.getRightEnd().getKey());\n+                relationshipTypes.add(relationship.getType().getKey());\n+            }\n+            builder = builder.field(\"relationships\", relationships);\n+            builder = builder.field(\"relationshipTypes\", relationshipTypes);\n+        } else if (any instanceof Group) {\n+            Group group = ((Group) any);\n+            builder = builder.field(\"name\", group.getName());\n+            if (group.getUserOwner() != null) {\n+                builder = builder.field(\"userOwner\", group.getUserOwner().getKey());\n+            }\n+            if (group.getGroupOwner() != null) {\n+                builder = builder.field(\"groupOwner\", group.getGroupOwner().getKey());\n+            }\n+\n+            List<Object> members = CollectionUtils.collect(groupDAO.findUMemberships(group),\n+                    new Transformer<UMembership, Object>() {\n+\n+                @Override\n+                public Object transform(final UMembership input) {\n+                    return input.getLeftEnd().getKey();\n+                }\n+            }, new ArrayList<>());\n+            UDynGroupMembership udynmembership = group.getUDynMembership();\n+            if (udynmembership != null) {\n+                CollectionUtils.collect(udynmembership.getMembers(), EntityUtils.keyTransformer(), members);\n+            }\n+            CollectionUtils.collect(groupDAO.findAMemberships(group),\n+                    new Transformer<AMembership, Object>() {\n+\n+                @Override\n+                public Object transform(final AMembership input) {\n+                    return input.getLeftEnd().getKey();\n+                }\n+            }, members);\n+            for (ADynGroupMembership adynmembership : group.getADynMemberships()) {\n+                CollectionUtils.collect(adynmembership.getMembers(), EntityUtils.keyTransformer(), members);\n+            }\n+            builder = builder.field(\"members\", members);\n+        } else if (any instanceof User) {\n+            User user = ((User) any);\n+            builder = builder.\n+                    field(\"username\", user.getUsername()).\n+                    field(\"lastLoginDate\", user.getLastLoginDate()).\n+                    field(\"lastRecertification\", user.getLastRecertification()).\n+                    field(\"lastRecertificator\", user.getLastRecertificator());\n+\n+            List<Object> roles = CollectionUtils.collect(userDAO.findAllRoles(user),\n+                    EntityUtils.<Role>keyTransformer(), new ArrayList<>());\n+            builder = builder.field(\"roles\", roles);\n+\n+            List<Object> memberships = new ArrayList<Object>(userDAO.findAllGroupKeys(user));\n+            builder = builder.field(\"memberships\", memberships);\n+\n+            List<Object> relationships = new ArrayList<>();\n+            Set<Object> relationshipTypes = new HashSet<>();\n+            for (URelationship relationship : user.getRelationships()) {\n+                relationships.add(relationship.getRightEnd().getKey());\n+                relationshipTypes.add(relationship.getType().getKey());\n+            }\n+            builder = builder.field(\"relationships\", relationships);\n+            builder = builder.field(\"relationshipTypes\", relationshipTypes);\n+        }\n+\n+        for (PlainAttr<?> plainAttr : any.getPlainAttrs()) {\n+            List<Object> values = CollectionUtils.collect(plainAttr.getValues(),\n+                    new Transformer<PlainAttrValue, Object>() {\n+\n+                @Override\n+                public Object transform(final PlainAttrValue input) {\n+                    return input.getValue();\n+                }\n+            }, new ArrayList<>(plainAttr.getValues().size()));\n+            if (plainAttr.getUniqueValue() != null) {\n+                values.add(plainAttr.getUniqueValue().getValue());\n+            }\n+\n+            builder = builder.field(plainAttr.getSchema().getKey(), values);\n+        }\n+\n+        builder = builder.endObject();\n+\n+        return builder;\n+    }\n+}"},{"sha":"f870317b56e3f431bb62ec282112c52b6634d71f","filename":"ext/elasticsearch/client-elasticsearch/src/main/resources/elasticsearchClientContext.xml","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fresources%2FelasticsearchClientContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fresources%2FelasticsearchClientContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fresources%2FelasticsearchClientContext.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+\n+  <bean class=\"org.apache.syncope.ext.elasticsearch.client.ElasticsearchClientFactoryBean\">\n+    <property name=\"settings\">\n+      <map>\n+        <entry key=\"cluster.name\">\n+          <value>elasticsearch</value>\n+        </entry>\n+        <entry key=\"client.transport.sniff\">\n+          <value>true</value>\n+        </entry>\n+      </map>\n+    </property>  \n+    <property name=\"addresses\">\n+      <map>\n+        <entry key=\"localhost\">\n+          <value>9300</value>\n+        </entry>\n+      </map>\n+    </property>\n+  </bean>\n+  \n+  <bean class=\"org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils\">\n+    <property name=\"indexMaxResultWindow\" value=\"10000\"/>\n+  </bean>\n+  <bean class=\"org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager\"/>\n+  \n+</beans>"},{"sha":"129b36bd5e3639b6c9fbc234f9d643032d1687df","filename":"ext/elasticsearch/persistence-jpa/pom.xml","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fpom.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-elasticsearch</artifactId>\n+    <version>2.0.4-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: Elasticsearch Persistence JPA</name>\n+  <description>Apache Syncope Ext: Elasticsearch Persistence JPA</description>\n+  <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n+  <artifactId>syncope-ext-elasticsearch-persistence-jpa</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>    \n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-persistence-jpa</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n+      <artifactId>syncope-ext-elasticsearch-client</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"34651e1348998f93e4d78cf8f9cf5dd790a912fa","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"added","additions":355,"deletions":0,"changes":355,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,355 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n+import org.elasticsearch.action.search.SearchRequestBuilder;\n+import org.elasticsearch.action.search.SearchType;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.index.query.DisMaxQueryBuilder;\n+import org.elasticsearch.index.query.MatchNoneQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * Search engine implementation for users, groups and any objects, based on Elasticsearch.\n+ */\n+public class ElasticsearchAnySearchDAO extends AbstractAnySearchDAO {\n+\n+    private static final QueryBuilder EMPTY_QUERY_BUILDER = new MatchNoneQueryBuilder();\n+\n+    @Autowired\n+    private Client client;\n+\n+    @Autowired\n+    private ElasticsearchUtils elasticsearchUtils;\n+\n+    private DisMaxQueryBuilder adminRealmsFilter(final Set<String> adminRealms) {\n+        DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n+\n+        for (String realmPath : RealmUtils.normalize(adminRealms)) {\n+            Realm realm = realmDAO.findByFullPath(realmPath);\n+            if (realm == null) {\n+                LOG.warn(\"Ignoring invalid realm {}\", realmPath);\n+            } else {\n+                for (Realm descendant : realmDAO.findDescendants(realm)) {\n+                    builder.add(QueryBuilders.termQuery(\"realm.keyword\", descendant.getFullPath()));\n+                }\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    private SearchRequestBuilder searchRequestBuilder(\n+            final Set<String> adminRealms,\n+            final SearchCond cond,\n+            final AnyTypeKind kind) {\n+\n+        return client.prepareSearch(AuthContextUtils.getDomain().toLowerCase()).\n+                setTypes(kind.name()).\n+                setSearchType(SearchType.QUERY_THEN_FETCH).\n+                setQuery(SyncopeConstants.FULL_ADMIN_REALMS.equals(adminRealms)\n+                        ? getQueryBuilder(cond, kind)\n+                        : QueryBuilders.boolQuery().\n+                                must(adminRealmsFilter(adminRealms)).\n+                                must(getQueryBuilder(cond, kind)));\n+    }\n+\n+    @Override\n+    protected int doCount(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n+        SearchRequestBuilder builder = searchRequestBuilder(adminRealms, cond, kind).\n+                setFrom(0).setSize(0);\n+\n+        return (int) builder.get().getHits().getTotalHits();\n+    }\n+\n+    @Override\n+    protected <T extends Any<?>> List<T> doSearch(\n+            final Set<String> adminRealms,\n+            final SearchCond cond,\n+            final int page,\n+            final int itemsPerPage,\n+            final List<OrderByClause> orderBy,\n+            final AnyTypeKind kind) {\n+\n+        SearchRequestBuilder builder = searchRequestBuilder(adminRealms, cond, kind).\n+                setFrom(page <= 0 ? 0 : page - 1).\n+                setSize(itemsPerPage < 0 ? elasticsearchUtils.getIndexMaxResultWindow() : itemsPerPage);\n+\n+        return buildResult(\n+                CollectionUtils.collect(Arrays.asList(builder.get().getHits().getHits()),\n+                        new Transformer<SearchHit, Object>() {\n+\n+                    @Override\n+                    public Object transform(final SearchHit input) {\n+                        return input.getId();\n+                    }\n+                }, new ArrayList<>()),\n+                kind);\n+    }\n+\n+    private QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind kind) {\n+        QueryBuilder builder = EMPTY_QUERY_BUILDER;\n+\n+        switch (cond.getType()) {\n+            case LEAF:\n+            case NOT_LEAF:\n+                if (cond.getAnyTypeCond() != null && AnyTypeKind.ANY_OBJECT == kind) {\n+                    builder = getQueryBuilder(cond.getAnyTypeCond());\n+                } else if (cond.getRelationshipTypeCond() != null\n+                        && (AnyTypeKind.USER == kind || AnyTypeKind.ANY_OBJECT == kind)) {\n+\n+                    builder = getQueryBuilder(cond.getRelationshipTypeCond());\n+                } else if (cond.getRelationshipCond() != null\n+                        && (AnyTypeKind.USER == kind || AnyTypeKind.ANY_OBJECT == kind)) {\n+\n+                    builder = getQueryBuilder(cond.getRelationshipCond());\n+                } else if (cond.getMembershipCond() != null\n+                        && (AnyTypeKind.USER == kind || AnyTypeKind.ANY_OBJECT == kind)) {\n+\n+                    builder = getQueryBuilder(cond.getMembershipCond());\n+                } else if (cond.getAssignableCond() != null) {\n+                    builder = getQueryBuilder(cond.getAssignableCond());\n+                } else if (cond.getRoleCond() != null && AnyTypeKind.USER == kind) {\n+                    builder = getQueryBuilder(cond.getRoleCond());\n+                } else if (cond.getMemberCond() != null && AnyTypeKind.GROUP == kind) {\n+                    builder = getQueryBuilder(cond.getMemberCond());\n+                } else if (cond.getResourceCond() != null) {\n+                    builder = getQueryBuilder(cond.getResourceCond());\n+                } else if (cond.getAttributeCond() != null) {\n+                    builder = getQueryBuilder(cond.getAttributeCond(), kind);\n+                } else if (cond.getAnyCond() != null) {\n+                    builder = getQueryBuilder(cond.getAnyCond(), kind);\n+                }\n+                builder = checkNot(builder, cond.getType() == SearchCond.Type.NOT_LEAF);\n+                break;\n+\n+            case AND:\n+                builder = QueryBuilders.boolQuery().\n+                        must(getQueryBuilder(cond.getLeftSearchCond(), kind)).\n+                        must(getQueryBuilder(cond.getRightSearchCond(), kind));\n+                break;\n+\n+            case OR:\n+                builder = QueryBuilders.disMaxQuery().\n+                        add(getQueryBuilder(cond.getLeftSearchCond(), kind)).\n+                        add(getQueryBuilder(cond.getRightSearchCond(), kind));\n+                break;\n+\n+            default:\n+        }\n+\n+        return builder;\n+    }\n+\n+    private QueryBuilder checkNot(final QueryBuilder builder, final boolean not) {\n+        return not\n+                ? QueryBuilders.boolQuery().mustNot(builder)\n+                : builder;\n+    }\n+\n+    private QueryBuilder getQueryBuilder(final AnyTypeCond cond) {\n+        return QueryBuilders.termQuery(\"anyType.keyword\", cond.getAnyTypeKey());\n+    }\n+\n+    private QueryBuilder getQueryBuilder(final RelationshipTypeCond cond) {\n+        return QueryBuilders.termQuery(\"relationshipTypes.keyword\", cond.getRelationshipTypeKey());\n+    }\n+\n+    private QueryBuilder getQueryBuilder(final RelationshipCond cond) {\n+        String rightAnyObjectKey;\n+        try {\n+            rightAnyObjectKey = check(cond);\n+        } catch (IllegalArgumentException e) {\n+            return EMPTY_QUERY_BUILDER;\n+        }\n+\n+        return QueryBuilders.termQuery(\"relationships.keyword\", rightAnyObjectKey);\n+    }\n+\n+    private QueryBuilder getQueryBuilder(final MembershipCond cond) {\n+        String groupKey;\n+        try {\n+            groupKey = check(cond);\n+        } catch (IllegalArgumentException e) {\n+            return EMPTY_QUERY_BUILDER;\n+        }\n+\n+        return QueryBuilders.termQuery(\"memberships.keyword\", groupKey);\n+    }\n+\n+    private QueryBuilder getQueryBuilder(final AssignableCond cond) {\n+        Realm realm;\n+        try {\n+            realm = check(cond);\n+        } catch (IllegalArgumentException e) {\n+            return EMPTY_QUERY_BUILDER;\n+        }\n+\n+        DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n+        if (cond.isFromGroup()) {\n+            for (Realm current = realm; current.getParent() != null; current = current.getParent()) {\n+                builder.add(QueryBuilders.termQuery(\"realm.keyword\", current.getFullPath()));\n+            }\n+            builder.add(QueryBuilders.termQuery(\"realm.keyword\", realmDAO.getRoot().getFullPath()));\n+        } else {\n+            for (Realm current : realmDAO.findDescendants(realm)) {\n+                builder.add(QueryBuilders.termQuery(\"realm.keyword\", current.getFullPath()));\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    private QueryBuilder getQueryBuilder(final RoleCond cond) {\n+        return QueryBuilders.termQuery(\"roles.keyword\", cond.getRoleKey());\n+    }\n+\n+    private QueryBuilder getQueryBuilder(final MemberCond cond) {\n+        String memberKey;\n+        try {\n+            memberKey = check(cond);\n+        } catch (IllegalArgumentException e) {\n+            return EMPTY_QUERY_BUILDER;\n+        }\n+\n+        return QueryBuilders.termQuery(\"members.keyword\", memberKey);\n+    }\n+\n+    private QueryBuilder getQueryBuilder(final ResourceCond cond) {\n+        return QueryBuilders.termQuery(\"resources.keyword\", cond.getResourceKey());\n+    }\n+\n+    private QueryBuilder fillAttrQuery(\n+            final PlainSchema schema,\n+            final PlainAttrValue attrValue,\n+            final AttributeCond cond) {\n+\n+        String name = schema.getType() == AttrSchemaType.String\n+                || schema.getType() == AttrSchemaType.Enum\n+                ? schema.getKey() + \".keyword\"\n+                : schema.getKey();\n+        Object value = schema.getType() == AttrSchemaType.Date && attrValue.getDateValue() != null\n+                ? attrValue.getDateValue().getTime()\n+                : attrValue.getValue();\n+\n+        QueryBuilder builder = EMPTY_QUERY_BUILDER;\n+\n+        switch (cond.getType()) {\n+            case ISNOTNULL:\n+                builder = QueryBuilders.existsQuery(name);\n+                break;\n+\n+            case ISNULL:\n+                builder = QueryBuilders.boolQuery().mustNot(QueryBuilders.existsQuery(name));\n+                break;\n+\n+            case ILIKE:\n+                builder = QueryBuilders.queryStringQuery(\n+                        schema.getKey() + \":\" + cond.getExpression().replace('%', '*'));\n+                break;\n+\n+            case LIKE:\n+                builder = QueryBuilders.wildcardQuery(name, cond.getExpression().replace('%', '*'));\n+                break;\n+\n+            case IEQ:\n+                builder = QueryBuilders.matchQuery(schema.getKey(), value);\n+                break;\n+\n+            case EQ:\n+                builder = QueryBuilders.termQuery(name, value);\n+                break;\n+\n+            case GE:\n+                builder = QueryBuilders.rangeQuery(name).gte(value);\n+                break;\n+\n+            case GT:\n+                builder = QueryBuilders.rangeQuery(name).gt(value);\n+                break;\n+\n+            case LE:\n+                builder = QueryBuilders.rangeQuery(name).lte(value);\n+                break;\n+\n+            case LT:\n+                builder = QueryBuilders.rangeQuery(name).lt(value);\n+                break;\n+\n+            default:\n+        }\n+\n+        return builder;\n+    }\n+\n+    private QueryBuilder getQueryBuilder(final AttributeCond cond, final AnyTypeKind kind) {\n+        Pair<PlainSchema, PlainAttrValue> checked;\n+        try {\n+            checked = check(cond, kind);\n+        } catch (IllegalArgumentException e) {\n+            return EMPTY_QUERY_BUILDER;\n+        }\n+\n+        return fillAttrQuery(checked.getLeft(), checked.getRight(), cond);\n+    }\n+\n+    private QueryBuilder getQueryBuilder(final AnyCond cond, final AnyTypeKind kind) {\n+        Triple<PlainSchema, PlainAttrValue, AnyCond> checked;\n+        try {\n+            checked = check(cond, kind);\n+        } catch (IllegalArgumentException e) {\n+            return EMPTY_QUERY_BUILDER;\n+        }\n+\n+        return fillAttrQuery(checked.getLeft(), checked.getMiddle(), checked.getRight());\n+    }\n+}"},{"sha":"6b8f4aaf6d96e84ccdd4ba1ed75d53cfa75555c0","filename":"ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+content.directory=${conf.directory}\n+any.search.dao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearchDAO"},{"sha":"0bbb7b34dc3e04238aefb4ffa8e932c917a923f1","filename":"ext/elasticsearch/pom.xml","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpom.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-ext</artifactId>\n+    <version>2.0.4-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: Elasticsearch</name>\n+  <description>Apache Syncope Ext: Elasticsearch</description>\n+  <groupId>org.apache.syncope.ext</groupId>\n+  <artifactId>syncope-ext-elasticsearch</artifactId>\n+  <packaging>pom</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n+  </properties>\n+  \n+  <modules>\n+    <module>client-elasticsearch</module>\n+    <module>persistence-jpa</module>\n+    <module>provisioning-java</module>\n+  </modules>\n+\n+</project>"},{"sha":"71089050d6037093f88a94076a5d78b1427bb11c","filename":"ext/elasticsearch/provisioning-java/pom.xml","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fpom.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-elasticsearch</artifactId>\n+    <version>2.0.4-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: Elasticsearch Provisioning Java</name>\n+  <description>Apache Syncope Ext: Elasticsearch Provisioning Java</description>\n+  <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n+  <artifactId>syncope-ext-elasticsearch-provisioning-java</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-provisioning-java</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n+      <artifactId>syncope-ext-elasticsearch-client</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"b9d8b15813f5477bcce7c60b0985abb7e57d1a94","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.job;\n+\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;\n+import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRequest;\n+import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse;\n+import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.client.Client;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * Remove and rebuild all Elasticsearch indexes with information from existing users, groups and any objects.\n+ */\n+public class ElasticsearchReindex extends AbstractSchedTaskJobDelegate {\n+\n+    @Autowired\n+    private Client client;\n+\n+    @Autowired\n+    private ElasticsearchUtils elasticsearchUtils;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n+    @Override\n+    protected String doExecute(final boolean dryRun) throws JobExecutionException {\n+        if (!dryRun) {\n+            try {\n+                LOG.debug(\"Start rebuild index {}\", AuthContextUtils.getDomain().toLowerCase());\n+\n+                IndicesExistsResponse existsIndexResponse = client.admin().indices().\n+                        exists(new IndicesExistsRequest(AuthContextUtils.getDomain().toLowerCase())).\n+                        get();\n+                if (existsIndexResponse.isExists()) {\n+                    DeleteIndexResponse deleteIndexResponse = client.admin().indices().\n+                            delete(new DeleteIndexRequest(AuthContextUtils.getDomain().toLowerCase())).\n+                            get();\n+                    LOG.debug(\"Successfully removed {}: {}\",\n+                            AuthContextUtils.getDomain().toLowerCase(), deleteIndexResponse);\n+                }\n+\n+                CreateIndexResponse createIndexResponse = client.admin().indices().\n+                        create(new CreateIndexRequest(AuthContextUtils.getDomain().toLowerCase())).\n+                        get();\n+                LOG.debug(\"Successfully created {}: {}\",\n+                        AuthContextUtils.getDomain().toLowerCase(), createIndexResponse);\n+\n+                LOG.debug(\"Indexing users...\");\n+                for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                    for (User user : userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n+                        IndexResponse response = client.prepareIndex(\n+                                AuthContextUtils.getDomain().toLowerCase(),\n+                                AnyTypeKind.USER.name(),\n+                                user.getKey()).\n+                                setSource(elasticsearchUtils.builder(user)).\n+                                get();\n+                        LOG.debug(\"Index successfully created for {}: {}\", user, response);\n+                    }\n+                }\n+                LOG.debug(\"Indexing groups...\");\n+                for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                    for (Group group : groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n+                        IndexResponse response = client.prepareIndex(\n+                                AuthContextUtils.getDomain().toLowerCase(),\n+                                AnyTypeKind.GROUP.name(),\n+                                group.getKey()).\n+                                setSource(elasticsearchUtils.builder(group)).\n+                                get();\n+                        LOG.debug(\"Index successfully created for {}: {}\", group, response);\n+                    }\n+                }\n+                LOG.debug(\"Indexing any objects...\");\n+                for (int page = 1; page <= (anyObjectDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                    for (AnyObject anyObject : anyObjectDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n+                        IndexResponse response = client.prepareIndex(\n+                                AuthContextUtils.getDomain().toLowerCase(),\n+                                AnyTypeKind.ANY_OBJECT.name(),\n+                                anyObject.getKey()).\n+                                setSource(elasticsearchUtils.builder(anyObject)).\n+                                get();\n+                        LOG.debug(\"Index successfully created for {}: {}\", anyObject, response);\n+                    }\n+                }\n+\n+                LOG.debug(\"Rebuild index {} successfully completed\", AuthContextUtils.getDomain().toLowerCase());\n+            } catch (Exception e) {\n+                throw new JobExecutionException(\n+                        \"While rebuilding index \" + AuthContextUtils.getDomain().toLowerCase(), e);\n+            }\n+        }\n+\n+        return \"SUCCESS\";\n+    }\n+\n+    @Override\n+    protected boolean hasToBeRegistered(final TaskExec execution) {\n+        return true;\n+    }\n+}"},{"sha":"6806ed55b84d388b27180d4a136b8a5049357b79","filename":"ext/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/ext%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fpom.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -80,6 +80,7 @@ under the License.\n     <module>camel</module>\n     <module>swagger-ui</module>\n     <module>saml2sp</module>\n+    <module>elasticsearch</module>\n   </modules>\n \n </project>"},{"sha":"58c928279b6e4c97e6b39ed908d44cc3554c7087","filename":"fit/core-reference/pom.xml","status":"modified","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -412,6 +412,70 @@ under the License.\n       </build>\n     </profile>\n   \n+    <profile>\n+      <id>elasticsearch</id>\n+      \n+      <dependencies>\n+        <dependency>\n+          <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n+          <artifactId>syncope-ext-elasticsearch-provisioning-java</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n+          <artifactId>syncope-ext-elasticsearch-persistence-jpa</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n+      </dependencies>\n+      \n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-war-plugin</artifactId>\n+            <configuration>\n+              <webResources>\n+                <resource>\n+                  <directory>src/main/webapp/WEB-INF</directory>\n+                  <excludes>\n+                    <exclude>web.xml</exclude>\n+                  </excludes>\n+                </resource>\n+              </webResources>\n+              <webXml>${basedir}/src/main/resources/elasticsearch/web.xml</webXml>\n+            </configuration>\n+          </plugin>\n+        </plugins>\n+        \n+        <testResources>\n+          <testResource>\n+            <directory>src/test/resources</directory>\n+            <filtering>true</filtering>\n+            <excludes>\n+              <exclude>keystore</exclude>\n+            </excludes>\n+          </testResource>\n+          <testResource>\n+            <directory>src/test/resources</directory>\n+            <filtering>false</filtering>\n+            <includes>\n+              <include>keystore</include>\n+            </includes>\n+          </testResource>\n+          <testResource>\n+            <directory>${basedir}/../../core/rest-cxf/src/main/resources</directory>\n+            <includes>\n+              <include>errorMessages.properties</include>\n+            </includes>\n+          </testResource>\n+          <testResource>\n+            <directory>src/main/resources/elasticsearch</directory>\n+            <filtering>true</filtering>\n+          </testResource>\n+        </testResources>\n+      </build>\n+    </profile>\n+  \n     <profile>\n       <id>postgres-it</id>\n \n@@ -759,6 +823,14 @@ under the License.\n             <groupId>org.apache.maven.plugins</groupId>\n             <artifactId>maven-war-plugin</artifactId>\n             <configuration>\n+              <webResources>\n+                <resource>\n+                  <directory>src/main/webapp/WEB-INF</directory>\n+                  <excludes>\n+                    <exclude>web.xml</exclude>\n+                  </excludes>\n+                </resource>\n+              </webResources>\n               <webXml>${basedir}/src/main/resources/jboss/web.xml</webXml>\n               <packagingExcludes>WEB-INF/lib/syncope-*-persistence-jpa-${project.version}.jar</packagingExcludes>\n             </configuration>"},{"sha":"5951117d8c2402051db9a751367e6e72f8f92730","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":38,"deletions":2,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -22,6 +22,7 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import javax.sql.DataSource;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n@@ -32,14 +33,18 @@\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.report.StaticReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.core.logic.TaskLogic;\n import org.apache.syncope.core.logic.report.AuditReportlet;\n import org.apache.syncope.core.logic.report.GroupReportlet;\n import org.apache.syncope.core.logic.report.ReconciliationReportlet;\n import org.apache.syncope.core.logic.report.StaticReportlet;\n import org.apache.syncope.core.logic.report.UserReportlet;\n import org.apache.syncope.core.migration.MigrationPullActions;\n+import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.AlwaysTrueValidator;\n@@ -55,6 +60,9 @@\n import org.apache.syncope.core.provisioning.java.pushpull.DBPasswordPullActions;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPMembershipPullActions;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPPasswordPullActions;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Static implementation providing information about the integration test environment.\n@@ -171,14 +179,42 @@ public class ITImplementationLookup implements ImplementationLookup {\n         }\n     };\n \n+    @Autowired\n+    private AnySearchDAO anySearchDAO;\n+\n+    @Autowired\n+    private DomainsHolder domainsHolder;\n+\n+    @Autowired\n+    private TaskLogic taskLogic;\n+\n     @Override\n     public Integer getPriority() {\n-        return 400;\n+        return Integer.MAX_VALUE;\n     }\n \n     @Override\n     public void load() {\n-        // nothing to do\n+        // in case the Elasticsearch extension is enabled, reinit a clean index for all available domains\n+        if (AopUtils.getTargetClass(anySearchDAO).getName().contains(\"Elasticsearch\")) {\n+            for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n+                AuthContextUtils.execWithAuthContext(entry.getKey(), new AuthContextUtils.Executable<Void>() {\n+\n+                    @Override\n+                    public Void exec() {\n+                        SchedTaskTO task = new SchedTaskTO();\n+                        task.setJobDelegateClassName(\n+                                \"org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex\");\n+                        task.setName(\"Elasticsearch Reindex\");\n+                        task = taskLogic.createSchedTask(task);\n+\n+                        taskLogic.execute(task.getKey(), null, false);\n+\n+                        return null;\n+                    }\n+                });\n+            }\n+        }\n     }\n \n     @Override"},{"sha":"6b8f4aaf6d96e84ccdd4ba1ed75d53cfa75555c0","filename":"fit/core-reference/src/main/resources/elasticsearch/persistence.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+content.directory=${conf.directory}\n+any.search.dao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearchDAO"},{"sha":"6d1ea806245abcce6f4cec389160de94aaef9816","filename":"fit/core-reference/src/main/resources/elasticsearch/web.xml","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fweb.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee \n+                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n+         version=\"3.1\">\n+\n+  <display-name>Apache Syncope ${syncope.version} Core</display-name>\n+\n+  <context-param>\n+    <param-name>contextConfigLocation</param-name>\n+    <param-value>\n+      classpath*:/coreContext.xml\n+      classpath*:/elasticsearchClientContext.xml\n+      classpath*:/securityContext.xml\n+      classpath*:/logicContext.xml\n+      classpath*:/restCXFContext.xml\n+      classpath*:/persistenceContext.xml\n+      classpath*:/provisioning*Context.xml\n+      classpath*:/workflow*Context.xml\n+    </param-value>\n+  </context-param>\n+\n+  <listener>\n+    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n+  </listener>\n+\n+  <login-config>\n+    <auth-method>CLIENT-CERT</auth-method>\n+  </login-config>\n+\n+</web-app>\n\\ No newline at end of file"},{"sha":"f484c350ef2f2629524832d56d22d77611f5f340","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -176,7 +176,15 @@ under the License.\n       <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n-    \n+    <asyncLogger name=\"org.elasticsearch\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"mainFile\"/>\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    <asyncLogger name=\"io.netty\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"mainFile\"/>\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n     <root level=\"INFO\">\n       <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>"},{"sha":"12d68ec06115198d0e5a90fa2178db2c923571cb","filename":"fit/core-reference/src/test/resources/rebel.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -82,6 +82,15 @@ under the License.\n     </dir>\n     <dir name=\"${basedir}/../../ext/saml2sp/rest-cxf/target/classes\">\n     </dir>\n+    <dir name=\"${basedir}/../../ext/elasticsearch/client-elasticsearch/target/classes\">\n+      <exclude name=\"elasticsearchClientContext.xml\"/>\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/elasticsearch/persistence-jpa/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/elasticsearch/provisioning-java/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/elasticsearch/workflow-java/target/classes\">\n+    </dir>\n   </classpath>\n \n   <web>"},{"sha":"5683419f2569eda82a48a5b99822d16b46b4bd94","filename":"pom.xml","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021230445caf8d026a1d09b10ae4722dadb49984/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021230445caf8d026a1d09b10ae4722dadb49984/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=021230445caf8d026a1d09b10ae4722dadb49984","patch":"@@ -379,6 +379,8 @@ under the License.\n     <slf4j.version>1.7.25</slf4j.version>\n     <opensaml.version>3.3.0</opensaml.version>\n \n+    <elasticsearch.version>5.3.2</elasticsearch.version>\n+\n     <log4j.version>2.8.2</log4j.version>\n     <disruptor.version>3.3.6</disruptor.version>\n \n@@ -702,6 +704,12 @@ under the License.\n       </dependency>\n       <!-- /OpenSAML -->\n           \n+      <dependency>\n+        <groupId>org.elasticsearch.client</groupId>\n+        <artifactId>transport</artifactId>\n+        <version>${elasticsearch.version}</version>\n+      </dependency>\n+\n       <dependency>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-jdbc</artifactId>\n@@ -964,9 +972,17 @@ under the License.\n         <version>${quartz.version}</version>\n         <exclusions>\n           <exclusion>\n-            <groupId>c3p0</groupId>\n+            <groupId>com.mchange</groupId>\n             <artifactId>c3p0</artifactId>\n           </exclusion>\n+          <exclusion>\n+            <groupId>com.mchange</groupId>\n+            <artifactId>mchange-commons-java</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>com.zaxxer</groupId>\n+            <artifactId>HikariCP-java6</artifactId>\n+          </exclusion>\n         </exclusions>\n       </dependency>\n       "}]}