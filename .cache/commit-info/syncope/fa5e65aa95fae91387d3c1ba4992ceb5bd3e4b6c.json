{"sha":"fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZhNWU2NWFhOTVmYWU5MTM4N2QzYzFiYTQ5OTJjZWI1YmQzZTRiNmM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-22T11:59:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-22T11:59:44Z"},"message":"[SYNCOPE-715] Implemented","tree":{"sha":"37ae6391636d92205ca35b80b2f2dd83f1eb3eb1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/37ae6391636d92205ca35b80b2f2dd83f1eb3eb1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e20dd0ae315244db0f74b29ffe6096760a7536b6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e20dd0ae315244db0f74b29ffe6096760a7536b6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e20dd0ae315244db0f74b29ffe6096760a7536b6"}],"stats":{"total":141,"additions":87,"deletions":54},"files":[{"sha":"deab762003d7e6966a620741d19d5df723ae659a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","patch":"@@ -121,7 +121,7 @@ public List<UserTO> list(\n \n                     @Override\n                     public UserTO transform(final User input) {\n-                        return binder.getUserTO(input, details);\n+                        return binder.returnUserTO(binder.getUserTO(input, details));\n                     }\n                 }, new ArrayList<UserTO>());\n     }\n@@ -131,14 +131,14 @@ public UserTO transform(final User input) {\n     public Pair<String, UserTO> readSelf() {\n         return ImmutablePair.of(\n                 POJOHelper.serialize(AuthContextUtils.getAuthorizations()),\n-                binder.getAuthenticatedUserTO());\n+                binder.returnUserTO(binder.getAuthenticatedUserTO()));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO read(final Long key) {\n-        return binder.getUserTO(key);\n+        return binder.returnUserTO(binder.getUserTO(key));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_SEARCH + \"')\")\n@@ -163,7 +163,7 @@ public List<UserTO> search(final SearchCond searchCondition, final int page, fin\n \n             @Override\n             public UserTO transform(final User input) {\n-                return binder.getUserTO(input, details);\n+                return binder.returnUserTO(binder.getUserTO(input, details));\n             }\n         }, new ArrayList<UserTO>());\n     }\n@@ -203,7 +203,7 @@ protected UserTO doCreate(final UserTO userTO, final boolean storePassword, fina\n         UserTO savedTO = binder.getUserTO(created.getKey());\n         savedTO.getPropagationStatusTOs().addAll(created.getValue());\n \n-        return afterCreate(savedTO, before.getValue());\n+        return binder.returnUserTO(afterCreate(savedTO, before.getValue()));\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n@@ -240,7 +240,7 @@ protected UserTO doUpdate(final UserPatch userPatch, final boolean self) {\n         UserTO updatedTO = binder.getUserTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n \n-        return afterUpdate(updatedTO, before.getRight());\n+        return binder.returnUserTO(afterUpdate(updatedTO, before.getRight()));\n     }\n \n     protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final StatusPatch statusPatch) {\n@@ -277,7 +277,7 @@ public UserTO status(final StatusPatch statusPatch) {\n         Map.Entry<Long, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusPatch);\n         UserTO savedTO = binder.getUserTO(updated.getKey());\n         savedTO.getPropagationStatusTOs().addAll(updated.getValue());\n-        return savedTO;\n+        return binder.returnUserTO(savedTO);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.MUST_CHANGE_PASSWORD + \"')\")\n@@ -366,7 +366,7 @@ public String transform(final Group group) {\n         }\n         deletedTO.getPropagationStatusTOs().addAll(statuses);\n \n-        return afterDelete(deletedTO, before.getRight());\n+        return binder.returnUserTO(afterDelete(deletedTO, before.getRight()));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -389,7 +389,7 @@ public StringPatchItem transform(final String resource) {\n             }\n         }));\n \n-        return binder.getUserTO(provisioningManager.unlink(patch));\n+        return binder.returnUserTO(binder.getUserTO(provisioningManager.unlink(patch)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -412,7 +412,7 @@ public StringPatchItem transform(final String resource) {\n             }\n         }));\n \n-        return binder.getUserTO(provisioningManager.link(patch));\n+        return binder.returnUserTO(binder.getUserTO(provisioningManager.link(patch)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -485,7 +485,7 @@ public UserTO deprovision(final Long key, final Collection<String> resources) {\n \n         UserTO updatedTO = binder.getUserTO(key);\n         updatedTO.getPropagationStatusTOs().addAll(statuses);\n-        return updatedTO;\n+        return binder.returnUserTO(updatedTO);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -504,7 +504,7 @@ public UserTO provision(\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n         user.getPropagationStatusTOs().addAll(provisioningManager.provision(key, changePwd, password, resources));\n-        return user;\n+        return binder.returnUserTO(user);\n     }\n \n     @Override\n@@ -527,7 +527,8 @@ protected UserTO resolveReference(final Method method, final Object... args) thr\n \n         if ((key != null) && !key.equals(0L)) {\n             try {\n-                return key instanceof Long ? binder.getUserTO((Long) key) : binder.getUserTO((String) key);\n+                return binder.returnUserTO(key instanceof Long\n+                        ? binder.getUserTO((Long) key) : binder.getUserTO((String) key));\n             } catch (Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);"},{"sha":"985c7aad4eabcccb290f5aa98b7bead9b82f8186","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":16,"deletions":12,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttr;\n@@ -64,19 +65,22 @@ public CPlainAttr find(final String key) {\n     public CPlainAttr find(final String key, final String defaultValue) {\n         CPlainAttr result = find(key);\n         if (result == null) {\n-            JPACPlainAttr newAttr = new JPACPlainAttr();\n-            newAttr.setSchema(schemaDAO.find(key));\n-\n-            JPACPlainAttrValue attrValue;\n-            if (newAttr.getSchema().isUniqueConstraint()) {\n-                attrValue = new JPACPlainAttrValue();\n-                ((PlainAttrUniqueValue) attrValue).setSchema(newAttr.getSchema());\n-            } else {\n-                attrValue = new JPACPlainAttrValue();\n+            PlainSchema schema = schemaDAO.find(key);\n+            if (schema != null) {\n+                JPACPlainAttr newAttr = new JPACPlainAttr();\n+                newAttr.setSchema(schemaDAO.find(key));\n+\n+                JPACPlainAttrValue attrValue;\n+                if (newAttr.getSchema().isUniqueConstraint()) {\n+                    attrValue = new JPACPlainAttrValue();\n+                    ((PlainAttrUniqueValue) attrValue).setSchema(newAttr.getSchema());\n+                } else {\n+                    attrValue = new JPACPlainAttrValue();\n+                }\n+                newAttr.add(defaultValue, attrValue);\n+\n+                result = newAttr;\n             }\n-            newAttr.add(defaultValue, attrValue);\n-\n-            result = newAttr;\n         }\n \n         return result;"},{"sha":"ed1c035b0938861be292c19a402e216f293b4263","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","patch":"@@ -85,6 +85,12 @@ under the License.\n   <CPlainAttr id=\"12\" owner_id=\"1\" schema_name=\"tasks.interruptMaxRetries\"/>\n   <CPlainAttrValue id=\"12\" attribute_id=\"12\" longValue=\"20\"/>\n \n+  <!-- Return hashed password values when reading users -->\n+  <PlainSchema name=\"return.password.value\" type=\"Boolean\"\n+               mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"14\" owner_id=\"1\" schema_name=\"return.password.value\"/>\n+  <CPlainAttrValue id=\"14\" attribute_id=\"14\" booleanValue=\"0\"/>\n+\n   <AnyType name=\"USER\" kind=\"USER\"/>\n   <AnyTypeClass name=\"BaseUser\"/>\n   <AnyType_AnyTypeClass anyType_name=\"USER\" anyTypeClass_name=\"BaseUser\"/>"},{"sha":"7d1dfea19ca17c148641a8d005fdeeef7be33aee","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","patch":"@@ -83,7 +83,7 @@ public static void unsetAuthContext() {\n \n     @Test\n     public void readPlainSchemas() {\n-        assertEquals(16, plainSchemaDAO.findAll().size());\n+        assertEquals(17, plainSchemaDAO.findAll().size());\n     }\n \n     @Test"},{"sha":"21636b74757953de4674c783b6168061bd8fcb52","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","patch":"@@ -47,7 +47,7 @@ public class PlainSchemaTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<PlainSchema> schemas = plainSchemaDAO.findAll();\n-        assertEquals(43, schemas.size());\n+        assertEquals(44, schemas.size());\n     }\n \n     @Test"},{"sha":"d1fde9ea83c36fc6358e4f1e95f7ba552fdbd9c7","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","patch":"@@ -84,7 +84,13 @@ under the License.\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"12\" owner_id=\"1\" schema_name=\"tasks.interruptMaxRetries\"/>\n   <CPlainAttrValue id=\"12\" attribute_id=\"12\" longValue=\"20\"/>\n-\n+  \n+  <!-- Return hashed password values when reading users -->\n+  <PlainSchema name=\"return.password.value\" type=\"Boolean\"\n+               mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"14\" owner_id=\"1\" schema_name=\"return.password.value\"/>\n+  <CPlainAttrValue id=\"14\" attribute_id=\"14\" booleanValue=\"0\"/>\n+  \n   <!-- For usage with admin console -->\n   <PlainSchema name=\"admin.user.layout\" type=\"String\"\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>"},{"sha":"cc36a9d26361e5dd0a14659779d6aa141a22d916","filename":"core/persistence-jpa/src/test/resources/domains/TwoContent.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml?ref=fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","patch":"@@ -71,6 +71,12 @@ under the License.\n   <CPlainAttr id=\"12\" owner_id=\"1\" schema_name=\"tasks.interruptMaxRetries\"/>\n   <CPlainAttrValue id=\"12\" attribute_id=\"12\" longValue=\"20\"/>\n \n+  <!-- Return hashed password values when reading users -->\n+  <PlainSchema name=\"return.password.value\" type=\"Boolean\"\n+               mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"14\" owner_id=\"1\" schema_name=\"return.password.value\"/>\n+  <CPlainAttrValue id=\"14\" attribute_id=\"14\" booleanValue=\"0\"/>\n+  \n   <AnyType name=\"USER\" kind=\"USER\"/>\n   <AnyTypeClass name=\"BaseUser\"/>\n   <AnyType_AnyTypeClass anyType_name=\"USER\" anyTypeClass_name=\"BaseUser\"/>"},{"sha":"9592a3feb3d9363d434367ae58eec8f08985c44b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/UserDataBinder.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java?ref=fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","patch":"@@ -25,6 +25,8 @@\n \n public interface UserDataBinder {\n \n+    UserTO returnUserTO(UserTO userTO);\n+\n     UserTO getAuthenticatedUserTO();\n \n     UserTO getUserTO(String username);"},{"sha":"147683c03a688ac2d0f0bd6c3b07e06bfbcffeb5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","patch":"@@ -99,6 +99,15 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n \n     private final Encryptor encryptor = Encryptor.getInstance();\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public UserTO returnUserTO(final UserTO userTO) {\n+        if (!confDAO.find(\"return.password.value\", \"false\").getValues().get(0).getBooleanValue()) {\n+            userTO.setPassword(null);\n+        }\n+        return userTO;\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO getAuthenticatedUserTO() {"},{"sha":"9a54b7fefdf38bd355eff95e4c7daf021028901d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/MultitenancyITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java?ref=fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","patch":"@@ -98,7 +98,7 @@ public void masterOnly() {\n \n     @Test\n     public void readPlainSchemas() {\n-        assertEquals(16, adminClient.getService(SchemaService.class).list(SchemaType.PLAIN).size());\n+        assertEquals(17, adminClient.getService(SchemaService.class).list(SchemaType.PLAIN).size());\n     }\n \n     @Test"},{"sha":"e8ffd56be592ebd3629fc1472996c05f08008208","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":19,"deletions":22,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","patch":"@@ -28,11 +28,13 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Map;\n import java.util.Set;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -674,9 +676,9 @@ public void issueSYNCOPE313DB() throws Exception {\n         assertEquals(Encryptor.getInstance().encode(\"security123\", CipherAlgorithm.SHA1), value.toUpperCase());\n \n         // 3. Update the password in the DB\n-        String newPassword = Encryptor.getInstance().encode(\"new-security\", CipherAlgorithm.SHA1);\n-        jdbcTemplate.execute(\n-                \"UPDATE test set PASSWORD='\" + newPassword + \"' where ID='\" + user.getUsername() + \"'\");\n+        String newCleanPassword = \"new-security\";\n+        String newPassword = Encryptor.getInstance().encode(newCleanPassword, CipherAlgorithm.SHA1);\n+        jdbcTemplate.execute(\"UPDATE test set PASSWORD='\" + newPassword + \"' where ID='\" + user.getUsername() + \"'\");\n \n         // 4. Sync the user from the resource\n         SyncTaskTO syncTask = new SyncTaskTO();\n@@ -701,8 +703,8 @@ public void issueSYNCOPE313DB() throws Exception {\n         assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n         // 5. Test the sync'd user\n-        UserTO updatedUser = userService.read(user.getKey());\n-        assertEquals(newPassword, updatedUser.getPassword());\n+        Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(user.getUsername(), newCleanPassword).self();\n+        assertNotNull(self);\n \n         // 6. Delete SyncTask + user\n         taskService.delete(syncTask.getKey());\n@@ -715,30 +717,31 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         ldapCleanup();\n \n         // 1. create user in LDAP\n+        String oldCleanPassword = \"security123\";\n         UserTO user = UserITCase.getUniqueSampleTO(\"syncope313-ldap@syncope.apache.org\");\n-        user.setPassword(\"security123\");\n+        user.setPassword(oldCleanPassword);\n         user.getResources().add(RESOURCE_NAME_LDAP);\n         user = createUser(user);\n         assertNotNull(user);\n         assertFalse(user.getResources().isEmpty());\n \n         // 2. request to change password only on Syncope and not on LDAP\n+        String newCleanPassword = \"new-security123\";\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(user.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"new-security123\").build());\n-        updateUser(userPatch);\n+        userPatch.setPassword(new PasswordPatch.Builder().value(newCleanPassword).build());\n+        user = updateUser(userPatch);\n \n         // 3. Check that the Syncope user now has the changed password\n-        UserTO updatedUser = userService.read(user.getKey());\n-        String encodedNewPassword = Encryptor.getInstance().encode(\"new-security123\", CipherAlgorithm.SHA1);\n-        assertEquals(encodedNewPassword, updatedUser.getPassword());\n+        Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(user.getUsername(), newCleanPassword).self();\n+        assertNotNull(self);\n \n         // 4. Check that the LDAP resource has the old password\n         ConnObjectTO connObject =\n                 resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), user.getKey());\n         assertNotNull(getLdapRemoteObject(\n                 connObject.getPlainAttrMap().get(Name.NAME).getValues().get(0),\n-                \"security123\",\n+                oldCleanPassword,\n                 connObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n \n         // 5. Update the LDAP Connector to retrieve passwords\n@@ -761,27 +764,21 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         syncTask.getActionsClassNames().add(LDAPPasswordSyncActions.class.getName());\n         Response taskResponse = taskService.create(syncTask);\n \n-        SyncTaskTO actual = getObject(taskResponse.getLocation(), TaskService.class, SyncTaskTO.class);\n-        assertNotNull(actual);\n-\n-        syncTask = taskService.read(actual.getKey());\n+        syncTask = getObject(taskResponse.getLocation(), TaskService.class, SyncTaskTO.class);\n         assertNotNull(syncTask);\n-        assertEquals(actual.getKey(), syncTask.getKey());\n-        assertEquals(actual.getJobDelegateClassName(), syncTask.getJobDelegateClassName());\n \n         TaskExecTO execution = execProvisioningTask(taskService, syncTask.getKey(), 50, false);\n         assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n         // 7. Test the sync'd user\n-        String syncedPassword = Encryptor.getInstance().encode(\"security123\", CipherAlgorithm.SHA1);\n-        updatedUser = userService.read(user.getKey());\n-        assertEquals(syncedPassword, updatedUser.getPassword());\n+        self = clientFactory.create(user.getUsername(), oldCleanPassword).self();\n+        assertNotNull(self);\n \n         // 8. Delete SyncTask + user + reset the connector\n         taskService.delete(syncTask.getKey());\n         property.getValues().clear();\n         property.getValues().add(Boolean.FALSE);\n         connectorService.update(resourceConnector);\n-        deleteUser(updatedUser.getKey());\n+        deleteUser(user.getKey());\n     }\n }"},{"sha":"ebaf02bac5d2a7ebe1b8e4e2f901d48d9e883c35","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=fa5e65aa95fae91387d3c1ba4992ceb5bd3e4b6c","patch":"@@ -569,6 +569,7 @@ public void read() {\n         UserTO userTO = userService.read(1L);\n \n         assertNotNull(userTO);\n+        assertNull(userTO.getPassword());\n         assertNotNull(userTO.getPlainAttrs());\n         assertFalse(userTO.getPlainAttrs().isEmpty());\n     }\n@@ -2352,14 +2353,15 @@ public void issueSYNCOPE391() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        connObjectTO =\n-                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n+        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNotNull(connObjectTO);\n \n         // check if password has been correctly propagated on Syncope and resource-csv as usual\n         assertEquals(\"passwordTESTNULL1\", connObjectTO.getPlainAttrMap().\n                 get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n-        assertNotNull(userTO.getPassword());\n+        Pair<Map<String, Set<String>>, UserTO> self =\n+                clientFactory.create(userTO.getUsername(), \"passwordTESTNULL1\").self();\n+        assertNotNull(self);\n \n         // 4. add password policy to resource with passwordNotStore to false --> must store password\n         ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);"}]}