{"sha":"11ee88516e4f7ca69ac71751562fffaa17a04fdf","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjExZWU4ODUxNmU0ZjdjYTY5YWM3MTc1MTU2MmZmZmFhMTdhMDRmZGY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-20T12:11:29Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-20T12:11:40Z"},"message":"Avoiding any EntityManager#flush call","tree":{"sha":"7db5a43f97354b435b558454b855ae03f9ac80c7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7db5a43f97354b435b558454b855ae03f9ac80c7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/11ee88516e4f7ca69ac71751562fffaa17a04fdf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11ee88516e4f7ca69ac71751562fffaa17a04fdf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/11ee88516e4f7ca69ac71751562fffaa17a04fdf","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11ee88516e4f7ca69ac71751562fffaa17a04fdf/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9b116794af32bf3fb13bd6f4671b1ddb3b7702ae","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9b116794af32bf3fb13bd6f4671b1ddb3b7702ae","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9b116794af32bf3fb13bd6f4671b1ddb3b7702ae"}],"stats":{"total":205,"additions":108,"deletions":97},"files":[{"sha":"c0f0dca2ef8442f4f1690259c34953283f986700","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDAO.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -26,7 +26,5 @@\n \n     void detach(E entity);\n \n-    void flush();\n-\n     void clear();\n }"},{"sha":"fd87b302fa76a0f409cb35d522d650b57e40e067","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -54,11 +54,6 @@ public void detach(final E entity) {\n         entityManager().detach(entity);\n     }\n \n-    @Override\n-    public void flush() {\n-        entityManager().flush();\n-    }\n-\n     @Override\n     public void clear() {\n         entityManager().clear();"},{"sha":"ede1df002cc53e3753ae0af402a544f42813d7e6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -31,6 +31,7 @@\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n import javax.persistence.NoResultException;\n+import javax.persistence.PersistenceException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n@@ -321,6 +322,8 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                     user.getPasswordHistory().remove(i);\n                 }\n             }\n+        } catch (PersistenceException | InvalidEntityException e) {\n+            throw e;\n         } catch (Exception e) {\n             LOG.error(\"Invalid password for {}\", user, e);\n             throw new InvalidEntityException(User.class, EntityViolationType.InvalidPassword, e.getMessage());\n@@ -361,10 +364,9 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                         && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended();\n                 propagateSuspension |= policy.isPropagateSuspension();\n             }\n+        } catch (PersistenceException | InvalidEntityException e) {\n+            throw e;\n         } catch (Exception e) {\n-            if (e instanceof InvalidEntityException) {\n-                throw (InvalidEntityException) e;\n-            }\n             LOG.error(\"Invalid username for {}\", user, e);\n             throw new InvalidEntityException(User.class, EntityViolationType.InvalidUsername, e.getMessage());\n         }\n@@ -376,9 +378,8 @@ private Pair<User, Pair<Set<String>, Set<String>>> doSave(final User user) {\n         // 1. save clear password value before save\n         String clearPwd = user.getClearPassword();\n \n-        // 2. save and flush to trigger entity validation        \n+        // 2. save\n         User merged = super.save(user);\n-        entityManager().flush();\n \n         // 3. set back the sole clear password value\n         JPAUser.class.cast(merged).setClearPassword(clearPwd);"},{"sha":"2c2f4d17f2ed967cb456cf7830b2eb34f5839165","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -702,7 +702,7 @@ public void issueSYNCOPE980() {\n         anyObject.add(membership);\n         anyObjectDAO.save(anyObject);\n \n-        anyObjectDAO.flush();\n+        entityManager().flush();\n \n         MembershipCond groupCond = new MembershipCond();\n         groupCond.setGroup(\"citizen\");"},{"sha":"eef08cb0c41ce7d41c45fdd774b34ce2f6a368e6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ApplicationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FApplicationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FApplicationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FApplicationTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -97,7 +97,7 @@ public void crud() {\n \n         applicationDAO.save(application);\n \n-        applicationDAO.flush();\n+        entityManager().flush();\n \n         application = applicationDAO.find(application.getKey());\n         assertNotNull(application);\n@@ -107,7 +107,7 @@ public void crud() {\n         // 3. delete application\n         applicationDAO.delete(application);\n \n-        applicationDAO.flush();\n+        entityManager().flush();\n \n         assertNull(applicationDAO.find(application.getKey()));\n         assertNull(applicationDAO.findPrivilege(privilege1Key));"},{"sha":"c1dead229b0e8fc6ffeb12539757982fe6b89f0f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RelationshipTypeTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRelationshipTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRelationshipTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRelationshipTypeTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -99,7 +99,7 @@ public void deleteOnAnyObject() {\n \n         relationshipTypeDAO.delete(\"neighborhood\");\n \n-        relationshipTypeDAO.flush();\n+        entityManager().flush();\n \n         anyObject = anyObjectDAO.find(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n         assertNotNull(anyObject);"},{"sha":"15e3e5baae0b33e9c9da9793f92f1ae612dac579","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RemediationTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -120,7 +120,7 @@ public void create() {\n \n         taskDAO.delete(remediation.getPullTask());\n \n-        remediationDAO.flush();\n+        entityManager().flush();\n \n         remediation = remediationDAO.find(remediation.getKey());\n         assertNull(remediation.getPullTask());"},{"sha":"92723025d6b098cebe77f98638db5ed48fdacc40","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AccessTokenTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAccessTokenTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAccessTokenTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAccessTokenTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -48,15 +48,15 @@ public void crud() {\n         accessToken = accessTokenDAO.save(accessToken);\n         assertNotNull(accessToken);\n \n-        accessTokenDAO.flush();\n+        entityManager().flush();\n \n         accessToken = accessTokenDAO.findByOwner(\"bellini\");\n         assertNotNull(accessToken);\n         assertEquals(\"bellini\", accessToken.getOwner());\n \n         accessTokenDAO.deleteExpired();\n \n-        accessTokenDAO.flush();\n+        entityManager().flush();\n \n         accessToken = accessTokenDAO.findByOwner(\"bellini\");\n         assertNull(accessToken);"},{"sha":"3c0d4845b924c7b7f09fd6274e11c430422c8584","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -61,7 +61,7 @@ public void issueSYNCOPE95() {\n         for (Group group : groupDAO.findAll(1, 100)) {\n             groupDAO.delete(group.getKey());\n         }\n-        groupDAO.flush();\n+        entityManager().flush();\n \n         AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n         coolLeafCond.setSchema(\"cool\");\n@@ -96,7 +96,7 @@ public void searchByDynMembership() {\n         role = roleDAO.saveAndRefreshDynMemberships(role);\n         assertNotNull(role);\n \n-        roleDAO.flush();\n+        entityManager().flush();\n \n         // 2. search user by this dynamic role\n         RoleCond roleCond = new RoleCond();"},{"sha":"b4ccb19d80f2cd81fac8d9721a083ee836bd56d9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeClassTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -49,7 +49,7 @@ public void create() {\n \n         plainSchemaDAO.save(newSchema);\n \n-        plainSchemaDAO.flush();\n+        entityManager().flush();\n \n         newSchema = plainSchemaDAO.find(newSchema.getKey());\n         assertNotNull(newSchema);\n@@ -60,7 +60,7 @@ public void create() {\n \n         anyTypeClassDAO.save(newClass);\n \n-        anyTypeClassDAO.flush();\n+        entityManager().flush();\n \n         newClass = anyTypeClassDAO.find(newClass.getKey());\n         assertNotNull(newClass);\n@@ -84,7 +84,7 @@ public void delete() {\n \n         plainSchemaDAO.delete(\"surname\");\n \n-        anyTypeClassDAO.flush();\n+        entityManager().flush();\n \n         minimalUser = anyTypeClassDAO.find(\"minimal user\");\n         assertNotNull(minimalUser);"},{"sha":"5efb5d1a463e05d48bfda9e3dbe5373bf215d58a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -55,7 +55,7 @@ public void manyToMany() {\n         group.add(other);\n         anyTypeDAO.save(group);\n \n-        anyTypeDAO.flush();\n+        entityManager().flush();\n \n         user = anyTypeDAO.findUser();\n         assertTrue(user.getClasses().contains(other));\n@@ -67,13 +67,12 @@ public void manyToMany() {\n \n         anyTypeClassDAO.delete(\"other\");\n \n-        anyTypeDAO.flush();\n+        entityManager().flush();\n \n         user = anyTypeDAO.findUser();\n         assertEquals(userClassesBefore, user.getClasses().size() + 1);\n \n         group = anyTypeDAO.findGroup();\n         assertEquals(groupClassesBefore, group.getClasses().size() + 1);\n     }\n-\n }"},{"sha":"fefa7ff4b54c046f2846c4703903514922aaaf6a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConfTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -65,7 +65,7 @@ public void update() {\n         add(attr, String.valueOf(value));\n \n         confDAO.save(expireTime);\n-        confDAO.flush();\n+        entityManager().flush();\n \n         CPlainAttr actual = confDAO.find(\"token.expireTime\").get();\n         assertEquals(expireTime, actual);"},{"sha":"1377eddc9bb542af5d6b3b28efc771b220e34dad","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConnInstanceHistoryConfTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceHistoryConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceHistoryConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceHistoryConfTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -58,15 +58,15 @@ public void createDelete() {\n         ldapHistory = connInstanceHistoryConfDAO.save(ldapHistory);\n         assertNotNull(ldapHistory.getKey());\n \n-        connInstanceHistoryConfDAO.flush();\n+        entityManager().flush();\n \n         List<ConnInstanceHistoryConf> history = connInstanceHistoryConfDAO.findByEntity(ldapConnector);\n         assertEquals(1, history.size());\n         assertEquals(ldapHistory, history.get(0));\n \n         connInstanceHistoryConfDAO.delete(ldapHistory.getKey());\n \n-        connInstanceHistoryConfDAO.flush();\n+        entityManager().flush();\n \n         assertNull(connInstanceHistoryConfDAO.find(ldapHistory.getKey()));\n         assertTrue(connInstanceHistoryConfDAO.findByEntity(ldapConnector).isEmpty());"},{"sha":"8573ed9f6c7f1f3c5fbcd000ea6f63df2582a5c9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConnInstanceTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -25,7 +25,6 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n-import java.util.UUID;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -56,7 +55,7 @@ public void deleteCascade() {\n \n         connInstanceDAO.delete(connInstance.getKey());\n \n-        connInstanceDAO.flush();\n+        entityManager().flush();\n \n         ConnInstance actual = connInstanceDAO.find(\"fcf9f2b0-f7d6-42c9-84a6-61b28255a42b\");\n         assertNull(actual);"},{"sha":"12451db4f448265d3a7f5e2509a35e370f646754","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/DynRealmTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FDynRealmTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -63,7 +63,7 @@ public void misc() {\n         memb.setDynRealm(dynRealm);\n         memb.setAnyType(anyTypeDAO.findUser());\n         memb.setFIQLCond(\"cool==true\");\n-        \n+\n         dynRealm.add(memb);\n         memb.setDynRealm(dynRealm);\n \n@@ -79,7 +79,7 @@ public void misc() {\n         DynRealm actual = dynRealmDAO.saveAndRefreshDynMemberships(dynRealm);\n         assertNotNull(actual);\n \n-        dynRealmDAO.flush();\n+        entityManager().flush();\n \n         DynRealmCond dynRealmCond = new DynRealmCond();\n         dynRealmCond.setDynRealm(actual.getKey());"},{"sha":"c25aead6a20f62060d9fbafad6af5a934d1de2cc","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -135,7 +135,7 @@ public void create() {\n \n         groupDAO.save(group);\n \n-        groupDAO.flush();\n+        entityManager().flush();\n \n         group = groupDAO.findByName(\"new\");\n         assertNotNull(group);\n@@ -150,14 +150,14 @@ public void createWithInternationalCharacters() {\n         group.setRealm(realmDAO.findByFullPath(SyncopeConstants.ROOT_REALM));\n \n         groupDAO.save(group);\n-        groupDAO.flush();\n+        entityManager().flush();\n     }\n \n     @Test\n     public void delete() {\n         groupDAO.delete(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\");\n \n-        groupDAO.flush();\n+        entityManager().flush();\n \n         assertNull(groupDAO.find(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\"));\n         assertEquals(userDAO.findAllGroups(userDAO.findByUsername(\"verdi\")).size(), 2);\n@@ -223,7 +223,7 @@ public void udynMembership() {\n         Group actual = groupDAO.saveAndRefreshDynMemberships(group);\n         assertNotNull(actual);\n \n-        groupDAO.flush();\n+        entityManager().flush();\n \n         // 2. verify that dynamic membership is there\n         actual = groupDAO.find(actual.getKey());\n@@ -247,7 +247,7 @@ public void udynMembership() {\n         // 4. delete the new user and verify that dynamic membership was updated\n         userDAO.delete(newUserKey);\n \n-        userDAO.flush();\n+        entityManager().flush();\n \n         actual = groupDAO.find(actual.getKey());\n         members = groupDAO.findUDynMembers(actual);\n@@ -259,7 +259,7 @@ public void udynMembership() {\n \n         groupDAO.delete(actual);\n \n-        groupDAO.flush();\n+        entityManager().flush();\n \n         assertNull(entityManager().find(JPAUDynGroupMembership.class, dynMembershipKey));\n \n@@ -325,7 +325,7 @@ public void adynMembership() {\n         Group actual = groupDAO.saveAndRefreshDynMemberships(group);\n         assertNotNull(actual);\n \n-        groupDAO.flush();\n+        entityManager().flush();\n \n         // 2. verify that dynamic membership is there\n         actual = groupDAO.find(actual.getKey());\n@@ -351,7 +351,7 @@ public void adynMembership() {\n         // 4. delete the new any object and verify that dynamic membership was updated\n         anyObjectDAO.delete(newAnyObjectKey);\n \n-        anyObjectDAO.flush();\n+        entityManager().flush();\n \n         actual = groupDAO.find(actual.getKey());\n         members = groupDAO.findADynMembers(actual).stream().filter(object\n@@ -364,12 +364,11 @@ public void adynMembership() {\n \n         groupDAO.delete(actual);\n \n-        groupDAO.flush();\n+        entityManager().flush();\n \n         assertNull(entityManager().find(JPAADynGroupMembership.class, dynMembershipKey));\n \n         dynGroupMemberships = findDynGroups(anyObject);\n         assertTrue(dynGroupMemberships.isEmpty());\n     }\n-\n }"},{"sha":"4dcb57cd7aab0747f7fc797da6a85121a898f70b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainAttrTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -48,7 +48,7 @@ public class PlainAttrTest extends AbstractTest {\n     public void deleteAttr() {\n         plainAttrDAO.delete(findPlainAttr(\"35f407a2-d254-4890-9e45-5a7dd8c8df7d\", UPlainAttr.class));\n \n-        plainAttrDAO.flush();\n+        entityManager().flush();\n \n         assertNull(findPlainAttr(\"35f407a2-d254-4890-9e45-5a7dd8c8df7d\", UPlainAttr.class));\n         assertNull(findPlainAttrValue(\"0c67225a-030a-4c56-b337-17cf7a311f0f\", UPlainAttrValue.class));\n@@ -66,7 +66,7 @@ public void deleteAllAttValues() {\n \n         // by removing all values, the related attribute is not valid any more\n         try {\n-            plainAttrValueDAO.flush();\n+            entityManager().flush();\n             fail();\n         } catch (InvalidEntityException e) {\n             assertNotNull(e);"},{"sha":"e84f882ab5d0c313389d9db6b2228a296a61a210","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -103,7 +103,7 @@ public void checkIdUniqueness() {\n         plainSchemaDAO.save(schema);\n \n         try {\n-            plainSchemaDAO.flush();\n+            entityManager().flush();\n             fail(\"This should not happen\");\n         } catch (Exception e) {\n             assertTrue(e instanceof EntityExistsException || e.getCause() instanceof EntityExistsException);\n@@ -146,7 +146,7 @@ public void deleteFullname() {\n         // delete user schema fullname\n         plainSchemaDAO.delete(\"fullname\");\n \n-        plainSchemaDAO.flush();\n+        entityManager().flush();\n \n         // check for schema deletion\n         schema = plainSchemaDAO.find(\"fullname\");\n@@ -205,7 +205,7 @@ public void deleteSurname() {\n         // delete user schema fullname\n         plainSchemaDAO.delete(\"surname\");\n \n-        plainSchemaDAO.flush();\n+        entityManager().flush();\n \n         // check for schema deletion\n         schema = plainSchemaDAO.find(\"surname\");\n@@ -224,7 +224,7 @@ public void deleteFirstname() {\n         plainSchemaDAO.delete(\"firstname\");\n         assertNull(plainSchemaDAO.find(\"firstname\"));\n \n-        plainSchemaDAO.flush();\n+        entityManager().flush();\n \n         assertEquals(5, resourceDAO.find(\"resource-db-pull\").\n                 getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size());"},{"sha":"3184e57aa01e76b08c90fe55781a6f79bcfb677a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RealmTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -63,7 +63,7 @@ public void test() {\n \n         realmDAO.delete(realm);\n \n-        realmDAO.flush();\n+        entityManager().flush();\n \n         role = roleDAO.find(\"User reviewer\");\n         assertEquals(beforeSize - 1, role.getRealms().size());"},{"sha":"76ae60f56813b052aac5a1baa8673025729eff4b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ReportTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -73,7 +73,7 @@ public void saveWithExistingName() {\n             report.setTemplate(reportTemplateDAO.find(\"sample\"));\n \n             reportDAO.save(report);\n-            reportDAO.flush();\n+            entityManager().flush();\n         });\n     }\n \n@@ -92,7 +92,7 @@ public void save() {\n         report.add(reportExec);\n         reportDAO.save(report);\n \n-        reportDAO.flush();\n+        entityManager().flush();\n \n         report = reportDAO.find(\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\");\n         assertNotNull(report);\n@@ -103,7 +103,7 @@ public void save() {\n     public void deleteReport() {\n         reportDAO.delete(\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\");\n \n-        reportDAO.flush();\n+        entityManager().flush();\n \n         assertNull(reportDAO.find(\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\"));\n         assertNull(reportExecDAO.find(\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\"));\n@@ -116,7 +116,7 @@ public void deleteReportExecution() {\n \n         reportExecDAO.delete(\"c13f39c5-0d35-4bff-ba79-3cd5de940369\");\n \n-        reportExecDAO.flush();\n+        entityManager().flush();\n \n         assertNull(reportExecDAO.find(\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\"));\n "},{"sha":"8689dddadcd5d656dafa6370c413bc22dddb17b3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceHistoryConfTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceHistoryConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceHistoryConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceHistoryConfTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -58,15 +58,15 @@ public void createDelete() {\n         ldapHistory = resourceHistoryConfDAO.save(ldapHistory);\n         assertNotNull(ldapHistory.getKey());\n \n-        resourceHistoryConfDAO.flush();\n+        entityManager().flush();\n \n         List<ExternalResourceHistoryConf> history = resourceHistoryConfDAO.findByEntity(ldapResource);\n         assertEquals(1, history.size());\n         assertEquals(ldapHistory, history.get(0));\n \n         resourceHistoryConfDAO.delete(ldapHistory.getKey());\n \n-        resourceHistoryConfDAO.flush();\n+        entityManager().flush();\n \n         assertNull(resourceHistoryConfDAO.find(ldapHistory.getKey()));\n         assertTrue(resourceHistoryConfDAO.findByEntity(ldapResource).isEmpty());"},{"sha":"559a0419159dfa01e5411f83707beccf378a4842","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -157,7 +157,7 @@ public void save() {\n         assertNotNull(actual);\n         assertNotNull(actual.getProvision(anyTypeDAO.findUser()).get().getMapping());\n \n-        resourceDAO.flush();\n+        entityManager().flush();\n         resourceDAO.detach(actual);\n         connInstanceDAO.detach(connector);\n \n@@ -167,7 +167,7 @@ public void save() {\n \n         user.add(actual);\n \n-        resourceDAO.flush();\n+        entityManager().flush();\n \n         // retrieve resource\n         resource = resourceDAO.find(actual.getKey());\n@@ -224,7 +224,7 @@ public void delete() {\n         resourceDAO.delete(resource.getKey());\n \n         // close the transaction\n-        resourceDAO.flush();\n+        entityManager().flush();\n \n         // resource must be removed\n         ExternalResource actual = resourceDAO.find(\"resource-testdb\");\n@@ -272,7 +272,7 @@ public void emptyMapping() {\n         ldap.getProvisions().remove(groupProvision);\n \n         resourceDAO.save(ldap);\n-        resourceDAO.flush();\n+        entityManager().flush();\n \n         itemKeys.forEach(itemKey -> assertNull(entityManager().find(JPAMappingItem.class, itemKey)));\n     }\n@@ -290,7 +290,7 @@ public void updateRemoveOrgUnit() {\n         resource.setOrgUnit(null);\n \n         resourceDAO.save(resource);\n-        resourceDAO.flush();\n+        entityManager().flush();\n \n         resource = resourceDAO.find(\"resource-ldap-orgunit\");\n         assertNull(resource.getOrgUnit());\n@@ -312,7 +312,7 @@ public void issue243() {\n         csv.getProvision(anyTypeDAO.findUser()).get().getMapping().add(newMapItem);\n \n         resourceDAO.save(csv);\n-        resourceDAO.flush();\n+        entityManager().flush();\n \n         csv = resourceDAO.find(\"resource-csv\");\n         assertNotNull(csv);"},{"sha":"5c21a768fa77715b13ce0e9de48cb015875c73f0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -124,7 +124,7 @@ public void dynMembership() {\n         Role actual = roleDAO.saveAndRefreshDynMemberships(role);\n         assertNotNull(actual);\n \n-        roleDAO.flush();\n+        entityManager().flush();\n \n         // 2. verify that dynamic membership is there\n         actual = roleDAO.find(actual.getKey());\n@@ -149,7 +149,7 @@ public void dynMembership() {\n         // 4. delete the new user and verify that dynamic membership was updated\n         userDAO.delete(newUserKey);\n \n-        userDAO.flush();\n+        entityManager().flush();\n \n         actual = roleDAO.find(actual.getKey());\n         members = roleDAO.findDynMembers(actual);\n@@ -161,7 +161,7 @@ public void dynMembership() {\n \n         roleDAO.delete(actual);\n \n-        roleDAO.flush();\n+        entityManager().flush();\n \n         assertNull(entityManager().find(JPADynRoleMembership.class, dynMembershipKey));\n \n@@ -194,7 +194,7 @@ public void delete() {\n         // 2. remove role\n         roleDAO.delete(role);\n \n-        userDAO.flush();\n+        entityManager().flush();\n \n         // 3. verify that role was removed from user\n         user = userDAO.find(user.getKey());"},{"sha":"2c03942ab72d297bb72cb979dbffc3f1caeb4b69","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/SecurityQuestionTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FSecurityQuestionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FSecurityQuestionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FSecurityQuestionTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -47,11 +47,11 @@ public void test() {\n         user.setSecurityAnswer(\"Rossi\");\n         userDAO.save(user);\n \n-        userDAO.flush();\n+        entityManager().flush();\n \n         securityQuestionDAO.delete(\"887028ea-66fc-41e7-b397-620d7ea6dfbb\");\n \n-        userDAO.flush();\n+        entityManager().flush();\n \n         user = userDAO.findByUsername(\"bellini\");\n "},{"sha":"67857462e7e11b9bfb2144ffb1ee829c64e594cc","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -133,7 +133,7 @@ public void save() {\n         PropagationTask actual = taskDAO.find(task.getKey());\n         assertEquals(task, actual);\n \n-        taskDAO.flush();\n+        entityManager().flush();\n \n         resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertTrue(taskDAO.findAll(\n@@ -155,7 +155,7 @@ public void addPropagationTaskExecution() {\n         task.add(execution);\n \n         taskDAO.save(task);\n-        taskDAO.flush();\n+        entityManager().flush();\n \n         task = taskDAO.find(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\");\n         assertNotNull(task);\n@@ -178,7 +178,7 @@ public void addPullTaskExecution() {\n         task.add(execution);\n \n         taskDAO.save(task);\n-        taskDAO.flush();\n+        entityManager().flush();\n \n         task = taskDAO.find(\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\");\n         assertNotNull(task);\n@@ -201,7 +201,7 @@ public void addPushTaskExecution() {\n         task.add(execution);\n \n         taskDAO.save(task);\n-        taskDAO.flush();\n+        entityManager().flush();\n \n         task = taskDAO.find(\"af558be4-9d2f-4359-bf85-a554e6e90be1\");\n         assertNotNull(task);\n@@ -213,7 +213,7 @@ public void addPushTaskExecution() {\n     public void deleteTask() {\n         taskDAO.delete(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\");\n \n-        taskDAO.flush();\n+        entityManager().flush();\n \n         assertNull(taskDAO.find(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\"));\n         assertNull(taskExecDAO.find(\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\"));\n@@ -226,7 +226,7 @@ public void deleteTaskExecution() {\n \n         taskExecDAO.delete(\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\");\n \n-        taskExecDAO.flush();\n+        entityManager().flush();\n \n         assertNull(taskExecDAO.find(\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\"));\n "},{"sha":"46c2444ea1aff97c1ef09b0b95d1747d520ea5b4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":25,"deletions":16,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -75,7 +75,7 @@ public void delete() {\n \n         userDAO.delete(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n \n-        userDAO.flush();\n+        entityManager().flush();\n \n         assertNull(userDAO.findByUsername(\"bellini\"));\n         assertNull(findPlainAttr(UUID.randomUUID().toString(), UPlainAttr.class));\n@@ -104,7 +104,7 @@ public void ships() {\n \n         userDAO.save(user);\n \n-        userDAO.flush();\n+        entityManager().flush();\n \n         user = userDAO.findByUsername(\"bellini\");\n         assertEquals(1, user.getMemberships().size());\n@@ -126,7 +126,7 @@ public void ships() {\n \n         userDAO.save(user);\n \n-        userDAO.flush();\n+        entityManager().flush();\n \n         user = userDAO.findByUsername(\"bellini\");\n         assertEquals(1, user.getRelationships().size());\n@@ -136,10 +136,10 @@ public void ships() {\n     }\n \n     @Test\n-    public void membershipWithAttrs() {\n+    public void membershipWithAttrNotAllowed() {\n         User user = userDAO.findByUsername(\"vivaldi\");\n         assertNotNull(user);\n-        assertTrue(user.getMemberships().isEmpty());\n+        user.getMemberships().clear();\n \n         // add 'obscure' to user (no membership): works because 'obscure' is from 'other', default class for USER\n         UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n@@ -168,15 +168,24 @@ public void membershipWithAttrs() {\n         } catch (InvalidEntityException e) {\n             assertNotNull(e);\n         }\n+        entityManager().flush();\n+    }\n \n-        // replace 'artDirector' with 'additional', which defines type extension with class 'other' and 'csv':\n-        // now it works\n-        membership = user.getMembership(groupDAO.findByName(\"artDirector\").getKey()).get();\n-        user.remove(user.getPlainAttr(\"obscure\", membership).get());\n-        user.getMemberships().remove(membership);\n-        membership.setLeftEnd(null);\n+    @Test\n+    public void membershipWithAttr() {\n+        User user = userDAO.findByUsername(\"vivaldi\");\n+        assertNotNull(user);\n+        user.getMemberships().clear();\n \n-        membership = entityFactory.newEntity(UMembership.class);\n+        // add 'obscure' (no membership): works because 'obscure' is from 'other', default class for USER\n+        UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n+        attr.setOwner(user);\n+        attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n+        attr.add(\"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        user.add(attr);\n+\n+        // add 'obscure' (via 'additional' membership): that group defines type extension with classes 'other' and 'csv'\n+        UMembership membership = entityFactory.newEntity(UMembership.class);\n         membership.setLeftEnd(user);\n         membership.setRightEnd(groupDAO.findByName(\"additional\"));\n         user.add(membership);\n@@ -189,7 +198,7 @@ public void membershipWithAttrs() {\n         user.add(attr);\n \n         userDAO.save(user);\n-        userDAO.flush();\n+        entityManager().flush();\n \n         user = userDAO.findByUsername(\"vivaldi\");\n         assertEquals(1, user.getMemberships().size());\n@@ -215,15 +224,15 @@ public void issueSYNCOPE800() {\n         prefix.setExpression(\"'k' + firstname\");\n \n         derSchemaDAO.save(prefix);\n-        derSchemaDAO.flush();\n+        entityManager().flush();\n \n         // create derived attribute (literal as suffix)\n         DerSchema suffix = entityFactory.newEntity(DerSchema.class);\n         suffix.setKey(\"ksuffix\");\n         suffix.setExpression(\"firstname + 'k'\");\n \n         derSchemaDAO.save(suffix);\n-        derSchemaDAO.flush();\n+        entityManager().flush();\n \n         // add derived attributes to user\n         User owner = userDAO.findByUsername(\"vivaldi\");\n@@ -255,7 +264,7 @@ public void issueSYNCOPE1016() {\n \n         userDAO.save(user);\n \n-        userDAO.flush();\n+        entityManager().flush();\n \n         user = userDAO.findByUsername(\"rossini\");\n         Date afterwards = user.getLastChangeDate();"},{"sha":"b9e6f40b035c0a9c6ae8578e31ca13bc1584ddb8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/VirSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -59,7 +59,7 @@ public void deal() {\n         virSchema.setProvision(provision);\n \n         virSchemaDAO.save(virSchema);\n-        virSchemaDAO.flush();\n+        entityManager().flush();\n \n         virSchema = virSchemaDAO.find(\"vSchema\");\n         assertNotNull(virSchema);"},{"sha":"86472870b16e42d70431913dd774f157e932b8a6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -445,8 +445,6 @@ public TaskExec storeExec(final TaskExec execution) {\n         task.add(execution);\n         task.setExecuted(true);\n         taskDAO.save(task);\n-        // this flush call is needed to generate a value for the execution key\n-        taskDAO.flush();\n         return execution;\n     }\n "},{"sha":"7127fa01e70f2ddda32e3de06affb62894d34f01","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -500,8 +500,6 @@ public TaskExec execute(final PropagationTaskTO taskTO, final PropagationReporte\n                 task.add(execution);\n \n                 taskDAO.save(task);\n-                // needed to generate a value for the execution key\n-                taskDAO.flush();\n             }\n \n             if (reporter != null) {"},{"sha":"ad660e78b79abfa1c150dfd3a41543f38fd6b2ec","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/AbstractTest.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n+import javax.persistence.EntityManager;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n @SpringJUnitConfig(locations = {\n@@ -27,4 +31,15 @@\n     \"classpath:provisioningTest.xml\"\n })\n public abstract class AbstractTest {\n+\n+    protected EntityManager entityManager() {\n+        EntityManager entityManager = EntityManagerFactoryUtils.getTransactionalEntityManager(\n+                EntityManagerFactoryUtils.findEntityManagerFactory(\n+                        ApplicationContextProvider.getBeanFactory(), AuthContextUtils.getDomain()));\n+        if (entityManager == null) {\n+            throw new IllegalStateException(\"Could not find EntityManager for domain \" + AuthContextUtils.getDomain());\n+        }\n+\n+        return entityManager;\n+    }\n }"},{"sha":"4ebb03754c94f01ddb0ec73274c58c6a9483cc7a","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ResourceDataBinderTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ee88516e4f7ca69ac71751562fffaa17a04fdf/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java?ref=11ee88516e4f7ca69ac71751562fffaa17a04fdf","patch":"@@ -129,7 +129,7 @@ public void issue42() {\n         assertNotNull(resource.getProvision(anyTypeDAO.findUser()).get().getMapping());\n         assertEquals(1, resource.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems().size());\n \n-        resourceDAO.flush();\n+        entityManager().flush();\n \n         ExternalResource actual = resourceDAO.find(\"resource-issue42\");\n         assertNotNull(actual);"}]}