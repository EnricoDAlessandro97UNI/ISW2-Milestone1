{"sha":"c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","node_id":"C_kwDOJfYA1toAKGMxN2QxYTBhMTc5YTZiN2M2OTZiMzlmMWJmNDI5ZWNkYzE2NzI1YTM","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-11-18T14:59:50Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-11-18T14:59:50Z"},"message":"[SYNCOPE-1713] Adding after and before parameter to Audit, Task, Report and Remediation queries (#392)","tree":{"sha":"838afa042d22f13bf946bf69aa8a843bb8088a2c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/838afa042d22f13bf946bf69aa8a843bb8088a2c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjd53mCRBK7hj4Ov3rIwAADuwIAAkUwAPFqm6625SCjbUZKnEw\nb4lCuYUoN10p950Pc6qNf3aNngcE/UKgJlTbeGY8+AeCfh55YW2zoCRUTT+g1WjL\n7wseXJBVjzlq58nY4bvTbmsc4uWJYv9lk1rk8EExyLuKILerHdqosQLitSCQLoA1\n52ieqjS1licXcpJhdmQJ0CQqeg4CPmYMaQFUiDsGX8iTo22wuntB27mxc73Xl/0B\nO79W4kbwlHMHpUI4QrO3kpMB49rtmgAKjFUJsDavD3PNaIYL8g5/NQqqqgT/Bu2G\nBGSLG3IByxyE0o07zhSd3Znu4X5iURBCovybxxmW0dnsi48VlFhAag/fkheUmqU=\n=rBLg\n-----END PGP SIGNATURE-----\n","payload":"tree 838afa042d22f13bf946bf69aa8a843bb8088a2c\nparent 30f9c1ef1a806711569c8dc82ae706f3ed3b0c45\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1668783590 +0100\ncommitter GitHub <noreply@github.com> 1668783590 +0100\n\n[SYNCOPE-1713] Adding after and before parameter to Audit, Task, Report and Remediation queries (#392)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"30f9c1ef1a806711569c8dc82ae706f3ed3b0c45","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/30f9c1ef1a806711569c8dc82ae706f3ed3b0c45","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/30f9c1ef1a806711569c8dc82ae706f3ed3b0c45"}],"stats":{"total":814,"additions":447,"deletions":367},"files":[{"sha":"c189b2dd76ff3c3dae86e8d07443dfc8c38ebb2d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n-import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.syncope.common.rest.api.service.ReportTemplateService;\n@@ -112,14 +112,14 @@ public static Response exportExecutionResult(final String executionKey, final Re\n     public List<ExecTO> listExecutions(\n             final String taskKey, final int page, final int size, final SortParam<String> sort) {\n \n-        return getService(ReportService.class).listExecutions(new ExecListQuery.Builder().\n+        return getService(ReportService.class).listExecutions(new ExecQuery.Builder().\n                 key(taskKey).page(page).size(size).orderBy(toOrderBy(sort)).build()).getResult();\n     }\n \n     @Override\n     public int countExecutions(final String taskKey) {\n         return getService(ReportService.class).\n-                listExecutions(new ExecListQuery.Builder().key(taskKey).page(1).size(0).build()).getTotalCount();\n+                listExecutions(new ExecQuery.Builder().key(taskKey).page(1).size(0).build()).getTotalCount();\n     }\n \n     @Override"},{"sha":"97caaaba70ff78b712ae360e49b27fd159c36f97","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n-import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n@@ -90,7 +90,7 @@ public static int count(final AnyTypeKind anyTypeKind, final String entityKey, f\n     @Override\n     public int countExecutions(final String taskKey) {\n         return getService(TaskService.class).\n-                listExecutions(new ExecListQuery.Builder().key(taskKey).page(1).size(0).build()).getTotalCount();\n+                listExecutions(new ExecQuery.Builder().key(taskKey).page(1).size(0).build()).getTotalCount();\n     }\n \n     public static List<PropagationTaskTO> listPropagationTasks(\n@@ -176,7 +176,7 @@ public List<ExecTO> listExecutions(\n             final String taskKey, final int page, final int size, final SortParam<String> sort) {\n \n         return getService(TaskService.class).\n-                listExecutions(new ExecListQuery.Builder().key(taskKey).page(page).size(size).\n+                listExecutions(new ExecQuery.Builder().key(taskKey).page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).getResult();\n     }\n "},{"sha":"3e88e4e3d6280490942a3b651d767aba6f8891a7","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AbstractTimeframeQuery.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractTimeframeQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractTimeframeQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractTimeframeQuery.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import java.time.OffsetDateTime;\n+import javax.ws.rs.QueryParam;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+public abstract class AbstractTimeframeQuery extends AbstractQuery {\n+\n+    private static final long serialVersionUID = -6858655425207486223L;\n+\n+    protected abstract static class Builder<Q extends AbstractTimeframeQuery, B extends Builder<Q, B>>\n+            extends AbstractQuery.Builder<Q, B> {\n+\n+        @Override\n+        protected Q getInstance() {\n+            return super.getInstance();\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B before(final OffsetDateTime before) {\n+            getInstance().setBefore(before);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B after(final OffsetDateTime after) {\n+            getInstance().setAfter(after);\n+            return (B) this;\n+        }\n+    }\n+\n+    private OffsetDateTime before;\n+\n+    private OffsetDateTime after;\n+\n+    @Parameter(name = \"before\", in = ParameterIn.QUERY, schema =\n+            @Schema(implementation = OffsetDateTime.class))\n+    public OffsetDateTime getBefore() {\n+        return before;\n+    }\n+\n+    @QueryParam(\"before\")\n+    public void setBefore(final OffsetDateTime before) {\n+        this.before = before;\n+    }\n+\n+    @Parameter(name = \"after\", in = ParameterIn.QUERY, schema =\n+            @Schema(implementation = OffsetDateTime.class))\n+    public OffsetDateTime getAfter() {\n+        return after;\n+    }\n+\n+    @QueryParam(\"after\")\n+    public void setAfter(final OffsetDateTime after) {\n+        this.after = after;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        AbstractTimeframeQuery other = (AbstractTimeframeQuery) obj;\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n+                append(before, other.before).\n+                append(after, other.after).\n+                build();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(before).\n+                append(after).\n+                build();\n+    }\n+}"},{"sha":"e7e8ce3bbd1dbcc8a50a6a6b1049175925cc9514","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AccessTokenQuery.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAccessTokenQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAccessTokenQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAccessTokenQuery.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -29,5 +29,4 @@ protected AccessTokenQuery newInstance() {\n             return new AccessTokenQuery();\n         }\n     }\n-\n }"},{"sha":"bb0852c8833781ad5d817fd85dc7b89a64a25505","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AuditQuery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -27,11 +27,11 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n-public class AuditQuery extends AbstractQuery {\n+public class AuditQuery extends AbstractTimeframeQuery {\n \n     private static final long serialVersionUID = -2863334226169614417L;\n \n-    public static class Builder extends AbstractQuery.Builder<AuditQuery, Builder> {\n+    public static class Builder extends AbstractTimeframeQuery.Builder<AuditQuery, Builder> {\n \n         @Override\n         protected AuditQuery newInstance() {"},{"sha":"a3e6f0eef5dd139d9d96594e8f0789595221035d","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecDeleteQuery.java","status":"removed","additions":0,"deletions":120,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/30f9c1ef1a806711569c8dc82ae706f3ed3b0c45/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecDeleteQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/30f9c1ef1a806711569c8dc82ae706f3ed3b0c45/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecDeleteQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecDeleteQuery.java?ref=30f9c1ef1a806711569c8dc82ae706f3ed3b0c45","patch":"@@ -1,120 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.beans;\n-\n-import java.io.Serializable;\n-import java.time.OffsetDateTime;\n-import javax.validation.constraints.NotNull;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.QueryParam;\n-\n-public class ExecDeleteQuery implements Serializable {\n-\n-    private static final long serialVersionUID = 3846547401120638351L;\n-\n-    public static class Builder {\n-\n-        private final ExecDeleteQuery instance = new ExecDeleteQuery();\n-\n-        public Builder key(final String key) {\n-            instance.setKey(key);\n-            return this;\n-        }\n-\n-        public Builder startedBefore(final OffsetDateTime date) {\n-            instance.setStartedBefore(date);\n-            return this;\n-        }\n-\n-        public Builder startedAfter(final OffsetDateTime date) {\n-            instance.setStartedAfter(date);\n-            return this;\n-        }\n-\n-        public Builder endedBefore(final OffsetDateTime date) {\n-            instance.setEndedBefore(date);\n-            return this;\n-        }\n-\n-        public Builder endedAfter(final OffsetDateTime date) {\n-            instance.setEndedAfter(date);\n-            return this;\n-        }\n-\n-        public ExecDeleteQuery build() {\n-            return instance;\n-        }\n-    }\n-\n-    private String key;\n-\n-    private OffsetDateTime startedBefore;\n-\n-    private OffsetDateTime startedAfter;\n-\n-    private OffsetDateTime endedBefore;\n-\n-    private OffsetDateTime endedAfter;\n-\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    @NotNull\n-    @PathParam(\"key\")\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n-    public OffsetDateTime getStartedBefore() {\n-        return startedBefore;\n-    }\n-\n-    @QueryParam(\"startedBefore\")\n-    public void setStartedBefore(final OffsetDateTime startedBefore) {\n-        this.startedBefore = startedBefore;\n-    }\n-\n-    public OffsetDateTime getStartedAfter() {\n-        return startedAfter;\n-    }\n-\n-    @QueryParam(\"startedAfter\")\n-    public void setStartedAfter(final OffsetDateTime startedAfter) {\n-        this.startedAfter = startedAfter;\n-    }\n-\n-    public OffsetDateTime getEndedBefore() {\n-        return endedBefore;\n-    }\n-\n-    @QueryParam(\"endedBefore\")\n-    public void setEndedBefore(final OffsetDateTime endedBefore) {\n-        this.endedBefore = endedBefore;\n-    }\n-\n-    public OffsetDateTime getEndedAfter() {\n-        return endedAfter;\n-    }\n-\n-    @QueryParam(\"endedAfter\")\n-    public void setEndedAfter(final OffsetDateTime endedAfter) {\n-        this.endedAfter = endedAfter;\n-    }\n-}"},{"sha":"abf444541d2bd2a2439eaf7136f7e49660416bd7","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecQuery.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecQuery.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -23,15 +23,15 @@\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-public class ExecListQuery extends AbstractQuery {\n+public class ExecQuery extends AbstractTimeframeQuery {\n \n     private static final long serialVersionUID = -8792519310029596796L;\n \n-    public static class Builder extends AbstractQuery.Builder<ExecListQuery, Builder> {\n+    public static class Builder extends AbstractTimeframeQuery.Builder<ExecQuery, Builder> {\n \n         @Override\n-        protected ExecListQuery newInstance() {\n-            return new ExecListQuery();\n+        protected ExecQuery newInstance() {\n+            return new ExecQuery();\n         }\n \n         public Builder key(final String key) {\n@@ -63,7 +63,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        ExecListQuery other = (ExecListQuery) obj;\n+        ExecQuery other = (ExecQuery) obj;\n         return new EqualsBuilder().\n                 appendSuper(super.equals(obj)).\n                 append(key, other.key).","previous_filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecListQuery.java"},{"sha":"d237c49c9fccd79c148df0a803f13141c9502d26","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/RemediationQuery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FRemediationQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FRemediationQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FRemediationQuery.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n-public class RemediationQuery extends AbstractQuery {\n+public class RemediationQuery extends AbstractTimeframeQuery {\n \n     private static final long serialVersionUID = 4000880445378096031L;\n \n-    public static class Builder extends AbstractQuery.Builder<RemediationQuery, Builder> {\n+    public static class Builder extends AbstractTimeframeQuery.Builder<RemediationQuery, Builder> {\n \n         @Override\n         protected RemediationQuery newInstance() {"},{"sha":"7deec908cb3a508d2804ad2a1c4beb3407e5faba","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -39,8 +39,7 @@\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.ExecDeleteQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n \n public interface ExecutableService extends JAXRSService {\n@@ -54,7 +53,7 @@ public interface ExecutableService extends JAXRSService {\n     @GET\n     @Path(\"{key}/executions\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    PagedResult<ExecTO> listExecutions(@BeanParam ExecListQuery query);\n+    PagedResult<ExecTO> listExecutions(@BeanParam ExecQuery query);\n \n     /**\n      * Returns the list of recently completed executions, ordered by end date descendent.\n@@ -91,7 +90,7 @@ public interface ExecutableService extends JAXRSService {\n                     description = \"Batch results available, returned as Response entity\"))\n     @Path(\"{key}/executions\")\n     @Produces(RESTHeaders.MULTIPART_MIXED)\n-    Response deleteExecutions(@BeanParam ExecDeleteQuery query);\n+    Response deleteExecutions(@BeanParam ExecQuery query);\n \n     /**\n      * Executes the executable matching the given specs."},{"sha":"e366c1f03144ef7a58047f58034b28e61045055e","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/RemediationLogic.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -73,13 +74,15 @@ public RemediationLogic(\n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public Pair<Integer, List<RemediationTO>> list(\n+            final OffsetDateTime before,\n+            final OffsetDateTime after,\n             final int page,\n             final int size,\n             final List<OrderByClause> orderByClauses) {\n \n         int count = remediationDAO.count();\n \n-        List<RemediationTO> result = remediationDAO.findAll(page, size, orderByClauses).stream().\n+        List<RemediationTO> result = remediationDAO.findAll(before, after, page, size, orderByClauses).stream().\n                 map(binder::getRemediationTO).collect(Collectors.toList());\n \n         return Pair.of(count, result);"},{"sha":"971ac896f80222bc21f82a009576ad20a24e8836","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RemediationServiceImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -63,7 +63,11 @@ public RemediationServiceImpl(\n     @Override\n     public PagedResult<RemediationTO> list(final RemediationQuery query) {\n         Pair<Integer, List<RemediationTO>> result = logic.list(\n-                query.getPage(), query.getSize(), getOrderByClauses(query.getOrderBy()));\n+                query.getBefore(),\n+                query.getAfter(),\n+                query.getPage(),\n+                query.getSize(),\n+                getOrderByClauses(query.getOrderBy()));\n         return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());\n     }\n "},{"sha":"7f323c0704d89fcb48901c8225e0c6a857270051","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractExecutableLogic.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -44,18 +44,21 @@ public AbstractExecutableLogic(\n     public abstract ExecTO execute(String key, OffsetDateTime startAt, boolean dryRun);\n \n     public abstract Pair<Integer, List<ExecTO>> listExecutions(\n-            String key, int page, int size, List<OrderByClause> orderByClauses);\n+            String key,\n+            OffsetDateTime before,\n+            OffsetDateTime after,\n+            int page,\n+            int size,\n+            List<OrderByClause> orderByClauses);\n \n     public abstract List<ExecTO> listRecentExecutions(int max);\n \n     public abstract ExecTO deleteExecution(String executionKey);\n \n     public abstract List<BatchResponseItem> deleteExecutions(\n             String key,\n-            OffsetDateTime startedBefore,\n-            OffsetDateTime startedAfter,\n-            OffsetDateTime endedBefore,\n-            OffsetDateTime endedAfter);\n+            OffsetDateTime before,\n+            OffsetDateTime after);\n \n     public abstract JobTO getJob(String key);\n "},{"sha":"98794a55bc25c92bba3198064da06e7d43b1a3dd","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AuditLogic.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n@@ -272,11 +273,13 @@ public Pair<Integer, List<AuditEntry>> search(\n             final String subcategory,\n             final List<String> events,\n             final AuditElements.Result result,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after,\n             final List<OrderByClause> orderBy) {\n \n-        int count = auditConfDAO.countEntries(entityKey, type, category, subcategory, events, result);\n+        int count = auditConfDAO.countEntries(entityKey, type, category, subcategory, events, result, before, after);\n         List<AuditEntry> matching = auditConfDAO.searchEntries(\n-                entityKey, page, size, type, category, subcategory, events, result, orderBy);\n+                entityKey, page, size, type, category, subcategory, events, result, before, after, orderBy);\n         return Pair.of(count, matching);\n     }\n "},{"sha":"6d97d0abe5e20dcff4fb77ce936990e93ef20507","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -275,7 +275,7 @@ public void exportExecutionResult(\n \n         // streaming SAX handler from a compressed byte array stream\n         try (ByteArrayInputStream bais = new ByteArrayInputStream(reportExec.getExecResult());\n-                ZipInputStream zis = new ZipInputStream(bais)) {\n+             ZipInputStream zis = new ZipInputStream(bais)) {\n \n             // a single ZipEntry in the ZipInputStream (see ReportJob)\n             zis.getNextEntry();\n@@ -348,16 +348,19 @@ public ReportTO delete(final String key) {\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_READ + \"')\")\n     @Override\n     public Pair<Integer, List<ExecTO>> listExecutions(\n-            final String key, final int page, final int size, final List<OrderByClause> orderByClauses) {\n+            final String key,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after,\n+            final int page,\n+            final int size,\n+            final List<OrderByClause> orderByClauses) {\n \n-        Report report = reportDAO.find(key);\n-        if (report == null) {\n-            throw new NotFoundException(\"Report \" + key);\n-        }\n+        Report report = Optional.ofNullable(reportDAO.find(key)).\n+                orElseThrow(() -> new NotFoundException(\"Report \" + key));\n \n-        Integer count = reportExecDAO.count(key);\n+        Integer count = reportExecDAO.count(report, before, after);\n \n-        List<ExecTO> result = reportExecDAO.findAll(report, page, size, orderByClauses).stream().\n+        List<ExecTO> result = reportExecDAO.findAll(report, before, after, page, size, orderByClauses).stream().\n                 map(reportExec -> binder.getExecTO(reportExec)).collect(Collectors.toList());\n \n         return Pair.of(count, result);\n@@ -387,19 +390,15 @@ public ExecTO deleteExecution(final String executionKey) {\n     @Override\n     public List<BatchResponseItem> deleteExecutions(\n             final String key,\n-            final OffsetDateTime startedBefore,\n-            final OffsetDateTime startedAfter,\n-            final OffsetDateTime endedBefore,\n-            final OffsetDateTime endedAfter) {\n+            final OffsetDateTime before,\n+            final OffsetDateTime after) {\n \n-        Report report = reportDAO.find(key);\n-        if (report == null) {\n-            throw new NotFoundException(\"Report \" + key);\n-        }\n+        Report report = Optional.ofNullable(reportDAO.find(key)).\n+                orElseThrow(() -> new NotFoundException(\"Report \" + key));\n \n         List<BatchResponseItem> batchResponseItems = new ArrayList<>();\n \n-        reportExecDAO.findAll(report, startedBefore, startedAfter, endedBefore, endedAfter).forEach(exec -> {\n+        reportExecDAO.findAll(report, before, after, -1, -1, List.of()).forEach(exec -> {\n             BatchResponseItem item = new BatchResponseItem();\n             item.getHeaders().put(RESTHeaders.RESOURCE_KEY, List.of(exec.getKey()));\n             batchResponseItems.add(item);"},{"sha":"df4838b74510b0006d9f6df4c9fbb720e0ee816e","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -410,17 +410,22 @@ public <T extends TaskTO> T delete(final TaskType type, final String key) {\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_READ + \"')\")\n     @Override\n     public Pair<Integer, List<ExecTO>> listExecutions(\n-            final String key, final int page, final int size, final List<OrderByClause> orderByClauses) {\n+            final String key,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after,\n+            final int page,\n+            final int size,\n+            final List<OrderByClause> orderByClauses) {\n \n         Task<?> task = taskDAO.find(key).orElseThrow(() -> new NotFoundException(\"Task \" + key));\n \n         if (task instanceof MacroTask) {\n             securityChecks(IdRepoEntitlement.TASK_READ, ((MacroTask) task).getRealm().getFullPath());\n         }\n \n-        Integer count = taskExecDAO.count(task);\n+        Integer count = taskExecDAO.count(task, before, after);\n \n-        List<ExecTO> result = taskExecDAO.findAll(task, page, size, orderByClauses).stream().\n+        List<ExecTO> result = taskExecDAO.findAll(task, before, after, page, size, orderByClauses).stream().\n                 map(exec -> binder.getExecTO(exec)).collect(Collectors.toList());\n \n         return Pair.of(count, result);\n@@ -466,16 +471,14 @@ public ExecTO deleteExecution(final String execKey) {\n     @Override\n     public List<BatchResponseItem> deleteExecutions(\n             final String key,\n-            final OffsetDateTime startedBefore,\n-            final OffsetDateTime startedAfter,\n-            final OffsetDateTime endedBefore,\n-            final OffsetDateTime endedAfter) {\n+            final OffsetDateTime before,\n+            final OffsetDateTime after) {\n \n         Task<?> task = taskDAO.find(key).orElseThrow(() -> new NotFoundException(\"Task \" + key));\n \n         List<BatchResponseItem> batchResponseItems = new ArrayList<>();\n \n-        taskExecDAO.findAll(task, startedBefore, startedAfter, endedBefore, endedAfter).forEach(exec -> {\n+        taskExecDAO.findAll(task, before, after, -1, -1, List.of()).forEach(exec -> {\n             BatchResponseItem item = new BatchResponseItem();\n             item.getHeaders().put(RESTHeaders.RESOURCE_KEY, List.of(exec.getKey()));\n             batchResponseItems.add(item);"},{"sha":"03e059b61e12398aa5eb5b9d0fca7bc63c0cb076","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -28,8 +28,7 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.batch.BatchPayloadGenerator;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n-import org.apache.syncope.common.rest.api.beans.ExecDeleteQuery;\n-import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.common.rest.api.service.ExecutableService;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n@@ -41,9 +40,11 @@ public abstract class AbstractExecutableService extends AbstractService implemen\n     protected abstract AbstractExecutableLogic<?> getExecutableLogic();\n \n     @Override\n-    public PagedResult<ExecTO> listExecutions(final ExecListQuery query) {\n+    public PagedResult<ExecTO> listExecutions(final ExecQuery query) {\n         Pair<Integer, List<ExecTO>> result = getExecutableLogic().listExecutions(\n                 query.getKey(),\n+                query.getBefore(),\n+                query.getAfter(),\n                 query.getPage(),\n                 query.getSize(),\n                 getOrderByClauses(query.getOrderBy()));\n@@ -61,13 +62,11 @@ public void deleteExecution(final String executionKey) {\n     }\n \n     @Override\n-    public Response deleteExecutions(final ExecDeleteQuery query) {\n+    public Response deleteExecutions(final ExecQuery query) {\n         List<BatchResponseItem> batchResponseItems = getExecutableLogic().deleteExecutions(\n                 query.getKey(),\n-                query.getStartedBefore(),\n-                query.getStartedAfter(),\n-                query.getEndedBefore(),\n-                query.getEndedAfter());\n+                query.getBefore(),\n+                query.getAfter());\n \n         String boundary = \"deleteExecutions_\" + SecureRandomUtils.generateRandomUUID().toString();\n         return Response.ok(BatchPayloadGenerator.generate("},{"sha":"70adf9cd7837bafea3db73f9fab273d4c97000a0","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AuditServiceImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -79,6 +79,8 @@ public PagedResult<AuditEntry> search(final AuditQuery auditQuery) {\n                 auditQuery.getSubcategory(),\n                 auditQuery.getEvents(),\n                 auditQuery.getResult(),\n+                auditQuery.getBefore(),\n+                auditQuery.getAfter(),\n                 getOrderByClauses(auditQuery.getOrderBy()));\n \n         return buildPagedResult(result.getRight(), auditQuery.getPage(), auditQuery.getSize(), result.getLeft());"},{"sha":"9e569e71feab0dfb2b49667def424dce64982650","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AuditConfDAO.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditConfDAO.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.time.OffsetDateTime;\n import java.util.List;\n import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.types.AuditElements;\n@@ -30,6 +31,8 @@ public interface AuditConfDAO extends DAO<AuditConf> {\n \n     String AUDIT_ENTRY_MESSAGE_COLUMN = \"MESSAGE\";\n \n+    String AUDIT_ENTRY_EVENT_DATE_COLUMN = \"EVENT_DATE\";\n+\n     AuditConf find(String key);\n \n     List<AuditConf> findAll();\n@@ -44,7 +47,9 @@ int countEntries(\n             String category,\n             String subcategory,\n             List<String> events,\n-            AuditElements.Result result);\n+            AuditElements.Result result,\n+            OffsetDateTime before,\n+            OffsetDateTime after);\n \n     List<AuditEntry> searchEntries(\n             String entityKey,\n@@ -55,5 +60,7 @@ List<AuditEntry> searchEntries(\n             String subcategory,\n             List<String> events,\n             AuditElements.Result result,\n+            OffsetDateTime before,\n+            OffsetDateTime after,\n             List<OrderByClause> orderBy);\n }"},{"sha":"62cefea481c645e71e0029c8a82cbb1f2ace8946","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RemediationDAO.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRemediationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRemediationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRemediationDAO.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.time.OffsetDateTime;\n import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -34,7 +35,12 @@ public interface RemediationDAO extends DAO<Remediation> {\n \n     int count();\n \n-    List<Remediation> findAll(int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n+    List<Remediation> findAll(\n+            OffsetDateTime before,\n+            OffsetDateTime after,\n+            int page,\n+            int itemsPerPage,\n+            List<OrderByClause> orderByClauses);\n \n     Remediation save(Remediation remediation);\n "},{"sha":"63e3cbf4cc707c89953caf0b67b072683265a701","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportExecDAO.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -34,16 +34,15 @@ public interface ReportExecDAO extends DAO<ReportExec> {\n \n     ReportExec findLatestEnded(Report report);\n \n-    int count(String reportKey);\n-\n-    List<ReportExec> findAll(Report report, int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n+    int count(Report report, OffsetDateTime before, OffsetDateTime after);\n \n     List<ReportExec> findAll(\n             Report report,\n-            OffsetDateTime startedBefore,\n-            OffsetDateTime startedAfter,\n-            OffsetDateTime endedBefore,\n-            OffsetDateTime endedAfter);\n+            OffsetDateTime before,\n+            OffsetDateTime after,\n+            int page,\n+            int itemsPerPage,\n+            List<OrderByClause> orderByClauses);\n \n     ReportExec save(ReportExec execution);\n "},{"sha":"5b77e1aa3027cfd9571cf2cfe6ed537e9fe58ca3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskExecDAO.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -38,16 +38,15 @@ public interface TaskExecDAO extends DAO<TaskExec<?>> {\n \n     TaskExec<?> findLatestEnded(TaskType type, Task<?> task);\n \n-    int count(Task<?> task);\n-\n-    List<TaskExec<?>> findAll(Task<?> task, int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n+    int count(Task<?> task, OffsetDateTime before, OffsetDateTime after);\n \n     List<TaskExec<?>> findAll(\n             Task<?> task,\n-            OffsetDateTime startedBefore,\n-            OffsetDateTime startedAfter,\n-            OffsetDateTime endedBefore,\n-            OffsetDateTime endedAfter);\n+            OffsetDateTime before,\n+            OffsetDateTime after,\n+            int page,\n+            int itemsPerPage,\n+            List<OrderByClause> orderByClauses);\n \n     <T extends Task<T>> TaskExec<T> save(TaskExec<T> execution);\n "},{"sha":"0de9861b7a201b007627b1f499a7922493840adc","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAuditConfDAO.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAuditConfDAO.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -30,7 +30,7 @@ protected static class MyMessageCriteriaBuilder extends JSONMessageCriteriaBuild\n         @Override\n         protected String doBuild(final List<ObjectNode> containers) {\n             if (entityKey != null) {\n-                query.append('(').\n+                query.append(andIfNeeded()).append('(').\n                         append(AUDIT_ENTRY_MESSAGE_COLUMN).append(\"->'$.before' LIKE '%\").append(entityKey).\n                         append(\"%' OR \").\n                         append(AUDIT_ENTRY_MESSAGE_COLUMN).append(\"->'$.input' LIKE '%\").append(entityKey).\n@@ -40,16 +40,12 @@ protected String doBuild(final List<ObjectNode> containers) {\n             }\n \n             if (!containers.isEmpty()) {\n-                if (entityKey != null) {\n-                    query.append(\" AND (\");\n-                }\n-                query.append(containers.stream().\n-                        map(container -> \"JSON_CONTAINS(\" + AUDIT_ENTRY_MESSAGE_COLUMN + \", '\"\n-                        + POJOHelper.serialize(container).replace(\"'\", \"''\")\n-                        + \"')\").collect(Collectors.joining(\" OR \")));\n-                if (entityKey != null) {\n-                    query.append(')');\n-                }\n+                query.append(andIfNeeded()).append('(').\n+                        append(containers.stream().\n+                                map(container -> \"JSON_CONTAINS(\" + AUDIT_ENTRY_MESSAGE_COLUMN + \", '\"\n+                                + POJOHelper.serialize(container).replace(\"'\", \"''\")\n+                                + \"')\").collect(Collectors.joining(\" OR \"))).\n+                        append(')');\n             }\n \n             return query.toString();"},{"sha":"3491c4666cc133f030e87ae8387ad56fa859907a","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/OJPAJSONAuditConfDAO.java","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONAuditConfDAO.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -39,7 +39,7 @@ protected Optional<String> jsonExprItem(final JsonNode logger, final String fiel\n         @Override\n         protected String doBuild(final List<ObjectNode> containers) {\n             if (entityKey != null) {\n-                query.append('(').\n+                query.append(andIfNeeded()).append('(').\n                         append(\"JSON_VALUE(\").append(AUDIT_ENTRY_MESSAGE_COLUMN).\n                         append(\", '$.before' RETURNING VARCHAR2(32767)) LIKE '%\").\n                         append(entityKey).append(\"%' OR \").\n@@ -52,24 +52,20 @@ protected String doBuild(final List<ObjectNode> containers) {\n             }\n \n             if (!containers.isEmpty()) {\n-                if (entityKey != null) {\n-                    query.append(\" AND (\");\n-                }\n-                query.append(containers.stream().filter(container -> container.has(\"logger\")).map(container -> {\n-                    JsonNode logger = container.get(\"logger\");\n+                query.append(andIfNeeded()).append('(').\n+                        append(containers.stream().filter(container -> container.has(\"logger\")).map(container -> {\n+                            JsonNode logger = container.get(\"logger\");\n \n-                    List<String> clauses = new ArrayList<>();\n-                    jsonExprItem(logger, \"type\").ifPresent(clauses::add);\n-                    jsonExprItem(logger, \"category\").ifPresent(clauses::add);\n-                    jsonExprItem(logger, \"subcategory\").ifPresent(clauses::add);\n-                    jsonExprItem(logger, \"result\").ifPresent(clauses::add);\n-                    jsonExprItem(logger, \"event\").ifPresent(clauses::add);\n+                            List<String> clauses = new ArrayList<>();\n+                            jsonExprItem(logger, \"type\").ifPresent(clauses::add);\n+                            jsonExprItem(logger, \"category\").ifPresent(clauses::add);\n+                            jsonExprItem(logger, \"subcategory\").ifPresent(clauses::add);\n+                            jsonExprItem(logger, \"result\").ifPresent(clauses::add);\n+                            jsonExprItem(logger, \"event\").ifPresent(clauses::add);\n \n-                    return \"JSON_EXISTS(MESSAGE, '$[*]?(\" + String.join(\" && \", clauses) + \")')\";\n-                }).filter(Objects::nonNull).collect(Collectors.joining(\" OR \")));\n-                if (entityKey != null) {\n-                    query.append(')');\n-                }\n+                            return \"JSON_EXISTS(MESSAGE, '$[*]?(\" + String.join(\" && \", clauses) + \")')\";\n+                        }).filter(Objects::nonNull).collect(Collectors.joining(\" OR \"))).\n+                        append(')');\n             }\n \n             return query.toString();"},{"sha":"189201737482aee3f532d4f5822f2f55718e9ed6","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAuditConfDAO.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAuditConfDAO.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -31,7 +31,7 @@ protected static class PGMessageCriteriaBuilder extends JSONMessageCriteriaBuild\n         @Override\n         protected String doBuild(final List<ObjectNode> containers) {\n             if (entityKey != null) {\n-                query.append('(').\n+                query.append(andIfNeeded()).append('(').\n                         append(AUDIT_ENTRY_MESSAGE_COLUMN).append(\" ->> 'before' LIKE '%\").append(entityKey).\n                         append(\"%' OR \").\n                         append(AUDIT_ENTRY_MESSAGE_COLUMN).append(\" ->> 'input' LIKE '%\").append(entityKey).\n@@ -41,16 +41,12 @@ protected String doBuild(final List<ObjectNode> containers) {\n             }\n \n             if (!containers.isEmpty()) {\n-                if (entityKey != null) {\n-                    query.append(\" AND (\");\n-                }\n-                query.append(containers.stream().\n-                        map(container -> AUDIT_ENTRY_MESSAGE_COLUMN + \"::jsonb @> '\"\n-                        + POJOHelper.serialize(container).replace(\"'\", \"''\")\n-                        + \"'::jsonb\").collect(Collectors.joining(\" OR \")));\n-                if (entityKey != null) {\n-                    query.append(')');\n-                }\n+                query.append(andIfNeeded()).append('(').\n+                        append(containers.stream().\n+                                map(container -> AUDIT_ENTRY_MESSAGE_COLUMN + \"::jsonb @> '\"\n+                                + POJOHelper.serialize(container).replace(\"'\", \"''\")\n+                                + \"'::jsonb\").collect(Collectors.joining(\" OR \"))).\n+                        append(')');\n             }\n \n             return query.toString();"},{"sha":"ff8430a2c0c0c6b46d179d096b2c4bbba47307cb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAuditConfDAO.java","status":"modified","additions":48,"deletions":3,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditConfDAO.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -20,6 +20,8 @@\n \n import java.sql.Clob;\n import java.sql.SQLException;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n@@ -45,6 +47,11 @@ protected String andIfNeeded() {\n             return query.length() == 0 ? \" \" : \" AND \";\n         }\n \n+        protected int setParameter(final List<Object> parameters, final Object parameter) {\n+            parameters.add(parameter);\n+            return parameters.size();\n+        }\n+\n         protected MessageCriteriaBuilder entityKey(final String entityKey) {\n             if (entityKey != null) {\n                 query.append(andIfNeeded()).append(AUDIT_ENTRY_MESSAGE_COLUMN).\n@@ -96,6 +103,22 @@ public MessageCriteriaBuilder result(final AuditElements.Result result) {\n             return this;\n         }\n \n+        public MessageCriteriaBuilder before(final OffsetDateTime before, final List<Object> parameters) {\n+            if (before != null) {\n+                query.append(andIfNeeded()).append(AUDIT_ENTRY_EVENT_DATE_COLUMN).\n+                        append(\" <= ?\").append(setParameter(parameters, before));\n+            }\n+            return this;\n+        }\n+\n+        public MessageCriteriaBuilder after(final OffsetDateTime after, final List<Object> parameters) {\n+            if (after != null) {\n+                query.append(andIfNeeded()).append(AUDIT_ENTRY_EVENT_DATE_COLUMN).\n+                        append(\" >= ?\").append(setParameter(parameters, after));\n+            }\n+            return this;\n+        }\n+\n         public String build() {\n             return query.toString();\n         }\n@@ -127,15 +150,28 @@ protected MessageCriteriaBuilder messageCriteriaBuilder(final String entityKey)\n         return new MessageCriteriaBuilder().entityKey(entityKey);\n     }\n \n+    protected void fillWithParameters(final Query query, final List<Object> parameters) {\n+        for (int i = 0; i < parameters.size(); i++) {\n+            if (parameters.get(i) instanceof Boolean) {\n+                query.setParameter(i + 1, ((Boolean) parameters.get(i)) ? 1 : 0);\n+            } else {\n+                query.setParameter(i + 1, parameters.get(i));\n+            }\n+        }\n+    }\n+\n     @Override\n     public int countEntries(\n             final String entityKey,\n             final AuditElements.EventCategoryType type,\n             final String category,\n             final String subcategory,\n             final List<String> events,\n-            final AuditElements.Result result) {\n+            final AuditElements.Result result,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after) {\n \n+        List<Object> parameters = new ArrayList<>();\n         String queryString = \"SELECT COUNT(0)\"\n                 + \" FROM \" + AUDIT_ENTRY_TABLE\n                 + \" WHERE \" + messageCriteriaBuilder(entityKey).\n@@ -144,10 +180,13 @@ public int countEntries(\n                         subcategory(subcategory).\n                         result(result).\n                         events(events).\n+                        before(before, parameters).\n+                        after(after, parameters).\n                         build();\n-        Query countQuery = entityManager().createNativeQuery(queryString);\n+        Query query = entityManager().createNativeQuery(queryString);\n+        fillWithParameters(query, parameters);\n \n-        return ((Number) countQuery.getSingleResult()).intValue();\n+        return ((Number) query.getSingleResult()).intValue();\n     }\n \n     protected String select() {\n@@ -165,8 +204,11 @@ public List<AuditEntry> searchEntries(\n             final String subcategory,\n             final List<String> events,\n             final AuditElements.Result result,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after,\n             final List<OrderByClause> orderBy) {\n \n+        List<Object> parameters = new ArrayList<>();\n         String queryString = \"SELECT \" + select()\n                 + \" FROM \" + AUDIT_ENTRY_TABLE\n                 + \" WHERE \" + messageCriteriaBuilder(entityKey).\n@@ -175,6 +217,8 @@ public List<AuditEntry> searchEntries(\n                         subcategory(subcategory).\n                         result(result).\n                         events(events).\n+                        before(before, parameters).\n+                        after(after, parameters).\n                         build();\n         if (!orderBy.isEmpty()) {\n             queryString += \" ORDER BY \" + orderBy.stream().\n@@ -183,6 +227,7 @@ public List<AuditEntry> searchEntries(\n         }\n \n         Query query = entityManager().createNativeQuery(queryString);\n+        fillWithParameters(query, parameters);\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n         if (itemsPerPage >= 0) {\n             query.setMaxResults(itemsPerPage);"},{"sha":"dbca9f607338eb2ae73603a4cbf568998681808d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARemediationDAO.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.lang.reflect.Field;\n+import java.time.OffsetDateTime;\n import java.util.List;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n@@ -65,12 +66,20 @@ public int count() {\n \n     @Override\n     public List<Remediation> findAll(\n+            final OffsetDateTime before,\n+            final OffsetDateTime after,\n             final int page,\n             final int itemsPerPage,\n             final List<OrderByClause> orderByClauses) {\n \n         StringBuilder queryString = new StringBuilder(\n-                \"SELECT e FROM \" + JPARemediation.class.getSimpleName() + \" e\");\n+                \"SELECT e FROM \" + JPARemediation.class.getSimpleName() + \" e WHERE 1=1 \");\n+        if (before != null) {\n+            queryString.append(\" AND e.instant <= :before\");\n+        }\n+        if (after != null) {\n+            queryString.append(\" AND e.instant >= :after\");\n+        }\n \n         if (!orderByClauses.isEmpty()) {\n             queryString.append(\" ORDER BY \");\n@@ -102,7 +111,12 @@ public List<Remediation> findAll(\n         }\n \n         TypedQuery<Remediation> query = entityManager().createQuery(queryString.toString(), Remediation.class);\n-\n+        if (before != null) {\n+            query.setParameter(\"before\", before);\n+        }\n+        if (after != null) {\n+            query.setParameter(\"after\", after);\n+        }\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n \n         if (itemsPerPage > 0) {"},{"sha":"1b4d7ac7512fa0ef5fe472cdeed25502a294e7ac","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java","status":"modified","additions":53,"deletions":57,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -47,7 +47,7 @@ public List<ReportExec> findRecent(final int max) {\n         return query.getResultList();\n     }\n \n-    private ReportExec findLatest(final Report report, final String field) {\n+    protected ReportExec findLatest(final Report report, final String field) {\n         TypedQuery<ReportExec> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAReportExec.class.getSimpleName() + \" e \"\n                 + \"WHERE e.report=:report ORDER BY e.\" + field + \" DESC\", ReportExec.class);\n@@ -70,16 +70,44 @@ public ReportExec findLatestEnded(final Report report) {\n         return findLatest(report, \"end\");\n     }\n \n+    protected StringBuilder query(\n+            final StringBuilder select,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after) {\n+\n+        StringBuilder query = select.\n+                append(JPAReportExec.class.getSimpleName()).\n+                append(\" e WHERE e.report=:report \");\n+        if (before != null) {\n+            query.append(\"AND e.start <= :before \");\n+        }\n+        if (after != null) {\n+            query.append(\"AND e.start >= :after \");\n+        }\n+        return query;\n+    }\n+\n     @Override\n-    public int count(final String reportKey) {\n-        Query countQuery = entityManager().createNativeQuery(\n-                \"SELECT COUNT(e.id) FROM \" + JPAReportExec.TABLE + \" e WHERE e.report_id=?1\");\n-        countQuery.setParameter(1, reportKey);\n+    public int count(\n+            final Report report,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after) {\n+\n+        StringBuilder queryString = query(new StringBuilder(\"SELECT COUNT(e) FROM \"), before, after);\n \n-        return ((Number) countQuery.getSingleResult()).intValue();\n+        Query query = entityManager().createQuery(queryString.toString());\n+        query.setParameter(\"report\", report);\n+        if (before != null) {\n+            query.setParameter(\"before\", before);\n+        }\n+        if (after != null) {\n+            query.setParameter(\"after\", after);\n+        }\n+\n+        return ((Number) query.getSingleResult()).intValue();\n     }\n \n-    private static String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n+    protected String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n         StringBuilder statement = new StringBuilder();\n \n         for (OrderByClause clause : orderByClauses) {\n@@ -90,23 +118,33 @@ private static String toOrderByStatement(final List<OrderByClause> orderByClause\n         }\n \n         if (statement.length() == 0) {\n-            statement.append(\"ORDER BY e.id DESC\");\n+            statement.append(\" ORDER BY e.id DESC\");\n         } else {\n-            statement.insert(0, \"ORDER BY \");\n+            statement.insert(0, \" ORDER BY \");\n         }\n         return statement.toString();\n     }\n \n     @Override\n-    public List<ReportExec> findAll(final Report report,\n-            final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n+    public List<ReportExec> findAll(\n+            final Report report,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after,\n+            final int page,\n+            final int itemsPerPage,\n+            final List<OrderByClause> orderByClauses) {\n \n-        String queryString =\n-                \"SELECT e FROM \" + JPAReportExec.class.getSimpleName() + \" e WHERE e.report=:report \"\n-                + toOrderByStatement(orderByClauses);\n+        StringBuilder queryString = query(new StringBuilder(\"SELECT e FROM \"), before, after).\n+                append(toOrderByStatement(orderByClauses));\n \n-        TypedQuery<ReportExec> query = entityManager().createQuery(queryString, ReportExec.class);\n+        TypedQuery<ReportExec> query = entityManager().createQuery(queryString.toString(), ReportExec.class);\n         query.setParameter(\"report\", report);\n+        if (before != null) {\n+            query.setParameter(\"before\", before);\n+        }\n+        if (after != null) {\n+            query.setParameter(\"after\", after);\n+        }\n \n         // page starts from 1, while setFirtResult() starts from 0\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n@@ -118,48 +156,6 @@ public List<ReportExec> findAll(final Report report,\n         return query.getResultList();\n     }\n \n-    @Override\n-    public List<ReportExec> findAll(\n-            final Report report,\n-            final OffsetDateTime startedBefore,\n-            final OffsetDateTime startedAfter,\n-            final OffsetDateTime endedBefore,\n-            final OffsetDateTime endedAfter) {\n-\n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPAReportExec.class.getSimpleName()).\n-                append(\" e WHERE e.report=:report \");\n-\n-        if (startedBefore != null) {\n-            queryString.append(\" AND e.start < :startedBefore\");\n-        }\n-        if (startedAfter != null) {\n-            queryString.append(\" AND e.start > :startedAfter\");\n-        }\n-        if (endedBefore != null) {\n-            queryString.append(\" AND e.end < :endedBefore\");\n-        }\n-        if (endedAfter != null) {\n-            queryString.append(\" AND e.end > :endedAfter\");\n-        }\n-\n-        TypedQuery<ReportExec> query = entityManager().createQuery(queryString.toString(), ReportExec.class);\n-        query.setParameter(\"report\", report);\n-        if (startedBefore != null) {\n-            query.setParameter(\"startedBefore\", startedBefore);\n-        }\n-        if (startedAfter != null) {\n-            query.setParameter(\"startedAfter\", startedAfter);\n-        }\n-        if (endedBefore != null) {\n-            query.setParameter(\"endedBefore\", endedBefore);\n-        }\n-        if (endedAfter != null) {\n-            query.setParameter(\"endedAfter\", endedAfter);\n-        }\n-\n-        return query.getResultList();\n-    }\n-\n     @Transactional(rollbackFor = Throwable.class)\n     @Override\n     public ReportExec save(final ReportExec execution) {"},{"sha":"867b979c2f6372faed6756484a126be265771221","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":41,"deletions":49,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -124,59 +124,42 @@ public TaskExec<?> findLatestEnded(final TaskType type, final Task<?> task) {\n         return findLatest(type, task, \"end\");\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public List<TaskExec<?>> findAll(\n+    protected StringBuilder query(\n+            final StringBuilder select,\n             final Task<?> task,\n-            final OffsetDateTime startedBefore,\n-            final OffsetDateTime startedAfter,\n-            final OffsetDateTime endedBefore,\n-            final OffsetDateTime endedAfter) {\n+            final OffsetDateTime before,\n+            final OffsetDateTime after) {\n \n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+        StringBuilder query = select.\n                 append(taskUtilsFactory.getInstance(task).getTaskExecEntity().getSimpleName()).\n                 append(\" e WHERE e.task=:task \");\n-\n-        if (startedBefore != null) {\n-            queryString.append(\" AND e.start < :startedBefore\");\n-        }\n-        if (startedAfter != null) {\n-            queryString.append(\" AND e.start > :startedAfter\");\n-        }\n-        if (endedBefore != null) {\n-            queryString.append(\" AND e.end < :endedBefore\");\n+        if (before != null) {\n+            query.append(\"AND e.start <= :before \");\n         }\n-        if (endedAfter != null) {\n-            queryString.append(\" AND e.end > :endedAfter\");\n+        if (after != null) {\n+            query.append(\"AND e.start >= :after \");\n         }\n+        return query;\n+    }\n+\n+    @Override\n+    public int count(\n+            final Task<?> task,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after) {\n+\n+        StringBuilder queryString = query(new StringBuilder(\"SELECT COUNT(e) FROM \"), task, before, after);\n \n         Query query = entityManager().createQuery(queryString.toString());\n         query.setParameter(\"task\", task);\n-        if (startedBefore != null) {\n-            query.setParameter(\"startedBefore\", startedBefore);\n-        }\n-        if (startedAfter != null) {\n-            query.setParameter(\"startedAfter\", startedAfter);\n+        if (before != null) {\n+            query.setParameter(\"before\", before);\n         }\n-        if (endedBefore != null) {\n-            query.setParameter(\"endedBefore\", endedBefore);\n-        }\n-        if (endedAfter != null) {\n-            query.setParameter(\"endedAfter\", endedAfter);\n+        if (after != null) {\n+            query.setParameter(\"after\", after);\n         }\n \n-        List<Object> result = query.getResultList();\n-        return result.stream().map(e -> (TaskExec<?>) e).collect(Collectors.toList());\n-    }\n-\n-    @Override\n-    public int count(final Task<?> task) {\n-        Query countQuery = entityManager().createNativeQuery(\n-                \"SELECT COUNT(e.id) FROM \" + taskUtilsFactory.getInstance(task).getTaskExecTable() + \" e \"\n-                + \"WHERE e.task_id=?1\");\n-        countQuery.setParameter(1, task.getKey());\n-\n-        return ((Number) countQuery.getSingleResult()).intValue();\n+        return ((Number) query.getSingleResult()).intValue();\n     }\n \n     protected String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n@@ -190,25 +173,34 @@ protected String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n         });\n \n         if (statement.length() == 0) {\n-            statement.append(\"ORDER BY e.id DESC\");\n+            statement.append(\" ORDER BY e.id DESC\");\n         } else {\n-            statement.insert(0, \"ORDER BY \");\n+            statement.insert(0, \" ORDER BY \");\n         }\n         return statement.toString();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public List<TaskExec<?>> findAll(\n-            final Task<?> task, final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n+            final Task<?> task,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after,\n+            final int page,\n+            final int itemsPerPage,\n+            final List<OrderByClause> orderByClauses) {\n \n-        String queryString = \"SELECT e \"\n-                + \"FROM \" + taskUtilsFactory.getInstance(task).getTaskExecEntity().getSimpleName() + \" e \"\n-                + \"WHERE e.task=:task \"\n-                + toOrderByStatement(orderByClauses);\n+        StringBuilder queryString = query(new StringBuilder(\"SELECT e FROM \"), task, before, after).\n+                append(toOrderByStatement(orderByClauses));\n \n-        Query query = entityManager().createQuery(queryString);\n+        Query query = entityManager().createQuery(queryString.toString());\n         query.setParameter(\"task\", task);\n+        if (before != null) {\n+            query.setParameter(\"before\", before);\n+        }\n+        if (after != null) {\n+            query.setParameter(\"after\", after);\n+        }\n \n         // page starts from 1, while setFirtResult() starts from 0\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));"},{"sha":"8199d16df0287f8283fcc482d28e527adbd56b15","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RemediationTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -56,7 +56,7 @@ public class RemediationTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<Remediation> remediations = remediationDAO.findAll(1, 1, List.of());\n+        List<Remediation> remediations = remediationDAO.findAll(null, null, 1, 1, List.of());\n         assertTrue(remediations.isEmpty());\n     }\n "},{"sha":"43e7bcbbee7c9a20ca99c11f7f73e0d836a990e9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskExecTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -55,7 +55,7 @@ public void findAll() {\n \n         OffsetDateTime startedBefore = OffsetDateTime.of(2015, 12, 18, 0, 0, 0, 0, FormatUtils.DEFAULT_OFFSET);\n \n-        List<TaskExec<?>> execs = taskExecDAO.findAll(task, startedBefore, null, null, null);\n+        List<TaskExec<?>> execs = taskExecDAO.findAll(task, startedBefore, null, -1, -1, List.of());\n         assertNotNull(execs);\n         assertEquals(1, execs.size());\n     }"},{"sha":"557b68cfe090a0fc4014afac1f9a888d7df893a9","filename":"core/self-keymaster-starter/src/main/java/org/apache/syncope/core/starter/SelfKeymasterContext.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSelfKeymasterContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSelfKeymasterContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSelfKeymasterContext.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -93,9 +93,11 @@ public ConditionOutcome getMatchOutcome(final ConditionContext context, final An\n \n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n-    public Server selfKeymasterContainer(final JacksonJsonProvider jsonProvider,\n-                                         final ApplicationContext ctx,\n-                                         final Bus bus) {\n+    public Server selfKeymasterContainer(\n+            final JacksonJsonProvider jsonProvider,\n+            final ApplicationContext ctx,\n+            final Bus bus) {\n+\n         SpringJAXRSServerFactoryBean selfKeymasterContainer = new SpringJAXRSServerFactoryBean();\n         selfKeymasterContainer.setBus(bus);\n         selfKeymasterContainer.setAddress(\"/keymaster\");"},{"sha":"bbe3a8537a185b261de267f2d162cc029cab5f4b","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAuditConfDAO.java","status":"modified","additions":26,"deletions":4,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAuditConfDAO.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -28,7 +28,9 @@\n import co.elastic.clients.elasticsearch.core.CountRequest;\n import co.elastic.clients.elasticsearch.core.SearchRequest;\n import co.elastic.clients.elasticsearch.core.search.Hit;\n+import co.elastic.clients.json.JsonData;\n import java.io.IOException;\n+import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -60,7 +62,9 @@ protected Query getQuery(\n             final String category,\n             final String subcategory,\n             final List<String> events,\n-            final AuditElements.Result result) {\n+            final AuditElements.Result result,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after) {\n \n         List<Query> queries = new ArrayList<>();\n \n@@ -103,6 +107,20 @@ protected Query getQuery(\n                     build());\n         }\n \n+        if (before != null) {\n+            queries.add(new Query.Builder().\n+                    range(QueryBuilders.range().\n+                            field(\"instant\").lte(JsonData.of(before.toInstant().toEpochMilli())).build()).\n+                    build());\n+        }\n+\n+        if (after != null) {\n+            queries.add(new Query.Builder().\n+                    range(QueryBuilders.range().\n+                            field(\"instant\").gte(JsonData.of(after.toInstant().toEpochMilli())).build()).\n+                    build());\n+        }\n+\n         return new Query.Builder().bool(QueryBuilders.bool().must(queries).build()).build();\n     }\n \n@@ -113,11 +131,13 @@ public int countEntries(\n             final String category,\n             final String subcategory,\n             final List<String> events,\n-            final AuditElements.Result result) {\n+            final AuditElements.Result result,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after) {\n \n         CountRequest request = new CountRequest.Builder().\n                 index(ElasticsearchUtils.getAuditIndex(AuthContextUtils.getDomain())).\n-                query(getQuery(entityKey, type, category, subcategory, events, result)).\n+                query(getQuery(entityKey, type, category, subcategory, events, result, before, after)).\n                 build();\n         try {\n             return (int) client.count(request).count();\n@@ -154,12 +174,14 @@ public List<AuditEntry> searchEntries(\n             final String subcategory,\n             final List<String> events,\n             final AuditElements.Result result,\n+            final OffsetDateTime before,\n+            final OffsetDateTime after,\n             final List<OrderByClause> orderBy) {\n \n         SearchRequest request = new SearchRequest.Builder().\n                 index(ElasticsearchUtils.getAuditIndex(AuthContextUtils.getDomain())).\n                 searchType(SearchType.QueryThenFetch).\n-                query(getQuery(entityKey, type, category, subcategory, events, result)).\n+                query(getQuery(entityKey, type, category, subcategory, events, result, before, after)).\n                 from(itemsPerPage * (page <= 0 ? 0 : page - 1)).\n                 size(itemsPerPage < 0 ? indexMaxResultWindow : itemsPerPage).\n                 sort(sortBuilders(orderBy))."},{"sha":"c1ad22e1731a5b7144eb8dee38071dcc6811f49d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -127,8 +127,13 @@ public void findByUser() {\n         UserTO userTO = createUser(UserITCase.getUniqueSample(\"audit@syncope.org\")).getEntity();\n         assertNotNull(userTO.getKey());\n \n-        AuditQuery query = new AuditQuery.Builder().entityKey(userTO.getKey()).orderBy(\"event_date desc\").\n-                page(1).size(1).build();\n+        AuditQuery query = new AuditQuery.Builder().\n+                entityKey(userTO.getKey()).\n+                before(OffsetDateTime.now().plusSeconds(30)).\n+                page(1).\n+                size(1).\n+                orderBy(\"event_date desc\").\n+                build();\n         AuditEntry entry = queryWithFailure(query, MAX_WAIT_SECONDS);\n         assertNotNull(entry);\n         USER_SERVICE.delete(userTO.getKey());\n@@ -148,6 +153,7 @@ public void findByUserAndOther() {\n                 category(UserLogic.class.getSimpleName()).\n                 event(\"create\").\n                 result(AuditElements.Result.SUCCESS).\n+                after(OffsetDateTime.now().minusSeconds(30)).\n                 build();\n         AuditEntry entry = queryWithFailure(query, MAX_WAIT_SECONDS);\n         assertNotNull(entry);"},{"sha":"4210840e1d8ce6dc16361df2f428bcfd3c36b460","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -91,7 +91,7 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.common.rest.api.beans.ReconQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n@@ -605,8 +605,9 @@ public void issueSYNCOPE741() {\n         assertFalse(task.getExecutions().isEmpty());\n \n         // check list executions\n-        PagedResult<ExecTO> execs = TASK_SERVICE.listExecutions(new ExecListQuery.Builder().key(\n-                \"1e697572-b896-484c-ae7f-0c8f63fcbc6c\").\n+        PagedResult<ExecTO> execs = TASK_SERVICE.listExecutions(new ExecQuery.Builder().\n+                key(\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\").\n+                before(OffsetDateTime.now().plusSeconds(30)).\n                 page(1).size(2).build());\n         assertTrue(execs.getTotalCount() >= execs.getResult().size());\n     }"},{"sha":"46c17e39b58a82ada5d92d28bfbebdb410b90c23","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -34,6 +34,7 @@\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.nio.charset.StandardCharsets;\n+import java.time.OffsetDateTime;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n@@ -859,7 +860,8 @@ public void remediationSinglePull() throws IOException {\n                 assertEquals(ClientExceptionType.Reconciliation, sce.getType());\n             }\n             Optional<RemediationTO> remediation = REMEDIATION_SERVICE.list(\n-                    new RemediationQuery.Builder().page(1).size(1000).build()).getResult().stream().\n+                    new RemediationQuery.Builder().after(OffsetDateTime.now().minusSeconds(30)).\n+                            page(1).size(1000).build()).getResult().stream().\n                     filter(r -> \"uid=pullFromLDAP,ou=People,o=isp\".equalsIgnoreCase(r.getRemoteName())).\n                     findFirst();\n             assertTrue(remediation.isPresent());"},{"sha":"0e359c9e89844ad2ae9b08cf7739b2a382eeaaf4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -52,7 +52,7 @@\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n-import org.apache.syncope.common.rest.api.beans.ExecDeleteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -284,7 +284,7 @@ public void deleteExecutions() throws IOException {\n         OffsetDateTime end = OffsetDateTime.now();\n \n         Response response = REPORT_SERVICE.deleteExecutions(\n-                new ExecDeleteQuery.Builder().key(reportTO.getKey()).startedAfter(start).endedBefore(end).build());\n+                new ExecQuery.Builder().key(reportTO.getKey()).after(start).before(end).build());\n         List<BatchResponseItem> batchResponseItems = parseBatchResponse(response);\n         assertEquals(1, batchResponseItems.size());\n         assertEquals(execKey, batchResponseItems.get(0).getHeaders().get(RESTHeaders.RESOURCE_KEY).get(0));"},{"sha":"8ed3ff73e4e7708c1ef70b499040f1c3ce421918","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c17d1a0a179a6b7c696b39f1bf429ecdc16725a3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=c17d1a0a179a6b7c696b39f1bf429ecdc16725a3","patch":"@@ -44,7 +44,7 @@\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n@@ -123,7 +123,7 @@ public void deferred() {\n         });\n \n         PagedResult<ExecTO> execs =\n-                TASK_SERVICE.listExecutions(new ExecListQuery.Builder().key(task.getKey()).build());\n+                TASK_SERVICE.listExecutions(new ExecQuery.Builder().key(task.getKey()).build());\n         assertEquals(1, execs.getTotalCount());\n         assertTrue(execs.getResult().get(0).getStart().isAfter(initial));\n         // round 1 sec for safety"}]}