{"sha":"b78c7e6ef9d4c94ec0f0966ab26be42b43fce095","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI3OGM3ZTZlZjlkNGM5NGVjMGYwOTY2YWIyNmJlNDJiNDNmY2UwOTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-01-03T12:26:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-01-03T12:43:05Z"},"message":"Some cleanup to the new LDAPMembershipPullActionsTest","tree":{"sha":"7313bd03837d0102862b7828d939c2e4d3852a1a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7313bd03837d0102862b7828d939c2e4d3852a1a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b78c7e6ef9d4c94ec0f0966ab26be42b43fce095","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b78c7e6ef9d4c94ec0f0966ab26be42b43fce095","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b78c7e6ef9d4c94ec0f0966ab26be42b43fce095","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b78c7e6ef9d4c94ec0f0966ab26be42b43fce095/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4821d51b4cd155377b35d3807cb7da7254d1d59c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4821d51b4cd155377b35d3807cb7da7254d1d59c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4821d51b4cd155377b35d3807cb7da7254d1d59c"}],"stats":{"total":63,"additions":26,"deletions":37},"files":[{"sha":"68598e8271aa2ed97611cfec98d98f62a0fd2566","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActionsTest.java","status":"modified","additions":26,"deletions":36,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b78c7e6ef9d4c94ec0f0966ab26be42b43fce095/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b78c7e6ef9d4c94ec0f0966ab26be42b43fce095/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java?ref=b78c7e6ef9d4c94ec0f0966ab26be42b43fce095","patch":"@@ -19,24 +19,24 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n import java.util.UUID;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -52,13 +52,11 @@\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.java.AbstractTest;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n@@ -71,11 +69,15 @@\n import org.quartz.JobExecutionException;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.test.util.ReflectionTestUtils;\n \n public class LDAPMembershipPullActionsTest extends AbstractTest {\n \n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n     @Mock\n     private AnyTypeDAO anyTypeDAO;\n \n@@ -117,24 +119,23 @@ public class LDAPMembershipPullActionsTest extends AbstractTest {\n \n     private EntityTO entity;\n \n-    private AnyPatch anyPatch;\n+    private AnyUR anyReq;\n \n     private Map<String, Set<String>> membershipsBefore;\n \n     private User user;\n \n-    Set<ConnConfProperty> connConfProperties;\n+    private Set<ConnConfProperty> connConfProperties;\n \n     @BeforeEach\n     public void initTest() {\n-        List<UMembership> uMembList = new ArrayList<>();\n-        UMembership uMembership = new JPAUMembership();\n-        user = new JPAUser();\n+        user = entityFactory.newEntity(User.class);\n+        UMembership uMembership = entityFactory.newEntity(UMembership.class);\n         uMembership.setLeftEnd(user);\n         ReflectionTestUtils.setField(user, \"id\", UUID.randomUUID().toString());\n-        uMembList.add(uMembership);\n+        List<UMembership> uMembList = List.of(uMembership);\n \n-        anyPatch = new UserPatch();\n+        anyReq = new UserUR();\n         membershipsBefore = new HashMap<>();\n         ReflectionTestUtils.setField(ldapMembershipPullActions, \"membershipsBefore\", membershipsBefore);\n         ReflectionTestUtils.setField(ldapMembershipPullActions, \"membershipsAfter\", membershipsAfter);\n@@ -150,7 +151,7 @@ public void initTest() {\n \n         lenient().when(profile.getTask()).thenReturn(provisioningTask);\n         lenient().when(provisioningTask.getResource()).thenReturn(externalResource);\n-        lenient().when(anyTypeDAO.findUser()).thenReturn(new JPAAnyType());\n+        lenient().when(anyTypeDAO.findUser()).thenReturn(entityFactory.newEntity(AnyType.class));\n \n         lenient().when(profile.getConnector()).thenReturn(connector);\n         lenient().when(syncDelta.getObject()).thenReturn(connectorObj);\n@@ -165,7 +166,7 @@ public void beforeUpdateWithGroupTOAndEmptyMemberships() throws JobExecutionExce\n         Set<String> expected = new HashSet<>();\n         expected.add(entity.getKey());\n \n-        ldapMembershipPullActions.beforeUpdate(profile, syncDelta, entity, anyPatch);\n+        ldapMembershipPullActions.beforeUpdate(profile, syncDelta, entity, anyReq);\n \n         assertTrue(entity instanceof GroupTO);\n         assertEquals(1, membershipsBefore.get(user.getKey()).size());\n@@ -180,65 +181,54 @@ public void beforeUpdate() throws JobExecutionException {\n         memb.add(entity.getKey());\n         membershipsBefore.put(user.getKey(), memb);\n \n-        ldapMembershipPullActions.beforeUpdate(profile, syncDelta, entity, anyPatch);\n+        ldapMembershipPullActions.beforeUpdate(profile, syncDelta, entity, anyReq);\n \n-        assertTrue(!(entity instanceof GroupTO));\n+        assertFalse(entity instanceof GroupTO);\n         assertEquals(1, membershipsBefore.get(user.getKey()).size());\n     }\n \n     @Test\n-    @SuppressWarnings(value = { \"rawtypes\", \"unchecked\" })\n     public void afterWithEmptyAttributes(@Mock Attribute attribute) throws JobExecutionException {\n         entity = new GroupTO();\n-        Optional provision = Optional.of(new JPAProvision());\n \n         when(connectorObj.getAttributeByName(anyString())).thenReturn(attribute);\n-        when(externalResource.getProvision(any(AnyType.class))).thenReturn(provision);\n+        when(externalResource.getProvision(any(AnyType.class))).thenAnswer(ic -> Optional.of(mock(Provision.class)));\n \n         ldapMembershipPullActions.after(profile, syncDelta, entity, result);\n \n-        assertTrue(entity instanceof GroupTO);\n-        assertTrue(provision.isPresent());\n-        assertEquals(new LinkedList<>(), attribute.getValue());\n+        assertEquals(List.of(), attribute.getValue());\n     }\n \n     @Test\n-    @SuppressWarnings(value = { \"rawtypes\", \"unchecked\" })\n     public void after() throws JobExecutionException {\n         entity = new UserTO();\n-        Optional provision = Optional.empty();\n-        Optional match = Optional.of(new PullMatch(MatchType.ANY, user));\n         String expectedUid = UUID.randomUUID().toString();\n         Attribute attribute = new Uid(expectedUid);\n-        List<Object> expected = new LinkedList<>();\n-        expected.add(expectedUid);\n+        List<String> expected = List.of(expectedUid);\n \n         when(connectorObj.getAttributeByName(anyString())).thenReturn(attribute);\n-        when(externalResource.getProvision(any(AnyType.class))).thenReturn(provision);\n+        when(externalResource.getProvision(any(AnyType.class))).thenAnswer(ic -> Optional.empty());\n         when(inboundMatcher.match(any(AnyType.class), anyString(), any(ExternalResource.class), any(Connector.class))).\n-                thenReturn(match);\n+                thenReturn(Optional.of(new PullMatch(MatchType.ANY, user)));\n \n         ldapMembershipPullActions.after(profile, syncDelta, entity, result);\n \n         verify(membershipsAfter).get(anyString());\n         verify(membershipsAfter).put(anyString(), any());\n-        assertTrue(!(entity instanceof GroupTO));\n-        assertTrue(!provision.isPresent());\n         assertEquals(expected, attribute.getValue());\n-        assertTrue(match.isPresent());\n     }\n \n     @Test\n     public void afterAll(\n             @Mock Map<String, Object> jobMap,\n             @Mock SchedulerFactoryBean schedulerFactoryBean,\n             @Mock Scheduler scheduler) throws JobExecutionException, SchedulerException {\n+\n         ReflectionTestUtils.setField(ldapMembershipPullActions, \"scheduler\", schedulerFactoryBean);\n         when(schedulerFactoryBean.getScheduler()).thenReturn(scheduler);\n \n         ldapMembershipPullActions.afterAll(profile);\n \n         verify(scheduler).scheduleJob(any(), any());\n     }\n-\n }"},{"sha":"5c2ac1daf4a905d014a4155144192d66e20b1acd","filename":"pom.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b78c7e6ef9d4c94ec0f0966ab26be42b43fce095/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b78c7e6ef9d4c94ec0f0966ab26be42b43fce095/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=b78c7e6ef9d4c94ec0f0966ab26be42b43fce095","patch":"@@ -452,7 +452,6 @@ under the License.\n     <h2.version>1.4.200</h2.version>\n \n     <junit.version>5.5.2</junit.version>\n-\n     <mockito.version>3.2.4</mockito.version>\n \n     <conf.directory>${project.build.directory}/test-classes</conf.directory>"}]}