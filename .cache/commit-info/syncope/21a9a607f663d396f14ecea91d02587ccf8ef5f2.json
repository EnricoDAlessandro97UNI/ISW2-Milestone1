{"sha":"21a9a607f663d396f14ecea91d02587ccf8ef5f2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjIxYTlhNjA3ZjY2M2QzOTZmMTRlY2VhOTFkMDI1ODdjY2Y4ZWY1ZjI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-16T13:26:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-16T13:26:45Z"},"message":"[SYNCOPE-300] Providing different FIQL search builders for users and roles\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1551204 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"326e05059cefc835519bf18c650f6628b04d6164","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/326e05059cefc835519bf18c650f6628b04d6164"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/21a9a607f663d396f14ecea91d02587ccf8ef5f2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/21a9a607f663d396f14ecea91d02587ccf8ef5f2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/21a9a607f663d396f14ecea91d02587ccf8ef5f2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/21a9a607f663d396f14ecea91d02587ccf8ef5f2/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/72fc3ecd0c5b969ecad79c703397ae1ea94f51bd"}],"stats":{"total":503,"additions":351,"deletions":152},"files":[{"sha":"6e2261a76cb36c1650136a208ec5785766c6d31b","filename":"client/src/main/java/org/apache/syncope/client/SyncopeClient.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -18,13 +18,13 @@\n  */\n package org.apache.syncope.client;\n \n-import org.apache.syncope.common.search.SyncopeFiqlSearchConditionBuilder;\n-import java.util.Map;\n+import org.apache.syncope.common.search.UserFiqlSearchConditionBuilder;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.rest.RestClientFactoryBean;\n+import org.apache.syncope.common.search.RoleFiqlSearchConditionBuilder;\n import org.apache.syncope.common.services.UserSelfService;\n import org.apache.syncope.common.services.WorkflowService;\n import org.apache.syncope.common.types.AttributableType;\n@@ -57,22 +57,21 @@ public SyncopeClient(final MediaType mediaType, final RestClientFactoryBean rest\n     }\n \n     /**\n-     * Returns a new instance of <tt>SyncopeFiqlSearchConditionBuilder</tt>, for assisted building of FIQL queries.\n+     * Returns a new instance of <tt>UserFiqlSearchConditionBuilder</tt>, for assisted building of FIQL queries.\n      *\n-     * @return default instance of <tt>SyncopeFiqlSearchConditionBuilder</tt>\n+     * @return default instance of <tt>UserFiqlSearchConditionBuilder</tt>\n      */\n-    public static SyncopeFiqlSearchConditionBuilder getSearchConditionBuilder() {\n-        return new SyncopeFiqlSearchConditionBuilder();\n+    public static UserFiqlSearchConditionBuilder getUserSearchConditionBuilder() {\n+        return new UserFiqlSearchConditionBuilder();\n     }\n \n     /**\n-     * Returns a new instance of <tt>SyncopeFiqlSearchConditionBuilder</tt>, for assisted building of FIQL queries.\n+     * Returns a new instance of <tt>RoleFiqlSearchConditionBuilder</tt>, for assisted building of FIQL queries.\n      *\n-     * @param properties additional properties (date format, timezone support, etc.)\n-     * @return default instance of <tt>SyncopeFiqlSearchConditionBuilder</tt>\n+     * @return default instance of <tt>RoleFiqlSearchConditionBuilder</tt>\n      */\n-    public static SyncopeFiqlSearchConditionBuilder getSearchConditionBuilder(final Map<String, String> properties) {\n-        return new SyncopeFiqlSearchConditionBuilder(properties);\n+    public static RoleFiqlSearchConditionBuilder getRoleSearchConditionBuilder() {\n+        return new RoleFiqlSearchConditionBuilder();\n     }\n \n     /**"},{"sha":"fb0e730805ad56572f8449c9d544c9abd3ab5d02","filename":"common/src/main/java/org/apache/syncope/common/search/RoleFiqlSearchConditionBuilder.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FRoleFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FRoleFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FRoleFiqlSearchConditionBuilder.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.search;\n+\n+import java.util.Map;\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n+\n+/**\n+ * Extends <tt>SyncopeFiqlSearchConditionBuilder</tt> by providing some additional facilities for searching\n+ * roles in Syncope.\n+ */\n+public class RoleFiqlSearchConditionBuilder extends SyncopeFiqlSearchConditionBuilder {\n+\n+    public RoleFiqlSearchConditionBuilder() {\n+        super();\n+    }\n+\n+    public RoleFiqlSearchConditionBuilder(final Map<String, String> properties) {\n+        super(properties);\n+    }\n+\n+    @Override\n+    protected Builder newBuilderInstance() {\n+        return new Builder(properties);\n+    }\n+\n+    @Override\n+    public RoleProperty is(final String property) {\n+        return newBuilderInstance().is(property);\n+    }\n+\n+    public CompleteCondition hasEntitlements(final String entitlement, final String... moreEntitlements) {\n+        return newBuilderInstance().is(SpecialAttr.ENTITLEMENTS.toString()).\n+                hasEntitlements(entitlement, moreEntitlements);\n+    }\n+\n+    public CompleteCondition hasNotEntitlements(final String entitlement, final String... moreEntitlements) {\n+        return newBuilderInstance().is(SpecialAttr.ENTITLEMENTS.toString()).\n+                hasNotEntitlements(entitlement, moreEntitlements);\n+    }\n+\n+    protected static class Builder extends SyncopeFiqlSearchConditionBuilder.Builder\n+            implements RoleProperty, CompleteCondition {\n+\n+        public Builder(final Map<String, String> properties) {\n+            super(properties);\n+        }\n+\n+        public Builder(final Builder parent) {\n+            super(parent);\n+        }\n+\n+        @Override\n+        public RoleProperty is(final String property) {\n+            Builder b = new Builder(this);\n+            b.result = property;\n+            return b;\n+        }\n+\n+        @Override\n+        public CompleteCondition hasEntitlements(final String entitlement, final String... moreEntitlements) {\n+            this.result = SpecialAttr.ENTITLEMENTS.toString();\n+            return condition(FiqlParser.EQ, entitlement, (Object[]) moreEntitlements);\n+        }\n+\n+        @Override\n+        public CompleteCondition hasNotEntitlements(final String entitlement, final String... moreEntitlements) {\n+            this.result = SpecialAttr.ENTITLEMENTS.toString();\n+            return condition(FiqlParser.NEQ, entitlement, (Object[]) moreEntitlements);\n+        }\n+\n+    }\n+}"},{"sha":"70938e1845d444d0851d46bf0e43f021b6aface8","filename":"common/src/main/java/org/apache/syncope/common/search/RoleProperty.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FRoleProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FRoleProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FRoleProperty.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.search;\n+\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+\n+public interface RoleProperty extends SyncopeProperty {\n+\n+    CompleteCondition hasEntitlements(String entitlement, String... moreEntitlements);\n+\n+    CompleteCondition hasNotEntitlements(String entitlement, String... moreEntitlements);\n+\n+}"},{"sha":"260c94c6e09b83cff664a4dc3400d5025c9d14f0","filename":"common/src/main/java/org/apache/syncope/common/search/SyncopeFiqlSearchConditionBuilder.java","status":"modified","additions":5,"deletions":72,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSyncopeFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSyncopeFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSyncopeFiqlSearchConditionBuilder.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -25,10 +25,7 @@\n import org.apache.cxf.jaxrs.ext.search.client.FiqlSearchConditionBuilder;\n import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n \n-/**\n- * Extends <tt>FiqlSearchConditionBuilder</tt> by providing some additional facilities for searching in Syncope.\n- */\n-public class SyncopeFiqlSearchConditionBuilder extends FiqlSearchConditionBuilder {\n+public abstract class SyncopeFiqlSearchConditionBuilder extends FiqlSearchConditionBuilder {\n \n     public static final Map<String, String> CONTEXTUAL_PROPERTIES;\n \n@@ -37,11 +34,11 @@ public class SyncopeFiqlSearchConditionBuilder extends FiqlSearchConditionBuilde\n         CONTEXTUAL_PROPERTIES.put(SearchUtils.LAX_PROPERTY_MATCH, \"true\");\n     }\n \n-    public SyncopeFiqlSearchConditionBuilder() {\n+    protected SyncopeFiqlSearchConditionBuilder() {\n         super();\n     }\n \n-    public SyncopeFiqlSearchConditionBuilder(final Map<String, String> properties) {\n+    protected SyncopeFiqlSearchConditionBuilder(final Map<String, String> properties) {\n         super(properties);\n     }\n \n@@ -50,7 +47,6 @@ protected Builder newBuilderInstance() {\n         return new Builder(properties);\n     }\n \n-    @Override\n     public SyncopeProperty is(final String property) {\n         return newBuilderInstance().is(property);\n     }\n@@ -63,40 +59,14 @@ public CompleteCondition isNotNull(final String property) {\n         return newBuilderInstance().is(property).notNullValue();\n     }\n \n-    public CompleteCondition hasRoles(final Long role, final Long... moreRoles) {\n-        return newBuilderInstance().is(SpecialAttr.ROLES.toString()).hasRoles(role, moreRoles);\n-    }\n-\n-    public CompleteCondition hasNotRoles(final Long role, final Long... moreRoles) {\n-        return newBuilderInstance().is(SpecialAttr.ROLES.toString()).hasNotRoles(role, moreRoles);\n-    }\n-\n-    public CompleteCondition hasResources(final String resource, final String... moreResources) {\n-        return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasResources(resource, moreResources);\n-    }\n-\n-    public CompleteCondition hasNotResources(final String resource, final String... moreResources) {\n-        return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasNotResources(resource, moreResources);\n-    }\n-\n-    public CompleteCondition hasEntitlements(final String entitlement, final String... moreEntitlements) {\n-        return newBuilderInstance().is(SpecialAttr.ENTITLEMENTS.toString()).\n-                hasEntitlements(entitlement, moreEntitlements);\n-    }\n-\n-    public CompleteCondition hasNotEntitlements(final String entitlement, final String... moreEntitlements) {\n-        return newBuilderInstance().is(SpecialAttr.ENTITLEMENTS.toString()).\n-                hasNotEntitlements(entitlement, moreEntitlements);\n-    }\n-\n     protected static class Builder extends FiqlSearchConditionBuilder.Builder\n             implements SyncopeProperty, CompleteCondition {\n \n-        public Builder(final Map<String, String> properties) {\n+        protected Builder(final Map<String, String> properties) {\n             super(properties);\n         }\n \n-        public Builder(final Builder parent) {\n+        protected Builder(final Builder parent) {\n             super(parent);\n         }\n \n@@ -117,42 +87,5 @@ public CompleteCondition notNullValue() {\n             return condition(FiqlParser.NEQ, SpecialAttr.NULL);\n         }\n \n-        @Override\n-        public CompleteCondition hasRoles(final Long role, final Long... moreRoles) {\n-            this.result = SpecialAttr.ROLES.toString();\n-            return condition(FiqlParser.EQ, role, (Object[]) moreRoles);\n-        }\n-\n-        @Override\n-        public CompleteCondition hasNotRoles(final Long role, final Long... moreRoles) {\n-            this.result = SpecialAttr.ROLES.toString();\n-            return condition(FiqlParser.NEQ, role, (Object[]) moreRoles);\n-        }\n-\n-        @Override\n-        public CompleteCondition hasResources(final String resource, final String... moreResources) {\n-            this.result = SpecialAttr.RESOURCES.toString();\n-            return condition(FiqlParser.EQ, resource, (Object[]) moreResources);\n-        }\n-\n-        @Override\n-        public CompleteCondition hasNotResources(final String resource, final String... moreResources) {\n-            this.result = SpecialAttr.RESOURCES.toString();\n-            return condition(FiqlParser.NEQ, resource, (Object[]) moreResources);\n-        }\n-\n-        @Override\n-        public CompleteCondition hasEntitlements(final String entitlement, final String... moreEntitlements) {\n-            this.result = SpecialAttr.ENTITLEMENTS.toString();\n-            return condition(FiqlParser.EQ, entitlement, (Object[]) moreEntitlements);\n-        }\n-\n-        @Override\n-        public CompleteCondition hasNotEntitlements(final String entitlement, final String... moreEntitlements) {\n-            this.result = SpecialAttr.ENTITLEMENTS.toString();\n-            return condition(FiqlParser.NEQ, entitlement, (Object[]) moreEntitlements);\n-        }\n-\n     }\n-\n }"},{"sha":"a4ceb7b8a74a912152fc0a11e87deaee6de101e9","filename":"common/src/main/java/org/apache/syncope/common/search/SyncopeProperty.java","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSyncopeProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSyncopeProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSyncopeProperty.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -24,22 +24,10 @@\n /**\n  * Extension of fluent interface, for {@link SyncopeFiqlSearchConditionBuilder}.\n  */\n-public interface SyncopeProperty extends Property {\n+public abstract interface SyncopeProperty extends Property {\n \n     CompleteCondition nullValue();\n \n     CompleteCondition notNullValue();\n \n-    CompleteCondition hasRoles(Long role, Long... moreRoles);\n-\n-    CompleteCondition hasNotRoles(Long role, Long... moreRoles);\n-\n-    CompleteCondition hasResources(String resource, String... moreResources);\n-\n-    CompleteCondition hasNotResources(String resource, String... moreResources);\n-\n-    CompleteCondition hasEntitlements(String entitlement, String... moreEntitlements);\n-\n-    CompleteCondition hasNotEntitlements(String entitlement, String... moreEntitlements);\n-\n }"},{"sha":"6374d5dae63a03b80644b5540fa9e72f96cbe9ea","filename":"common/src/main/java/org/apache/syncope/common/search/UserFiqlSearchConditionBuilder.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FUserFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FUserFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FUserFiqlSearchConditionBuilder.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.search;\n+\n+import java.util.Map;\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n+\n+/**\n+ * Extends <tt>SyncopeFiqlSearchConditionBuilder</tt> by providing some additional facilities for searching\n+ * users in Syncope.\n+ */\n+public class UserFiqlSearchConditionBuilder extends SyncopeFiqlSearchConditionBuilder {\n+\n+    public UserFiqlSearchConditionBuilder() {\n+        super();\n+    }\n+\n+    public UserFiqlSearchConditionBuilder(final Map<String, String> properties) {\n+        super(properties);\n+    }\n+\n+    @Override\n+    protected Builder newBuilderInstance() {\n+        return new Builder(properties);\n+    }\n+\n+    @Override\n+    public UserProperty is(final String property) {\n+        return newBuilderInstance().is(property);\n+    }\n+\n+    public CompleteCondition hasRoles(final Long role, final Long... moreRoles) {\n+        return newBuilderInstance().is(SpecialAttr.ROLES.toString()).hasRoles(role, moreRoles);\n+    }\n+\n+    public CompleteCondition hasNotRoles(final Long role, final Long... moreRoles) {\n+        return newBuilderInstance().is(SpecialAttr.ROLES.toString()).hasNotRoles(role, moreRoles);\n+    }\n+\n+    public CompleteCondition hasResources(final String resource, final String... moreResources) {\n+        return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasResources(resource, moreResources);\n+    }\n+\n+    public CompleteCondition hasNotResources(final String resource, final String... moreResources) {\n+        return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasNotResources(resource, moreResources);\n+    }\n+\n+    protected static class Builder extends SyncopeFiqlSearchConditionBuilder.Builder\n+            implements UserProperty, CompleteCondition {\n+\n+        public Builder(final Map<String, String> properties) {\n+            super(properties);\n+        }\n+\n+        public Builder(final Builder parent) {\n+            super(parent);\n+        }\n+\n+        @Override\n+        public UserProperty is(final String property) {\n+            Builder b = new Builder(this);\n+            b.result = property;\n+            return b;\n+        }\n+\n+        @Override\n+        public CompleteCondition hasRoles(final Long role, final Long... moreRoles) {\n+            this.result = SpecialAttr.ROLES.toString();\n+            return condition(FiqlParser.EQ, role, (Object[]) moreRoles);\n+        }\n+\n+        @Override\n+        public CompleteCondition hasNotRoles(final Long role, final Long... moreRoles) {\n+            this.result = SpecialAttr.ROLES.toString();\n+            return condition(FiqlParser.NEQ, role, (Object[]) moreRoles);\n+        }\n+\n+        @Override\n+        public CompleteCondition hasResources(final String resource, final String... moreResources) {\n+            this.result = SpecialAttr.RESOURCES.toString();\n+            return condition(FiqlParser.EQ, resource, (Object[]) moreResources);\n+        }\n+\n+        @Override\n+        public CompleteCondition hasNotResources(final String resource, final String... moreResources) {\n+            this.result = SpecialAttr.RESOURCES.toString();\n+            return condition(FiqlParser.NEQ, resource, (Object[]) moreResources);\n+        }\n+\n+    }\n+\n+}"},{"sha":"7710eee314da367d8d5dfb67dcfdff3c7a87a490","filename":"common/src/main/java/org/apache/syncope/common/search/UserProperty.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FUserProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FUserProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FUserProperty.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.search;\n+\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+\n+public interface UserProperty extends SyncopeProperty {\n+\n+    CompleteCondition hasRoles(Long role, Long... moreRoles);\n+\n+    CompleteCondition hasNotRoles(Long role, Long... moreRoles);\n+\n+    CompleteCondition hasResources(String resource, String... moreResources);\n+\n+    CompleteCondition hasNotResources(String resource, String... moreResources);\n+\n+}"},{"sha":"f1b001d93cbd5dd2844f689eb3a8f971ab8de5f2","filename":"common/src/main/java/org/apache/syncope/common/services/RoleService.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -32,8 +32,6 @@\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n \r\n-import org.apache.cxf.jaxrs.model.wadl.Description;\r\n-\r\n import org.apache.syncope.common.mod.RoleMod;\r\n import org.apache.syncope.common.to.RoleTO;\r\n import org.apache.syncope.common.types.ResourceAssociationActionType;\r\n@@ -106,7 +104,7 @@ PagedResult<RoleTO> list(@QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAG\n      */\r\n     @GET\r\n     @Path(\"search\")\r\n-    PagedResult<RoleTO> search(@Description(\"FIQL search expression\") @QueryParam(\"fiql\") String fiql);\r\n+    PagedResult<RoleTO> search(@QueryParam(\"fiql\") String fiql);\r\n \r\n     /**\r\n      * @param fiql FIQL search expression\r\n@@ -116,7 +114,7 @@ PagedResult<RoleTO> list(@QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAG\n      */\r\n     @GET\r\n     @Path(\"search\")\r\n-    PagedResult<RoleTO> search(@Description(\"FIQL search expression\") @QueryParam(\"fiql\") String fiql,\r\n+    PagedResult<RoleTO> search(@QueryParam(\"fiql\") String fiql,\r\n             @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\r\n             @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size);\r\n \r"},{"sha":"9d3ec425bc8a430a58027e5d4f92745cb38e5397","filename":"console/src/main/java/org/apache/syncope/console/pages/ProvisioningModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FProvisioningModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FProvisioningModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FProvisioningModalPage.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -186,7 +186,7 @@ public StatusBeanProvider() {\n         @SuppressWarnings(\"unchecked\")\n         @Override\n         public List<StatusBean> getStatusBeans() {\n-            final String fiql = SyncopeClient.getSearchConditionBuilder().hasResources(resourceTO.getName()).query();\n+            final String fiql = SyncopeClient.getUserSearchConditionBuilder().hasResources(resourceTO.getName()).query();\n \n             final List<T> attributables = new ArrayList<T>();\n             if (UserTO.class.isAssignableFrom(typeRef)) {"},{"sha":"821e9984952be36d920d9dff61596f1b11fd5974","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AbstractSearchPanel.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -28,11 +28,12 @@\n import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n-import org.apache.syncope.client.SyncopeClient;\n+import org.apache.syncope.common.search.RoleFiqlSearchConditionBuilder;\n import org.apache.syncope.common.search.SearchableFields;\n import org.apache.syncope.common.search.SpecialAttr;\n import org.apache.syncope.common.search.SyncopeFiqlSearchConditionBuilder;\n import org.apache.syncope.common.search.SyncopeProperty;\n+import org.apache.syncope.common.search.UserFiqlSearchConditionBuilder;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.rest.AuthRestClient;\n@@ -295,10 +296,12 @@ private List<SearchClause> getSearchClauses(final SearchCondition<SearchBean> sc\n         return clauses;\n     }\n \n+    protected abstract SyncopeFiqlSearchConditionBuilder getSearchConditionBuilder();\n+\n     public String buildFIQL() {\n         LOG.debug(\"Generating FIQL from List<SearchClause>: {}\", searchClauses);\n \n-        SyncopeFiqlSearchConditionBuilder builder = SyncopeClient.getSearchConditionBuilder();\n+        SyncopeFiqlSearchConditionBuilder builder = getSearchConditionBuilder();\n \n         CompleteCondition prevCondition;\n         CompleteCondition condition = null;\n@@ -308,21 +311,25 @@ public String buildFIQL() {\n             switch (searchClauses.get(i).getType()) {\n                 case ENTITLEMENT:\n                     condition = searchClauses.get(i).getComparator() == SearchClause.Comparator.EQUALS\n-                            ? builder.hasEntitlements(searchClauses.get(i).getProperty())\n-                            : builder.hasNotEntitlements(searchClauses.get(i).getProperty());\n+                            ? ((RoleFiqlSearchConditionBuilder) builder).\n+                            hasEntitlements(searchClauses.get(i).getProperty())\n+                            : ((RoleFiqlSearchConditionBuilder) builder).\n+                            hasNotEntitlements(searchClauses.get(i).getProperty());\n                     break;\n \n                 case MEMBERSHIP:\n                     Long roleId = Long.valueOf(searchClauses.get(i).getProperty().split(\" \")[0]);\n                     condition = searchClauses.get(i).getComparator() == SearchClause.Comparator.EQUALS\n-                            ? builder.hasRoles(roleId)\n-                            : builder.hasNotRoles(roleId);\n+                            ? ((UserFiqlSearchConditionBuilder) builder).hasRoles(roleId)\n+                            : ((UserFiqlSearchConditionBuilder) builder).hasNotRoles(roleId);\n                     break;\n \n                 case RESOURCE:\n                     condition = searchClauses.get(i).getComparator() == SearchClause.Comparator.EQUALS\n-                            ? builder.hasResources(searchClauses.get(i).getProperty())\n-                            : builder.hasNotResources(searchClauses.get(i).getProperty());\n+                            ? ((UserFiqlSearchConditionBuilder) builder).\n+                            hasResources(searchClauses.get(i).getProperty())\n+                            : ((UserFiqlSearchConditionBuilder) builder).\n+                            hasNotResources(searchClauses.get(i).getProperty());\n                     break;\n \n                 case ATTRIBUTE:"},{"sha":"be2f8daf91fb8cc6c9ecc008a77d5841b618546d","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSearchPanel.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -22,6 +22,8 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import org.apache.syncope.client.SyncopeClient;\n+import org.apache.syncope.common.search.SyncopeFiqlSearchConditionBuilder;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.wicket.model.LoadableDetachableModel;\n \n@@ -83,4 +85,10 @@ protected List<String> load() {\n             }\n         };\n     }\n+\n+    @Override\n+    protected SyncopeFiqlSearchConditionBuilder getSearchConditionBuilder() {\n+        return SyncopeClient.getRoleSearchConditionBuilder();\n+    }\n+\n }"},{"sha":"df718384e991b9883bf8249021b28731bb6b45b1","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleTabPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleTabPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleTabPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleTabPanel.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -182,7 +182,7 @@ public Page createPage() {\n             protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n                 userListContainer.replace(new UserSearchResultPanel(\"userList\",\n                         true,\n-                        SyncopeClient.getSearchConditionBuilder().hasRoles(selectedNode.getId()).query(),\n+                        SyncopeClient.getUserSearchConditionBuilder().hasRoles(selectedNode.getId()).query(),\n                         pageRef,\n                         userRestClient));\n "},{"sha":"ba009d5c8dc9299e2fe1d3754d7c1d0112011f7a","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserSearchPanel.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -21,6 +21,8 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.syncope.client.SyncopeClient;\n+import org.apache.syncope.common.search.SyncopeFiqlSearchConditionBuilder;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.rest.RoleRestClient;\n@@ -102,4 +104,10 @@ protected List<String> load() {\n             }\n         };\n     }\n+\n+    @Override\n+    protected SyncopeFiqlSearchConditionBuilder getSearchConditionBuilder() {\n+        return SyncopeClient.getUserSearchConditionBuilder();\n+    }\n+\n }"},{"sha":"51ef420d831b76dc89c24ac4761d91c726ea688b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -194,7 +194,7 @@ public ConnInstance getConnector() {\n         return connector;\n     }\n \n-    public void setConnector(ConnInstance connector) {\n+    public void setConnector(final ConnInstance connector) {\n         this.connector = connector;\n     }\n "},{"sha":"8d7383e4b562a13c82bb673e2feb8b2b676f41c8","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -164,9 +164,7 @@ public List<ResourceTO> list(final Long connInstanceId) {\n             resources = connInstance.getResources();\n         }\n \n-        List<ResourceTO> result = binder.getResourceTOs(resources);\n-\n-        return result;\n+        return binder.getResourceTOs(resources);\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_GETCONNECTOROBJECT')\")"},{"sha":"a1997cb0c92003412dbfcb9c5f084960d8f3311d","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -209,8 +209,8 @@ public void notifyByMail() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n         notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n-        notification.setAbout(SyncopeClient.getSearchConditionBuilder().hasRoles(7L).query());\n-        notification.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(8L).query());\n+        notification.setAbout(SyncopeClient.getUserSearchConditionBuilder().hasRoles(7L).query());\n+        notification.setRecipients(SyncopeClient.getUserSearchConditionBuilder().hasRoles(8L).query());\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n@@ -259,8 +259,8 @@ public void issueSYNCOPE192() throws Exception {\n         // 1. create suitable notification for subsequent tests\n         Notification notification = new Notification();\n         notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n-        notification.setAbout(SyncopeClient.getSearchConditionBuilder().hasRoles(7L).query());\n-        notification.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(8L).query());\n+        notification.setAbout(SyncopeClient.getUserSearchConditionBuilder().hasRoles(7L).query());\n+        notification.setRecipients(SyncopeClient.getUserSearchConditionBuilder().hasRoles(8L).query());\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n@@ -312,7 +312,7 @@ public void notifyByMailEmptyAbout() throws Exception {\n         Notification notification = new Notification();\n         notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n         notification.setAbout(null);\n-        notification.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(8L).query());\n+        notification.setRecipients(SyncopeClient.getUserSearchConditionBuilder().hasRoles(8L).query());\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");\n@@ -362,7 +362,7 @@ public void notifyByMailWithRetry() throws Exception {\n         Notification notification = new Notification();\n         notification.addEvent(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n         notification.setAbout(null);\n-        notification.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(8L).query());\n+        notification.setRecipients(SyncopeClient.getUserSearchConditionBuilder().hasRoles(8L).query());\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");"},{"sha":"d270e51e0ae7dd4eebfb37c7716dbbe02a46b4a9","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/NotificationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -59,10 +59,10 @@ public void save() {\n         Notification notification = new Notification();\n         notification.addEvent(\"save\");\n \n-        notification.setAbout(SyncopeClient.getSearchConditionBuilder().\n+        notification.setAbout(SyncopeClient.getUserSearchConditionBuilder().\n                 is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query());\n \n-        notification.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(7L).query());\n+        notification.setRecipients(SyncopeClient.getUserSearchConditionBuilder().hasRoles(7L).query());\n \n         notification.setRecipientAttrName(\"email\");\n         notification.setRecipientAttrType(IntMappingType.UserSchema);"},{"sha":"accf95f6189afbf110140ae64bc302d7a24609b0","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -206,7 +206,7 @@ public void testUserSearch() {\n                 getService(UserService.class);\n \n         PagedResult<UserTO> matchedUsers = userService2.search(\n-                SyncopeClient.getSearchConditionBuilder().isNotNull(\"loginDate\").query());\n+                SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query());\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.getResult().isEmpty());\n         Set<Long> userIds = new HashSet<Long>(matchedUsers.getResult().size());\n@@ -218,7 +218,7 @@ public void testUserSearch() {\n         UserService userService3 = clientFactory.create(\"verdi\", \"password\").getService(UserService.class);\n \n         matchedUsers = userService3.search(\n-                SyncopeClient.getSearchConditionBuilder().isNotNull(\"loginDate\").query());\n+                SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query());\n         assertNotNull(matchedUsers);\n \n         userIds = new HashSet<Long>(matchedUsers.getResult().size());"},{"sha":"ffd04032093fe10432700527144d9b2100ff40c7","filename":"core/src/test/java/org/apache/syncope/core/rest/NotificationTestITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -45,7 +45,7 @@ private NotificationTO buildNotificationTO() {\n         notificationTO.setTraceLevel(TraceLevel.SUMMARY);\n         notificationTO.getEvents().add(\"create\");\n \n-        notificationTO.setAbout(SyncopeClient.getSearchConditionBuilder().\n+        notificationTO.setAbout(SyncopeClient.getUserSearchConditionBuilder().\n                 is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query());\n \n         notificationTO.setRecipientAttrName(\"email\");\n@@ -76,7 +76,7 @@ public void list() {\n     @Test\n     public void create() {\n         NotificationTO notificationTO = buildNotificationTO();\n-        notificationTO.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(7L).query());\n+        notificationTO.setRecipients(SyncopeClient.getUserSearchConditionBuilder().hasRoles(7L).query());\n \n         Response response = notificationService.create(notificationTO);\n         NotificationTO actual = getObject(response.getLocation(), NotificationService.class,\n@@ -91,7 +91,7 @@ public void create() {\n     @Test\n     public void update() {\n         NotificationTO notificationTO = notificationService.read(1L);\n-        notificationTO.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(7L).query());\n+        notificationTO.setRecipients(SyncopeClient.getUserSearchConditionBuilder().hasRoles(7L).query());\n \n         notificationService.update(notificationTO.getId(), notificationTO);\n         NotificationTO actual = notificationService.read(notificationTO.getId());"},{"sha":"5658b410dfcdb59d83ddc684de965dd29299fe76","filename":"core/src/test/java/org/apache/syncope/core/rest/SearchTestITCase.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -42,7 +42,7 @@ public class SearchTestITCase extends AbstractTest {\n     public void searchUser() {\n         // LIKE\n         PagedResult<UserTO> matchedUsers = userService.search(\n-                SyncopeClient.getSearchConditionBuilder().\n+                SyncopeClient.getUserSearchConditionBuilder().\n                 is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query());\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.getResult().isEmpty());\n@@ -53,7 +53,7 @@ public void searchUser() {\n \n         // ISNULL\n         matchedUsers = userService.search(\n-                SyncopeClient.getSearchConditionBuilder().isNull(\"loginDate\").query());\n+                SyncopeClient.getUserSearchConditionBuilder().isNull(\"loginDate\").query());\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.getResult().isEmpty());\n \n@@ -68,7 +68,7 @@ public void searchUser() {\n     @Test\n     public void searchByUsernameAndId() {\n         final PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getSearchConditionBuilder().\n+                SyncopeClient.getUserSearchConditionBuilder().\n                 is(\"username\").equalTo(\"rossini\").and(\"id\").lessThan(2).query());\n \n         assertNotNull(matchingUsers);\n@@ -80,8 +80,7 @@ public void searchByUsernameAndId() {\n     @Test\n     public void searchByRolenameAndId() {\n         final PagedResult<RoleTO> matchingRoles = roleService.search(\n-                SyncopeClient.getSearchConditionBuilder().\n-                is(\"name\").equalTo(\"root\").and(\"id\").lessThan(2).query());\n+                SyncopeClient.getRoleSearchConditionBuilder().is(\"name\").equalTo(\"root\").and(\"id\").lessThan(2).query());\n \n         assertNotNull(matchingRoles);\n         assertEquals(1, matchingRoles.getResult().size());\n@@ -92,7 +91,7 @@ public void searchByRolenameAndId() {\n     @Test\n     public void searchUserByResourceName() {\n         PagedResult<UserTO> matchedUsers = userService.search(\n-                SyncopeClient.getSearchConditionBuilder().hasResources(RESOURCE_NAME_MAPPINGS2).query());\n+                SyncopeClient.getUserSearchConditionBuilder().hasResources(RESOURCE_NAME_MAPPINGS2).query());\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.getResult().isEmpty());\n \n@@ -109,7 +108,7 @@ public void searchUserByResourceName() {\n     public void paginatedSearch() {\n         // LIKE\n         PagedResult<UserTO> matchedUsers = userService.search(\n-                SyncopeClient.getSearchConditionBuilder().\n+                SyncopeClient.getUserSearchConditionBuilder().\n                 is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query(), 1, 2);\n         assertNotNull(matchedUsers);\n \n@@ -120,7 +119,7 @@ public void paginatedSearch() {\n \n         // ISNULL\n         matchedUsers = userService.search(\n-                SyncopeClient.getSearchConditionBuilder().isNull(\"loginDate\").query(), 1, 2);\n+                SyncopeClient.getUserSearchConditionBuilder().isNull(\"loginDate\").query(), 1, 2);\n \n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.getResult().isEmpty());\n@@ -134,22 +133,22 @@ public void paginatedSearch() {\n     @Test\n     public void searchByBooleanAttributableCond() {\n         final PagedResult<RoleTO> matchingRoles = roleService.search(\n-                SyncopeClient.getSearchConditionBuilder().is(\"inheritAttrs\").equalTo(\"true\").query());\n+                SyncopeClient.getRoleSearchConditionBuilder().is(\"inheritAttrs\").equalTo(\"true\").query());\n         assertNotNull(matchingRoles);\n         assertFalse(matchingRoles.getResult().isEmpty());\n     }\n \n     @Test\n     public void searchByEntitlement() {\n         final PagedResult<RoleTO> matchingRoles = roleService.search(\n-                SyncopeClient.getSearchConditionBuilder().hasEntitlements(\"USER_LIST\", \"USER_READ\").query());\n+                SyncopeClient.getRoleSearchConditionBuilder().hasEntitlements(\"USER_LIST\", \"USER_READ\").query());\n         assertNotNull(matchingRoles);\n         assertFalse(matchingRoles.getResult().isEmpty());\n     }\n \n     @Test\n     public void searchByRelationshipAttributableCond() {\n-        final PagedResult<RoleTO> matchingRoles = roleService.search(SyncopeClient.getSearchConditionBuilder().\n+        final PagedResult<RoleTO> matchingRoles = roleService.search(SyncopeClient.getRoleSearchConditionBuilder().\n                 isNotNull(\"passwordPolicy\").and(\"userOwner\").equalTo(5).query());\n \n         assertNotNull(matchingRoles);"},{"sha":"4d1d6a3b7e805bb7e7116c52693a3465b23f6d16","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -412,12 +412,12 @@ public void reconcileFromLDAP() {\n \n         // 2. verify that synchronized role is found, with expected attributes\n         final PagedResult<RoleTO> matchingRoles = roleService.search(\n-                SyncopeClient.getSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query());\n+                SyncopeClient.getRoleSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query());\n         assertNotNull(matchingRoles);\n         assertEquals(1, matchingRoles.getResult().size());\n \n         final PagedResult<UserTO> matchingUsers = userService.search(\n-                SyncopeClient.getSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query());\n+                SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query());\n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.getResult().size());\n \n@@ -435,7 +435,7 @@ public void reconcileFromLDAP() {\n \n         // 3. verify that LDAP group membership is propagated as Syncope role membership\n         final PagedResult<UserTO> members = userService.search(\n-                SyncopeClient.getSearchConditionBuilder().hasRoles(roleTO.getId()).query());\n+                SyncopeClient.getUserSearchConditionBuilder().hasRoles(roleTO.getId()).query());\n         assertNotNull(members);\n         assertEquals(1, members.getResult().size());\n     }\n@@ -537,9 +537,9 @@ private void createNotificationTask(final String sender) {\n         notification.setTraceLevel(TraceLevel.FAILURES);\n         notification.getEvents().add(\"[REST]:[UserController]:[]:[create]:[SUCCESS]\");\n \n-        notification.setAbout(SyncopeClient.getSearchConditionBuilder().hasRoles(7L).query());\n+        notification.setAbout(SyncopeClient.getUserSearchConditionBuilder().hasRoles(7L).query());\n \n-        notification.setRecipients(SyncopeClient.getSearchConditionBuilder().hasRoles(8L).query());\n+        notification.setRecipients(SyncopeClient.getUserSearchConditionBuilder().hasRoles(8L).query());\n         notification.setSelfAsRecipient(true);\n \n         notification.setRecipientAttrName(\"email\");"},{"sha":"d07b5b5227a92172a231131e3d8292b1817aa373","filename":"core/src/test/java/org/apache/syncope/core/rest/data/SearchCondConverterTest.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21a9a607f663d396f14ecea91d02587ccf8ef5f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSearchCondConverterTest.java?ref=21a9a607f663d396f14ecea91d02587ccf8ef5f2","patch":"@@ -35,7 +35,7 @@ public class SearchCondConverterTest extends AbstractNonDAOTest {\n \n     @Test\n     public void eq() {\n-        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().is(\"username\").equalTo(\"rossini\").query();\n+        String fiqlExpression = SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"rossini\").query();\n         assertEquals(\"username==rossini\", fiqlExpression);\n \n         AttributableCond attrCond = new AttributableCond(AttributeCond.Type.EQ);\n@@ -48,7 +48,7 @@ public void eq() {\n \n     @Test\n     public void like() {\n-        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().is(\"username\").equalTo(\"ros*\").query();\n+        String fiqlExpression = SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"ros*\").query();\n         assertEquals(\"username==ros*\", fiqlExpression);\n \n         AttributeCond attrCond = new AttributableCond(AttributeCond.Type.LIKE);\n@@ -61,7 +61,7 @@ public void like() {\n \n     @Test\n     public void isNull() {\n-        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().is(\"loginDate\").nullValue().query();\n+        String fiqlExpression = SyncopeClient.getUserSearchConditionBuilder().is(\"loginDate\").nullValue().query();\n         assertEquals(\"loginDate==\" + SpecialAttr.NULL, fiqlExpression);\n \n         AttributeCond attrCond = new AttributeCond(AttributeCond.Type.ISNULL);\n@@ -73,7 +73,7 @@ public void isNull() {\n \n     @Test\n     public void isNotNull() {\n-        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().is(\"loginDate\").notNullValue().query();\n+        String fiqlExpression = SyncopeClient.getUserSearchConditionBuilder().is(\"loginDate\").notNullValue().query();\n         assertEquals(\"loginDate!=\" + SpecialAttr.NULL, fiqlExpression);\n \n         AttributeCond attrCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n@@ -85,7 +85,7 @@ public void isNotNull() {\n \n     @Test\n     public void roles() {\n-        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().hasRoles(1L).query();\n+        String fiqlExpression = SyncopeClient.getUserSearchConditionBuilder().hasRoles(1L).query();\n         assertEquals(SpecialAttr.ROLES + \"==1\", fiqlExpression);\n \n         MembershipCond membCond = new MembershipCond();\n@@ -97,7 +97,7 @@ public void roles() {\n \n     @Test\n     public void resources() {\n-        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().hasResources(\"resource-ldap\").query();\n+        String fiqlExpression = SyncopeClient.getUserSearchConditionBuilder().hasResources(\"resource-ldap\").query();\n         assertEquals(SpecialAttr.RESOURCES + \"==resource-ldap\", fiqlExpression);\n \n         ResourceCond resCond = new ResourceCond();\n@@ -109,7 +109,7 @@ public void resources() {\n \n     @Test\n     public void entitlements() {\n-        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().hasEntitlements(\"USER_LIST\").query();\n+        String fiqlExpression = SyncopeClient.getRoleSearchConditionBuilder().hasEntitlements(\"USER_LIST\").query();\n         assertEquals(SpecialAttr.ENTITLEMENTS + \"==USER_LIST\", fiqlExpression);\n \n         EntitlementCond entCond = new EntitlementCond();\n@@ -121,7 +121,7 @@ public void entitlements() {\n \n     @Test\n     public void and() {\n-        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().\n+        String fiqlExpression = SyncopeClient.getUserSearchConditionBuilder().\n                 is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query();\n         assertEquals(\"fullname==*o*;fullname==*i*\", fiqlExpression);\n \n@@ -140,7 +140,7 @@ public void and() {\n \n     @Test\n     public void or() {\n-        String fiqlExpression = SyncopeClient.getSearchConditionBuilder().\n+        String fiqlExpression = SyncopeClient.getUserSearchConditionBuilder().\n                 is(\"fullname\").equalTo(\"*o*\", \"*i*\", \"*ini\").query();\n         assertEquals(\"fullname==*o*,fullname==*i*,fullname==*ini\", fiqlExpression);\n "}]}