{"sha":"e199b01d92dd942fd0047af6953a5d803bc278e5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUxOTliMDFkOTJkZDk0MmZkMDA0N2FmNjk1M2E1ZDgwM2JjMjc4ZTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-17T16:28:57Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-17T16:28:57Z"},"message":"Adding final keywords in order to meet out Checkstyle rules + fixing incorrect marshalling in NotificationRestClient#getEvents\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1434763 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"855f197a324d69a1aa67ff0cd3a666561e574739","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/855f197a324d69a1aa67ff0cd3a666561e574739"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e199b01d92dd942fd0047af6953a5d803bc278e5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e199b01d92dd942fd0047af6953a5d803bc278e5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e199b01d92dd942fd0047af6953a5d803bc278e5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e199b01d92dd942fd0047af6953a5d803bc278e5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bd3bcbc501672ec75d45a93d4211278476041ea8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bd3bcbc501672ec75d45a93d4211278476041ea8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bd3bcbc501672ec75d45a93d4211278476041ea8"}],"stats":{"total":554,"additions":277,"deletions":277},"files":[{"sha":"9ac8997b5d69348aef22f1c3ed13bb4a342f7246","filename":"client/src/main/java/org/apache/syncope/services/proxy/ConfigurationServiceProxy.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -23,27 +23,25 @@\n import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n-\r\n import javax.ws.rs.core.Response;\r\n-\r\n import org.apache.syncope.client.to.ConfigurationTO;\r\n import org.apache.syncope.services.ConfigurationService;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class ConfigurationServiceProxy extends SpringServiceProxy implements ConfigurationService {\r\n \r\n-    public ConfigurationServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+    public ConfigurationServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r\n-    public ConfigurationTO create(ConfigurationTO configurationTO) {\r\n-        return getRestTemplate()\r\n-                .postForObject(baseUrl + \"configuration/create\", configurationTO, ConfigurationTO.class);\r\n+    public ConfigurationTO create(final ConfigurationTO configurationTO) {\r\n+        return getRestTemplate().postForObject(\r\n+                baseUrl + \"configuration/create\", configurationTO, ConfigurationTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public ConfigurationTO delete(String key) {\r\n+    public ConfigurationTO delete(final String key) {\r\n         return getRestTemplate().getForObject(baseUrl + \"configuration/delete/{key}.json\", ConfigurationTO.class, key);\r\n     }\r\n \r\n@@ -54,12 +52,12 @@ public List<ConfigurationTO> list() {\n     }\r\n \r\n     @Override\r\n-    public ConfigurationTO read(String key) {\r\n+    public ConfigurationTO read(final String key) {\r\n         return getRestTemplate().getForObject(baseUrl + \"configuration/read/{key}.json\", ConfigurationTO.class, key);\r\n     }\r\n \r\n     @Override\r\n-    public ConfigurationTO update(String key, ConfigurationTO configurationTO) {\r\n+    public ConfigurationTO update(final String key, final ConfigurationTO configurationTO) {\r\n         return getRestTemplate()\r\n                 .postForObject(baseUrl + \"configuration/update\", configurationTO, ConfigurationTO.class);\r\n     }\r\n@@ -81,5 +79,4 @@ public Response dbExport() {\n         return Response.ok(getRestTemplate().getForObject(baseUrl + \"configuration/dbexport\", InputStream.class))\r\n                 .build();\r\n     }\r\n-\r\n }\r"},{"sha":"8020b2a4bfb69263d303d32ebebacb3fcf00024c","filename":"client/src/main/java/org/apache/syncope/services/proxy/ConnectorServiceProxy.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -20,7 +20,6 @@\n \r\n import java.util.Arrays;\r\n import java.util.List;\r\n-\r\n import org.apache.syncope.client.to.ConnBundleTO;\r\n import org.apache.syncope.client.to.ConnInstanceTO;\r\n import org.apache.syncope.services.ConnectorService;\r\n@@ -29,30 +28,30 @@\n \r\n public class ConnectorServiceProxy extends SpringServiceProxy implements ConnectorService {\r\n \r\n-    public ConnectorServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+    public ConnectorServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r\n-    public ConnInstanceTO create(ConnInstanceTO connectorTO) {\r\n+    public ConnInstanceTO create(final ConnInstanceTO connectorTO) {\r\n         return getRestTemplate().postForObject(baseUrl + \"connector/create.json\", connectorTO,\r\n                 ConnInstanceTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public ConnInstanceTO update(Long connectorId, ConnInstanceTO connectorTO) {\r\n+    public ConnInstanceTO update(final Long connectorId, final ConnInstanceTO connectorTO) {\r\n         return getRestTemplate().postForObject(baseUrl + \"connector/update.json\", connectorTO,\r\n                 ConnInstanceTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public ConnInstanceTO delete(Long connectorId) {\r\n+    public ConnInstanceTO delete(final Long connectorId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"connector/delete/{connectorId}.json\",\r\n                 ConnInstanceTO.class, connectorId);\r\n     }\r\n \r\n     @Override\r\n-    public List<ConnInstanceTO> list(String lang) {\r\n+    public List<ConnInstanceTO> list(final String lang) {\r\n         String param = (lang != null)\r\n                 ? \"?lang=\" + lang\r\n                 : \"\";\r\n@@ -62,13 +61,13 @@ public List<ConnInstanceTO> list(String lang) {\n     }\r\n \r\n     @Override\r\n-    public ConnInstanceTO read(Long connectorId) {\r\n+    public ConnInstanceTO read(final Long connectorId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"connector/read/{connectorId}\", ConnInstanceTO.class,\r\n                 connectorId);\r\n     }\r\n \r\n     @Override\r\n-    public List<ConnBundleTO> getBundles(String lang) {\r\n+    public List<ConnBundleTO> getBundles(final String lang) {\r\n         String param = (lang != null)\r\n                 ? \"?lang=\" + lang\r\n                 : \"\";\r\n@@ -78,31 +77,29 @@ public List<ConnBundleTO> getBundles(String lang) {\n     }\r\n \r\n     @Override\r\n-    public List<String> getSchemaNames(Long connectorId, ConnInstanceTO connectorTO, boolean showall) {\r\n-        String param = (showall)\r\n-                ? \"?showall=true\"\r\n-                : \"?showall=false\";\r\n+    public List<String> getSchemaNames(final Long connectorId, final ConnInstanceTO connectorTO, boolean showall) {\r\n+        final String queryString = \"?showall=\" + String.valueOf(showall);\r\n \r\n-        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"connector/schema/list\" + param, connectorTO,\r\n+        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"connector/schema/list\" + queryString,\r\n+                connectorTO,\r\n                 String[].class));\r\n     }\r\n \r\n     @Override\r\n-    public List<ConnConfProperty> getConfigurationProperties(Long connectorId) {\r\n+    public List<ConnConfProperty> getConfigurationProperties(final Long connectorId) {\r\n         return Arrays.asList(getRestTemplate()\r\n                 .getForObject(baseUrl + \"connector/{connectorId}/configurationProperty/list\",\r\n-                        ConnConfProperty[].class, connectorId));\r\n+                ConnConfProperty[].class, connectorId));\r\n     }\r\n \r\n     @Override\r\n-    public boolean validate(ConnInstanceTO connectorTO) {\r\n+    public boolean validate(final ConnInstanceTO connectorTO) {\r\n         return getRestTemplate().postForObject(baseUrl + \"connector/check.json\", connectorTO, Boolean.class);\r\n     }\r\n \r\n     @Override\r\n-    public ConnInstanceTO readConnectorBean(String resourceName) {\r\n+    public ConnInstanceTO readConnectorBean(final String resourceName) {\r\n         return getRestTemplate().getForObject(baseUrl + \"connector/{resourceName}/connectorBean\",\r\n                 ConnInstanceTO.class, resourceName);\r\n     }\r\n-\r\n }\r"},{"sha":"6d89f3eccf4932dd1f012d6f57f1e4f3591ff80d","filename":"client/src/main/java/org/apache/syncope/services/proxy/EntitlementServiceProxy.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -21,13 +21,12 @@\n import java.util.Arrays;\r\n import java.util.HashSet;\r\n import java.util.Set;\r\n-\r\n import org.apache.syncope.services.EntitlementService;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class EntitlementServiceProxy extends SpringServiceProxy implements EntitlementService {\r\n \r\n-    public EntitlementServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+    public EntitlementServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n@@ -42,5 +41,4 @@ public Set<String> getMyEntitlements() {\n         return new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(baseUrl + \"auth/entitlements.json\",\r\n                 String[].class)));\r\n     }\r\n-\r\n }\r"},{"sha":"bf3518a3aace468fc80c4398e76d475b106b7f6c","filename":"client/src/main/java/org/apache/syncope/services/proxy/LoggerServiceProxy.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -18,19 +18,17 @@\n  */\r\n package org.apache.syncope.services.proxy;\r\n \r\n+import ch.qos.logback.classic.Level;\r\n import java.util.Arrays;\r\n import java.util.List;\r\n-\r\n import org.apache.syncope.client.to.LoggerTO;\r\n import org.apache.syncope.services.LoggerService;\r\n import org.apache.syncope.types.AuditLoggerName;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n-import ch.qos.logback.classic.Level;\r\n-\r\n public class LoggerServiceProxy extends SpringServiceProxy implements LoggerService {\r\n \r\n-    public LoggerServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+    public LoggerServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n@@ -41,29 +39,27 @@ public List<LoggerTO> listLogs() {\n \r\n     @Override\r\n     public List<AuditLoggerName> listAudits() {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"logger/audit/list\",\r\n-                AuditLoggerName[].class));\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"logger/audit/list\", AuditLoggerName[].class));\r\n     }\r\n \r\n     @Override\r\n-    public LoggerTO update(String name, Level level) {\r\n+    public LoggerTO update(final String name, final Level level) {\r\n         return getRestTemplate().postForObject(baseUrl + \"logger/log/{name}/{level}\", null, LoggerTO.class, name,\r\n                 level);\r\n     }\r\n \r\n     @Override\r\n-    public LoggerTO delete(String name) {\r\n+    public LoggerTO delete(final String name) {\r\n         return getRestTemplate().getForObject(baseUrl + \"logger/log/delete/{name}\", LoggerTO.class, name);\r\n     }\r\n \r\n     @Override\r\n-    public void enableAudit(AuditLoggerName auditLoggerName) {\r\n+    public void enableAudit(final AuditLoggerName auditLoggerName) {\r\n         getRestTemplate().put(baseUrl + \"logger/audit/enable\", auditLoggerName);\r\n     }\r\n \r\n     @Override\r\n-    public void disableAudit(AuditLoggerName auditLoggerName) {\r\n+    public void disableAudit(final AuditLoggerName auditLoggerName) {\r\n         getRestTemplate().put(baseUrl + \"logger/audit/disable\", auditLoggerName);\r\n     }\r\n-\r\n }\r"},{"sha":"eba2f0bd97ccc9ef971160b68d488885e069ee61","filename":"client/src/main/java/org/apache/syncope/services/proxy/NotificationServiceProxy.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FNotificationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FNotificationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FNotificationServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -20,19 +20,18 @@\n \r\n import java.util.Arrays;\r\n import java.util.List;\r\n-\r\n import org.apache.syncope.client.to.NotificationTO;\r\n import org.apache.syncope.services.NotificationService;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class NotificationServiceProxy extends SpringServiceProxy implements NotificationService {\r\n \r\n-    public NotificationServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+    public NotificationServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r\n-    public NotificationTO read(Long notificationId) {\r\n+    public NotificationTO read(final Long notificationId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"notification/read/{notificationId}.json\",\r\n                 NotificationTO.class, notificationId);\r\n     }\r\n@@ -44,21 +43,20 @@ public List<NotificationTO> list() {\n     }\r\n \r\n     @Override\r\n-    public NotificationTO create(NotificationTO notificationTO) {\r\n+    public NotificationTO create(final NotificationTO notificationTO) {\r\n         return getRestTemplate().postForObject(baseUrl + \"notification/create.json\", notificationTO,\r\n                 NotificationTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public NotificationTO update(Long notificationId, NotificationTO notificationTO) {\r\n+    public NotificationTO update(final Long notificationId, final NotificationTO notificationTO) {\r\n         return getRestTemplate().postForObject(baseUrl + \"notification/update.json\", notificationTO,\r\n                 NotificationTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public NotificationTO delete(Long notificationId) {\r\n+    public NotificationTO delete(final Long notificationId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"notification/delete/{notificationId}.json\",\r\n                 NotificationTO.class, notificationId);\r\n     }\r\n-\r\n }\r"},{"sha":"299f3d61c50d1dc85689f336310460cc18b99f13","filename":"client/src/main/java/org/apache/syncope/services/proxy/PolicyServiceProxy.java","status":"modified","additions":50,"deletions":54,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -20,7 +20,6 @@\n \r\n import java.util.Arrays;\r\n import java.util.List;\r\n-\r\n import org.apache.syncope.client.to.AccountPolicyTO;\r\n import org.apache.syncope.client.to.PasswordPolicyTO;\r\n import org.apache.syncope.client.to.PolicyTO;\r\n@@ -29,91 +28,89 @@\n import org.apache.syncope.types.PolicyType;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n+@SuppressWarnings(\"unchecked\")\r\n public class PolicyServiceProxy extends SpringServiceProxy implements PolicyService {\r\n \r\n-    public PolicyServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+    public PolicyServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends PolicyTO> T create(PolicyType type, final T policyTO) {\r\n-        @SuppressWarnings(\"unchecked\")\r\n-        T result = (T) getRestTemplate().postForObject(baseUrl + \"policy/{kind}/create\", policyTO, policyTO.getClass(),\r\n-        \t\ttypeToUrl(policyTO.getType()));\r\n-        return result;\r\n+    public <T extends PolicyTO> T create(final PolicyType type, final T policyTO) {\r\n+        return (T) getRestTemplate().postForObject(baseUrl + \"policy/{kind}/create\", policyTO, policyTO.getClass(),\r\n+                typeToUrl(policyTO.getType()));\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n-    public <T extends PolicyTO> T delete(PolicyType type, Long policyId) {\r\n-        T result = (T) getRestTemplate().getForObject(baseUrl + \"policy/delete/{id}\", getTOClass(type), policyId);\r\n-        return result;\r\n+    public <T extends PolicyTO> T delete(final PolicyType type, final Long policyId) {\r\n+        return (T) getRestTemplate().getForObject(baseUrl + \"policy/delete/{id}\", getTOClass(type), policyId);\r\n     }\r\n \r\n     @Override\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T extends PolicyTO> List<T> listByType(PolicyType type) {\r\n+    public <T extends PolicyTO> List<T> listByType(final PolicyType type) {\r\n         switch (type) {\r\n-        case ACCOUNT:\r\n-        case GLOBAL_ACCOUNT:\r\n-\t\t\treturn (List<T>) Arrays.asList(getRestTemplate().getForObject(\r\n-\t\t\t\t\tbaseUrl + \"policy/{kind}/list\", AccountPolicyTO[].class,\r\n-\t\t\t\t\ttype));\r\n-        case PASSWORD:\r\n-        case GLOBAL_PASSWORD:\r\n-\t\t\treturn (List<T>) Arrays.asList(getRestTemplate().getForObject(\r\n-\t\t\t\t\tbaseUrl + \"policy/{kind}/list\", PasswordPolicyTO[].class,\r\n-\t\t\t\t\ttype));\r\n-        case SYNC:\r\n-        case GLOBAL_SYNC:\r\n-\t\t\treturn (List<T>) Arrays.asList(getRestTemplate().getForObject(\r\n-\t\t\t\t\tbaseUrl + \"policy/{kind}/list\", SyncPolicyTO[].class,\r\n-\t\t\t\t\ttype));\r\n-        default:\r\n-            throw new IllegalArgumentException(\"Policy Type not supported: \" + type);\r\n+            case ACCOUNT:\r\n+            case GLOBAL_ACCOUNT:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(\r\n+                        baseUrl + \"policy/{kind}/list\", AccountPolicyTO[].class,\r\n+                        type));\r\n+\r\n+            case PASSWORD:\r\n+            case GLOBAL_PASSWORD:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(\r\n+                        baseUrl + \"policy/{kind}/list\", PasswordPolicyTO[].class,\r\n+                        type));\r\n+\r\n+            case SYNC:\r\n+            case GLOBAL_SYNC:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(\r\n+                        baseUrl + \"policy/{kind}/list\", SyncPolicyTO[].class,\r\n+                        type));\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"Policy Type not supported: \" + type);\r\n         }\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n-    public <T extends PolicyTO> T read(PolicyType type, Long policyId) {\r\n-        T result = (T) getRestTemplate().getForObject(baseUrl + \"policy/read/{id}\", getTOClass(type), policyId);\r\n-        return result;\r\n+    public <T extends PolicyTO> T read(final PolicyType type, final Long policyId) {\r\n+        return (T) getRestTemplate().getForObject(baseUrl + \"policy/read/{id}\", getTOClass(type), policyId);\r\n     }\r\n \r\n     @Override\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T extends PolicyTO> T readGlobal(PolicyType type) {\r\n-        T result = (T) getRestTemplate().getForObject(baseUrl + \"policy/{kind}/global/read\", getTOClass(type),\r\n+    public <T extends PolicyTO> T readGlobal(final PolicyType type) {\r\n+        return (T) getRestTemplate().getForObject(baseUrl + \"policy/{kind}/global/read\", getTOClass(type),\r\n                 typeToUrl(type));\r\n-        return result;\r\n     }\r\n \r\n     @Override\r\n-    public <T extends PolicyTO> T update(PolicyType type, Long policyId, T policyTO) {\r\n+    public <T extends PolicyTO> T update(final PolicyType type, final Long policyId, final T policyTO) {\r\n         @SuppressWarnings(\"unchecked\")\r\n         T result = (T) getRestTemplate().postForObject(baseUrl + \"policy/{kind}/update\", policyTO, policyTO.getClass(),\r\n-        \t\ttypeToUrl(policyTO.getType()));\r\n+                typeToUrl(policyTO.getType()));\r\n         return result;\r\n     }\r\n \r\n-    private Class<? extends PolicyTO> getTOClass(PolicyType type) {\r\n+    private Class<? extends PolicyTO> getTOClass(final PolicyType type) {\r\n         switch (type) {\r\n-        case ACCOUNT:\r\n-        case GLOBAL_ACCOUNT:\r\n-            return AccountPolicyTO.class;\r\n-        case PASSWORD:\r\n-        case GLOBAL_PASSWORD:\r\n-            return PasswordPolicyTO.class;\r\n-        case SYNC:\r\n-        case GLOBAL_SYNC:\r\n-            return SyncPolicyTO.class;\r\n-        default:\r\n-            throw new IllegalArgumentException(\"Policy Type not supported: \" + type);\r\n+            case ACCOUNT:\r\n+            case GLOBAL_ACCOUNT:\r\n+                return AccountPolicyTO.class;\r\n+\r\n+            case PASSWORD:\r\n+            case GLOBAL_PASSWORD:\r\n+                return PasswordPolicyTO.class;\r\n+\r\n+            case SYNC:\r\n+            case GLOBAL_SYNC:\r\n+                return SyncPolicyTO.class;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"Policy Type not supported: \" + type);\r\n         }\r\n     }\r\n \r\n-    private String typeToUrl(PolicyType type) {\r\n+    private String typeToUrl(final PolicyType type) {\r\n         String url = type.name().toLowerCase();\r\n         int index = url.indexOf(\"_\");\r\n         if (index != -1) {\r\n@@ -122,5 +119,4 @@ private String typeToUrl(PolicyType type) {\n             return url;\r\n         }\r\n     }\r\n-\r\n }\r"},{"sha":"1da3d509a97fc21c4a1b1a4bc748a06ad1f05ad6","filename":"client/src/main/java/org/apache/syncope/services/proxy/ReportServiceProxy.java","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FReportServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FReportServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FReportServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -21,9 +21,7 @@\n import java.io.InputStream;\r\n import java.util.Arrays;\r\n import java.util.List;\r\n-\r\n import javax.ws.rs.core.Response;\r\n-\r\n import org.apache.syncope.client.to.ReportExecTO;\r\n import org.apache.syncope.client.to.ReportTO;\r\n import org.apache.syncope.services.ReportService;\r\n@@ -32,17 +30,17 @@\n \r\n public class ReportServiceProxy extends SpringServiceProxy implements ReportService {\r\n \r\n-    public ReportServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+    public ReportServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r\n-    public ReportTO create(ReportTO reportTO) {\r\n+    public ReportTO create(final ReportTO reportTO) {\r\n         return getRestTemplate().postForObject(baseUrl + \"report/create\", reportTO, ReportTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public ReportTO update(Long reportId, ReportTO reportTO) {\r\n+    public ReportTO update(final Long reportId, final ReportTO reportTO) {\r\n         return getRestTemplate().postForObject(baseUrl + \"report/update\", reportTO, ReportTO.class);\r\n     }\r\n \r\n@@ -57,7 +55,7 @@ public List<ReportTO> list() {\n     }\r\n \r\n     @Override\r\n-    public List<ReportTO> list(int page, int size) {\r\n+    public List<ReportTO> list(final int page, final int size) {\r\n         return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"report/list/{page}/{size}\", ReportTO[].class,\r\n                 page, size));\r\n     }\r\n@@ -74,18 +72,18 @@ public List<String> getReportletConfClasses() {\n     }\r\n \r\n     @Override\r\n-    public ReportTO read(Long reportId) {\r\n+    public ReportTO read(final Long reportId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"report/read/{reportId}\", ReportTO.class, reportId);\r\n     }\r\n \r\n     @Override\r\n-    public ReportExecTO readExecution(Long executionId) {\r\n+    public ReportExecTO readExecution(final Long executionId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"report/execution/read/{executionId}\", ReportExecTO.class,\r\n                 executionId);\r\n     }\r\n \r\n     @Override\r\n-    public Response exportExecutionResult(Long executionId, ReportExecExportFormat fmt) {\r\n+    public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\r\n         String format = (fmt != null)\r\n                 ? \"?fmt=\" + fmt.toString()\r\n                 : \"\";\r\n@@ -95,20 +93,19 @@ public Response exportExecutionResult(Long executionId, ReportExecExportFormat f\n     }\r\n \r\n     @Override\r\n-    public ReportExecTO execute(Long reportId) {\r\n+    public ReportExecTO execute(final Long reportId) {\r\n         return getRestTemplate().postForObject(baseUrl + \"report/execute/{reportId}\", null, ReportExecTO.class,\r\n                 reportId);\r\n     }\r\n \r\n     @Override\r\n-    public ReportTO delete(Long reportId) {\r\n+    public ReportTO delete(final Long reportId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"report/delete/{reportId}\", ReportTO.class, reportId);\r\n     }\r\n \r\n     @Override\r\n-    public ReportExecTO deleteExecution(Long executionId) {\r\n+    public ReportExecTO deleteExecution(final Long executionId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"report/execution/delete/{executionId}\", ReportExecTO.class,\r\n                 executionId);\r\n     }\r\n-\r\n }\r"},{"sha":"ebdad91bc3c42c8c912df22c4fa30a49e187b3bc","filename":"client/src/main/java/org/apache/syncope/services/proxy/RoleServiceProxy.java","status":"modified","additions":15,"deletions":17,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FRoleServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FRoleServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FRoleServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -20,7 +20,6 @@\n \r\n import java.util.Arrays;\r\n import java.util.List;\r\n-\r\n import org.apache.syncope.client.mod.RoleMod;\r\n import org.apache.syncope.client.search.NodeCond;\r\n import org.apache.syncope.client.to.RoleTO;\r\n@@ -29,14 +28,14 @@\n \r\n public class RoleServiceProxy extends SpringServiceProxy implements RoleService {\r\n \r\n-    public RoleServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+    public RoleServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r\n-    public List<RoleTO> children(Long roleId) {\r\n-        return Arrays\r\n-                .asList(getRestTemplate().getForObject(baseUrl + \"role/children/{roleId}.json\", RoleTO[].class, roleId));\r\n+    public List<RoleTO> children(final Long roleId) {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"role/children/{roleId}.json\",\r\n+                RoleTO[].class, roleId));\r\n     }\r\n \r\n     @Override\r\n@@ -46,12 +45,12 @@ public Integer count() {\n     }\r\n \r\n     @Override\r\n-    public RoleTO create(RoleTO roleTO) {\r\n+    public RoleTO create(final RoleTO roleTO) {\r\n         return getRestTemplate().postForObject(baseUrl + \"role/create\", roleTO, RoleTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public RoleTO delete(Long roleId) {\r\n+    public RoleTO delete(final Long roleId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"role/delete/{roleId}\", RoleTO.class, roleId);\r\n     }\r\n \r\n@@ -61,45 +60,44 @@ public List<RoleTO> list() {\n     }\r\n \r\n     @Override\r\n-    public List<RoleTO> list(int page, int size) {\r\n-        //        return Arrays.asList(getRestTemplate().getForObject(baseURL + \"role/list.json\", RoleTO[].class, page, size));\r\n+    public List<RoleTO> list(final int page, final int size) {\r\n+        //return Arrays.asList(getRestTemplate().getForObject(baseURL + \"role/list.json\", RoleTO[].class, page, size));\r\n         throw new UnsupportedOperationException();\r\n     }\r\n \r\n     @Override\r\n-    public RoleTO parent(Long roleId) {\r\n+    public RoleTO parent(final Long roleId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"role/parent/{roleId}.json\", RoleTO.class, roleId);\r\n     }\r\n \r\n     @Override\r\n-    public RoleTO read(Long roleId) {\r\n+    public RoleTO read(final Long roleId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"role/read/{roleId}.json\", RoleTO.class, roleId);\r\n     }\r\n \r\n     @Override\r\n-    public List<RoleTO> search(NodeCond searchCondition) {\r\n+    public List<RoleTO> search(final NodeCond searchCondition) {\r\n         return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"role/search\", searchCondition, RoleTO[].class));\r\n     }\r\n \r\n     @Override\r\n-    public List<RoleTO> search(NodeCond searchCondition, int page, int size) {\r\n+    public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size) {\r\n         return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"role/search/{page}/{size}\", searchCondition,\r\n                 RoleTO[].class, page, size));\r\n     }\r\n \r\n     @Override\r\n-    public int searchCount(NodeCond searchCondition) {\r\n+    public int searchCount(final NodeCond searchCondition) {\r\n         return getRestTemplate().postForObject(baseUrl + \"role/search/count.json\", searchCondition, Integer.class);\r\n     }\r\n \r\n     @Override\r\n-    public RoleTO selfRead(Long roleId) {\r\n+    public RoleTO selfRead(final Long roleId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"role/selfRead/{roleId}\", RoleTO.class, roleId);\r\n     }\r\n \r\n     @Override\r\n-    public RoleTO update(Long roleId, RoleMod roleMod) {\r\n+    public RoleTO update(final Long roleId, final RoleMod roleMod) {\r\n         return getRestTemplate().postForObject(baseUrl + \"role/update\", roleMod, RoleTO.class);\r\n     }\r\n-\r\n }\r"},{"sha":"41e256138badb9dcce2622b8ef140aa0f2195ed1","filename":"client/src/main/java/org/apache/syncope/services/proxy/SchemaServiceProxy.java","status":"modified","additions":38,"deletions":27,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -32,60 +32,71 @@\n @SuppressWarnings(\"unchecked\")\r\n public class SchemaServiceProxy extends SpringServiceProxy implements SchemaService {\r\n \r\n-    public SchemaServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+    public SchemaServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T create(AttributableType kind, SchemaType type, T schemaTO) {\r\n+    public <T extends AbstractSchemaTO> T create(final AttributableType kind, final SchemaType type, final T schemaTO) {\r\n         return (T) getRestTemplate().postForObject(baseUrl + type + \"/{kind}/create\", schemaTO, getTOClass(type), kind);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T delete(AttributableType kind, SchemaType type, String schemaName) {\r\n+    public <T extends AbstractSchemaTO> T delete(final AttributableType kind, final SchemaType type,\r\n+            final String schemaName) {\r\n+\r\n         return (T) getRestTemplate().getForObject(baseUrl + type + \"/{kind}/delete/{name}.json\", getTOClass(type), kind,\r\n                 schemaName);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> List<T> list(AttributableType kind, SchemaType type) {\r\n+    public <T extends AbstractSchemaTO> List<T> list(final AttributableType kind, final SchemaType type) {\r\n         switch (type) {\r\n-        case NORMAL:\r\n-            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n-                    SchemaTO[].class, kind));\r\n-        case DERIVED:\r\n-            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n-                    DerivedSchemaTO[].class, kind));\r\n-        case VIRTUAL:\r\n-            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n-                    VirtualSchemaTO[].class, kind));\r\n-        default:\r\n-            throw new IllegalArgumentException(\"SchemaType is not supported.\");\r\n+            case NORMAL:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n+                        SchemaTO[].class, kind));\r\n+\r\n+            case DERIVED:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n+                        DerivedSchemaTO[].class, kind));\r\n+\r\n+            case VIRTUAL:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n+                        VirtualSchemaTO[].class, kind));\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"SchemaType is not supported.\");\r\n         }\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T read(AttributableType kind, SchemaType type, String schemaName) {\r\n+    public <T extends AbstractSchemaTO> T read(final AttributableType kind, final SchemaType type,\r\n+            final String schemaName) {\r\n+\r\n         return (T) getRestTemplate().getForObject(baseUrl + type + \"/{kind}/read/{name}.json\", getTOClass(type), kind,\r\n                 schemaName);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T update(AttributableType kind, SchemaType type, String schemaName, T schemaTO) {\r\n+    public <T extends AbstractSchemaTO> T update(final AttributableType kind, final SchemaType type,\r\n+            final String schemaName, final T schemaTO) {\r\n+\r\n         return (T) getRestTemplate().postForObject(baseUrl + type + \"/{kind}/update\", schemaTO, getTOClass(type), kind);\r\n     }\r\n \r\n-    private Class<? extends AbstractSchemaTO> getTOClass(SchemaType type) {\r\n+    private Class<? extends AbstractSchemaTO> getTOClass(final SchemaType type) {\r\n         switch (type) {\r\n-        case NORMAL:\r\n-            return SchemaTO.class;\r\n-        case DERIVED:\r\n-            return DerivedSchemaTO.class;\r\n-        case VIRTUAL:\r\n-            return VirtualSchemaTO.class;\r\n-        default:\r\n-            throw new IllegalArgumentException(\"SchemaType is not supported: \" + type);\r\n+            case NORMAL:\r\n+                return SchemaTO.class;\r\n+\r\n+            case DERIVED:\r\n+                return DerivedSchemaTO.class;\r\n+\r\n+            case VIRTUAL:\r\n+                return VirtualSchemaTO.class;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"SchemaType is not supported: \" + type);\r\n         }\r\n     }\r\n-\r\n }\r"},{"sha":"249f2031934b251b1906503abc610d6f63f20354","filename":"client/src/main/java/org/apache/syncope/services/proxy/SpringServiceProxy.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -22,16 +22,16 @@\n \r\n public abstract class SpringServiceProxy {\r\n \r\n-\tprotected String baseUrl;\r\n+    protected String baseUrl;\r\n \r\n-\tprivate RestTemplate restTemplate;\r\n+    private RestTemplate restTemplate;\r\n \r\n-\tpublic SpringServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-\t\tthis.baseUrl = baseUrl;\r\n-\t\tthis.restTemplate = restTemplate;\r\n-\t}\r\n+    public SpringServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n+        this.baseUrl = baseUrl;\r\n+        this.restTemplate = restTemplate;\r\n+    }\r\n \r\n-\tpublic void setRestTemplate(RestTemplate restTemplate) {\r\n+    public void setRestTemplate(final RestTemplate restTemplate) {\r\n         this.restTemplate = restTemplate;\r\n     }\r\n \r"},{"sha":"ff12219c278b539294af7079d94af221d9dce685","filename":"client/src/main/java/org/apache/syncope/services/proxy/TaskServiceProxy.java","status":"modified","additions":84,"deletions":65,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -22,7 +22,6 @@\n import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n-\r\n import org.apache.syncope.client.to.NotificationTaskTO;\r\n import org.apache.syncope.client.to.PropagationTaskTO;\r\n import org.apache.syncope.client.to.SchedTaskTO;\r\n@@ -37,145 +36,165 @@\n @SuppressWarnings(\"unchecked\")\r\n public class TaskServiceProxy extends SpringServiceProxy implements TaskService {\r\n \r\n-    public TaskServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+    public TaskServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r\n-    public int count(TaskType type) {\r\n+    public int count(final TaskType type) {\r\n         return getRestTemplate().getForObject(baseUrl + \"task/{type}/count.json\", Integer.class, type);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends TaskTO> T create(T taskTO) {\r\n+    public <T extends TaskTO> T create(final T taskTO) {\r\n         String subTypeString = (taskTO instanceof SyncTaskTO)\r\n                 ? \"sync\"\r\n                 : (taskTO instanceof SchedTaskTO)\r\n-                        ? \"sched\"\r\n-                        : \"\";\r\n+                ? \"sched\"\r\n+                : \"\";\r\n \r\n-        return (T) getRestTemplate().postForObject(baseUrl + \"task/create/{type}\", taskTO, taskTO.getClass(), subTypeString);\r\n+        return (T) getRestTemplate().postForObject(baseUrl + \"task/create/{type}\",\r\n+                taskTO, taskTO.getClass(), subTypeString);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends TaskTO> T delete(TaskType type, Long taskId) {\r\n+    public <T extends TaskTO> T delete(final TaskType type, final Long taskId) {\r\n         return (T) getRestTemplate().getForObject(baseUrl + \"task/delete/{taskId}\", getTOClass(type), taskId);\r\n     }\r\n \r\n     @Override\r\n-    public TaskExecTO deleteExecution(Long executionId) {\r\n+    public TaskExecTO deleteExecution(final Long executionId) {\r\n         return getRestTemplate()\r\n                 .getForObject(baseUrl + \"task/execution/delete/{executionId}\", TaskExecTO.class, executionId);\r\n     }\r\n \r\n     @Override\r\n-    public TaskExecTO execute(Long taskId, boolean dryRun) {\r\n+    public TaskExecTO execute(final Long taskId, final boolean dryRun) {\r\n         String param = (dryRun)\r\n                 ? \"?dryRun=true\"\r\n                 : \"\";\r\n-        return getRestTemplate().postForObject(baseUrl + \"task/execute/{taskId}\" + param, null, TaskExecTO.class, taskId);\r\n+        return getRestTemplate().\r\n+                postForObject(baseUrl + \"task/execute/{taskId}\" + param, null, TaskExecTO.class, taskId);\r\n     }\r\n \r\n     @Override\r\n     public Set<String> getJobClasses() {\r\n-        return new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/jobClasses.json\",\r\n+        return new HashSet<String>(\r\n+                Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/jobClasses.json\",\r\n                 String[].class)));\r\n     }\r\n \r\n     @Override\r\n     public Set<String> getSyncActionsClasses() {\r\n-        return new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/syncActionsClasses.json\",\r\n+        return new HashSet<String>(\r\n+                Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/syncActionsClasses.json\",\r\n                 String[].class)));\r\n     }\r\n \r\n     @Override\r\n-    public <T extends TaskTO> List<T> list(TaskType type) {\r\n+    public <T extends TaskTO> List<T> list(final TaskType type) {\r\n         switch (type) {\r\n-        case PROPAGATION:\r\n-            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list\",\r\n-                    PropagationTaskTO[].class, type));\r\n-        case NOTIFICATION:\r\n-            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list\",\r\n-                    NotificationTaskTO[].class, type));\r\n-        case SCHEDULED:\r\n-            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list\", SchedTaskTO[].class,\r\n-                    type));\r\n-        case SYNCHRONIZATION:\r\n-            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list\", SyncTaskTO[].class,\r\n-                    type));\r\n-        default:\r\n-            throw new IllegalArgumentException(\"TaskType is not supported.\");\r\n+            case PROPAGATION:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list\",\r\n+                        PropagationTaskTO[].class, type));\r\n+\r\n+            case NOTIFICATION:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list\",\r\n+                        NotificationTaskTO[].class, type));\r\n+\r\n+            case SCHEDULED:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list\",\r\n+                        SchedTaskTO[].class, type));\r\n+\r\n+            case SYNCHRONIZATION:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list\",\r\n+                        SyncTaskTO[].class, type));\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"TaskType is not supported.\");\r\n         }\r\n     }\r\n \r\n     @Override\r\n-    public <T extends TaskTO> List<T> list(TaskType type, int page, int size) {\r\n+    public <T extends TaskTO> List<T> list(final TaskType type, final int page, final int size) {\r\n         switch (type) {\r\n-        case PROPAGATION:\r\n-            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n-                    PropagationTaskTO[].class, type, page, size));\r\n-        case NOTIFICATION:\r\n-            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n-                    NotificationTaskTO[].class, type, page, size));\r\n-        case SCHEDULED:\r\n-            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n-                    SchedTaskTO[].class, type, page, size));\r\n-        case SYNCHRONIZATION:\r\n-            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n-                    SyncTaskTO[].class, type, page, size));\r\n-        default:\r\n-            throw new IllegalArgumentException(\"TaskType is not supported :\" + type);\r\n+            case PROPAGATION:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl\r\n+                        + \"task/{type}/list/{page}/{size}.json\",\r\n+                        PropagationTaskTO[].class, type, page, size));\r\n+\r\n+            case NOTIFICATION:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl\r\n+                        + \"task/{type}/list/{page}/{size}.json\",\r\n+                        NotificationTaskTO[].class, type, page, size));\r\n+\r\n+            case SCHEDULED:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl\r\n+                        + \"task/{type}/list/{page}/{size}.json\",\r\n+                        SchedTaskTO[].class, type, page, size));\r\n+\r\n+            case SYNCHRONIZATION:\r\n+                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl\r\n+                        + \"task/{type}/list/{page}/{size}.json\",\r\n+                        SyncTaskTO[].class, type, page, size));\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"TaskType is not supported :\" + type);\r\n         }\r\n     }\r\n \r\n     @Override\r\n-    public List<TaskExecTO> listExecutions(TaskType type) {\r\n-        return Arrays.asList(getRestTemplate()\r\n-                .getForObject(baseUrl + \"task/{type}/execution/list\", TaskExecTO[].class, type));\r\n+    public List<TaskExecTO> listExecutions(final TaskType type) {\r\n+        return Arrays.asList(getRestTemplate().getForObject(\r\n+                baseUrl + \"task/{type}/execution/list\", TaskExecTO[].class, type));\r\n     }\r\n \r\n     @Override\r\n-    public <T extends TaskTO> T read(TaskType type, Long taskId) {\r\n+    public <T extends TaskTO> T read(final TaskType type, final Long taskId) {\r\n         return (T) getRestTemplate().getForObject(baseUrl + \"task/read/{taskId}\", getTOClass(type), taskId);\r\n     }\r\n \r\n     @Override\r\n-    public TaskExecTO readExecution(Long executionId) {\r\n+    public TaskExecTO readExecution(final Long executionId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"task/execution/read/{taskId}\", TaskExecTO.class, executionId);\r\n     }\r\n \r\n     @Override\r\n-    public TaskExecTO report(Long executionId, PropagationTaskExecStatus status, String message) {\r\n+    public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus status, final String message) {\r\n         return getRestTemplate().getForObject(baseUrl + \"task/execution/report/{executionId}\"\r\n                 + \"?executionStatus={status}&message={message}\", TaskExecTO.class, executionId, status, message);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends TaskTO> T update(Long taskId, T taskTO) {\r\n+    public <T extends TaskTO> T update(final Long taskId, final T taskTO) {\r\n         String path = (taskTO instanceof SyncTaskTO)\r\n                 ? \"sync\"\r\n                 : (taskTO instanceof SchedTaskTO)\r\n-                        ? \"sched\"\r\n-                        : null;\r\n-        if (path == null)\r\n+                ? \"sched\"\r\n+                : null;\r\n+        if (path == null) {\r\n             throw new IllegalArgumentException(\"Task can only be instance of SchedTaskTO or SyncTaskTO\");\r\n+        }\r\n \r\n         return (T) getRestTemplate().postForObject(baseUrl + \"task/update/\" + path, taskTO, taskTO.getClass());\r\n     }\r\n \r\n-    private Class<? extends TaskTO> getTOClass(TaskType type) {\r\n+    private Class<? extends TaskTO> getTOClass(final TaskType type) {\r\n         switch (type) {\r\n-        case PROPAGATION:\r\n-            return PropagationTaskTO.class;\r\n-        case NOTIFICATION:\r\n-            return NotificationTaskTO.class;\r\n-        case SCHEDULED:\r\n-            return SchedTaskTO.class;\r\n-        case SYNCHRONIZATION:\r\n-            return SyncTaskTO.class;\r\n-        default:\r\n-            throw new IllegalArgumentException(\"SchemaType is not supported: \" + type);\r\n+            case PROPAGATION:\r\n+                return PropagationTaskTO.class;\r\n+\r\n+            case NOTIFICATION:\r\n+                return NotificationTaskTO.class;\r\n+\r\n+            case SCHEDULED:\r\n+                return SchedTaskTO.class;\r\n+\r\n+            case SYNCHRONIZATION:\r\n+                return SyncTaskTO.class;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(\"SchemaType is not supported: \" + type);\r\n         }\r\n     }\r\n-\r\n }\r"},{"sha":"7aa2f4028a10c8952efd53f21f694e9f059f1b5a","filename":"client/src/main/java/org/apache/syncope/services/proxy/UserRequestServiceProxy.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserRequestServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -20,7 +20,6 @@\n \r\n import java.util.Arrays;\r\n import java.util.List;\r\n-\r\n import org.apache.syncope.client.mod.UserMod;\r\n import org.apache.syncope.client.to.UserRequestTO;\r\n import org.apache.syncope.client.to.UserTO;\r\n@@ -29,7 +28,7 @@\n \r\n public class UserRequestServiceProxy extends SpringServiceProxy implements UserRequestService {\r\n \r\n-    public UserRequestServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+    public UserRequestServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n@@ -39,17 +38,17 @@ public boolean isCreateAllowed() {\n     }\r\n \r\n     @Override\r\n-    public UserRequestTO create(UserTO userTO) {\r\n+    public UserRequestTO create(final UserTO userTO) {\r\n         return getRestTemplate().postForObject(baseUrl + \"user/request/create\", userTO, UserRequestTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public UserRequestTO update(UserMod userMod) {\r\n+    public UserRequestTO update(final UserMod userMod) {\r\n         return getRestTemplate().postForObject(baseUrl + \"user/request/update\", userMod, UserRequestTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public UserRequestTO delete(Long userId) {\r\n+    public UserRequestTO delete(final Long userId) {\r\n         return getRestTemplate().getForObject(baseUrl + \"user/request/delete/{userId}\", UserRequestTO.class, userId);\r\n     }\r\n \r\n@@ -59,15 +58,14 @@ public List<UserRequestTO> list() {\n     }\r\n \r\n     @Override\r\n-    public UserRequestTO read(Long requestId) {\r\n-        return getRestTemplate()\r\n-                .getForObject(baseUrl + \"user/request/read/{requestId}\", UserRequestTO.class, requestId);\r\n+    public UserRequestTO read(final Long requestId) {\r\n+        return getRestTemplate().getForObject(\r\n+                baseUrl + \"user/request/read/{requestId}\", UserRequestTO.class, requestId);\r\n     }\r\n \r\n     @Override\r\n-    public UserRequestTO deleteRequest(Long requestId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"user/request/deleteRequest/{requestId}\", UserRequestTO.class,\r\n-                requestId);\r\n+    public UserRequestTO deleteRequest(final Long requestId) {\r\n+        return getRestTemplate().getForObject(\r\n+                baseUrl + \"user/request/deleteRequest/{requestId}\", UserRequestTO.class, requestId);\r\n     }\r\n-\r\n }\r"},{"sha":"afd8ee60a7274eedabffe44b360545c7b33772da","filename":"client/src/main/java/org/apache/syncope/services/proxy/UserServiceProxy.java","status":"modified","additions":23,"deletions":25,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -20,7 +20,6 @@\n \n import java.util.Arrays;\n import java.util.List;\n-\n import org.apache.syncope.client.mod.StatusMod;\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.search.NodeCond;\n@@ -31,12 +30,12 @@\n \n public class UserServiceProxy extends SpringServiceProxy implements UserService {\n \n-    public UserServiceProxy(String baseUrl, RestTemplate restTemplate) {\n+    public UserServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\n         super(baseUrl, restTemplate);\n     }\n \n     @Override\n-    public Boolean verifyPassword(String username, String password) {\n+    public Boolean verifyPassword(final String username, final String password) {\n         return getRestTemplate().getForObject(\n                 baseUrl + \"user/verifyPassword/{username}.json?password={password}\", Boolean.class,\n                 username, password);\n@@ -53,39 +52,39 @@ public List<UserTO> list() {\n     }\n \n     @Override\n-    public List<UserTO> list(int page, int size) {\n+    public List<UserTO> list(final int page, final int size) {\n         return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/list/{page}/{size}.json\",\n                 UserTO[].class, page, size));\n     }\n \n     @Override\n-    public UserTO read(Long userId) {\n+    public UserTO read(final Long userId) {\n         return getRestTemplate().getForObject(baseUrl + \"user/read/{userId}.json\", UserTO.class, userId);\n     }\n \n     @Override\n-    public UserTO read(String username) {\n+    public UserTO read(final String username) {\n         return getRestTemplate().getForObject(baseUrl + \"user/readByUsername/{username}.json\", UserTO.class,\n                 username);\n     }\n \n     @Override\n-    public UserTO create(UserTO userTO) {\n+    public UserTO create(final UserTO userTO) {\n         return getRestTemplate().postForObject(baseUrl + \"user/create\", userTO, UserTO.class);\n     }\n \n     @Override\n-    public UserTO update(Long userId, UserMod userMod) {\n+    public UserTO update(final Long userId, final UserMod userMod) {\n         return getRestTemplate().postForObject(baseUrl + \"user/update\", userMod, UserTO.class);\n     }\n \n     @Override\n-    public UserTO delete(Long userId) {\n+    public UserTO delete(final Long userId) {\n         return getRestTemplate().getForObject(baseUrl + \"user/delete/{userId}\", UserTO.class, userId);\n     }\n \n     @Override\n-    public UserTO executeWorkflow(String taskId, UserTO userTO) {\n+    public UserTO executeWorkflow(final String taskId, final UserTO userTO) {\n         return null;\n     }\n \n@@ -96,41 +95,41 @@ public List<WorkflowFormTO> getForms() {\n     }\n \n     @Override\n-    public WorkflowFormTO getFormForUser(Long userId) {\n+    public WorkflowFormTO getFormForUser(final Long userId) {\n         return getRestTemplate().getForObject(baseUrl + \"user/workflow/form/{userId}\", WorkflowFormTO.class,\n                 userId);\n     }\n \n     @Override\n-    public WorkflowFormTO claimForm(String taskId) {\n+    public WorkflowFormTO claimForm(final String taskId) {\n         return getRestTemplate().getForObject(baseUrl + \"user/workflow/form/claim/{taskId}\",\n                 WorkflowFormTO.class, taskId);\n     }\n \n     @Override\n-    public UserTO submitForm(WorkflowFormTO form) {\n+    public UserTO submitForm(final WorkflowFormTO form) {\n         return getRestTemplate().postForObject(baseUrl + \"user/workflow/form/submit\", form, UserTO.class);\n     }\n \n     @Override\n-    public UserTO activate(long userId, String token) {\n+    public UserTO activate(final long userId, final String token) {\n         return getRestTemplate().getForObject(baseUrl + \"user/activate/{userId}?token=\" + token, UserTO.class,\n                 userId);\n     }\n \n     @Override\n-    public UserTO activateByUsername(String username, String token) {\n+    public UserTO activateByUsername(final String username, final String token) {\n         return getRestTemplate().getForObject(baseUrl + \"user/activateByUsername/{username}.json?token=\" + token,\n                 UserTO.class, username);\n     }\n \n     @Override\n-    public UserTO suspend(long userId) {\n+    public UserTO suspend(final long userId) {\n         return getRestTemplate().getForObject(baseUrl + \"user/suspend/{userId}\", UserTO.class, userId);\n     }\n \n     @Override\n-    public UserTO reactivate(long userId) {\n+    public UserTO reactivate(final long userId) {\n         return getRestTemplate().getForObject(baseUrl + \"user/reactivate/{userId}\", UserTO.class, userId);\n     }\n \n@@ -140,19 +139,19 @@ public UserTO reactivate(long userId, String query) {\n     }\n \n     @Override\n-    public UserTO suspendByUsername(String username) {\n+    public UserTO suspendByUsername(final String username) {\n         return getRestTemplate().getForObject(baseUrl + \"user/suspendByUsername/{username}.json\", UserTO.class,\n                 username);\n     }\n \n     @Override\n-    public UserTO reactivateByUsername(String username) {\n+    public UserTO reactivateByUsername(final String username) {\n         return getRestTemplate().getForObject(baseUrl + \"user/reactivateByUsername/{username}.json\",\n                 UserTO.class, username);\n     }\n \n     @Override\n-    public UserTO suspend(long userId, String query) {\n+    public UserTO suspend(final long userId, final String query) {\n         return getRestTemplate().getForObject(baseUrl + \"user/suspend/\" + userId + query, UserTO.class);\n     }\n \n@@ -162,26 +161,25 @@ public UserTO readSelf() {\n     }\n \n     @Override\n-    public List<UserTO> search(NodeCond searchCondition) {\n+    public List<UserTO> search(final NodeCond searchCondition) {\n         return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"user/search\", searchCondition,\n                 UserTO[].class));\n     }\n \n     @Override\n-    public List<UserTO> search(NodeCond searchCondition, int page, int size) {\n+    public List<UserTO> search(final NodeCond searchCondition, final int page, final int size) {\n         return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"user/search/{page}/{size}\",\n                 searchCondition, UserTO[].class, page, size));\n     }\n \n     @Override\n-    public int searchCount(NodeCond searchCondition) {\n+    public int searchCount(final NodeCond searchCondition) {\n         return getRestTemplate()\n                 .postForObject(baseUrl + \"user/search/count.json\", searchCondition, Integer.class);\n     }\n \n     @Override\n-    public UserTO setStatus(Long userId, StatusMod statusUpdate) {\n+    public UserTO setStatus(final Long userId, final StatusMod statusUpdate) {\n         return null; // Not used in old REST API\n     }\n-\n }"},{"sha":"e43ae65a0eeb458d892df40b01a301440661fc41","filename":"client/src/main/java/org/apache/syncope/services/proxy/WorkflowServiceProxy.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e199b01d92dd942fd0047af6953a5d803bc278e5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FWorkflowServiceProxy.java?ref=e199b01d92dd942fd0047af6953a5d803bc278e5","patch":"@@ -20,31 +20,28 @@\n \r\n import java.util.Arrays;\r\n import java.util.List;\r\n-\r\n import org.apache.syncope.client.to.WorkflowDefinitionTO;\r\n import org.apache.syncope.services.WorkflowService;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class WorkflowServiceProxy extends SpringServiceProxy implements WorkflowService {\r\n \r\n-    public WorkflowServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+    public WorkflowServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n     @Override\r\n-    public WorkflowDefinitionTO getDefinition(String type) {\r\n-        return getRestTemplate()\r\n-                .getForObject(baseUrl + \"workflow/definition/\" + type, WorkflowDefinitionTO.class);\r\n+    public WorkflowDefinitionTO getDefinition(final String type) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"workflow/definition/\" + type, WorkflowDefinitionTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public void updateDefinition(String type, WorkflowDefinitionTO definition) {\r\n+    public void updateDefinition(final String type, final WorkflowDefinitionTO definition) {\r\n         getRestTemplate().put(baseUrl + \"workflow/definition/\" + type, definition);\r\n     }\r\n \r\n     @Override\r\n     public List<String> getDefinedTasks(final String type) {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"workflow/tasks/{type}\", String.class, type));\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"workflow/tasks/{type}\", String[].class, type));\r\n     }\r\n-\r\n }\r"}]}