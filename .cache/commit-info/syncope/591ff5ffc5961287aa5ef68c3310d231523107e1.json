{"sha":"591ff5ffc5961287aa5ef68c3310d231523107e1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU5MWZmNWZmYzU5NjEyODdhYTVlZjY4YzMzMTBkMjMxNTIzMTA3ZTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-06-19T06:54:11Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-06-19T06:54:11Z"},"message":"[SYNCOPE-123] Implementation provided for core and console\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1603724 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"97bc114fa5a2187c8032d2fdcffe90e76658ce04","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/97bc114fa5a2187c8032d2fdcffe90e76658ce04"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/591ff5ffc5961287aa5ef68c3310d231523107e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/591ff5ffc5961287aa5ef68c3310d231523107e1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/591ff5ffc5961287aa5ef68c3310d231523107e1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/591ff5ffc5961287aa5ef68c3310d231523107e1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9e8f642915f5622fa7e2b55611b427e2c178ee55","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9e8f642915f5622fa7e2b55611b427e2c178ee55","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9e8f642915f5622fa7e2b55611b427e2c178ee55"}],"stats":{"total":677,"additions":553,"deletions":124},"files":[{"sha":"83af9f5fbf6ed9b7f7c54938a304baef3894baaf","filename":"build-tools/src/main/resources/content.ldif","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -45,3 +45,13 @@ uid: syncFromLDAP\n userpassword:: cGFzc3dvcmQxMjM=\n givenname: syncFromLDAP\n registeredAddress:  5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8\n+jpegPhoto:: /9j/4AAQSkZJRgABAQEBKwErAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoH\r\n+ BwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQk\r\n+ UDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wg\r\n+ ARCAAEAAQDAREAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAACP/EABQBAQAAAAAAAAAAAAAAA\r\n+ AAAAAD/2gAMAwEAAhADEAAAAUuf/8QAFhABAQEAAAAAAAAAAAAAAAAAAwAS/9oACAEBAAEFAiLV\r\n+ /8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAgBAwEBPwF//8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/\r\n+ aAAgBAgEBPwF//8QAGhAAAQUBAAAAAAAAAAAAAAAAAgABESEiQf/aAAgBAQAGPwI9k2orq//EAB\r\n+ kQAAMAAwAAAAAAAAAAAAAAAAERIQBBYf/aAAgBAQABPyF20CYlpT3P/9oADAMBAAIAAwAAABCf/\r\n+ 8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAgBAwEBPxB//8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/a\r\n+ AAgBAgEBPxB//8QAGhABAAIDAQAAAAAAAAAAAAAAAREhAEFRYf/aAAgBAQABPxCUKGDcAUFrvhoz/9k="},{"sha":"8e79ed2ad22d3713e34dfb2c97b9227f163c7390","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSyncTaskTO.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSyncTaskTO.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -18,8 +18,11 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import com.fasterxml.jackson.annotation.JsonProperty;\r\n import java.util.ArrayList;\r\n import java.util.List;\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlSeeAlso;\r\n import javax.xml.bind.annotation.XmlType;\r\n@@ -89,6 +92,9 @@ public void setSyncStatus(boolean syncStatus) {\n         this.syncStatus = syncStatus;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"actionsClassNames\")\r\n+    @XmlElement(name = \"actionsClassName\")\r\n+    @JsonProperty(\"actionsClassNames\")\r\n     public List<String> getActionsClassNames() {\r\n         return actionsClassNames;\r\n     }\r"},{"sha":"8dd642c7c9efad85262698a29ec06e6b78c36525","filename":"common/src/main/java/org/apache/syncope/common/to/ResourceTO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -260,6 +260,9 @@ public void setRsyncToken(final String syncToken) {\n         this.rsyncToken = syncToken;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"propagationActionsClassNames\")\r\n+    @XmlElement(name = \"propagationActionsClassName\")\r\n+    @JsonProperty(\"propagationActionsClassNames\")\r\n     public List<String> getPropagationActionsClassNames() {\r\n         return propagationActionsClassNames;\r\n     }\r"},{"sha":"1cf57c3a32dfac7d7e344a6cf599ffdc2266bb68","filename":"common/src/main/java/org/apache/syncope/common/to/SchemaTO.java","status":"modified","additions":51,"deletions":40,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -35,14 +35,6 @@ public class SchemaTO extends AbstractSchemaTO {\n \r\n     private String mandatoryCondition;\r\n \r\n-    private String enumerationValues;\r\n-\r\n-    private String enumerationKeys;\r\n-\r\n-    private String secretKey;\r\n-\r\n-    private CipherAlgorithm cipherAlgorithm;\r\n-\r\n     private boolean multivalue;\r\n \r\n     private boolean uniqueConstraint;\r\n@@ -53,6 +45,16 @@ public class SchemaTO extends AbstractSchemaTO {\n \r\n     private String validatorClass;\r\n \r\n+    private String enumerationValues;\r\n+\r\n+    private String enumerationKeys;\r\n+\r\n+    private String secretKey;\r\n+\r\n+    private CipherAlgorithm cipherAlgorithm;\r\n+\r\n+    private String mimeType;\r\n+\r\n     public String getConversionPattern() {\r\n         return conversionPattern;\r\n     }\r\n@@ -71,38 +73,6 @@ public void setMandatoryCondition(final String mandatoryCondition) {\n         this.mandatoryCondition = mandatoryCondition;\r\n     }\r\n \r\n-    public String getEnumerationValues() {\r\n-        return enumerationValues;\r\n-    }\r\n-\r\n-    public void setEnumerationValues(final String enumerationValues) {\r\n-        this.enumerationValues = enumerationValues;\r\n-    }\r\n-\r\n-    public String getEnumerationKeys() {\r\n-        return enumerationKeys;\r\n-    }\r\n-\r\n-    public void setEnumerationKeys(final String enumerationKeys) {\r\n-        this.enumerationKeys = enumerationKeys;\r\n-    }\r\n-\r\n-    public String getSecretKey() {\r\n-        return secretKey;\r\n-    }\r\n-\r\n-    public void setSecretKey(final String secretKey) {\r\n-        this.secretKey = secretKey;\r\n-    }\r\n-\r\n-    public CipherAlgorithm getCipherAlgorithm() {\r\n-        return cipherAlgorithm;\r\n-    }\r\n-\r\n-    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\r\n-        this.cipherAlgorithm = cipherAlgorithm;\r\n-    }\r\n-\r\n     public boolean isMultivalue() {\r\n         return multivalue;\r\n     }\r\n@@ -142,4 +112,45 @@ public String getValidatorClass() {\n     public void setValidatorClass(final String validatorClass) {\r\n         this.validatorClass = validatorClass;\r\n     }\r\n+\r\n+    public String getEnumerationValues() {\r\n+        return enumerationValues;\r\n+    }\r\n+\r\n+    public void setEnumerationValues(final String enumerationValues) {\r\n+        this.enumerationValues = enumerationValues;\r\n+    }\r\n+\r\n+    public String getEnumerationKeys() {\r\n+        return enumerationKeys;\r\n+    }\r\n+\r\n+    public void setEnumerationKeys(final String enumerationKeys) {\r\n+        this.enumerationKeys = enumerationKeys;\r\n+    }\r\n+\r\n+    public String getSecretKey() {\r\n+        return secretKey;\r\n+    }\r\n+\r\n+    public void setSecretKey(final String secretKey) {\r\n+        this.secretKey = secretKey;\r\n+    }\r\n+\r\n+    public CipherAlgorithm getCipherAlgorithm() {\r\n+        return cipherAlgorithm;\r\n+    }\r\n+\r\n+    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\r\n+        this.cipherAlgorithm = cipherAlgorithm;\r\n+    }\r\n+\r\n+    public String getMimeType() {\r\n+        return mimeType;\r\n+    }\r\n+\r\n+    public void setMimeType(final String mimeType) {\r\n+        this.mimeType = mimeType;\r\n+    }\r\n+\r\n }\r"},{"sha":"81b24a26ccf7ab8b84c193129f57d63846e2816f","filename":"common/src/main/java/org/apache/syncope/common/types/AttributeSchemaType.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -30,7 +30,8 @@ public enum AttributeSchemaType {\n     Boolean(Boolean.class),\r\n     Date(Date.class),\r\n     Enum(Enum.class),\r\n-    Encrypted(byte[].class);\r\n+    Encrypted(byte[].class),\r\n+    Binary(byte[].class);\r\n \r\n     final private Class<?> type;\r\n \r"},{"sha":"d2aa9e00d8bcd88c19ca695d58a8c8af2d353e8e","filename":"console/src/main/java/org/apache/syncope/console/commons/HttpResourceStream.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -96,8 +96,6 @@ public String getContentType() {\n     }\n \n     public String getFilename() {\n-        return filename == null\n-                ? Constants.ERROR\n-                : filename;\n+        return filename;\n     }\n }"},{"sha":"10e3f3d1bb520fd82f80e15e8b415af986693587","filename":"console/src/main/java/org/apache/syncope/console/pages/Configuration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -353,7 +353,7 @@ public Page createPage() {\n                 \"Configuration\", \"create\"));\n         add(createConfigurationLink);\n \n-        Link dbExportLink = new Link<Void>(\"dbExportLink\") {\n+        Link<Void> dbExportLink = new Link<Void>(\"dbExportLink\") {\n \n             private static final long serialVersionUID = -4331619903296515985L;\n "},{"sha":"199fc3e001bff277d1a7958eb4ea9fc09789fd19","filename":"console/src/main/java/org/apache/syncope/console/pages/ResultStatusModalPage.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -352,15 +352,16 @@ private Fragment getLabelValue(final String id, final String attrName, final Map\n             }\n         }\n \n-        Component label = new Label(\"value\", value).add(new Behavior() {\n+        Component label = new Label(\"value\", value.length() > 50 ? value.substring(0, 50) + \"...\" : value).\n+                add(new Behavior() {\n \n-            private static final long serialVersionUID = 1469628524240283489L;\n+                    private static final long serialVersionUID = 1469628524240283489L;\n \n-            @Override\n-            public void onComponentTag(final Component component, final ComponentTag tag) {\n-                tag.put(\"title\", value);\n-            }\n-        });\n+                    @Override\n+                    public void onComponentTag(final Component component, final ComponentTag tag) {\n+                        tag.put(\"title\", value);\n+                    }\n+                });\n \n         final Fragment frag = new Fragment(id, \"attrValueFrag\", this);\n         frag.add(label);"},{"sha":"7e246976848550e66c0acc03538597146df33915","filename":"console/src/main/java/org/apache/syncope/console/pages/SchemaModalPage.java","status":"modified","additions":52,"deletions":4,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -138,10 +138,21 @@ public void setSchemaModalPage(final PageReference pageRef, final ModalWindow wi\n         encryptedParams.add(cipherAlgorithm);\n         schemaForm.add(encryptedParams);\n \n+        // -- binary\n+        final AjaxTextFieldPanel mimeType = new AjaxTextFieldPanel(\"mimeType\",\n+                getString(\"mimeType\"), new PropertyModel<String>(schema, \"mimeType\"));\n+\n+        final WebMarkupContainer binaryParams = new WebMarkupContainer(\"binaryParams\");\n+        binaryParams.setOutputMarkupPlaceholderTag(true);\n+        binaryParams.add(mimeType);\n+        schemaForm.add(binaryParams);\n+\n+        // -- show or hide\n         showHide(schema, type,\n                 conversionParams, conversionPattern,\n                 enumParams, enumerationValuesPanel, enumerationValues, enumerationKeys,\n-                encryptedParams, secretKey, cipherAlgorithm);\n+                encryptedParams, secretKey, cipherAlgorithm,\n+                binaryParams, mimeType);\n         type.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n@@ -151,7 +162,8 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 SchemaModalPage.this.showHide(schema, type,\n                         conversionParams, conversionPattern,\n                         enumParams, enumerationValuesPanel, enumerationValues, enumerationKeys,\n-                        encryptedParams, secretKey, cipherAlgorithm);\n+                        encryptedParams, secretKey, cipherAlgorithm,\n+                        binaryParams, mimeType);\n                 target.add(schemaForm);\n             }\n         });\n@@ -286,10 +298,12 @@ private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<Attri\n             final WebMarkupContainer enumParams, final AjaxTextFieldPanel enumerationValuesPanel,\n             final MultiFieldPanel<String> enumerationValues, final MultiFieldPanel<String> enumerationKeys,\n             final WebMarkupContainer encryptedParams,\n-            final AjaxTextFieldPanel secretKey, final AjaxDropDownChoicePanel<CipherAlgorithm> cipherAlgorithm) {\n+            final AjaxTextFieldPanel secretKey, final AjaxDropDownChoicePanel<CipherAlgorithm> cipherAlgorithm,\n+            final WebMarkupContainer binaryParams, final AjaxTextFieldPanel mimeType) {\n \n         final int typeOrdinal = Integer.parseInt(type.getField().getValue());\n-        if (AttributeSchemaType.Long.ordinal() == typeOrdinal || AttributeSchemaType.Double.ordinal() == typeOrdinal\n+        if (AttributeSchemaType.Long.ordinal() == typeOrdinal\n+                || AttributeSchemaType.Double.ordinal() == typeOrdinal\n                 || AttributeSchemaType.Date.ordinal() == typeOrdinal) {\n \n             conversionParams.setVisible(true);\n@@ -310,6 +324,9 @@ private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<Attri\n                 cipherAlgorithm.removeRequiredLabel();\n             }\n             cipherAlgorithm.setModelObject(null);\n+\n+            binaryParams.setVisible(false);\n+            mimeType.setModelObject(null);\n         } else if (AttributeSchemaType.Enum.ordinal() == typeOrdinal) {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -330,6 +347,9 @@ private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<Attri\n                 cipherAlgorithm.removeRequiredLabel();\n             }\n             cipherAlgorithm.setModelObject(null);\n+\n+            binaryParams.setVisible(false);\n+            mimeType.setModelObject(null);\n         } else if (AttributeSchemaType.Encrypted.ordinal() == typeOrdinal) {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -348,6 +368,31 @@ private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<Attri\n             if (cipherAlgorithm.isRequired()) {\n                 cipherAlgorithm.addRequiredLabel();\n             }\n+\n+            binaryParams.setVisible(false);\n+            mimeType.setModelObject(null);\n+        } else if (AttributeSchemaType.Binary.ordinal() == typeOrdinal) {\n+            conversionParams.setVisible(false);\n+            conversionPattern.setModelObject(null);\n+\n+            enumParams.setVisible(false);\n+            if (enumerationValuesPanel.isRequired()) {\n+                enumerationValuesPanel.removeRequiredLabel();\n+            }\n+            enumerationValues.setModelObject(getEnumValuesAsList(null));\n+            enumerationKeys.setModelObject(getEnumValuesAsList(null));\n+\n+            encryptedParams.setVisible(false);\n+            if (secretKey.isRequired()) {\n+                secretKey.removeRequiredLabel();\n+            }\n+            secretKey.setModelObject(null);\n+            if (cipherAlgorithm.isRequired()) {\n+                cipherAlgorithm.removeRequiredLabel();\n+            }\n+            cipherAlgorithm.setModelObject(null);\n+\n+            binaryParams.setVisible(true);\n         } else {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -368,6 +413,9 @@ private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<Attri\n                 cipherAlgorithm.removeRequiredLabel();\n             }\n             cipherAlgorithm.setModelObject(null);\n+\n+            binaryParams.setVisible(false);\n+            mimeType.setModelObject(null);\n         }\n     }\n "},{"sha":"c757fa47357ada72acf9248fb965d2bc83708e55","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AttributesPanel.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.BinaryFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.DateTextFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.DateTimeFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n@@ -110,7 +111,7 @@ protected void populateItem(final ListItem<AttributeTO> item) {\n                         final AttributeTO attributeTO = (AttributeTO) item.getDefaultModelObject();\n \n                         final WebMarkupContainer jexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n-                        \n+\n                         final AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp,\n                                 \"questionMarkJexlHelp\");\n                         item.add(questionMarkJexlHelp);\n@@ -285,6 +286,17 @@ public String getIdValue(final String value, final int i) {\n                 }\n                 break;\n \n+            case Binary:\n+                panel = new BinaryFieldPanel(\"panel\", schemaTO.getName(), new Model<String>(),\n+                        schemas.containsKey(schemaTO.getName())\n+                        ? schemas.get(schemaTO.getName()).getMimeType()\n+                        : null);\n+\n+                if (required) {\n+                    panel.addRequiredLabel();\n+                }\n+                break;\n+\n             default:\n                 panel = new AjaxTextFieldPanel(\"panel\", schemaTO.getName(), new Model<String>());\n "},{"sha":"8d49a0b1b09e7aba49bf2ea66646b286f363e5d4","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/ActionLink.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -75,7 +75,7 @@ public boolean feedbackPanelAutomaticReload() {\n         return reloadFeedbackPanel;\n     }\n \n-    public ActionLink feedbackPanelAutomaticReload(boolean reloadFeedbackPanel) {\n+    public ActionLink feedbackPanelAutomaticReload(final boolean reloadFeedbackPanel) {\n         this.reloadFeedbackPanel = reloadFeedbackPanel;\n         return this;\n     }"},{"sha":"f3483067526b1de10b0b56ed125a79ccbe1cb6d7","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/AjaxCheckBoxPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -33,8 +33,7 @@ public class AjaxCheckBoxPanel extends FieldPanel<Boolean> {\n     private static final long serialVersionUID = 5664138233103884310L;\n \n     public AjaxCheckBoxPanel(final String id, final String name, final IModel<Boolean> model) {\n-\n-        super(id, name, model);\n+        super(id, model);\n \n         field = new CheckBox(\"checkboxField\", model);\n         add(field.setLabel(new Model<String>(name)).setOutputMarkupId(true));"},{"sha":"4b404a65e0acfeeb0c4fd07c63cfc93014ca593b","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/AjaxDropDownChoicePanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -39,11 +39,10 @@ public AjaxDropDownChoicePanel(final String id, final String name, final IModel<\n     }\n \n     public AjaxDropDownChoicePanel(final String id, final String name, final IModel<T> model, boolean enableOnBlur) {\n-        super(id, name, model);\n+        super(id, model);\n \n         field = new DropDownChoice<T>(\n                 \"dropDownChoiceField\", model, Collections.<T>emptyList(), new ChoiceRenderer<T>());\n-\n         add(field.setLabel(new Model<String>(name)).setOutputMarkupId(true));\n \n         if (enableOnBlur) {"},{"sha":"3c9cbcda5f154236341c143130f522c8445a3b01","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/AjaxPasswordFieldPanel.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -30,13 +30,10 @@ public class AjaxPasswordFieldPanel extends FieldPanel<String> {\n     private static final long serialVersionUID = -5490115280336667460L;\n \n     public AjaxPasswordFieldPanel(final String id, final String name, final IModel<String> model) {\n-        super(id, name, model);\n+        super(id, model);\n \n         field = new PasswordTextField(\"passwordField\", model);\n-\n-        field.setRequired(false);\n-\n-        add(field.setLabel(new Model<String>(name)).setOutputMarkupId(true));\n+        add(field.setLabel(new Model<String>(name)).setRequired(false).setOutputMarkupId(true));\n \n         if (!isReadOnly()) {\n             field.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {"},{"sha":"48b4d7abbe904e9c5fc701a111f8b48eb7c867f1","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/AjaxTextFieldPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -24,7 +24,6 @@\n import java.util.List;\n import java.util.regex.Pattern;\n import org.apache.syncope.console.commons.Constants;\n-\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n@@ -40,7 +39,7 @@ public class AjaxTextFieldPanel extends FieldPanel<String> implements Cloneable\n     private List<String> choices = Collections.emptyList();\n \n     public AjaxTextFieldPanel(final String id, final String name, final IModel<String> model) {\n-        super(id, name, model);\n+        super(id, model);\n \n         final AutoCompleteSettings settings = new AutoCompleteSettings();\n         settings.setShowCompleteListOnFocusGain(true);\n@@ -65,7 +64,6 @@ protected Iterator<String> getChoices(final String input) {\n                 return result.iterator();\n             }\n         };\n-\n         add(field.setLabel(new Model<String>(name)).setOutputMarkupId(true));\n \n         if (!isReadOnly()) {"},{"sha":"8d80f0b8208df114afcb31c8acb10342c4e3b03e","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/BinaryFieldPanel.java","status":"added","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.wicket.markup.html.form;\n+\n+import java.io.ByteArrayInputStream;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.SyncopeConstants;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.commons.HttpResourceStream;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormSubmitBehavior;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.StatelessForm;\n+import org.apache.wicket.markup.html.form.TextField;\n+import org.apache.wicket.markup.html.form.upload.FileUpload;\n+import org.apache.wicket.markup.html.form.upload.FileUploadField;\n+import org.apache.wicket.markup.html.link.Link;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.request.handler.resource.ResourceStreamRequestHandler;\n+import org.apache.wicket.request.resource.ContentDisposition;\n+import org.apache.wicket.util.crypt.Base64;\n+import org.apache.wicket.util.lang.Bytes;\n+\n+public class BinaryFieldPanel extends FieldPanel<String> {\n+\n+    private static final long serialVersionUID = 6264462604183088931L;\n+\n+    private final String mimeType;\n+\n+    public BinaryFieldPanel(final String id, final String name, final IModel<String> model, final String mimeType) {\n+        super(id, model);\n+        this.mimeType = mimeType;\n+\n+        field = new TextField<String>(\"textField\", model);\n+        add(field.setLabel(new Model<String>(name)).setOutputMarkupId(true));\n+\n+        add(new Label(\"preview\", StringUtils.isBlank(mimeType) ? StringUtils.EMPTY : \"(\" + mimeType + \")\"));\n+\n+        Link<Void> downloadLink = new Link<Void>(\"downloadLink\") {\n+\n+            private static final long serialVersionUID = -4331619903296515985L;\n+\n+            @Override\n+            public void onClick() {\n+                try {\n+                    HttpResourceStream stream = new HttpResourceStream(buildResponse());\n+\n+                    ResourceStreamRequestHandler rsrh = new ResourceStreamRequestHandler(stream);\n+                    rsrh.setFileName(stream.getFilename() == null ? name : stream.getFilename());\n+                    rsrh.setContentDisposition(ContentDisposition.ATTACHMENT);\n+\n+                    getRequestCycle().scheduleRequestHandlerAfterCurrent(rsrh);\n+                } catch (Exception e) {\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                }\n+            }\n+\n+        };\n+        add(downloadLink);\n+\n+        Form<?> uploadForm = new StatelessForm<Void>(\"uploadForm\");\n+        uploadForm.setMultiPart(true);\n+        uploadForm.setMaxSize(Bytes.megabytes(4));\n+        add(uploadForm);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        final FileUploadField fileUpload = new FileUploadField(\"fileUpload\", new Model());\n+        fileUpload.setOutputMarkupId(true);\n+        fileUpload.add(new AjaxFormSubmitBehavior(Constants.ON_BLUR) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target) {\n+                final FileUpload uploadedFile = fileUpload.getFileUpload();\n+                if (uploadedFile != null) {\n+                    try {\n+                        final String uploaded = new String(\n+                                Base64.encodeBase64(uploadedFile.getBytes()),\n+                                SyncopeConstants.DEFAULT_ENCODING);\n+                        field.setModelObject(uploaded);\n+                        target.add(field);\n+\n+                        fileUpload.setModelObject(null);\n+                        target.add(fileUpload);\n+                    } catch (Exception e) {\n+                        error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                        LOG.error(\"While saving uploaded file\", e);\n+                    }\n+                }\n+            }\n+        });\n+\n+        uploadForm.add(fileUpload);\n+\n+        IndicatingAjaxLink<Void> uploadLink = new IndicatingAjaxLink<Void>(\"uploadLink\") {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+            }\n+        };\n+        add(uploadLink);\n+\n+        IndicatingAjaxLink<Void> resetLink = new IndicatingAjaxLink<Void>(\"resetLink\") {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                field.setModelObject(null);\n+                target.add(field);\n+            }\n+        };\n+        add(resetLink);\n+    }\n+\n+    private Response buildResponse() {\n+        return Response.ok(new ByteArrayInputStream(Base64.decodeBase64(getModelObject()))).\n+                type(StringUtils.isBlank(mimeType) ? MediaType.APPLICATION_OCTET_STREAM : mimeType).build();\n+    }\n+\n+    @Override\n+    public BinaryFieldPanel clone() {\n+        return (BinaryFieldPanel) super.clone();\n+    }\n+\n+}"},{"sha":"4a089aebecb38f17c9181567ccbe6883677cd664","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/DateFieldPanel.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -35,10 +35,13 @@ public class DateFieldPanel extends FieldPanel<Date> {\n \n     private static final long serialVersionUID = -428975732068281726L;\n \n+    protected final String name;\n+    \n     protected final String datePattern;\n \n     protected DateFieldPanel(final String id, final String name, final IModel<Date> model, final String datePattern) {\n-        super(id, name, model);\n+        super(id, model);\n+        this.name = name;\n         this.datePattern = datePattern;\n     }\n "},{"sha":"22b735feb4f5313e8cddf1ef33f87c517e74c7a6","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/DateTextFieldPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -33,7 +33,6 @@ public class DateTextFieldPanel extends DateFieldPanel {\n     private static final long serialVersionUID = 1919852712185883648L;\n \n     public DateTextFieldPanel(final String id, final String name, final IModel<Date> model, final String datePattern) {\n-\n         super(id, name, model, datePattern);\n \n         field = DateTextField.forDatePattern(\"field\", model, datePattern);\n@@ -76,7 +75,7 @@ protected boolean enableMonthYearSelection() {\n \n     @Override\n     public FieldPanel<Date> clone() {\n-        final FieldPanel<Date> panel = new DateTextFieldPanel(id, name, new Model<Date>(), datePattern);\n+        final FieldPanel<Date> panel = new DateTextFieldPanel(getId(), name, new Model<Date>(), datePattern);\n         panel.setRequired(isRequired());\n         panel.setReadOnly(isReadOnly());\n         panel.setTitle(title);"},{"sha":"52260665ce1575cd609d1979e6817296d0b81be4","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/DateTimeFieldPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -40,7 +40,6 @@ public class DateTimeFieldPanel extends DateFieldPanel {\n     private Form form = null;\n \n     public DateTimeFieldPanel(final String id, final String name, final IModel<Date> model, final String datePattern) {\n-\n         super(id, name, model, datePattern);\n \n         field = new DateTimeField(\"field\", model);\n@@ -179,7 +178,7 @@ public FieldPanel<Date> setStyleSheet(final String classes) {\n \n     @Override\n     public FieldPanel<Date> clone() {\n-        final FieldPanel<Date> panel = new DateTimeFieldPanel(id, name, new Model<Date>(null), datePattern);\n+        final FieldPanel<Date> panel = new DateTimeFieldPanel(getId(), name, new Model<Date>(null), datePattern);\n \n         panel.setRequired(isRequired());\n         panel.setReadOnly(isReadOnly());"},{"sha":"7e6782b8d96e4d7735d99887e7beae00a17f4a4a","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/FieldPanel.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -35,20 +35,13 @@\n \n     protected FormComponent<T> field = null;\n \n-    protected final String id;\n-\n-    protected final String name;\n-\n     protected String title = null;\n \n     protected boolean isRequiredLabelAdded = false;\n \n-    public FieldPanel(final String id, final String name, final IModel<T> model) {\n+    public FieldPanel(final String id, final IModel<T> model) {\n         super(id, model);\n \n-        this.id = id;\n-        this.name = name;\n-\n         final Fragment fragment = new Fragment(\"required\", \"notRequiredFragment\", this);\n         add(fragment);\n "},{"sha":"c738c45c3cef006cf693468c86c358cf892e4d70","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/SpinnerFieldPanel.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -36,6 +36,8 @@\n \n     private static final long serialVersionUID = 6413819574530703577L;\n \n+    private final String name;\n+\n     private final Class<T> reference;\n \n     private final IModel<T> model;\n@@ -48,7 +50,8 @@\n     public SpinnerFieldPanel(final String id, final String name, final Class<T> reference, final IModel<T> model,\n             final T min, final T max) {\n \n-        super(id, name, model);\n+        super(id, model);\n+        this.name = name;\n         this.reference = reference;\n         this.model = model;\n         this.min = min;\n@@ -178,7 +181,7 @@ public void setObject(final T object) {\n \n     @Override\n     public SpinnerFieldPanel<T> clone() {\n-        SpinnerFieldPanel<T> panel = new SpinnerFieldPanel<T>(id, name, reference, model, min, max);\n+        SpinnerFieldPanel<T> panel = new SpinnerFieldPanel<T>(getId(), name, reference, model, min, max);\n \n         panel.setRequired(isRequired());\n         panel.setReadOnly(isReadOnly());"},{"sha":"992eb9cff7160e037d5da74ecdeeb91fe91ff803","filename":"console/src/main/resources/org/apache/syncope/console/pages/SchemaModalPage.html","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.html?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -89,6 +89,17 @@\n             </div>\n           </div>\n \n+          <div wicket:id=\"binaryParams\">\n+            <div class=\"tablerow alt\">\n+              <div class=\"tablecolumn_label short_dynamicsize\">\n+                <label for=\"mimeType\"><wicket:message key=\"mimeType\"/></label>\n+              </div>\n+              <div class=\"tablecolumn_field medium_dynamicsize\">\n+                <span wicket:id=\"mimeType\">[mimeType]</span>\n+              </div>\n+            </div>\n+          </div>\n+\n           <div class=\"tablerow\">\n             <div class=\"tablecolumn_label short_dynamicsize\">\n               <label for=\"validatorClass\"><wicket:message key=\"validatorClass\"/></label>"},{"sha":"989ba00ae191aa35b2447f082935bc2de2b4048a","filename":"console/src/main/resources/org/apache/syncope/console/pages/SchemaModalPage.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.properties?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -36,3 +36,4 @@ title=Schema\n readonly=Read-only\n secretKey=Secret key\n cipherAlgorithm=Cipher algorithm\n+mimeType=MIME Type"},{"sha":"a5d6ebc083c9d65e360412d05e1398b2127ce4e4","filename":"console/src/main/resources/org/apache/syncope/console/pages/SchemaModalPage_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage_it.properties?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -36,3 +36,4 @@ uniqueConstraint=Univoco\n multivalueAndUniqueConstr.validation=Le opzioni 'Multivalore' e 'Vincolo unique' non possono essere entrambe impostate\n secretKey=Chiave segreta\n cipherAlgorithm=Algoritmo di cifratura\n+mimeType=MIME Type"},{"sha":"45c3d748ec15c6ef576f872f86d5b9d327b96f5c","filename":"console/src/main/resources/org/apache/syncope/console/pages/SchemaModalPage_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage_pt_BR.properties?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -36,3 +36,4 @@ title=Esquema\n readonly=Apenas leitura\n secretKey=Chave secreta\n cipherAlgorithm=Algoritmo de criptografia\n+mimeType=MIME Type"},{"sha":"3eb9e13ceb872819c7dc526f362a4eaeb9d94500","filename":"console/src/main/resources/org/apache/syncope/console/wicket/markup/html/form/BinaryFieldPanel.html","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.html?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -0,0 +1,36 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <input style=\"display: none;\" wicket:id=\"textField\"/>\n+    <span style=\"margin-right: 20px;\">\n+      <div style=\"display: table-cell;\">\n+        <form wicket:id=\"uploadForm\">\n+          <input wicket:id=\"fileUpload\" type=\"file\"/>\n+        </form>\n+      </div>\n+      <div style=\"display: table-cell; vertical-align: middle;\">\n+        <a href=\"#\" wicket:id=\"uploadLink\"><img src=\"img/up-icon.png\" alt=\"upload\" title=\"upload\" style=\"vertical-align: middle;\"/></a>\n+        <a href=\"#\" wicket:id=\"downloadLink\"><img src=\"img/down-icon.png\" alt=\"download\" title=\"download\" style=\"vertical-align: middle;\"/></a>\n+        <a href=\"#\" wicket:id=\"resetLink\"><img src=\"img/disable.png\" alt=\"disable\" title=\"remove value\" style=\"vertical-align: middle;\"/></a>\n+        <span wicket:id=\"preview\"/>\n+      </div>\n+    </span>\n+  </wicket:extend>\n+</html>"},{"sha":"9c891421ee98e9c8c0876ab468f420b1cfb46fd1","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":33,"deletions":5,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -35,12 +35,15 @@\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.PasswordPolicySpec;\n import org.apache.syncope.common.util.AttributableOperations;\n+import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n+import org.apache.syncope.core.persistence.beans.AbstractNormalSchema;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n@@ -52,19 +55,22 @@\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.propagation.ConnectorFactory;\n+import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;\n import org.apache.syncope.core.propagation.Connector;\n+import org.apache.syncope.core.propagation.ConnectorFactory;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.InvalidPasswordPolicySpecException;\n-import org.apache.syncope.core.util.jexl.JexlUtil;\n import org.apache.syncope.core.util.MappingUtil;\n import org.apache.syncope.core.util.SecureRandomUtil;\n import org.apache.syncope.core.util.VirAttrCache;\n import org.apache.syncope.core.util.VirAttrCacheValue;\n+import org.apache.syncope.core.util.jexl.JexlUtil;\n+import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -105,6 +111,9 @@ public class ConnObjectUtil {\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+\n     @Autowired\n     private PasswordGenerator pwdGen;\n \n@@ -303,11 +312,28 @@ private <T extends AbstractAttributableTO> T getAttributableTOFromConnObject(fin\n                     attributeTO = new AttributeTO();\n                     attributeTO.setSchema(item.getIntAttrName());\n \n+                    AbstractNormalSchema schema = schemaDAO.find(item.getIntAttrName(), attrUtil.schemaClass());\n+\n                     for (Object value : attribute == null || attribute.getValue() == null\n                             ? Collections.emptyList()\n                             : attribute.getValue()) {\n+\n                         if (value != null) {\n-                            attributeTO.getValues().add(value.toString());\n+                            final AbstractAttrValue attrValue = attrUtil.newAttrValue();\n+                            if (schema == null) {\n+                                attrValue.setStringValue(value.toString());\n+                            } else if (schema.getType() == AttributeSchemaType.Binary) {\n+                                attrValue.setBinaryValue((byte[]) value);\n+                            } else {\n+                                try {\n+                                    attrValue.parseValue(schema, value.toString());\n+                                } catch (ParsingValidationException e) {\n+                                    LOG.error(\"While parsing provided value {}\", value, e);\n+                                    attrValue.setStringValue(value.toString());\n+                                }\n+                            }\n+                            attributeTO.getValues().add(attrValue.getValueAsString(\n+                                    schema == null ? AttributeSchemaType.String : schema.getType()));\n                         }\n                     }\n \n@@ -486,6 +512,8 @@ public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n                     if (value != null) {\n                         if (value instanceof GuardedString || value instanceof GuardedByteArray) {\n                             attrTO.getValues().add(getPassword(value));\n+                        } else if (value instanceof byte[]) {\n+                            attrTO.getValues().add(Base64.encode((byte[]) value));\n                         } else {\n                             attrTO.getValues().add(value.toString());\n                         }\n@@ -625,9 +653,9 @@ private void retrieveVirAttrValue(\n                 }\n             }\n \n-                virAttrCache.put(attrUtil.getType(), owner.getId(), schemaName, toBeCached);\n-            }\n+            virAttrCache.put(attrUtil.getType(), owner.getId(), schemaName, toBeCached);\n         }\n+    }\n \n     private Set<ExternalResource> getTargetResource(\n             final AbstractVirAttr attr, final IntMappingType type, final AttributableUtil attrUtil) {"},{"sha":"6ee527ecc76769e08d3b46061946ff3a66b45207","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractAttrValue.java","status":"modified","additions":59,"deletions":10,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -18,20 +18,26 @@\n  */\n package org.apache.syncope.core.persistence.beans;\n \n+import java.io.UnsupportedEncodingException;\n import java.util.Date;\n import javax.persistence.Basic;\n+import javax.persistence.Lob;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.types.AttributeSchemaType;\n+import org.apache.syncope.core.persistence.validation.attrvalue.InvalidAttrValueException;\n import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;\n import org.apache.syncope.core.persistence.validation.entity.AttrValueCheck;\n import org.apache.syncope.core.util.DataFormat;\n import org.apache.syncope.core.util.Encryptor;\n+import org.springframework.security.crypto.codec.Base64;\n \n @MappedSuperclass\n @AttrValueCheck\n@@ -53,6 +59,9 @@ public abstract class AbstractAttrValue extends AbstractBaseBean {\n \n     private Double doubleValue;\n \n+    @Lob\n+    private byte[] binaryValue;\n+\n     public abstract Long getId();\n \n     public Boolean getBooleanValue() {\n@@ -103,7 +112,15 @@ public void setStringValue(final String stringValue) {\n         this.stringValue = stringValue;\n     }\n \n-    public <T extends AbstractAttrValue> void parseValue(final AbstractNormalSchema schema, final String value)\n+    public byte[] getBinaryValue() {\n+        return binaryValue;\n+    }\n+\n+    public void setBinaryValue(final byte[] binaryValue) {\n+        this.binaryValue = ArrayUtils.clone(binaryValue);\n+    }\n+\n+    public void parseValue(final AbstractNormalSchema schema, final String value)\n             throws ParsingValidationException {\n \n         Exception exception = null;\n@@ -153,6 +170,14 @@ public <T extends AbstractAttrValue> void parseValue(final AbstractNormalSchema\n                 }\n                 break;\n \n+            case Binary:\n+                try {\n+                    this.setBinaryValue(Base64.decode(value.getBytes(SyncopeConstants.DEFAULT_ENCODING)));\n+                } catch (UnsupportedEncodingException pe) {\n+                    exception = pe;\n+                }\n+                break;\n+\n             case String:\n             case Enum:\n             default:\n@@ -169,47 +194,66 @@ public <T extends AbstractAttrValue> void parseValue(final AbstractNormalSchema\n     public <T> T getValue() {\n         return (T) (booleanValue != null\n                 ? getBooleanValue()\n-                : (dateValue != null\n+                : dateValue != null\n                 ? getDateValue()\n-                : (doubleValue != null\n+                : doubleValue != null\n                 ? getDoubleValue()\n-                : (longValue != null\n+                : longValue != null\n                 ? getLongValue()\n-                : stringValue))));\n+                : binaryValue != null\n+                ? getBinaryValue()\n+                : stringValue);\n     }\n \n     public String getValueAsString() {\n-        String result = null;\n-\n         final AttributeSchemaType type = getAttribute() == null || getAttribute().getSchema() == null\n                 || getAttribute().getSchema().getType() == null\n                 ? AttributeSchemaType.String\n                 : getAttribute().getSchema().getType();\n \n+        return getValueAsString(type);\n+    }\n+\n+    public String getValueAsString(final AttributeSchemaType type) {\n+        Exception exception = null;\n+\n+        String result = null;\n+\n         switch (type) {\n \n             case Boolean:\n                 result = getBooleanValue().toString();\n                 break;\n \n             case Long:\n-                result = getAttribute().getSchema().getConversionPattern() == null\n+                result = getAttribute() == null || getAttribute().getSchema() == null\n+                        || getAttribute().getSchema().getConversionPattern() == null\n                         ? getLongValue().toString()\n                         : DataFormat.format(getLongValue(), getAttribute().getSchema().getConversionPattern());\n                 break;\n \n             case Double:\n-                result = getAttribute().getSchema().getConversionPattern() == null\n+                result = getAttribute() == null || getAttribute().getSchema() == null\n+                        || getAttribute().getSchema().getConversionPattern() == null\n                         ? getDoubleValue().toString()\n                         : DataFormat.format(getDoubleValue(), getAttribute().getSchema().getConversionPattern());\n                 break;\n \n             case Date:\n-                result = getAttribute().getSchema().getConversionPattern() == null\n+                result = getAttribute() == null || getAttribute().getSchema() == null\n+                        || getAttribute().getSchema().getConversionPattern() == null\n                         ? DataFormat.format(getDateValue())\n                         : DataFormat.format(getDateValue(), false, getAttribute().getSchema().getConversionPattern());\n                 break;\n \n+            case Binary:\n+                try {\n+                    result = new String(Base64.encode(getBinaryValue()), SyncopeConstants.DEFAULT_ENCODING);\n+                } catch (UnsupportedEncodingException fe) {\n+                    exception = fe;\n+                }\n+                break;\n+\n             case String:\n             case Enum:\n             case Encrypted:\n@@ -218,6 +262,11 @@ public String getValueAsString() {\n                 break;\n         }\n \n+        if (exception != null) {\n+            throw new InvalidAttrValueException(\"While trying to format '\" + getValue() + \"' as \" + type,\n+                    exception);\n+        }\n+\n         return result;\n     }\n "},{"sha":"2d0755cc9197665023427e6d65d145a5c57722df","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractNormalSchema.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractNormalSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractNormalSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractNormalSchema.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -89,6 +89,9 @@ public abstract class AbstractNormalSchema extends AbstractSchema {\n     @Enumerated(EnumType.STRING)\n     private CipherAlgorithm cipherAlgorithm;\n \n+    @Column(nullable = true)\n+    private String mimeType;\n+\n     @Transient\n     private AbstractValidator validator;\n \n@@ -231,4 +234,12 @@ public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\n         this.cipherAlgorithm = cipherAlgorithm;\n     }\n \n+    public String getMimeType() {\n+        return mimeType;\n+    }\n+\n+    public void setMimeType(final String mimeType) {\n+        this.mimeType = mimeType;\n+    }\n+\n }"},{"sha":"234f6e9f2615835a9fd6dfc35499e4a6e06f36fa","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/attrvalue/InvalidAttrValueException.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FInvalidAttrValueException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FInvalidAttrValueException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FInvalidAttrValueException.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -23,11 +23,13 @@\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n \n public class InvalidAttrValueException extends ValidationException {\n-    \n+\n+    private static final long serialVersionUID = -5023202610580202148L;\n+\n     public InvalidAttrValueException(final String errorMessage) {\n         super(errorMessage);\n     }\n-    \n+\n     public InvalidAttrValueException(final String errorMessage, final Throwable t) {\n         super(errorMessage, t);\n     }"},{"sha":"7dc6ddea44435ee3b539c44ecddc9f9808ffc9f7","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/AttrValueValidator.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -46,6 +46,9 @@ public boolean isValid(final AbstractAttrValue object, final ConstraintValidator\n             if (object.getLongValue() != null) {\n                 nonNullVales++;\n             }\n+            if (object.getBinaryValue()!= null) {\n+                nonNullVales++;\n+            }\n             if (object.getStringValue() != null) {\n                 nonNullVales++;\n             }"},{"sha":"efcf39b8520c3240dcb72c587351a164210b1175","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/DBPasswordPropagationActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDBPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDBPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDBPasswordPropagationActions.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -49,7 +49,7 @@ public class DBPasswordPropagationActions extends DefaultPropagationActions {\n     @Autowired\n     private UserDAO userDAO;\n \n-    @Transactional\n+    @Transactional(readOnly = true)\n     @Override\n     public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n         super.before(task, beforeObj);"},{"sha":"32f9aee46dfe0755aa1d59a8147c3d4a5e36dbb1","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractTransactionalController.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -22,10 +22,9 @@\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n- * Adds Spring's transactional support to <tt>AbstractController</tt>.\n+ * Adds Spring's transactional support to {@link AbstractController}.\n  *\n  * @param <T> transfer object used for input / output\n- * @see AbstractController\n  */\n @Transactional(rollbackFor = { Throwable.class })\n abstract class AbstractTransactionalController<T extends AbstractBaseBean> extends AbstractController<T> {"},{"sha":"8c68307401a357766aea39b569e7148bce49fa98","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -252,17 +252,17 @@ public UserTO update(final UserMod userMod) {\n         LOG.debug(\"Transformed: {}\", actual);\n \n         // SYNCOPE-501: check if there are memberships to be removed with virtual attributes assigned\n-        Boolean removeMemberships = Boolean.FALSE;\n-\n+        boolean removeMemberships = false;\n         for (Long membershipId : actual.getMembershipsToRemove()) {\n             if (!binder.fillMembershipVirtual(\n                     null,\n                     null,\n                     membershipId,\n                     Collections.<String>emptySet(),\n                     Collections.<AttributeMod>emptySet(),\n-                    Boolean.TRUE).isEmpty()) {\n-                removeMemberships = Boolean.TRUE;\n+                    true).isEmpty()) {\n+\n+                removeMemberships = true;\n             }\n         }\n         //Actual operations: workflow, propagation, notification\n@@ -277,16 +277,17 @@ public UserTO update(final UserMod userMod) {\n                     actual.getVirAttrsToUpdate());\n             // SYNCOPE-501: update only virtual attributes (if any of them changed), password propagation is\n             // not required, take care also of membership virtual attributes\n-            Boolean addOrUpdateMemberships = Boolean.FALSE;\n+            boolean addOrUpdateMemberships = false;\n             for (MembershipMod membershipMod : actual.getMembershipsToAdd()) {\n                 if (!binder.fillMembershipVirtual(\n                         updated.getResult().getKey().getId(),\n                         membershipMod.getRole(),\n                         null,\n                         membershipMod.getVirAttrsToRemove(),\n                         membershipMod.getVirAttrsToUpdate(),\n-                        Boolean.FALSE).isEmpty()) {\n-                    addOrUpdateMemberships = Boolean.TRUE;\n+                        false).isEmpty()) {\n+\n+                    addOrUpdateMemberships = true;\n                 }\n             }\n             tasks.addAll(!propByResVirAttr.isEmpty() || addOrUpdateMemberships || removeMemberships"},{"sha":"5973de9daebcec98e221e0691bb56294e2d8b7b6","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -480,11 +480,12 @@ public PropagationByResource fillVirtual(\n      * @param vAttrsToBeRemoved virtual attributes to be removed.\n      * @param vAttrsToBeUpdated virtual attributes to be updated.\n      * @param isRemoval flag to check if fill is on removed or added membership\n-     * @return operations to be performed on external resources formembership virtual attributes changes\n+     * @return operations to be performed on external resources for membership virtual attributes changes\n      */\n     public PropagationByResource fillMembershipVirtual(\n             final Long userId, final Long roleId, final Long membershipId, final Set<String> vAttrsToBeRemoved,\n-            final Set<AttributeMod> vAttrsToBeUpdated, final Boolean isRemoval) {\n+            final Set<AttributeMod> vAttrsToBeUpdated, final boolean isRemoval) {\n+\n         final Membership membership = membershipId == null\n                 ? getUserFromId(userId).getMembership(roleId)\n                 : getMembershipFromId(membershipId);\n@@ -505,7 +506,7 @@ public PropagationByResource fillMembershipVirtual(\n     }\n \n     private Set<String> getAttributeNames(final List<? extends AbstractVirAttr> virAttrs) {\n-        final HashSet<String> virAttrNames = new HashSet<String>();\n+        final Set<String> virAttrNames = new HashSet<String>();\n         for (AbstractVirAttr attr : virAttrs) {\n             virAttrNames.add(attr.getSchema().getName());\n         }"},{"sha":"916ea67fc2368e6f473743241a6cd9ea8e6acbb0","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AttrTest.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -24,7 +24,11 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.io.UnsupportedEncodingException;\n+import java.util.Arrays;\n+import java.util.Random;\n import javax.validation.ValidationException;\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -36,6 +40,7 @@\n import org.apache.syncope.core.util.Encryptor;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.crypto.codec.Base64;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n@@ -190,6 +195,32 @@ public void saveWithEncrypted() throws Exception {\n                 encode(\"testvalue\", obscureSchema.getCipherAlgorithm()), obscure.getValues().get(0).getStringValue());\n     }\n \n+    @Test\n+    public void saveWithBinary() throws UnsupportedEncodingException {\n+        SyncopeUser user = userDAO.find(1L);\n+\n+        final USchema photoSchema = userSchemaDAO.find(\"photo\", USchema.class);\n+        assertNotNull(photoSchema);\n+        assertNotNull(photoSchema.getMimeType());\n+\n+        final byte[] bytes = new byte[20];\n+        new Random().nextBytes(bytes);\n+        final String photoB64Value = new String(Base64.encode(bytes), SyncopeConstants.DEFAULT_ENCODING);\n+\n+        UAttr attribute = new UAttr();\n+        attribute.setSchema(photoSchema);\n+        attribute.addValue(photoB64Value, AttributableUtil.getInstance(AttributableType.USER));\n+        attribute.setOwner(user);\n+        user.addAttr(attribute);\n+\n+        userDAO.save(user);\n+\n+        UAttr obscure = user.getAttr(\"photo\");\n+        assertNotNull(obscure);\n+        assertEquals(1, obscure.getValues().size());\n+        assertTrue(Arrays.equals(bytes, obscure.getValues().get(0).getBinaryValue()));\n+    }\n+\n     @Test\n     public void delete() {\n         UAttr attribute = attrDAO.find(104L, UAttr.class);"},{"sha":"6809b3dbd2be75fbbb60682bb961e1e2353cd31c","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.common.types.EntityViolationType;\n-import org.apache.syncope.core.persistence.beans.AbstractNormalSchema;\n import org.apache.syncope.core.persistence.beans.role.RAttr;\n import org.apache.syncope.core.persistence.beans.role.RSchema;\n import org.apache.syncope.core.persistence.beans.user.USchema;\n@@ -50,7 +49,7 @@ public class SchemaTest extends AbstractDAOTest {\n     @Test\n     public void findAll() {\n         List<USchema> userList = schemaDAO.findAll(USchema.class);\n-        assertEquals(14, userList.size());\n+        assertEquals(15, userList.size());\n \n         List<RSchema> roleList = schemaDAO.findAll(RSchema.class);\n         assertEquals(5, roleList.size());"},{"sha":"59d80e3bf116e7aa7f80462d6ab6801fe2ecb7ff","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -130,6 +130,16 @@ public void createEncrypted() {\n         createSchema(AttributableType.MEMBERSHIP, SchemaType.NORMAL, schemaTO);\n     }\n \n+    @Test\n+    public void createBinary() {\n+        SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"x509certificate\");\n+        schemaTO.setType(AttributeSchemaType.Binary);\n+        schemaTO.setMimeType(\"application/x-x509-ca-cert\");\n+\n+        createSchema(AttributableType.ROLE, SchemaType.NORMAL, schemaTO);\n+    }\n+\n     @Test\n     public void delete() {\n         SchemaTO schemaTO = buildSchemaTO(\"todelete\", AttributeSchemaType.String);"},{"sha":"3256af098886af9f2a0c5bbe20afe7817d94265c","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -487,6 +487,8 @@ public void reconcileFromLDAP() {\n                 matchingUsers.getResult().get(0).getVirAttrMap().get(\"virtualReadOnly\").getValues().get(0));\n         // Check for SYNCOPE-270\n         assertNotNull(matchingUsers.getResult().get(0).getAttrMap().get(\"obscure\"));\n+        // Check for SYNCOPE-123\n+        assertNotNull(matchingUsers.getResult().get(0).getAttrMap().get(\"photo\"));\n \n         final RoleTO roleTO = matchingRoles.getResult().iterator().next();\n         assertNotNull(roleTO);"},{"sha":"9bd17a494c6c939b081c3b55ae3748ae5c3e06e6","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -76,6 +76,7 @@\n import javax.ws.rs.core.EntityTag;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.common.util.Base64Utility;\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.mod.ResourceAssociationMod;\n@@ -1743,7 +1744,7 @@ public void issueSYNCOPE354() {\n     }\n \n     @Test\n-    public void issueSYNCOPE357() {\n+    public void issueSYNCOPE357() throws IOException {\n         // 1. create role with LDAP resource\n         RoleTO roleTO = new RoleTO();\n         roleTO.setName(\"SYNCOPE357-\" + getUUIDString());\n@@ -1756,13 +1757,16 @@ public void issueSYNCOPE357() {\n         // 2. create user with membership of the above role\n         UserTO userTO = getUniqueSampleTO(\"syncope357@syncope.apache.org\");\n         userTO.getAttrs().add(attributeTO(\"obscure\", \"valueToBeObscured\"));\n+        userTO.getAttrs().add(attributeTO(\"photo\",\n+                Base64Utility.encode(IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/favicon.jpg\")))));\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(roleTO.getId());\n         userTO.getMemberships().add(membershipTO);\n \n         userTO = createUser(userTO);\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n         assertNotNull(userTO.getAttrMap().get(\"obscure\"));\n+        assertNotNull(userTO.getAttrMap().get(\"photo\"));\n \n         // 3. read user on resource\n         ConnObjectTO connObj = resourceService.getConnectorObject(\n@@ -1771,6 +1775,9 @@ public void issueSYNCOPE357() {\n         AttributeTO registeredAddress = connObj.getAttrMap().get(\"registeredAddress\");\n         assertNotNull(registeredAddress);\n         assertEquals(userTO.getAttrMap().get(\"obscure\").getValues(), registeredAddress.getValues());\n+        AttributeTO jpegPhoto = connObj.getAttrMap().get(\"jpegPhoto\");\n+        assertNotNull(jpegPhoto);\n+        assertEquals(userTO.getAttrMap().get(\"photo\").getValues(), jpegPhoto.getValues());\n \n         // 4. remove role\n         roleService.delete(roleTO.getId());"},{"sha":"45642340c4d2091d28c680a94e1c8efccf0fd8d6","filename":"core/src/test/resources/content.xml","status":"modified","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=591ff5ffc5961287aa5ef68c3310d231523107e1","patch":"@@ -176,6 +176,9 @@ under the License.\n   <USchema name=\"obscure\" type=\"Encrypted\"\n            mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n            secretKey=\"7abcdefghilmnopqrstuvz9#\" cipherAlgorithm=\"SHA\"/>\n+  <USchema name=\"photo\" type=\"Binary\"\n+           mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n+           mimeType=\"application/jpg\"/>\n \n   <UDerSchema name=\"csvuserid\" expression=\"firstname + ',' + surname\"/>\n   <UDerSchema name=\"cn\" expression=\"surname + ', ' + firstname\"/>\n@@ -760,6 +763,9 @@ under the License.\n   <UMappingItem id=\"320\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n                 extAttrName=\"registeredAddress\" intAttrName=\"obscure\" intMappingType=\"UserSchema\"\n                 mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n+  <UMappingItem id=\"321\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n+                extAttrName=\"jpegPhoto\" intAttrName=\"photo\" intMappingType=\"UserSchema\"\n+                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   \n   <RMapping id=\"1\" resource_name=\"resource-ldap\"\n             accountlink=\"&apos;cn=&apos; + name + &apos;,ou=groups,o=isp&apos;\"/>\n@@ -777,22 +783,22 @@ under the License.\n                 accountid=\"0\" password=\"0\" purpose=\"BOTH\"/>\n         \n   <UMapping id=\"16\" resource_name=\"resource-db-sync\"/>\n-  <UMappingItem id=\"321\" accountid=\"0\" mapping_id=\"16\"\n+  <UMappingItem id=\"322\" accountid=\"0\" mapping_id=\"16\"\n                 extAttrName=\"EMAIL\" intAttrName=\"email\" intMappingType=\"UserSchema\" \n                 mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n-  <UMappingItem id=\"322\" accountid=\"0\" mapping_id=\"16\"\n+  <UMappingItem id=\"323\" accountid=\"0\" mapping_id=\"16\"\n                 extAttrName=\"SURNAME\" intAttrName=\"fullname\" intMappingType=\"UserSchema\" \n                 mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n-  <UMappingItem id=\"323\" accountid=\"1\" mapping_id=\"16\"\n+  <UMappingItem id=\"324\" accountid=\"1\" mapping_id=\"16\"\n                 extAttrName=\"__NAME__\" intAttrName=\"aLong\" intMappingType=\"UserSchema\" \n                 mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n-  <UMappingItem id=\"324\" accountid=\"0\" mapping_id=\"16\"\n+  <UMappingItem id=\"325\" accountid=\"0\" mapping_id=\"16\"\n                 extAttrName=\"SURNAME\" intAttrName=\"surname\" intMappingType=\"UserSchema\" \n                 mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n-  <UMappingItem id=\"325\" accountid=\"0\" mapping_id=\"16\"\n+  <UMappingItem id=\"326\" accountid=\"0\" mapping_id=\"16\"\n                 extAttrName=\"USERNAME\" intAttrName=\"Username\" intMappingType=\"Username\" \n                 mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n-  <UMappingItem id=\"326\" accountid=\"0\" mapping_id=\"16\"\n+  <UMappingItem id=\"327\" accountid=\"0\" mapping_id=\"16\"\n                 extAttrName=\"EMAIL\" intAttrName=\"userId\" intMappingType=\"UserSchema\" \n                 mandatoryCondition=\"false\" password=\"0\" purpose=\"BOTH\"/>\n               "},{"sha":"cf212bedcc19ff0d9add48aefe15a89fd604d67f","filename":"core/src/test/resources/favicon.jpg","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fresources%2Ffavicon.jpg","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/591ff5ffc5961287aa5ef68c3310d231523107e1/core%2Fsrc%2Ftest%2Fresources%2Ffavicon.jpg","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Ffavicon.jpg?ref=591ff5ffc5961287aa5ef68c3310d231523107e1"}]}