{"sha":"2cab5d2476885ddac5cd997270614e16151f3f66","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJjYWI1ZDI0NzY4ODVkZGFjNWNkOTk3MjcwNjE0ZTE2MTUxZjNmNjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-07T15:47:54Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-07T15:48:03Z"},"message":"General NPE protections","tree":{"sha":"1d99719697a4a2fd868a2eb7badb7426c4480dea","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1d99719697a4a2fd868a2eb7badb7426c4480dea"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2cab5d2476885ddac5cd997270614e16151f3f66","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2cab5d2476885ddac5cd997270614e16151f3f66","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2cab5d2476885ddac5cd997270614e16151f3f66","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2cab5d2476885ddac5cd997270614e16151f3f66/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b27bed98c83683b01cae2c94c940cd87ab4f583e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b27bed98c83683b01cae2c94c940cd87ab4f583e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b27bed98c83683b01cae2c94c940cd87ab4f583e"}],"stats":{"total":21,"additions":13,"deletions":8},"files":[{"sha":"046d9ea9d54a4913c996579af2d38899971ee8cf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2cab5d2476885ddac5cd997270614e16151f3f66/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2cab5d2476885ddac5cd997270614e16151f3f66/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=2cab5d2476885ddac5cd997270614e16151f3f66","patch":"@@ -34,6 +34,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -134,8 +135,8 @@ public Map<String, Integer> countByRealm(final AnyType anyType) {\n \n     @Override\n     protected void securityChecks(final AnyObject anyObject) {\n-        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(\n-                AnyEntitlement.READ.getFor(anyObject.getType().getKey()));\n+        Set<String> authRealms = SetUtils.emptyIfNull(\n+                AuthContextUtils.getAuthorizations().get(AnyEntitlement.READ.getFor(anyObject.getType().getKey())));\n         boolean authorized = IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n \n             @Override\n@@ -146,7 +147,7 @@ public boolean evaluate(final String realm) {\n         if (!authorized) {\n             authorized = !CollectionUtils.intersection(findDynRealms(anyObject.getKey()), authRealms).isEmpty();\n         }\n-        if (authRealms == null || authRealms.isEmpty() || !authorized) {\n+        if (authRealms.isEmpty() || !authorized) {\n             throw new DelegatedAdministrationException(\n                     anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT.name(), anyObject.getKey());\n         }"},{"sha":"9d28074b1de316e4c74b63b4f2cda63b3291a432","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2cab5d2476885ddac5cd997270614e16151f3f66/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2cab5d2476885ddac5cd997270614e16151f3f66/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=2cab5d2476885ddac5cd997270614e16151f3f66","patch":"@@ -32,6 +32,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.SetUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -170,7 +171,8 @@ public Map<String, Integer> countByRealm() {\n \n     @Override\n     protected void securityChecks(final Group group) {\n-        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_READ);\n+        Set<String> authRealms = SetUtils.emptyIfNull(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_READ));\n         boolean authorized = IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n \n             @Override\n@@ -183,7 +185,7 @@ public boolean evaluate(final String realm) {\n             authorized = !CollectionUtils.intersection(findDynRealms(group.getKey()), authRealms).isEmpty();\n         }\n \n-        if (authRealms == null || authRealms.isEmpty() || !authorized) {\n+        if (authRealms.isEmpty() || !authorized) {\n             throw new DelegatedAdministrationException(\n                     group.getRealm().getFullPath(), AnyTypeKind.GROUP.name(), group.getKey());\n         }\n@@ -541,6 +543,6 @@ public void removeDynMemberships(final User user) {\n     @Transactional(readOnly = true)\n     @Override\n     public Collection<String> findAllResourceKeys(final String key) {\n-        return CollectionUtils.collect(authFind(key).getResources(), EntityUtils.keyTransformer());\n+        return CollectionUtils.collect(find(key).getResources(), EntityUtils.keyTransformer());\n     }\n }"},{"sha":"7523681884f8e0cb467168ef656de8c2b27ff52e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2cab5d2476885ddac5cd997270614e16151f3f66/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2cab5d2476885ddac5cd997270614e16151f3f66/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=2cab5d2476885ddac5cd997270614e16151f3f66","patch":"@@ -35,6 +35,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -178,7 +179,8 @@ protected void securityChecks(final User user) {\n         if (!AuthContextUtils.getUsername().equals(anonymousUser)\n                 && !AuthContextUtils.getUsername().equals(user.getUsername())) {\n \n-            Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_READ);\n+            Set<String> authRealms = SetUtils.emptyIfNull(\n+                    AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_READ));\n             boolean authorized = IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n \n                 @Override\n@@ -189,7 +191,7 @@ public boolean evaluate(final String realm) {\n             if (!authorized) {\n                 authorized = !CollectionUtils.intersection(findDynRealms(user.getKey()), authRealms).isEmpty();\n             }\n-            if (authRealms == null || authRealms.isEmpty() || !authorized) {\n+            if (authRealms.isEmpty() || !authorized) {\n                 throw new DelegatedAdministrationException(\n                         user.getRealm().getFullPath(), AnyTypeKind.USER.name(), user.getKey());\n             }"}]}