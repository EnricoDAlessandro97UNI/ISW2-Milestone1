{"sha":"3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNlODEyNTVlN2E4YmM0OTgxY2FiYjVkOWRiZDE4NWMwOWQwZTZjM2M=","commit":{"author":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-14T18:21:24Z"},"committer":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-14T18:21:24Z"},"message":"SYNCOPE-241 Make persistence tests self contained so persistence can be moved to its own module\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1433021 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8aff53735419f1ad96f4770378a77051b867a9d8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8aff53735419f1ad96f4770378a77051b867a9d8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/comments","author":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"committer":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"parents":[{"sha":"32a8c4df0c65ec1e9109c7dbd83fad523c2725df","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/32a8c4df0c65ec1e9109c7dbd83fad523c2725df","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/32a8c4df0c65ec1e9109c7dbd83fad523c2725df"}],"stats":{"total":1363,"additions":799,"deletions":564},"files":[{"sha":"ea3dcdc61921c721b31b7e9f8e9009ac86525720","filename":"core/src/main/java/org/apache/syncope/core/init/SpringContextInitializer.java","status":"modified","additions":9,"deletions":99,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -18,91 +18,21 @@\n  */\n package org.apache.syncope.core.init;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Properties;\n import javax.servlet.ServletContext;\n+\n+import org.apache.syncope.core.persistence.dao.impl.ContentLoader;\n import org.apache.syncope.core.propagation.ConnectorFactory;\n-import org.apache.syncope.core.workflow.WorkflowLoader;\n-import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n-import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n-import org.apache.syncope.core.workflow.user.activiti.ActivitiUserWorkflowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.BeansException;\n-import org.springframework.beans.factory.BeanFactory;\n-import org.springframework.beans.factory.BeanFactoryAware;\n+import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n-import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.stereotype.Component;\n import org.springframework.web.context.ServletContextAware;\n \n /**\n  * Take care of all initializations needed by Syncope to run up and safe.\n  */\n @Component\n-public class SpringContextInitializer implements ServletContextAware, BeanFactoryAware, InitializingBean {\n-\n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(SpringContextInitializer.class);\n-\n-    private static String uwfAdapterClassName;\n-\n-    private static String rwfAdapterClassName;\n-\n-    static {\n-        try {\n-            initWFAdapterClassNames();\n-        } catch (IOException e) {\n-            LOG.error(\"Could not init uwfAdapterClassName\", e);\n-        }\n-    }\n-\n-    /**\n-     * Read classpath:/workflow.properties in order to determine the configured workflow adapter class name.\n-     *\n-     * @throws IOException if anything goes wrong\n-     */\n-    private static void initWFAdapterClassNames() throws IOException {\n-        Properties props = new java.util.Properties();\n-        InputStream propStream = null;\n-        try {\n-            propStream = ContentLoader.class.getResourceAsStream(\"/workflow.properties\");\n-            props.load(propStream);\n-            uwfAdapterClassName = props.getProperty(\"uwfAdapter\");\n-            rwfAdapterClassName = props.getProperty(\"rwfAdapter\");\n-        } catch (Exception e) {\n-            LOG.error(\"Could not load workflow.properties\", e);\n-        } finally {\n-            if (propStream != null) {\n-                propStream.close();\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Check if the configured user workflow adapter is Activiti's.\n-     *\n-     * @return whether Activiti is configured for user workflow or not\n-     */\n-    public static boolean isActivitiEnabledForUsers() {\n-        return uwfAdapterClassName != null && uwfAdapterClassName.equals(ActivitiUserWorkflowAdapter.class.getName());\n-    }\n-\n-    /**\n-     * Check if the configured role workflow adapter is Activiti's.\n-     *\n-     * @return whether Activiti is configured for role workflow or not\n-     */\n-    public static boolean isActivitiEnabledForRoles() {\n-        // ActivitiRoleWorkflowAdapter hasn't been developed (yet) as part of SYNCOPE-173 \n-        //return rwfAdapterClassName != null && rwfAdapterClassName.equals(ActivitiRoleWorkflowAdapter.class.getName());\n-        return false;\n-    }\n+public class SpringContextInitializer implements ServletContextAware, InitializingBean {\n \n     @Autowired\n     private ConnectorFactory connInstanceLoader;\n@@ -113,46 +43,26 @@ public static boolean isActivitiEnabledForRoles() {\n     @Autowired\n     private JobInstanceLoader jobInstanceLoader;\n \n-    @Autowired\n-    private UserWorkflowAdapter uwfAdapter;\n-\n-    @Autowired\n-    private RoleWorkflowAdapter rwfAdapter;\n-\n     @Autowired\n     private LoggerLoader loggerLoader;\n \n     @Autowired\n     private ImplementationClassNamesLoader classNamesLoader;\n-\n-    private DefaultListableBeanFactory beanFactory;\n+    \n+    @Autowired\n+    private WorkflowAdapterLoader workflowSetup;\n \n     @Override\n     public void setServletContext(final ServletContext servletContext) {\n     }\n \n-    @Override\n-    public void setBeanFactory(final BeanFactory beanFactory) throws BeansException {\n-        this.beanFactory = (DefaultListableBeanFactory) beanFactory;\n-    }\n-\n     @Override\n     public void afterPropertiesSet() throws Exception {\n-        contentLoader.load();\n+        contentLoader.load(ActivitiDetector.isActivitiEnabledForUsers());\n         connInstanceLoader.load();\n         jobInstanceLoader.load();\n         loggerLoader.load();\n         classNamesLoader.load();\n-\n-        if (uwfAdapter.getLoaderClass() != null) {\n-            final WorkflowLoader wfLoader = (WorkflowLoader) beanFactory.createBean(\n-                    uwfAdapter.getLoaderClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-            wfLoader.load();\n-        }\n-        if (rwfAdapter.getLoaderClass() != null) {\n-            final WorkflowLoader wfLoader = (WorkflowLoader) beanFactory.createBean(\n-                    rwfAdapter.getLoaderClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-            wfLoader.load();\n-        }\n+        workflowSetup.load();\n     }\n }"},{"sha":"edb347139342f7100d03618e98d2537ee24be98d","filename":"core/src/main/java/org/apache/syncope/core/init/WorkflowAdapterLoader.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FWorkflowAdapterLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FWorkflowAdapterLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FWorkflowAdapterLoader.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.init;\n+\n+import org.apache.syncope.core.workflow.WorkflowInstanceLoader;\n+import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n+import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.BeanFactoryAware;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class WorkflowAdapterLoader implements BeanFactoryAware {\n+    @Autowired\n+    private UserWorkflowAdapter uwfAdapter;\n+\n+    @Autowired\n+    private RoleWorkflowAdapter rwfAdapter;\n+\n+    private DefaultListableBeanFactory beanFactory;\n+\n+    @Override\n+    public void setBeanFactory(final BeanFactory beanFactory) throws BeansException {\n+        this.beanFactory = (DefaultListableBeanFactory) beanFactory;\n+    }\n+    \n+    public void load() {\n+        if (uwfAdapter.getLoaderClass() != null) {\n+            final WorkflowInstanceLoader wfLoader = (WorkflowInstanceLoader) beanFactory.createBean(\n+                    uwfAdapter.getLoaderClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+            wfLoader.load();\n+        }\n+        if (rwfAdapter.getLoaderClass() != null) {\n+            final WorkflowInstanceLoader wfLoader = (WorkflowInstanceLoader) beanFactory.createBean(\n+                    rwfAdapter.getLoaderClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+            wfLoader.load();\n+        }\n+    }\n+}"},{"sha":"5eda93e5ccad660c2325a6976921afa8aca9eed8","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ContentLoader.java","status":"renamed","additions":102,"deletions":75,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FContentLoader.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -16,17 +16,20 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.init;\n+package org.apache.syncope.core.persistence.dao.impl;\n \n+import java.io.Closeable;\n import java.io.InputStream;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.Properties;\n+\n import javax.sql.DataSource;\n import javax.xml.parsers.SAXParser;\n import javax.xml.parsers.SAXParserFactory;\n+\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n import org.apache.syncope.core.util.ImportExport;\n import org.slf4j.Logger;\n@@ -37,11 +40,13 @@\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n- * If empty, load default content to Syncope database by reading from\n- * <code>ckasspath:/content.xml</code>.\n+ * Initialize Database with default content if no data is present already\n  */\n @Component\n public class ContentLoader {\n+    private static final String VIEWS_FILE = \"/views.xml\";\n+    private static final String INDEXES_FILE = \"/indexes.xml\";\n+    private static final String CONTENT_FILE = \"/content.xml\";\n \n     /**\n      * Logger.\n@@ -55,61 +60,57 @@ public class ContentLoader {\n     private ImportExport importExport;\n \n     @Transactional\n-    public void load() {\n-        // 0. DB connection, to be used below\n+    public void load(boolean activitiEnabledForUsers) {\n         Connection conn = DataSourceUtils.getConnection(dataSource);\n \n-        // 1. Check wether we are allowed to load default content into the DB\n-        PreparedStatement statement = null;\n+        boolean existingData = isDataPresent(conn);\n+        if (existingData) {\n+            LOG.info(\"Data found in the database, leaving untouched\");\n+            closeConnection(conn);\n+            return;\n+        }\n+\n+        LOG.info(\"Empty database found, loading default content\");\n+\n+        createViews(conn);\n+        createIndexes(conn);\n+        if (activitiEnabledForUsers) {\n+            deleteActivitiProperties(conn);\n+        }\n+        closeConnection(conn);\n+        loadDefaultContent();\n+    }\n+\n+    private boolean isDataPresent(Connection conn) {\n         ResultSet resultSet = null;\n-        boolean existingData = false;\n+        PreparedStatement statement = null;\n         try {\n             final String queryContent = \"SELECT * FROM \" + SyncopeConf.class.getSimpleName();\n             statement = conn.prepareStatement(\n                     queryContent, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\n             resultSet = statement.executeQuery();\n             resultSet.last();\n-\n-            existingData = resultSet.getRow() > 0;\n+            return resultSet.getRow() > 0;\n         } catch (SQLException e) {\n             LOG.error(\"Could not access to table \" + SyncopeConf.class.getSimpleName(), e);\n-\n-            // Setting this to true make nothing to be done below\n-            existingData = true;\n+            return true;\n         } finally {\n-            try {\n-                if (resultSet != null) {\n-                    resultSet.close();\n-                }\n-            } catch (SQLException e) {\n-                LOG.error(\"While closing SQL result set\", e);\n-            }\n-            try {\n-                if (statement != null) {\n-                    statement.close();\n-                }\n-            } catch (SQLException e) {\n-                LOG.error(\"While closing SQL statement\", e);\n-            }\n-        }\n-\n-        if (existingData) {\n-            LOG.info(\"Data found in the database, leaving untouched\");\n-            return;\n+            closeResultSet(resultSet);\n+            closeStatement(statement);\n         }\n+    }\n \n-        LOG.info(\"Empty database found, loading default content\");\n-\n-        // 2. Create views\n+    private void createViews(Connection conn) {\n         LOG.debug(\"Creating views\");\n         try {\n-            InputStream viewsStream = getClass().getResourceAsStream(\"/views.xml\");\n+            InputStream viewsStream = getClass().getResourceAsStream(VIEWS_FILE);\n             Properties views = new Properties();\n             views.loadFromXML(viewsStream);\n+            close(viewsStream);\n \n             for (String idx : views.stringPropertyNames()) {\n                 LOG.debug(\"Creating view {}\", views.get(idx).toString());\n-\n+                PreparedStatement statement = null;\n                 try {\n                     final String updateViews = views.get(idx).toString().replaceAll(\"\\\\n\", \" \");\n                     statement = conn.prepareStatement(updateViews);\n@@ -127,69 +128,95 @@ public void load() {\n         } catch (Exception e) {\n             LOG.error(\"While creating views\", e);\n         }\n+    }\n \n-        // 3. Create indexes\n+    private void createIndexes(Connection conn) {\n         LOG.debug(\"Creating indexes\");\n+\n+        InputStream indexesStream = getClass().getResourceAsStream(INDEXES_FILE);\n+        Properties indexes = new Properties();\n         try {\n-            InputStream indexesStream = getClass().getResourceAsStream(\"/indexes.xml\");\n-            Properties indexes = new Properties();\n             indexes.loadFromXML(indexesStream);\n-\n-            for (String idx : indexes.stringPropertyNames()) {\n-                LOG.debug(\"Creating index {}\", indexes.get(idx).toString());\n-\n-                try {\n-                    final String updateIndexed = indexes.get(idx).toString();\n-                    statement = conn.prepareStatement(updateIndexed);\n-                    statement.executeUpdate();\n-                } catch (SQLException e) {\n-                    LOG.error(\"Could not create index \", e);\n-                } finally {\n-                    if (statement != null) {\n-                        statement.close();\n-                    }\n-                }\n-            }\n-\n-            LOG.debug(\"Indexes created, go for default content\");\n         } catch (Exception e) {\n-            LOG.error(\"While creating indexes\", e);\n+            throw new RuntimeException(\"Error loading properties from stream\", e);\n         }\n+        close(indexesStream);\n \n-        // Can't test uwfAdapter.getClass() because it is @Autowired\n-        if (SpringContextInitializer.isActivitiEnabledForUsers()) {\n+        for (String idx : indexes.stringPropertyNames()) {\n+            LOG.debug(\"Creating index {}\", indexes.get(idx).toString());\n+            PreparedStatement statement = null;\n             try {\n-                statement = conn.prepareStatement(\"DELETE FROM ACT_GE_PROPERTY\");\n+                final String updateIndexed = indexes.get(idx).toString();\n+                statement = conn.prepareStatement(updateIndexed);\n                 statement.executeUpdate();\n             } catch (SQLException e) {\n-                LOG.error(\"Error during ACT_GE_PROPERTY delete rows\", e);\n+                LOG.error(\"Could not create index \", e);\n             } finally {\n-                if (statement != null) {\n-                    try {\n-                        statement.close();\n-                    } catch (SQLException e) {\n-                        LOG.error(\"Error closing statement of ACT_GE_PROPERTY delete rows\", e);\n-                    }\n-                }\n+                closeStatement(statement);\n             }\n         }\n+    }\n \n+    private void deleteActivitiProperties(Connection conn) {\n+        PreparedStatement statement = null;\n         try {\n-            conn.close();\n+            statement = conn.prepareStatement(\"DELETE FROM ACT_GE_PROPERTY\");\n+            statement.executeUpdate();\n         } catch (SQLException e) {\n-            LOG.error(\"While closing SQL connection\", e);\n+            LOG.error(\"Error during ACT_GE_PROPERTY delete rows\", e);\n         } finally {\n-            DataSourceUtils.releaseConnection(conn, dataSource);\n+            closeStatement(statement);\n         }\n+    }\n \n-        // 4. Load default content\n+    private void loadDefaultContent() {\n         SAXParserFactory factory = SAXParserFactory.newInstance();\n         try {\n             SAXParser parser = factory.newSAXParser();\n-            parser.parse(getClass().getResourceAsStream(\"/content.xml\"), importExport);\n+            parser.parse(getClass().getResourceAsStream(CONTENT_FILE), importExport);\n             LOG.debug(\"Default content successfully loaded\");\n         } catch (Exception e) {\n             LOG.error(\"While loading default content\", e);\n         }\n     }\n+\n+    private void closeResultSet(ResultSet resultSet) {\n+        try {\n+            if (resultSet != null) {\n+                resultSet.close();\n+            }\n+        } catch (SQLException e) {\n+            LOG.error(\"While closing SQL result set\", e);\n+        }\n+    }\n+\n+    private void closeStatement(PreparedStatement statement) {\n+        if (statement != null) {\n+            try {\n+                statement.close();\n+            } catch (SQLException e) {\n+                LOG.error(\"Error closing SQL statement\", e);\n+            }\n+        }\n+    }\n+\n+    private void closeConnection(Connection conn) {\n+        try {\n+            conn.close();\n+        } catch (SQLException e) {\n+            LOG.error(\"Error closing SQL connection\", e);\n+        } finally {\n+            DataSourceUtils.releaseConnection(conn, dataSource);\n+        }\n+    }\n+    \n+    private void close(Closeable closeable) {\n+        if (closeable != null) {\n+            try {\n+                closeable.close();\n+            } catch (Throwable t) {\n+                LOG.error(\"Error closing closeable\", t);\n+            }\n+        }\n+    }\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/init/ContentLoader.java"},{"sha":"052566abc8e6cf752e18de526cc7d5d2d76ef1d0","filename":"core/src/main/java/org/apache/syncope/core/policy/AccountPolicyEnforcer.java","status":"modified","additions":75,"deletions":4,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -18,13 +18,84 @@\n  */\n package org.apache.syncope.core.policy;\n \n+import java.util.regex.Pattern;\n+\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.types.AccountPolicySpec;\n import org.apache.syncope.types.PolicyType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AccountPolicyEnforcer extends PolicyEnforcer<AccountPolicySpec, SyncopeUser> {\n+\n+    private static final Pattern PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n+\n+    private static final Pattern LCPATTERN = Pattern.compile(\"[a-z0-9-_@. ]+\");\n+\n+    private static final Pattern UCPATTERN = Pattern.compile(\"[A-Z0-9-_@. ]+\");\n+    \n+    @Autowired(required=false)\n+    UserSuspender userSuspender;\n+\n+    /* (non-Javadoc)\n+     * @see AccountPolicyEnforcer#enforce(AccountPolicySpec, PolicyType, SyncopeUser)\n+     */\n+    @Override\n+    public void enforce(final AccountPolicySpec policy, final PolicyType type, final SyncopeUser user)\n+            throws AccountPolicyException, PolicyEnforceException {\n+\n+        if (user.getUsername() == null) {\n+            throw new PolicyEnforceException(\"Invalid account\");\n+        }\n+\n+        if (policy == null) {\n+            throw new PolicyEnforceException(\"Invalid policy\");\n+        }\n+\n+        // check min length\n+        if (policy.getMinLength() > 0 && policy.getMinLength() > user.getUsername().length()) {\n+            throw new AccountPolicyException(\"Username too short\");\n+        }\n+\n+        // check max length\n+        if (policy.getMaxLength() > 0 && policy.getMaxLength() < user.getUsername().length()) {\n+            throw new AccountPolicyException(\"Username too long\");\n+        }\n+\n+        // check words not permitted\n+        for (String word : policy.getWordsNotPermitted()) {\n+            if (user.getUsername().contains(word)) {\n+                throw new AccountPolicyException(\"Used word(s) not permitted\");\n+            }\n+        }\n+\n+        // check syntax\n+        if ((policy.isAllLowerCase() && !LCPATTERN.matcher(user.getUsername()).matches())\n+                || (policy.isAllUpperCase() && !UCPATTERN.matcher(user.getUsername()).matches())\n+                || !PATTERN.matcher(user.getUsername()).matches()) {\n+            throw new AccountPolicyException(\"Invalid username syntax\");\n+        }\n+\n+        // check prefix\n+        for (String prefix : policy.getPrefixesNotPermitted()) {\n+            if (user.getUsername().startsWith(prefix)) {\n+                throw new AccountPolicyException(\"Prefix not permitted\");\n+            }\n+        }\n+\n+        // check suffix\n+        for (String suffix : policy.getSuffixesNotPermitted()) {\n+            if (user.getUsername().endsWith(suffix)) {\n+                throw new AccountPolicyException(\"Suffix not permitted\");\n+            }\n+        }\n \n-public interface AccountPolicyEnforcer {\n+        // check for subsequent failed logins\n+        if (user.getFailedLogins() != null && policy.getPermittedLoginRetries() > 0\n+                && user.getFailedLogins() > policy.getPermittedLoginRetries() && !user.getSuspended()) {\n+            userSuspender.suspend(policy, user);\n+        }\n+    }\n \n-    public abstract void enforce(AccountPolicySpec policy, PolicyType type,\n-            SyncopeUser user) throws AccountPolicyException,\n-            PolicyEnforceException;\n }"},{"sha":"cdacd3939a4525ea010bb87a17d4d29ba1d2baf8","filename":"core/src/main/java/org/apache/syncope/core/policy/PasswordPolicyEnforcer.java","status":"modified","additions":171,"deletions":5,"changes":176,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -20,11 +20,177 @@\n \n import org.apache.syncope.types.PasswordPolicySpec;\n import org.apache.syncope.types.PolicyType;\n+import org.springframework.stereotype.Component;\n \n-public interface PasswordPolicyEnforcer {\n+@Component\n+public class PasswordPolicyEnforcer extends PolicyEnforcer<PasswordPolicySpec, String> {\n \n-\tpublic abstract void enforce(PasswordPolicySpec policy, PolicyType type,\n-\t\t\tString password) throws PasswordPolicyException,\n-\t\t\tPolicyEnforceException;\n+    /* (non-Javadoc)\n+\t * @see org.apache.syncope.core.policy.PasswordPolicyEnforcer#enforce(org.apache.syncope.types.PasswordPolicySpec, org.apache.syncope.types.PolicyType, java.lang.String)\n+\t */\n+\t@Override\n+    public void enforce(final PasswordPolicySpec policy, final PolicyType type, final String password)\n+            throws PasswordPolicyException, PolicyEnforceException {\n \n-}\n\\ No newline at end of file\n+        if (password == null) {\n+            throw new PolicyEnforceException(\"Invalid password\");\n+        }\n+\n+        if (policy == null) {\n+            throw new PolicyEnforceException(\"Invalid policy\");\n+        }\n+\n+        // check length\n+        if (policy.getMinLength() > 0 && policy.getMinLength() > password.length()) {\n+            throw new PasswordPolicyException(\"Password too short\");\n+        }\n+\n+        if (policy.getMaxLength() > 0 && policy.getMaxLength() < password.length()) {\n+            throw new PasswordPolicyException(\"Password too long\");\n+        }\n+\n+        // check words not permitted\n+        for (String word : policy.getWordsNotPermitted()) {\n+            if (password.contains(word)) {\n+                throw new PasswordPolicyException(\"Used word(s) not permitted\");\n+            }\n+        }\n+\n+        // check digits occurrence\n+        if (policy.isDigitRequired() && !checkForDigit(password)) {\n+            throw new PasswordPolicyException(\"Password must contain digit(s)\");\n+        }\n+\n+        // check lowercase alphabetic characters occurrence\n+        if (policy.isLowercaseRequired() && !checkForLowercase(password)) {\n+            throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n+        }\n+\n+        // check uppercase alphabetic characters occurrence\n+        if (policy.isUppercaseRequired() && !checkForUppercase(password)) {\n+            throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n+        }\n+\n+        // check prefix\n+        for (String prefix : policy.getPrefixesNotPermitted()) {\n+            if (password.startsWith(prefix)) {\n+                throw new PasswordPolicyException(\"Prefix not permitted\");\n+            }\n+        }\n+\n+        // check suffix\n+        for (String suffix : policy.getSuffixesNotPermitted()) {\n+            if (password.endsWith(suffix)) {\n+                throw new PasswordPolicyException(\"Suffix not permitted\");\n+            }\n+        }\n+\n+        // check digit first occurrence\n+        if (policy.isMustStartWithDigit() && !checkForFirstDigit(password)) {\n+            throw new PasswordPolicyException(\"Password must start with a digit\");\n+        }\n+\n+        if (policy.isMustntStartWithDigit() && checkForFirstDigit(password)) {\n+            throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n+        }\n+\n+        // check digit last occurrence\n+        if (policy.isMustEndWithDigit() && !checkForLastDigit(password)) {\n+            throw new PasswordPolicyException(\"Password must end with a digit\");\n+        }\n+\n+        if (policy.isMustntEndWithDigit() && checkForLastDigit(password)) {\n+            throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n+        }\n+\n+        // check alphanumeric characters occurence\n+        if (policy.isAlphanumericRequired() && !checkForAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n+        }\n+\n+        // check non alphanumeric characters occurence\n+        if (policy.isNonAlphanumericRequired() && !checkForNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n+        }\n+\n+        // check alphanumeric character first occurrence\n+        if (policy.isMustStartWithAlpha() && !checkForFirstAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n+        }\n+\n+        if (policy.isMustntStartWithAlpha() && checkForFirstAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n+        }\n+\n+        // check alphanumeric character last occurrence\n+        if (policy.isMustEndWithAlpha() && !checkForLastAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n+        }\n+\n+        if (policy.isMustntEndWithAlpha() && checkForLastAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n+        }\n+\n+        // check non alphanumeric character first occurrence\n+        if (policy.isMustStartWithNonAlpha() && !checkForFirstNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n+        }\n+\n+        if (policy.isMustntStartWithNonAlpha() && checkForFirstNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n+        }\n+\n+        // check non alphanumeric character last occurrence\n+        if (policy.isMustEndWithNonAlpha() && !checkForLastNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n+        }\n+\n+        if (policy.isMustntEndWithNonAlpha() && checkForLastNonAlphanumeric(password)) {\n+            throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n+        }\n+    }\n+\n+    private boolean checkForDigit(final String str) {\n+        return PolicyPattern.DIGIT.matcher(str).matches();\n+    }\n+\n+    private boolean checkForLowercase(final String str) {\n+        return PolicyPattern.ALPHA_LOWERCASE.matcher(str).matches();\n+    }\n+\n+    private boolean checkForUppercase(final String str) {\n+        return PolicyPattern.ALPHA_UPPERCASE.matcher(str).matches();\n+    }\n+\n+    private boolean checkForFirstDigit(final String str) {\n+        return PolicyPattern.FIRST_DIGIT.matcher(str).matches();\n+    }\n+\n+    private boolean checkForLastDigit(final String str) {\n+        return PolicyPattern.LAST_DIGIT.matcher(str).matches();\n+    }\n+\n+    private boolean checkForAlphanumeric(final String str) {\n+        return PolicyPattern.ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForFirstAlphanumeric(final String str) {\n+        return PolicyPattern.FIRST_ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForLastAlphanumeric(final String str) {\n+        return PolicyPattern.LAST_ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForNonAlphanumeric(final String str) {\n+        return PolicyPattern.NON_ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForFirstNonAlphanumeric(final String str) {\n+        return PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForLastNonAlphanumeric(final String str) {\n+        return PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(str).matches();\n+    }\n+}"},{"sha":"285c765e4f24d35217292db45a28d66b378c1ace","filename":"core/src/main/java/org/apache/syncope/core/policy/UserSuspender.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FUserSuspender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FUserSuspender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FUserSuspender.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.policy;\n+\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.types.AccountPolicySpec;\n+\n+public interface UserSuspender {\n+    void suspend(final AccountPolicySpec policy, final SyncopeUser user);\n+}"},{"sha":"2d95b2864761c8e41fe36aa0935a601c633fc762","filename":"core/src/main/java/org/apache/syncope/core/policy/impl/AccountPolicyEnforcerImpl.java","status":"removed","additions":0,"deletions":148,"changes":148,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32a8c4df0c65ec1e9109c7dbd83fad523c2725df/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2Fimpl%2FAccountPolicyEnforcerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32a8c4df0c65ec1e9109c7dbd83fad523c2725df/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2Fimpl%2FAccountPolicyEnforcerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2Fimpl%2FAccountPolicyEnforcerImpl.java?ref=32a8c4df0c65ec1e9109c7dbd83fad523c2725df","patch":"@@ -1,148 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.policy.impl;\n-\n-import java.util.AbstractMap.SimpleEntry;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.regex.Pattern;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.core.persistence.beans.PropagationTask;\n-import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.policy.AccountPolicyEnforcer;\n-import org.apache.syncope.core.policy.AccountPolicyException;\n-import org.apache.syncope.core.policy.PolicyEnforceException;\n-import org.apache.syncope.core.policy.PolicyEnforcer;\n-import org.apache.syncope.core.propagation.PropagationManager;\n-import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.rest.data.UserDataBinder;\n-import org.apache.syncope.core.workflow.WorkflowResult;\n-import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n-import org.apache.syncope.types.AccountPolicySpec;\n-import org.apache.syncope.types.PolicyType;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class AccountPolicyEnforcerImpl extends PolicyEnforcer<AccountPolicySpec, SyncopeUser>\n-        implements AccountPolicyEnforcer {\n-\n-    @Autowired\n-    private UserWorkflowAdapter uwfAdapter;\n-\n-    @Autowired\n-    private PropagationManager propagationManager;\n-\n-    @Autowired\n-    private PropagationTaskExecutor taskExecutor;\n-\n-    @Autowired\n-    private UserDataBinder userDataBinder;\n-\n-    private static final Pattern PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n-\n-    private static final Pattern LCPATTERN = Pattern.compile(\"[a-z0-9-_@. ]+\");\n-\n-    private static final Pattern UCPATTERN = Pattern.compile(\"[A-Z0-9-_@. ]+\");\n-\n-    /* (non-Javadoc)\n-     * @see AccountPolicyEnforcer#enforce(AccountPolicySpec, PolicyType, SyncopeUser)\n-     */\n-    @Override\n-    public void enforce(final AccountPolicySpec policy, final PolicyType type, final SyncopeUser user)\n-            throws AccountPolicyException, PolicyEnforceException {\n-\n-        if (user.getUsername() == null) {\n-            throw new PolicyEnforceException(\"Invalid account\");\n-        }\n-\n-        if (policy == null) {\n-            throw new PolicyEnforceException(\"Invalid policy\");\n-        }\n-\n-        // check min length\n-        if (policy.getMinLength() > 0 && policy.getMinLength() > user.getUsername().length()) {\n-            throw new AccountPolicyException(\"Username too short\");\n-        }\n-\n-        // check max length\n-        if (policy.getMaxLength() > 0 && policy.getMaxLength() < user.getUsername().length()) {\n-            throw new AccountPolicyException(\"Username too long\");\n-        }\n-\n-        // check words not permitted\n-        for (String word : policy.getWordsNotPermitted()) {\n-            if (user.getUsername().contains(word)) {\n-                throw new AccountPolicyException(\"Used word(s) not permitted\");\n-            }\n-        }\n-\n-        // check syntax\n-        if ((policy.isAllLowerCase() && !LCPATTERN.matcher(user.getUsername()).matches())\n-                || (policy.isAllUpperCase() && !UCPATTERN.matcher(user.getUsername()).matches())\n-                || !PATTERN.matcher(user.getUsername()).matches()) {\n-            throw new AccountPolicyException(\"Invalid username syntax\");\n-        }\n-\n-        // check prefix\n-        for (String prefix : policy.getPrefixesNotPermitted()) {\n-            if (user.getUsername().startsWith(prefix)) {\n-                throw new AccountPolicyException(\"Prefix not permitted\");\n-            }\n-        }\n-\n-        // check suffix\n-        for (String suffix : policy.getSuffixesNotPermitted()) {\n-            if (user.getUsername().endsWith(suffix)) {\n-                throw new AccountPolicyException(\"Suffix not permitted\");\n-            }\n-        }\n-\n-        // check for subsequent failed logins\n-        if (user.getFailedLogins() != null && policy.getPermittedLoginRetries() > 0\n-                && user.getFailedLogins() > policy.getPermittedLoginRetries() && !user.getSuspended()) {\n-            try {\n-                LOG.debug(\"User {}:{} is over to max failed logins\", user.getId(), user.getUsername());\n-\n-                // reduce failed logins number to avoid multiple request\n-                user.setFailedLogins(user.getFailedLogins() - 1);\n-\n-                // disable user\n-                final WorkflowResult<Long> updated = uwfAdapter.suspend(user);\n-\n-                // propagate suspension if and only if it is required by policy\n-                if (policy.isPropagateSuspension()) {\n-                    final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                            new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                            new SimpleEntry<Long, Boolean>(updated.getResult(), Boolean.FALSE),\n-                            updated.getPropByRes(), updated.getPerformedTasks()));\n-\n-                    taskExecutor.execute(tasks);\n-                }\n-\n-                if (LOG.isDebugEnabled()) {\n-                    final UserTO savedTO = userDataBinder.getUserTO(updated.getResult());\n-                    LOG.debug(\"About to return suspended user\\n{}\", savedTO);\n-                }\n-            } catch (Exception e) {\n-                LOG.error(\"Error during user suspension\", e);\n-            }\n-        }\n-    }\n-}"},{"sha":"58a5f14b82d6d58f0103759d605869cdc35046fc","filename":"core/src/main/java/org/apache/syncope/core/policy/impl/PasswordPolicyEnforcerImpl.java","status":"removed","additions":0,"deletions":201,"changes":201,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32a8c4df0c65ec1e9109c7dbd83fad523c2725df/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2Fimpl%2FPasswordPolicyEnforcerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32a8c4df0c65ec1e9109c7dbd83fad523c2725df/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2Fimpl%2FPasswordPolicyEnforcerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2Fimpl%2FPasswordPolicyEnforcerImpl.java?ref=32a8c4df0c65ec1e9109c7dbd83fad523c2725df","patch":"@@ -1,201 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.policy.impl;\n-\n-import org.apache.syncope.core.policy.PasswordPolicyEnforcer;\n-import org.apache.syncope.core.policy.PasswordPolicyException;\n-import org.apache.syncope.core.policy.PolicyEnforceException;\n-import org.apache.syncope.core.policy.PolicyEnforcer;\n-import org.apache.syncope.core.policy.PolicyPattern;\n-import org.apache.syncope.types.PasswordPolicySpec;\n-import org.apache.syncope.types.PolicyType;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class PasswordPolicyEnforcerImpl extends PolicyEnforcer<PasswordPolicySpec, String> implements PasswordPolicyEnforcer {\n-\n-    /* (non-Javadoc)\n-\t * @see org.apache.syncope.core.policy.PasswordPolicyEnforcer#enforce(org.apache.syncope.types.PasswordPolicySpec, org.apache.syncope.types.PolicyType, java.lang.String)\n-\t */\n-\t@Override\n-    public void enforce(final PasswordPolicySpec policy, final PolicyType type, final String password)\n-            throws PasswordPolicyException, PolicyEnforceException {\n-\n-        if (password == null) {\n-            throw new PolicyEnforceException(\"Invalid password\");\n-        }\n-\n-        if (policy == null) {\n-            throw new PolicyEnforceException(\"Invalid policy\");\n-        }\n-\n-        // check length\n-        if (policy.getMinLength() > 0 && policy.getMinLength() > password.length()) {\n-            throw new PasswordPolicyException(\"Password too short\");\n-        }\n-\n-        if (policy.getMaxLength() > 0 && policy.getMaxLength() < password.length()) {\n-            throw new PasswordPolicyException(\"Password too long\");\n-        }\n-\n-        // check words not permitted\n-        for (String word : policy.getWordsNotPermitted()) {\n-            if (password.contains(word)) {\n-                throw new PasswordPolicyException(\"Used word(s) not permitted\");\n-            }\n-        }\n-\n-        // check digits occurrence\n-        if (policy.isDigitRequired() && !checkForDigit(password)) {\n-            throw new PasswordPolicyException(\"Password must contain digit(s)\");\n-        }\n-\n-        // check lowercase alphabetic characters occurrence\n-        if (policy.isLowercaseRequired() && !checkForLowercase(password)) {\n-            throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n-        }\n-\n-        // check uppercase alphabetic characters occurrence\n-        if (policy.isUppercaseRequired() && !checkForUppercase(password)) {\n-            throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n-        }\n-\n-        // check prefix\n-        for (String prefix : policy.getPrefixesNotPermitted()) {\n-            if (password.startsWith(prefix)) {\n-                throw new PasswordPolicyException(\"Prefix not permitted\");\n-            }\n-        }\n-\n-        // check suffix\n-        for (String suffix : policy.getSuffixesNotPermitted()) {\n-            if (password.endsWith(suffix)) {\n-                throw new PasswordPolicyException(\"Suffix not permitted\");\n-            }\n-        }\n-\n-        // check digit first occurrence\n-        if (policy.isMustStartWithDigit() && !checkForFirstDigit(password)) {\n-            throw new PasswordPolicyException(\"Password must start with a digit\");\n-        }\n-\n-        if (policy.isMustntStartWithDigit() && checkForFirstDigit(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n-        }\n-\n-        // check digit last occurrence\n-        if (policy.isMustEndWithDigit() && !checkForLastDigit(password)) {\n-            throw new PasswordPolicyException(\"Password must end with a digit\");\n-        }\n-\n-        if (policy.isMustntEndWithDigit() && checkForLastDigit(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n-        }\n-\n-        // check alphanumeric characters occurence\n-        if (policy.isAlphanumericRequired() && !checkForAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n-        }\n-\n-        // check non alphanumeric characters occurence\n-        if (policy.isNonAlphanumericRequired() && !checkForNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n-        }\n-\n-        // check alphanumeric character first occurrence\n-        if (policy.isMustStartWithAlpha() && !checkForFirstAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n-        }\n-\n-        if (policy.isMustntStartWithAlpha() && checkForFirstAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n-        }\n-\n-        // check alphanumeric character last occurrence\n-        if (policy.isMustEndWithAlpha() && !checkForLastAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n-        }\n-\n-        if (policy.isMustntEndWithAlpha() && checkForLastAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n-        }\n-\n-        // check non alphanumeric character first occurrence\n-        if (policy.isMustStartWithNonAlpha() && !checkForFirstNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n-        }\n-\n-        if (policy.isMustntStartWithNonAlpha() && checkForFirstNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n-        }\n-\n-        // check non alphanumeric character last occurrence\n-        if (policy.isMustEndWithNonAlpha() && !checkForLastNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n-        }\n-\n-        if (policy.isMustntEndWithNonAlpha() && checkForLastNonAlphanumeric(password)) {\n-            throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n-        }\n-    }\n-\n-    private boolean checkForDigit(final String str) {\n-        return PolicyPattern.DIGIT.matcher(str).matches();\n-    }\n-\n-    private boolean checkForLowercase(final String str) {\n-        return PolicyPattern.ALPHA_LOWERCASE.matcher(str).matches();\n-    }\n-\n-    private boolean checkForUppercase(final String str) {\n-        return PolicyPattern.ALPHA_UPPERCASE.matcher(str).matches();\n-    }\n-\n-    private boolean checkForFirstDigit(final String str) {\n-        return PolicyPattern.FIRST_DIGIT.matcher(str).matches();\n-    }\n-\n-    private boolean checkForLastDigit(final String str) {\n-        return PolicyPattern.LAST_DIGIT.matcher(str).matches();\n-    }\n-\n-    private boolean checkForAlphanumeric(final String str) {\n-        return PolicyPattern.ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForFirstAlphanumeric(final String str) {\n-        return PolicyPattern.FIRST_ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForLastAlphanumeric(final String str) {\n-        return PolicyPattern.LAST_ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForNonAlphanumeric(final String str) {\n-        return PolicyPattern.NON_ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForFirstNonAlphanumeric(final String str) {\n-        return PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(str).matches();\n-    }\n-\n-    private boolean checkForLastNonAlphanumeric(final String str) {\n-        return PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(str).matches();\n-    }\n-}"},{"sha":"eb17aee3cc6211372a5f0123d58cde886c29928e","filename":"core/src/main/java/org/apache/syncope/core/workflow/ActivitiDetector.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FActivitiDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FActivitiDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FActivitiDetector.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Properties;\n+\n+import org.apache.syncope.core.persistence.dao.impl.ContentLoader;\n+import org.apache.syncope.core.workflow.user.activiti.ActivitiUserWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ActivitiDetector {\n+    private static final Logger LOG = LoggerFactory.getLogger(ActivitiDetector.class);\n+    private static String uwfAdapterClassName;\n+    private static String rwfAdapterClassName;\n+\n+    static {\n+        try {\n+            initWFAdapterClassNames();\n+        } catch (IOException e) {\n+            LOG.error(\"Could not init uwfAdapterClassName\", e);\n+        }\n+    }\n+\n+    /**\n+     * Read classpath:/workflow.properties in order to determine the configured workflow adapter class name.\n+     *\n+     * @throws IOException if anything goes wrong\n+     */\n+    private static void initWFAdapterClassNames() throws IOException {\n+        Properties props = new java.util.Properties();\n+        InputStream propStream = null;\n+        try {\n+            propStream = ContentLoader.class.getResourceAsStream(\"/workflow.properties\");\n+            props.load(propStream);\n+            uwfAdapterClassName = props.getProperty(\"uwfAdapter\");\n+            rwfAdapterClassName = props.getProperty(\"rwfAdapter\");\n+        } catch (Exception e) {\n+            LOG.error(\"Could not load workflow.properties\", e);\n+        } finally {\n+            if (propStream != null) {\n+                propStream.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check if the configured user workflow adapter is Activiti's.\n+     *\n+     * @return whether Activiti is configured for user workflow or not\n+     */\n+    public static boolean isActivitiEnabledForUsers() {\n+        return uwfAdapterClassName != null && uwfAdapterClassName.equals(ActivitiUserWorkflowAdapter.class.getName());\n+    }\n+    \n+    /**\n+     * Check if the configured role workflow adapter is Activiti's.\n+     *\n+     * @return whether Activiti is configured for role workflow or not\n+     */\n+    public static boolean isActivitiEnabledForRoles() {\n+        // ActivitiRoleWorkflowAdapter hasn't been developed (yet) as part of SYNCOPE-173 \n+        //return rwfAdapterClassName != null && rwfAdapterClassName.equals(ActivitiRoleWorkflowAdapter.class.getName());\n+        return false;\n+    }\n+}"},{"sha":"abb8470aa652f3edb3556aad964f0c3d9ade702a","filename":"core/src/main/java/org/apache/syncope/core/workflow/WorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -33,7 +33,7 @@ public interface WorkflowAdapter {\n      * @return null if no init is needed or the WorkflowLoader class for handling initialization\n      * @see org.apache.syncope.core.init.SpringContextInitializer\n      */\n-    Class<? extends WorkflowLoader> getLoaderClass();\n+    Class<? extends WorkflowInstanceLoader> getLoaderClass();\n \n     /**\n      * Get workflow definition."},{"sha":"e755110e75cefd6d547682a97218e1bb5b009864","filename":"core/src/main/java/org/apache/syncope/core/workflow/WorkflowInstanceLoader.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowInstanceLoader.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow;\n \n-public interface WorkflowLoader {\n+public interface WorkflowInstanceLoader {\n \n     void load();\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/workflow/WorkflowLoader.java"},{"sha":"3f7a1dea3bb150383c212abf558122b2724902c7","filename":"core/src/main/java/org/apache/syncope/core/workflow/WorkflowUserSuspender.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowUserSuspender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowUserSuspender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowUserSuspender.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.AbstractMap.SimpleEntry;\n+\n+import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.policy.UserSuspender;\n+import org.apache.syncope.core.propagation.PropagationManager;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n+import org.apache.syncope.types.AccountPolicySpec;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class WorkflowUserSuspender implements UserSuspender {\n+    private static final Logger LOG = LoggerFactory.getLogger(WorkflowUserSuspender.class);\n+\n+    @Autowired\n+    private UserWorkflowAdapter uwfAdapter;\n+\n+    @Autowired\n+    private PropagationManager propagationManager;\n+\n+    @Autowired\n+    private PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    private UserDataBinder userDataBinder;\n+\n+    @Override\n+    public void suspend(AccountPolicySpec policy, SyncopeUser user) {\n+        try {\n+            LOG.debug(\"User {}:{} is over to max failed logins\", user.getId(), user.getUsername());\n+\n+            // reduce failed logins number to avoid multiple request\n+            user.setFailedLogins(user.getFailedLogins() - 1);\n+\n+            // disable user\n+            final WorkflowResult<Long> updated = uwfAdapter.suspend(user);\n+\n+            // propagate suspension if and only if it is required by policy\n+            if (policy.isPropagateSuspension()) {\n+                final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                        new WorkflowResult<Map.Entry<Long, Boolean>>(\n+                        new SimpleEntry<Long, Boolean>(updated.getResult(), Boolean.FALSE),\n+                        updated.getPropByRes(), updated.getPerformedTasks()));\n+\n+                taskExecutor.execute(tasks);\n+            }\n+\n+            if (LOG.isDebugEnabled()) {\n+                final UserTO savedTO = userDataBinder.getUserTO(updated.getResult());\n+                LOG.debug(\"About to return suspended user\\n{}\", savedTO);\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Error during user suspension\", e);\n+        }    }\n+\n+}"},{"sha":"edd81107cfb3900c15a06ede2a77edec171a2829","filename":"core/src/main/java/org/apache/syncope/core/workflow/role/AbstractRoleWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FAbstractRoleWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FAbstractRoleWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FAbstractRoleWorkflowAdapter.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.util.NotFoundException;\n import org.apache.syncope.core.workflow.WorkflowException;\n-import org.apache.syncope.core.workflow.WorkflowLoader;\n+import org.apache.syncope.core.workflow.WorkflowInstanceLoader;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -40,7 +40,7 @@ public abstract class AbstractRoleWorkflowAdapter implements RoleWorkflowAdapter\n     protected RoleDAO roleDAO;\n \n     @Override\n-    public Class<? extends WorkflowLoader> getLoaderClass() {\n+    public Class<? extends WorkflowInstanceLoader> getLoaderClass() {\n         return null;\n     }\n "},{"sha":"5a951792c23167a1deb7da13d2c1ca7d7c1332b2","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/AbstractUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.NotFoundException;\n import org.apache.syncope.core.workflow.WorkflowException;\n-import org.apache.syncope.core.workflow.WorkflowLoader;\n+import org.apache.syncope.core.workflow.WorkflowInstanceLoader;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -43,7 +43,7 @@ public abstract class AbstractUserWorkflowAdapter implements UserWorkflowAdapter\n     protected UserDAO userDAO;\n \n     @Override\n-    public Class<? extends WorkflowLoader> getLoaderClass() {\n+    public Class<? extends WorkflowInstanceLoader> getLoaderClass() {\n         return null;\n     }\n "},{"sha":"fca52da938405758787918b76a1f8f751a233e7d","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -64,7 +64,7 @@\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.util.NotFoundException;\n import org.apache.syncope.core.workflow.WorkflowException;\n-import org.apache.syncope.core.workflow.WorkflowLoader;\n+import org.apache.syncope.core.workflow.WorkflowInstanceLoader;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.core.workflow.user.AbstractUserWorkflowAdapter;\n import org.apache.syncope.types.ResourceOperation;\n@@ -136,7 +136,7 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     private RepositoryService repositoryService;\n \n     @Override\n-    public Class<? extends WorkflowLoader> getLoaderClass() {\n+    public Class<? extends WorkflowInstanceLoader> getLoaderClass() {\n         return ActivitiWorkflowLoader.class;\n     }\n "},{"sha":"126c634a8952f3d63118f07910dbd6dfcd829796","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiWorkflowLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiWorkflowLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiWorkflowLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiWorkflowLoader.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -23,12 +23,12 @@\n import java.util.List;\n import org.activiti.engine.RepositoryService;\n import org.activiti.engine.repository.ProcessDefinition;\n-import org.apache.syncope.core.workflow.WorkflowLoader;\n+import org.apache.syncope.core.workflow.WorkflowInstanceLoader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public class ActivitiWorkflowLoader implements WorkflowLoader {\n+public class ActivitiWorkflowLoader implements WorkflowInstanceLoader {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ActivitiWorkflowLoader.class);\n "},{"sha":"78d9fd98659caee00829c8f3eaf8f82b0beab05e","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -36,9 +36,8 @@ under the License.\n \n   <context:annotation-config/>\n   <context:component-scan base-package=\"org.apache.syncope.core.persistence\"/>\n-  <context:component-scan base-package=\"org.apache.syncope.core.rest.data\"/>\n+  <context:component-scan base-package=\"org.apache.syncope.core.util\"/>\n   <context:component-scan base-package=\"org.apache.syncope.core.policy\"/>\n-  <context:component-scan base-package=\"org.apache.syncope.core.policy.impl\"/>\n \n   <aop:aspectj-autoproxy/>\n "},{"sha":"251c2251851dc0f6a9299d4b0106fbcde4672810","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -41,8 +41,9 @@ under the License.\n \n   <context:component-scan base-package=\"org.apache.syncope.core.init\"/>\n   <context:component-scan base-package=\"org.apache.syncope.core.audit\"/>\n-  <context:component-scan base-package=\"org.apache.syncope.core.util\"/>\n   <context:component-scan base-package=\"org.apache.syncope.core.connid\"/>\n+  <context:component-scan base-package=\"org.apache.syncope.core.rest.data\"/>\n+  <context:component-scan base-package=\"org.apache.syncope.core.workflow\"/>\n \n   <bean id=\"nonJPAdbInitializer\" class=\"org.springframework.jdbc.datasource.init.DataSourceInitializer\">\n     <property name=\"dataSource\" ref=\"dataSource\"/>"},{"sha":"7f35b0237e05fd9dd84bab4060a036f0cf12873a","filename":"core/src/test/java/org/apache/syncope/core/connid/PasswordGeneratorTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -22,8 +22,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+\n+import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.policy.PolicyPattern;\n import org.apache.syncope.core.util.IncompatiblePolicyException;\n@@ -34,7 +35,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class PasswordGeneratorTest extends AbstractDAOTest {\n+public class PasswordGeneratorTest extends AbstractTest {\n \n     @Autowired\n     private PasswordGenerator passwordGenerator;"},{"sha":"1c0ffc01209b53a43142c3fe0bd19d2c05df67c0","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AbstractDAOTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAbstractDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAbstractDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAbstractDAOTest.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -31,8 +31,7 @@\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\"classpath:syncopeContext.xml\", \"classpath:persistenceContext.xml\",\n-    \"classpath:schedulingContext.xml\", \"classpath:workflowContext.xml\"})\n+@ContextConfiguration(locations = {\"classpath:persistenceTestEnv.xml\"})\n public abstract class AbstractDAOTest {\n \n     /**"},{"sha":"7cc729ae4e1515c74dd9339259ae667e0da5c690","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AttributableSearchTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -41,8 +41,7 @@\n import org.apache.syncope.types.AttributableType;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\"classpath:syncopeContext.xml\", \"classpath:persistenceContext.xml\",\n-    \"classpath:schedulingContext.xml\", \"classpath:workflowContext.xml\"})\n+@ContextConfiguration(locations = {\"classpath:persistenceTestEnv.xml\"})\n @Transactional\n public class AttributableSearchTest {\n "},{"sha":"990f3921887bffd36028cb54e974b1a7bdd9f02d","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/DummyConnectorRegistry.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDummyConnectorRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDummyConnectorRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDummyConnectorRegistry.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.dao;\n+\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.util.NotFoundException;\n+\n+public class DummyConnectorRegistry implements ConnectorRegistry {\n+\n+    @Override\n+    public void registerConnector(ExternalResource resource)\n+            throws NotFoundException {\n+    }\n+\n+    @Override\n+    public void unregisterConnector(String id) {\n+    }\n+\n+}"},{"sha":"12742cf6d16e177ef91aec511c8f14b09852084f","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/TestDbInitializer.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTestDbInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTestDbInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTestDbInitializer.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.dao;\n+\n+import javax.servlet.ServletContext;\n+\n+import org.apache.syncope.core.persistence.dao.impl.ContentLoader;\n+import org.apache.syncope.core.workflow.ActivitiDetector;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.context.ServletContextAware;\n+\n+/**\n+ * Take care of all initializations needed by Syncope to run up and safe.\n+ */\n+@Component\n+public class TestDbInitializer implements ServletContextAware, InitializingBean {\n+    @Autowired\n+    private ContentLoader contentLoader;\n+\n+    @Override\n+    public void setServletContext(final ServletContext servletContext) {\n+    }\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        contentLoader.load(ActivitiDetector.isActivitiEnabledForUsers());\n+    }\n+}\n\\ No newline at end of file"},{"sha":"2dc408b7be2c09a5d1761ecace40cd67a49b94bd","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -42,9 +42,9 @@\n import org.apache.syncope.client.to.TaskExecTO;\n import org.apache.syncope.client.to.TaskTO;\n import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.core.init.SpringContextInitializer;\n import org.apache.syncope.core.sync.SyncJob;\n import org.apache.syncope.core.sync.TestSyncActions;\n+import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.apache.syncope.types.IntMappingType;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n import org.apache.syncope.types.TraceLevel;\n@@ -267,7 +267,7 @@ public void sync() {\n         userTO = userService.read(userTO.getId());\n         assertNotNull(userTO);\n         assertEquals(\"test9\", userTO.getUsername());\n-        assertEquals(SpringContextInitializer.isActivitiEnabledForUsers()\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers()\n                 ? \"active\"\n                 : \"created\", userTO.getStatus());\n         assertEquals(\"test9@syncope.apache.org\", userTO.getAttributeMap().get(\"email\").getValues().get(0));"},{"sha":"6b5d76f3438f4d2bfb6812ed9bfea7163cf8e65e","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -44,8 +44,8 @@\n import org.apache.syncope.client.util.AttributableOperations;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n-import org.apache.syncope.core.init.SpringContextInitializer;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.CipherAlgorithm;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n@@ -562,7 +562,7 @@ public void createWithRequiredValueMissing() {\n \n     @Test\n     public void createWithReject() {\n-        Assume.assumeTrue(SpringContextInitializer.isActivitiEnabledForUsers());\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n \n         UserTO userTO = getSampleTO(\"createWithReject@syncope.apache.org\");\n \n@@ -619,7 +619,7 @@ public void createWithReject() {\n \n     @Test\n     public void createWithApproval() {\n-        Assume.assumeTrue(SpringContextInitializer.isActivitiEnabledForUsers());\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n@@ -1053,7 +1053,7 @@ public void verifyTaskRegistration() {\n \n     @Test\n     public void createActivate() {\n-        Assume.assumeTrue(SpringContextInitializer.isActivitiEnabledForUsers());\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n \n         UserTO userTO = getSampleTO(\"createActivate@syncope.apache.org\");\n \n@@ -1080,7 +1080,7 @@ public void createActivate() {\n \n     @Test\n     public void createActivateByUsername() {\n-        Assume.assumeTrue(SpringContextInitializer.isActivitiEnabledForUsers());\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n \n         UserTO userTO = getSampleTO(\"createActivateByUsername@syncope.apache.org\");\n \n@@ -1117,7 +1117,7 @@ public void suspendReactivate() {\n         userTO = userService.create(userTO);\n \n         assertNotNull(userTO);\n-        assertEquals(SpringContextInitializer.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n \n         userTO = userService.suspend(userTO.getId());\n \n@@ -1141,7 +1141,7 @@ public void suspendReactivateByUsername() {\n         userTO = userService.create(userTO);\n \n         assertNotNull(userTO);\n-        assertEquals(SpringContextInitializer.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n \n         userTO = userService.suspendByUsername(userTO.getUsername());\n \n@@ -1174,7 +1174,7 @@ public void suspendReactivateOnResource() {\n         userTO = userService.create(userTO);\n \n         assertNotNull(userTO);\n-        assertEquals(SpringContextInitializer.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n+        assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n \n         String query = \"?resourceNames=\" + dbTable.getName() + \"&resourceNames=\" + ldap.getName()\n                 + \"&performLocally=true\"; // check also performLocally"},{"sha":"a67a37a998da23e29b0bf414d5a29375185fbcd8","filename":"core/src/test/java/org/apache/syncope/core/rest/WorkflowTestITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -22,7 +22,7 @@\n \r\n import java.util.List;\r\n import org.apache.syncope.client.to.WorkflowDefinitionTO;\r\n-import org.apache.syncope.core.init.SpringContextInitializer;\r\n+import org.apache.syncope.core.workflow.ActivitiDetector;\r\n import org.junit.Assume;\r\n import org.junit.Test;\r\n \r\n@@ -46,7 +46,7 @@ public void testGetRoleDefinition() {\n \r\n     @Test//TODO TestCase needs to be extended\r\n     public void testUpdateUserDefinition() {\r\n-        Assume.assumeTrue(SpringContextInitializer.isActivitiEnabledForUsers());\r\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\r\n \r\n         WorkflowDefinitionTO definition = workflowService.getDefinition(USER_TYPE);\r\n         assertNotNull(definition);\r\n@@ -58,7 +58,7 @@ public void testUpdateUserDefinition() {\n \r\n     @Test//TODO TestCase needs to be extended\r\n     public void testUpdateRoleDefinition() {\r\n-        Assume.assumeTrue(SpringContextInitializer.isActivitiEnabledForRoles());\r\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForRoles());\r\n \r\n         WorkflowDefinitionTO definition = workflowService.getDefinition(ROLE_TYPE);\r\n         assertNotNull(definition);\r"},{"sha":"8f8a102880ddbbc0e2f4f9371ed5fefd2a2407d2","filename":"core/src/test/resources/persistenceTestEnv.xml","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fresources%2FpersistenceTestEnv.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c/core%2Fsrc%2Ftest%2Fresources%2FpersistenceTestEnv.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FpersistenceTestEnv.xml?ref=3e81255e7a8bc4981cabb5d9dbd185c09d0e6c3c","patch":"@@ -0,0 +1,77 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor \n+  license agreements. See the NOTICE file distributed with this work for additional \n+  information regarding copyright ownership. The ASF licenses this file to \n+  you under the Apache License, Version 2.0 (the \"License\"); you may not use \n+  this file except in compliance with the License. You may obtain a copy of \n+  the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required \n+  by applicable law or agreed to in writing, software distributed under the \n+  License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS \n+  OF ANY KIND, either express or implied. See the License for the specific \n+  language governing permissions and limitations under the License. -->\n+  \n+<!--  This should not end in *Context as it would then be picked up in the cargo start -->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+  xmlns:context=\"http://www.springframework.org/schema/context\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n+  xmlns:aop=\"http://www.springframework.org/schema/aop\"\n+  xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+       http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://www.springframework.org/schema/context\n+       http://www.springframework.org/schema/context/spring-context.xsd\n+       http://www.springframework.org/schema/tx\n+       http://www.springframework.org/schema/tx/spring-tx.xsd\n+       http://www.springframework.org/schema/aop\n+       http://www.springframework.org/schema/aop/spring-aop.xsd\">\n+\n+  <bean class=\"org.apache.syncope.core.persistence.dao.TestDbInitializer\"/>\n+  <bean class=\"org.apache.syncope.core.persistence.dao.DummyConnectorRegistry\"> \n+  </bean>\n+  <bean class=\"org.apache.syncope.core.persistence.dao.impl.ContentLoader\">\n+  </bean>\n+  \n+  <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n+    <property name=\"locations\">\n+      <list>\n+        <value>classpath:persistence.properties</value>\n+        <value>classpath:security.properties</value>\n+        <value>classpath:workflow.properties</value>\n+      </list>\n+    </property>\n+    <property name=\"ignoreResourceNotFound\" value=\"true\" />\n+    <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\" />\n+  </bean>\n+\n+  <bean id=\"nonJPAdbInitializer\"\n+    class=\"org.springframework.jdbc.datasource.init.DataSourceInitializer\">\n+    <property name=\"dataSource\" ref=\"dataSource\" />\n+    <property name=\"enabled\" value=\"true\" />\n+    <property name=\"databasePopulator\">\n+      <bean\n+        class=\"org.springframework.jdbc.datasource.init.ResourceDatabasePopulator\">\n+        <property name=\"continueOnError\" value=\"true\" />\n+        <property name=\"ignoreFailedDrops\" value=\"true\" />\n+        <property name=\"sqlScriptEncoding\" value=\"UTF-8\" />\n+        <property name=\"scripts\">\n+          <array>\n+            <value type=\"org.springframework.core.io.Resource\">\n+              classpath:/quartz/${quartz.sql}\n+            </value>\n+            <value type=\"org.springframework.core.io.Resource\">\n+              classpath:/logback/${logback.sql}\n+            </value>\n+          </array>\n+        </property>\n+      </bean>\n+    </property>\n+  </bean>\n+\n+  <bean id=\"jexlEngine\" class=\"org.apache.commons.jexl2.JexlEngine\">\n+    <property name=\"cache\" value=\"512\" />\n+    <property name=\"lenient\" value=\"true\" />\n+    <property name=\"silent\" value=\"false\" />\n+  </bean>\n+  <bean id=\"jexlUtil\" class=\"org.apache.syncope.core.util.JexlUtil\" />\n+\n+  <import resource=\"persistenceContext.xml\" />\n+</beans>"}]}