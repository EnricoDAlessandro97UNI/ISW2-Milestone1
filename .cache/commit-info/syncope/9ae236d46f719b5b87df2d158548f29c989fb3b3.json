{"sha":"9ae236d46f719b5b87df2d158548f29c989fb3b3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlhZTIzNmQ0NmY3MTliNWI4N2RmMmQxNTg1NDhmMjljOTg5ZmIzYjM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-07-13T13:37:25Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-07-13T15:16:21Z"},"message":"LDAP password pull and propagation improvements","tree":{"sha":"21446df14452dc2602adb1cb5363348b760bb942","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/21446df14452dc2602adb1cb5363348b760bb942"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9ae236d46f719b5b87df2d158548f29c989fb3b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9ae236d46f719b5b87df2d158548f29c989fb3b3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9ae236d46f719b5b87df2d158548f29c989fb3b3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9ae236d46f719b5b87df2d158548f29c989fb3b3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ce1c3c4458ead26d7dbfbe66470cf15708cf7d0f"}],"stats":{"total":209,"additions":75,"deletions":134},"files":[{"sha":"6852268a84e73831c51c757692fa34003a7555dc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java","status":"modified","additions":9,"deletions":20,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9ae236d46f719b5b87df2d158548f29c989fb3b3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9ae236d46f719b5b87df2d158548f29c989fb3b3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java?ref=9ae236d46f719b5b87df2d158548f29c989fb3b3","patch":"@@ -20,12 +20,10 @@\n \n import java.util.Base64;\n import java.util.HashSet;\n-import java.util.Optional;\n import java.util.Set;\n import javax.xml.bind.DatatypeConverter;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -90,33 +88,24 @@ && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgori\n     }\n \n     private static String getCipherAlgorithm(final ConnInstance connInstance) {\n-        Optional<ConnConfProperty> cipherAlgorithm = connInstance.getConf().stream().\n+        return connInstance.getConf().stream().\n                 filter(property -> \"passwordHashAlgorithm\".equals(property.getSchema().getName())\n-                && property.getValues() != null && !property.getValues().isEmpty()).findFirst();\n-\n-        return cipherAlgorithm.isPresent()\n-                ? (String) cipherAlgorithm.get().getValues().get(0)\n-                : CLEARTEXT;\n+                && property.getValues() != null && !property.getValues().isEmpty()).findFirst().\n+                map(cipherAlgorithm -> (String) cipherAlgorithm.getValues().get(0)).\n+                orElse(CLEARTEXT);\n     }\n \n-    private static boolean cipherAlgorithmMatches(final String connectorAlgorithm,\n-                                                  final CipherAlgorithm userAlgorithm) {\n-        if (userAlgorithm == null) {\n+    private static boolean cipherAlgorithmMatches(final String connectorAlgo, final CipherAlgorithm userAlgo) {\n+        if (userAlgo == null) {\n             return false;\n         }\n \n-        if (connectorAlgorithm.equals(userAlgorithm.name())) {\n+        if (connectorAlgo.equals(userAlgo.name())) {\n             return true;\n         }\n \n         // Special check for \"SHA\" and \"SSHA\" (user pulled from LDAP)\n-        if (\"SHA\".equals(connectorAlgorithm) && userAlgorithm.name().startsWith(\"SHA\")\n-            || \"SSHA\".equals(connectorAlgorithm) && userAlgorithm.name().startsWith(\"SSHA\")) {\n-\n-            return true;\n-        }\n-\n-        return false;\n+        return (\"SHA\".equals(connectorAlgo) && userAlgo.name().startsWith(\"SHA\"))\n+                || (\"SSHA\".equals(connectorAlgo) && userAlgo.name().startsWith(\"SSHA\"));\n     }\n-\n }"},{"sha":"179633499ff8edf117dd2a6f7c1aa3fb73ff1cb9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java","status":"modified","additions":29,"deletions":45,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9ae236d46f719b5b87df2d158548f29c989fb3b3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9ae236d46f719b5b87df2d158548f29c989fb3b3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java?ref=9ae236d46f719b5b87df2d158548f29c989fb3b3","patch":"@@ -20,21 +20,23 @@\n \n import java.util.Base64;\n import java.util.Optional;\n+import java.util.Set;\n import javax.xml.bind.DatatypeConverter;\n-import org.apache.syncope.common.lib.request.AbstractPatchItem;\n-import org.apache.syncope.common.lib.request.AnyCR;\n-import org.apache.syncope.common.lib.request.AnyUR;\n-import org.apache.syncope.common.lib.request.PasswordPatch;\n-import org.apache.syncope.common.lib.request.UserCR;\n-import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.identityconnectors.common.security.SecurityUtil;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n@@ -53,49 +55,28 @@ public class LDAPPasswordPullActions implements PullActions {\n     @Autowired\n     protected UserDAO userDAO;\n \n-    protected String encodedPassword;\n-\n-    protected CipherAlgorithm cipher;\n-\n-    @Transactional(readOnly = true)\n-    @Override\n-    public void beforeProvision(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final AnyCR anyCR) throws JobExecutionException {\n-\n-        if (anyCR instanceof UserCR) {\n-            String password = ((UserCR) anyCR).getPassword();\n-            parseEncodedPassword(password);\n-        }\n-    }\n-\n-    @Transactional(readOnly = true)\n     @Override\n-    public void beforeUpdate(\n-            final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta,\n-            final EntityTO entityTO,\n-            final AnyUR anyUR) throws JobExecutionException {\n-\n-        if (anyUR instanceof UserUR) {\n-            PasswordPatch modPassword = ((UserUR) anyUR).getPassword();\n-            parseEncodedPassword(Optional.ofNullable(modPassword).map(AbstractPatchItem::getValue).orElse(null));\n+    public Set<String> moreAttrsToGet(final ProvisioningProfile<?, ?> profile, final Provision provision) {\n+        if (AnyTypeKind.USER == provision.getAnyType().getKind()) {\n+            return Set.of(OperationalAttributes.PASSWORD_NAME);\n         }\n+        return PullActions.super.moreAttrsToGet(profile, provision);\n     }\n \n-    protected void parseEncodedPassword(final String password) {\n+    private static Optional<Pair<String, CipherAlgorithm>> parseEncodedPassword(final String password) {\n         if (password != null && password.startsWith(\"{\")) {\n+            String digest = Optional.ofNullable(\n+                    password.substring(1, password.indexOf('}'))).map(String::toUpperCase).\n+                    orElse(null);\n             int closingBracketIndex = password.indexOf('}');\n-            String digest = password.substring(1, password.indexOf('}')).toUpperCase();\n             try {\n-                encodedPassword = password.substring(closingBracketIndex + 1);\n-                cipher = CipherAlgorithm.valueOf(digest);\n+                return Optional.of(\n+                        Pair.of(password.substring(closingBracketIndex + 1), CipherAlgorithm.valueOf(digest)));\n             } catch (IllegalArgumentException e) {\n                 LOG.error(\"Cipher algorithm not allowed: {}\", digest, e);\n-                encodedPassword = null;\n             }\n         }\n+        return Optional.empty();\n     }\n \n     @Transactional\n@@ -106,16 +87,19 @@ public void after(\n             final EntityTO entity,\n             final ProvisioningReport result) throws JobExecutionException {\n \n-        if (entity instanceof UserTO && encodedPassword != null && cipher != null) {\n+        if (entity instanceof UserTO) {\n             User user = userDAO.find(entity.getKey());\n             if (user != null) {\n-                byte[] encodedPasswordBytes = Base64.getDecoder().decode(encodedPassword.getBytes());\n-                String encodedHexStr = DatatypeConverter.printHexBinary(encodedPasswordBytes).toUpperCase();\n+                GuardedString passwordAttr = AttributeUtil.getPasswordValue(delta.getObject().getAttributes());\n+                if (passwordAttr != null) {\n+                    parseEncodedPassword(SecurityUtil.decrypt(passwordAttr)).ifPresent(encoded -> {\n+                        byte[] encodedPasswordBytes = Base64.getDecoder().decode(encoded.getLeft().getBytes());\n+                        String encodedHexStr = DatatypeConverter.printHexBinary(encodedPasswordBytes).toUpperCase();\n \n-                user.setEncodedPassword(encodedHexStr, cipher);\n+                        user.setEncodedPassword(encodedHexStr, encoded.getRight());\n+                    });\n+                }\n             }\n-            encodedPassword = null;\n-            cipher = null;\n         }\n     }\n }"},{"sha":"736b678b6abad06cbea782a78e9821515d4e7d23","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActionsTest.java","status":"modified","additions":35,"deletions":67,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9ae236d46f719b5b87df2d158548f29c989fb3b3/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActionsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9ae236d46f719b5b87df2d158548f29c989fb3b3/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActionsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActionsTest.java?ref=9ae236d46f719b5b87df2d158548f29c989fb3b3","patch":"@@ -18,40 +18,40 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.when;\n import static org.mockito.Mockito.verify;\n \n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.request.AnyCR;\n-import org.apache.syncope.common.lib.request.AnyUR;\n-import org.apache.syncope.common.lib.request.PasswordPatch;\n-import org.apache.syncope.common.lib.request.UserCR;\n-import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.UUID;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n import org.apache.syncope.core.provisioning.java.AbstractTest;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.junit.jupiter.api.BeforeEach;\n+import org.identityconnectors.framework.common.objects.SyncDeltaBuilder;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n+import org.identityconnectors.framework.common.objects.Uid;\n import org.junit.jupiter.api.Test;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.quartz.JobExecutionException;\n-import org.springframework.test.util.ReflectionTestUtils;\n \n public class LDAPPasswordPullActionsTest extends AbstractTest {\n \n-    @Mock\n-    private SyncDelta syncDelta;\n-\n     @Mock\n     private ProvisioningProfile<?, ?> profile;\n \n@@ -62,70 +62,38 @@ public class LDAPPasswordPullActionsTest extends AbstractTest {\n     private ProvisioningReport result;\n \n     @InjectMocks\n-    private LDAPPasswordPullActions ldapPasswordPullActions;\n-\n-    private AnyCR anyCR;\n-\n-    private AnyUR anyUR;\n-\n-    private EntityTO entity;\n-\n-    private String encodedPassword;\n-\n-    private CipherAlgorithm cipher;\n-\n-    @BeforeEach\n-    public void initTest() {\n-        entity = new UserTO();\n-        encodedPassword = \"s3cureP4ssw0rd\";\n-        cipher = CipherAlgorithm.SHA512;\n-\n-        ReflectionTestUtils.setField(ldapPasswordPullActions, \"encodedPassword\", encodedPassword);\n-        ReflectionTestUtils.setField(ldapPasswordPullActions, \"cipher\", cipher);\n-    }\n-\n-    @Test\n-    public void beforeProvision() throws JobExecutionException {\n-        String digest = \"SHA256\";\n-        String password = \"t3stPassw0rd\";\n-        anyCR = new UserCR.Builder(SyncopeConstants.ROOT_REALM, \"username\").\n-                password(String.format(\"{%s}%s\", digest, password)).build();\n-\n-        ldapPasswordPullActions.beforeProvision(profile, syncDelta, anyCR);\n \n-        assertEquals(CipherAlgorithm.valueOf(digest), ReflectionTestUtils.getField(ldapPasswordPullActions, \"cipher\"));\n-        assertEquals(password, ReflectionTestUtils.getField(ldapPasswordPullActions, \"encodedPassword\"));\n-    }\n-\n-    @Test\n-    public void beforeUpdate() throws JobExecutionException {\n-        anyUR = new UserUR.Builder(null).\n-                password(new PasswordPatch.Builder().value(\"{MD5}an0therTestP4ss\").build()).\n-                build();\n-\n-        ldapPasswordPullActions.beforeUpdate(profile, syncDelta, entity, anyUR);\n-\n-        assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"encodedPassword\"));\n-    }\n+    private LDAPPasswordPullActions actions;\n \n     @Test\n     public void afterWithNullUser() throws JobExecutionException {\n-        when(userDAO.find(entity.getKey())).thenReturn(null);\n+        UserTO userTO = new UserTO();\n+        userTO.setKey(UUID.randomUUID().toString());\n+        when(userDAO.find(userTO.getKey())).thenReturn(null);\n \n-        ldapPasswordPullActions.after(profile, syncDelta, entity, result);\n-\n-        assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"encodedPassword\"));\n-        assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"cipher\"));\n+        assertDoesNotThrow(() -> actions.after(profile, null, userTO, result));\n     }\n \n     @Test\n     public void after(@Mock User user) throws JobExecutionException {\n-        when(userDAO.find(entity.getKey())).thenReturn(user);\n+        UserTO userTO = new UserTO();\n+        userTO.setKey(UUID.randomUUID().toString());\n+        when(userDAO.find(userTO.getKey())).thenReturn(user);\n+\n+        Set<Attribute> attributes = new HashSet<>();\n+        attributes.add(new Uid(UUID.randomUUID().toString()));\n+        attributes.add(new Name(UUID.randomUUID().toString()));\n+        attributes.add(AttributeBuilder.buildPassword(\n+                new GuardedString(\"{SSHA}4AwQq1UVDwubSXmR4pnmLsoVR6U2Z7R55kwxRA==\".toCharArray())));\n+        SyncDelta delta = new SyncDeltaBuilder().\n+                setToken(new SyncToken(\"sample-token\")).\n+                setDeltaType(SyncDeltaType.CREATE_OR_UPDATE).\n+                setUid(new Uid(UUID.randomUUID().toString())).\n+                setObject(new ConnectorObject(ObjectClass.ACCOUNT, attributes)).\n+                build();\n \n-        ldapPasswordPullActions.after(profile, syncDelta, entity, result);\n+        actions.after(profile, delta, userTO, result);\n \n         verify(user).setEncodedPassword(anyString(), any(CipherAlgorithm.class));\n-        assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"encodedPassword\"));\n-        assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"cipher\"));\n     }\n }"},{"sha":"b8b2171b25dade5521077ebadc9d67dadb3a331a","filename":"docker/wa/src/main/resources/application.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9ae236d46f719b5b87df2d158548f29c989fb3b3/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9ae236d46f719b5b87df2d158548f29c989fb3b3/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=9ae236d46f719b5b87df2d158548f29c989fb3b3","patch":"@@ -34,7 +34,7 @@ spring.web.resources.static-locations=classpath:/thymeleaf/static,classpath:/syn\n \n cas.monitor.endpoints.endpoint.defaults.access=AUTHENTICATED\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.exposure.include=info,health,loggers,ssoSessions\n+management.endpoints.web.exposure.include=info,health,loggers,ssoSessions,registeredServices\n management.endpoint.health.show-details=ALWAYS\n spring.cloud.discovery.client.health-indicator.enabled=false\n "},{"sha":"4e1b1c20c7864cd399777a5ed543477bc9338f79","filename":"wa/starter/src/main/resources/application.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9ae236d46f719b5b87df2d158548f29c989fb3b3/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9ae236d46f719b5b87df2d158548f29c989fb3b3/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=9ae236d46f719b5b87df2d158548f29c989fb3b3","patch":"@@ -34,7 +34,7 @@ spring.web.resources.static-locations=classpath:/thymeleaf/static,classpath:/syn\n \n cas.monitor.endpoints.endpoint.defaults.access=AUTHENTICATED\n management.endpoints.enabled-by-default=true\n-management.endpoints.web.exposure.include=info,health,loggers,ssoSessions\n+management.endpoints.web.exposure.include=info,health,loggers,ssoSessions,registeredServices\n management.endpoint.health.show-details=ALWAYS\n spring.cloud.discovery.client.health-indicator.enabled=false\n "}]}