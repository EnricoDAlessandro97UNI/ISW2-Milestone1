{"sha":"7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdjMjVlMGE0NGU3Y2Q3NzA5YjY0MTlmM2YwYWVjNjNlYmVlODVkYjM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-21T14:37:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-21T14:37:44Z"},"message":"[SYNCOPE-249] core: extension for propagation implemented\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1436375 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3e517b5e9da06727599c9a8baf70a103b5c6cdb8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3e517b5e9da06727599c9a8baf70a103b5c6cdb8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f5ed0f7142e36be3b2765b4331d9646c7ed941f4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f5ed0f7142e36be3b2765b4331d9646c7ed941f4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f5ed0f7142e36be3b2765b4331d9646c7ed941f4"}],"stats":{"total":559,"additions":306,"deletions":253},"files":[{"sha":"3901201c1686bdfa55c5c1c9bd9ee22ddac40309","filename":"common/src/main/java/org/apache/syncope/common/types/IntMappingType.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java?ref=7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","patch":"@@ -45,6 +45,7 @@ public enum IntMappingType {\n     RoleVirtualSchema(AttributableType.ROLE),\r\n     RoleId(AttributableType.ROLE),\r\n     RoleName(AttributableType.ROLE),\r\n+    RoleOwnerSchema(AttributableType.ROLE),\r\n     // -------------------------\r\n     // Membership attribute types (the same in MembershipMappingType)\r\n     // -------------------------\r\n@@ -92,20 +93,21 @@ public static Set<IntMappingType> getAttributeTypes(final AttributableType attri\n             case ROLE:\r\n                 enumset = EnumSet.allOf(RoleMappingType.class);\r\n                 break;\r\n+\r\n             case MEMBERSHIP:\r\n                 enumset = EnumSet.allOf(MembershipMappingType.class);\r\n                 break;\r\n+\r\n             default:\r\n                 enumset = EnumSet.allOf(UserMappingType.class);\r\n         }\r\n \r\n-        final Set<IntMappingType> res = new HashSet<IntMappingType>();\r\n-\r\n+        final Set<IntMappingType> result = new HashSet<IntMappingType>(enumset.size());\r\n         for (Object obj : enumset) {\r\n-            res.add(IntMappingType.valueOf(obj.toString()));\r\n+            result.add(IntMappingType.valueOf(obj.toString()));\r\n         }\r\n \r\n-        return res;\r\n+        return result;\r\n     }\r\n \r\n     public static Set<IntMappingType> getEmbedded() {\r\n@@ -175,7 +177,8 @@ private enum RoleMappingType {\n         RoleDerivedSchema,\r\n         RoleVirtualSchema,\r\n         RoleId,\r\n-        RoleName;\r\n+        RoleName,\r\n+        RoleOwnerSchema;\r\n \r\n     }\r\n \r"},{"sha":"624dd31b856b7f84c2779b8e8aadf34bf4eba406","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","patch":"@@ -446,7 +446,7 @@ public void retrieveVirAttrValues(final AbstractAttributable owner, final Attrib\n             LOG.debug(\"Retrieve remote object from '{}'\", resource.getName());\n             try {\n                 final String accountId = attrUtil.getAccountIdItem(resource) == null\n-                        ? null : MappingUtil.getAccountIdValue(owner, attrUtil.getAccountIdItem(resource));\n+                        ? null : MappingUtil.getAccountIdValue(owner, resource, attrUtil.getAccountIdItem(resource));\n \n                 LOG.debug(\"Search for object with accountId '{}'\", accountId);\n "},{"sha":"9736f33565a7eeea1828d5c51d8a2dfc24d301bc","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractDerAttr.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","patch":"@@ -19,12 +19,10 @@\n package org.apache.syncope.core.persistence.beans;\n \n import java.util.Collection;\n-\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n-\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.MapContext;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n@@ -50,7 +48,6 @@ public Long getId() {\n      * @return the value of this derived attribute\n      */\n     public String getValue(final Collection<? extends AbstractAttr> attributes) {\n-\n         final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n         final JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n "},{"sha":"7e8b351fea132488a775cd4b07391067abcb4762","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractMappingItem.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMappingItem.java?ref=7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","patch":"@@ -26,7 +26,6 @@\n import javax.persistence.MappedSuperclass;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-\n import org.apache.syncope.common.types.IntMappingType;\n \n @MappedSuperclass\n@@ -117,12 +116,16 @@ public String getIntAttrName() {\n                 name = \"username\";\n                 break;\n \n+            case Password:\n+                name = \"password\";\n+                break;\n+\n             case RoleName:\n                 name = \"roleName\";\n                 break;\n \n-            case Password:\n-                name = \"password\";\n+            case RoleOwnerSchema:\n+                name = \"roleOwnerSchema\";\n                 break;\n \n             default:\n@@ -140,23 +143,23 @@ public IntMappingType getIntMappingType() {\n         return intMappingType;\n     }\n \n-    public void setIntMappingType(IntMappingType intMappingType) {\n+    public void setIntMappingType(final IntMappingType intMappingType) {\n         this.intMappingType = intMappingType;\n     }\n \n     public boolean isAccountid() {\n         return isBooleanAsInteger(accountid);\n     }\n \n-    public void setAccountid(boolean accountid) {\n+    public void setAccountid(final boolean accountid) {\n         this.accountid = getBooleanAsInteger(accountid);\n     }\n \n     public boolean isPassword() {\n         return isBooleanAsInteger(password);\n     }\n \n-    public void setPassword(boolean password) {\n+    public void setPassword(final boolean password) {\n         this.password = getBooleanAsInteger(password);\n     }\n }"},{"sha":"47eb3a12923e4aecf314b27e869a9627b57ade7b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RMapping.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMapping.java?ref=7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","patch":"@@ -20,14 +20,12 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractMapping;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.ExternalResource;"},{"sha":"caba6edfcd1056a7683eab258d8b279416df3fc4","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RMappingItem.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMappingItem.java?ref=7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","patch":"@@ -21,7 +21,6 @@\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractMapping;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n "},{"sha":"56cdba22259ea4c7a20b83b1ff69c8d452a499d7","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":7,"deletions":158,"changes":165,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","patch":"@@ -26,27 +26,18 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n-import org.apache.commons.jexl2.JexlContext;\n-import org.apache.commons.jexl2.MapContext;\n-import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.ResourceOperation;\n-import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n-import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n-import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n-import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.AbstractAttributableDataBinder;\n@@ -57,11 +48,9 @@\n import org.apache.syncope.core.util.MappingUtil;\n import org.apache.syncope.core.util.NotFoundException;\n import org.apache.syncope.core.workflow.WorkflowResult;\n-import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n-import org.identityconnectors.framework.common.objects.Name;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -96,12 +85,6 @@ public class PropagationManager {\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n-    /**\n-     * Schema DAO.\n-     */\n-    @Autowired\n-    private SchemaDAO schemaDAO;\n-\n     /**\n      * ConnObjectUtil.\n      */\n@@ -443,110 +426,6 @@ protected List<PropagationTask> getDeleteTaskIds(final AbstractAttributable attr\n         return createTasks(attributable, null, null, null, false, true, propByRes);\n     }\n \n-    /**\n-     * Prepare an attribute to be sent to a connector instance.\n-     *\n-     * @param <T> user / role\n-     * @param mapItem mapping item for the given attribute\n-     * @param subject given user\n-     * @param password clear-text password\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n-     * @return account link + prepared attribute\n-     * @throws ClassNotFoundException if schema type for given mapping does not exists in current class loader\n-     */\n-    protected <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n-            final AbstractMappingItem mapItem, final T subject, final String password,\n-            final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated)\n-            throws ClassNotFoundException {\n-\n-        final List<AbstractAttributable> attributables = new ArrayList<AbstractAttributable>();\n-\n-        switch (mapItem.getIntMappingType().getAttributableType()) {\n-            case USER:\n-                if (subject instanceof SyncopeUser) {\n-                    attributables.add(subject);\n-                }\n-                break;\n-\n-            case ROLE:\n-                if (subject instanceof SyncopeUser) {\n-                    attributables.addAll(((SyncopeUser) subject).getRoles());\n-                }\n-                if (subject instanceof SyncopeRole) {\n-                    attributables.add(subject);\n-                }\n-                break;\n-\n-            case MEMBERSHIP:\n-                if (subject instanceof SyncopeUser) {\n-                    attributables.addAll(((SyncopeUser) subject).getMemberships());\n-                }\n-                break;\n-\n-            default:\n-        }\n-\n-        final List<AbstractAttrValue> values =\n-                MappingUtil.getIntValues(mapItem, attributables, password, vAttrsToBeRemoved, vAttrsToBeUpdated);\n-\n-        AbstractSchema schema = null;\n-        final SchemaType schemaType;\n-        switch (mapItem.getIntMappingType()) {\n-            case UserSchema:\n-            case RoleSchema:\n-            case MembershipSchema:\n-                schema = schemaDAO.find(mapItem.getIntAttrName(),\n-                        MappingUtil.getIntMappingTypeClass(mapItem.getIntMappingType()));\n-                schemaType = schema == null ? SchemaType.String : schema.getType();\n-                break;\n-\n-            default:\n-                schemaType = SchemaType.String;\n-        }\n-\n-        final String extAttrName = mapItem.getExtAttrName();\n-\n-        LOG.debug(\"Define mapping for: \"\n-                + \"\\n* ExtAttrName \" + extAttrName\n-                + \"\\n* is accountId \" + mapItem.isAccountid()\n-                + \"\\n* is password \" + (mapItem.isPassword() || mapItem.getIntMappingType() == IntMappingType.Password)\n-                + \"\\n* mandatory condition \" + mapItem.getMandatoryCondition()\n-                + \"\\n* Schema \" + mapItem.getIntAttrName()\n-                + \"\\n* IntMappingType \" + mapItem.getIntMappingType().toString()\n-                + \"\\n* ClassType \" + schemaType.getClassName()\n-                + \"\\n* Values \" + values);\n-\n-        List<Object> objValues = new ArrayList<Object>();\n-\n-        for (AbstractAttrValue value : values) {\n-            if (FrameworkUtil.isSupportedAttributeType(Class.forName(schemaType.getClassName()))) {\n-                objValues.add(value.getValue());\n-            } else {\n-                objValues.add(value.getValueAsString());\n-            }\n-        }\n-\n-        Map.Entry<String, Attribute> result;\n-\n-        if (mapItem.isAccountid()) {\n-            result = new SimpleEntry<String, Attribute>(objValues.iterator().next().toString(), null);\n-        } else if (mapItem.isPassword()) {\n-            result = new SimpleEntry<String, Attribute>(null,\n-                    AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));\n-        } else {\n-            if (schema != null && schema.isMultivalue()) {\n-                result = new SimpleEntry<String, Attribute>(null, AttributeBuilder.build(extAttrName, objValues));\n-            } else {\n-                result = new SimpleEntry<String, Attribute>(null, objValues.isEmpty()\n-                        ? AttributeBuilder.build(extAttrName)\n-                        : AttributeBuilder.build(extAttrName, objValues.iterator().next()));\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n     /**\n      * Prepare attributes for sending to a connector instance.\n      *\n@@ -557,26 +436,25 @@ protected <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareA\n      * @param vAttrsToBeUpdated virtual attributes to be added\n      * @param enable whether user must be enabled or not\n      * @param resource target resource\n-     * @param attrUtil attributable util to get info about subject\n      * @return account link + prepared attributes\n      */\n     protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> prepareAttributes(final T subject,\n             final String password, final Set<String> vAttrsToBeRemoved,\n-            final Map<String, AttributeMod> vAttrsToBeUpdated, final Boolean enable, final ExternalResource resource,\n-            final AttributableUtil attrUtil) {\n+            final Map<String, AttributeMod> vAttrsToBeUpdated, final Boolean enable, final ExternalResource resource) {\n \n         LOG.debug(\"Preparing resource attributes for {} on resource {} with attributes {}\",\n                 subject, resource, subject.getAttributes());\n \n         Set<Attribute> attributes = new HashSet<Attribute>();\n         String accountId = null;\n \n+        final AttributableUtil attrUtil = AttributableUtil.getInstance(subject);\n         for (AbstractMappingItem mapping : attrUtil.getMappingItems(resource)) {\n             LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n \n             try {\n-                Map.Entry<String, Attribute> preparedAttribute = prepareAttribute(\n-                        mapping, subject, password, vAttrsToBeRemoved, vAttrsToBeUpdated);\n+                Map.Entry<String, Attribute> preparedAttribute = MappingUtil.prepareAttribute(\n+                        resource, mapping, subject, password, vAttrsToBeRemoved, vAttrsToBeUpdated);\n \n                 if (preparedAttribute.getKey() != null) {\n                     accountId = preparedAttribute.getKey();\n@@ -591,7 +469,7 @@ protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> pre\n                     } else {\n                         attributes.remove(alreadyAdded);\n \n-                        Set values = new HashSet(alreadyAdded.getValue());\n+                        Set<Object> values = new HashSet<Object>(alreadyAdded.getValue());\n                         values.addAll(preparedAttribute.getValue().getValue());\n \n                         attributes.add(AttributeBuilder.build(preparedAttribute.getValue().getName(), values));\n@@ -602,34 +480,7 @@ protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> pre\n             }\n         }\n \n-        if (StringUtils.isBlank(accountId)) {\n-            // LOG error but avoid to throw exception: leave it to the external resource\n-            LOG.error(\"Missing accountId for '{}': \", resource.getName());\n-        }\n-\n-        // Evaluate AccountLink expression\n-        String evalAccountLink = null;\n-        if (StringUtils.isNotBlank(attrUtil.getAccountLink(resource))) {\n-            final JexlContext jexlContext = new MapContext();\n-            jexlUtil.addFieldsToContext(subject, jexlContext);\n-            jexlUtil.addAttrsToContext(subject.getAttributes(), jexlContext);\n-            jexlUtil.addDerAttrsToContext(subject.getDerivedAttributes(), subject.getAttributes(), jexlContext);\n-            evalAccountLink = jexlUtil.evaluate(attrUtil.getAccountLink(resource), jexlContext);\n-        }\n-\n-        // If AccountLink evaluates to an empty string, just use the provided AccountId as Name(),\n-        // otherwise evaluated AccountLink expression is taken as Name().\n-        if (StringUtils.isBlank(evalAccountLink)) {\n-            // add AccountId as __NAME__ attribute ...\n-            LOG.debug(\"Add AccountId [{}] as __NAME__\", accountId);\n-            attributes.add(new Name(accountId));\n-        } else {\n-            LOG.debug(\"Add AccountLink [{}] as __NAME__\", evalAccountLink);\n-            attributes.add(new Name(evalAccountLink));\n-\n-            // AccountId not propagated: it will be used to set the value for __UID__ attribute\n-            LOG.debug(\"AccountId will be used just as __UID__ attribute\");\n-        }\n+        attributes.add(MappingUtil.evaluateNAME(subject, resource, accountId));\n \n         if (enable != null) {\n             attributes.add(AttributeBuilder.buildEnabled(enable));\n@@ -658,8 +509,6 @@ protected <T extends AbstractAttributable> List<PropagationTask> createTasks(fin\n \n         LOG.debug(\"Provisioning subject {}:\\n{}\", subject, propByRes);\n \n-        AttributableUtil attrUtil = AttributableUtil.getInstance(subject);\n-\n         // Avoid duplicates - see javadoc\n         propByRes.purge();\n         LOG.debug(\"After purge: {}\", propByRes);\n@@ -684,7 +533,7 @@ protected <T extends AbstractAttributable> List<PropagationTask> createTasks(fin\n                     task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));\n \n                     Map.Entry<String, Set<Attribute>> preparedAttrs = prepareAttributes(subject, password,\n-                            vAttrsToBeRemoved, vAttrsToBeUpdated, enable, resource, attrUtil);\n+                            vAttrsToBeRemoved, vAttrsToBeUpdated, enable, resource);\n                     task.setAccountId(preparedAttrs.getKey());\n                     task.setAttributes(preparedAttrs.getValue());\n "},{"sha":"28a57fc05e0d39d1a18aa81af94248b2e9cd4aa3","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":225,"deletions":10,"changes":235,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","patch":"@@ -18,21 +18,28 @@\n  */\n package org.apache.syncope.core.util;\n \n+import java.util.AbstractMap;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.jexl2.JexlContext;\n+import org.apache.commons.jexl2.MapContext;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.types.IntMappingType;\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n+import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.membership.MDerSchema;\n import org.apache.syncope.core.persistence.beans.membership.MSchema;\n import org.apache.syncope.core.persistence.beans.membership.MVirSchema;\n@@ -46,8 +53,14 @@\n import org.apache.syncope.core.persistence.beans.user.UDerSchema;\n import org.apache.syncope.core.persistence.beans.user.USchema;\n import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n+import org.apache.syncope.core.persistence.dao.SchemaDAO;\n+import org.identityconnectors.framework.common.FrameworkUtil;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.Name;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.context.ConfigurableApplicationContext;\n \n public final class MappingUtil {\n \n@@ -87,16 +100,198 @@ public static <T extends AbstractMappingItem> Set<T> getMatchingMappingItems(fin\n         return result;\n     }\n \n+    /**\n+     * Prepare an attribute to be sent to a connector instance.\n+     *\n+     * @param resource target resource\n+     * @param <T> user / role\n+     * @param mapItem mapping item for the given attribute\n+     * @param subject given user\n+     * @param password clear-text password\n+     * @param vAttrsToBeRemoved virtual attributes to be removed\n+     * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @return account link + prepared attribute\n+     * @throws ClassNotFoundException if schema type for given mapping does not exists in current class loader\n+     */\n+    public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n+            final ExternalResource resource, final AbstractMappingItem mapItem,\n+            final T subject, final String password,\n+            final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated)\n+            throws ClassNotFoundException {\n+\n+        final List<AbstractAttributable> attributables = new ArrayList<AbstractAttributable>();\n+\n+        switch (mapItem.getIntMappingType().getAttributableType()) {\n+            case USER:\n+                if (subject instanceof SyncopeUser) {\n+                    attributables.add(subject);\n+                }\n+                break;\n+\n+            case ROLE:\n+                if (subject instanceof SyncopeUser) {\n+                    attributables.addAll(((SyncopeUser) subject).getRoles());\n+                }\n+                if (subject instanceof SyncopeRole) {\n+                    attributables.add(subject);\n+                }\n+                break;\n+\n+            case MEMBERSHIP:\n+                if (subject instanceof SyncopeUser) {\n+                    attributables.addAll(((SyncopeUser) subject).getMemberships());\n+                }\n+                break;\n+\n+            default:\n+        }\n+\n+        final List<AbstractAttrValue> values = MappingUtil.getIntValues(resource, mapItem, attributables, password,\n+                vAttrsToBeRemoved, vAttrsToBeUpdated);\n+\n+        AbstractSchema schema = null;\n+        SchemaType schemaType;\n+        switch (mapItem.getIntMappingType()) {\n+            case UserSchema:\n+            case RoleSchema:\n+            case MembershipSchema:\n+                final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+                final SchemaDAO schemaDAO = context.getBean(SchemaDAO.class);\n+                schema = schemaDAO.find(mapItem.getIntAttrName(),\n+                        MappingUtil.getIntMappingTypeClass(mapItem.getIntMappingType()));\n+                schemaType = schema == null ? SchemaType.String : schema.getType();\n+                break;\n+\n+            default:\n+                schemaType = SchemaType.String;\n+        }\n+\n+        final String extAttrName = mapItem.getExtAttrName();\n+\n+        LOG.debug(\"Define mapping for: \"\n+                + \"\\n* ExtAttrName \" + extAttrName\n+                + \"\\n* is accountId \" + mapItem.isAccountid()\n+                + \"\\n* is password \" + (mapItem.isPassword() || mapItem.getIntMappingType() == IntMappingType.Password)\n+                + \"\\n* mandatory condition \" + mapItem.getMandatoryCondition()\n+                + \"\\n* Schema \" + mapItem.getIntAttrName()\n+                + \"\\n* IntMappingType \" + mapItem.getIntMappingType().toString()\n+                + \"\\n* ClassType \" + schemaType.getClassName()\n+                + \"\\n* Values \" + values);\n+\n+        List<Object> objValues = new ArrayList<Object>();\n+\n+        for (AbstractAttrValue value : values) {\n+            if (FrameworkUtil.isSupportedAttributeType(Class.forName(schemaType.getClassName()))) {\n+                objValues.add(value.getValue());\n+            } else {\n+                objValues.add(value.getValueAsString());\n+            }\n+        }\n+\n+        Map.Entry<String, Attribute> result;\n+\n+        if (mapItem.isAccountid()) {\n+            result = new AbstractMap.SimpleEntry<String, Attribute>(objValues.iterator().next().toString(), null);\n+        } else if (mapItem.isPassword()) {\n+            result = new AbstractMap.SimpleEntry<String, Attribute>(null,\n+                    AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));\n+        } else {\n+            if (schema != null && schema.isMultivalue()) {\n+                result = new AbstractMap.SimpleEntry<String, Attribute>(null, AttributeBuilder.build(extAttrName,\n+                        objValues));\n+            } else {\n+                result = new AbstractMap.SimpleEntry<String, Attribute>(null, objValues.isEmpty()\n+                        ? AttributeBuilder.build(extAttrName)\n+                        : AttributeBuilder.build(extAttrName, objValues.iterator().next()));\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Build __NAME__ for propagation. First look if there ia a defined accountLink for the given resource (and in this\n+     * case evaluate as JEXL); otherwise, take given accountId.\n+     *\n+     * @param <T> user / role\n+     * @param subject given user / role\n+     * @param resource target resource\n+     * @param accountId accountId\n+     * @return the value to be propagated as __NAME__\n+     */\n+    public static <T extends AbstractAttributable> Name evaluateNAME(final T subject,\n+            final ExternalResource resource, final String accountId) {\n+\n+        final AttributableUtil attrUtil = AttributableUtil.getInstance(subject);\n+\n+        if (StringUtils.isBlank(accountId)) {\n+            // LOG error but avoid to throw exception: leave it to the external resource\n+            LOG.error(\"Missing accountId for '{}': \", resource.getName());\n+        }\n+\n+        // Evaluate AccountLink expression\n+        String evalAccountLink = null;\n+        if (StringUtils.isNotBlank(attrUtil.getAccountLink(resource))) {\n+            final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+            final JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n+\n+            final JexlContext jexlContext = new MapContext();\n+            jexlUtil.addFieldsToContext(subject, jexlContext);\n+            jexlUtil.addAttrsToContext(subject.getAttributes(), jexlContext);\n+            jexlUtil.addDerAttrsToContext(subject.getDerivedAttributes(), subject.getAttributes(), jexlContext);\n+            evalAccountLink = jexlUtil.evaluate(attrUtil.getAccountLink(resource), jexlContext);\n+        }\n+\n+        // If AccountLink evaluates to an empty string, just use the provided AccountId as Name(),\n+        // otherwise evaluated AccountLink expression is taken as Name().\n+        Name name;\n+        if (StringUtils.isBlank(evalAccountLink)) {\n+            // add AccountId as __NAME__ attribute ...\n+            LOG.debug(\"Add AccountId [{}] as __NAME__\", accountId);\n+            name = new Name(accountId);\n+        } else {\n+            LOG.debug(\"Add AccountLink [{}] as __NAME__\", evalAccountLink);\n+            name = new Name(evalAccountLink);\n+\n+            // AccountId not propagated: it will be used to set the value for __UID__ attribute\n+            LOG.debug(\"AccountId will be used just as __UID__ attribute\");\n+        }\n+\n+        return name;\n+    }\n+\n+    private static <T extends AbstractAttributable> String getRoleOwnerValue(final ExternalResource resource,\n+            final T subject) {\n+\n+        final AttributableUtil attrUtil = AttributableUtil.getInstance(subject);\n+\n+        String accountId = null;\n+        try {\n+            Map.Entry<String, Attribute> preparedAttr = prepareAttribute(\n+                    resource, attrUtil.getAccountIdItem(resource), subject, null,\n+                    Collections.<String>emptySet(), Collections.<String, AttributeMod>emptyMap());\n+            accountId = preparedAttr.getKey();\n+        } catch (ClassNotFoundException e) {\n+            LOG.error(\"Could not get accountId for {} on {}\", subject, resource, e);\n+        }\n+\n+        final Name roleOwnerName = evaluateNAME(subject, resource, accountId);\n+        return roleOwnerName.getNameValue();\n+    }\n+\n     /**\n      * Get attribute values.\n      *\n+     * @param resource target resource\n      * @param mappingItem mapping item\n      * @param attributables list of attributables\n-     * @param password password\n+     * @param pwd password\n+     * @param vAttrsToBeRemoved virtual attributes to be removed\n+     * @param vAttrsToBeUpdated virtual attributes to be added\n      * @return attribute values.\n      */\n-    public static List<AbstractAttrValue> getIntValues(final AbstractMappingItem mappingItem,\n-            final List<AbstractAttributable> attributables, final String password,\n+    public static List<AbstractAttrValue> getIntValues(final ExternalResource resource,\n+            final AbstractMappingItem mappingItem, final List<AbstractAttributable> attributables, final String pwd,\n             final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated) {\n \n         LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", attributables, mappingItem.getIntMappingType());\n@@ -171,8 +366,7 @@ public static List<AbstractAttrValue> getIntValues(final AbstractMappingItem map\n                         values.add(attrValue);\n                     }\n \n-                    LOG.\n-                            debug(\"Retrieved attribute {}\"\n+                    LOG.debug(\"Retrieved attribute {}\"\n                             + \"\\n* IntAttrName {}\"\n                             + \"\\n* IntMappingType {}\"\n                             + \"\\n* Attribute values {}\",\n@@ -202,8 +396,8 @@ public static List<AbstractAttrValue> getIntValues(final AbstractMappingItem map\n \n             case Password:\n                 AbstractAttrValue attrValue = new UAttrValue();\n-                if (password != null) {\n-                    attrValue.setStringValue(password);\n+                if (pwd != null) {\n+                    attrValue.setStringValue(pwd);\n                 }\n                 values.add(attrValue);\n                 break;\n@@ -218,6 +412,27 @@ public static List<AbstractAttrValue> getIntValues(final AbstractMappingItem map\n                 }\n                 break;\n \n+            case RoleOwnerSchema:\n+                for (AbstractAttributable attributable : attributables) {\n+                    if (attributable instanceof SyncopeRole) {\n+                        SyncopeRole role = (SyncopeRole) attributable;\n+                        String roleOwnerValue = null;\n+                        if (role.getUserOwner() != null && resource.getUmapping() != null) {\n+                            roleOwnerValue = getRoleOwnerValue(resource, role.getUserOwner());\n+                        }\n+                        if (role.getRoleOwner() != null && resource.getRmapping() != null) {\n+                            roleOwnerValue = getRoleOwnerValue(resource, role.getRoleOwner());\n+                        }\n+\n+                        if (StringUtils.isNotBlank(roleOwnerValue)) {\n+                            attrValue = new RAttrValue();\n+                            attrValue.setStringValue(roleOwnerValue);\n+                            values.add(attrValue);\n+                        }\n+                    }\n+                }\n+                break;\n+\n             default:\n         }\n \n@@ -233,11 +448,11 @@ public static List<AbstractAttrValue> getIntValues(final AbstractMappingItem map\n      * @param accountIdItem accountid mapping item\n      * @return accountId internal value\n      */\n-    public static String getAccountIdValue(final AbstractAttributable attributable,\n+    public static String getAccountIdValue(final AbstractAttributable attributable, final ExternalResource resource,\n             final AbstractMappingItem accountIdItem) {\n \n-        List<AbstractAttrValue> values = getIntValues(\n-                accountIdItem, Collections.<AbstractAttributable>singletonList(attributable), null, null, null);\n+        List<AbstractAttrValue> values = getIntValues(resource, accountIdItem,\n+                Collections.<AbstractAttributable>singletonList(attributable), null, null, null);\n         return values == null || values.isEmpty()\n                 ? null\n                 : values.get(0).getValueAsString();"},{"sha":"9f0ca97ebf068fe78c57e2e6a57aa3a36389a427","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":26,"deletions":29,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.rest;\n \n import java.util.UUID;\n-\n import javax.sql.DataSource;\n-\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.impl.client.DefaultHttpClient;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n@@ -64,39 +62,26 @@\n import org.springframework.web.client.RestTemplate;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:restClientContext.xml\", \"classpath:testJDBCContext.xml\" })\n+@ContextConfiguration(locations = {\"classpath:restClientContext.xml\", \"classpath:testJDBCContext.xml\"})\n public abstract class AbstractTest {\n \n-    protected static AttributeTO attributeTO(final String schema, final String value) {\n-        AttributeTO attr = new AttributeTO();\n-        attr.setSchema(schema);\n-        attr.addValue(value);\n-        return attr;\n-    }\n-\n-    protected static AttributeMod attributeMod(final String schema, final String valueToBeAdded) {\n-        AttributeMod attr = new AttributeMod();\n-        attr.setSchema(schema);\n-        attr.addValueToBeAdded(valueToBeAdded);\n-        return attr;\n-    }\n-\n     /**\n      * Logger.\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractTest.class);\n \n     protected static final String BASE_URL = \"http://localhost:9080/syncope/rest/\";\n \n-    public static final String ADMIN_UID = \"admin\";\n+    protected static final String ADMIN_UID = \"admin\";\n \n-    public static final String ADMIN_PWD = \"password\";\n-\n-    protected PolicyServiceProxy policyService;\n+    protected static final String ADMIN_PWD = \"password\";\n \n     @Autowired\n     private RestTemplate restTemplate;\n \n+    @Autowired\n+    protected DataSource testDataSource;\n+\n     protected UserService userService;\n \n     protected RoleService roleService;\n@@ -123,25 +108,38 @@ protected static AttributeMod attributeMod(final String schema, final String val\n \n     protected UserRequestService userRequestService;\n \n-    @Autowired\n-    protected DataSource testDataSource;\n+    protected PolicyServiceProxy policyService;\n \n-    public static String getUUIDString() {\n-    \treturn UUID.randomUUID().toString().substring(0, 8);\n+    protected static String getUUIDString() {\n+        return UUID.randomUUID().toString().substring(0, 8);\n     }\n \n-    protected RestTemplate anonymousRestTemplate() {\n-        return new RestTemplate();\n+    protected static AttributeTO attributeTO(final String schema, final String value) {\n+        AttributeTO attr = new AttributeTO();\n+        attr.setSchema(schema);\n+        attr.addValue(value);\n+        return attr;\n     }\n \n-    public void setupRestTemplate(final String uid, final String pwd) {\n+    protected static AttributeMod attributeMod(final String schema, final String valueToBeAdded) {\n+        AttributeMod attr = new AttributeMod();\n+        attr.setSchema(schema);\n+        attr.addValueToBeAdded(valueToBeAdded);\n+        return attr;\n+    }\n+\n+    protected void setupRestTemplate(final String uid, final String pwd) {\n         PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate\n                 .getRequestFactory());\n \n         ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n                 requestFactory.getAuthScope(), new UsernamePasswordCredentials(uid, pwd));\n     }\n \n+    protected RestTemplate anonymousRestTemplate() {\n+        return new RestTemplate();\n+    }\n+\n     @Before\n     public void resetRestTemplate() {\n         setupRestTemplate(ADMIN_UID, ADMIN_PWD);\n@@ -160,5 +158,4 @@ public void resetRestTemplate() {\n         schemaService = new SchemaServiceProxy(BASE_URL, restTemplate);\n         userRequestService = new UserRequestServiceProxy(BASE_URL, restTemplate);\n     }\n-\n }"},{"sha":"ffc020eabfa3687896855890281d0af3029eba12","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":29,"deletions":33,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","patch":"@@ -27,7 +27,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.RoleTO;\n@@ -45,6 +44,31 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class RoleTestITCase extends AbstractTest {\n \n+    private RoleTO buildBasicRoleTO(final String name) {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(name + getUUIDString());\n+        roleTO.setParent(8L);\n+        return roleTO;\n+    }\n+\n+    private RoleTO buildRoleTO(final String name) {\n+        RoleTO roleTO = buildBasicRoleTO(name);\n+\n+        // verify inheritance password and account policies\n+        roleTO.setInheritAccountPolicy(false);\n+        // not inherited so setter execution shouldn't be ignored\n+        roleTO.setAccountPolicy(6L);\n+\n+        roleTO.setInheritPasswordPolicy(true);\n+        // inherited so setter execution should be ignored\n+        roleTO.setPasswordPolicy(2L);\n+\n+        roleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n+\n+        roleTO.addResource(\"resource-ldap\");\n+        return roleTO;\n+    }\n+\n     @Test\n     public void createWithException() {\n         RoleTO newRoleTO = new RoleTO();\n@@ -63,11 +87,9 @@ public void createWithException() {\n     @Test\n     public void create() {\n         RoleTO roleTO = buildRoleTO(\"lastRole\");\n-        roleTO.addDerivedAttribute(attributeTO(\"ownerDN\", null));\n         roleTO.addVirtualAttribute(attributeTO(\"rvirtualdata\", \"rvirtualvalue\"));\n         roleTO.setRoleOwner(8L);\n \n-\n         roleTO = roleService.create(roleTO);\n         assertNotNull(roleTO);\n \n@@ -85,7 +107,7 @@ public void create() {\n         assertTrue(roleTO.getResources().contains(\"resource-ldap\"));\n \n         ConnObjectTO connObjectTO = resourceService.getConnector(\"resource-ldap\", AttributableType.ROLE,\n-        \t\troleTO.getName());\n+                roleTO.getName());\n         assertNotNull(connObjectTO);\n         assertNotNull(connObjectTO.getAttributeMap().get(\"owner\"));\n     }\n@@ -203,7 +225,7 @@ public void update() {\n \n         RoleMod roleMod = new RoleMod();\n         roleMod.setId(roleTO.getId());\n-        String modName = \"finalRole\" + getUUIDString(); \n+        String modName = \"finalRole\" + getUUIDString();\n         roleMod.setName(modName);\n         roleMod.addAttributeToBeUpdated(attributeMod(\"show\", \"FALSE\"));\n \n@@ -302,7 +324,7 @@ public void updateAsRoleOwner() {\n     @Test\n     public void issue178() {\n         RoleTO roleTO = new RoleTO();\n-        String roleName = \"torename\" + getUUIDString(); \n+        String roleName = \"torename\" + getUUIDString();\n         roleTO.setName(roleName);\n \n         RoleTO actual = roleService.create(roleTO);\n@@ -313,7 +335,7 @@ public void issue178() {\n \n         RoleMod roleMod = new RoleMod();\n         roleMod.setId(actual.getId());\n-        String renamedRole = \"renamed\" + getUUIDString(); \n+        String renamedRole = \"renamed\" + getUUIDString();\n         roleMod.setName(renamedRole);\n \n         actual = roleService.update(roleMod.getId(), roleMod);\n@@ -352,30 +374,4 @@ public void issueSYNCOPE228() {\n         assertNotNull(roleTO);\n         assertTrue(roleTO.getEntitlements().isEmpty());\n     }\n-\n-\tprivate RoleTO buildBasicRoleTO(String name) {\n-\t\tRoleTO roleTO = new RoleTO();\n-        roleTO.setName(name + getUUIDString());\n-        roleTO.setParent(8L);\n-\t\treturn roleTO;\n-\t}\n-\n-\tprivate RoleTO buildRoleTO(String name) {\n-\t\tRoleTO roleTO = buildBasicRoleTO(name);\n-\n-        // verify inheritance password and account policies\n-        roleTO.setInheritAccountPolicy(false);\n-        // not inherited so setter execution shouldn't be ignored\n-        roleTO.setAccountPolicy(6L);\n-\n-        roleTO.setInheritPasswordPolicy(true);\n-        // inherited so setter execution should be ignored\n-        roleTO.setPasswordPolicy(2L);\n-\n-        roleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n-\n-        roleTO.addResource(\"resource-ldap\");\n-\t\treturn roleTO;\n-\t}\n-\n }"},{"sha":"9ecbec96e4a9e6a3365c84b0abae47b7e6d9a9ff","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7c25e0a44e7cd7709b6419f3f0aec63ebee85db3/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=7c25e0a44e7cd7709b6419f3f0aec63ebee85db3","patch":"@@ -209,10 +209,6 @@ under the License.\n   <!-- rderiveddata is used to verify der schema deletion -->\n   <RDerSchema name=\"rderivedschema\" expression=\"rderived_sx + '-' + rderived_dx\"/>\n \n-  <!-- used for RMapping below -->  \n-  <RDerSchema name=\"ownerDN\" \n-              expression=\"!empty(roleOwner) ? 'cn=' + roleOwner.name + ',ou=groups,o=isp': (!empty(userOwner) ? 'uid=' +  userOwner.username + ',ou=people,o=isp' : '')\"/>\n-  \n   <RAttr id=\"994\" owner_id=\"12\" schema_name=\"title\"/>\n   <RAttrValue attribute_id=\"994\" id=\"94\" stringValue=\"r12\"/>\n   \n@@ -576,7 +572,7 @@ under the License.\n                 extAttrName=\"__UID__\" intAttrName=\"roleName\" intMappingType=\"RoleName\"\n                 mandatoryCondition=\"true\"/>\n   <RMappingItem id=\"2\" accountid=\"0\" password=\"0\" mapping_id=\"1\"\n-                extAttrName=\"owner\" intAttrName=\"ownerDN\" intMappingType=\"RoleDerivedSchema\"\n+                extAttrName=\"owner\" intAttrName=\"roleOwnerSchema\" intMappingType=\"RoleOwnerSchema\"\n                 mandatoryCondition=\"false\"/>\n   <RMappingItem id=\"3\" accountid=\"0\" password=\"0\" mapping_id=\"1\"\n                 extAttrName=\"description\" intAttrName=\"title\" intMappingType=\"RoleSchema\""}]}