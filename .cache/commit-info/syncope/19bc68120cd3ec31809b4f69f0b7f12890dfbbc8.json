{"sha":"19bc68120cd3ec31809b4f69f0b7f12890dfbbc8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE5YmM2ODEyMGNkM2VjMzE4MDliNGY2OWYwYjdmMTI4OTBkZmJiYzg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-01-11T08:07:36Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-01-11T08:07:36Z"},"message":"[SYNCOPE-1608] Allowing MembershipCond to bear group name pattern","tree":{"sha":"b398aed2b8ca41b45a9080abc0f22c5ce51596be","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b398aed2b8ca41b45a9080abc0f22c5ce51596be"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f7328430e0436c794ccfc2a198e59734bbc04163","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f7328430e0436c794ccfc2a198e59734bbc04163","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f7328430e0436c794ccfc2a198e59734bbc04163"}],"stats":{"total":139,"additions":95,"deletions":44},"files":[{"sha":"b862dc0fca2ed688b7f537e11df8724f2f17c7f3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=19bc68120cd3ec31809b4f69f0b7f12890dfbbc8","patch":"@@ -37,6 +37,8 @@ public interface GroupDAO extends AnyDAO<Group> {\n \n     Group findByName(String name);\n \n+    List<String> findKeysByNamePattern(String pattern);\n+\n     List<Group> findOwnedByUser(String userKey);\n \n     List<Group> findOwnedByGroup(String groupKey);"},{"sha":"479efe4dbef7bcde98fe446910685188a4ceaf51","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=19bc68120cd3ec31809b4f69f0b7f12890dfbbc8","patch":"@@ -59,7 +59,6 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n import org.springframework.beans.factory.annotation.Autowired;\n \n@@ -236,20 +235,20 @@ protected Triple<PlainSchema, PlainAttrValue, AnyCond> check(final AnyCond cond,\n         return Triple.of(schema, attrValue, computed);\n     }\n \n-    protected String check(final MembershipCond cond) {\n-        String groupKey;\n+    protected List<String> check(final MembershipCond cond) {\n         if (SyncopeConstants.UUID_PATTERN.matcher(cond.getGroup()).matches()) {\n-            groupKey = cond.getGroup();\n-        } else {\n-            Group group = groupDAO.findByName(cond.getGroup());\n-            groupKey = Optional.ofNullable(group).map(Entity::getKey).orElse(null);\n+            return List.of(cond.getGroup());\n         }\n-        if (groupKey == null) {\n-            LOG.error(\"Could not find group for '\" + cond.getGroup() + '\\'');\n+\n+        List<String> matching = cond.getGroup().indexOf('%') == -1\n+                ? Optional.ofNullable(groupDAO.findKey(cond.getGroup())).map(List::of).orElseGet(() -> List.of())\n+                : groupDAO.findKeysByNamePattern(cond.getGroup());\n+        if (matching.isEmpty()) {\n+            LOG.error(\"Could not find group(s) for '\" + cond.getGroup() + '\\'');\n             throw new IllegalArgumentException();\n         }\n \n-        return groupKey;\n+        return matching;\n     }\n \n     protected String check(final RelationshipCond cond) {"},{"sha":"0ed88930cef97a553db1c8d3cf923d1d6d13874a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=19bc68120cd3ec31809b4f69f0b7f12890dfbbc8","patch":"@@ -646,13 +646,17 @@ protected String getQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        String groupKey;\n+        List<String> groupKeys;\n         try {\n-            groupKey = check(cond);\n+            groupKeys = check(cond);\n         } catch (IllegalArgumentException e) {\n             return EMPTY_QUERY;\n         }\n \n+        String where = groupKeys.stream().\n+                map(key -> \"group_id=?\" + setParameter(parameters, key)).\n+                collect(Collectors.joining(\" OR \"));\n+\n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n \n@@ -664,7 +668,7 @@ protected String getQuery(\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.membership().name).append(\" WHERE \").\n-                append(\"group_id=?\").append(setParameter(parameters, groupKey)).\n+                append(where).\n                 append(\") \");\n \n         if (not) {\n@@ -675,7 +679,7 @@ protected String getQuery(\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.dyngroupmembership().name).append(\" WHERE \").\n-                append(\"group_id=?\").append(setParameter(parameters, groupKey)).\n+                append(where).\n                 append(\"))\");\n \n         return query.toString();"},{"sha":"e6fe9d165b88bd083aedb83e0e867bd7b67a6f7a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=19bc68120cd3ec31809b4f69f0b7f12890dfbbc8","patch":"@@ -166,6 +166,17 @@ public Group findByName(final String name) {\n         return result;\n     }\n \n+    @Override\n+    public List<String> findKeysByNamePattern(final String pattern) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT id FROM \" + JPAGroup.TABLE + \" WHERE LOWER(name) LIKE LOWER(?1)\");\n+        query.setParameter(1, pattern);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object> raw = query.getResultList();\n+        return raw.stream().map(Object::toString).collect(Collectors.toList());\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public List<Group> findOwnedByUser(final String userKey) {"},{"sha":"e37984c0ccfcdac4cdb7e1c48dd261d01c9369e7","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":22,"deletions":9,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=19bc68120cd3ec31809b4f69f0b7f12890dfbbc8","patch":"@@ -29,6 +29,7 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.time.DateUtils;\n+import java.util.stream.Stream;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -239,18 +240,30 @@ public void searchByPageAndSize() {\n     @Test\n     public void searchByGroup() {\n         MembershipCond groupCond = new MembershipCond();\n-        groupCond.setGroup(\"root\");\n+        groupCond.setGroup(\"child\");\n \n-        List<User> users = searchDAO.search(SearchCond.getLeaf(groupCond), AnyTypeKind.USER);\n-        assertNotNull(users);\n-        assertEquals(2, users.size());\n+        List<User> matchingChild = searchDAO.search(SearchCond.getLeaf(groupCond), AnyTypeKind.USER);\n+        assertNotNull(matchingChild);\n+        assertTrue(matchingChild.stream().anyMatch(user -> \"verdi\".equals(user.getUsername())));\n \n-        groupCond = new MembershipCond();\n-        groupCond.setGroup(\"secretary\");\n+        groupCond.setGroup(\"otherchild\");\n \n-        users = searchDAO.search(SearchCond.getNotLeaf(groupCond), AnyTypeKind.USER);\n-        assertNotNull(users);\n-        assertEquals(5, users.size());\n+        List<User> matchingOtherChild = searchDAO.search(SearchCond.getLeaf(groupCond), AnyTypeKind.USER);\n+        assertNotNull(matchingOtherChild);\n+        assertTrue(matchingOtherChild.stream().anyMatch(user -> \"rossini\".equals(user.getUsername())));\n+\n+        Set<String> union = Stream.concat(\n+                matchingChild.stream().map(User::getUsername),\n+                matchingOtherChild.stream().map(User::getUsername)).\n+                collect(Collectors.toSet());\n+\n+        groupCond.setGroup(\"%child\");\n+\n+        List<User> matchingStar = searchDAO.search(SearchCond.getLeaf(groupCond), AnyTypeKind.USER);\n+        assertNotNull(matchingStar);\n+        assertTrue(matchingStar.stream().anyMatch(user -> \"verdi\".equals(user.getUsername())));\n+        assertTrue(matchingStar.stream().anyMatch(user -> \"rossini\".equals(user.getUsername())));\n+        assertEquals(union, matchingStar.stream().map(User::getUsername).collect(Collectors.toSet()));\n     }\n \n     @Test"},{"sha":"15674ad1975b6aab1282336a707486ee41337925","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=19bc68120cd3ec31809b4f69f0b7f12890dfbbc8","patch":"@@ -349,14 +349,20 @@ private QueryBuilder getQueryBuilder(final RelationshipCond cond) {\n     }\n \n     private QueryBuilder getQueryBuilder(final MembershipCond cond) {\n-        String groupKey;\n+        List<String> groupKeys;\n         try {\n-            groupKey = check(cond);\n+            groupKeys = check(cond);\n         } catch (IllegalArgumentException e) {\n             return EMPTY_QUERY_BUILDER;\n         }\n \n-        return QueryBuilders.termQuery(\"memberships\", groupKey);\n+        if (groupKeys.size() == 1) {\n+            return QueryBuilders.termQuery(\"memberships\", groupKeys.get(0));\n+        }\n+\n+        DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n+        groupKeys.forEach(key -> builder.add(QueryBuilders.termQuery(\"memberships\", key)));\n+        return builder;\n     }\n \n     private QueryBuilder getQueryBuilder(final AssignableCond cond) {"},{"sha":"77384fdc4286e85d0a5ebf336f3185c015c15b63","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":28,"deletions":18,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=19bc68120cd3ec31809b4f69f0b7f12890dfbbc8","patch":"@@ -30,6 +30,7 @@\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -95,24 +96,21 @@ public void searchUserIgnoreCase() {\n                                 is(\"username\").equalToIgnoreCase(\"RoSsINI\").and(\"key\").lessThan(2).query()).build());\n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.getResult().size());\n-        assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n-        assertEquals(\"1417acbe-cbf6-4277-9372-e75e04f97000\", matchingUsers.getResult().iterator().next().getKey());\n+        assertEquals(\"rossini\", matchingUsers.getResult().get(0).getUsername());\n \n         matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                         fiql(\"fullname=~*oSsINi\").page(1).size(2).build());\n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.getResult().size());\n-        assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n-        assertEquals(\"1417acbe-cbf6-4277-9372-e75e04f97000\", matchingUsers.getResult().iterator().next().getKey());\n+        assertEquals(\"rossini\", matchingUsers.getResult().get(0).getUsername());\n \n         matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                         fiql(\"fullname=~*ino*rossini*\").page(1).size(2).build());\n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.getResult().size());\n-        assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n-        assertEquals(\"1417acbe-cbf6-4277-9372-e75e04f97000\", matchingUsers.getResult().iterator().next().getKey());\n+        assertEquals(\"rossini\", matchingUsers.getResult().get(0).getUsername());\n     }\n \n     @Test\n@@ -123,8 +121,7 @@ public void searchByUsernameAndKey() {\n                                 is(\"username\").equalTo(\"rossini\").and(\"key\").lessThan(2).query()).build());\n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.getResult().size());\n-        assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n-        assertEquals(\"1417acbe-cbf6-4277-9372-e75e04f97000\", matchingUsers.getResult().iterator().next().getKey());\n+        assertEquals(\"rossini\", matchingUsers.getResult().get(0).getUsername());\n     }\n \n     @Test\n@@ -141,15 +138,30 @@ public void searchByGroupNameAndKey() {\n \n     @Test\n     public void searchByGroup() {\n-        PagedResult<UserTO> matchingUsers = userService.search(\n+        PagedResult<UserTO> matchingChild = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                        fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(\"root\").query()).\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(\"child\").query()).\n                         build());\n-        assertNotNull(matchingUsers);\n-        assertFalse(matchingUsers.getResult().isEmpty());\n+        assertTrue(matchingChild.getResult().stream().anyMatch(user -> \"verdi\".equals(user.getUsername())));\n \n-        assertTrue(matchingUsers.getResult().stream().\n-                anyMatch(user -> \"1417acbe-cbf6-4277-9372-e75e04f97000\".equals(user.getKey())));\n+        PagedResult<UserTO> matchingOtherChild = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(\"otherchild\").query()).\n+                        build());\n+        assertTrue(matchingOtherChild.getResult().stream().anyMatch(user -> \"rossini\".equals(user.getUsername())));\n+\n+        Set<String> union = Stream.concat(\n+                matchingChild.getResult().stream().map(UserTO::getUsername),\n+                matchingOtherChild.getResult().stream().map(UserTO::getUsername)).\n+                collect(Collectors.toSet());\n+\n+        PagedResult<UserTO> matchingStar = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(\"*child\").query()).\n+                        build());\n+        assertTrue(matchingStar.getResult().stream().anyMatch(user -> \"verdi\".equals(user.getUsername())));\n+        assertTrue(matchingStar.getResult().stream().anyMatch(user -> \"rossini\".equals(user.getUsername())));\n+        assertEquals(union, matchingStar.getResult().stream().map(UserTO::getUsername).collect(Collectors.toSet()));\n     }\n \n     @Test\n@@ -194,8 +206,7 @@ public void searchByRole() {\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n-        assertTrue(matchingUsers.getResult().stream().\n-                anyMatch(user -> \"1417acbe-cbf6-4277-9372-e75e04f97000\".equals(user.getKey())));\n+        assertTrue(matchingUsers.getResult().stream().anyMatch(user -> \"rossini\".equals(user.getUsername())));\n     }\n \n     @Test\n@@ -207,8 +218,7 @@ public void searchByPrivilege() {\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n-        assertTrue(matchingUsers.getResult().stream().\n-                anyMatch(user -> \"1417acbe-cbf6-4277-9372-e75e04f97000\".equals(user.getKey())));\n+        assertTrue(matchingUsers.getResult().stream().anyMatch(user -> \"rossini\".equals(user.getUsername())));\n     }\n \n     @Test"},{"sha":"a70fecfd9518e0007c40808454f3a338394580c2","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Frestfulservices.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19bc68120cd3ec31809b4f69f0b7f12890dfbbc8/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Frestfulservices.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Frestfulservices.adoc?ref=19bc68120cd3ec31809b4f69f0b7f12890dfbbc8","patch":"@@ -450,6 +450,12 @@ $resources==resource-ldap\n $groups==root\n ----\n ====\n+.Wildcard group membership match (only for Users and Any Objects)\n+====\n+----\n+$groups==*child\n+----\n+====\n \n .Role membership match (only for Users)\n ===="}]}