{"sha":"052d10c4dc38163a488b395ceb7ebd3dd971aa4e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA1MmQxMGM0ZGMzODE2M2E0ODhiMzk1Y2ViN2ViZDNkZDk3MWFhNGU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-09-04T12:05:57Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-09-04T12:23:56Z"},"message":"[SYNCOPE-1485] Reduce temporary result cache","tree":{"sha":"996e21e23258e8fc27cc84ab5df409326029069b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/996e21e23258e8fc27cc84ab5df409326029069b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/052d10c4dc38163a488b395ceb7ebd3dd971aa4e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/052d10c4dc38163a488b395ceb7ebd3dd971aa4e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/052d10c4dc38163a488b395ceb7ebd3dd971aa4e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9feb0fa02f9a4190e4eb6d1c2887482204605949","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9feb0fa02f9a4190e4eb6d1c2887482204605949","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9feb0fa02f9a4190e4eb6d1c2887482204605949"}],"stats":{"total":90,"additions":73,"deletions":17},"files":[{"sha":"2300314146ec52f677ab1cf7b986133769b49617","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=052d10c4dc38163a488b395ceb7ebd3dd971aa4e","patch":"@@ -79,6 +79,15 @@\n      */\n     List<A> findAll(int page, int itemsPerPage);\n \n+    /**\n+     * Find any objects' keys without any limitation, according to given page and items per page.\n+     *\n+     * @param page search result page\n+     * @param itemsPerPage items per search result page\n+     * @return any objects' keys matching the provided conditions\n+     */\n+    List<String> findAllKeys(int page, int itemsPerPage);\n+\n     <S extends Schema> AllowedSchemas<S> findAllowedSchemas(A any, Class<S> reference);\n \n     A save(A any);"},{"sha":"9a563518a2634768120ff2f92ff3fd11d89ef7c5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=052d10c4dc38163a488b395ceb7ebd3dd971aa4e","patch":"@@ -115,6 +115,20 @@ protected String findKey(final String name, final String table) {\n         return key;\n     }\n \n+    protected List<String> findAllKeys(final String table, final int page, final int itemsPerPage) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT id FROM \" + table + \" ORDER BY id\", String.class);\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+        query.setMaxResults(itemsPerPage);\n+\n+        List<String> result = new ArrayList<>();\n+        query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n+                ? (String) ((Object[]) resultKey)[0]\n+                : ((String) resultKey)).\n+                forEach(actualKey -> result.add(actualKey.toString()));\n+        return result;\n+    }\n+\n     protected Date findLastChange(final String key, final String table) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT creationDate, lastChangeDate FROM \" + table + \" WHERE id=?\");"},{"sha":"26a2a125b5955b3698824cd72b6dbf83d64fc57c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=052d10c4dc38163a488b395ceb7ebd3dd971aa4e","patch":"@@ -195,6 +195,11 @@ public List<AnyObject> findAll(final int page, final int itemsPerPage) {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<String> findAllKeys(final int page, final int itemsPerPage) {\n+        return findAllKeys(JPAAnyObject.TABLE, page, itemsPerPage);\n+    }\n+\n     protected Pair<AnyObject, Pair<Set<String>, Set<String>>> doSave(final AnyObject anyObject) {\n         AnyObject merged = super.save(anyObject);\n         publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));"},{"sha":"c7aff8e70d39a90317f4bdfde4e058b91feea2af","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=052d10c4dc38163a488b395ceb7ebd3dd971aa4e","patch":"@@ -229,6 +229,11 @@ public List<Group> findAll(final int page, final int itemsPerPage) {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<String> findAllKeys(final int page, final int itemsPerPage) {\n+        return findAllKeys(JPAGroup.TABLE, page, itemsPerPage);\n+    }\n+\n     private SearchCond buildDynMembershipCond(final String baseCondFIQL, final Realm groupRealm) {\n         AssignableCond cond = new AssignableCond();\n         cond.setRealmFullPath(groupRealm.getFullPath());"},{"sha":"0d3c1ada95cd4fd755b51bc0c9c136f7ece24421","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=052d10c4dc38163a488b395ceb7ebd3dd971aa4e","patch":"@@ -255,6 +255,10 @@ public List<User> findAll(final int page, final int itemsPerPage) {\n         return query.getResultList();\n     }\n \n+    public List<String> findAllKeys(final int page, final int itemsPerPage) {\n+        return findAllKeys(JPAUser.TABLE, page, itemsPerPage);\n+    }\n+\n     protected List<AccountPolicy> getAccountPolicies(final User user) {\n         List<AccountPolicy> policies = new ArrayList<>();\n "},{"sha":"5848ce8c54e09174fbf2f7b31d750e7e169999b2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyObjectTest.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java?ref=052d10c4dc38163a488b395ceb7ebd3dd971aa4e","patch":"@@ -18,10 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n+import java.util.List;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -52,6 +54,17 @@ public void find() {\n         assertFalse(anyObject.getType().getClasses().isEmpty());\n     }\n \n+    @Test\n+    public void findAll() {\n+        List<AnyObject> anyObjects = anyObjectDAO.findAll(1, 100);\n+        assertNotNull(anyObjects);\n+\n+        List<String> anyObjectKeys = anyObjectDAO.findAllKeys(1, 100);\n+        assertNotNull(anyObjectKeys);\n+\n+        assertEquals(anyObjects.size(), anyObjectKeys.size());\n+    }\n+\n     @Test\n     public void save() {\n         AnyObject anyObject = entityFactory.newEntity(AnyObject.class);"},{"sha":"496c618f177503a6de1ec91c1a343b5e8f512019","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GroupTest.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java?ref=052d10c4dc38163a488b395ceb7ebd3dd971aa4e","patch":"@@ -47,8 +47,13 @@ public class GroupTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<Group> list = groupDAO.findAll(1, 100);\n-        assertEquals(16, list.size());\n+        List<Group> groups = groupDAO.findAll(1, 100);\n+        assertEquals(16, groups.size());\n+\n+        List<String> groupKeys = groupDAO.findAllKeys(1, 100);\n+        assertNotNull(groupKeys);\n+\n+        assertEquals(groups.size(), groupKeys.size());\n     }\n \n     @Test"},{"sha":"41f7e54b7cbd11a570cbf4ca123e91043a0cfdb6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=052d10c4dc38163a488b395ceb7ebd3dd971aa4e","patch":"@@ -85,8 +85,13 @@ public void find() {\n \n     @Test\n     public void findAll() {\n-        List<User> list = userDAO.findAll(1, 100);\n-        assertEquals(5, list.size());\n+        List<User> users = userDAO.findAll(1, 100);\n+        assertEquals(5, users.size());\n+\n+        List<String> userKeys = userDAO.findAllKeys(1, 100);\n+        assertNotNull(userKeys);\n+\n+        assertEquals(users.size(), userKeys.size());\n     }\n \n     @Test"},{"sha":"de2243c43b10684136827dcb188e3c0b6bbf1e6c","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":9,"deletions":13,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/052d10c4dc38163a488b395ceb7ebd3dd971aa4e/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=052d10c4dc38163a488b395ceb7ebd3dd971aa4e","patch":"@@ -23,10 +23,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n@@ -83,39 +80,38 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n \n                 LOG.debug(\"Indexing users...\");\n                 for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n-\n-                    for (User user : userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n+                    for (String user : userDAO.findAllKeys(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexRequest request = new IndexRequest(\n                                 elasticsearchUtils.getContextDomainName(\n                                         AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n-                                id(user.getKey()).\n-                                source(elasticsearchUtils.builder(user));\n+                                id(user).\n+                                source(elasticsearchUtils.builder(userDAO.find(user)));\n                         IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n                         LOG.debug(\"Index successfully created for {}: {}\", user, response);\n                     }\n                 }\n \n                 LOG.debug(\"Indexing groups...\");\n                 for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n-                    for (Group group : groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n+                    for (String group : groupDAO.findAllKeys(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexRequest request = new IndexRequest(\n                                 elasticsearchUtils.getContextDomainName(\n                                         AuthContextUtils.getDomain(), AnyTypeKind.GROUP)).\n-                                id(group.getKey()).\n-                                source(elasticsearchUtils.builder(group));\n+                                id(group).\n+                                source(elasticsearchUtils.builder(groupDAO.find(group)));\n                         IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n                         LOG.debug(\"Index successfully created for {}: {}\", group, response);\n                     }\n                 }\n \n                 LOG.debug(\"Indexing any objects...\");\n                 for (int page = 1; page <= (anyObjectDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n-                    for (AnyObject anyObject : anyObjectDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n+                    for (String anyObject : anyObjectDAO.findAllKeys(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexRequest request = new IndexRequest(\n                                 elasticsearchUtils.getContextDomainName(\n                                         AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT)).\n-                                id(anyObject.getKey()).\n-                                source(elasticsearchUtils.builder(anyObject));\n+                                id(anyObject).\n+                                source(elasticsearchUtils.builder(anyObjectDAO.find(anyObject)));\n                         IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n                         LOG.debug(\"Index successfully created for {}: {}\", anyObject, response);\n                     }"}]}