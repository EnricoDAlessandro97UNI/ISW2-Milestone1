{"sha":"a1737d35ad33c426e89a48259f0655ba3736ac6c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmExNzM3ZDM1YWQzM2M0MjZlODlhNDgyNTlmMDY1NWJhMzczNmFjNmM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-26T14:26:23Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-26T14:26:23Z"},"message":"[SYNCOPE-686] Enriching UserMod's pwdPropRequest when using AES and adding resources to users via roles","tree":{"sha":"ad1fbb20503fa44c962d9d2a87bb2299a269540d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ad1fbb20503fa44c962d9d2a87bb2299a269540d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a1737d35ad33c426e89a48259f0655ba3736ac6c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a1737d35ad33c426e89a48259f0655ba3736ac6c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a1737d35ad33c426e89a48259f0655ba3736ac6c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a1737d35ad33c426e89a48259f0655ba3736ac6c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4ae3e2cb40980702268041d4d9c961a41797a6cd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4ae3e2cb40980702268041d4d9c961a41797a6cd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4ae3e2cb40980702268041d4d9c961a41797a6cd"}],"stats":{"total":127,"additions":97,"deletions":30},"files":[{"sha":"68843a7a3bb0a8fa63244fcf77760a4c948a6c3e","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1737d35ad33c426e89a48259f0655ba3736ac6c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1737d35ad33c426e89a48259f0655ba3736ac6c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=a1737d35ad33c426e89a48259f0655ba3736ac6c","patch":"@@ -272,7 +272,8 @@ public UserTO update(final UserMod userMod) {\n                 removeMemberships = true;\n             }\n         }\n-        //Actual operations: workflow, propagation, notification\n+\n+        // Actual operations: workflow, propagation, notification\n         WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(actual);\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);"},{"sha":"fcd67c293629111fec91bae66a233a22892a305d","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1737d35ad33c426e89a48259f0655ba3736ac6c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1737d35ad33c426e89a48259f0655ba3736ac6c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=a1737d35ad33c426e89a48259f0655ba3736ac6c","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n+import org.apache.syncope.common.mod.StatusMod;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -379,6 +380,20 @@ public PropagationByResource update(final SyncopeUser toBeUpdated, final UserMod\n                     user.addMembership(membership);\n \n                     toBeProvisioned.addAll(role.getResourceNames());\n+\n+                    // SYNCOPE-686: if password is invertible and we are adding resources with password mapping,\n+                    // ensure that they are counted for password propagation\n+                    if (toBeUpdated.canDecodePassword()) {\n+                        for (ExternalResource resource : role.getResources()) {\n+                            if (resource.getUmapping().getPasswordItem() != null) {\n+                                if (userMod.getPwdPropRequest() == null) {\n+                                    userMod.setPwdPropRequest(new StatusMod());\n+                                }\n+\n+                                userMod.getPwdPropRequest().getResourceNames().add(resource.getName());\n+                            }\n+                        }\n+                    }\n                 }\n \n                 propByRes.merge(fill(membership, membershipMod,"},{"sha":"5f0feb081f6ad7c10ae6661ce217cc346ac503c5","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1737d35ad33c426e89a48259f0655ba3736ac6c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1737d35ad33c426e89a48259f0655ba3736ac6c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=a1737d35ad33c426e89a48259f0655ba3736ac6c","patch":"@@ -71,7 +71,7 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class RoleTestITCase extends AbstractTest {\n \n-    private RoleTO buildBasicRoleTO(final String name) {\n+    public static RoleTO buildBasicRoleTO(final String name) {\n         RoleTO roleTO = new RoleTO();\n         roleTO.setName(name + getUUIDString());\n         roleTO.setParent(8L);"},{"sha":"269f0a87e44c0131b9938b9de02daec7c3880826","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":79,"deletions":28,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1737d35ad33c426e89a48259f0655ba3736ac6c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1737d35ad33c426e89a48259f0655ba3736ac6c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=a1737d35ad33c426e89a48259f0655ba3736ac6c","patch":"@@ -1552,38 +1552,40 @@ public void isseSYNCOPE136AES() {\n         pwdCipherAlgo.getValues().set(0, \"AES\");\n         configurationService.set(pwdCipherAlgo.getSchema(), pwdCipherAlgo);\n \n-        // 3. create user with no resources\n-        UserTO userTO = getUniqueSampleTO(\"syncope136_AES@apache.org\");\n-        userTO.getResources().clear();\n-\n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-\n-        // 4. update user, assign a propagation primary resource but don't provide any password\n-        UserMod userMod = new UserMod();\n-        userMod.setId(userTO.getId());\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n+        try {\n+            // 3. create user with no resources\n+            UserTO userTO = getUniqueSampleTO(\"syncope136_AES@apache.org\");\n+            userTO.getResources().clear();\n \n-        final StatusMod st = new StatusMod();\n-        st.setOnSyncope(false);\n-        st.getResourceNames().add(RESOURCE_NAME_WS1);\n-        userMod.setPwdPropRequest(st);\n+            userTO = createUser(userTO);\n+            assertNotNull(userTO);\n \n-        userTO = updateUser(userMod);\n-        assertNotNull(userTO);\n+            // 4. update user, assign a propagation primary resource but don't provide any password\n+            UserMod userMod = new UserMod();\n+            userMod.setId(userTO.getId());\n+            userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n \n-        // 5. verify that propagation was successful\n-        List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n-        assertNotNull(props);\n-        assertEquals(1, props.size());\n-        PropagationStatus prop = props.iterator().next();\n-        assertNotNull(prop);\n-        assertEquals(RESOURCE_NAME_WS1, prop.getResource());\n-        assertEquals(PropagationTaskExecStatus.SUBMITTED, prop.getStatus());\n+            final StatusMod st = new StatusMod();\n+            st.setOnSyncope(false);\n+            st.getResourceNames().add(RESOURCE_NAME_WS1);\n+            userMod.setPwdPropRequest(st);\n \n-        // 6. restore initial cipher algorithm\n-        pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n-        configurationService.set(pwdCipherAlgo.getSchema(), pwdCipherAlgo);\n+            userTO = updateUser(userMod);\n+            assertNotNull(userTO);\n+\n+            // 5. verify that propagation was successful\n+            List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n+            assertNotNull(props);\n+            assertEquals(1, props.size());\n+            PropagationStatus prop = props.iterator().next();\n+            assertNotNull(prop);\n+            assertEquals(RESOURCE_NAME_WS1, prop.getResource());\n+            assertEquals(PropagationTaskExecStatus.SUBMITTED, prop.getStatus());\n+        } finally {\n+            // restore initial cipher algorithm\n+            pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n+            configurationService.set(pwdCipherAlgo.getSchema(), pwdCipherAlgo);\n+        }\n     }\n \n     @Test\n@@ -2533,4 +2535,53 @@ public void issueSYNCOPE647() {\n         assertNotNull(connObjectTO);\n         assertEquals(\"newPostalAddress\", connObjectTO.getAttrMap().get(\"postalAddress\").getValues().get(0));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE686() {\n+        // 1. read configured cipher algorithm in order to be able to restore it at the end of test\n+        AttributeTO pwdCipherAlgo = configurationService.read(\"password.cipher.algorithm\");\n+        String origpwdCipherAlgo = pwdCipherAlgo.getValues().get(0);\n+\n+        // 2. set AES password cipher algorithm\n+        pwdCipherAlgo.getValues().set(0, \"AES\");\n+        configurationService.set(pwdCipherAlgo.getSchema(), pwdCipherAlgo);\n+\n+        try {\n+            // 3. create role with LDAP resource assigned\n+            RoleTO role = RoleTestITCase.buildBasicRoleTO(\"syncope686\");\n+            role.getResources().add(RESOURCE_NAME_LDAP);\n+            role = createRole(role);\n+            assertNotNull(role);\n+\n+            // 4. create user with no resources\n+            UserTO userTO = getUniqueSampleTO(\"syncope686@apache.org\");\n+            userTO.getResources().clear();\n+\n+            userTO = createUser(userTO);\n+            assertNotNull(userTO);\n+\n+            // 5. update user with the new role, and don't provide any password\n+            UserMod userMod = new UserMod();\n+            userMod.setId(userTO.getId());\n+            MembershipMod membMod = new MembershipMod();\n+            membMod.setRole(role.getId());\n+            userMod.getMembershipsToAdd().add(membMod);\n+\n+            userTO = updateUser(userMod);\n+            assertNotNull(userTO);\n+\n+            // 5. verify that propagation was successful\n+            List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n+            assertNotNull(props);\n+            assertEquals(1, props.size());\n+            PropagationStatus prop = props.iterator().next();\n+            assertNotNull(prop);\n+            assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n+        } finally {\n+            // restore initial cipher algorithm\n+            pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n+            configurationService.set(pwdCipherAlgo.getSchema(), pwdCipherAlgo);\n+        }\n+    }\n }"}]}