{"sha":"358aef72dca5672361cf1a9a3ac2b8c0c57517a3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM1OGFlZjcyZGNhNTY3MjM2MWNmMWE5YTNhYzJiOGMwYzU3NTE3YTM=","commit":{"author":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-04-14T14:33:45Z"},"committer":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-05-21T15:00:47Z"},"message":"[SYNCOPE-660] Asynchronous jobs delegated to Quartz, like Task and Report, now can be checked and interrupted during execution","tree":{"sha":"199dba1dca32bb5ddb54e1fdcede3160e7245249","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/199dba1dca32bb5ddb54e1fdcede3160e7245249"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/358aef72dca5672361cf1a9a3ac2b8c0c57517a3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/358aef72dca5672361cf1a9a3ac2b8c0c57517a3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/358aef72dca5672361cf1a9a3ac2b8c0c57517a3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/comments","author":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"committer":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"parents":[{"sha":"1d6451b5c4178e7d5a368d10af6df82055d95386","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1d6451b5c4178e7d5a368d10af6df82055d95386","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1d6451b5c4178e7d5a368d10af6df82055d95386"}],"stats":{"total":524,"additions":500,"deletions":24},"files":[{"sha":"47a75acd56ae8909cb56553b12487bb81890362c","filename":"common/src/main/java/org/apache/syncope/common/services/ReportService.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -25,6 +25,7 @@\n import javax.ws.rs.DELETE;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n import javax.ws.rs.POST;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n@@ -39,6 +40,8 @@\n import org.apache.syncope.common.reqres.PagedResult;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.types.JobAction;\n+import org.apache.syncope.common.types.JobStatusType;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.common.wrap.ReportletConfClass;\n \n@@ -192,4 +195,25 @@ PagedResult<ReportTO> list(\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     Response exportExecutionResult(@NotNull @PathParam(\"executionId\") Long executionId,\n             @QueryParam(\"format\") ReportExecExportFormat fmt);\n+\n+    /**\n+     * List report jobs of the given type\n+     *\n+     * @param type of report job\n+     * @return List of ReportExecTO\n+     */\n+    @GET\n+    @Path(\"jobs\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ReportExecTO> list(@MatrixParam(\"type\") JobStatusType type);\n+\n+    /**\n+     * Execute a control action on an existing report\n+     *\n+     * @param action\n+     * @param reportId id of report\n+     */\n+    @POST\n+    @Path(\"{reportId}\")\n+    void process(@QueryParam(\"action\") JobAction action, @PathParam(\"reportId\") Long reportId);\n }"},{"sha":"70929dbb65b593b7c6531f307a0bd457ec397c61","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -44,6 +44,8 @@\n import org.apache.syncope.common.to.TaskExecTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.to.SchedTaskTO;\n+import org.apache.syncope.common.types.JobAction;\n+import org.apache.syncope.common.types.JobStatusType;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.wrap.JobClass;\n import org.apache.syncope.common.wrap.PushActionClass;\n@@ -242,4 +244,25 @@ TaskExecTO execute(@NotNull @PathParam(\"taskId\") Long taskId,\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     BulkActionResult bulk(@NotNull BulkAction bulkAction);\n+\n+    /**\n+     * List task jobs of the given type\n+     *\n+     * @param type of task job\n+     * @return List of TaskExecTO\n+     */\n+    @GET\n+    @Path(\"jobs\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<TaskExecTO> list(@MatrixParam(\"type\") JobStatusType type);\n+\n+    /**\n+     * Execute a control action on an existing task\n+     *\n+     * @param action\n+     * @param taskId id of task\n+     */\n+    @POST\n+    @Path(\"{taskId}\")\n+    void process(@QueryParam(\"action\") JobAction action, @PathParam(\"taskId\") Long taskId);\n }"},{"sha":"cbabd2ada57046034b42912c18fb958815c02445","filename":"common/src/main/java/org/apache/syncope/common/types/JobAction.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FJobAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FJobAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FJobAction.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum JobAction {\n+\n+    START,\n+    STOP;\n+\n+}"},{"sha":"ed5f914e641d74e0262ca447b3e90507a1ca1207","filename":"common/src/main/java/org/apache/syncope/common/types/JobStatusType.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FJobStatusType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FJobStatusType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FJobStatusType.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum JobStatusType {\n+\n+    ALL,\n+    RUNNING,\n+    SCHEDULED;\n+\n+}"},{"sha":"79c2cfebbdc5910d1d7f44ae17d61f2e6f4d9197","filename":"core/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -466,6 +466,7 @@ under the License.\n                 <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncActions.class\" todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\" />\n                 <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncRule.class\" todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\" />\n                 <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/rest/data/DoubleValueAttributableTransformer.class\" todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/rest/data\" />\n+                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/quartz/TestSampleJob.class\" todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/quartz\" />\n                 <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\" />\n               </target>\n             </configuration>"},{"sha":"95383113204ba1b06f8bccd769d6b05ddf704442","filename":"core/src/main/java/org/apache/syncope/core/quartz/AbstractTaskJob.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -18,12 +18,15 @@\n  */\n package org.apache.syncope.core.quartz;\n \n+import java.text.SimpleDateFormat;\n import java.util.Date;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.notification.NotificationManager;\n-\n import org.apache.syncope.core.persistence.beans.Task;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n@@ -32,6 +35,7 @@\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n+import org.quartz.UnableToInterruptJobException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -98,6 +102,11 @@ public enum Status {\n      */\n     protected Task task;\n \n+    /**\n+     * The current running thread containing the task to be executed.\n+     */\n+    protected AtomicReference<Thread> runningThread = new AtomicReference<Thread>();\n+\n     /**\n      * Task id setter.\n      *\n@@ -110,6 +119,7 @@ public void setTaskId(final Long taskId) {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n+        this.runningThread.set(Thread.currentThread());\n         task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new JobExecutionException(\"Task \" + taskId + \" not found\");\n@@ -176,4 +186,17 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n     protected boolean hasToBeRegistered(final TaskExec execution) {\n         return false;\n     }\n+\n+    @Override\n+    public void interrupt() throws UnableToInterruptJobException {\n+        Thread thread = this.runningThread.getAndSet(null);\n+        if (thread != null) {\n+            LOG.info(\"Interrupting job time {} \", (new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN, Locale.\n+                    getDefault())).format(new Date()));\n+            thread.interrupt();\n+        } else {\n+            LOG.warn(\"Unable to retrieve the right thread related to the current job execution\");\n+        }\n+    }\n+;\n }"},{"sha":"d1dd83e0afe04c7bcf094e060d193a3d652e338c","filename":"core/src/main/java/org/apache/syncope/core/quartz/TaskJob.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTaskJob.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.core.quartz;\n \n-import org.quartz.Job;\n+import org.quartz.InterruptableJob;\n \n /**\n  * Interface for Quartz jobs bound to a given Task.\n  */\n-public interface TaskJob extends Job {\n+public interface TaskJob extends InterruptableJob {\n \n     void setTaskId(Long taskId);\n }"},{"sha":"47263308491d80ec762be71a1e27c136832c3286","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractJobController.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractJobController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractJobController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractJobController.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.controller;\n+\n+import static org.apache.syncope.core.rest.controller.AbstractController.LOG;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.to.AbstractExecTO;\n+import org.apache.syncope.common.types.JobAction;\n+import org.apache.syncope.common.types.JobStatusType;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobKey;\n+import org.quartz.Scheduler;\n+import org.quartz.SchedulerException;\n+import org.quartz.Trigger;\n+import org.quartz.impl.matchers.GroupMatcher;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n+\n+abstract class AbstractJobController<T extends AbstractBaseBean> extends AbstractTransactionalController<T> {\n+\n+    @Autowired\n+    protected SchedulerFactoryBean scheduler;\n+\n+    protected abstract Long getIdFromJobName(JobKey jobKey);\n+\n+    public <E extends AbstractExecTO> List<E> list(final JobStatusType type, final Class<E> reference) {\n+        List<E> jobExecTOs = new ArrayList<E>();\n+\n+        switch (type) {\n+            case ALL:\n+                try {\n+                    for (String groupName : scheduler.getScheduler().getJobGroupNames()) {\n+                        for (JobKey jobKey : scheduler.getScheduler().getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n+\n+                            Long jobId = getIdFromJobName(jobKey);\n+                            if (jobId != null) {\n+                                List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n+                                if (jobTriggers.size() > 0) {\n+                                    for (Trigger t : jobTriggers) {\n+                                        E jobExecTO = reference.newInstance();\n+                                        jobExecTO.setId(jobId);\n+                                        jobExecTO.\n+                                                setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n+                                        jobExecTO.setStartDate(t.getStartTime());\n+                                        jobExecTOs.add(jobExecTO);\n+                                    }\n+                                } else {\n+                                    E jobExecTO = reference.newInstance();\n+                                    jobExecTO.setId(jobId);\n+                                    jobExecTO.setStatus(\"Not Scheduled\");\n+                                    jobExecTOs.add(jobExecTO);\n+                                }\n+                            }\n+                        }\n+                    }\n+                } catch (SchedulerException ex) {\n+                    LOG.debug(\"Problems during retrieving all scheduled jobs {}\", ex);\n+                } catch (InstantiationException ex) {\n+                    LOG.debug(\"Problems during instantiating {}  {}\", reference, ex);\n+                } catch (IllegalAccessException ex) {\n+                    LOG.debug(\"Problems during accessing {}  {}\", reference, ex);\n+                }\n+                break;\n+            case RUNNING:\n+                try {\n+                    for (JobExecutionContext jec : scheduler.getScheduler().getCurrentlyExecutingJobs()) {\n+                        Long jobId = getIdFromJobName(jec.getJobDetail().getKey());\n+                        if (jobId != null) {\n+                            E jobExecTO = reference.newInstance();\n+                            jobExecTO.setId(jobId);\n+                            jobExecTO.setStatus(scheduler.getScheduler().getTriggerState(jec.getTrigger().getKey()).\n+                                    name());\n+                            jobExecTO.setStartDate(jec.getFireTime());\n+                            jobExecTOs.add(jobExecTO);\n+                        }\n+                    }\n+                } catch (SchedulerException ex) {\n+                    LOG.debug(\"Problems during retrieving all currently executing jobs {}\", ex);\n+                } catch (InstantiationException ex) {\n+                    LOG.debug(\"Problems during instantiating {}  {}\", reference, ex);\n+                } catch (IllegalAccessException ex) {\n+                    LOG.debug(\"Problems during accessing {}  {}\", reference, ex);\n+                }\n+                break;\n+            case SCHEDULED:\n+                try {\n+                    for (String groupName : scheduler.getScheduler().getJobGroupNames()) {\n+                        for (JobKey jobKey : scheduler.getScheduler().getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n+                            Long jobId = getIdFromJobName(jobKey);\n+                            if (jobId != null) {\n+                                List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n+                                for (Trigger t : jobTriggers) {\n+                                    E jobExecTO = reference.newInstance();\n+                                    jobExecTO.setId(jobId);\n+                                    jobExecTO.setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n+                                    jobExecTO.setStartDate(t.getStartTime());\n+                                    jobExecTOs.add(jobExecTO);\n+                                }\n+                            }\n+                        }\n+                    }\n+                } catch (SchedulerException ex) {\n+                    LOG.debug(\"Problems during retrieving all scheduled jobs {}\", ex);\n+                } catch (InstantiationException ex) {\n+                    LOG.debug(\"Problems during instantiating {}  {}\", reference, ex);\n+                } catch (IllegalAccessException ex) {\n+                    LOG.debug(\"Problems during accessing {}  {}\", reference, ex);\n+                }\n+                break;\n+            default:\n+        }\n+        return jobExecTOs;\n+    }\n+\n+    protected void process(JobAction action, String jobName) {\n+\n+        if (jobName != null) {\n+            JobKey jobKey = new JobKey(jobName, Scheduler.DEFAULT_GROUP);\n+            try {\n+                if (scheduler.getScheduler().checkExists(jobKey)) {\n+                    switch (action) {\n+                        case START:\n+                            scheduler.getScheduler().triggerJob(jobKey);\n+                            break;\n+                        case STOP:\n+                            scheduler.getScheduler().interrupt(jobKey);\n+                            break;\n+                        default:\n+                    }\n+                }\n+            } catch (SchedulerException ex) {\n+                LOG.debug(\"Problems during {} operation on job with id {}\", action.toString(), ex);\n+            }\n+        }\n+    }\n+}"},{"sha":"0f8d4bffd47262fb07f94c87405a2a46c4ceff26","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":25,"deletions":5,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -45,6 +45,9 @@\n import org.apache.syncope.common.types.ReportExecStatus;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.to.AbstractExecTO;\n+import org.apache.syncope.common.types.JobAction;\n+import org.apache.syncope.common.types.JobStatusType;\n import org.apache.syncope.core.init.JobInstanceLoader;\n import org.apache.syncope.core.persistence.beans.Report;\n import org.apache.syncope.core.persistence.beans.ReportExec;\n@@ -59,13 +62,12 @@\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class ReportController extends AbstractTransactionalController<ReportTO> {\n+public class ReportController extends AbstractJobController<ReportTO> {\n \n     @Autowired\n     private ReportDAO reportDAO;\n@@ -76,9 +78,6 @@ public class ReportController extends AbstractTransactionalController<ReportTO>\n     @Autowired\n     private JobInstanceLoader jobInstanceLoader;\n \n-    @Autowired\n-    private SchedulerFactoryBean scheduler;\n-\n     @Autowired\n     private ReportDataBinder binder;\n \n@@ -341,4 +340,25 @@ protected ReportTO resolveReference(final Method method, final Object... args)\n \n         throw new UnresolvedReferenceException();\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n+    public <E extends AbstractExecTO> List<E> list(JobStatusType type, Class<E> reference) {\n+        return super.list(type, reference);\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_EXECUTE')\")\n+    public void process(JobAction action, Long reportId) {\n+        Report report = reportDAO.find(reportId);\n+        if (report == null) {\n+            throw new NotFoundException(\"Report \" + reportId);\n+        }\n+        String jobName = JobInstanceLoader.getJobName(report);\n+        process(action, jobName);\n+    }\n+\n+    @Override\n+    protected Long getIdFromJobName(JobKey jobKey) {\n+        return JobInstanceLoader.getReportIdFromJobName(jobKey.getName());\n+    }\n }"},{"sha":"b49306964bc652a76f0a9074a57179146a90cdc1","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -35,6 +35,9 @@\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.to.AbstractExecTO;\n+import org.apache.syncope.common.types.JobAction;\n+import org.apache.syncope.common.types.JobStatusType;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.init.JobInstanceLoader;\n import org.apache.syncope.core.notification.NotificationJob;\n@@ -60,7 +63,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class TaskController extends AbstractTransactionalController<AbstractTaskTO> {\n+public class TaskController extends AbstractJobController<AbstractTaskTO> {\n \n     @Autowired\n     private TaskDAO taskDAO;\n@@ -401,4 +404,25 @@ protected AbstractTaskTO resolveReference(final Method method, final Object... a\n \n         throw new UnresolvedReferenceException();\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasRole('TASK_LIST')\")\n+    public <E extends AbstractExecTO> List<E> list(JobStatusType type, Class<E> reference) {\n+        return super.list(type, reference);\n+    }\n+\n+    @PreAuthorize(\"hasRole('TASK_EXECUTE')\")\n+    public void process(JobAction action, Long taskId) {\n+        Task task = taskDAO.find(taskId);\n+        if (task == null) {\n+            throw new NotFoundException(\"Task \" + taskId);\n+        }\n+        String jobName = JobInstanceLoader.getJobName(task);\n+        process(action, jobName);\n+    }\n+\n+    @Override\n+    protected Long getIdFromJobName(JobKey jobKey) {\n+        return JobInstanceLoader.getTaskIdFromJobName(jobKey.getName());\n+    }\n }"},{"sha":"a4176fb298c4f0a88aabe0591916437bd8ff9560","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"modified","additions":27,"deletions":15,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -29,6 +29,8 @@\n import org.apache.syncope.common.reqres.PagedResult;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.types.JobAction;\n+import org.apache.syncope.common.types.JobStatusType;\n import org.apache.syncope.common.types.RESTHeaders;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.common.util.CollectionWrapper;\n@@ -41,10 +43,10 @@\n \n @Service\n public class ReportServiceImpl extends AbstractServiceImpl implements ReportService {\n-\n+    \n     @Autowired\n     private ReportController controller;\n-\n+    \n     @Override\n     public Response create(final ReportTO reportTO) {\n         ReportTO createdReportTO = controller.create(reportTO);\n@@ -53,55 +55,55 @@ public Response create(final ReportTO reportTO) {\n                 header(RESTHeaders.RESOURCE_ID.toString(), createdReportTO.getId()).\n                 build();\n     }\n-\n+    \n     @Override\n     public void update(final Long reportId, final ReportTO reportTO) {\n         reportTO.setId(reportId);\n         controller.update(reportTO);\n     }\n-\n+    \n     @Override\n     public PagedResult<ReportTO> list() {\n         return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n     }\n-\n+    \n     @Override\n     public PagedResult<ReportTO> list(final String orderBy) {\n         return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n     }\n-\n+    \n     @Override\n     public PagedResult<ReportTO> list(final Integer page, final Integer size) {\n         return list(page, size, null);\n     }\n-\n+    \n     @Override\n     public PagedResult<ReportTO> list(final Integer page, final Integer size, final String orderBy) {\n         List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n         return buildPagedResult(controller.list(page, size, orderByClauses), page, size, controller.count());\n     }\n-\n+    \n     @Override\n     public List<ReportletConfClass> getReportletConfClasses() {\n         return CollectionWrapper.wrap(controller.getReportletConfClasses(), ReportletConfClass.class);\n     }\n-\n+    \n     @Override\n     public ReportTO read(final Long reportId) {\n         return controller.read(reportId);\n     }\n-\n+    \n     @Override\n     public ReportExecTO readExecution(final Long executionId) {\n         return controller.readExecution(executionId);\n     }\n-\n+    \n     @Override\n     public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\n         final ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n         final ReportExec reportExec = controller.getAndCheckReportExec(executionId);\n         StreamingOutput sout = new StreamingOutput() {\n-\n+            \n             @Override\n             public void write(final OutputStream os) throws IOException {\n                 controller.exportExecutionResult(os, reportExec, format);\n@@ -113,19 +115,29 @@ public void write(final OutputStream os) throws IOException {\n                 header(HttpHeaders.CONTENT_DISPOSITION, disposition).\n                 build();\n     }\n-\n+    \n     @Override\n     public ReportExecTO execute(final Long reportId) {\n         return controller.execute(reportId);\n     }\n-\n+    \n     @Override\n     public void delete(final Long reportId) {\n         controller.delete(reportId);\n     }\n-\n+    \n     @Override\n     public void deleteExecution(final Long executionId) {\n         controller.deleteExecution(executionId);\n     }\n+    \n+    @Override\n+    public List<ReportExecTO> list(JobStatusType type) {\n+        return controller.list(type, ReportExecTO.class);\n+    }\n+    \n+    @Override\n+    public void process(JobAction action, Long reportId) {\n+        controller.process(action, reportId);\n+    }\n }"},{"sha":"51b140ac9d3f03628aea7141baf13d61434b31f3","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -34,8 +34,10 @@\n import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.reqres.PagedResult;\n import org.apache.syncope.common.to.PushTaskTO;\n+import org.apache.syncope.common.types.JobStatusType;\n import org.apache.syncope.common.types.RESTHeaders;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.types.JobAction;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.wrap.PushActionClass;\n@@ -155,4 +157,14 @@ public void update(final Long taskId, final AbstractTaskTO taskTO) {\n     public BulkActionResult bulk(final BulkAction bulkAction) {\n         return controller.bulk(bulkAction);\n     }\n+\n+    @Override\n+    public List<TaskExecTO> list(JobStatusType type) {\n+        return controller.list(type, TaskExecTO.class);\n+    }\n+\n+    @Override\n+    public void process(JobAction action, Long taskId) {\n+        controller.process(action, taskId);\n+    }\n }"},{"sha":"f7387f0ff65a20b1bebe94cdeb7eaf0b049fcc39","filename":"core/src/test/java/org/apache/syncope/core/quartz/TestSampleJob.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTestSampleJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTestSampleJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTestSampleJob.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.quartz;\n+\n+import java.util.Date;\n+import org.apache.syncope.core.persistence.beans.SchedTask;\n+import org.apache.syncope.core.persistence.beans.TaskExec;\n+import org.quartz.JobExecutionException;\n+\n+/**\n+ * Sample implementation for execution a scheduled task.\n+ *\n+ * @see SchedTask\n+ */\n+public class TestSampleJob extends AbstractTaskJob {\n+\n+    @Override\n+    protected String doExecute(final boolean dryRun) throws JobExecutionException {\n+        if (!(task instanceof SchedTask)) {\n+            throw new JobExecutionException(\"Task \" + taskId + \" isn't a SchedTask\");\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            LOG.debug(\"TestSampleJob#doExecute round {} time {}\", i, new Date().toString());\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException ex) {\n+                throw new JobExecutionException(\"Job interrupted\");\n+            }\n+        }\n+\n+        final SchedTask schedTask = (SchedTask) this.task;\n+\n+        LOG.info(\"TestSampleJob {}running [SchedTask {}]\", (dryRun\n+                ? \"dry \"\n+                : \"\"), schedTask.getId());\n+\n+        return (dryRun\n+                ? \"DRY \"\n+                : \"\") + \"RUNNING\";\n+    }\n+\n+    @Override\n+    protected boolean hasToBeRegistered(final TaskExec execution) {\n+        return true;\n+    }\n+}"},{"sha":"115f2c65d54b42f41fb38b58e4ec3394bea2e8d4","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/358aef72dca5672361cf1a9a3ac2b8c0c57517a3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=358aef72dca5672361cf1a9a3ac2b8c0c57517a3","patch":"@@ -73,6 +73,8 @@\n import org.apache.syncope.common.types.CipherAlgorithm;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.IntMappingType;\n+import org.apache.syncope.common.types.JobAction;\n+import org.apache.syncope.common.types.JobStatusType;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.MatchingRule;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n@@ -85,6 +87,7 @@\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.wrap.PushActionClass;\n import org.apache.syncope.common.wrap.ResourceName;\n+import org.apache.syncope.core.quartz.TestSampleJob;\n import org.apache.syncope.core.sync.TestSyncActions;\n import org.apache.syncope.core.sync.TestSyncRule;\n import org.apache.syncope.core.sync.impl.DBPasswordSyncActions;\n@@ -1444,4 +1447,61 @@ public void issueSYNCOPE648() {\n         NotificationTaskTO taskTO = findNotificationTaskBySender(\"syncope648@syncope.apache.org\");\n         assertNotNull(taskTO);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE660() {\n+        List<TaskExecTO> list = taskService.list(JobStatusType.ALL);\n+        int old_size = list.size();\n+\n+        list = taskService.list(JobStatusType.SCHEDULED);\n+\n+        SchedTaskTO task = new SchedTaskTO();\n+        task.setName(\"issueSYNCOPE660\");\n+        task.setDescription(\"issueSYNCOPE660 Description\");\n+        task.setJobClassName(TestSampleJob.class.getName());\n+\n+        Response response = taskService.create(task);\n+        SchedTaskTO actual = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n+\n+        list = taskService.list(JobStatusType.ALL);\n+        assertEquals(list.size(), old_size + 1);\n+\n+        taskService.process(JobAction.START, actual.getId());\n+\n+        int i = 0, maxit = 50;\n+\n+        // wait for task exec completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            list = taskService.list(JobStatusType.RUNNING);\n+\n+            assertNotNull(list);\n+            i++;\n+        } while (list.size() < 1 && i < maxit);\n+\n+        assertEquals(list.size(), 1);\n+\n+        taskService.process(JobAction.STOP, actual.getId());\n+\n+        i = 0;\n+\n+        // wait for task exec completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            list = taskService.list(JobStatusType.RUNNING);\n+\n+            assertNotNull(list);\n+            i++;\n+        } while (list.size() >= 1 && i < maxit);\n+\n+        assertEquals(list.size(), 0);\n+    }\n }"}]}