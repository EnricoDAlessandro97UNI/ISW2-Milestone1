{"sha":"d9357309cee12550983d6ec62944df0df33a88e1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ5MzU3MzA5Y2VlMTI1NTA5ODNkNmVjNjI5NDRkZjBkZjMzYTg4ZTE=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-24T16:58:07Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-24T16:58:07Z"},"message":"[SYNCOPE-231]\n* Adding LoggerServiceImpl (was missing in last commit)\n* Simplified getObject helper method from jax-ws.response object\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1438071 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d88f3b32ea660c92cf6403166114aeec25c3dbf0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d88f3b32ea660c92cf6403166114aeec25c3dbf0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d9357309cee12550983d6ec62944df0df33a88e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d9357309cee12550983d6ec62944df0df33a88e1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d9357309cee12550983d6ec62944df0df33a88e1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d9357309cee12550983d6ec62944df0df33a88e1/comments","author":null,"committer":null,"parents":[{"sha":"2074615ba09bf06b7143ff77e19ab10e76132499","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2074615ba09bf06b7143ff77e19ab10e76132499","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2074615ba09bf06b7143ff77e19ab10e76132499"}],"stats":{"total":196,"additions":144,"deletions":52},"files":[{"sha":"8698345ec4bb06a703b7af01aba07b7ae094c4c5","filename":"core/src/main/java/org/apache/syncope/core/services/LoggerServiceImpl.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java?ref=d9357309cee12550983d6ec62944df0df33a88e1","patch":"@@ -0,0 +1,110 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.services;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.BadRequestException;\r\n+import javax.ws.rs.NotFoundException;\r\n+\r\n+import org.apache.syncope.common.services.LoggerService;\r\n+import org.apache.syncope.common.to.LoggerTO;\r\n+import org.apache.syncope.common.types.AuditLoggerName;\r\n+import org.apache.syncope.common.types.LoggerType;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n+import org.apache.syncope.core.rest.controller.LoggerController;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+@Service\r\n+public class LoggerServiceImpl implements LoggerService {\r\n+\r\n+    @Autowired\r\n+    private LoggerController loggerController;\r\n+\r\n+    @Override\r\n+    public List<LoggerTO> list(final LoggerType type) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                return loggerController.listLogs();\r\n+\r\n+            case AUDIT:\r\n+                List<AuditLoggerName> auditLogger = loggerController.listAudits();\r\n+                return CollectionWrapper.unwrapLogger(auditLogger);\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public LoggerTO read(final LoggerType type, final String name) {\r\n+        List<LoggerTO> logger = list(type);\r\n+        for (LoggerTO l : logger) {\r\n+            if (l.getName().equals(name)) {\r\n+                return l;\r\n+            }\r\n+        }\r\n+        throw new NotFoundException();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void update(final LoggerType type, final String name, final LoggerTO logger) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                loggerController.setLogLevel(name, logger.getLevel().getLevel());\r\n+                break;\r\n+\r\n+            case AUDIT:\r\n+                try {\r\n+                    loggerController.enableAudit(AuditLoggerName.fromLoggerName(name));\r\n+                } catch (Exception e) {\r\n+                    throw new BadRequestException(e);\r\n+                }\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final LoggerType type, final String name) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                try {\r\n+                    loggerController.deleteLog(name);\r\n+                } catch (org.apache.syncope.core.util.NotFoundException e) {\r\n+                    throw new NotFoundException(e);\r\n+                }\r\n+                break;\r\n+            case AUDIT:\r\n+                try {\r\n+                    loggerController.disableAudit(AuditLoggerName.fromLoggerName(name));\r\n+                } catch (Exception e) {\r\n+                    throw new BadRequestException(e);\r\n+                }\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n+\r\n+    }\r\n+\r\n+}\r"},{"sha":"43858ca142ff28b73b4be4548a4662eac3c8a9c1","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=d9357309cee12550983d6ec62944df0df33a88e1","patch":"@@ -29,6 +29,7 @@\n \n import javax.sql.DataSource;\n import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n \n import org.apache.cxf.jaxrs.client.Client;\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n@@ -253,22 +254,24 @@ public WebClient createWebClient(String path) {\n     }\n     // END CXF Initialization\n \n-    public <T> T getObject(final URI location, final Class<T> type, final Object serviceProxy) {\n+    public <T> T getObject(final Response response, final Class<T> type, final Object serviceProxy) {\n+        assertNotNull(response);\n+        assertNotNull(response.getLocation());\n         if (!activatedCXF) {\n-            return getObjectSpring(location, type);\n+            return getObjectSpring(response, type);\n         } else {\n-            return resolveObjectCXF(location, type, serviceProxy);\n+            return getObjectCXF(response, type, serviceProxy);\n         }\n     }\n \n-    public <T> T getObjectSpring(final URI location, final Class<T> type) {\n-        assertNotNull(location);\n-        return restTemplate.getForEntity(location, type).getBody();\n+    private <T> T getObjectSpring(final Response response, final Class<T> type) {\n+        return restTemplate.getForEntity(response.getLocation(), type).getBody();\n     }\n \n-    public static <T> T resolveObjectCXF(final URI location, final Class<T> type, final Object serviceProxy) {\n+    private static <T> T getObjectCXF(final Response response, final Class<T> type, final Object serviceProxy) {\n+        String location = response.getLocation().toString();\n         WebClient webClient = WebClient.fromClient(WebClient.client(serviceProxy));\n-        webClient.to(location.toString(), false);\n+        webClient.to(location, false);\n \n         return webClient.get(type);\n     }"},{"sha":"39b3a1b0b5430e9b1d6a9bebcd401d1f8887c127","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=d9357309cee12550983d6ec62944df0df33a88e1","patch":"@@ -91,8 +91,7 @@ public void testUserSchemaAuthorization() {\n         schemaTO.setType(SchemaType.String);\n \n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n-        assertNotNull(response);\n-        SchemaTO newSchemaTO = getObject(response.getLocation(), SchemaTO.class, entitlementService);\n+        SchemaTO newSchemaTO = getObject(response, SchemaTO.class, entitlementService);\n         assertEquals(schemaTO, newSchemaTO);\n \n         // 2. create an user with the role created above (as admin)"},{"sha":"3d53e2123e5c43f9173b0d3390dc41b081cb6434","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=d9357309cee12550983d6ec62944df0df33a88e1","patch":"@@ -50,7 +50,7 @@ public void create() {\n         Response response = configurationService.create(configurationTO);\n         assertNotNull(response);\n         assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        ConfigurationTO newConfigurationTO = getObject(response.getLocation(), ConfigurationTO.class, configurationService);\n+        ConfigurationTO newConfigurationTO = getObject(response, ConfigurationTO.class, configurationService);\n         assertEquals(configurationTO, newConfigurationTO);\n     }\n \n@@ -73,9 +73,9 @@ public void delete() throws UnsupportedEncodingException {\n         }\n \n         Response response = configurationService.create(tokenLengthTO);\n-        assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n         assertNotNull(response);\n-        ConfigurationTO newConfigurationTO = getObject(response.getLocation(), ConfigurationTO.class, configurationService);\n+        assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n+        ConfigurationTO newConfigurationTO = getObject(response, ConfigurationTO.class, configurationService);\n         assertEquals(tokenLengthTO, newConfigurationTO);\n     }\n "},{"sha":"35387568a6aec4025f70c0d4a63310941a17516c","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=d9357309cee12550983d6ec62944df0df33a88e1","patch":"@@ -139,8 +139,7 @@ public void create() {\n         connectorTO.addCapability(ConnectorCapability.TWO_PHASES_UPDATE);\n \n         Response response = connectorService.create(connectorTO);\n-        assertNotNull(response);\n-        ConnInstanceTO actual = getObject(response.getLocation(), ConnInstanceTO.class, connectorService);\n+        ConnInstanceTO actual = getObject(response, ConnInstanceTO.class, connectorService);\n \n         assertNotNull(actual);\n \n@@ -203,7 +202,7 @@ public void update() {\n \n         // set bundle name\n         connectorTO.setBundleName(\"org.connid.bundles.soap\");\n-        \n+\n         connectorTO.setConnRequestTimeout(20);\n \n         // set the connector configuration using PropertyTO\n@@ -275,8 +274,7 @@ public void issueSYNCOPE10() {\n         // Create a new connector instance.\n         // ----------------------------------\n         Response response = connectorService.create(connInstanceTO);\n-        assertNotNull(response);\n-        connInstanceTO = getObject(response.getLocation(), ConnInstanceTO.class, connectorService);\n+        connInstanceTO = getObject(response, ConnInstanceTO.class, connectorService);\n \n         assertNotNull(connInstanceTO);\n         assertTrue(connInstanceTO.getCapabilities().isEmpty());\n@@ -585,8 +583,7 @@ public void issueSYNCOPE112() {\n             assertFalse(connectorService.validate(connectorTO));\n \n             Response response = connectorService.create(connectorTO);\n-            assertNotNull(response);\n-            connectorTO = getObject(response.getLocation(), ConnInstanceTO.class, configurationService);\n+            connectorTO = getObject(response, ConnInstanceTO.class, configurationService);\n             assertNotNull(connectorTO);\n             // ----------------------------------------\n "},{"sha":"01e45f26ff87befbe068207e2e60f46440d44500","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=d9357309cee12550983d6ec62944df0df33a88e1","patch":"@@ -69,8 +69,7 @@ public void create() {\n         schema.setExpression(\"derived_sx + '_' + derived_dx\");\n \n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.DERIVED, schema);\n-        assertNotNull(response);\n-        DerivedSchemaTO actual = getObject(response.getLocation(), DerivedSchemaTO.class, schemaService);\n+        DerivedSchemaTO actual = getObject(response, DerivedSchemaTO.class, schemaService);\n         assertNotNull(actual);\n \n         actual = schemaService.read(AttributableType.USER, SchemaService.SchemaType.DERIVED, actual.getName());"},{"sha":"f644595c32ddda2a9be3410f6015ae734616fa64","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=d9357309cee12550983d6ec62944df0df33a88e1","patch":"@@ -116,8 +116,7 @@ public void create() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n \n         Response response = policyService.create(PolicyType.SYNC, policy);\n-        assertNotNull(response);\n-        SyncPolicyTO policyTO = getObject(response.getLocation(), SyncPolicyTO.class, policyService);\n+        SyncPolicyTO policyTO = getObject(response, SyncPolicyTO.class, policyService);\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.SYNC, policyTO.getType());\n@@ -134,8 +133,7 @@ public void update() {\n \n         // create a new password policy using global password as a template\n         Response response = policyService.create(PolicyType.PASSWORD, policy);\n-        assertNotNull(response);\n-        policy = getObject(response.getLocation(), PasswordPolicyTO.class, policyService);\n+        policy = getObject(response, PasswordPolicyTO.class, policyService);\n \n         // read new password policy\n         policy = policyService.read(PolicyType.PASSWORD, policy.getId());\n@@ -160,8 +158,7 @@ public void update() {\n     public void delete() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n         Response response = policyService.create(PolicyType.SYNC, policy);\n-        assertNotNull(response);\n-        SyncPolicyTO policyTO = getObject(response.getLocation(), SyncPolicyTO.class, policyService);\n+        SyncPolicyTO policyTO = getObject(response, SyncPolicyTO.class, policyService);\n         assertNotNull(policyTO);\n \n         policyService.delete(PolicyType.SYNC, policyTO.getId());"},{"sha":"308b197cbbfa1c3322a4fba9eaa1fa4210240baa","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":5,"deletions":17,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=d9357309cee12550983d6ec62944df0df33a88e1","patch":"@@ -61,17 +61,11 @@ public void create() {\n         schemaTO.setMandatoryCondition(\"false\");\n \n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n-        assertNotNull(response);\n-        assertNotNull(response.getLocation());\n-\n-        SchemaTO newSchemaTO = getObject(response.getLocation(), SchemaTO.class, schemaService);\n+        SchemaTO newSchemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertEquals(schemaTO, newSchemaTO);\n \n         response = schemaService.create(AttributableType.MEMBERSHIP, SchemaService.SchemaType.NORMAL, schemaTO);\n-        assertNotNull(response);\n-        assertNotNull(response.getLocation());\n-\n-        newSchemaTO = getObject(response.getLocation(), SchemaTO.class, schemaService);\n+        newSchemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertEquals(schemaTO, newSchemaTO);\n     }\n \n@@ -197,9 +191,7 @@ public void issue258() {\n         schemaTO.setType(SchemaType.Double);\n \n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n-        assertNotNull(response);\n-        assertNotNull(response.getLocation());\n-        schemaTO = getObject(response.getLocation(), SchemaTO.class, schemaService);\n+        schemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue258@syncope.apache.org\");\n@@ -224,9 +216,7 @@ public void issue259() {\n         schemaTO.setUniqueConstraint(true);\n \n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n-        assertNotNull(response);\n-        assertNotNull(response.getLocation());\n-        schemaTO = getObject(response.getLocation(), SchemaTO.class, schemaService);\n+        schemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue259@syncope.apache.org\");\n@@ -251,9 +241,7 @@ public void issue260() {\n         schemaTO.setUniqueConstraint(true);\n \n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n-        assertNotNull(response);\n-        assertNotNull(response.getLocation());\n-        schemaTO = getObject(response.getLocation(), SchemaTO.class, schemaService);\n+        schemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue260@syncope.apache.org\");"},{"sha":"0f15a9af273c713b6dae17ebc88b261a6bd025e9","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=d9357309cee12550983d6ec62944df0df33a88e1","patch":"@@ -61,7 +61,7 @@ public void create() {\n         Response response = configurationService.create(configurationTO);\n         assertNotNull(response);\n         assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        configurationTO = getObject(response.getLocation(), ConfigurationTO.class, configurationService);\n+        configurationTO = getObject(response, ConfigurationTO.class, configurationService);\n         assertNotNull(configurationTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"selfcreate@syncope.apache.org\");\n@@ -82,7 +82,7 @@ public void create() {\n         response = configurationService.create(configurationTO);\n         assertNotNull(response);\n         assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        configurationTO = getObject(response.getLocation(), ConfigurationTO.class, configurationService);\n+        configurationTO = getObject(response, ConfigurationTO.class, configurationService);\n         assertNotNull(configurationTO);\n \n         // 4. as anonymous, request user create works"},{"sha":"9871be6bef92a89c36bfb29d4328345de1dcf683","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=d9357309cee12550983d6ec62944df0df33a88e1","patch":"@@ -121,6 +121,7 @@ public void selfRead() {\n         assertEquals(\"user1\", userTO.getUsername());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void createUserWithNoPropagation() {\n         // get task list\n@@ -186,8 +187,7 @@ public void issue172() {\n         } finally {\n             for (PasswordPolicyTO policyTO : policies) {\n                 Response response = policyService.create(PolicyType.GLOBAL_PASSWORD, policyTO);\n-                assertNotNull(response);\n-                PolicyTO cPolicyTO = getObject(response.getLocation(), PasswordPolicyTO.class, policyService);\n+                PolicyTO cPolicyTO = getObject(response, PasswordPolicyTO.class, policyService);\n                 assertNotNull(cPolicyTO);\n             }\n         }\n@@ -404,6 +404,7 @@ public void createWithException() {\n         userService.create(newUserTO);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void create() {\n         // get task list"},{"sha":"71c9b96d3d665c5595f6282dbf49f8a10a032845","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9357309cee12550983d6ec62944df0df33a88e1/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=d9357309cee12550983d6ec62944df0df33a88e1","patch":"@@ -65,9 +65,7 @@ public void create() {\n         schema.setName(\"virtual\");\n \n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, schema);\n-        assertNotNull(response);\n-        assertNotNull(response.getLocation());\n-        VirtualSchemaTO actual = getObject(response.getLocation(), VirtualSchemaTO.class, schemaService);\n+        VirtualSchemaTO actual = getObject(response, VirtualSchemaTO.class, schemaService);\n         assertNotNull(actual);\n \n         actual = schemaService.read(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, actual.getName());"}]}