{"sha":"90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkwZDljNDZhOGRkMGRhNmY2Yjg3NmUxNThjZWMzN2I4YjRkZmQ5YTk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-14T14:03:36Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-14T14:03:36Z"},"message":"[SYNCOPE-20] First elements and mechanism in place: now it's time to disseminate code with audit statements\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1300549 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1a69680d5f6a7ae050647a7373a64b8dc59b689e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1a69680d5f6a7ae050647a7373a64b8dc59b689e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9ba31b2eefd37f1055020ea38cd58551a5303990","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9ba31b2eefd37f1055020ea38cd58551a5303990","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9ba31b2eefd37f1055020ea38cd58551a5303990"}],"stats":{"total":2448,"additions":1537,"deletions":911},"files":[{"sha":"9e21b4cc59f036a969612371d58b2811194984f1","filename":"client/src/main/java/org/syncope/client/to/LoggerTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLoggerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLoggerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLoggerTO.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -19,21 +19,21 @@\n package org.syncope.client.to;\n \n import org.syncope.client.AbstractBaseBean;\n-import org.syncope.types.LoggerLevel;\n+import org.syncope.types.SyncopeLoggerLevel;\n \n public class LoggerTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -7794833835668648505L;\n \n     private String name;\n \n-    private LoggerLevel level;\n+    private SyncopeLoggerLevel level;\n \n-    public LoggerLevel getLevel() {\n+    public SyncopeLoggerLevel getLevel() {\n         return level;\n     }\n \n-    public void setLevel(final LoggerLevel level) {\n+    public void setLevel(final SyncopeLoggerLevel level) {\n         this.level = level;\n     }\n "},{"sha":"8df992775d3401e9aed1c19eeceb1d3ecdf88747","filename":"client/src/main/java/org/syncope/types/AuditElements.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAuditElements.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.syncope.types;\n+\n+import java.util.EnumSet;\n+\n+public class AuditElements {\n+\n+    public enum Category {\n+\n+        authentication,\n+        configuration,\n+        connector,\n+        logger,\n+        notification,\n+        policy,\n+        report,\n+        resource,\n+        role,\n+        schema,\n+        task,\n+        user,\n+        userRequest,\n+        workflow\n+\n+    }\n+\n+    public enum Result {\n+\n+        success,\n+        failure\n+\n+    }\n+\n+    public static EnumSet<? extends Enum> getSubCategories(final Category category) {\n+        EnumSet<? extends Enum> result;\n+        switch (category) {\n+            case authentication:\n+                result = EnumSet.allOf(AuthenticationSubCategory.class);\n+                break;\n+\n+            default:\n+                result = null;\n+        }\n+\n+        return result;\n+    }\n+\n+    public enum AuthenticationSubCategory {\n+\n+        login,\n+        getEntitlements\n+\n+    }\n+}"},{"sha":"5abaef7d9adc29691a70e6db7e5bcfe914667620","filename":"client/src/main/java/org/syncope/types/IntMappingType.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FIntMappingType.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -96,14 +96,15 @@ public static boolean contains(final AttributableType attributableType, final St\n     /**\n      * User attribute types.\n      */\n-    enum UserMappingType {\n+    private enum UserMappingType {\n \n         UserSchema,\n         UserDerivedSchema,\n         UserVirtualSchema,\n         SyncopeUserId,\n         Password,\n         Username;\n+\n     }\n \n     /**\n@@ -114,6 +115,7 @@ private enum RoleMappingType {\n         RoleSchema,\n         RoleDerivedSchema,\n         RoleVirtualSchema;\n+\n     }\n \n     /**\n@@ -124,5 +126,6 @@ private enum MembershipMappingType {\n         MembershipSchema,\n         MembershipDerivedSchema,\n         MembershipVirtualSchema;\n+\n     }\n }"},{"sha":"2099ab02f9822cfc80205d40b62a5b8d7d0f32a4","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -29,6 +29,9 @@ public enum SyncopeClientExceptionType {\n     GenericPersistence(\n     \"Syncope.GenericPersistence\",\n     \"Syncope.GenericPersistence.cause\"),\n+    InvalidLogger(\n+    \"Syncope.InvalidLogger\",\n+    \"Syncope.InvalidLogger.message\"),\n     InvalidConnInstance(\n     \"Syncope.InvalidConnInstance\",\n     \"Syncope.InvalidConnInstance.message\"),"},{"sha":"91d0fe44afa460215c039e32f48113e0e178e119","filename":"client/src/main/java/org/syncope/types/SyncopeLoggerLevel.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeLoggerLevel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeLoggerLevel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeLoggerLevel.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -20,7 +20,7 @@\n \n import ch.qos.logback.classic.Level;\n \n-public enum LoggerLevel {\n+public enum SyncopeLoggerLevel {\n \n     OFF(Level.OFF),\n     ERROR(Level.ERROR),\n@@ -32,16 +32,16 @@ public enum LoggerLevel {\n \n     private Level level;\n \n-    LoggerLevel(final Level level) {\n+    SyncopeLoggerLevel(final Level level) {\n         this.level = level;\n     }\n \n     public Level getLevel() {\n         return level;\n     }\n \n-    public static LoggerLevel fromLevel(final Level level) {\n-        LoggerLevel result;\n+    public static SyncopeLoggerLevel fromLevel(final Level level) {\n+        SyncopeLoggerLevel result;\n         if (level.equals(Level.OFF)) {\n             result = OFF;\n         } else if (level.equals(Level.ERROR)) {","previous_filename":"client/src/main/java/org/syncope/types/LoggerLevel.java"},{"sha":"b96690f7365d484eb1ff615441ab43186c4b4ecf","filename":"client/src/main/java/org/syncope/types/SyncopeLoggerType.java","status":"renamed","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeLoggerType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeLoggerType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeLoggerType.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -16,20 +16,20 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.syncope.core.init;\n+package org.syncope.types;\n \n-import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n-import org.springframework.context.ConfigurableApplicationContext;\n-import org.syncope.core.util.ApplicationContextManager;\n+public enum SyncopeLoggerType {\n \n-public abstract class AbstractLoader {\n+    LOG(\"\"),\n+    AUDIT(\"syncope.audit\");\n \n-    protected DefaultListableBeanFactory getBeanFactory() {\n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n+    private String prefix;\n \n-        return (DefaultListableBeanFactory) context.getBeanFactory();\n+    SyncopeLoggerType(final String prefix) {\n+        this.prefix = prefix;\n     }\n \n-    public abstract void load();\n+    public String getPrefix() {\n+        return prefix;\n+    }\n }","previous_filename":"core/src/main/java/org/syncope/core/init/AbstractLoader.java"},{"sha":"ac7527226e91c5cf2f0de4428d720cd063baf747","filename":"client/src/main/java/org/syncope/types/UserRequestType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FUserRequestType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FUserRequestType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FUserRequestType.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -24,4 +24,4 @@ public enum UserRequestType {\n     UPDATE,\n     DELETE\n \n-}\n\\ No newline at end of file\n+}"},{"sha":"61a41a768eed278864b78f81a0374f3cd253cef0","filename":"console/src/main/java/org/syncope/console/pages/Configuration.java","status":"modified","additions":123,"deletions":220,"changes":343,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -76,8 +76,8 @@\n import org.syncope.console.rest.WorkflowRestClient;\n import org.syncope.console.wicket.markup.html.form.ActionLink;\n import org.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n-import org.syncope.types.LoggerLevel;\n import org.syncope.types.PolicyType;\n+import org.syncope.types.SyncopeLoggerLevel;\n \n /**\n  * Configurations WebPage.\n@@ -146,26 +146,21 @@ public Configuration(final PageParameters parameters) {\n         // Workflow definition stuff\n         final WorkflowDefinitionTO workflowDef = wfRestClient.getDefinition();\n \n-        WebMarkupContainer workflowDefContainer =\n-                new WebMarkupContainer(\"workflowDefContainer\");\n+        WebMarkupContainer workflowDefContainer = new WebMarkupContainer(\"workflowDefContainer\");\n \n-        Form wfForm = new Form(\"workflowDefForm\",\n-                new CompoundPropertyModel(workflowDef));\n+        Form wfForm = new Form(\"workflowDefForm\", new CompoundPropertyModel(workflowDef));\n \n         TextArea<WorkflowDefinitionTO> workflowDefArea =\n                 new TextArea<WorkflowDefinitionTO>(\"workflowDefArea\",\n-                new PropertyModel<WorkflowDefinitionTO>(\n-                workflowDef, \"xmlDefinition\"));\n+                new PropertyModel<WorkflowDefinitionTO>(workflowDef, \"xmlDefinition\"));\n         wfForm.add(workflowDefArea);\n \n-        IndicatingAjaxButton submit = new IndicatingAjaxButton(\n-                \"apply\", new Model<String>(getString(\"submit\"))) {\n+        IndicatingAjaxButton submit = new IndicatingAjaxButton(\"apply\", new Model<String>(getString(\"submit\"))) {\n \n             private static final long serialVersionUID = -958724007591692537L;\n \n             @Override\n-            protected void onSubmit(final AjaxRequestTarget target,\n-                    final Form form) {\n+            protected void onSubmit(final AjaxRequestTarget target, final Form form) {\n \n                 try {\n                     wfRestClient.updateDefinition(workflowDef);\n@@ -177,74 +172,54 @@ protected void onSubmit(final AjaxRequestTarget target,\n             }\n \n             @Override\n-            protected void onError(final AjaxRequestTarget target,\n-                    final Form form) {\n+            protected void onError(final AjaxRequestTarget target, final Form form) {\n \n                 target.add(feedbackPanel);\n             }\n         };\n \n-        MetaDataRoleAuthorizationStrategy.authorize(\n-                submit, ENABLE, xmlRolesReader.getAllAllowedRoles(\n-                \"Configuration\", \"workflowDefUpdate\"));\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE,\n+                xmlRolesReader.getAllAllowedRoles(\"Configuration\", \"workflowDefUpdate\"));\n         wfForm.add(submit);\n \n         workflowDefContainer.add(wfForm);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(\n-                workflowDefContainer, ENABLE, xmlRolesReader.getAllAllowedRoles(\n-                \"Configuration\", \"workflowDefRead\"));\n+        MetaDataRoleAuthorizationStrategy.authorize(workflowDefContainer, ENABLE,\n+                xmlRolesReader.getAllAllowedRoles(\"Configuration\", \"workflowDefRead\"));\n         add(workflowDefContainer);\n \n         // Logger stuff\n-        PropertyListView coreLoggerList =\n-                new LoggerPropertyList(null,\n-                \"corelogger\",\n-                confRestClient.getLoggers());\n-        WebMarkupContainer coreLoggerContainer =\n-                new WebMarkupContainer(\"coreLoggerContainer\");\n+        PropertyListView coreLoggerList = new LoggerPropertyList(null, \"corelogger\", confRestClient.listLogs());\n+        WebMarkupContainer coreLoggerContainer = new WebMarkupContainer(\"coreLoggerContainer\");\n         coreLoggerContainer.add(coreLoggerList);\n         coreLoggerContainer.setOutputMarkupId(true);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(\n-                coreLoggerContainer, ENABLE,\n-                xmlRolesReader.getAllAllowedRoles(\n-                \"Configuration\", \"loggerList\"));\n+        MetaDataRoleAuthorizationStrategy.authorize(coreLoggerContainer, ENABLE,\n+                xmlRolesReader.getAllAllowedRoles(\"Configuration\", \"logList\"));\n         add(coreLoggerContainer);\n \n-        ConsoleLoggerController consoleLoggerController =\n-                new ConsoleLoggerController();\n-        PropertyListView consoleLoggerList =\n-                new LoggerPropertyList(\n-                consoleLoggerController,\n-                \"consolelogger\",\n+        ConsoleLoggerController consoleLoggerController = new ConsoleLoggerController();\n+        PropertyListView consoleLoggerList = new LoggerPropertyList(consoleLoggerController, \"consolelogger\",\n                 consoleLoggerController.getLoggers());\n-        WebMarkupContainer consoleLoggerContainer =\n-                new WebMarkupContainer(\"consoleLoggerContainer\");\n+        WebMarkupContainer consoleLoggerContainer = new WebMarkupContainer(\"consoleLoggerContainer\");\n         consoleLoggerContainer.add(consoleLoggerList);\n         consoleLoggerContainer.setOutputMarkupId(true);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(\n-                consoleLoggerContainer, ENABLE,\n-                xmlRolesReader.getAllAllowedRoles(\n-                \"Configuration\", \"loggerList\"));\n+        MetaDataRoleAuthorizationStrategy.authorize(consoleLoggerContainer, ENABLE,\n+                xmlRolesReader.getAllAllowedRoles(\"Configuration\", \"logList\"));\n         add(consoleLoggerContainer);\n     }\n \n     private void setupSyncopeConf() {\n-        confPaginatorRows = prefMan.getPaginatorRows(getRequest(),\n-                Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);\n+        confPaginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);\n \n         List<IColumn> confColumns = new ArrayList<IColumn>();\n \n-        confColumns.add(new PropertyColumn(new ResourceModel(\"key\"),\n-                \"key\", \"key\"));\n+        confColumns.add(new PropertyColumn(new ResourceModel(\"key\"), \"key\", \"key\"));\n \n-        confColumns.add(new PropertyColumn(new ResourceModel(\"value\"),\n-                \"value\", \"value\"));\n+        confColumns.add(new PropertyColumn(new ResourceModel(\"value\"), \"value\", \"value\"));\n \n-        confColumns.add(new AbstractColumn<ConfigurationTO>(\n-                new ResourceModel(\"actions\", \"\")) {\n+        confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(\"actions\", \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n@@ -254,54 +229,44 @@ public String getCssClass() {\n             }\n \n             @Override\n-            public void populateItem(\n-                    final Item<ICellPopulator<ConfigurationTO>> cellItem,\n-                    final String componentId,\n-                    final IModel<ConfigurationTO> model) {\n+            public void populateItem(final Item<ICellPopulator<ConfigurationTO>> cellItem,\n+                    final String componentId, final IModel<ConfigurationTO> model) {\n \n                 final ConfigurationTO configurationTO = model.getObject();\n \n-                final ActionLinksPanel panel =\n-                        new ActionLinksPanel(componentId, model);\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model);\n \n                 panel.add(new ActionLink() {\n \n-                    private static final long serialVersionUID =\n-                            -3722207913631435501L;\n+                    private static final long serialVersionUID = -3722207913631435501L;\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n \n-                        editConfigWin.setPageCreator(\n-                                new ModalWindow.PageCreator() {\n+                        editConfigWin.setPageCreator(new ModalWindow.PageCreator() {\n \n-                                    private static final long serialVersionUID =\n-                                            -7834632442532690940L;\n+                            private static final long serialVersionUID =\n+                                    -7834632442532690940L;\n \n-                                    @Override\n-                                    public Page createPage() {\n-                                        return new ConfigurationModalPage(\n-                                                Configuration.this.\n-                                                getPageReference(),\n-                                                editConfigWin,\n-                                                configurationTO, false);\n-                                    }\n-                                });\n+                            @Override\n+                            public Page createPage() {\n+                                return new ConfigurationModalPage(Configuration.this.getPageReference(),\n+                                        editConfigWin, configurationTO, false);\n+                            }\n+                        });\n \n                         editConfigWin.show(target);\n                     }\n                 }, ActionLink.ActionType.EDIT, \"Configuration\", \"read\");\n \n                 panel.add(new ActionLink() {\n \n-                    private static final long serialVersionUID =\n-                            -3722207913631435501L;\n+                    private static final long serialVersionUID = -3722207913631435501L;\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            confRestClient.deleteConfiguration(\n-                                    configurationTO.getKey());\n+                            confRestClient.deleteConfiguration(configurationTO.getKey());\n                         } catch (SyncopeClientCompositeErrorException e) {\n                             LOG.error(\"While deleting a conf key\", e);\n                             error(e.getMessage());\n@@ -319,8 +284,7 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxFallbackDefaultDataTable confTable =\n-                new AjaxFallbackDefaultDataTable(\"syncopeconf\", confColumns,\n+        final AjaxFallbackDefaultDataTable confTable = new AjaxFallbackDefaultDataTable(\"syncopeconf\", confColumns,\n                 new SyncopeConfProvider(), confPaginatorRows);\n \n         confContainer = new WebMarkupContainer(\"confContainer\");\n@@ -352,13 +316,11 @@ public void onClick(final AjaxRequestTarget target) {\n \n                 createConfigWin.setPageCreator(new ModalWindow.PageCreator() {\n \n-                    private static final long serialVersionUID =\n-                            -7834632442532690940L;\n+                    private static final long serialVersionUID = -7834632442532690940L;\n \n                     @Override\n                     public Page createPage() {\n-                        return new ConfigurationModalPage(\n-                                Configuration.this.getPageReference(),\n+                        return new ConfigurationModalPage(Configuration.this.getPageReference(),\n                                 createConfigWin, new ConfigurationTO(), true);\n                     }\n                 });\n@@ -367,8 +329,7 @@ public Page createPage() {\n             }\n         };\n \n-        MetaDataRoleAuthorizationStrategy.authorize(\n-                createConfigurationLink, ENABLE,\n+        MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink, ENABLE,\n                 xmlRolesReader.getAllAllowedRoles(\"Configuration\", \"create\"));\n         add(createConfigurationLink);\n \n@@ -382,10 +343,8 @@ public void onClick() {\n                     HttpResourceStream stream = new HttpResourceStream(\n                             baseURL + \"configuration/dbexport\", restTemplate);\n \n-                    ResourceStreamRequestHandler rsrh =\n-                            new ResourceStreamRequestHandler(stream);\n-                    rsrh.setFileName(stream.getFilename() == null\n-                            ? \"content.xml\" : stream.getFilename());\n+                    ResourceStreamRequestHandler rsrh = new ResourceStreamRequestHandler(stream);\n+                    rsrh.setFileName(stream.getFilename() == null ? \"content.xml\" : stream.getFilename());\n                     rsrh.setContentDisposition(ContentDisposition.ATTACHMENT);\n \n                     getRequestCycle().scheduleRequestHandlerAfterCurrent(rsrh);\n@@ -395,26 +354,22 @@ public void onClick() {\n             }\n         };\n \n-        MetaDataRoleAuthorizationStrategy.authorize(\n-                dbExportLink, ENABLE,\n+        MetaDataRoleAuthorizationStrategy.authorize(dbExportLink, ENABLE,\n                 xmlRolesReader.getAllAllowedRoles(\"Configuration\", \"read\"));\n         add(dbExportLink);\n \n         Form confPaginatorForm = new Form(\"confPaginatorForm\");\n \n         final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\",\n-                new PropertyModel(this, \"confPaginatorRows\"),\n-                prefMan.getPaginatorChoices());\n+                new PropertyModel(this, \"confPaginatorRows\"), prefMan.getPaginatorChoices());\n \n         rowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                prefMan.set(getRequest(),\n-                        getResponse(),\n-                        Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,\n+                prefMan.set(getRequest(), getResponse(), Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,\n                         String.valueOf(confPaginatorRows));\n                 confTable.setItemsPerPage(confPaginatorRows);\n \n@@ -431,19 +386,13 @@ private void setupNotification() {\n                 Constants.PREF_NOTIFICATION_PAGINATOR_ROWS);\n \n         List<IColumn> notificationCols = new ArrayList<IColumn>();\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"id\"),\n-                \"id\", \"id\"));\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"events\"),\n-                \"events\", \"events\"));\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"subject\"),\n-                \"subject\", \"subject\"));\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"template\"),\n-                \"template\", \"template\"));\n-        notificationCols.add(new PropertyColumn(new ResourceModel(\"traceLevel\"),\n-                \"traceLevel\", \"traceLevel\"));\n-\n-        notificationCols.add(new AbstractColumn<NotificationTO>(\n-                new ResourceModel(\"actions\", \"\")) {\n+        notificationCols.add(new PropertyColumn(new ResourceModel(\"id\"), \"id\", \"id\"));\n+        notificationCols.add(new PropertyColumn(new ResourceModel(\"events\"), \"events\", \"events\"));\n+        notificationCols.add(new PropertyColumn(new ResourceModel(\"subject\"), \"subject\", \"subject\"));\n+        notificationCols.add(new PropertyColumn(new ResourceModel(\"template\"), \"template\", \"template\"));\n+        notificationCols.add(new PropertyColumn(new ResourceModel(\"traceLevel\"), \"traceLevel\", \"traceLevel\"));\n+\n+        notificationCols.add(new AbstractColumn<NotificationTO>(new ResourceModel(\"actions\", \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n@@ -453,54 +402,44 @@ public String getCssClass() {\n             }\n \n             @Override\n-            public void populateItem(\n-                    final Item<ICellPopulator<NotificationTO>> cellItem,\n-                    final String componentId,\n+            public void populateItem(final Item<ICellPopulator<NotificationTO>> cellItem, final String componentId,\n                     final IModel<NotificationTO> model) {\n \n                 final NotificationTO notificationTO = model.getObject();\n \n-                final ActionLinksPanel panel =\n-                        new ActionLinksPanel(componentId, model);\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model);\n \n                 panel.add(new ActionLink() {\n \n-                    private static final long serialVersionUID =\n-                            -3722207913631435501L;\n+                    private static final long serialVersionUID = -3722207913631435501L;\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n \n-                        editNotificationWin.setPageCreator(\n-                                new ModalWindow.PageCreator() {\n+                        editNotificationWin.setPageCreator(new ModalWindow.PageCreator() {\n \n-                                    private static final long serialVersionUID =\n-                                            -7834632442532690940L;\n+                            private static final long serialVersionUID =\n+                                    -7834632442532690940L;\n \n-                                    @Override\n-                                    public Page createPage() {\n-                                        return new NotificationModalPage(\n-                                                Configuration.this.\n-                                                getPageReference(),\n-                                                editNotificationWin,\n-                                                notificationTO, false);\n-                                    }\n-                                });\n+                            @Override\n+                            public Page createPage() {\n+                                return new NotificationModalPage(Configuration.this.getPageReference(),\n+                                        editNotificationWin, notificationTO, false);\n+                            }\n+                        });\n \n                         editNotificationWin.show(target);\n                     }\n                 }, ActionLink.ActionType.EDIT, \"Notification\", \"read\");\n \n                 panel.add(new ActionLink() {\n \n-                    private static final long serialVersionUID =\n-                            -3722207913631435501L;\n+                    private static final long serialVersionUID = -3722207913631435501L;\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            notificationRestClient.deleteNotification(\n-                                    notificationTO.getId());\n+                            notificationRestClient.deleteNotification(notificationTO.getId());\n                         } catch (SyncopeClientCompositeErrorException e) {\n                             LOG.error(\"While deleting a notification\", e);\n                             error(e.getMessage());\n@@ -518,10 +457,8 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        final AjaxFallbackDefaultDataTable notificationTable =\n-                new AjaxFallbackDefaultDataTable(\"notificationTable\",\n-                notificationCols,\n-                new NotificationProvider(), notificationPaginatorRows);\n+        final AjaxFallbackDefaultDataTable notificationTable = new AjaxFallbackDefaultDataTable(\"notificationTable\",\n+                notificationCols, new NotificationProvider(), notificationPaginatorRows);\n \n         notificationContainer = new WebMarkupContainer(\"notificationContainer\");\n         notificationContainer.add(notificationTable);\n@@ -542,37 +479,29 @@ public void onClick(final AjaxRequestTarget target) {\n         setWindowClosedCallback(createNotificationWin, notificationContainer);\n         setWindowClosedCallback(editNotificationWin, notificationContainer);\n \n-        AjaxLink createNotificationLink =\n-                new AjaxLink(\"createNotificationLink\") {\n-\n-                    private static final long serialVersionUID =\n-                            -7978723352517770644L;\n+        AjaxLink createNotificationLink = new AjaxLink(\"createNotificationLink\") {\n \n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target) {\n+            private static final long serialVersionUID = -7978723352517770644L;\n \n-                        createNotificationWin.setPageCreator(\n-                                new ModalWindow.PageCreator() {\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n \n-                                    private static final long serialVersionUID =\n-                                            -7834632442532690940L;\n+                createNotificationWin.setPageCreator(new ModalWindow.PageCreator() {\n \n-                                    @Override\n-                                    public Page createPage() {\n-                                        return new NotificationModalPage(\n-                                                Configuration.this.\n-                                                getPageReference(),\n-                                                createNotificationWin,\n-                                                new NotificationTO(), true);\n-                                    }\n-                                });\n+                    private static final long serialVersionUID = -7834632442532690940L;\n \n-                        createNotificationWin.show(target);\n+                    @Override\n+                    public Page createPage() {\n+                        return new NotificationModalPage(Configuration.this.getPageReference(),\n+                                createNotificationWin, new NotificationTO(), true);\n                     }\n-                };\n+                });\n \n-        MetaDataRoleAuthorizationStrategy.authorize(\n-                createNotificationLink, ENABLE,\n+                createNotificationWin.show(target);\n+            }\n+        };\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(createNotificationLink, ENABLE,\n                 xmlRolesReader.getAllAllowedRoles(\"Notification\", \"create\"));\n         add(createNotificationLink);\n \n@@ -588,9 +517,7 @@ public Page createPage() {\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                prefMan.set(getRequest(),\n-                        getResponse(),\n-                        Constants.PREF_NOTIFICATION_PAGINATOR_ROWS,\n+                prefMan.set(getRequest(), getResponse(), Constants.PREF_NOTIFICATION_PAGINATOR_ROWS,\n                         String.valueOf(notificationPaginatorRows));\n                 notificationTable.setItemsPerPage(notificationPaginatorRows);\n \n@@ -612,14 +539,11 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         public SyncopeConfProvider() {\n             //Default sorting\n             setSort(\"key\", SortOrder.ASCENDING);\n-            comparator =\n-                    new SortableDataProviderComparator<ConfigurationTO>(this);\n+            comparator = new SortableDataProviderComparator<ConfigurationTO>(this);\n         }\n \n         @Override\n-        public Iterator<ConfigurationTO> iterator(final int first,\n-                final int count) {\n-\n+        public Iterator<ConfigurationTO> iterator(final int first, final int count) {\n             List<ConfigurationTO> list = confRestClient.getAllConfigurations();\n \n             Collections.sort(list, comparator);\n@@ -633,13 +557,11 @@ public int size() {\n         }\n \n         @Override\n-        public IModel<ConfigurationTO> model(\n-                final ConfigurationTO configuration) {\n+        public IModel<ConfigurationTO> model(final ConfigurationTO configuration) {\n \n             return new AbstractReadOnlyModel<ConfigurationTO>() {\n \n-                private static final long serialVersionUID =\n-                        774694801558497248L;\n+                private static final long serialVersionUID = 774694801558497248L;\n \n                 @Override\n                 public ConfigurationTO getObject() {\n@@ -659,16 +581,12 @@ public ConfigurationTO getObject() {\n         public NotificationProvider() {\n             //Default sorting\n             setSort(\"id\", SortOrder.ASCENDING);\n-            comparator =\n-                    new SortableDataProviderComparator<NotificationTO>(this);\n+            comparator = new SortableDataProviderComparator<NotificationTO>(this);\n         }\n \n         @Override\n-        public Iterator<NotificationTO> iterator(final int first,\n-                final int count) {\n-\n-            List<NotificationTO> list =\n-                    notificationRestClient.getAllNotifications();\n+        public Iterator<NotificationTO> iterator(final int first, final int count) {\n+            List<NotificationTO> list = notificationRestClient.getAllNotifications();\n \n             Collections.sort(list, comparator);\n \n@@ -681,13 +599,11 @@ public int size() {\n         }\n \n         @Override\n-        public IModel<NotificationTO> model(\n-                final NotificationTO notification) {\n+        public IModel<NotificationTO> model(final NotificationTO notification) {\n \n             return new AbstractReadOnlyModel<NotificationTO>() {\n \n-                private static final long serialVersionUID =\n-                        774694801558497248L;\n+                private static final long serialVersionUID = 774694801558497248L;\n \n                 @Override\n                 public NotificationTO getObject() {\n@@ -703,8 +619,7 @@ private class LoggerPropertyList extends PropertyListView<LoggerTO> {\n \n         private final ConsoleLoggerController consoleLoggerController;\n \n-        public LoggerPropertyList(\n-                final ConsoleLoggerController consoleLoggerController,\n+        public LoggerPropertyList(final ConsoleLoggerController consoleLoggerController,\n                 final String id, final List<? extends LoggerTO> list) {\n \n             super(id, list);\n@@ -715,59 +630,53 @@ public LoggerPropertyList(\n         protected void populateItem(final ListItem<LoggerTO> item) {\n             item.add(new Label(\"name\"));\n \n-            DropDownChoice<LoggerLevel> level =\n-                    new DropDownChoice<LoggerLevel>(\"level\");\n-            level.setModel(new IModel<LoggerLevel>() {\n+            DropDownChoice<SyncopeLoggerLevel> level = new DropDownChoice<SyncopeLoggerLevel>(\"level\");\n+            level.setModel(new IModel<SyncopeLoggerLevel>() {\n \n-                private static final long serialVersionUID =\n-                        -2350428186089596562L;\n+                private static final long serialVersionUID = -2350428186089596562L;\n \n                 @Override\n-                public LoggerLevel getObject() {\n+                public SyncopeLoggerLevel getObject() {\n                     return item.getModelObject().getLevel();\n                 }\n \n                 @Override\n-                public void setObject(final LoggerLevel object) {\n+                public void setObject(final SyncopeLoggerLevel object) {\n                     item.getModelObject().setLevel(object);\n                 }\n \n                 @Override\n                 public void detach() {\n                 }\n             });\n-            level.setChoices(Arrays.asList(LoggerLevel.values()));\n+            level.setChoices(Arrays.asList(SyncopeLoggerLevel.values()));\n             level.setOutputMarkupId(true);\n-            level.add(new AjaxFormComponentUpdatingBehavior(\n-                    \"onchange\") {\n+            level.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n-                private static final long serialVersionUID =\n-                        -1107858522700306810L;\n+                private static final long serialVersionUID = -1107858522700306810L;\n \n                 @Override\n                 protected void onUpdate(final AjaxRequestTarget target) {\n-                    boolean result = getId().equals(\"corelogger\")\n-                            ? confRestClient.setLoggerLevel(\n-                            item.getModelObject().getName(),\n-                            item.getModelObject().getLevel())\n-                            : consoleLoggerController.setLoggerLevel(\n-                            item.getModelObject().getName(),\n-                            item.getModelObject().getLevel());\n-\n-                    if (result) {\n+                    try {\n+                        if (getId().equals(\"corelogger\")) {\n+                            confRestClient.setLogLevel(item.getModelObject().getName(),\n+                                    item.getModelObject().getLevel());\n+                        } else {\n+                            consoleLoggerController.setLogLevel(item.getModelObject().getName(),\n+                                    item.getModelObject().getLevel());\n+                        }\n+\n                         info(getString(\"operation_succeded\"));\n-                    } else {\n+                    } catch (SyncopeClientCompositeErrorException e) {\n                         info(getString(\"operation_error\"));\n-\n                     }\n \n                     target.add(feedbackPanel);\n                 }\n             });\n \n             MetaDataRoleAuthorizationStrategy.authorize(level, ENABLE,\n-                    xmlRolesReader.getAllAllowedRoles(\n-                    \"Configuration\", \"loggerSetLevel\"));\n+                    xmlRolesReader.getAllAllowedRoles(\"Configuration\", \"logSetLevel\"));\n \n             item.add(level);\n         }\n@@ -778,28 +687,22 @@ private static class ConsoleLoggerController implements Serializable {\n         private static final long serialVersionUID = -1550459341476431714L;\n \n         public List<LoggerTO> getLoggers() {\n-            LoggerContext lc =\n-                    (LoggerContext) LoggerFactory.getILoggerFactory();\n-            List<LoggerTO> result =\n-                    new ArrayList<LoggerTO>(lc.getLoggerList().size());\n-            LoggerTO loggerTO;\n+            LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n+            List<LoggerTO> result = new ArrayList<LoggerTO>(lc.getLoggerList().size());\n             for (Logger logger : lc.getLoggerList()) {\n                 if (logger.getLevel() != null) {\n-                    loggerTO = new LoggerTO();\n+                    LoggerTO loggerTO = new LoggerTO();\n                     loggerTO.setName(logger.getName());\n-                    loggerTO.setLevel(LoggerLevel.fromLevel(logger.getLevel()));\n+                    loggerTO.setLevel(SyncopeLoggerLevel.fromLevel(logger.getLevel()));\n                     result.add(loggerTO);\n                 }\n             }\n \n             return result;\n         }\n \n-        public boolean setLoggerLevel(final String name,\n-                final LoggerLevel level) {\n-\n-            LoggerContext lc =\n-                    (LoggerContext) LoggerFactory.getILoggerFactory();\n+        public boolean setLogLevel(final String name, final SyncopeLoggerLevel level) {\n+            LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n             Logger logger = lc.getLogger(name);\n             if (logger != null) {\n                 logger.setLevel(level.getLevel());"},{"sha":"b6fe215a1710388f70191c3bb618f8f4e353bb5a","filename":"console/src/main/java/org/syncope/console/pages/ConfigurationModalPage.java","status":"modified","additions":22,"deletions":35,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -30,6 +30,7 @@\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.rest.ConfigurationRestClient;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n \n@@ -53,13 +54,10 @@ public class ConfigurationModalPage extends BaseModalPage {\n      * @param configurationTO\n      * @param createFlag true for CREATE and false for UPDATE operation\n      */\n-    public ConfigurationModalPage(final PageReference callPageRef,\n-            final ModalWindow window,\n-            final ConfigurationTO configurationTO,\n-            final boolean createFlag) {\n+    public ConfigurationModalPage(final PageReference callPageRef, final ModalWindow window,\n+            final ConfigurationTO configurationTO, final boolean createFlag) {\n \n-        Form form = new Form(\"form\", new CompoundPropertyModel(\n-                configurationTO));\n+        Form form = new Form(\"form\", new CompoundPropertyModel(configurationTO));\n \n         final AjaxTextFieldPanel key = new AjaxTextFieldPanel(\"key\", \"key\", new PropertyModel(configurationTO, \"key\"));\n         form.add(key);\n@@ -71,46 +69,36 @@ public ConfigurationModalPage(final PageReference callPageRef,\n         form.add(value);\n         value.addRequiredLabel();\n \n-        submit = new IndicatingAjaxButton(\n-                \"apply\", new Model<String>(getString(\"submit\"))) {\n+        submit = new IndicatingAjaxButton(\"apply\", new Model<String>(getString(\"submit\"))) {\n \n             private static final long serialVersionUID = -958724007591692537L;\n \n             @Override\n-            protected void onSubmit(final AjaxRequestTarget target,\n-                    final Form form) {\n-\n-                boolean res = false;\n-\n-                if (createFlag) {\n-                    res = configurationsRestClient.createConfiguration(\n-                            configurationTO);\n-\n-                    if (!res) {\n-                        error(getString(\"error_insert\"));\n-                    }\n-                } else {\n-                    res = configurationsRestClient.updateConfiguration(\n-                            configurationTO);\n-\n-                    if (!res) {\n-                        error(getString(\"error_updating\"));\n+            protected void onSubmit(final AjaxRequestTarget target, final Form form) {\n+                try {\n+                    if (createFlag) {\n+                        configurationsRestClient.createConfiguration(configurationTO);\n+                    } else {\n+                        configurationsRestClient.updateConfiguration(configurationTO);\n                     }\n-                }\n \n-                if (res) {\n-                    Configuration callerPage =\n-                            (Configuration) callPageRef.getPage();\n+                    Configuration callerPage = (Configuration) callPageRef.getPage();\n                     callerPage.setModalResult(true);\n \n                     window.close(target);\n+                } catch (SyncopeClientCompositeErrorException e) {\n+                    if (createFlag) {\n+                        error(getString(\"error_insert\"));\n+                    } else {\n+                        error(getString(\"error_updating\"));\n+                    }\n+                    target.add(feedbackPanel);\n+                    LOG.error(\"While creating or updating configuration {}\", configurationTO, e);\n                 }\n             }\n \n             @Override\n-            protected void onError(final AjaxRequestTarget target,\n-                    final Form form) {\n-\n+            protected void onError(final AjaxRequestTarget target, final Form form) {\n                 target.add(feedbackPanel);\n             }\n         };\n@@ -119,8 +107,7 @@ protected void onError(final AjaxRequestTarget target,\n                 ? xmlRolesReader.getAllAllowedRoles(\"Configuration\", \"create\")\n                 : xmlRolesReader.getAllAllowedRoles(\"Configuration\", \"update\");\n \n-        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE,\n-                allowedRoles);\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, allowedRoles);\n \n         form.add(submit);\n "},{"sha":"75f42f3fad786f6e280c29b44ff960f02fd103c1","filename":"console/src/main/java/org/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -369,7 +369,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form form) {\n                     error(getString(\"error\") + \":\" + e.getMessage());\n                     target.add(feedbackPanel);\n                     ((Resources) callerPageRef.getPage()).setModalResult(false);\n-                    LOG.error(\"While creating or updating connector {}\", conn);\n+                    LOG.error(\"While creating or updating connector {}\", conn, e);\n                 }\n             }\n "},{"sha":"7dedf65a6e0dd4d70ea91ac55bdb8ab55ced0abc","filename":"console/src/main/java/org/syncope/console/rest/ConfigurationRestClient.java","status":"modified","additions":14,"deletions":56,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -23,8 +23,7 @@\n import org.springframework.stereotype.Component;\n import org.syncope.client.to.ConfigurationTO;\n import org.syncope.client.to.LoggerTO;\n-import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.types.LoggerLevel;\n+import org.syncope.types.SyncopeLoggerLevel;\n \n @Component\n public class ConfigurationRestClient extends AbstractBaseRestClient {\n@@ -35,84 +34,43 @@ public class ConfigurationRestClient extends AbstractBaseRestClient {\n      * @return ConfigurationTOs\n      */\n     public List<ConfigurationTO> getAllConfigurations() {\n-        return Arrays.asList(\n-                restTemplate.getForObject(baseURL\n-                + \"configuration/list.json\", ConfigurationTO[].class));\n+        return Arrays.asList(restTemplate.getForObject(baseURL + \"configuration/list.json\", ConfigurationTO[].class));\n     }\n \n-    public ConfigurationTO readConfiguration(String key) {\n-\n-        return restTemplate.getForObject(\n-                baseURL + \"configuration/read/{key}.json\",\n-                ConfigurationTO.class, key);\n+    public ConfigurationTO readConfiguration(final String key) {\n+        return restTemplate.getForObject(baseURL + \"configuration/read/{key}.json\", ConfigurationTO.class, key);\n     }\n \n     /**\n      * Create a new configuration.\n      *\n      * @param configurationTO\n-     * @return true if the operation ends succesfully, false otherwise\n      */\n-    public boolean createConfiguration(ConfigurationTO configurationTO) {\n-\n-        ConfigurationTO newConfigurationTO =\n-                restTemplate.postForObject(baseURL\n-                + \"configuration/create\",\n-                configurationTO, ConfigurationTO.class);\n-\n-        return configurationTO.equals(newConfigurationTO);\n+    public void createConfiguration(ConfigurationTO configurationTO) {\n+        restTemplate.postForObject(baseURL + \"configuration/create\", configurationTO, ConfigurationTO.class);\n     }\n \n     /**\n-     * Update an existent configuration.\n+     * Update an existing configuration.\n      *\n      * @param configurationTO\n-     * @return true if the operation ends succesfully, false otherwise\n      */\n-    public boolean updateConfiguration(ConfigurationTO configurationTO) {\n-        ConfigurationTO newConfigurationTO = null;\n-\n-        try {\n-            newConfigurationTO = restTemplate.postForObject(baseURL\n-                    + \"configuration/update\", configurationTO,\n-                    ConfigurationTO.class);\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            LOG.error(\"While updating a configuration\", e);\n-            return false;\n-        }\n-        return configurationTO.equals(newConfigurationTO);\n+    public void updateConfiguration(final ConfigurationTO configurationTO) {\n+        restTemplate.postForObject(baseURL + \"configuration/update\", configurationTO, ConfigurationTO.class);\n     }\n \n     /**\n      * Deelete a configuration by key.\n      */\n     public void deleteConfiguration(final String key) {\n-        restTemplate.delete(baseURL\n-                + \"configuration/delete/{key}.json\", key);\n+        restTemplate.delete(baseURL + \"configuration/delete/{key}.json\", key);\n     }\n \n-    /**\n-     * Get all loggers.\n-     *\n-     * @return LoggerTOs\n-     */\n-    public List<LoggerTO> getLoggers() {\n-        return Arrays.asList(restTemplate.getForObject(\n-                baseURL + \"logger/list\", LoggerTO[].class));\n+    public List<LoggerTO> listLogs() {\n+        return Arrays.asList(restTemplate.getForObject(baseURL + \"logger/log/list\", LoggerTO[].class));\n     }\n \n-    public boolean setLoggerLevel(final String name, final LoggerLevel level) {\n-        boolean result;\n-        try {\n-            restTemplate.postForObject(\n-                    baseURL + \"logger/set/{name}/{level}\",\n-                    null, LoggerTO.class, name, level);\n-            result = true;\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            LOG.error(\"While setting a logger's level\", e);\n-            result = false;\n-        }\n-\n-        return result;\n+    public void setLogLevel(final String name, final SyncopeLoggerLevel level) {\n+        restTemplate.postForObject(baseURL + \"logger/log/{name}/{level}\", null, LoggerTO.class, name, level);\n     }\n }"},{"sha":"a9ab6e500ab0356549e4991b237de343b8b41320","filename":"console/src/main/resources/authorizations.xml","status":"modified","additions":22,"deletions":4,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -124,6 +124,20 @@ under the License.\n       <entitlement>REPORT_EXECUTE</entitlement>\n     </action>\n   </page>\n+  \n+  <page id=\"Audit\">\n+    <action id=\"list\">\n+      <entitlement>AUDIT_LIST</entitlement>\n+    </action>\n+        \n+    <action id=\"setLevel\">\n+      <entitlement>AUDIT_SET_LEVEL</entitlement>\n+    </action>\n+\n+    <action id=\"delete\">\n+      <entitlement>AUDIT_DELETE</entitlement>\n+    </action>\n+  </page>\n \n   <page id=\"Connectors\">\n     <action id=\"list\">\n@@ -195,12 +209,16 @@ under the License.\n       <entitlement>CONFIGURATION_DELETE</entitlement>\n     </action>\n \n-    <action id=\"loggerList\">\n-      <entitlement>LOGGER_LIST</entitlement>\n+    <action id=\"logList\">\n+      <entitlement>LOG_LIST</entitlement>\n     </action>\n         \n-    <action id=\"loggerSetLevel\">\n-      <entitlement>LOGGER_SET_LEVEL</entitlement>\n+    <action id=\"logSetLevel\">\n+      <entitlement>LOG_SET_LEVEL</entitlement>\n+    </action>\n+\n+    <action id=\"logDelete\">\n+      <entitlement>LOG_DELETE</entitlement>\n     </action>\n         \n     <action id=\"workflowDefRead\">"},{"sha":"3695c9848d702a5a708d7aea7349893569f9edb9","filename":"core/src/main/java/org/syncope/core/audit/AuditManager.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.syncope.core.audit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.syncope.types.AuditElements;\n+import org.syncope.types.SyncopeLoggerType;\n+\n+public class AuditManager {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(AuditManager.class);\n+\n+    private String getLoggerName(final AuditElements.Category category, final Enum<?> subcategory,\n+            final AuditElements.Result result) {\n+\n+        StringBuilder loggerName = new StringBuilder();\n+        loggerName.append(SyncopeLoggerType.AUDIT.getPrefix()).append('.').\n+                append(category.name()).append('.').append(subcategory.name()).append('.').append(result.name());\n+        return loggerName.toString();\n+    }\n+\n+    public void audit(final AuditElements.Category category, final Enum<?> subcategory,\n+            final AuditElements.Result result, final String message) {\n+\n+        audit(category, subcategory, result, message, null);\n+    }\n+\n+    public void audit(final AuditElements.Category category, final Enum<?> subcategory,\n+            final AuditElements.Result result, final String message, final Throwable t) {\n+\n+        if (category == null || subcategory == null || result == null) {\n+            LOG.error(\"Invalid request: some null items {} {} {}\", new Object[]{category, subcategory, result});\n+        } else if (!AuditElements.getSubCategories(category).contains(subcategory)) {\n+            LOG.error(\"Invalid request: {} does not belong to {}\", new Object[]{subcategory, category});\n+        } else {\n+            StringBuilder auditMessage = new StringBuilder();\n+\n+            final SecurityContext ctx = SecurityContextHolder.getContext();\n+            if (ctx != null && ctx.getAuthentication() != null) {\n+                auditMessage.append('[').append(ctx.getAuthentication().getName()).append(']').append(' ');\n+            }\n+            auditMessage.append(message);\n+\n+            Logger logger = LoggerFactory.getLogger(getLoggerName(category, subcategory, result));\n+            if (t == null) {\n+                logger.debug(auditMessage.toString());\n+            } else {\n+                logger.debug(auditMessage.toString(), t);\n+            }\n+        }\n+    }\n+}"},{"sha":"b611bcd0a44c3f97a972e8fd08bff76350665cc5","filename":"core/src/main/java/org/syncope/core/audit/JNDIFallbackConnectionSource.java","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Faudit%2FJNDIFallbackConnectionSource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Faudit%2FJNDIFallbackConnectionSource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Faudit%2FJNDIFallbackConnectionSource.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.syncope.core.audit;\n+\n+import ch.qos.logback.core.db.ConnectionSource;\n+import ch.qos.logback.core.db.ConnectionSourceBase;\n+import ch.qos.logback.core.db.DataSourceConnectionSource;\n+import ch.qos.logback.core.db.JNDIConnectionSource;\n+import ch.qos.logback.core.db.dialect.SQLDialectCode;\n+import ch.qos.logback.core.spi.ContextAwareBase;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.rmi.PortableRemoteObject;\n+import javax.sql.DataSource;\n+\n+/**\n+ * The <id>FallbackConnectionSource</id> is an implementation of\n+ * {@link ConnectionSource} that attempts at first to obtain a {@link javax.sql.DataSource} from a JNDI provider and, if\n+ * not found, from a provided {@link javax.sql.DataSource DataSource}.\n+ *\n+ * @author <a href=\"mailto:rdecampo@twcny.rr.com\">Ray DeCampo</a>\n+ */\n+public class JNDIFallbackConnectionSource extends ContextAwareBase implements ConnectionSource {\n+\n+    private String jndiLocation;\n+\n+    private DataSource dataSource;\n+\n+    private ConnectionSourceBase delegate;\n+\n+    public String getJndiLocation() {\n+        return jndiLocation;\n+    }\n+\n+    public void setJndiLocation(final String jndiLocation) {\n+        this.jndiLocation = jndiLocation;\n+    }\n+\n+    public DataSource getDataSource() {\n+        return dataSource;\n+    }\n+\n+    public void setDataSource(final DataSource dataSource) {\n+        this.dataSource = dataSource;\n+    }\n+\n+    private void chooseDelegate() {\n+        if (delegate != null) {\n+            return;\n+        }\n+\n+        JNDIConnectionSource jndiCS = new JNDIConnectionSource();\n+        jndiCS.setJndiLocation(jndiLocation);\n+        try {\n+            Context ctx = new InitialContext();\n+            Object obj = ctx.lookup(jndiCS.getJndiLocation());\n+\n+            PortableRemoteObject.narrow(obj, DataSource.class);\n+\n+            delegate = jndiCS;\n+            addInfo(\"DataSource obtained from \" + jndiLocation);\n+        } catch (NamingException e) {\n+            addError(\"During lookup of \" + jndiLocation);\n+        } catch (ClassCastException e) {\n+            addError(\"Object at \" + jndiLocation + \" does not seem to be a DataSource instance\", e);\n+        }\n+\n+        if (delegate == null) {\n+            addInfo(\"Could not obtain DataSource via JNDI\");\n+\n+            DataSourceConnectionSource dataSourceCS = new DataSourceConnectionSource();\n+            dataSourceCS.setDataSource(dataSource);\n+            Connection conn = null;\n+            try {\n+                conn = dataSourceCS.getConnection();\n+\n+                delegate = dataSourceCS;\n+                addInfo(\"Provided DataSource successfully reported\");\n+            } catch (SQLException e) {\n+                addError(\"While trying to get connection from DataSource \" + dataSource, e);\n+            } finally {\n+                if (conn != null) {\n+                    try {\n+                        conn.close();\n+                    } catch (SQLException sqle) {\n+                        addError(\"Could not close connection\", sqle);\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (delegate != null) {\n+            delegate.setContext(context);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isStarted() {\n+        chooseDelegate();\n+        return delegate.isStarted();\n+    }\n+\n+    @Override\n+    public void start() {\n+        chooseDelegate();\n+        delegate.start();\n+    }\n+\n+    @Override\n+    public void stop() {\n+        chooseDelegate();\n+        delegate.stop();\n+    }\n+\n+    @Override\n+    public Connection getConnection()\n+            throws SQLException {\n+\n+        chooseDelegate();\n+        return delegate.getConnection();\n+    }\n+\n+    @Override\n+    public SQLDialectCode getSQLDialectCode() {\n+        chooseDelegate();\n+        return delegate.getSQLDialectCode();\n+    }\n+\n+    @Override\n+    public boolean supportsGetGeneratedKeys() {\n+        chooseDelegate();\n+        return delegate.supportsGetGeneratedKeys();\n+    }\n+\n+    @Override\n+    public boolean supportsBatchUpdates() {\n+        chooseDelegate();\n+        return delegate.supportsBatchUpdates();\n+    }\n+}"},{"sha":"6db85031c811d28b4b653721e223c1fec3988708","filename":"core/src/main/java/org/syncope/core/connid/SLF4JLogger.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fconnid%2FSLF4JLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fconnid%2FSLF4JLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fconnid%2FSLF4JLogger.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -31,8 +31,7 @@ public class SLF4JLogger implements LogSpi {\n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-            SLF4JLogger.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(SLF4JLogger.class);\n \n     @Override\n     public final void log(final Class<?> clazz,"},{"sha":"bca45a3d1779ee5fbe0655028f7f4b1c8f1db3ec","filename":"core/src/main/java/org/syncope/core/init/ActivitiWorkflowLoader.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FActivitiWorkflowLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FActivitiWorkflowLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FActivitiWorkflowLoader.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -32,18 +32,15 @@\n @Component\n public class ActivitiWorkflowLoader {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(\n-            ActivitiWorkflowLoader.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(ActivitiWorkflowLoader.class);\n \n     @Autowired\n     private RepositoryService repositoryService;\n \n     public void load() {\n-        List<ProcessDefinition> processes = repositoryService.\n-                createProcessDefinitionQuery().processDefinitionKey(\n-                ActivitiUserWorkflowAdapter.WF_PROCESS_ID).list();\n-        LOG.debug(ActivitiUserWorkflowAdapter.WF_PROCESS_ID\n-                + \" Activiti processes in repository: {}\", processes);\n+        List<ProcessDefinition> processes = repositoryService.createProcessDefinitionQuery().\n+                processDefinitionKey(ActivitiUserWorkflowAdapter.WF_PROCESS_ID).list();\n+        LOG.debug(ActivitiUserWorkflowAdapter.WF_PROCESS_ID + \" Activiti processes in repository: {}\", processes);\n \n         // Only loads process definition from file if not found in repository\n         if (processes.isEmpty()) {\n@@ -53,16 +50,15 @@ public void load() {\n                         + ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE);\n \n                 repositoryService.createDeployment().addInputStream(\n-                        ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE,\n-                        wfDefinitionStream).deploy();\n+                        ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, wfDefinitionStream).deploy();\n             } finally {\n-                try {\n-                    if (wfDefinitionStream != null) {\n+                if (wfDefinitionStream != null) {\n+                    try {\n                         wfDefinitionStream.close();\n+                    } catch (IOException e) {\n+                        LOG.error(\"While closing input stream for {}\",\n+                                ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n                     }\n-                } catch (IOException e) {\n-                    LOG.error(\"While closing input stream for {}\",\n-                            ActivitiUserWorkflowAdapter.WF_PROCESS_RESOURCE, e);\n                 }\n             }\n         }"},{"sha":"ae4fe116bacc6cfc77116f873326726f68ff377c","filename":"core/src/main/java/org/syncope/core/init/ConnInstanceLoader.java","status":"modified","additions":26,"deletions":33,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -28,42 +28,48 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.propagation.ConnectorFacadeProxy;\n+import org.syncope.core.util.ApplicationContextManager;\n import org.syncope.core.util.ConnBundleManager;\n import org.syncope.types.ConnConfProperty;\n \n /**\n  * Load ConnId connector instances.\n  */\n @Component\n-public class ConnInstanceLoader extends AbstractLoader {\n+public class ConnInstanceLoader {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(\n-            ConnInstanceLoader.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(ConnInstanceLoader.class);\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n \n     @Autowired\n     private ConnBundleManager connBundleManager;\n \n+    private DefaultListableBeanFactory getBeanFactory() {\n+        ConfigurableApplicationContext context = ApplicationContextManager.getApplicationContext();\n+\n+        return (DefaultListableBeanFactory) context.getBeanFactory();\n+    }\n+\n     private String getBeanName(final ExternalResource resource) {\n-        return String.format(\"connInstance-%d-%s\",\n-                resource.getConnector().getId(), resource.getName());\n+        return String.format(\"connInstance-%d-%s\", resource.getConnector().getId(), resource.getName());\n     }\n \n     /**\n      * Get a live connector bean that is registered with the given resource.\n      *\n      * @param resource the resource.\n      * @return live connector bran for given resource\n-     * @throws BeansException in case the connector is not registered in the\n-     * context\n+     * @throws BeansException in case the connector is not registered in the context\n      */\n     public ConnectorFacadeProxy getConnector(final ExternalResource resource)\n             throws BeansException, NotFoundException {\n@@ -74,16 +80,13 @@ public ConnectorFacadeProxy getConnector(final ExternalResource resource)\n             registerConnector(resource);\n         }\n \n-        return (ConnectorFacadeProxy) getBeanFactory().getBean(\n-                getBeanName(resource));\n+        return (ConnectorFacadeProxy) getBeanFactory().getBean(getBeanName(resource));\n     }\n \n-    public ConnectorFacadeProxy createConnectorBean(\n-            final ExternalResource resource)\n+    public ConnectorFacadeProxy createConnectorBean(final ExternalResource resource)\n             throws NotFoundException {\n \n-        final Set<ConnConfProperty> configuration =\n-                new HashSet<ConnConfProperty>();\n+        final Set<ConnConfProperty> configuration = new HashSet<ConnConfProperty>();\n \n         // to be used to control managed prop (needed by overridden mechanism)\n         final Set<String> propertyNames = new HashSet<String>();\n@@ -110,21 +113,19 @@ public ConnectorFacadeProxy createConnectorBean(\n     }\n \n     /**\n-     * Create connector bean starting from connector instance and configuration\n-     * properties. This method has to be used to create a connector instance\n-     * without any linked external resource.\n+     * Create connector bean starting from connector instance and configuration properties. This method must be used to\n+     * create a connector instance without any linked external resource.\n+     *\n      * @param connInstance connector instance.\n      * @param configuration configuration properties.\n      * @return connector facade proxy.\n      * @throws NotFoundException when not able to fetch all the required data.\n      */\n-    public ConnectorFacadeProxy createConnectorBean(\n-            final ConnInstance connInstance,\n+    public ConnectorFacadeProxy createConnectorBean(final ConnInstance connInstance,\n             final Set<ConnConfProperty> configuration)\n             throws NotFoundException {\n \n-        final ConnInstance connInstanceClone =\n-                (ConnInstance) SerializationUtils.clone(connInstance);\n+        final ConnInstance connInstanceClone = (ConnInstance) SerializationUtils.clone(connInstance);\n \n         connInstanceClone.setConfiguration(configuration);\n \n@@ -151,7 +152,6 @@ public void unregisterConnector(final String id) {\n         getBeanFactory().destroySingleton(id);\n     }\n \n-    @Override\n     @Transactional(readOnly = true)\n     public void load() {\n         // This is needed to avoid encoding problems when sending error\n@@ -161,21 +161,14 @@ public void load() {\n         // Next load all resource-specific connectors.\n         for (ExternalResource resource : resourceDAO.findAll()) {\n             try {\n-                LOG.info(\"Registering resource-connector pair {}-{}\",\n-                        resource, resource.getConnector());\n+                LOG.info(\"Registering resource-connector pair {}-{}\", resource, resource.getConnector());\n                 registerConnector(resource);\n-            } catch (NotFoundException e) {\n-                LOG.error(String.format(\n-                        \"While registering resource-connector pair %s-%s\",\n-                        resource, resource.getConnector()), e);\n-            } catch (RuntimeException e) {\n-                LOG.error(String.format(\n-                        \"While registering resource-connector pair %s-%s\",\n-                        resource, resource.getConnector()), e);\n+            } catch (Exception e) {\n+                LOG.error(\"While registering resource-connector pair {}-{}\",\n+                        new Object[]{resource, resource.getConnector(), e});\n             }\n         }\n \n-        LOG.info(\"Done loading {} connectors.\", getBeanFactory().getBeansOfType(\n-                ConnectorFacadeProxy.class).size());\n+        LOG.info(\"Done loading {} connectors.\", getBeanFactory().getBeansOfType(ConnectorFacadeProxy.class).size());\n     }\n }"},{"sha":"972e33aa9f21f4ba9be0bd235c0eea9fc3b6f1f0","filename":"core/src/main/java/org/syncope/core/init/ContentLoader.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FContentLoader.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -18,7 +18,6 @@\n  */\n package org.syncope.core.init;\n \n-import org.syncope.core.util.ImportExport;\n import java.io.InputStream;\n import java.sql.Connection;\n import java.sql.ResultSet;\n@@ -35,6 +34,7 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.SyncopeConf;\n+import org.syncope.core.util.ImportExport;\n \n /**\n  * If empty, load default content to Syncope database by reading from\n@@ -46,8 +46,7 @@ public class ContentLoader {\n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-            ContentLoader.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(ContentLoader.class);\n \n     @Autowired\n     private DataSource dataSource;\n@@ -65,9 +64,7 @@ public void load() {\n         ResultSet resultSet = null;\n         boolean existingData = false;\n         try {\n-            statement = conn.createStatement(\n-                    ResultSet.TYPE_SCROLL_SENSITIVE,\n-                    ResultSet.CONCUR_READ_ONLY);\n+            statement = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\n \n             resultSet = statement.executeQuery(\"SELECT * FROM \" + SyncopeConf.class.getSimpleName());\n             resultSet.last();"},{"sha":"e6c0c445c771390bd8fa9029e41de5cb76cc6b9c","filename":"core/src/main/java/org/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":24,"deletions":33,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -31,6 +31,8 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.scheduling.quartz.CronTriggerBean;\n import org.springframework.scheduling.quartz.JobDetailBean;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n@@ -48,12 +50,12 @@\n import org.syncope.core.scheduling.ReportJob;\n import org.syncope.core.scheduling.SyncJob;\n import org.syncope.core.scheduling.SyncJobActions;\n+import org.syncope.core.util.ApplicationContextManager;\n \n @Component\n-public class JobInstanceLoader extends AbstractLoader {\n+public class JobInstanceLoader {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(\n-            JobInstanceLoader.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(JobInstanceLoader.class);\n \n     @Autowired\n     private SchedulerFactoryBean scheduler;\n@@ -64,9 +66,13 @@ public class JobInstanceLoader extends AbstractLoader {\n     @Autowired\n     private ReportDAO reportDAO;\n \n-    private static Long getIdFromJobName(final String name,\n-            final String pattern, final int prefixLength) {\n+    private DefaultListableBeanFactory getBeanFactory() {\n+        ConfigurableApplicationContext context = ApplicationContextManager.getApplicationContext();\n \n+        return (DefaultListableBeanFactory) context.getBeanFactory();\n+    }\n+\n+    private static Long getIdFromJobName(final String name, final String pattern, final int prefixLength) {\n         Long result = null;\n \n         Matcher jobMatcher = Pattern.compile(pattern).matcher(name);\n@@ -103,8 +109,7 @@ public static String getTriggerName(final String jobName) {\n         return \"Trigger_\" + jobName;\n     }\n \n-    private void registerJob(final String jobName,\n-            final Job jobInstance, final String cronExpression)\n+    private void registerJob(final String jobName, final Job jobInstance, final String cronExpression)\n             throws Exception {\n \n         // 0. unregister job\n@@ -131,32 +136,26 @@ private void registerJob(final String jobName,\n         }\n     }\n \n-    public void registerJob(final Task task, final String jobClassName,\n-            final String cronExpression)\n+    public void registerJob(final Task task, final String jobClassName, final String cronExpression)\n             throws Exception {\n \n         Class jobClass = Class.forName(jobClassName);\n-        Job jobInstance = (Job) getBeanFactory().createBean(jobClass,\n-                AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+        Job jobInstance = (Job) getBeanFactory().createBean(jobClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n         if (jobInstance instanceof AbstractTaskJob) {\n             ((AbstractTaskJob) jobInstance).setTaskId(task.getId());\n         }\n         if (jobInstance instanceof SyncJob) {\n-            String jobActionsClassName =\n-                    ((SyncTask) task).getJobActionsClassName();\n+            String jobActionsClassName = ((SyncTask) task).getJobActionsClassName();\n             Class syncJobActionsClass = DefaultSyncJobActions.class;\n             if (StringUtils.isNotBlank(jobActionsClassName)) {\n                 try {\n                     syncJobActionsClass = Class.forName(jobActionsClassName);\n                 } catch (Throwable t) {\n                     LOG.error(\"Class {} not found, reverting to {}\",\n-                            new Object[]{jobActionsClassName,\n-                                syncJobActionsClass.getName(), t});\n+                            new Object[]{jobActionsClassName, syncJobActionsClass.getName(), t});\n                 }\n             }\n-            SyncJobActions syncJobActions =\n-                    (SyncJobActions) getBeanFactory().createBean(\n-                    syncJobActionsClass,\n+            SyncJobActions syncJobActions = (SyncJobActions) getBeanFactory().createBean(syncJobActionsClass,\n                     AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n \n             ((SyncJob) jobInstance).setActions(syncJobActions);\n@@ -172,16 +171,13 @@ public void registerJob(final Report report)\n                 AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n         ((ReportJob) jobInstance).setReportId(report.getId());\n \n-        registerJob(getJobName(report), jobInstance,\n-                report.getCronExpression());\n+        registerJob(getJobName(report), jobInstance, report.getCronExpression());\n     }\n \n     private void unregisterJob(final String jobName) {\n         try {\n-            scheduler.getScheduler().unscheduleJob(\n-                    jobName, Scheduler.DEFAULT_GROUP);\n-            scheduler.getScheduler().deleteJob(\n-                    jobName, Scheduler.DEFAULT_GROUP);\n+            scheduler.getScheduler().unscheduleJob(jobName, Scheduler.DEFAULT_GROUP);\n+            scheduler.getScheduler().deleteJob(jobName, Scheduler.DEFAULT_GROUP);\n         } catch (SchedulerException e) {\n             LOG.error(\"Could not remove job \" + jobName, e);\n         }\n@@ -199,26 +195,22 @@ public void unregisterJob(final Report report) {\n         unregisterJob(getJobName(report));\n     }\n \n-    @Override\n     @Transactional(readOnly = true)\n     public void load() {\n         // 1. jobs for SchedTasks\n         Set<SchedTask> tasks = new HashSet(taskDAO.findAll(SchedTask.class));\n         tasks.addAll(taskDAO.findAll(SyncTask.class));\n         for (SchedTask task : tasks) {\n             try {\n-                registerJob(task, task.getJobClassName(),\n-                        task.getCronExpression());\n+                registerJob(task, task.getJobClassName(), task.getCronExpression());\n             } catch (Exception e) {\n-                LOG.error(\"While loading job instance for task \"\n-                        + task.getId(), e);\n+                LOG.error(\"While loading job instance for task \" + task.getId(), e);\n             }\n         }\n \n         // 2. NotificationJob\n         try {\n-            registerJob(null, NotificationJob.class.getName(),\n-                    \"0 0/2 * * * ?\");\n+            registerJob(null, NotificationJob.class.getName(), \"0 0/2 * * * ?\");\n         } catch (Exception e) {\n             LOG.error(\"While loading NotificationJob instance\", e);\n         }\n@@ -228,8 +220,7 @@ public void load() {\n             try {\n                 registerJob(report);\n             } catch (Exception e) {\n-                LOG.error(\"While loading job instance for report \"\n-                        + report.getName(), e);\n+                LOG.error(\"While loading job instance for report \" + report.getName(), e);\n             }\n         }\n     }"},{"sha":"6d1c04b6224de6c9a9b4f77b5dabbb5b6e88c414","filename":"core/src/main/java/org/syncope/core/init/LoggerLoader.java","status":"modified","additions":19,"deletions":17,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -28,7 +28,8 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.SyncopeLogger;\n import org.syncope.core.persistence.dao.LoggerDAO;\n-import org.syncope.types.LoggerLevel;\n+import org.syncope.types.SyncopeLoggerLevel;\n+import org.syncope.types.SyncopeLoggerType;\n \n @Component\n public class LoggerLoader {\n@@ -38,40 +39,41 @@ public class LoggerLoader {\n \n     @Transactional\n     public void load() {\n-        Map<String, SyncopeLogger> syncopeLoggers =\n-                new HashMap<String, SyncopeLogger>();\n-        for (SyncopeLogger syncopeLogger : loggerDAO.findAll()) {\n-            syncopeLoggers.put(syncopeLogger.getName(), syncopeLogger);\n+        Map<String, SyncopeLogger> loggerLogs = new HashMap<String, SyncopeLogger>();\n+        for (SyncopeLogger syncopeLogger : loggerDAO.findAll(SyncopeLoggerType.LOG)) {\n+            loggerLogs.put(syncopeLogger.getName(), syncopeLogger);\n+        }\n+\n+        for (SyncopeLogger syncopeLogger : loggerDAO.findAll(SyncopeLoggerType.AUDIT)) {\n+            loggerLogs.put(syncopeLogger.getName(), syncopeLogger);\n         }\n \n         LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n \n         /*\n-         * Traverse all defined Logback loggers: if there is a matching\n-         * SyncopeLogger, set Logback level accordingly, otherwise create a\n-         * SyncopeLogger instance with given name and level.\n+         * Traverse all defined Logback loggers: if there is a matching SyncopeLogger, set Logback level accordingly,\n+         * otherwise create a SyncopeLogger instance with given name and level.\n          */\n         for (Logger logger : lc.getLoggerList()) {\n             if (logger.getLevel() != null) {\n-                if (syncopeLoggers.containsKey(logger.getName())) {\n-                    logger.setLevel(syncopeLoggers.get(logger.getName()).\n-                            getLevel().getLevel());\n-                    syncopeLoggers.remove(logger.getName());\n+                if (loggerLogs.containsKey(logger.getName())) {\n+                    logger.setLevel(loggerLogs.get(logger.getName()).getLevel().getLevel());\n+                    loggerLogs.remove(logger.getName());\n                 } else {\n                     SyncopeLogger syncopeLogger = new SyncopeLogger();\n                     syncopeLogger.setName(logger.getName());\n-                    syncopeLogger.setLevel(\n-                            LoggerLevel.fromLevel(logger.getLevel()));\n+                    syncopeLogger.setLevel(SyncopeLoggerLevel.fromLevel(logger.getLevel()));\n+                    syncopeLogger.setType(logger.getName().startsWith(SyncopeLoggerType.AUDIT.getPrefix())\n+                            ? SyncopeLoggerType.AUDIT : SyncopeLoggerType.LOG);\n                     loggerDAO.save(syncopeLogger);\n                 }\n             }\n         }\n \n         /*\n-         * Foreach SyncopeLogger not found in Logback, create a new Logback\n-         * logger with given name and level.\n+         * Foreach SyncopeLogger not found in Logback, create a new Logback logger with given name and level.\n          */\n-        for (SyncopeLogger syncopeLogger : syncopeLoggers.values()) {\n+        for (SyncopeLogger syncopeLogger : loggerLogs.values()) {\n             Logger logger = lc.getLogger(syncopeLogger.getName());\n             logger.setLevel(syncopeLogger.getLevel().getLevel());\n         }"},{"sha":"9ffac494975b487c156fa7406f1c9b2be0d34bf1","filename":"core/src/main/java/org/syncope/core/init/SpringContextInitializer.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -31,8 +31,7 @@\n  * Take care of all initializations needed by Syncope to run up and safe.\n  */\n @Component\n-public class SpringContextInitializer implements ServletContextAware,\n-        BeanFactoryAware, InitializingBean {\n+public class SpringContextInitializer implements ServletContextAware, BeanFactoryAware, InitializingBean {\n \n     @Autowired\n     private ConnInstanceLoader connInstanceLoader;"},{"sha":"7997a1931d543981620f97b57aeda66ab2b828e4","filename":"core/src/main/java/org/syncope/core/notification/NotificationManager.java","status":"modified","additions":12,"deletions":26,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -57,8 +57,7 @@ public class NotificationManager {\n     /**\n      * Logger.\n      */\n-    private static final Logger LOG =\n-            LoggerFactory.getLogger(NotificationManager.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(NotificationManager.class);\n \n     /**\n      * Notification DAO.\n@@ -107,29 +106,23 @@ public class NotificationManager {\n      * @param emailSchema name of user schema containing e-mail address\n      * @return notification task, fully populated\n      */\n-    private NotificationTask getNotificationTask(\n-            final Notification notification, final SyncopeUser user,\n+    private NotificationTask getNotificationTask(final Notification notification, final SyncopeUser user,\n             final String emailSchema) {\n \n         Set<String> recipients = new HashSet<String>();\n-        for (SyncopeUser recipient : searchDAO.search(\n-                notification.getRecipients())) {\n+        for (SyncopeUser recipient : searchDAO.search(notification.getRecipients())) {\n \n             if (recipient.getAttribute(emailSchema) == null) {\n-                LOG.error(\"{} cannot be notified no {} attribute present\",\n-                        recipient, emailSchema);\n+                LOG.error(\"{} cannot be notified no {} attribute present\", recipient, emailSchema);\n             } else {\n-                recipients.add(recipient.getAttribute(emailSchema).\n-                        getValuesAsStrings().get(0));\n+                recipients.add(recipient.getAttribute(emailSchema).getValuesAsStrings().get(0));\n             }\n         }\n         if (notification.isSelfAsRecipient()) {\n             if (user.getAttribute(emailSchema) == null) {\n-                LOG.error(\"{} cannot be notified no {} attribute present\",\n-                        user, emailSchema);\n+                LOG.error(\"{} cannot be notified no {} attribute present\", user, emailSchema);\n             } else {\n-                recipients.add(user.getAttribute(emailSchema).\n-                        getValuesAsStrings().get(0));\n+                recipients.add(user.getAttribute(emailSchema).getValuesAsStrings().get(0));\n             }\n         }\n \n@@ -143,23 +136,16 @@ private NotificationTask getNotificationTask(\n         for (AbstractAttr attr : user.getAttributes()) {\n             List<String> values = attr.getValuesAsStrings();\n             model.put(attr.getSchema().getName(),\n-                    values.isEmpty()\n-                    ? \"\"\n-                    : (values.size() == 1\n-                    ? values.iterator().next() : values));\n+                    values.isEmpty() ? \"\" : (values.size() == 1 ? values.iterator().next() : values));\n         }\n \n         String htmlBody;\n         String textBody;\n         try {\n-            htmlBody =\n-                    VelocityEngineUtils.mergeTemplateIntoString(velocityEngine,\n-                    \"mailTemplates/\" + notification.getTemplate() + \".html.vm\",\n-                    model);\n-            textBody =\n-                    VelocityEngineUtils.mergeTemplateIntoString(velocityEngine,\n-                    \"mailTemplates/\" + notification.getTemplate() + \".txt.vm\",\n-                    model);\n+            htmlBody = VelocityEngineUtils.mergeTemplateIntoString(velocityEngine,\n+                    \"mailTemplates/\" + notification.getTemplate() + \".html.vm\", model);\n+            textBody = VelocityEngineUtils.mergeTemplateIntoString(velocityEngine,\n+                    \"mailTemplates/\" + notification.getTemplate() + \".txt.vm\", model);\n         } catch (VelocityException e) {\n             LOG.error(\"Could not get mail body\", e);\n "},{"sha":"9c9758ae927f83f07cf51eb208d1c1606d66c49e","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncopeLogger.java","status":"modified","additions":18,"deletions":5,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeLogger.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -23,7 +23,8 @@\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n-import org.syncope.types.LoggerLevel;\n+import org.syncope.types.SyncopeLoggerLevel;\n+import org.syncope.types.SyncopeLoggerType;\n \n @Entity\n public class SyncopeLogger extends AbstractBaseBean {\n@@ -34,15 +35,19 @@ public class SyncopeLogger extends AbstractBaseBean {\n     @Column(name = \"logName\")\n     private String name;\n \n-    @Column(name = \"logLevel\")\n+    @Column(name = \"logLevel\", nullable = false)\n     @Enumerated(EnumType.STRING)\n-    private LoggerLevel level;\n+    private SyncopeLoggerLevel level;\n \n-    public LoggerLevel getLevel() {\n+    @Column(name = \"logType\", nullable = false)\n+    @Enumerated(EnumType.STRING)\n+    private SyncopeLoggerType type;\n+\n+    public SyncopeLoggerLevel getLevel() {\n         return level;\n     }\n \n-    public void setLevel(final LoggerLevel level) {\n+    public void setLevel(final SyncopeLoggerLevel level) {\n         this.level = level;\n     }\n \n@@ -53,4 +58,12 @@ public String getName() {\n     public void setName(final String name) {\n         this.name = name;\n     }\n+\n+    public SyncopeLoggerType getType() {\n+        return type;\n+    }\n+\n+    public void setType(SyncopeLoggerType type) {\n+        this.type = type;\n+    }\n }"},{"sha":"503c9fde0306c4f7e751a70943901541b89fc4c1","filename":"core/src/main/java/org/syncope/core/persistence/dao/LoggerDAO.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FLoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FLoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FLoggerDAO.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -21,15 +21,18 @@\n import java.util.List;\n import org.syncope.core.persistence.beans.SyncopeLogger;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.syncope.types.SyncopeLoggerType;\n \n public interface LoggerDAO extends DAO {\n \n     SyncopeLogger find(String name);\n \n-    List<SyncopeLogger> findAll();\n+    List<SyncopeLogger> findAll(SyncopeLoggerType type);\n \n     SyncopeLogger save(SyncopeLogger logger)\n             throws InvalidEntityException;\n \n     void delete(String name);\n+\n+    void delete(SyncopeLogger logger);\n }"},{"sha":"9f0da1b85a01550a9ec49a90d838807e8e3c8ffa","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/LoggerDAOImpl.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FLoggerDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FLoggerDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FLoggerDAOImpl.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -23,6 +23,8 @@\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.SyncopeLogger;\n import org.syncope.core.persistence.dao.LoggerDAO;\n+import org.syncope.types.SyncopeLoggerLevel;\n+import org.syncope.types.SyncopeLoggerType;\n \n @Repository\n public class LoggerDAOImpl extends AbstractDAOImpl implements LoggerDAO {\n@@ -33,24 +35,35 @@ public SyncopeLogger find(final String name) {\n     }\n \n     @Override\n-    public List<SyncopeLogger> findAll() {\n+    public List<SyncopeLogger> findAll(final SyncopeLoggerType type) {\n         Query query = entityManager.createQuery(\n-                \"SELECT e FROM \" + SyncopeLogger.class.getSimpleName() + \" e\");\n+                \"SELECT e FROM \" + SyncopeLogger.class.getSimpleName() + \" e \"\n+                + \"WHERE e.type=:type\");\n+        query.setParameter(\"type\", type);\n         return query.getResultList();\n     }\n \n     @Override\n     public SyncopeLogger save(final SyncopeLogger logger) {\n+        // Audit loggers must be either OFF or DEBUG, no more options\n+        if (SyncopeLoggerType.AUDIT == logger.getType() && SyncopeLoggerLevel.OFF != logger.getLevel()) {\n+            logger.setLevel(SyncopeLoggerLevel.DEBUG);\n+        }\n         return entityManager.merge(logger);\n     }\n \n+    @Override\n+    public void delete(final SyncopeLogger logger) {\n+        entityManager.remove(logger);\n+    }\n+\n     @Override\n     public void delete(final String name) {\n         SyncopeLogger logger = find(name);\n         if (logger == null) {\n             return;\n         }\n \n-        entityManager.remove(logger);\n+        delete(logger);\n     }\n }"},{"sha":"316f7da0b0110f26628917880ed5fd4b9025a133","filename":"core/src/main/java/org/syncope/core/rest/controller/AuthenticationController.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -25,14 +25,21 @@\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n import org.syncope.core.util.EntitlementUtil;\n+import org.syncope.types.AuditElements.AuthenticationSubCategory;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.Result;\n \n @Controller\n @RequestMapping(\"/auth\")\n public class AuthenticationController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n@@ -51,6 +58,11 @@ public List<String> listEntitlements() {\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/entitlements\")\n     public Set<String> getEntitlements() {\n-        return EntitlementUtil.getOwnedEntitlementNames();\n+        Set<String> result = EntitlementUtil.getOwnedEntitlementNames();\n+\n+        auditManager.audit(Category.authentication, AuthenticationSubCategory.getEntitlements, Result.success,\n+                \"Owned entitlements: \" + result.toString());\n+\n+        return result;\n     }\n }"},{"sha":"f80faae02ddb7d0f39a6819c83c0494e2fbd0edd","filename":"core/src/main/java/org/syncope/core/rest/controller/LoggerController.java","status":"modified","additions":89,"deletions":13,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -23,19 +23,25 @@\n import ch.qos.logback.classic.LoggerContext;\n import java.util.ArrayList;\n import java.util.List;\n+import javassist.NotFoundException;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.LoggerTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.SyncopeLogger;\n import org.syncope.core.persistence.dao.LoggerDAO;\n-import org.syncope.types.LoggerLevel;\n+import org.syncope.types.SyncopeClientExceptionType;\n+import org.syncope.types.SyncopeLoggerLevel;\n+import org.syncope.types.SyncopeLoggerType;\n \n @Controller\n @RequestMapping(\"/logger\")\n@@ -44,13 +50,9 @@ public class LoggerController extends AbstractController {\n     @Autowired\n     private LoggerDAO loggerDAO;\n \n-    @PreAuthorize(\"hasRole('LOGGER_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/list\")\n-    @Transactional(readOnly = true)\n-    public List<LoggerTO> list() {\n+    private List<LoggerTO> list(final SyncopeLoggerType type) {\n         List<LoggerTO> result = new ArrayList<LoggerTO>();\n-        for (SyncopeLogger syncopeLogger : loggerDAO.findAll()) {\n+        for (SyncopeLogger syncopeLogger : loggerDAO.findAll(type)) {\n             LoggerTO loggerTO = new LoggerTO();\n             BeanUtils.copyProperties(syncopeLogger, loggerTO);\n             result.add(loggerTO);\n@@ -59,18 +61,45 @@ public List<LoggerTO> list() {\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('LOGGER_SET_LEVEL')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/set/{name}/{level}\")\n-    public LoggerTO setLevel(@PathVariable(\"name\") final String name,\n-            @PathVariable(\"level\") final Level level) {\n+    @PreAuthorize(\"hasRole('LOG_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/log/list\")\n+    @Transactional(readOnly = true)\n+    public List<LoggerTO> listLogs() {\n+        return list(SyncopeLoggerType.LOG);\n+    }\n \n+    @PreAuthorize(\"hasRole('AUDIT_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/audit/list\")\n+    @Transactional(readOnly = true)\n+    public List<LoggerTO> listAudits() {\n+        return list(SyncopeLoggerType.AUDIT);\n+    }\n+\n+    private void throwInvalidLogger(final SyncopeLoggerType type) {\n+        SyncopeClientCompositeErrorException sccee = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+\n+        SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.InvalidLogger);\n+        sce.addElement(\"Expected \" + type.name());\n+\n+        throw sccee;\n+    }\n+\n+    private LoggerTO setLevel(final String name, final Level level, final SyncopeLoggerType expectedType) {\n         SyncopeLogger syncopeLogger = loggerDAO.find(name);\n         if (syncopeLogger == null) {\n+            LOG.debug(\"Logger {} not found: creating new...\", name);\n+\n             syncopeLogger = new SyncopeLogger();\n             syncopeLogger.setName(name);\n+            syncopeLogger.setType(name.startsWith(SyncopeLoggerType.AUDIT.getPrefix())\n+                    ? SyncopeLoggerType.AUDIT : SyncopeLoggerType.LOG);\n+        }\n+\n+        if (expectedType != syncopeLogger.getType()) {\n+            throwInvalidLogger(expectedType);\n         }\n-        syncopeLogger.setLevel(LoggerLevel.fromLevel(level));\n+\n+        syncopeLogger.setLevel(SyncopeLoggerLevel.fromLevel(level));\n         syncopeLogger = loggerDAO.save(syncopeLogger);\n \n         LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n@@ -81,4 +110,51 @@ public LoggerTO setLevel(@PathVariable(\"name\") final String name,\n         BeanUtils.copyProperties(syncopeLogger, result);\n         return result;\n     }\n+\n+    @PreAuthorize(\"hasRole('LOG_SET_LEVEL')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/log/{name}/{level}\")\n+    public LoggerTO setLogLevel(@PathVariable(\"name\") final String name, @PathVariable(\"level\") final Level level) {\n+        return setLevel(name, level, SyncopeLoggerType.LOG);\n+    }\n+\n+    @PreAuthorize(\"hasRole('AUDIT_SET_LEVEL')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/audit/{name}/{level}\")\n+    public LoggerTO setAuditLevel(@PathVariable(\"name\") final String name, @PathVariable(\"level\") final Level level) {\n+        return setLevel(name, level, SyncopeLoggerType.AUDIT);\n+    }\n+\n+    private void delete(final String name, final SyncopeLoggerType expectedType)\n+            throws NotFoundException {\n+\n+        SyncopeLogger syncopeLogger = loggerDAO.find(name);\n+        if (syncopeLogger == null) {\n+            throw new NotFoundException(\"Logger \" + name);\n+        } else if (expectedType != syncopeLogger.getType()) {\n+            throwInvalidLogger(expectedType);\n+        }\n+\n+        // remove SyncopeLogger from local storage, so that LoggerLoader won't load this next time\n+        loggerDAO.delete(syncopeLogger);\n+\n+        // set log level to OFF in order to disable configured logger until next reboot\n+        LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n+        Logger logger = lc.getLogger(name);\n+        logger.setLevel(Level.OFF);\n+    }\n+\n+    @PreAuthorize(\"hasRole('LOG_DELETE')\")\n+    @RequestMapping(method = RequestMethod.DELETE, value = \"/log/delete/{name}\")\n+    public void deleteLog(@PathVariable(\"name\") final String name)\n+            throws NotFoundException {\n+\n+        delete(name, SyncopeLoggerType.LOG);\n+    }\n+\n+    @PreAuthorize(\"hasRole('AUDIT_DELETE')\")\n+    @RequestMapping(method = RequestMethod.DELETE, value = \"/audit/delete/{name}\")\n+    public void deleteAudit(@PathVariable(\"name\") final String name)\n+            throws NotFoundException {\n+\n+        delete(name, SyncopeLoggerType.AUDIT);\n+    }\n }"},{"sha":"a912f85734d24b0a837c8e0cef5ba38cdc4deb2b","filename":"core/src/main/java/org/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":12,"deletions":29,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -40,8 +40,7 @@ public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-            SyncopeAuthenticationProvider.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeAuthenticationProvider.class);\n \n     @Autowired\n     private UserDAO userDAO;\n@@ -88,50 +87,38 @@ public Authentication authenticate(final Authentication authentication)\n         SyncopeUser user = null;\n \n         if (adminUser.equals(authentication.getPrincipal())) {\n-            passwordUser.setPassword(\n-                    authentication.getCredentials().toString(),\n-                    CipherAlgorithm.MD5, 0);\n+            passwordUser.setPassword(authentication.getCredentials().toString(), CipherAlgorithm.MD5, 0);\n \n-            authenticated = adminMD5Password.equalsIgnoreCase(\n-                    passwordUser.getPassword());\n+            authenticated = adminMD5Password.equalsIgnoreCase(passwordUser.getPassword());\n         } else {\n             String username;\n             try {\n                 username = authentication.getPrincipal().toString();\n             } catch (NumberFormatException e) {\n-                throw new UsernameNotFoundException(\n-                        \"Invalid username: \" + authentication.getName(), e);\n+                throw new UsernameNotFoundException(\"Invalid username: \" + authentication.getName(), e);\n             }\n \n             user = userDAO.find(username);\n             if (user == null) {\n-                throw new UsernameNotFoundException(\n-                        \"Could not find user \" + username);\n+                throw new UsernameNotFoundException(\"Could not find user \" + username);\n             }\n \n-            passwordUser.setPassword(\n-                    authentication.getCredentials().toString(),\n-                    user.getCipherAlgoritm(), 0);\n+            passwordUser.setPassword(authentication.getCredentials().toString(), user.getCipherAlgoritm(), 0);\n \n-            authenticated = user.getPassword().equalsIgnoreCase(\n-                    passwordUser.getPassword());\n+            authenticated = user.getPassword().equalsIgnoreCase(passwordUser.getPassword());\n         }\n \n         Authentication result;\n \n         if ((user == null || !user.getSuspended()) && authenticated) {\n             UsernamePasswordAuthenticationToken token =\n-                    new UsernamePasswordAuthenticationToken(\n-                    authentication.getPrincipal(),\n-                    null,\n-                    userDetailsService.loadUserByUsername(\n-                    authentication.getPrincipal().toString()).getAuthorities());\n+                    new UsernamePasswordAuthenticationToken(authentication.getPrincipal(), null,\n+                    userDetailsService.loadUserByUsername(authentication.getPrincipal().toString()).getAuthorities());\n             token.setDetails(authentication.getDetails());\n \n             result = token;\n \n-            LOG.debug(\"User {} authenticated with roles {}\",\n-                    authentication.getPrincipal(), token.getAuthorities());\n+            LOG.debug(\"User {} authenticated with roles {}\", authentication.getPrincipal(), token.getAuthorities());\n \n             if (user != null) {\n                 user.setLastLoginDate(new Date());\n@@ -140,18 +127,14 @@ public Authentication authenticate(final Authentication authentication)\n             }\n \n         } else {\n-            result = authentication;\n-\n             if (user != null && !user.getSuspended()) {\n                 user.setFailedLogins(user.getFailedLogins() + 1);\n                 userDAO.save(user);\n             }\n \n-            LOG.debug(\"User {} not authenticated\",\n-                    authentication.getPrincipal());\n+            LOG.debug(\"User {} not authenticated\", authentication.getPrincipal());\n \n-            throw new BadCredentialsException(\"User \"\n-                    + authentication.getPrincipal() + \" not authenticated\");\n+            throw new BadCredentialsException(\"User \" + authentication.getPrincipal() + \" not authenticated\");\n         }\n \n         return result;"},{"sha":"4fbe7d619dbaf8515bcfc7c2fcd8314123604053","filename":"core/src/main/java/org/syncope/core/util/ApplicationContextManager.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextManager.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -24,9 +24,7 @@ public class ApplicationContextManager {\n \n     private static ConfigurableApplicationContext ctx;\n \n-    public static void setApplicationContext(\n-            final ConfigurableApplicationContext applicationContext) {\n-\n+    public static void setApplicationContext(final ConfigurableApplicationContext applicationContext) {\n         ctx = applicationContext;\n     }\n "},{"sha":"2b427cf20b975a3d996c1f8aebb4eee28b8f1e47","filename":"core/src/main/java/org/syncope/core/util/ApplicationContextProvider.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextProvider.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -26,15 +26,15 @@\n public class ApplicationContextProvider implements ApplicationContextAware {\n \n     /**\n-     *  Wiring the ApplicationContext into a static method.\n+     * Wiring the ApplicationContext into a static method.\n+     *\n      * @param ctx Spring application context\n-     * @throws BeansException  if thrown by application context methods\n+     * @throws BeansException if thrown by application context methods\n      */\n     @Override\n     public void setApplicationContext(final ApplicationContext ctx)\n             throws BeansException {\n \n-        ApplicationContextManager.setApplicationContext(\n-                (ConfigurableApplicationContext) ctx);\n+        ApplicationContextManager.setApplicationContext((ConfigurableApplicationContext) ctx);\n     }\n }"},{"sha":"05110be4b8574e851a0296c856f2797031d5dd68","filename":"core/src/main/java/org/syncope/core/util/EntitlementUtil.java","status":"modified","additions":5,"deletions":14,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEntitlementUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEntitlementUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEntitlementUtil.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -29,22 +29,15 @@\n \n public class EntitlementUtil {\n \n-    private static final Pattern ROLE_ENTITLEMENT_NAME_PATTERN =\n-            Pattern.compile(\"^ROLE_([\\\\d])+\");\n+    private static final Pattern ROLE_ENTITLEMENT_NAME_PATTERN = Pattern.compile(\"^ROLE_([\\\\d])+\");\n \n     public static Set<String> getOwnedEntitlementNames() {\n         final Set<String> result = new HashSet<String>();\n \n         final SecurityContext ctx = SecurityContextHolder.getContext();\n \n-        if (ctx != null\n-                && ctx.getAuthentication() != null\n-                && ctx.getAuthentication().getAuthorities() != null) {\n-\n-            for (GrantedAuthority authority :\n-                    SecurityContextHolder.getContext().\n-                    getAuthentication().getAuthorities()) {\n-\n+        if (ctx != null && ctx.getAuthentication() != null && ctx.getAuthentication().getAuthorities() != null) {\n+            for (GrantedAuthority authority : ctx.getAuthentication().getAuthorities()) {\n                 result.add(authority.getAuthority());\n             }\n         }\n@@ -65,8 +58,7 @@ public static Long getRoleId(final String entitlementName) {\n \n         if (isRoleEntitlement(entitlementName)) {\n             try {\n-                result = Long.valueOf(entitlementName.substring(\n-                        entitlementName.indexOf(\"_\") + 1));\n+                result = Long.valueOf(entitlementName.substring(entitlementName.indexOf(\"_\") + 1));\n             } catch (Throwable t) {\n             }\n         }\n@@ -77,10 +69,9 @@ public static Long getRoleId(final String entitlementName) {\n     public static Set<Long> getRoleIds(final Set<String> entitlements) {\n         Set<Long> result = new HashSet<Long>();\n \n-        Long roleId;\n         for (String entitlement : entitlements) {\n             if (isRoleEntitlement(entitlement)) {\n-                roleId = getRoleId(entitlement);\n+                Long roleId = getRoleId(entitlement);\n                 if (roleId != null) {\n                     result.add(roleId);\n                 }"},{"sha":"65e6ff97c0979930411f0adaf754805f194af1d2","filename":"core/src/main/java/org/syncope/core/workflow/activiti/AbstractActivitiDelegate.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FAbstractActivitiDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FAbstractActivitiDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FAbstractActivitiDelegate.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -36,11 +36,9 @@ public abstract class AbstractActivitiDelegate implements JavaDelegate {\n     /**\n      * Logger.\n      */\n-    protected static final Logger LOG =\n-            LoggerFactory.getLogger(AbstractActivitiDelegate.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractActivitiDelegate.class);\n \n-    protected static final ConfigurableApplicationContext CONTEXT =\n-            ApplicationContextManager.getApplicationContext();\n+    protected static final ConfigurableApplicationContext CONTEXT = ApplicationContextManager.getApplicationContext();\n \n     protected TaskService taskService;\n "},{"sha":"f3e47859f84ac0d42b6cde5cdcf391dab2e846b6","filename":"core/src/main/resources/audit.xml","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Faudit.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Faudit.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Faudit.xml?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+\n+-->\n+<included>\n+  <property resource=\"persistence.properties\"/>\n+  \n+  <appender name=\"audit\" class=\"ch.qos.logback.classic.db.DBAppender\">\n+    <connectionSource class=\"org.syncope.core.audit.JNDIFallbackConnectionSource\">\n+      <param name=\"jndiLocation\" value=\"java:comp/env/jdbc/syncopeDataSource\"/>\n+      <dataSource class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n+        <param name=\"driverClassName\" value=\"${jpa.driverClassName}\"/>\n+        <param name=\"url\" value=\"${jpa.url}\"/>\n+        <param name=\"username\" value=\"${jpa.username}\"/>\n+        <param name=\"password\" value=\"${jpa.password}\"/>\n+      </dataSource>\n+    </connectionSource>\n+  </appender>\n+  \n+  <logger name=\"syncope.audit\" additivity=\"false\">\n+    <level value=\"OFF\"/>\n+    <appender-ref ref=\"audit\"/>\n+  </logger>\n+</included>\n\\ No newline at end of file"},{"sha":"bfeb3257bfb3b57c1fee80e161867ec47c1b1615","filename":"core/src/main/resources/content.xml","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -85,8 +85,6 @@ under the License.\n   <Entitlement name=\"TASK_READ\"/>\n   <Entitlement name=\"TASK_UPDATE\"/>\n   <Entitlement name=\"TASK_DELETE\"/>\n-  <Entitlement name=\"LOGGER_LIST\"/>\n-  <Entitlement name=\"LOGGER_SET_LEVEL\"/>\n   <Entitlement name=\"POLICY_CREATE\"/>\n   <Entitlement name=\"POLICY_LIST\"/>\n   <Entitlement name=\"POLICY_READ\"/>\n@@ -113,5 +111,11 @@ under the License.\n   <Entitlement name=\"REPORT_UPDATE\"/>\n   <Entitlement name=\"REPORT_DELETE\"/>\n   <Entitlement name=\"REPORT_EXECUTE\"/>\n+  <Entitlement name=\"LOG_LIST\"/>\n+  <Entitlement name=\"LOG_SET_LEVEL\"/>\n+  <Entitlement name=\"LOG_DELETE\"/>\n+  <Entitlement name=\"AUDIT_LIST\"/>\n+  <Entitlement name=\"AUDIT_SET_LEVEL\"/>\n+  <Entitlement name=\"AUDIT_DELETE\"/>\n     \n </dataset>"},{"sha":"cb6b007a33a624a9fae26c2166a1924c13968dc2","filename":"core/src/main/resources/logback.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -20,6 +20,8 @@ under the License.\n -->\n <configuration>\n \n+  <include resource=\"audit.xml\"/>\n+\n   <appender name=\"main\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n     <file>${log.directory}/core.log</file>\n     <append>true</append>"},{"sha":"7f944199ccf5a887593737305b4f53efad569b6d","filename":"core/src/main/resources/logback/h2.sql","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fh2.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fh2.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fh2.sql?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -0,0 +1,56 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n+--\n+--   http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n+# This SQL script creates the required tables by ch.qos.logback.classic.db.DBAppender.\n+#\n+# It is intended for H2 databases. \n+\n+DROP TABLE logging_event_exception IF EXISTS;\n+DROP TABLE logging_event_property IF EXISTS;\n+DROP TABLE logging_event IF EXISTS;\n+\n+CREATE TABLE logging_event (\n+  timestmp BIGINT NOT NULL,\n+  formatted_message LONGVARCHAR NOT NULL,\n+  logger_name VARCHAR(256) NOT NULL,\n+  level_string VARCHAR(256) NOT NULL,\n+  thread_name VARCHAR(256),\n+  reference_flag SMALLINT,\n+  arg0 VARCHAR(256),\n+  arg1 VARCHAR(256),\n+  arg2 VARCHAR(256),\n+  arg3 VARCHAR(256),\n+  caller_filename VARCHAR(256), \n+  caller_class VARCHAR(256), \n+  caller_method VARCHAR(256), \n+  caller_line CHAR(4),\n+  event_id IDENTITY NOT NULL);\n+\n+\n+CREATE TABLE logging_event_property (\n+  event_id BIGINT NOT NULL,\n+  mapped_key  VARCHAR(254) NOT NULL,\n+  mapped_value LONGVARCHAR,\n+  PRIMARY KEY(event_id, mapped_key),\n+  FOREIGN KEY (event_id) REFERENCES logging_event(event_id));\n+\n+CREATE TABLE logging_event_exception (\n+  event_id BIGINT NOT NULL,\n+  i SMALLINT NOT NULL,\n+  trace_line VARCHAR(256) NOT NULL,\n+  PRIMARY KEY(event_id, i),\n+  FOREIGN KEY (event_id) REFERENCES logging_event(event_id));"},{"sha":"cd8cb55d41ac7a7b3ace9f37d9619231f362ea74","filename":"core/src/main/resources/logback/hsqldb.sql","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fhsqldb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fhsqldb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fhsqldb.sql?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -0,0 +1,56 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n+--\n+--   http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n+# This SQL script creates the required tables by ch.qos.logback.classic.db.DBAppender.\n+#\n+# It is intended for HSQL databases. It has been tested on HSQL 1.8.07.\n+\n+DROP TABLE logging_event_exception IF EXISTS;\n+DROP TABLE logging_event_property IF EXISTS;\n+DROP TABLE logging_event IF EXISTS;\n+\n+CREATE TABLE logging_event (\n+  timestmp BIGINT NOT NULL,\n+  formatted_message LONGVARCHAR NOT NULL,\n+  logger_name VARCHAR(256) NOT NULL,\n+  level_string VARCHAR(256) NOT NULL,\n+  thread_name VARCHAR(256),\n+  reference_flag SMALLINT,\n+  arg0 VARCHAR(256),\n+  arg1 VARCHAR(256),\n+  arg2 VARCHAR(256),\n+  arg3 VARCHAR(256),\n+  caller_filename VARCHAR(256), \n+  caller_class VARCHAR(256), \n+  caller_method VARCHAR(256), \n+  caller_line CHAR(4),\n+  event_id BIGINT NOT NULL IDENTITY);\n+\n+\n+CREATE TABLE logging_event_property (\n+  event_id BIGINT NOT NULL,\n+  mapped_key  VARCHAR(254) NOT NULL,\n+  mapped_value LONGVARCHAR,\n+  PRIMARY KEY(event_id, mapped_key),\n+  FOREIGN KEY (event_id) REFERENCES logging_event(event_id));\n+\n+CREATE TABLE logging_event_exception (\n+  event_id BIGINT NOT NULL,\n+  i SMALLINT NOT NULL,\n+  trace_line VARCHAR(256) NOT NULL,\n+  PRIMARY KEY(event_id, i),\n+  FOREIGN KEY (event_id) REFERENCES logging_event(event_id));\n\\ No newline at end of file"},{"sha":"e3ba00572987ffa4cdaddf129a7e0e9bf9d1b683","filename":"core/src/main/resources/logback/mysql.sql","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fmysql.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fmysql.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fmysql.sql?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -0,0 +1,71 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n+--\n+--   http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n+# This SQL script creates the required tables by ch.qos.logback.classic.db.DBAppender.\n+#\n+# It is intended for MySQL databases. It has been tested on MySQL 5.1.37 \n+# on Linux\n+\n+BEGIN;\n+DROP TABLE IF EXISTS logging_event_property;\n+DROP TABLE IF EXISTS logging_event_exception;\n+DROP TABLE IF EXISTS logging_event;\n+COMMIT;\n+\n+\n+BEGIN;\n+CREATE TABLE logging_event \n+  (\n+    timestmp         BIGINT NOT NULL,\n+    formatted_message  TEXT NOT NULL,\n+    logger_name       VARCHAR(254) NOT NULL,\n+    level_string      VARCHAR(254) NOT NULL,\n+    thread_name       VARCHAR(254),\n+    reference_flag    SMALLINT,\n+    arg0              VARCHAR(254),\n+    arg1              VARCHAR(254),\n+    arg2              VARCHAR(254),\n+    arg3              VARCHAR(254),\n+    caller_filename   VARCHAR(254) NOT NULL,\n+    caller_class      VARCHAR(254) NOT NULL,\n+    caller_method     VARCHAR(254) NOT NULL,\n+    caller_line       CHAR(4) NOT NULL,\n+    event_id          BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY\n+  );\n+COMMIT;\n+\n+BEGIN;\n+CREATE TABLE logging_event_property\n+  (\n+    event_id\t      BIGINT NOT NULL,\n+    mapped_key        VARCHAR(254) NOT NULL,\n+    mapped_value      TEXT,\n+    PRIMARY KEY(event_id, mapped_key),\n+    FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n+  );\n+COMMIT;\n+\n+BEGIN;\n+CREATE TABLE logging_event_exception\n+  (\n+    event_id         BIGINT NOT NULL,\n+    i                SMALLINT NOT NULL,\n+    trace_line       VARCHAR(254) NOT NULL,\n+    PRIMARY KEY(event_id, i),\n+    FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n+  );\n+COMMIT;\n\\ No newline at end of file"},{"sha":"1963991088d28d50ab5a7b9eb3a46d07e238d8c9","filename":"core/src/main/resources/logback/oracle.sql","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Foracle.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Foracle.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Foracle.sql?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -0,0 +1,90 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n+--\n+--   http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n+-- This SQL script creates the required tables by ch.qos.logback.classic.db.DBAppender\n+--\n+-- It is intended for Oracle 9i, 10g and 11g databases. Tested on version 9.2, \n+-- 10g and 11g.\n+\n+-- The following lines are useful in cleaning any previously existing tables \n+\n+--drop TRIGGER logging_event_id_seq_trig; \n+--drop SEQUENCE logging_event_id_seq; \n+--drop table logging_event_property; \n+--drop table logging_event_exception; \n+--drop table logging_event; \n+\n+\n+CREATE SEQUENCE logging_event_id_seq MINVALUE 1 START WITH 1;\n+\n+CREATE TABLE logging_event \n+  (\n+    timestmp         NUMBER(20) NOT NULL,\n+    formatted_message  VARCHAR2(4000) NOT NULL,\n+    logger_name       VARCHAR(254) NOT NULL,\n+    level_string      VARCHAR(254) NOT NULL,\n+    thread_name       VARCHAR(254),\n+    reference_flag    SMALLINT,\n+    arg0              VARCHAR(254),\n+    arg1              VARCHAR(254),\n+    arg2              VARCHAR(254),\n+    arg3              VARCHAR(254),\n+    caller_filename   VARCHAR(254) NOT NULL,\n+    caller_class      VARCHAR(254) NOT NULL,\n+    caller_method     VARCHAR(254) NOT NULL,\n+    caller_line       CHAR(4) NOT NULL,\n+    event_id          NUMBER(10) PRIMARY KEY\n+  );\n+\n+\n+-- the / suffix may or may not be needed depending on your SQL Client\n+-- Some SQL Clients, e.g. SQuirrel SQL has trouble with the following\n+-- trigger creation command, while SQLPlus (the basic SQL Client which\n+-- ships with Oracle) has no trouble at all.\n+\n+CREATE TRIGGER logging_event_id_seq_trig\n+  BEFORE INSERT ON logging_event\n+  FOR EACH ROW  \n+  BEGIN  \n+    SELECT logging_event_id_seq.NEXTVAL \n+    INTO   :NEW.event_id \n+    FROM   DUAL;  \n+  END;\n+/\n+\n+\n+CREATE TABLE logging_event_property\n+  (\n+    event_id\t      NUMBER(10) NOT NULL,\n+    mapped_key        VARCHAR2(254) NOT NULL,\n+    mapped_value      VARCHAR2(1024),\n+    PRIMARY KEY(event_id, mapped_key),\n+    FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n+  );\n+  \n+CREATE TABLE logging_event_exception\n+  (\n+    event_id         NUMBER(10) NOT NULL,\n+    i                SMALLINT NOT NULL,\n+    trace_line       VARCHAR2(254) NOT NULL,\n+    PRIMARY KEY(event_id, i),\n+    FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n+  );\n+  \n+\n+\n+"},{"sha":"a4126dbaf99f7e37f54c8bf840fc25c23b68383c","filename":"core/src/main/resources/logback/postgresql.sql","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fpostgresql.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fpostgresql.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback%2Fpostgresql.sql?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -0,0 +1,66 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n+--\n+--   http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n+-- This SQL script creates the required tables by ch.qos.logback.classic.db.DBAppender\n+--\n+-- It is intended for PostgreSQL databases.\n+\n+DROP TABLE    logging_event_property;\n+DROP TABLE    logging_event_exception;\n+DROP TABLE    logging_event;\n+DROP SEQUENCE logging_event_id_seq;\n+\n+\n+CREATE SEQUENCE logging_event_id_seq MINVALUE 1 START 1;\n+\n+\n+CREATE TABLE logging_event \n+  (\n+    timestmp         BIGINT NOT NULL,\n+    formatted_message  TEXT NOT NULL,\n+    logger_name       VARCHAR(254) NOT NULL,\n+    level_string      VARCHAR(254) NOT NULL,\n+    thread_name       VARCHAR(254),\n+    reference_flag    SMALLINT,\n+    arg0              VARCHAR(254),\n+    arg1              VARCHAR(254),\n+    arg2              VARCHAR(254),\n+    arg3              VARCHAR(254),\n+    caller_filename   VARCHAR(254) NOT NULL,\n+    caller_class      VARCHAR(254) NOT NULL,\n+    caller_method     VARCHAR(254) NOT NULL,\n+    caller_line       CHAR(4) NOT NULL,\n+    event_id          BIGINT DEFAULT nextval('logging_event_id_seq') PRIMARY KEY\n+  );\n+\n+CREATE TABLE logging_event_property\n+  (\n+    event_id\t      BIGINT NOT NULL,\n+    mapped_key        VARCHAR(254) NOT NULL,\n+    mapped_value      VARCHAR(1024),\n+    PRIMARY KEY(event_id, mapped_key),\n+    FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n+  );\n+\n+CREATE TABLE logging_event_exception\n+  (\n+    event_id         BIGINT NOT NULL,\n+    i                SMALLINT NOT NULL,\n+    trace_line       VARCHAR(254) NOT NULL,\n+    PRIMARY KEY(event_id, i),\n+    FOREIGN KEY (event_id) REFERENCES logging_event(event_id)\n+  );"},{"sha":"4183ca54d936bb6cb211986fd3b495735d1a974a","filename":"core/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -21,3 +21,4 @@ jpa.password=syncope\n jpa.dialect=org.apache.openjpa.jdbc.sql.PostgresDictionary\n quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n quartz.sql=tables_postgres.sql\n+logback.sql=postgresql.sql"},{"sha":"92b1217aa94d97f6e9936d6bb04926cd5049778d","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -45,17 +45,15 @@ under the License.\n \n     <!-- Use JNDI datasource as default but, when not available, revert to\n          local datasource, using different properties for execution and testing -->\n-  <bean id=\"dataSource\"\n-          class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n+  <bean id=\"dataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n     <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeDataSource\"/>\n     <property name=\"defaultObject\" ref=\"localDataSource\"/>\n   </bean>\n-  <bean id=\"localDataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\">\n+  <bean id=\"localDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n     <property name=\"driverClassName\" value=\"${jpa.driverClassName}\"/>\n     <property name=\"url\" value=\"${jpa.url}\"/>\n     <property name=\"username\" value=\"${jpa.username}\"/>\n     <property name=\"password\" value=\"${jpa.password}\"/>\n-    <property name=\"initialSize\" value=\"10\"/>\n   </bean>\n \n   <bean id=\"entityManager\" class=\"org.springframework.orm.jpa.support.SharedEntityManagerBean\">\n@@ -68,5 +66,5 @@ under the License.\n   <tx:annotation-driven/>\n \n   <bean id=\"validator\"\n-          class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"/>\n+        class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"/>\n </beans>"},{"sha":"bc58e6dfe5a7f611e35e76fc0dd4539205eee689","filename":"core/src/main/resources/quartz/tables_h2.sql","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_h2.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_h2.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_h2.sql?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -1,14 +1,19 @@\n--- Licensed under the Apache License, Version 2.0 (the \"License\");\n--- you may not use this file except in compliance with the License.\n--- You may obtain a copy of the License at\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n --\n---       http://www.apache.org/licenses/LICENSE-2.0\n+--   http://www.apache.org/licenses/LICENSE-2.0\n --\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n \n -- Thanks to Amir Kibbar and Peter Rietzler for contributing the schema for H2 database, \n -- and verifying that it works with Quartz's StdJDBCDelegate"},{"sha":"2cc96bd85f0fe842546c1acdd8ad96b9035da457","filename":"core/src/main/resources/quartz/tables_hsqldb.sql","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_hsqldb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_hsqldb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_hsqldb.sql?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -1,14 +1,20 @@\n--- Licensed under the Apache License, Version 2.0 (the \"License\");\n--- you may not use this file except in compliance with the License.\n--- You may obtain a copy of the License at\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n --\n---       http://www.apache.org/licenses/LICENSE-2.0\n+--   http://www.apache.org/licenses/LICENSE-2.0\n --\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n CREATE TABLE qrtz_job_details\n (\n JOB_NAME VARCHAR(200) NOT NULL,"},{"sha":"1c0381737eb612699343f94b37ca59a3b487f3e1","filename":"core/src/main/resources/quartz/tables_mysql.sql","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql.sql?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -1,14 +1,20 @@\n--- Licensed under the Apache License, Version 2.0 (the \"License\");\n--- you may not use this file except in compliance with the License.\n--- You may obtain a copy of the License at\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n --\n---       http://www.apache.org/licenses/LICENSE-2.0\n+--   http://www.apache.org/licenses/LICENSE-2.0\n --\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n CREATE TABLE QRTZ_JOB_DETAILS\n   (\n     JOB_NAME  VARCHAR(200) NOT NULL,"},{"sha":"b3bed50aeb3c07c9d85e107bbf10d15eaf65adcd","filename":"core/src/main/resources/quartz/tables_mysql_innodb.sql","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql_innodb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql_innodb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql_innodb.sql?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -1,14 +1,20 @@\n--- Licensed under the Apache License, Version 2.0 (the \"License\");\n--- you may not use this file except in compliance with the License.\n--- You may obtain a copy of the License at\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n --\n---       http://www.apache.org/licenses/LICENSE-2.0\n+--   http://www.apache.org/licenses/LICENSE-2.0\n --\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n CREATE TABLE QRTZ_JOB_DETAILS(\n JOB_NAME VARCHAR(200) NOT NULL,\n JOB_GROUP VARCHAR(200) NOT NULL,"},{"sha":"453448cbfea3fb5b627a353a78508483db440667","filename":"core/src/main/resources/quartz/tables_oracle.sql","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -1,14 +1,20 @@\n--- Licensed under the Apache License, Version 2.0 (the \"License\");\n--- you may not use this file except in compliance with the License.\n--- You may obtain a copy of the License at\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n --\n---       http://www.apache.org/licenses/LICENSE-2.0\n+--   http://www.apache.org/licenses/LICENSE-2.0\n --\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n CREATE TABLE qrtz_job_details\n   (\n     JOB_NAME  VARCHAR2(200) NOT NULL,"},{"sha":"30f1541d21f8ee7f04618518ff0b30548bb2f3ff","filename":"core/src/main/resources/quartz/tables_postgres.sql","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_postgres.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_postgres.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_postgres.sql?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -1,14 +1,20 @@\n--- Licensed under the Apache License, Version 2.0 (the \"License\");\n--- you may not use this file except in compliance with the License.\n--- You may obtain a copy of the License at\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n --\n---       http://www.apache.org/licenses/LICENSE-2.0\n+--   http://www.apache.org/licenses/LICENSE-2.0\n --\n--- Unless required by applicable law or agreed to in writing, software\n--- distributed under the License is distributed on an \"AS IS\" BASIS,\n--- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n--- See the License for the specific language governing permissions and\n--- limitations under the License.\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n CREATE TABLE qrtz_job_details\n   (\n     JOB_NAME  VARCHAR(200) NOT NULL,"},{"sha":"1bd67b5c9bd704301707923249e275f882300387","filename":"core/src/main/resources/schedulingContext.xml","status":"modified","additions":2,"deletions":21,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -22,29 +22,10 @@ under the License.\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n-\n-  <bean id=\"quartzDbInitializer\" class=\"org.springframework.jdbc.datasource.init.DataSourceInitializer\">\n-    <property name=\"dataSource\" ref=\"dataSource\"/>\n-    <property name=\"enabled\" value=\"true\"/>\n-    <property name=\"databasePopulator\">\n-      <bean class=\"org.springframework.jdbc.datasource.init.ResourceDatabasePopulator\">\n-        <property name=\"continueOnError\" value=\"true\"/>\n-        <property name=\"ignoreFailedDrops\" value=\"true\"/>\n-        <property name=\"sqlScriptEncoding\" value=\"UTF-8\"/>\n-        <property name=\"scripts\">\n-          <array>\n-            <value type=\"org.springframework.core.io.Resource\">\n-              classpath:/quartz/${quartz.sql}\n-            </value>\n-          </array>\n-        </property>\n-      </bean>\n-    </property>\n-  </bean>\n     \n   <bean id=\"scheduler\"\n-          class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\"\n-          lazy-init=\"false\" depends-on=\"quartzDbInitializer\">\n+        class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\"\n+        lazy-init=\"false\" depends-on=\"nonJPAdbInitializer\">\n     <property name=\"autoStartup\" value=\"true\"/>\n     <property name=\"applicationContextSchedulerContextKey\" value=\"applicationContext\"/>\n     <property name=\"waitForJobsToCompleteOnShutdown\" value=\"true\"/>"},{"sha":"ac968f9b224d832d066213d9d8b80cecf8654049","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":26,"deletions":5,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -41,13 +41,34 @@ under the License.\n   <bean class=\"org.syncope.core.util.ApplicationContextProvider\"/>\n \n   <context:component-scan base-package=\"org.syncope.core.init\"/>\n+  <context:component-scan base-package=\"org.syncope.core.audit\"/>\n   <context:component-scan base-package=\"org.syncope.core.util\"/>\n-    \n-  <bean id=\"propagationManager\"\n-          class=\"org.syncope.core.propagation.PropagationManager\"/>\n \n-  <bean id=\"notificationManager\"\n-          class=\"org.syncope.core.notification.NotificationManager\"/>\n+  <bean id=\"nonJPAdbInitializer\" class=\"org.springframework.jdbc.datasource.init.DataSourceInitializer\">\n+    <property name=\"dataSource\" ref=\"dataSource\"/>\n+    <property name=\"enabled\" value=\"true\"/>\n+    <property name=\"databasePopulator\">\n+      <bean class=\"org.springframework.jdbc.datasource.init.ResourceDatabasePopulator\">\n+        <property name=\"continueOnError\" value=\"true\"/>\n+        <property name=\"ignoreFailedDrops\" value=\"true\"/>\n+        <property name=\"sqlScriptEncoding\" value=\"UTF-8\"/>\n+        <property name=\"scripts\">\n+          <array>\n+            <value type=\"org.springframework.core.io.Resource\">\n+              classpath:/quartz/${quartz.sql}\n+            </value>\n+            <value type=\"org.springframework.core.io.Resource\">\n+              classpath:/logback/${logback.sql}\n+            </value>\n+          </array>\n+        </property>\n+      </bean>\n+    </property>\n+  </bean>\n+  \n+  <bean id=\"propagationManager\" class=\"org.syncope.core.propagation.PropagationManager\"/>\n+  <bean id=\"notificationManager\" class=\"org.syncope.core.notification.NotificationManager\"/>\n+  <bean id=\"auditManager\" class=\"org.syncope.core.audit.AuditManager\"/>\n           \n   <bean id=\"jexlEngine\" class=\"org.apache.commons.jexl2.JexlEngine\">\n     <property name=\"cache\" value=\"512\"/>"},{"sha":"3f29c07415374a8a4112a2a48d32575280ce78e4","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":30,"deletions":63,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -21,8 +21,7 @@\n <%@page import=\"org.slf4j.Logger\"%>\n <%@page import=\"org.syncope.core.rest.controller.AbstractController\"%>\n \n-<%!    static final Logger LOG =\n-            LoggerFactory.getLogger(AbstractController.class);%>\n+<%!    static final Logger LOG = LoggerFactory.getLogger(AbstractController.class);%>\n \n <%\n     Throwable ex = pageContext.getErrorData().getThrowable();\n@@ -32,65 +31,49 @@\n     int statusCode = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n \n     if (ex instanceof InvalidEntityException) {\n-        SyncopeClientExceptionType exType =\n-                SyncopeClientExceptionType.valueOf(\"Invalid\"\n-                + ((InvalidEntityException) ex).getEntityClassSimpleName());\n+        SyncopeClientExceptionType exType = SyncopeClientExceptionType.valueOf(\n+                \"Invalid\" + ((InvalidEntityException) ex).getEntityClassSimpleName());\n \n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                exType.getHeaderValue());\n+        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\n \n         for (Map.Entry<Class, Set<EntityViolationType>> violation :\n                 ((InvalidEntityException) ex).getViolations().entrySet()) {\n \n             for (EntityViolationType violationType : violation.getValue()) {\n-                response.addHeader(\n-                        exType.getElementHeaderName(),\n-                        violation.getClass().getSimpleName() + \": \"\n-                        + violationType);\n+                response.addHeader(exType.getElementHeaderName(),\n+                        violation.getClass().getSimpleName() + \": \" + violationType);\n             }\n         }\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     } else if (ex instanceof NotFoundException) {\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                 SyncopeClientExceptionType.NotFound.getHeaderValue());\n-        response.setHeader(\n-                SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n-                ex.getMessage());\n+        response.setHeader(SyncopeClientExceptionType.NotFound.getElementHeaderName(), ex.getMessage());\n \n         statusCode = HttpServletResponse.SC_NOT_FOUND;\n     } else if (ex instanceof WorkflowException) {\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                 SyncopeClientExceptionType.Workflow.getHeaderValue());\n-        response.setHeader(\n-                SyncopeClientExceptionType.Workflow.getElementHeaderName(),\n-                ex.getCause().getMessage());\n+        response.setHeader(SyncopeClientExceptionType.Workflow.getElementHeaderName(), ex.getCause().getMessage());\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     } else if (ex instanceof org.apache.ibatis.exceptions.PersistenceException) {\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                 SyncopeClientExceptionType.Workflow.getHeaderValue());\n         response.setHeader(\n                 SyncopeClientExceptionType.Workflow.getElementHeaderName(), \"Currently unavailable. Please try later.\");\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     } else if (ex instanceof PropagationException) {\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                 SyncopeClientExceptionType.Propagation.getHeaderValue());\n-        response.setHeader(\n-                SyncopeClientExceptionType.Propagation.getElementHeaderName(),\n+        response.setHeader(SyncopeClientExceptionType.Propagation.getElementHeaderName(),\n                 ((PropagationException) ex).getResourceName());\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     } else if (ex instanceof SyncopeClientCompositeErrorException) {\n-        for (SyncopeClientException sce :\n-                ((SyncopeClientCompositeErrorException) ex).getExceptions()) {\n-\n+        for (SyncopeClientException sce : ((SyncopeClientCompositeErrorException) ex).getExceptions()) {\n             response.addHeader(\n                     SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, sce.getType().getHeaderValue());\n \n@@ -99,60 +82,44 @@\n             }\n         }\n \n-        statusCode = ((SyncopeClientCompositeErrorException) ex).getStatusCode().\n-                value();\n+        statusCode = ((SyncopeClientCompositeErrorException) ex).getStatusCode().value();\n     } else if (ex instanceof MissingConfKeyException) {\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, SyncopeClientExceptionType.NotFound.getHeaderValue());\n-        response.setHeader(\n-                SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n+        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.NotFound.getHeaderValue());\n+        response.setHeader(SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n                 ((MissingConfKeyException) ex).getConfKey());\n \n         statusCode = HttpServletResponse.SC_NOT_FOUND;\n     } else if (ex instanceof InvalidSearchConditionException) {\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                 SyncopeClientExceptionType.InvalidSearchCondition.getHeaderValue());\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     } else if (ex instanceof UnauthorizedRoleException) {\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                 SyncopeClientExceptionType.UnauthorizedRole.getHeaderValue());\n-        response.setHeader(\n-                SyncopeClientExceptionType.UnauthorizedRole.getElementHeaderName(),\n-                ex.getMessage());\n+        response.setHeader(SyncopeClientExceptionType.UnauthorizedRole.getElementHeaderName(), ex.getMessage());\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-    } else if (ex instanceof DataIntegrityViolationException\n-            || ex instanceof JpaSystemException) {\n-\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+    } else if (ex instanceof DataIntegrityViolationException || ex instanceof JpaSystemException) {\n+        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                 SyncopeClientExceptionType.DataIntegrityViolation.getHeaderValue());\n-        response.setHeader(\n-                SyncopeClientExceptionType.DataIntegrityViolation.getElementHeaderName(),\n-                ex.getCause() == null ? ex.getMessage() : ex.getCause().\n-                getMessage());\n+        response.setHeader(SyncopeClientExceptionType.DataIntegrityViolation.getElementHeaderName(),\n+                ex.getCause() == null ? ex.getMessage() : ex.getCause().getMessage());\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     } else if (ex instanceof PersistenceException) {\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                 SyncopeClientExceptionType.GenericPersistence.getHeaderValue());\n-        response.setHeader(\n-                SyncopeClientExceptionType.GenericPersistence.getElementHeaderName(),\n+        response.setHeader(SyncopeClientExceptionType.GenericPersistence.getElementHeaderName(),\n                 ex.getCause() == null ? ex.getMessage() : ex.getCause().getMessage());\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     } else if (ex instanceof ConfigurationException) {\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                 SyncopeClientExceptionType.InvalidExternalResource.getHeaderValue());\n-        response.setHeader(\n-                SyncopeClientExceptionType.InvalidExternalResource.getElementHeaderName(),\n-                ex.getCause() == null ? ex.getMessage() : ex.getCause().\n-                getMessage());\n+        response.setHeader(SyncopeClientExceptionType.InvalidExternalResource.getElementHeaderName(),\n+                ex.getCause() == null ? ex.getMessage() : ex.getCause().getMessage());\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     }"},{"sha":"450e81a159899896ba8a78e9a9b376228df4f516","filename":"core/src/test/java/org/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -40,16 +40,14 @@ public class EntitlementTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n-        // 59 real entitlements + 9 role entitlements\n-        assertEquals(\"did not get expected number of entitlements \",\n-                74, list.size());\n+        // 69 real entitlements + 9 role entitlements\n+        assertEquals(\"did not get expected number of entitlements \", 78, list.size());\n     }\n \n     @Test\n     public void findByName() {\n         Entitlement entitlement = entitlementDAO.find(\"base\");\n-        assertNotNull(\"did not find expected entitlement\",\n-                entitlement);\n+        assertNotNull(\"did not find expected entitlement\", entitlement);\n     }\n \n     @Test\n@@ -67,8 +65,7 @@ public void save() {\n     @Test\n     public void delete() {\n         Entitlement entitlement = entitlementDAO.find(\"base\");\n-        assertNotNull(\"did not find expected entitlement\",\n-                entitlement);\n+        assertNotNull(\"did not find expected entitlement\", entitlement);\n \n         List<SyncopeRole> roles = roleDAO.findByEntitlement(entitlement);\n         assertEquals(\"expected two roles\", 2, roles.size());"},{"sha":"4bf5df6a6baee9371477af69906c31359ff8de01","filename":"core/src/test/java/org/syncope/core/rest/LoggerTestITCase.java","status":"modified","additions":15,"deletions":10,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -24,14 +24,21 @@\n import java.util.List;\n import org.junit.Test;\n import org.syncope.client.to.LoggerTO;\n-import org.syncope.types.LoggerLevel;\n+import org.syncope.types.SyncopeLoggerLevel;\n \n public class LoggerTestITCase extends AbstractTest {\n \n     @Test\n     public void list() {\n-        List<LoggerTO> loggers = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"logger/list\", LoggerTO[].class));\n+        List<LoggerTO> loggers =\n+                Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/log/list\", LoggerTO[].class));\n+        assertNotNull(loggers);\n+        assertFalse(loggers.isEmpty());\n+        for (LoggerTO logger : loggers) {\n+            assertNotNull(logger);\n+        }\n+\n+        loggers = Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/audit/list\", LoggerTO[].class));\n         assertNotNull(loggers);\n         assertFalse(loggers.isEmpty());\n         for (LoggerTO logger : loggers) {\n@@ -41,19 +48,17 @@ public void list() {\n \n     @Test\n     public void setLevel() {\n-        List<LoggerTO> loggers = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"logger/list\", LoggerTO[].class));\n+        List<LoggerTO> loggers = Arrays.asList(\n+                restTemplate.getForObject(BASE_URL + \"logger/log/list\", LoggerTO[].class));\n         assertNotNull(loggers);\n         int startSize = loggers.size();\n \n         LoggerTO logger = restTemplate.postForObject(\n-                BASE_URL + \"logger/set/{name}/{level}\",\n-                null, LoggerTO.class, \"TEST\", \"INFO\");\n+                BASE_URL + \"logger/log/{name}/{level}\", null, LoggerTO.class, \"TEST\", \"INFO\");\n         assertNotNull(logger);\n-        assertEquals(LoggerLevel.INFO, logger.getLevel());\n+        assertEquals(SyncopeLoggerLevel.INFO, logger.getLevel());\n \n-        loggers = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"logger/list\", LoggerTO[].class));\n+        loggers = Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/log/list\", LoggerTO[].class));\n         assertNotNull(loggers);\n         assertEquals(startSize + 1, loggers.size());\n     }"},{"sha":"23d598d63bfe93893a263705e7590e7fd68cd894","filename":"core/src/test/resources/content.xml","status":"modified","additions":202,"deletions":196,"changes":398,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9"},{"sha":"5380187a59e9019867d45c27ef4293a6d84dcb9b","filename":"core/src/test/resources/mysql/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fresources%2Fmysql%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fresources%2Fmysql%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fmysql%2Fpersistence.properties?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -21,3 +21,4 @@ jpa.password=syncope\n jpa.dialect=org.apache.openjpa.jdbc.sql.MySQLDictionary\n quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n quartz.sql=tables_mysql_innodb.sql\n+logback.sql=mysql.sql\n\\ No newline at end of file"},{"sha":"833645e4e7b930ac06676d0a58ba9e2e8e21c992","filename":"core/src/test/resources/oracle/persistence.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -21,4 +21,5 @@ jpa.password=syncope\n jpa.dialect=org.apache.openjpa.jdbc.sql.OracleDictionary\n quartz.jobstore=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n quartz.sql=tables_oracle.sql\n-database.schema=SYNCOPE\n+logback.sql=oracle.sql\n+database.schema=SYNCOPE\n\\ No newline at end of file"},{"sha":"7158b6670d3666c8af32f2dfd41f1e9042e20614","filename":"core/src/test/resources/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -21,3 +21,4 @@ jpa.password=\n jpa.dialect=org.apache.openjpa.jdbc.sql.H2Dictionary\n quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n quartz.sql=tables_h2.sql\n+logback.sql=h2.sql\n\\ No newline at end of file"},{"sha":"50dcd25b2bcd488f1de0f9394a4fcc916f385f82","filename":"core/src/test/resources/postgres/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fresources%2Fpostgres%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/core%2Fsrc%2Ftest%2Fresources%2Fpostgres%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fpostgres%2Fpersistence.properties?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -21,3 +21,4 @@ jpa.password=syncope\n jpa.dialect=org.apache.openjpa.jdbc.sql.PostgresDictionary\n quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n quartz.sql=tables_postgres.sql\n+logback.sql=postgresql.sql\n\\ No newline at end of file"},{"sha":"fc605a5cbd041d673ac5b67e81cbc0026ab793db","filename":"parent/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/parent%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9/parent%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/parent%2Fpom.xml?ref=90d9c46a8dd0da6f6b876e158cec37b8b4dfd9a9","patch":"@@ -229,7 +229,7 @@ under the License.\n \n     <h2.version>1.3.164</h2.version>\n \n-    <logback.version>1.0.0</logback.version>\n+    <logback.version>1.0.1</logback.version>\n     <slf4j.version>1.6.4</slf4j.version>\n \n     <junit.version>4.10</junit.version>"}]}