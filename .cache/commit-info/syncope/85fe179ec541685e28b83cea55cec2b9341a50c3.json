{"sha":"85fe179ec541685e28b83cea55cec2b9341a50c3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg1ZmUxNzllYzU0MTY4NWUyOGI4M2NlYTU1Y2VjMmI5MzQxYTUwYzM=","commit":{"author":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-11-20T17:00:24Z"},"committer":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-11-20T17:06:10Z"},"message":"[SYNCOPE-1399] Added fix for Elasticsearch v6.x","tree":{"sha":"3267823ae79d3e2e4dbf9dfb70ffea54b6a29a56","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3267823ae79d3e2e4dbf9dfb70ffea54b6a29a56"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/85fe179ec541685e28b83cea55cec2b9341a50c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/85fe179ec541685e28b83cea55cec2b9341a50c3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/85fe179ec541685e28b83cea55cec2b9341a50c3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/85fe179ec541685e28b83cea55cec2b9341a50c3/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"parents":[{"sha":"ba9fbc4a530bd718d74fa03609926a2d5a28466e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ba9fbc4a530bd718d74fa03609926a2d5a28466e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ba9fbc4a530bd718d74fa03609926a2d5a28466e"}],"stats":{"total":236,"additions":167,"deletions":69},"files":[{"sha":"57ba53c0e75aa8dace2675c9f690719b83e5adb3","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchIndexManager.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85fe179ec541685e28b83cea55cec2b9341a50c3/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85fe179ec541685e28b83cea55cec2b9341a50c3/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java?ref=85fe179ec541685e28b83cea55cec2b9341a50c3","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.elasticsearch.action.delete.DeleteResponse;\n import org.elasticsearch.action.get.GetResponse;\n import org.elasticsearch.action.index.IndexResponse;\n@@ -48,15 +47,16 @@ public class ElasticsearchIndexManager {\n \n     @TransactionalEventListener\n     public void after(final AnyCreatedUpdatedEvent<Any<?>> event) throws IOException {\n-        GetResponse getResponse = client.prepareGet(AuthContextUtils.getDomain().toLowerCase(),\n+        GetResponse getResponse = client.prepareGet(\n+                elasticsearchUtils.getContextDomainName(event.getAny().getType().getKind()),\n                 event.getAny().getType().getKind().name(),\n                 event.getAny().getKey()).\n                 get();\n         if (getResponse.isExists()) {\n             LOG.debug(\"About to update index for {}\", event.getAny());\n \n             UpdateResponse response = client.prepareUpdate(\n-                    AuthContextUtils.getDomain().toLowerCase(),\n+                    elasticsearchUtils.getContextDomainName(event.getAny().getType().getKind()),\n                     event.getAny().getType().getKind().name(),\n                     event.getAny().getKey()).\n                     setRetryOnConflict(elasticsearchUtils.getRetryOnConflict()).\n@@ -67,7 +67,7 @@ public void after(final AnyCreatedUpdatedEvent<Any<?>> event) throws IOException\n             LOG.debug(\"About to create index for {}\", event.getAny());\n \n             IndexResponse response = client.prepareIndex(\n-                    AuthContextUtils.getDomain().toLowerCase(),\n+                    elasticsearchUtils.getContextDomainName(event.getAny().getType().getKind()),\n                     event.getAny().getType().getKind().name(),\n                     event.getAny().getKey()).\n                     setSource(elasticsearchUtils.builder(event.getAny())).\n@@ -82,7 +82,7 @@ public void after(final AnyDeletedEvent event) {\n         LOG.debug(\"About to delete index for {}[{}]\", event.getAnyTypeKind(), event.getAnyKey());\n \n         DeleteResponse response = client.prepareDelete(\n-                AuthContextUtils.getDomain().toLowerCase(),\n+                elasticsearchUtils.getContextDomainName(event.getAnyTypeKind()),\n                 event.getAnyTypeKind().name(),\n                 event.getAnyKey()).\n                 get();"},{"sha":"f5b69bece80f0551ecf68544bf925b9743ab4ce4","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85fe179ec541685e28b83cea55cec2b9341a50c3/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85fe179ec541685e28b83cea55cec2b9341a50c3/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=85fe179ec541685e28b83cea55cec2b9341a50c3","patch":"@@ -24,6 +24,7 @@\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -33,6 +34,7 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.common.xcontent.XContentFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -182,4 +184,13 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n \n         return builder;\n     }\n+\n+    public String getContextDomainName(final AnyTypeKind kind) {\n+        return AuthContextUtils.getDomain().toLowerCase()\n+                + (kind.equals(AnyTypeKind.USER)\n+                ? \"_user\"\n+                : (kind.equals(AnyTypeKind.GROUP)\n+                ? \"_group\"\n+                : \"_anyobject\"));\n+    }\n }"},{"sha":"02b4a986da51bc04021a68a757ccc29f18c9e7a9","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85fe179ec541685e28b83cea55cec2b9341a50c3/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85fe179ec541685e28b83cea55cec2b9341a50c3/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=85fe179ec541685e28b83cea55cec2b9341a50c3","patch":"@@ -52,7 +52,6 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n import org.elasticsearch.action.search.SearchRequestBuilder;\n import org.elasticsearch.action.search.SearchType;\n@@ -119,8 +118,7 @@ private SearchRequestBuilder searchRequestBuilder(\n \n         Pair<DisMaxQueryBuilder, Set<String>> filter = adminRealmsFilter(adminRealms);\n \n-        return client.prepareSearch(AuthContextUtils.getDomain().toLowerCase()).\n-                setTypes(kind.name()).\n+        return client.prepareSearch(elasticsearchUtils.getContextDomainName(kind)).\n                 setSearchType(SearchType.QUERY_THEN_FETCH).\n                 setQuery(SyncopeConstants.FULL_ADMIN_REALMS.equals(adminRealms)\n                         ? getQueryBuilder(cond, kind)"},{"sha":"1a3331f140c5e6e188dae3df4bdb766b28f137cc","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":68,"deletions":25,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85fe179ec541685e28b83cea55cec2b9341a50c3/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85fe179ec541685e28b83cea55cec2b9341a50c3/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=85fe179ec541685e28b83cea55cec2b9341a50c3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n+import java.util.concurrent.ExecutionException;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -66,18 +67,9 @@ public class ElasticsearchReindex extends AbstractSchedTaskJobDelegate {\n     protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         if (!dryRun) {\n             try {\n-                LOG.debug(\"Start rebuild index {}\", AuthContextUtils.getDomain().toLowerCase());\n-\n-                IndicesExistsResponse existsIndexResponse = client.admin().indices().\n-                        exists(new IndicesExistsRequest(AuthContextUtils.getDomain().toLowerCase())).\n-                        get();\n-                if (existsIndexResponse.isExists()) {\n-                    AcknowledgedResponse acknowledgedResponse = client.admin().indices().\n-                            delete(new DeleteIndexRequest(AuthContextUtils.getDomain().toLowerCase())).\n-                            get();\n-                    LOG.debug(\"Successfully removed {}: {}\",\n-                            AuthContextUtils.getDomain().toLowerCase(), acknowledgedResponse);\n-                }\n+                checkExistsIndexResponse(AnyTypeKind.USER);\n+                checkExistsIndexResponse(AnyTypeKind.GROUP);\n+                checkExistsIndexResponse(AnyTypeKind.ANY_OBJECT);\n \n                 XContentBuilder settings = XContentFactory.jsonBuilder().\n                         startObject().\n@@ -94,7 +86,35 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                         endObject().\n                         endObject().\n                         endObject();\n-                XContentBuilder mapping = XContentFactory.jsonBuilder().\n+                XContentBuilder mappingUser = XContentFactory.jsonBuilder().\n+                        startObject().\n+                        startArray(\"dynamic_templates\").\n+                        startObject().\n+                        startObject(\"strings\").\n+                        field(\"match_mapping_type\", \"string\").\n+                        startObject(\"mapping\").\n+                        field(\"type\", \"keyword\").\n+                        field(\"analyzer\", \"string_lowercase\").\n+                        endObject().\n+                        endObject().\n+                        endObject().\n+                        endArray().\n+                        endObject();\n+                XContentBuilder mappingGroup = XContentFactory.jsonBuilder().\n+                        startObject().\n+                        startArray(\"dynamic_templates\").\n+                        startObject().\n+                        startObject(\"strings\").\n+                        field(\"match_mapping_type\", \"string\").\n+                        startObject(\"mapping\").\n+                        field(\"type\", \"keyword\").\n+                        field(\"analyzer\", \"string_lowercase\").\n+                        endObject().\n+                        endObject().\n+                        endObject().\n+                        endArray().\n+                        endObject();\n+                XContentBuilder mappingAnyobject = XContentFactory.jsonBuilder().\n                         startObject().\n                         startArray(\"dynamic_templates\").\n                         startObject().\n@@ -108,21 +128,16 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                         endObject().\n                         endArray().\n                         endObject();\n-                CreateIndexResponse createIndexResponse = client.admin().indices().\n-                        create(new CreateIndexRequest(AuthContextUtils.getDomain().toLowerCase()).\n-                                settings(settings).\n-                                mapping(AnyTypeKind.USER.name(), mapping).\n-                                mapping(AnyTypeKind.GROUP.name(), mapping).\n-                                mapping(AnyTypeKind.ANY_OBJECT.name(), mapping)).\n-                        get();\n-                LOG.debug(\"Successfully created {}: {}\",\n-                        AuthContextUtils.getDomain().toLowerCase(), createIndexResponse);\n+\n+                createIndexResponse(AnyTypeKind.USER, settings, mappingUser);\n+                createIndexResponse(AnyTypeKind.GROUP, settings, mappingGroup);\n+                createIndexResponse(AnyTypeKind.ANY_OBJECT, settings, mappingAnyobject);\n \n                 LOG.debug(\"Indexing users...\");\n                 for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (User user : userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexResponse response = client.prepareIndex(\n-                                AuthContextUtils.getDomain().toLowerCase(),\n+                                elasticsearchUtils.getContextDomainName(AnyTypeKind.USER),\n                                 AnyTypeKind.USER.name(),\n                                 user.getKey()).\n                                 setSource(elasticsearchUtils.builder(user)).\n@@ -134,7 +149,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                 for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (Group group : groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexResponse response = client.prepareIndex(\n-                                AuthContextUtils.getDomain().toLowerCase(),\n+                                elasticsearchUtils.getContextDomainName(AnyTypeKind.GROUP),\n                                 AnyTypeKind.GROUP.name(),\n                                 group.getKey()).\n                                 setSource(elasticsearchUtils.builder(group)).\n@@ -146,7 +161,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                 for (int page = 1; page <= (anyObjectDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (AnyObject anyObject : anyObjectDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexResponse response = client.prepareIndex(\n-                                AuthContextUtils.getDomain().toLowerCase(),\n+                                elasticsearchUtils.getContextDomainName(AnyTypeKind.ANY_OBJECT),\n                                 AnyTypeKind.ANY_OBJECT.name(),\n                                 anyObject.getKey()).\n                                 setSource(elasticsearchUtils.builder(anyObject)).\n@@ -165,6 +180,34 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         return \"SUCCESS\";\n     }\n \n+    private void checkExistsIndexResponse(final AnyTypeKind kind) throws InterruptedException, ExecutionException {\n+        LOG.debug(\"Start rebuild index {}\",\n+                elasticsearchUtils.getContextDomainName(kind));\n+        IndicesExistsResponse existsIndexResponse = client.admin().indices().\n+                exists(new IndicesExistsRequest(elasticsearchUtils.getContextDomainName(kind))).\n+                get();\n+        if (existsIndexResponse.isExists()) {\n+            AcknowledgedResponse acknowledgedResponse = client.admin().indices().\n+                    delete(new DeleteIndexRequest(elasticsearchUtils.getContextDomainName(kind))).\n+                    get();\n+            LOG.debug(\"Successfully removed {}: {}\",\n+                    elasticsearchUtils.getContextDomainName(kind), acknowledgedResponse);\n+        }\n+    }\n+\n+    private void createIndexResponse(final AnyTypeKind kind,\n+            final XContentBuilder settings,\n+            final XContentBuilder mapping) throws InterruptedException, ExecutionException {\n+\n+        CreateIndexResponse createIndexResponseUser = client.admin().indices().\n+                create(new CreateIndexRequest(elasticsearchUtils.getContextDomainName(kind)).\n+                        settings(settings).\n+                        mapping(kind.name(), mapping)).\n+                get();\n+        LOG.debug(\"Successfully created {} for {}: {}\",\n+                elasticsearchUtils.getContextDomainName(kind), kind.name(), createIndexResponseUser);\n+    }\n+\n     @Override\n     protected boolean hasToBeRegistered(final TaskExec execution) {\n         return true;"},{"sha":"60d1893dd74dad378e8ed95b5100f24b0a4ae5b7","filename":"fit/core-reference/src/main/java/org/apache/syncope/core/logic/init/ElasticsearchInit.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85fe179ec541685e28b83cea55cec2b9341a50c3/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FElasticsearchInit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85fe179ec541685e28b83cea55cec2b9341a50c3/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FElasticsearchInit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FElasticsearchInit.java?ref=85fe179ec541685e28b83cea55cec2b9341a50c3","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.core.logic.TaskLogic;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class ElasticsearchInit {\n+\n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private TaskLogic taskLogic;\n+\n+    private static final String ES_REINDEX = \"org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex\";\n+\n+    @Transactional\n+    public void init() {\n+        Implementation reindex = implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).\n+                stream().\n+                filter(impl -> impl.getEngine() == ImplementationEngine.JAVA\n+                && ES_REINDEX.equals(impl.getBody())).\n+                findAny().orElse(null);\n+        if (reindex == null) {\n+            reindex = entityFactory.newEntity(Implementation.class);\n+            reindex.setKey(ES_REINDEX);\n+            reindex.setEngine(ImplementationEngine.JAVA);\n+            reindex.setType(ImplementationType.TASKJOB_DELEGATE);\n+            reindex.setBody(ES_REINDEX);\n+            reindex = implementationDAO.save(reindex);\n+        }\n+\n+        SchedTaskTO task = new SchedTaskTO();\n+        task.setJobDelegate(reindex.getKey());\n+        task.setName(\"Elasticsearch Reindex\");\n+        task = taskLogic.createSchedTask(TaskType.SCHEDULED, task);\n+\n+        taskLogic.execute(task.getKey(), null, false);\n+    }\n+\n+}"},{"sha":"c8c2a5e69fc7cc50f08233734494708950762923","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":3,"deletions":35,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85fe179ec541685e28b83cea55cec2b9341a50c3/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85fe179ec541685e28b83cea55cec2b9341a50c3/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=85fe179ec541685e28b83cea55cec2b9341a50c3","patch":"@@ -40,11 +40,8 @@\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.report.StaticReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n-import org.apache.syncope.common.lib.to.SchedTaskTO;\n-import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n-import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.core.logic.TaskLogic;\n+import org.apache.syncope.core.logic.init.ElasticsearchInit;\n import org.apache.syncope.core.provisioning.java.job.report.AuditReportlet;\n import org.apache.syncope.core.provisioning.java.job.report.GroupReportlet;\n import org.apache.syncope.core.provisioning.java.job.report.ReconciliationReportlet;\n@@ -54,13 +51,10 @@\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.AlwaysTrueValidator;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.BasicValidator;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.BinaryValidator;\n@@ -88,8 +82,6 @@\n  */\n public class ITImplementationLookup implements ImplementationLookup {\n \n-    private static final String ES_REINDEX = \"org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex\";\n-\n     private static final Set<Class<?>> JWTSSOPROVIDER_CLASSES = new HashSet<>(\n             Arrays.asList(SyncopeJWTSSOProvider.class, CustomJWTSSOProvider.class));\n \n@@ -242,17 +234,11 @@ public class ITImplementationLookup implements ImplementationLookup {\n     @Autowired\n     private AnySearchDAO anySearchDAO;\n \n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n     @Autowired\n     private DomainsHolder domainsHolder;\n \n     @Autowired\n-    private TaskLogic taskLogic;\n+    private ElasticsearchInit elasticsearchInit;\n \n     @Override\n     public Integer getPriority() {\n@@ -265,25 +251,7 @@ public void load() {\n         if (AopUtils.getTargetClass(anySearchDAO).getName().contains(\"Elasticsearch\")) {\n             for (Map.Entry<String, DataSource> entry : domainsHolder.getDomains().entrySet()) {\n                 AuthContextUtils.execWithAuthContext(entry.getKey(), () -> {\n-                    Implementation reindex = implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).\n-                            stream().\n-                            filter(impl -> impl.getEngine() == ImplementationEngine.JAVA\n-                            && ES_REINDEX.equals(impl.getBody())).\n-                            findAny().orElse(null);\n-                    if (reindex == null) {\n-                        reindex = entityFactory.newEntity(Implementation.class);\n-                        reindex.setEngine(ImplementationEngine.JAVA);\n-                        reindex.setType(ImplementationType.TASKJOB_DELEGATE);\n-                        reindex.setBody(ES_REINDEX);\n-                        reindex = implementationDAO.save(reindex);\n-                    }\n-\n-                    SchedTaskTO task = new SchedTaskTO();\n-                    task.setJobDelegate(reindex.getKey());\n-                    task.setName(\"Elasticsearch Reindex\");\n-                    task = taskLogic.createSchedTask(TaskType.SCHEDULED, task);\n-\n-                    taskLogic.execute(task.getKey(), null, false);\n+                    elasticsearchInit.init();\n \n                     return null;\n                 });"},{"sha":"71ac0251cf399c898e41bff6bcfac401fdea3fb4","filename":"src/main/asciidoc/reference-guide/concepts/notifications.adoc","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85fe179ec541685e28b83cea55cec2b9341a50c3/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fnotifications.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85fe179ec541685e28b83cea55cec2b9341a50c3/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fnotifications.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fnotifications.adoc?ref=85fe179ec541685e28b83cea55cec2b9341a50c3","patch":"@@ -65,7 +65,7 @@ An event is identified by the following five coordinates:\n ** `PUSH`\n ** `CUSTOM`\n . category - the possible values depend on the selected type: for `LOGIC` the <<logic>> components available,\n-for `TASK` the various <<tasks-custom>> Tasks configured, for `PROPAGATION`, `PULL` and `PUSH` the defined Any Types\n+for `TASK` the various <<tasks-custom, Custom Tasks>> configured, for `PROPAGATION`, `PULL` and `PUSH` the defined Any Types\n . subcategory - completes category with external resource name, when selecting `PROPAGATION`, `PULL` or `PUSH`\n . event type - the final identification of the event; depends on the other coordinates\n . success or failure - whether the current event shall be considered in case of success or failure"},{"sha":"1c4ec411304c9b4381e32899489c398d4959bf49","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/85fe179ec541685e28b83cea55cec2b9341a50c3/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/85fe179ec541685e28b83cea55cec2b9341a50c3/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc?ref=85fe179ec541685e28b83cea55cec2b9341a50c3","patch":"@@ -487,6 +487,13 @@ classpath*:/provisioning*Context.xml\n classpath*:/workflow*Context.xml\n ....\n \n+It is also required to initialize the Elasticsearch indexes.\n+\n+Add a new Java <<implementations,implementation>> for `TASKJOB_DELEGATE` and use \n+`org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex` as class.\n+\n+Then, create a new <<tasks-custom, Custom task>>, select the implementation just created as job delegate and execute it.\n+\n [discrete]\n ===== Enable the <<SCIM>> extension\n "}]}