{"sha":"12dea2d92a5b3f5d57a88a77cc8cb8b19409b7ff","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEyZGVhMmQ5MmE1YjNmNWQ1N2E4OGE3N2NjOGNiOGIxOTQwOWI3ZmY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-21T13:26:19Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-21T13:26:19Z"},"message":"Fixes issue 180\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247158 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"766e38dbe873d93ffd09b1dfaaf1034623f3c931","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/766e38dbe873d93ffd09b1dfaaf1034623f3c931"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/12dea2d92a5b3f5d57a88a77cc8cb8b19409b7ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/12dea2d92a5b3f5d57a88a77cc8cb8b19409b7ff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/12dea2d92a5b3f5d57a88a77cc8cb8b19409b7ff","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/12dea2d92a5b3f5d57a88a77cc8cb8b19409b7ff/comments","author":null,"committer":null,"parents":[{"sha":"f59e43d9b4358f6ab024b151e7571d60e58f7a4c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f59e43d9b4358f6ab024b151e7571d60e58f7a4c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f59e43d9b4358f6ab024b151e7571d60e58f7a4c"}],"stats":{"total":97,"additions":87,"deletions":10},"files":[{"sha":"dd7c2280797d33a7097c28de581dac2fad4d3415","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":81,"deletions":7,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12dea2d92a5b3f5d57a88a77cc8cb8b19409b7ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12dea2d92a5b3f5d57a88a77cc8cb8b19409b7ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=12dea2d92a5b3f5d57a88a77cc8cb8b19409b7ff","patch":"@@ -161,6 +161,26 @@ public List<PropagationTask> getCreateTaskIds(final Long userId,\n             final Boolean enable)\n             throws NotFoundException {\n \n+        return getCreateTaskIds(userId, password, vAttrs, enable, null);\n+    }\n+\n+    /**\n+     * Create the user on every associated resource.\n+     *\n+     * @param userId to be created\n+     * @param password to be set\n+     * @param vAttrs virtual attributes to be set\n+     * @param enable wether user must be enabled or not\n+     * @param syncResourceName name of external resource performing sync, hence\n+     * not to be considered for propagation\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if userId is not found\n+     */\n+    public List<PropagationTask> getCreateTaskIds(final Long userId,\n+            final String password, final List<AttributeTO> vAttrs,\n+            final Boolean enable, final String syncResourceName)\n+            throws NotFoundException {\n+\n         SyncopeUser user = getSyncopeUser(userId);\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n             userDataBinder.fillVirtual(user, vAttrs, AttributableUtil.USER);\n@@ -169,6 +189,9 @@ public List<PropagationTask> getCreateTaskIds(final Long userId,\n \n         final PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(PropagationOperation.CREATE, user.getExternalResources());\n+        if (syncResourceName != null) {\n+            propByRes.get(PropagationOperation.CREATE).remove(syncResourceName);\n+        }\n \n         return provision(user, password, enable, propByRes);\n     }\n@@ -191,22 +214,50 @@ public List<PropagationTask> getUpdateTaskIds(final Long userId,\n             final PropagationByResource propByRes)\n             throws NotFoundException {\n \n+        return getUpdateTaskIds(userId, password, vAttrsToBeRemoved,\n+                vAttrsToBeAdded, enable, propByRes, null);\n+    }\n+\n+    /**\n+     * Performs update on each resource associated to the user.\n+     *\n+     * @param userId to be updated\n+     * @param password to be updated\n+     * @param vAttrsToBeRemoved virtual attributes to be removed\n+     * @param vAttrsToBeAdded virtual attributes to be added\n+     * @param enable wether user must be enabled or not\n+     * @param propByRes operations to perform on each resource\n+     * @param syncResourceName name of external resource performing sync, hence\n+     * not to be considered for propagation\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if userId is not found\n+     */\n+    public List<PropagationTask> getUpdateTaskIds(final Long userId,\n+            final String password, final Set<String> vAttrsToBeRemoved,\n+            final Set<String> vAttrsToBeAdded, final Boolean enable,\n+            final PropagationByResource propByRes,\n+            final String syncResourceName)\n+            throws NotFoundException {\n+\n         SyncopeUser user = getSyncopeUser(userId);\n+\n         Set<String> vAttrsToRemove = vAttrsToBeRemoved == null\n                 ? Collections.EMPTY_SET : vAttrsToBeRemoved;\n         Set<String> vAttrsToAdd = vAttrsToBeAdded == null\n                 ? Collections.EMPTY_SET : vAttrsToBeAdded;\n-        PropagationByResource vPropByRes = userDataBinder.fillVirtual(user,\n+        PropagationByResource localPropByRes = userDataBinder.fillVirtual(user,\n                 vAttrsToRemove, vAttrsToAdd, AttributableUtil.USER);\n-        propByRes.merge(vPropByRes);\n \n-        PropagationByResource localPropByRes;\n-        if (propByRes == null || propByRes.isEmpty()) {\n-            localPropByRes = new PropagationByResource();\n+        if (propByRes != null && !propByRes.isEmpty()) {\n+            localPropByRes.merge(propByRes);\n+        } else {\n             localPropByRes.addAll(PropagationOperation.UPDATE,\n                     user.getExternalResources());\n-        } else {\n-            localPropByRes = propByRes;\n+        }\n+        if (syncResourceName != null) {\n+            propByRes.get(PropagationOperation.CREATE).remove(syncResourceName);\n+            propByRes.get(PropagationOperation.UPDATE).remove(syncResourceName);\n+            propByRes.get(PropagationOperation.DELETE).remove(syncResourceName);\n         }\n \n         return provision(user, password, enable, localPropByRes);\n@@ -226,11 +277,34 @@ public List<PropagationTask> getUpdateTaskIds(final Long userId,\n     public List<PropagationTask> getDeleteTaskIds(final Long userId)\n             throws NotFoundException {\n \n+        return getDeleteTaskIds(userId, null);\n+    }\n+\n+    /**\n+     * Perform delete on each resource associated to the user.\n+     * It is possible to ask for a mandatory provisioning for some resources\n+     * specifying a set of resource names.\n+     * Exceptions won't be ignored and the process will be stopped if the\n+     * creation fails onto a mandatory resource.\n+     *\n+     * @param userId to be deleted\n+     * @param syncResourceName name of external resource performing sync, hence\n+     * not to be considered for propagation\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if user is not found\n+     */\n+    public List<PropagationTask> getDeleteTaskIds(final Long userId,\n+            final String syncResourceName)\n+            throws NotFoundException {\n+\n         SyncopeUser user = getSyncopeUser(userId);\n \n         final PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(PropagationOperation.DELETE,\n                 user.getExternalResources());\n+        if (syncResourceName != null) {\n+            propByRes.get(PropagationOperation.DELETE).remove(syncResourceName);\n+        }\n \n         return provision(user, null, false, propByRes);\n     }"},{"sha":"801abd3de6e145f4d201e61ee88e749924bf6692","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12dea2d92a5b3f5d57a88a77cc8cb8b19409b7ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12dea2d92a5b3f5d57a88a77cc8cb8b19409b7ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=12dea2d92a5b3f5d57a88a77cc8cb8b19409b7ff","patch":"@@ -415,7 +415,8 @@ protected String doExecute()\n                             List<PropagationTask> tasks =\n                                     propagationManager.getCreateTaskIds(\n                                     created.getKey(), userTO.getPassword(),\n-                                    null, created.getValue());\n+                                    null, created.getValue(),\n+                                    syncTask.getResource().getName());\n                             propagationManager.execute(tasks);\n                         } catch (PropagationException e) {\n                             LOG.error(\"Could not propagate user \"\n@@ -441,7 +442,8 @@ protected String doExecute()\n                                 List<PropagationTask> tasks =\n                                         propagationManager.getUpdateTaskIds(\n                                         updated.getKey(), userMod.getPassword(),\n-                                        null, null, null, updated.getValue());\n+                                        null, null, null, updated.getValue(),\n+                                        syncTask.getResource().getName());\n                                 propagationManager.execute(tasks);\n                             } catch (PropagationException e) {\n                                 LOG.error(\"Could not propagate user \"\n@@ -467,7 +469,8 @@ protected String doExecute()\n                     for (Long userId : userIds) {\n                         try {\n                             List<PropagationTask> tasks =\n-                                    propagationManager.getDeleteTaskIds(userId);\n+                                    propagationManager.getDeleteTaskIds(userId,\n+                                    syncTask.getResource().getName());\n                             propagationManager.execute(tasks);\n                         } catch (Exception e) {\n                             LOG.error(\"Could not propagate user \" + userId, e);"}]}