{"sha":"772206a4cb0cadb5ace021e3608d5fcd5b78f505","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc3MjIwNmE0Y2IwY2FkYjVhY2UwMjFlMzYwOGQ1ZmNkNWI3OGY1MDU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-02T10:45:34Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-02T11:47:00Z"},"message":"[SYNCOPE-1279] Now providing runtime status updates from running Tasks and Reports","tree":{"sha":"d68adb5e88ee245b6cad236afc5820c8f0e793ed","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d68adb5e88ee245b6cad236afc5820c8f0e793ed"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/772206a4cb0cadb5ace021e3608d5fcd5b78f505","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/772206a4cb0cadb5ace021e3608d5fcd5b78f505","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/772206a4cb0cadb5ace021e3608d5fcd5b78f505","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/772206a4cb0cadb5ace021e3608d5fcd5b78f505/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4f6fa1a252f399b225df4c7a73c66201b1ffbd51","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4f6fa1a252f399b225df4c7a73c66201b1ffbd51","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4f6fa1a252f399b225df4c7a73c66201b1ffbd51"}],"stats":{"total":851,"additions":740,"deletions":111},"files":[{"sha":"21b1563a0c29c61536572c0da81b58b017a9bec9","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportDirectoryPanel.java","status":"modified","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -34,27 +34,36 @@\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n import org.apache.syncope.client.console.rest.ReportRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.console.widgets.JobActionPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.repeater.Item;\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.util.time.Duration;\n \n /**\n  * Reports page.\n@@ -76,6 +85,17 @@ protected ReportDirectoryPanel(final MultilevelPanel multiLevelPanelRef, final P\n         modal.size(Modal.Size.Large);\n         initResultTable();\n \n+        container.add(new IndicatorAjaxTimerBehavior(Duration.seconds(10)) {\n+\n+            private static final long serialVersionUID = -4661303265651934868L;\n+\n+            @Override\n+            protected void onTimer(final AjaxRequestTarget target) {\n+                container.modelChanged();\n+                target.add(container);\n+            }\n+        });\n+\n         startAt = new ReportStartAtTogglePanel(container, pageRef);\n         addInnerObject(startAt);\n     }\n@@ -105,9 +125,45 @@ protected List<IColumn<ReportTO, String>> getColumns() {\n         columns.add(new BooleanPropertyColumn<>(\n                 new StringResourceModel(\"active\", this), \"active\", \"active\"));\n \n+        columns.add(new AbstractColumn<ReportTO, String>(new Model<>(\"\"), \"running\") {\n+\n+            private static final long serialVersionUID = 4209532514416998046L;\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<ReportTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<ReportTO> rowModel) {\n+\n+                JobTO jobTO = restClient.getJob(rowModel.getObject().getKey());\n+                JobActionPanel panel = new JobActionPanel(\n+                        componentId, jobTO, false, ReportDirectoryPanel.this, pageRef);\n+                MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n+                        String.format(\"%s,%s\",\n+                                StandardEntitlement.TASK_EXECUTE,\n+                                StandardEntitlement.TASK_UPDATE));\n+                cellItem.add(panel);\n+            }\n+\n+            @Override\n+            public String getCssClass() {\n+                return \"col-xs-1\";\n+            }\n+        });\n+\n         return columns;\n     }\n \n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof JobActionPanel.JobActionPayload) {\n+            container.modelChanged();\n+            JobActionPanel.JobActionPayload.class.cast(event.getPayload()).getTarget().add(container);\n+        } else {\n+            super.onEvent(event);\n+        }\n+    }\n+\n     @Override\n     public ActionsPanel<ReportTO> getActions(final IModel<ReportTO> model) {\n         final ActionsPanel<ReportTO> panel = super.getActions(model);"},{"sha":"a88576481ca6b131f706c9a803deccafb6bbeb0c","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import static org.apache.syncope.client.console.rest.BaseRestClient.getService;\n-\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;"},{"sha":"e65ce7e3b3a02529a36fd43cec5413f933bdab21","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -54,6 +54,10 @@ public List<ReportTO> list() {\n         return getService(ReportService.class).list();\n     }\n \n+    public JobTO getJob(final String key) {\n+        return getService(ReportService.class).getJob(key);\n+    }\n+\n     public List<JobTO> listJobs() {\n         return getService(ReportService.class).listJobs();\n     }"},{"sha":"723ae2ef504676a7206ad4b9011e4495ae23731e","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -47,6 +47,10 @@ public class TaskRestClient extends BaseRestClient implements ExecutionRestClien\n \n     private static final long serialVersionUID = 6284485820911028843L;\n \n+    public JobTO getJob(final String key) {\n+        return getService(TaskService.class).getJob(key);\n+    }\n+\n     public List<JobTO> listJobs() {\n         return getService(TaskService.class).listJobs();\n     }"},{"sha":"f7f0b2e4e4eb396efc09ac05d5bccb085b7876d7","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/ProvisioningTaskDirectoryPanel.java","status":"modified","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -23,18 +23,32 @@\n import java.util.Iterator;\n import java.util.List;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n+import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.widgets.JobActionPanel;\n+import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.util.time.Duration;\n \n /**\n  * Tasks page.\n@@ -63,6 +77,17 @@ protected ProvisioningTaskDirectoryPanel(\n \n         // super in order to call the parent implementation\n         super.initResultTable();\n+\n+        container.add(new IndicatorAjaxTimerBehavior(Duration.seconds(10)) {\n+\n+            private static final long serialVersionUID = -4661303265651934868L;\n+\n+            @Override\n+            protected void onTimer(final AjaxRequestTarget target) {\n+                container.modelChanged();\n+                target.add(container);\n+            }\n+        });\n     }\n \n     @Override\n@@ -103,9 +128,45 @@ protected List<IColumn<T, String>> getFieldColumns() {\n         columns.add(new BooleanPropertyColumn<>(\n                 new StringResourceModel(\"active\", this), \"active\", \"active\"));\n \n+        columns.add(new AbstractColumn<T, String>(new Model<>(\"\"), \"running\") {\n+\n+            private static final long serialVersionUID = -4008579357070833846L;\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<T>> cellItem,\n+                    final String componentId,\n+                    final IModel<T> rowModel) {\n+\n+                JobTO jobTO = restClient.getJob(rowModel.getObject().getKey());\n+                JobActionPanel panel = new JobActionPanel(\n+                        componentId, jobTO, false, ProvisioningTaskDirectoryPanel.this, pageRef);\n+                MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n+                        String.format(\"%s,%s\",\n+                                StandardEntitlement.TASK_EXECUTE,\n+                                StandardEntitlement.TASK_UPDATE));\n+                cellItem.add(panel);\n+            }\n+\n+            @Override\n+            public String getCssClass() {\n+                return \"col-xs-1\";\n+            }\n+        });\n+\n         return columns;\n     }\n \n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof JobActionPanel.JobActionPayload) {\n+            container.modelChanged();\n+            JobActionPanel.JobActionPayload.class.cast(event.getPayload()).getTarget().add(container);\n+        } else {\n+            super.onEvent(event);\n+        }\n+    }\n+\n     protected class ProvisioningTasksProvider<T extends ProvisioningTaskTO> extends SchedTasksProvider<T> {\n \n         private static final long serialVersionUID = 4725679400450513556L;"},{"sha":"5e03e2d3174bc7f543688830147bf94be435ff32","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobActionPanel.java","status":"modified","additions":20,"deletions":3,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.client.console.widgets;\n \n+import de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverBehavior;\n+import de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverConfig;\n+import de.agilecoders.wicket.core.markup.html.bootstrap.components.TooltipConfig;\n import java.io.Serializable;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -30,10 +33,13 @@\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.model.Model;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -52,14 +58,21 @@ public class JobActionPanel extends WizardMgtPanel<Serializable> {\n     public JobActionPanel(\n             final String id,\n             final JobTO jobTO,\n-            final JobWidget widget,\n+            final boolean showNotRunning,\n+            final Component container,\n             final PageReference pageRef) {\n+\n         super(id, true);\n         setOutputMarkupId(true);\n \n         Fragment controls;\n         if (jobTO.isRunning()) {\n             controls = new Fragment(\"controls\", \"runningFragment\", this);\n+            controls.add(new Label(\"status\", Model.of()).add(new PopoverBehavior(\n+                    Model.<String>of(),\n+                    Model.of(\"<pre>\" + (jobTO.getStatus() == null ? StringUtils.EMPTY : jobTO.getStatus()) + \"</pre>\"),\n+                    new PopoverConfig().withAnimation(true).withHoverTrigger().withHtml(true).\n+                            withPlacement(TooltipConfig.Placement.left))));\n             controls.add(new IndicatorAjaxLink<Void>(\"stop\") {\n \n                 private static final long serialVersionUID = -7978723352517770644L;\n@@ -83,7 +96,7 @@ public void onClick(final AjaxRequestTarget target) {\n                             default:\n                         }\n                         SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n-                        send(widget, Broadcast.EXACT, new JobActionPayload(target));\n+                        send(container, Broadcast.EXACT, new JobActionPayload(target));\n                     } catch (Exception e) {\n                         LOG.error(\"While stopping {}\", jobTO.getRefDesc(), e);\n                         SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage()) ? e.getClass().getName()\n@@ -117,7 +130,7 @@ public void onClick(final AjaxRequestTarget target) {\n                             default:\n                         }\n                         SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n-                        send(widget, Broadcast.EXACT, new JobActionPayload(target));\n+                        send(container, Broadcast.EXACT, new JobActionPayload(target));\n                     } catch (Exception e) {\n                         LOG.error(\"While starting {}\", jobTO.getRefDesc(), e);\n                         SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage()) ? e.getClass().getName()\n@@ -126,6 +139,10 @@ public void onClick(final AjaxRequestTarget target) {\n                     ((BasePage) getPage()).getNotificationPanel().refresh(target);\n                 }\n             });\n+            if (!showNotRunning) {\n+                controls.setOutputMarkupPlaceholderTag(true);\n+                controls.setVisible(false);\n+            }\n         }\n         addInnerObject(controls);\n     }"},{"sha":"85750795f6c7cc8566fc7186c44de80a477864c7","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -357,9 +357,9 @@ public void populateItem(\n                         final IModel<JobTO> rowModel) {\n \n                     JobTO jobTO = rowModel.getObject();\n-                    JobActionPanel panel = new JobActionPanel(componentId, jobTO, JobWidget.this, pageRef);\n+                    JobActionPanel panel = new JobActionPanel(componentId, jobTO, true, JobWidget.this, pageRef);\n                     MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n-                            String.format(\"%s,%s%s,%s\",\n+                            String.format(\"%s,%s,%s,%s\",\n                                     StandardEntitlement.TASK_EXECUTE,\n                                     StandardEntitlement.REPORT_EXECUTE,\n                                     StandardEntitlement.TASK_UPDATE,"},{"sha":"c2dcf2c5539cd81634608f769fbc251b4d3d9e12","filename":"client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -879,6 +879,10 @@ li.todoitem a {\n   cursor: default;\n }\n \n+.popover{\n+    max-width: 100%;\n+}\n+\n #popover:hover {\n   cursor: pointer;\n }\n@@ -1157,4 +1161,4 @@ div#inline-actions ul.menu i, div#tablehandling ul.menu i {\n \n div#tablehandling ul.menu li a {\n   padding: 0px !important;\n-}\n\\ No newline at end of file\n+}"},{"sha":"8e31f36b0ac4f7b747c4764a873de135ec4350b2","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobActionPanel.html","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.html?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -22,6 +22,8 @@\n     <wicket:fragment wicket:id=\"runningFragment\">\n       <i id=\"actionLink\" class=\"fa fa-refresh fa-spin\"></i>\n       &nbsp;\n+      <div wicket:id=\"status\" class=\"fa fa-binoculars\"/>\n+      &nbsp;\n       <a href=\"#\" wicket:id=\"stop\" class=\"fa fa-stop-circle\"></a>\n     </wicket:fragment>\n     <wicket:fragment wicket:id=\"notRunningFragment\">"},{"sha":"cee8db2f3a1a649344d672bd83f9818b9e56ed40","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/JobTO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -42,6 +42,8 @@ public class JobTO extends AbstractBaseBean {\n \n     private Date start;\n \n+    private String status;\n+\n     public JobType getType() {\n         return type;\n     }\n@@ -93,4 +95,13 @@ public void setStart(final Date start) {\n                 ? null\n                 : new Date(start.getTime());\n     }\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(final String status) {\n+        this.status = status;\n+    }\n+\n }"},{"sha":"16bc38fd56d36855908c6146aa809f1370c8329b","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -100,6 +100,17 @@ public interface ExecutableService extends JAXRSService {\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     ExecTO execute(@BeanParam ExecuteQuery query);\n \n+    /**\n+     * Returns job (running or scheduled) for the executable matching the given key.\n+     *\n+     * @param key executable key\n+     * @return job (running or scheduled) for the given key\n+     */\n+    @GET\n+    @Path(\"jobs/{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    JobTO getJob(@PathParam(\"key\") String key);\n+\n     /**\n      * List jobs (running and / or scheduled).\n      *"},{"sha":"6b34bc7a05d1e40dbcc73a1ca7ce0fe9f8f5cbb0","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractExecutableLogic.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -42,6 +42,8 @@ public abstract Pair<Integer, List<ExecTO>> listExecutions(\n     public abstract BulkActionResult deleteExecutions(\n             String key, Date startedBefore, Date startedAfter, Date endedBefore, Date endedAfter);\n \n+    public abstract JobTO getJob(String key);\n+\n     public abstract List<JobTO> listJobs();\n \n     public abstract void actionJob(String key, JobAction action);"},{"sha":"844d353050b804ce67a1bb474387b5c6e34f801c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"modified","additions":44,"deletions":19,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -26,11 +26,14 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.apache.syncope.core.provisioning.java.job.AbstractInterruptableJob;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.quartz.Trigger;\n import org.quartz.impl.matchers.GroupMatcher;\n+import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n \n@@ -44,32 +47,54 @@\n \n     protected abstract Triple<JobType, String, String> getReference(final JobKey jobKey);\n \n-    protected List<JobTO> doListJobs() {\n-        List<JobTO> jobTOs = new ArrayList<>();\n+    protected JobTO getJobTO(final JobKey jobKey) throws SchedulerException {\n+        JobTO jobTO = null;\n \n-        try {\n-            for (JobKey jobKey : scheduler.getScheduler().\n-                    getJobKeys(GroupMatcher.jobGroupEquals(Scheduler.DEFAULT_GROUP))) {\n+        Triple<JobType, String, String> reference = getReference(jobKey);\n+        if (reference != null) {\n+            jobTO = new JobTO();\n \n-                JobTO jobTO = new JobTO();\n+            jobTO.setType(reference.getLeft());\n+            jobTO.setRefKey(reference.getMiddle());\n+            jobTO.setRefDesc(reference.getRight());\n \n-                Triple<JobType, String, String> reference = getReference(jobKey);\n-                if (reference != null) {\n-                    jobTOs.add(jobTO);\n+            List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n+            if (jobTriggers.isEmpty()) {\n+                jobTO.setScheduled(false);\n+            } else {\n+                jobTO.setScheduled(true);\n+                jobTO.setStart(jobTriggers.get(0).getStartTime());\n+            }\n+\n+            jobTO.setRunning(jobManager.isRunning(jobKey));\n \n-                    jobTO.setType(reference.getLeft());\n-                    jobTO.setRefKey(reference.getMiddle());\n-                    jobTO.setRefDesc(reference.getRight());\n+            jobTO.setStatus(\"UNKNOWN\");\n+            if (jobTO.isRunning()) {\n+                try {\n+                    Object job = ApplicationContextProvider.getBeanFactory().getBean(jobKey.getName());\n+                    if (job instanceof AbstractInterruptableJob\n+                            && ((AbstractInterruptableJob) job).getDelegate() != null) {\n \n-                    List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n-                    if (jobTriggers.isEmpty()) {\n-                        jobTO.setScheduled(false);\n-                    } else {\n-                        jobTO.setScheduled(true);\n-                        jobTO.setStart(jobTriggers.get(0).getStartTime());\n+                        jobTO.setStatus(((AbstractInterruptableJob) job).getDelegate().currentStatus());\n                     }\n+                } catch (NoSuchBeanDefinitionException e) {\n+                    LOG.warn(\"Could not find job {} implementation\", jobKey, e);\n+                }\n+            }\n+        }\n+\n+        return jobTO;\n+    }\n+\n+    protected List<JobTO> doListJobs() {\n+        List<JobTO> jobTOs = new ArrayList<>();\n+        try {\n+            for (JobKey jobKey : scheduler.getScheduler().\n+                    getJobKeys(GroupMatcher.jobGroupEquals(Scheduler.DEFAULT_GROUP))) {\n \n-                    jobTO.setRunning(jobManager.isRunning(jobKey));\n+                JobTO jobTO = getJobTO(jobKey);\n+                if (jobTO != null) {\n+                    jobTOs.add(jobTO);\n                 }\n             }\n         } catch (SchedulerException e) {"},{"sha":"6a5a442b8da633167005f933dbf7b4f8e1ff02b5","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -64,6 +64,7 @@\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.xmlgraphics.util.MimeConstants;\n import org.quartz.JobKey;\n+import org.quartz.SchedulerException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -368,6 +369,30 @@ public List<JobTO> listJobs() {\n         return super.doListJobs();\n     }\n \n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n+    @Override\n+    public JobTO getJob(final String key) {\n+        Report report = reportDAO.find(key);\n+        if (report == null) {\n+            throw new NotFoundException(\"Report \" + key);\n+        }\n+\n+        JobTO jobTO = null;\n+        try {\n+            jobTO = getJobTO(JobNamer.getJobKey(report));\n+        } catch (SchedulerException e) {\n+            LOG.error(\"Problems while retrieving scheduled job {}\", JobNamer.getJobKey(report), e);\n+\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Scheduling);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+        if (jobTO == null) {\n+            throw new NotFoundException(\"Job for report \" + key);\n+        }\n+        return jobTO;\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n     @Override\n     public void actionJob(final String key, final JobAction action) {"},{"sha":"baad7e8797447533603a1000dd70e68cf63c6329","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":26,"deletions":1,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -55,10 +55,11 @@\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n-import org.apache.syncope.core.provisioning.java.job.notification.NotificationJobDelegate;\n import org.quartz.JobDataMap;\n import org.quartz.JobKey;\n+import org.quartz.SchedulerException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -385,6 +386,30 @@ public List<JobTO> listJobs() {\n         return super.doListJobs();\n     }\n \n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n+    @Override\n+    public JobTO getJob(final String key) {\n+        Task task = taskDAO.find(key);\n+        if (task == null) {\n+            throw new NotFoundException(\"Task \" + key);\n+        }\n+\n+        JobTO jobTO = null;\n+        try {\n+            jobTO = getJobTO(JobNamer.getJobKey(task));\n+        } catch (SchedulerException e) {\n+            LOG.error(\"Problems while retrieving scheduled job {}\", JobNamer.getJobKey(task), e);\n+\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Scheduling);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+        if (jobTO == null) {\n+            throw new NotFoundException(\"Job for task \" + key);\n+        }\n+        return jobTO;\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n     @Override\n     public void actionJob(final String key, final JobAction action) {"},{"sha":"2fb2a86152f2b13c022c735d7598b8cb35d320a0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/Reportlet.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n@@ -41,7 +42,8 @@ default void setConf(ReportletConf conf) {\n      * Actual data extraction for reporting.\n      *\n      * @param handler SAX content handler for streaming result\n+     * @param status current report status (for job reporting)\n      * @throws SAXException if there is any problem in SAX handling\n      */\n-    void extract(ContentHandler handler) throws SAXException;\n+    void extract(ContentHandler handler, AtomicReference<String> status) throws SAXException;\n }"},{"sha":"a0b21cb9e92c05768a26ed7ee438994597ec2b56","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -63,7 +64,7 @@ Uid create(\n             ObjectClass objectClass,\n             Set<Attribute> attrs,\n             OperationOptions options,\n-            Boolean[] propagationAttempted);\n+            AtomicReference<Boolean> propagationAttempted);\n \n     /**\n      * Update user / group on a connector instance.\n@@ -80,7 +81,7 @@ Uid update(\n             Uid uid,\n             Set<Attribute> attrs,\n             OperationOptions options,\n-            Boolean[] propagationAttempted);\n+            AtomicReference<Boolean> propagationAttempted);\n \n     /**\n      * Delete user / group on a connector instance.\n@@ -94,7 +95,7 @@ void delete(\n             ObjectClass objectClass,\n             Uid uid,\n             OperationOptions options,\n-            Boolean[] propagationAttempted);\n+            AtomicReference<Boolean> propagationAttempted);\n \n     /**\n      * Fetches all remote objects (for use during full reconciliation)."},{"sha":"3bfa292ffb9147cf81d0cfed8d649e46d88ecfff","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobDelegate.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobDelegate.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.job;\n+\n+/**\n+ * Implementations of this interface will perform the actual operations required to Quartz's {@link org.quartz.Job}.\n+ */\n+public interface JobDelegate {\n+\n+    String currentStatus();\n+}"},{"sha":"bb69b1064cd35bb328768fc1805e722719183f2a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/SchedTaskJobDelegate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FSchedTaskJobDelegate.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -21,7 +21,7 @@\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n \n-public interface SchedTaskJobDelegate {\n+public interface SchedTaskJobDelegate extends JobDelegate {\n \n     void execute(String taskKey, boolean dryRun, JobExecutionContext context) throws JobExecutionException;\n }"},{"sha":"bbf455ffacca210c639b6c60da7a11d739695c56","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/report/ReportJobDelegate.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2Freport%2FReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2Freport%2FReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2Freport%2FReportJobDelegate.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.job.report;\n+\n+import org.apache.syncope.core.provisioning.api.job.JobDelegate;\n+import org.quartz.JobExecutionException;\n+\n+public interface ReportJobDelegate extends JobDelegate {\n+\n+    void execute(String reportKey) throws JobExecutionException;\n+}"},{"sha":"3dfcdddabcc72c327d14a5cc32ae6f79fccf0f80","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/notification/NotificationJobDelegate.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FNotificationJobDelegate.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.notification;\n+\n+import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.provisioning.api.job.JobDelegate;\n+import org.quartz.JobExecutionException;\n+\n+public interface NotificationJobDelegate extends JobDelegate {\n+\n+    TaskExec executeSingle(NotificationTask task);\n+\n+    void execute() throws JobExecutionException;\n+}"},{"sha":"39eed32a96a99a3da326fec4fe4005c7e1b3489f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopePullExecutor.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopePullExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopePullExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopePullExecutor.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -18,10 +18,13 @@\n  */\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n+import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.SyncToken;\n \n public interface SyncopePullExecutor {\n \n     void setLatestSyncToken(ObjectClass objectClass, SyncToken latestSyncToken);\n+\n+    void reportHandled(ObjectClass objectClass, Name name);\n }"},{"sha":"523ecc0cd92cec74ae906bb0fa2ec3de87d40b1f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -25,6 +25,7 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n@@ -162,12 +163,12 @@ public Uid create(\n             final ObjectClass objectClass,\n             final Set<Attribute> attrs,\n             final OperationOptions options,\n-            final Boolean[] propagationAttempted) {\n+            final AtomicReference<Boolean> propagationAttempted) {\n \n         Uid result = null;\n \n         if (connInstance.getCapabilities().contains(ConnectorCapability.CREATE)) {\n-            propagationAttempted[0] = true;\n+            propagationAttempted.set(true);\n \n             Future<Uid> future = asyncFacade.create(connector, objectClass, attrs, options);\n             try {\n@@ -197,12 +198,12 @@ public Uid update(\n             final Uid uid,\n             final Set<Attribute> attrs,\n             final OperationOptions options,\n-            final Boolean[] propagationAttempted) {\n+            final AtomicReference<Boolean> propagationAttempted) {\n \n         Uid result = null;\n \n         if (connInstance.getCapabilities().contains(ConnectorCapability.UPDATE)) {\n-            propagationAttempted[0] = true;\n+            propagationAttempted.set(true);\n \n             Future<Uid> future = asyncFacade.update(connector, objectClass, uid, attrs, options);\n \n@@ -233,10 +234,10 @@ public void delete(\n             final ObjectClass objectClass,\n             final Uid uid,\n             final OperationOptions options,\n-            final Boolean[] propagationAttempted) {\n+            final AtomicReference<Boolean> propagationAttempted) {\n \n         if (connInstance.getCapabilities().contains(ConnectorCapability.DELETE)) {\n-            propagationAttempted[0] = true;\n+            propagationAttempted.set(true);\n \n             Future<Uid> future = asyncFacade.delete(connector, objectClass, uid, options);\n "},{"sha":"86a7f49fa5e26f7e06761e323b48873b71db3188","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractInterruptableJob.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Date;\n import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.syncope.core.provisioning.api.job.JobDelegate;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.quartz.DisallowConcurrentExecution;\n@@ -40,21 +41,33 @@ public abstract class AbstractInterruptableJob implements InterruptableJob {\n      */\n     private final AtomicReference<Thread> runningThread = new AtomicReference<>();\n \n+    private final JobDelegate embeddedDelegate = new JobDelegate() {\n+\n+        @Override\n+        public String currentStatus() {\n+            return \"RUNNING THREAD: \" + runningThread.get();\n+        }\n+    };\n+\n     private long interruptMaxRetries = 1;\n \n+    public JobDelegate getDelegate() {\n+        return embeddedDelegate;\n+    }\n+\n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        this.runningThread.set(Thread.currentThread());\n+        runningThread.set(Thread.currentThread());\n         try {\n-            this.interruptMaxRetries = context.getMergedJobDataMap().getLong(JobManager.INTERRUPT_MAX_RETRIES_KEY);\n+            interruptMaxRetries = context.getMergedJobDataMap().getLong(JobManager.INTERRUPT_MAX_RETRIES_KEY);\n         } catch (Exception e) {\n             LOG.debug(\"Could not set {}, defaults to {}\", JobManager.INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries, e);\n         }\n     }\n \n     @Override\n     public void interrupt() throws UnableToInterruptJobException {\n-        Thread thread = this.runningThread.getAndSet(null);\n+        Thread thread = runningThread.getAndSet(null);\n         if (thread == null) {\n             LOG.warn(\"Unable to retrieve the thread of the current job execution\");\n         } else {\n@@ -68,7 +81,7 @@ public void interrupt() throws UnableToInterruptJobException {\n             }\n             // if the thread is still alive, it should be available in the next stop\n             if (thread.isAlive()) {\n-                this.runningThread.set(thread);\n+                runningThread.set(thread);\n             }\n         }\n     }"},{"sha":"7103b7b7d54baad9c960f282588b556ded859080","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.java.job;\n \n import java.util.Date;\n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n@@ -72,6 +73,13 @@ public abstract class AbstractSchedTaskJobDelegate implements SchedTaskJobDelega\n     @Autowired\n     protected AuditManager auditManager;\n \n+    protected final AtomicReference<String> status = new AtomicReference<>();\n+\n+    @Override\n+    public String currentStatus() {\n+        return status.get();\n+    }\n+\n     @Transactional\n     @Override\n     public void execute(final String taskKey, final boolean dryRun, final JobExecutionContext context)\n@@ -90,6 +98,8 @@ public void execute(final String taskKey, final boolean dryRun, final JobExecuti\n         execution.setStart(new Date());\n         execution.setTask(task);\n \n+        status.set(\"Initialization completed\");\n+\n         AuditElements.Result result;\n \n         try {\n@@ -110,6 +120,8 @@ public void execute(final String taskKey, final boolean dryRun, final JobExecuti\n         }\n         task = taskDAO.save(task);\n \n+        status.set(\"Done\");\n+\n         notificationManager.createTasks(\n                 AuditElements.EventCategoryType.TASK,\n                 this.getClass().getSimpleName(),"},{"sha":"4f1a1eb337737a181f692df0d5b0ae8ee0d6ea93","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/GroupMemberProvisionTaskJobDelegate.java","status":"modified","additions":18,"deletions":10,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -82,20 +82,25 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         }\n         result.append(\"provision\\n\\n\");\n \n+        status.set(result.toString());\n+\n         MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setGroup(groupKey);\n         List<User> users = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.USER);\n         Collection<String> groupResourceKeys = groupDAO.findAllResourceKeys(groupKey);\n+        status.set(\"About to \"\n+                + (actionType == BulkMembersActionType.DEPROVISION ? \"de\" : \"\") + \"provision \"\n+                + users.size() + \" users from \" + groupResourceKeys);\n         for (User user : users) {\n             List<PropagationStatus> statuses = actionType == BulkMembersActionType.DEPROVISION\n                     ? userProvisioningManager.deprovision(user.getKey(), groupResourceKeys, false)\n                     : userProvisioningManager.provision(user.getKey(), true, null, groupResourceKeys, false);\n-            for (PropagationStatus status : statuses) {\n+            for (PropagationStatus propagationStatus : statuses) {\n                 result.append(\"User \").append(user.getKey()).append('\\t').\n-                        append(\"Resource \").append(status.getResource()).append('\\t').\n-                        append(status.getStatus());\n-                if (StringUtils.isNotBlank(status.getFailureReason())) {\n-                    result.append('\\n').append(status.getFailureReason()).append('\\n');\n+                        append(\"Resource \").append(propagationStatus.getResource()).append('\\t').\n+                        append(propagationStatus.getStatus());\n+                if (StringUtils.isNotBlank(propagationStatus.getFailureReason())) {\n+                    result.append('\\n').append(propagationStatus.getFailureReason()).append('\\n');\n                 }\n                 result.append(\"\\n\");\n             }\n@@ -105,17 +110,20 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         membershipCond = new MembershipCond();\n         membershipCond.setGroup(groupKey);\n         List<AnyObject> anyObjects = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.ANY_OBJECT);\n+        status.set(\"About to \"\n+                + (actionType == BulkMembersActionType.DEPROVISION ? \"de\" : \"\") + \"provision \"\n+                + anyObjects.size() + \" any objects from \" + groupResourceKeys);\n         for (AnyObject anyObject : anyObjects) {\n             List<PropagationStatus> statuses = actionType == BulkMembersActionType.DEPROVISION\n                     ? anyObjectProvisioningManager.deprovision(anyObject.getKey(), groupResourceKeys, false)\n                     : anyObjectProvisioningManager.provision(anyObject.getKey(), groupResourceKeys, false);\n \n-            for (PropagationStatus status : statuses) {\n+            for (PropagationStatus propagationStatus : statuses) {\n                 result.append(anyObject.getType().getKey()).append(' ').append(anyObject.getKey()).append('\\t').\n-                        append(\"Resource \").append(status.getResource()).append('\\t').\n-                        append(status.getStatus());\n-                if (StringUtils.isNotBlank(status.getFailureReason())) {\n-                    result.append('\\n').append(status.getFailureReason()).append('\\n');\n+                        append(\"Resource \").append(propagationStatus.getResource()).append('\\t').\n+                        append(propagationStatus.getStatus());\n+                if (StringUtils.isNotBlank(propagationStatus.getFailureReason())) {\n+                    result.append('\\n').append(propagationStatus.getFailureReason()).append('\\n');\n                 }\n                 result.append(\"\\n\");\n             }"},{"sha":"60a19567f4d5318af7c1168a6fce5c92f79a495b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/IdentityRecertification.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -89,8 +89,15 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n             return \"DRY RUN\";\r\n         }\r\n \r\n+        int total = userDAO.count();\r\n+        int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\r\n+\r\n+        status.set(\"Processing \" + total + \" users in \" + pages + \" pages\");\r\n+\r\n         long now = System.currentTimeMillis();\r\n-        for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\r\n+        for (int page = 1; page <= pages; page++) {\r\n+            status.set(\"Processing \" + total + \" users: page \" + page + \" of \" + pages);\r\n+\r\n             for (User user : userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\r\n                 LOG.debug(\"Processing user: {}\", user.getUsername());\r\n \r"},{"sha":"c2af5e56f3be9f986d578aaf05d1426bcfec6b51","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.provisioning.api.job.JobDelegate;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n@@ -53,6 +54,8 @@ public enum Status {\n      */\n     private String taskKey;\n \n+    private SchedTaskJobDelegate delegate;\n+\n     /**\n      * Task key setter.\n      *\n@@ -62,6 +65,11 @@ public void setTaskKey(final String taskKey) {\n         this.taskKey = taskKey;\n     }\n \n+    @Override\n+    public JobDelegate getDelegate() {\n+        return delegate;\n+    }\n+\n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n         super.execute(context);\n@@ -72,16 +80,17 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n                         try {\n                             ImplementationDAO implementationDAO =\n                             ApplicationContextProvider.getApplicationContext().getBean(ImplementationDAO.class);\n-                            Implementation taskJobDelegate = implementationDAO.find(\n+                            Implementation implementation = implementationDAO.find(\n                                     context.getMergedJobDataMap().getString(DELEGATE_IMPLEMENTATION));\n-                            if (taskJobDelegate == null) {\n+                            if (implementation == null) {\n                                 LOG.error(\"Could not find Implementation '{}', aborting\",\n                                         context.getMergedJobDataMap().getString(DELEGATE_IMPLEMENTATION));\n                             } else {\n-                                ImplementationManager.<SchedTaskJobDelegate>build(taskJobDelegate).\n-                                        execute(taskKey,\n-                                                context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),\n-                                                context);\n+                                delegate = ImplementationManager.<SchedTaskJobDelegate>build(implementation);\n+                                delegate.execute(\n+                                        taskKey,\n+                                        context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),\n+                                        context);\n                             }\n                         } catch (Exception e) {\n                             LOG.error(\"While executing task {}\", taskKey, e);"},{"sha":"7ab218b7ac6cd7c55a4f310ff5b3c0aa969a0844","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java","status":"renamed","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -21,7 +21,9 @@\n import java.io.PrintStream;\n import java.util.Date;\n import java.util.Enumeration;\n+import java.util.List;\n import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicReference;\n import javax.mail.Session;\n import javax.mail.internet.MimeMessage;\n import org.apache.commons.lang3.BooleanUtils;\n@@ -37,6 +39,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.quartz.JobExecutionException;\n@@ -51,7 +54,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class NotificationJobDelegate implements InitializingBean {\n+public class DefaultNotificationJobDelegate implements InitializingBean, NotificationJobDelegate {\n \n     private static final Logger LOG = LoggerFactory.getLogger(NotificationJobDelegate.class);\n \n@@ -70,6 +73,8 @@ public class NotificationJobDelegate implements InitializingBean {\n     @Autowired\n     private NotificationManager notificationManager;\n \n+    private final AtomicReference<String> status = new AtomicReference<>();\n+\n     @Override\n     public void afterPropertiesSet() throws Exception {\n         if (mailSender instanceof JavaMailSenderImpl) {\n@@ -100,7 +105,13 @@ public void afterPropertiesSet() throws Exception {\n         }\n     }\n \n+    @Override\n+    public String currentStatus() {\n+        return status.get();\n+    }\n+\n     @Transactional\n+    @Override\n     public TaskExec executeSingle(final NotificationTask task) {\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setTask(task);\n@@ -135,6 +146,8 @@ public TaskExec executeSingle(final NotificationTask task) {\n                         + task.getTextBody() + \"\\n\");\n             }\n \n+            status.set(\"Sending notifications to \" + task.getRecipients());\n+\n             for (String to : task.getRecipients()) {\n                 try {\n                     MimeMessage message = mailSender.createMimeMessage();\n@@ -219,8 +232,13 @@ public TaskExec executeSingle(final NotificationTask task) {\n     }\n \n     @Transactional\n+    @Override\n     public void execute() throws JobExecutionException {\n-        for (NotificationTask task : taskDAO.<NotificationTask>findToExec(TaskType.NOTIFICATION)) {\n+        List<NotificationTask> tasks = taskDAO.<NotificationTask>findToExec(TaskType.NOTIFICATION);\n+\n+        status.set(\"Sending out \" + tasks.size() + \" notifications\");\n+\n+        for (NotificationTask task : tasks) {\n             LOG.debug(\"Found notification task {} to be executed: starting...\", task);\n             executeSingle(task);\n             LOG.debug(\"Notification task {} executed\", task);","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/NotificationJobDelegate.java"},{"sha":"0137e8f894620f0c3277db704dc1e48d4f1923bd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/NotificationJob.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -20,6 +20,8 @@\n \n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.provisioning.api.job.JobDelegate;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n import org.apache.syncope.core.provisioning.java.job.AbstractInterruptableJob;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n@@ -53,6 +55,11 @@ public enum Status {\n     @Autowired\n     private NotificationJobDelegate delegate;\n \n+    @Override\n+    public JobDelegate getDelegate() {\n+        return delegate;\n+    }\n+\n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n         super.execute(context);"},{"sha":"cb52fd093448f2e933f6c5f002926fbd36dee89f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/AbstractReportlet.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAbstractReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAbstractReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAbstractReportlet.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.job.report;\n \n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.slf4j.Logger;\n@@ -38,17 +39,18 @@ public void setConf(final ReportletConf conf) {\n         this.conf = conf;\n     }\n \n-    protected abstract void doExtract(ReportletConf conf, ContentHandler handler) throws SAXException;\n+    protected abstract void doExtract(ReportletConf conf, ContentHandler handler, AtomicReference<String> status)\n+            throws SAXException;\n \n     @Override\n     @Transactional(readOnly = true)\n-    public void extract(final ContentHandler handler) throws SAXException {\n+    public void extract(final ContentHandler handler, final AtomicReference<String> status) throws SAXException {\n         AttributesImpl atts = new AttributesImpl();\n         atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_NAME, ReportXMLConst.XSD_STRING, conf.getName());\n         atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_CLASS, ReportXMLConst.XSD_STRING, getClass().getName());\n         handler.startElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORTLET, atts);\n \n-        doExtract(conf, handler);\n+        doExtract(conf, handler, status);\n \n         handler.endElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORTLET);\n     }"},{"sha":"6ba9a53992f75afcca093e53738f86de67339ba2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/AuditReportlet.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n import javax.sql.DataSource;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n@@ -47,7 +48,9 @@ public class AuditReportlet extends AbstractReportlet {\n \n     private DataSource datasource;\n \n-    private void doExtractConf(final ContentHandler handler) throws SAXException {\n+    private void doExtractConf(final ContentHandler handler, final AtomicReference<String> status) throws SAXException {\n+        status.set(\"Fetching \" + conf.getSize() + \" rows from the SYNCOPEAUDIT table\");\n+\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(datasource);\n         jdbcTemplate.setMaxRows(conf.getSize());\n         List<Map<String, Object>> rows = jdbcTemplate.\n@@ -120,10 +123,17 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n             handler.endElement(\"\", \"\", \"event\");\n         }\n         handler.endElement(\"\", \"\", \"events\");\n+\n+        status.set(\"Fetched \" + conf.getSize() + \" rows from the SYNCOPEAUDIT table\");\n     }\n \n     @Override\n-    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n+    protected void doExtract(\n+            final ReportletConf conf,\n+            final ContentHandler handler,\n+            final AtomicReference<String> status)\n+            throws SAXException {\n+\n         if (conf instanceof AuditReportletConf) {\n             this.conf = AuditReportletConf.class.cast(conf);\n         } else {\n@@ -135,7 +145,7 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n             throw new ReportException(new IllegalArgumentException(\"Could not get to DataSource\"));\n         }\n \n-        doExtractConf(handler);\n+        doExtractConf(handler, status);\n     }\n \n }"},{"sha":"13d8dde6bfd729819c29e4f2f2cf3f4ac1e6429f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/DefaultReportJobDelegate.java","status":"renamed","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -23,6 +23,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Date;\n import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.zip.Deflater;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n@@ -41,6 +42,7 @@\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.spring.ImplementationManager;\n+import org.apache.syncope.core.provisioning.api.job.report.ReportJobDelegate;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -50,7 +52,7 @@\n import org.xml.sax.helpers.AttributesImpl;\n \n @Component\n-public class ReportJobDelegate {\n+public class DefaultReportJobDelegate implements ReportJobDelegate {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ReportJobDelegate.class);\n \n@@ -69,7 +71,15 @@ public class ReportJobDelegate {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    private final AtomicReference<String> status = new AtomicReference<>();\n+\n+    @Override\n+    public String currentStatus() {\n+        return status.get();\n+    }\n+\n     @Transactional\n+    @Override\n     public void execute(final String reportKey) throws JobExecutionException {\n         Report report = reportDAO.find(reportKey);\n         if (report == null) {\n@@ -117,6 +127,8 @@ public void execute(final String reportKey) throws JobExecutionException {\n         execution.setStatus(ReportExecStatus.RUNNING);\n         execution = reportExecDAO.save(execution);\n \n+        status.set(\"Starting\");\n+\n         // 3. actual report execution\n         StringBuilder reportExecutionMessage = new StringBuilder();\n         try {\n@@ -126,12 +138,15 @@ public void execute(final String reportKey) throws JobExecutionException {\n             atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_NAME, ReportXMLConst.XSD_STRING, report.getName());\n             handler.startElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORT, atts);\n \n+            status.set(\"Generating report header\");\n+\n             // iterate over reportlet instances defined for this report\n             for (Implementation impl : report.getReportlets()) {\n                 Optional<Reportlet> reportlet = ImplementationManager.buildReportlet(impl);\n                 if (reportlet.isPresent()) {\n                     try {\n-                        reportlet.get().extract(handler);\n+                        status.set(\"Invoking reportlet \" + impl.getKey());\n+                        reportlet.get().extract(handler, status);\n                     } catch (Throwable t) {\n                         LOG.error(\"While executing reportlet {} for report {}\", reportlet, reportKey, t);\n \n@@ -148,6 +163,8 @@ public void execute(final String reportKey) throws JobExecutionException {\n             }\n \n             // report footer\n+            status.set(\"Generating report footer\");\n+\n             handler.endElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORT);\n             handler.endDocument();\n \n@@ -160,6 +177,8 @@ public void execute(final String reportKey) throws JobExecutionException {\n \n             throw new JobExecutionException(e, true);\n         } finally {\n+            status.set(\"Completed\");\n+\n             try {\n                 zos.closeEntry();\n                 zos.close();","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReportJobDelegate.java"},{"sha":"b34e271c19340f178a99cb31537b16f0fcbb6bbe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/GroupReportlet.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -288,7 +289,12 @@ private int count() {\n     }\n \n     @Override\n-    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n+    protected void doExtract(\n+            final ReportletConf conf,\n+            final ContentHandler handler,\n+            final AtomicReference<String> status)\n+            throws SAXException {\n+\n         if (conf instanceof GroupReportletConf) {\n             this.conf = GroupReportletConf.class.cast(conf);\n         } else {\n@@ -297,7 +303,14 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n \n         doExtractConf(handler);\n \n-        for (int page = 1; page <= (count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+        int total = count();\n+        int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n+\n+        status.set(\"Processing \" + total + \" groups in \" + pages + \" pages\");\n+\n+        for (int page = 1; page <= pages; page++) {\n+            status.set(\"Processing \" + total + \" groups: page \" + page + \" of \" + pages);\n+\n             List<Group> groups;\n             if (StringUtils.isBlank(this.conf.getMatchingCond())) {\n                 groups = groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE);\n@@ -312,6 +325,8 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n             }\n \n             doExtract(handler, groups);\n+\n+            status.set(\"Processed \" + total + \" groups: page \" + page + \" of \" + pages);\n         }\n     }\n }"},{"sha":"da358fde4339c223ec9a3017af36d21d9c5d3d2b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":75,"deletions":31,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -27,6 +27,7 @@\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -49,7 +50,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -366,25 +366,13 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n         }\n     }\n \n-    private void doExtract(\n-            final ContentHandler handler, final int count, final SearchCond cond, final AnyTypeKind anyTypeKind)\n+    @Override\n+    protected void doExtract(\n+            final ReportletConf conf,\n+            final ContentHandler handler,\n+            final AtomicReference<String> status)\n             throws SAXException {\n \n-        for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n-            List<AnyObject> anys = searchDAO.search(\n-                    SyncopeConstants.FULL_ADMIN_REALMS,\n-                    cond,\n-                    page,\n-                    PAGE_SIZE,\n-                    Collections.<OrderByClause>emptyList(),\n-                    anyTypeKind);\n-\n-            doExtract(handler, anys);\n-        }\n-    }\n-\n-    @Override\n-    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n         if (conf instanceof ReconciliationReportletConf) {\n             this.conf = ReconciliationReportletConf.class.cast(conf);\n         } else {\n@@ -394,39 +382,81 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n         AttributesImpl atts = new AttributesImpl();\n \n         if (StringUtils.isBlank(this.conf.getUserMatchingCond())) {\n-            atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(userDAO.count()));\n+            int total = userDAO.count();\n+            int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n+\n+            status.set(\"Processing \" + total + \" users in \" + pages + \" pages\");\n+\n+            atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(total));\n             handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.USER) + \"s\", atts);\n \n-            for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+            for (int page = 1; page <= pages; page++) {\n+                status.set(\"Processing \" + total + \" users: page \" + page + \" of \" + pages);\n+\n                 doExtract(handler, userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE));\n             }\n         } else {\n             SearchCond cond = SearchCondConverter.convert(this.conf.getUserMatchingCond());\n \n-            int count = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.USER);\n-            atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(count));\n+            int total = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.USER);\n+            int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n+\n+            status.set(\"Processing \" + total + \" users in \" + pages + \" pages\");\n+\n+            atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(total));\n             handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.USER) + \"s\", atts);\n \n-            doExtract(handler, count, cond, AnyTypeKind.USER);\n+            for (int page = 1; page <= pages; page++) {\n+                status.set(\"Processing \" + total + \" users: page \" + page + \" of \" + pages);\n+\n+                doExtract(handler, searchDAO.search(\n+                        SyncopeConstants.FULL_ADMIN_REALMS,\n+                        cond,\n+                        page,\n+                        PAGE_SIZE,\n+                        Collections.<OrderByClause>emptyList(),\n+                        AnyTypeKind.USER));\n+            }\n         }\n         handler.endElement(\"\", \"\", getAnyElementName(AnyTypeKind.USER) + \"s\");\n \n         atts.clear();\n         if (StringUtils.isBlank(this.conf.getGroupMatchingCond())) {\n-            atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(groupDAO.count()));\n+            int total = groupDAO.count();\n+            int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n+\n+            status.set(\"Processing \" + total + \" groups in \" + pages + \" pages\");\n+\n+            atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(total));\n             handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.GROUP) + \"s\", atts);\n \n-            for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+            for (int page = 1; page <= pages; page++) {\n+                status.set(\"Processing \" + total + \" groups: page \" + page + \" of \" + pages);\n+\n                 doExtract(handler, groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE));\n             }\n         } else {\n             SearchCond cond = SearchCondConverter.convert(this.conf.getUserMatchingCond());\n \n-            int count = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.GROUP);\n-            atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(count));\n+            int total = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.GROUP);\n+            int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n+\n+            status.set(\"Processing \" + total + \" groups in \" + pages + \" pages\");\n+\n+            atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(total));\n             handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.GROUP) + \"s\", atts);\n \n-            doExtract(handler, count, cond, AnyTypeKind.GROUP);\n+            for (int page = 1; page <= pages; page++) {\n+                status.set(\"Processing \" + total + \" groups: page \" + page + \" of \" + pages);\n+\n+                doExtract(handler, searchDAO.search(\n+                        SyncopeConstants.FULL_ADMIN_REALMS,\n+                        cond,\n+                        page,\n+                        PAGE_SIZE,\n+                        Collections.<OrderByClause>emptyList(),\n+                        AnyTypeKind.GROUP));\n+            }\n         }\n         handler.endElement(\"\", \"\", getAnyElementName(AnyTypeKind.GROUP) + \"s\");\n \n@@ -440,14 +470,28 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n                                 SearchCond.getLeafCond(anyTypeCond),\n                                 SearchCondConverter.convert(this.conf.getAnyObjectMatchingCond()));\n \n-                int count = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.ANY_OBJECT);\n+                int total = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.ANY_OBJECT);\n+                int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n+\n+                status.set(\"Processing \" + total + \" any objects \" + anyType.getKey() + \" in \" + pages + \" pages\");\n \n                 atts.clear();\n                 atts.addAttribute(\"\", \"\", \"type\", ReportXMLConst.XSD_STRING, anyType.getKey());\n-                atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(count));\n+                atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(total));\n                 handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.ANY_OBJECT) + \"s\", atts);\n \n-                doExtract(handler, count, cond, AnyTypeKind.ANY_OBJECT);\n+                for (int page = 1; page <= pages; page++) {\n+                    status.set(\"Processing \" + total + \" any objects \" + anyType.getKey()\n+                            + \": page \" + page + \" of \" + pages);\n+\n+                    doExtract(handler, searchDAO.search(\n+                            SyncopeConstants.FULL_ADMIN_REALMS,\n+                            cond,\n+                            page,\n+                            PAGE_SIZE,\n+                            Collections.<OrderByClause>emptyList(),\n+                            AnyTypeKind.ANY_OBJECT));\n+                }\n \n                 handler.endElement(\"\", \"\", getAnyElementName(AnyTypeKind.ANY_OBJECT) + \"s\");\n             }"},{"sha":"be42b1b9000de878ee839279f57224cbf17ed27b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReportJob.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJob.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -18,12 +18,14 @@\n  */\n package org.apache.syncope.core.provisioning.java.job.report;\n \n+import org.apache.syncope.core.provisioning.api.job.JobDelegate;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.provisioning.java.job.AbstractInterruptableJob;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.apache.syncope.core.provisioning.api.job.report.ReportJobDelegate;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -51,6 +53,11 @@ public void setReportKey(final String reportKey) {\n         this.reportKey = reportKey;\n     }\n \n+    @Override\n+    public JobDelegate getDelegate() {\n+        return delegate;\n+    }\n+\n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n         super.execute(context);"},{"sha":"49e5e2a28a910a1e2f29e12a51559557aebb1cff","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/StaticReportlet.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FStaticReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FStaticReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FStaticReportlet.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.job.report;\n \n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.report.StaticReportletConf;\n@@ -70,7 +71,12 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n     }\n \n     @Override\n-    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n+    protected void doExtract(\n+            final ReportletConf conf,\n+            final ContentHandler handler,\n+            final AtomicReference<String> status)\n+            throws SAXException {\n+\n         if (conf instanceof StaticReportletConf) {\n             this.conf = StaticReportletConf.class.cast(conf);\n         } else {"},{"sha":"8d51e4a079b3f3b926cfe0978c041dd67faaef8f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/UserReportlet.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -355,7 +356,12 @@ private int count() {\n     }\n \n     @Override\n-    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n+    protected void doExtract(\n+            final ReportletConf conf,\n+            final ContentHandler handler,\n+            final AtomicReference<String> status)\n+            throws SAXException {\n+\n         if (conf instanceof UserReportletConf) {\n             this.conf = UserReportletConf.class.cast(conf);\n         } else {\n@@ -364,7 +370,14 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n \n         doExtractConf(handler);\n \n-        for (int page = 1; page <= (count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+        int total = count();\n+        int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n+\n+        status.set(\"Processing \" + total + \" users in \" + pages + \" pages\");\n+\n+        for (int page = 1; page <= pages; page++) {\n+            status.set(\"Processing \" + total + \" users: page \" + page + \" of \" + pages);\n+\n             List<User> users;\n             if (StringUtils.isBlank(this.conf.getMatchingCond())) {\n                 users = userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE);"},{"sha":"3e129704b835bf314dd1634e589d91e3f6ba0b84","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -28,6 +28,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.to.ExecTO;\n@@ -179,7 +180,7 @@ protected Uid createOrUpdate(\n             final PropagationTask task,\n             final ConnectorObject beforeObj,\n             final Connector connector,\n-            final Boolean[] propagationAttempted) {\n+            final AtomicReference<Boolean> propagationAttempted) {\n \n         // set of attributes to be propagated\n         Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n@@ -270,7 +271,7 @@ protected Uid delete(\n             final PropagationTask task,\n             final ConnectorObject beforeObj,\n             final Connector connector,\n-            final Boolean[] propagationAttempted) {\n+            final AtomicReference<Boolean> propagationAttempted) {\n \n         Uid result;\n         if (beforeObj == null) {\n@@ -363,7 +364,7 @@ protected TaskExec execute(final PropagationTaskTO taskTO, final PropagationRepo\n         String failureReason = null;\n \n         // Flag to state whether any propagation has been attempted\n-        Boolean[] propagationAttempted = new Boolean[] { false };\n+        AtomicReference<Boolean> propagationAttempted = new AtomicReference<>(false);\n \n         ConnectorObject beforeObj = null;\n         ConnectorObject afterObj = null;\n@@ -402,7 +403,7 @@ protected TaskExec execute(final PropagationTaskTO taskTO, final PropagationRepo\n                 default:\n             }\n \n-            execution.setStatus(propagationAttempted[0]\n+            execution.setStatus(propagationAttempted.get()\n                     ? PropagationTaskExecStatus.SUCCESS.name()\n                     : PropagationTaskExecStatus.NOT_ATTEMPTED.name());\n \n@@ -434,7 +435,7 @@ protected TaskExec execute(final PropagationTaskTO taskTO, final PropagationRepo\n                 LOG.error(\"While executing KO action on {}\", execution, wft);\n             }\n \n-            propagationAttempted[0] = true;\n+            propagationAttempted.set(true);\n \n             actions.forEach(action -> {\n                 action.onError(task, execution, e);"},{"sha":"38a71458f508c44ea848b458ab1deae9880c3a9d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -130,6 +130,7 @@ public boolean handle(final SyncDelta delta) {\n             }\n \n             doHandle(delta, provision);\n+            executor.reportHandled(delta.getObjectClass(), delta.getObject().getName());\n \n             LOG.debug(\"Successfully handled {}\", delta);\n \n@@ -159,6 +160,7 @@ public boolean handle(final SyncDelta delta) {\n             LOG.warn(\"Ignoring during pull\", e);\n \n             executor.setLatestSyncToken(delta.getObjectClass(), delta.getToken());\n+            executor.reportHandled(delta.getObjectClass(), delta.getObject().getName());\n \n             return true;\n         } catch (JobExecutionException e) {"},{"sha":"6ff95fc46d43ce229af55a39bd1e7a936361459d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -89,6 +89,7 @@ public boolean handle(final SyncDelta delta) {\n             }\n \n             doHandle(delta, orgUnit);\n+            executor.reportHandled(delta.getObjectClass(), delta.getObject().getName());\n \n             LOG.debug(\"Successfully handled {}\", delta);\n \n@@ -117,6 +118,7 @@ public boolean handle(final SyncDelta delta) {\n             LOG.warn(\"Ignoring during pull\", e);\n \n             executor.setLatestSyncToken(delta.getObjectClass(), delta.getToken());\n+            executor.reportHandled(delta.getObjectClass(), delta.getObject().getName());\n \n             return true;\n         } catch (JobExecutionException e) {"},{"sha":"e1fd52cd273c1213d68217eb1f35056ac695c483","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -29,6 +29,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.commons.lang3.tuple.MutablePair;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -52,6 +53,7 @@\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.UserPullResultHandler;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.SyncToken;\n@@ -74,6 +76,8 @@ public class PullJobDelegate extends AbstractProvisioningJobDelegate<PullTask> i\n \n     protected final Map<ObjectClass, SyncToken> latestSyncTokens = new HashMap<>();\n \n+    protected final Map<ObjectClass, MutablePair<Integer, String>> handled = new HashMap<>();\n+\n     protected ProvisioningProfile<PullTask, PullActions> profile;\n \n     protected RealmPullResultHandler rhandler;\n@@ -89,6 +93,34 @@ public void setLatestSyncToken(final ObjectClass objectClass, final SyncToken la\n         latestSyncTokens.put(objectClass, latestSyncToken);\n     }\n \n+    @Override\n+    public void reportHandled(final ObjectClass objectClass, final Name name) {\n+        MutablePair<Integer, String> pair = handled.get(objectClass);\n+        if (pair == null) {\n+            pair = MutablePair.of(0, null);\n+            handled.put(objectClass, pair);\n+        }\n+        pair.setLeft(pair.getLeft() + 1);\n+        pair.setRight(name.getNameValue());\n+    }\n+\n+    @Override\n+    public String currentStatus() {\n+        synchronized (status) {\n+            if (!handled.isEmpty()) {\n+                StringBuilder builder = new StringBuilder(\"Processed:\\n\");\n+                handled.forEach((key, value) -> {\n+                    builder.append(' ').append(value.getLeft()).append('\\t').\n+                            append(key.getObjectClassValue()).\n+                            append(\"\\t/ latest: \").append(value.getRight()).\n+                            append('\\n');\n+                });\n+                status.set(builder.toString());\n+            }\n+        }\n+        return status.get();\n+    }\n+\n     protected void setGroupOwners(final GroupPullResultHandler ghandler) {\n         ghandler.getGroupOwnerMap().entrySet().stream().map(entry -> {\n             Group group = groupDAO.find(entry.getKey());\n@@ -193,8 +225,12 @@ protected String doExecuteProvisioning(\n             }\n         }\n \n+        status.set(\"Initialization completed\");\n+\n         // First realms...\n         if (pullTask.getResource().getOrgUnit() != null) {\n+            status.set(\"Pulling \" + pullTask.getResource().getOrgUnit().getObjectClass().getObjectClassValue());\n+\n             OrgUnit orgUnit = pullTask.getResource().getOrgUnit();\n             OperationOptions options = MappingUtils.buildOperationOptions(\n                     MappingUtils.getPullItems(orgUnit.getItems()).iterator());\n@@ -248,6 +284,8 @@ protected String doExecuteProvisioning(\n \n         for (Provision provision : pullTask.getResource().getProvisions()) {\n             if (provision.getMapping() != null) {\n+                status.set(\"Pulling \" + provision.getObjectClass().getObjectClassValue());\n+\n                 SyncopePullResultHandler handler;\n                 switch (provision.getAnyType().getKind()) {\n                     case USER:\n@@ -322,6 +360,8 @@ protected String doExecuteProvisioning(\n             }\n         }\n \n+        status.set(\"Pull done\");\n+\n         String result = createReport(profile.getResults(), pullTask.getResource(), dryRun);\n         LOG.debug(\"Pull result: {}\", result);\n         return result;"},{"sha":"1967487752afe4c87f3a65bd886d755c205551a8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -20,9 +20,13 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.MutablePair;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n@@ -36,10 +40,13 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTaskAnyFilter;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.AnyObjectPushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.GroupPushResultHandler;\n@@ -81,6 +88,8 @@ public class PushJobDelegate extends AbstractProvisioningJobDelegate<PushTask> {\n \n     protected ProvisioningProfile<PushTask, PushActions> profile;\n \n+    protected final Map<String, MutablePair<Integer, String>> handled = new HashMap<>();\n+\n     protected RealmPushResultHandler rhandler;\n \n     protected AnyObjectPushResultHandler ahandler;\n@@ -89,6 +98,33 @@ public class PushJobDelegate extends AbstractProvisioningJobDelegate<PushTask> {\n \n     protected GroupPushResultHandler ghandler;\n \n+    protected void reportHandled(final String anyType, final String key) {\n+        MutablePair<Integer, String> pair = handled.get(anyType);\n+        if (pair == null) {\n+            pair = MutablePair.of(0, null);\n+            handled.put(anyType, pair);\n+        }\n+        pair.setLeft(pair.getLeft() + 1);\n+        pair.setRight(key);\n+    }\n+\n+    @Override\n+    public String currentStatus() {\n+        synchronized (status) {\n+            if (!handled.isEmpty()) {\n+                StringBuilder builder = new StringBuilder(\"Processed:\\n\");\n+                handled.forEach((key, value) -> {\n+                    builder.append(' ').append(value.getLeft()).append('\\t').\n+                            append(key).\n+                            append(\"\\t/ latest: \").append(value.getRight()).\n+                            append('\\n');\n+                });\n+                status.set(builder.toString());\n+            }\n+        }\n+        return status.get();\n+    }\n+\n     protected AnyDAO<?> getAnyDAO(final AnyTypeKind anyTypeKind) {\n         AnyDAO<?> result;\n         switch (anyTypeKind) {\n@@ -117,6 +153,13 @@ protected void doHandle(\n         for (Any<?> any : anys) {\n             try {\n                 handler.handle(any.getKey());\n+                reportHandled(\n+                        any.getType().getKey(),\n+                        (any instanceof User\n+                                ? ((User) any).getUsername()\n+                                : any instanceof Group\n+                                        ? ((Group) any).getName()\n+                                        : ((AnyObject) any).getName()));\n             } catch (Exception e) {\n                 LOG.warn(\"Failure pushing '{}' on '{}'\", any, resource, e);\n                 throw new JobExecutionException(\"While pushing \" + any + \" on \" + resource, e);\n@@ -184,15 +227,20 @@ protected String doExecuteProvisioning(\n             }\n         }\n \n+        status.set(\"Initialization completed\");\n+\n         // First realms...\n         if (pushTask.getResource().getOrgUnit() != null) {\n+            status.set(\"Pushing realms\");\n+\n             rhandler = buildRealmHandler();\n \n             for (Realm realm : realmDAO.findDescendants(profile.getTask().getSourceRealm())) {\n                 // Never push the root realm\n                 if (realm.getParent() != null) {\n                     try {\n                         rhandler.handle(realm.getKey());\n+                        reportHandled(SyncopeConstants.REALM_ANYTYPE, realm.getName());\n                     } catch (Exception e) {\n                         LOG.warn(\"Failure pushing '{}' on '{}'\", realm, pushTask.getResource(), e);\n                         throw new JobExecutionException(\"While pushing \" + realm + \" on \" + pushTask.getResource(), e);\n@@ -208,6 +256,8 @@ protected String doExecuteProvisioning(\n \n         for (Provision provision : pushTask.getResource().getProvisions()) {\n             if (provision.getMapping() != null) {\n+                status.set(\"Pushing \" + provision.getAnyType().getKey());\n+\n                 AnyDAO<?> anyDAO = getAnyDAO(provision.getAnyType().getKind());\n \n                 SyncopePushResultHandler handler;\n@@ -255,6 +305,8 @@ protected String doExecuteProvisioning(\n             }\n         }\n \n+        status.set(\"Push done\");\n+\n         String result = createReport(profile.getResults(), pushTask.getResource(), dryRun);\n         LOG.debug(\"Push result: {}\", result);\n         return result;"},{"sha":"81ef47c419e5874417601660eeb9c21accb2fe05","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/772206a4cb0cadb5ace021e3608d5fcd5b78f505/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java?ref=772206a4cb0cadb5ace021e3608d5fcd5b78f505","patch":"@@ -70,6 +70,11 @@ public ExecTO execute(final ExecuteQuery query) {\n         return getExecutableLogic().execute(query.getKey(), query.getStartAt(), query.getDryRun());\n     }\n \n+    @Override\n+    public JobTO getJob(final String key) {\n+        return getExecutableLogic().getJob(key);\n+    }\n+\n     @Override\n     public List<JobTO> listJobs() {\n         return getExecutableLogic().listJobs();"}]}