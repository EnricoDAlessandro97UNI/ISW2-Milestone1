{"sha":"0f738186c95c51e3aa861babc34f28d0627e773a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBmNzM4MTg2Yzk1YzUxZTNhYTg2MWJhYmMzNGYyOGQwNjI3ZTc3M2E=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-05-31T15:59:00Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-06-14T16:21:53Z"},"message":"[SYNCOPE-862] Preliminary work","tree":{"sha":"1bb8c751d8114bfcfab3d17e8db049137e149cf6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1bb8c751d8114bfcfab3d17e8db049137e149cf6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0f738186c95c51e3aa861babc34f28d0627e773a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0f738186c95c51e3aa861babc34f28d0627e773a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0f738186c95c51e3aa861babc34f28d0627e773a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0f738186c95c51e3aa861babc34f28d0627e773a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"47cdb82e5759d316b627366364cf322a60535932","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/47cdb82e5759d316b627366364cf322a60535932","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/47cdb82e5759d316b627366364cf322a60535932"}],"stats":{"total":2635,"additions":2085,"deletions":550},"files":[{"sha":"39f30ad3af27fb799a19d2042229ffa15f26d31d","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyObjectDisplayAttributesModalPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDisplayAttributesModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDisplayAttributesModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDisplayAttributesModalPanel.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -35,7 +35,7 @@\n \n     private static final long serialVersionUID = 5194630813773543054L;\n \n-    public static final String[] DEFAULT_SELECTION = { \"key\" };\n+    public static final String[] DEFAULT_SELECTION = { \"key\", \"name\" };\n \n     public AnyObjectDisplayAttributesModalPanel(\n             final BaseModal<T> modal,"},{"sha":"b756a05ff437e39cf517076ab65b19b803dcaee6","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/AttrColumn.java","status":"modified","additions":6,"deletions":13,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -26,10 +26,9 @@\n import org.apache.wicket.markup.repeater.Item;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.ResourceModel;\n-import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.AttributableTO;\n \n-public class AttrColumn<T extends ConnObjectTO> extends AbstractColumn<T, String> {\n+public class AttrColumn<T extends AttributableTO> extends AbstractColumn<T, String> {\n \n     private static final long serialVersionUID = 2624734332447371372L;\n \n@@ -59,20 +58,14 @@ public void populateItem(\n                 break;\n \n             case DERIVED:\n-                if (rowModel.getObject() instanceof AnyTO) {\n-                    AnyTO obj = AnyTO.class.cast(rowModel.getObject());\n-                    if (obj.getDerAttrMap().containsKey(name)) {\n-                        values = obj.getDerAttrMap().get(name).getValues();\n-                    }\n+                if (rowModel.getObject().getDerAttrMap().containsKey(name)) {\n+                    values = rowModel.getObject().getDerAttrMap().get(name).getValues();\n                 }\n                 break;\n \n             case VIRTUAL:\n-                if (rowModel.getObject() instanceof AnyTO) {\n-                    AnyTO obj = AnyTO.class.cast(rowModel.getObject());\n-                    if (obj.getVirAttrMap().containsKey(name)) {\n-                        values = obj.getVirAttrMap().get(name).getValues();\n-                    }\n+                if (rowModel.getObject().getVirAttrMap().containsKey(name)) {\n+                    values = rowModel.getObject().getVirAttrMap().get(name).getValues();\n                 }\n                 break;\n "},{"sha":"56ead58ff29c9e13b32333b843decf28234f9cd4","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/ConnObjectAttrColumn.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+\n+public class ConnObjectAttrColumn extends AbstractColumn<ConnObjectTO, String> {\n+\n+    private static final long serialVersionUID = 2624734332447371372L;\n+\n+    private final String name;\n+\n+    public ConnObjectAttrColumn(final String name, final SchemaType schemaType) {\n+        // set sortProperty to schematype#name (e.g. derivedSchema#cn, \n+        // for use with SortableUserProviderComparator.AttrModel#getObject)\n+        super(new ResourceModel(name, name), schemaType.name() + \"#\" + name);\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public void populateItem(\n+            final Item<ICellPopulator<ConnObjectTO>> cellItem,\n+            final String componentId,\n+            final IModel<ConnObjectTO> rowModel) {\n+\n+        List<String> values = null;\n+        if (rowModel.getObject().getPlainAttrMap().containsKey(name)) {\n+            values = rowModel.getObject().getPlainAttrMap().get(name).getValues();\n+        }\n+\n+        if (values == null || values.isEmpty()) {\n+            cellItem.add(new Label(componentId, \"\"));\n+        } else if (values.size() == 1) {\n+            cellItem.add(new Label(componentId, values.get(0)));\n+        } else {\n+            cellItem.add(new Label(componentId, values.toString()));\n+        }\n+    }\n+}"},{"sha":"5d149e7db1839af4c9ba1da4d26749c8e69faa56","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectDetails.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectDetails.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards.any;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.status.StatusBean;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class AnyObjectDetails extends Details<AnyObjectTO> {\n+\n+    private static final long serialVersionUID = 855618618337931784L;\n+\n+    public AnyObjectDetails(\n+            final AnyWrapper<AnyObjectTO> wrapper,\n+            final IModel<List<StatusBean>> statusModel,\n+            final boolean templateMode,\n+            final boolean includeStatusPanel,\n+            final PageReference pageRef) {\n+\n+        super(wrapper, statusModel, includeStatusPanel, pageRef);\n+\n+        AnyObjectTO anyObjectTO = wrapper.getInnerObject();\n+\n+        AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", \"name\",\n+                new PropertyModel<String>(anyObjectTO, \"name\"), false);\n+        if (templateMode) {\n+            name.enableJexlHelp();\n+        } else {\n+            name.addRequiredLabel();\n+        }\n+        this.add(name);\n+    }\n+}"},{"sha":"5952017b8ac0e15890b9e5e04ca966ccbebe69a9","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectWizardBuilder.java","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -19,20 +19,27 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.io.Serializable;\n-\n+import java.util.Collections;\n import java.util.List;\n+import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.layout.AnyObjectForm;\n import org.apache.syncope.client.console.layout.AnyObjectFormLayoutInfo;\n+import org.apache.syncope.client.console.rest.AnyObjectRestClient;\n+import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.wizard.WizardModel;\n+import org.apache.wicket.model.util.ListModel;\n \n public class AnyObjectWizardBuilder extends AnyWizardBuilder<AnyObjectTO> implements AnyObjectForm {\n \n     private static final long serialVersionUID = -2480279868319546243L;\n \n+    private final AnyObjectRestClient anyObjectRestClient = new AnyObjectRestClient();\n+\n     public AnyObjectWizardBuilder(\n             final AnyObjectTO anyObjectTO,\n             final List<String> anyTypeClasses,\n@@ -48,7 +55,7 @@ protected Serializable onApplyInternal(final AnyWrapper<AnyObjectTO> modelObject\n \n         ProvisioningResult<AnyObjectTO> actual;\n         if (inner.getKey() == null) {\n-            actual = anyObjectRestClient.create(AnyObjectTO.class.cast(inner));\n+            actual = anyObjectRestClient.create(inner);\n         } else {\n             AnyObjectPatch patch = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);\n \n@@ -63,4 +70,15 @@ protected Serializable onApplyInternal(final AnyWrapper<AnyObjectTO> modelObject\n \n         return actual;\n     }\n+\n+    @Override\n+    protected AnyObjectWizardBuilder addOptionalDetailsPanel(\n+            final AnyWrapper<AnyObjectTO> modelObject, final WizardModel wizardModel) {\n+        wizardModel.add(new AnyObjectDetails(\n+                modelObject,\n+                new ListModel<>(Collections.<StatusBean>emptyList()),\n+                mode == AjaxWizard.Mode.TEMPLATE,\n+                modelObject.getInnerObject().getKey() != null, pageRef));\n+        return this;\n+    }\n }"},{"sha":"41fa6bb050db24ba87fe7b42c7241f755fdee127","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyWizardBuilder.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.client.console.layout.AnyObjectFormLayoutInfo;\n import org.apache.syncope.client.console.layout.GroupFormLayoutInfo;\n import org.apache.syncope.client.console.layout.UserFormLayoutInfo;\n-import org.apache.syncope.client.console.rest.AnyObjectRestClient;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -40,8 +39,6 @@\n \n     private static final long serialVersionUID = -2480279868319546243L;\n \n-    protected final AnyObjectRestClient anyObjectRestClient = new AnyObjectRestClient();\n-\n     protected final List<String> anyTypeClasses;\n \n     protected AbstractAnyFormLayout<A, ? extends AnyForm<A>> formLayoutInfo;"},{"sha":"49f6801ad6facbe70453f5a34dea8a6cef72ba81","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/ConnObjectPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -57,7 +57,7 @@ public ConnObjectPanel(final String id, final Pair<ConnObjectTO, ConnObjectTO> c\n             protected List<AttrTO> load() {\n                 List<AttrTO> attrs = new ArrayList<>(connObjectTOs == null || connObjectTOs.getRight() == null\n                         ? Collections.<AttrTO>emptyList()\n-                        : connObjectTOs.getRight().getPlainAttrs());\n+                        : connObjectTOs.getRight().getAttrs());\n \n                 Collections.sort(attrs, new Comparator<AttrTO>() {\n \n@@ -77,7 +77,7 @@ public int compare(final AttrTO attr1, final AttrTO attr2) {\n             }\n         };\n \n-        final Map<String, AttrTO> beforeProfile = connObjectTOs.getLeft() == null\n+        final Map<String, AttrTO> beforeProfile = connObjectTOs == null || connObjectTOs.getLeft() == null\n                 ? null\n                 : connObjectTOs.getLeft().getPlainAttrMap();\n "},{"sha":"e61e89c7bc237ee658f128965a162137ab331f02","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -39,9 +39,9 @@ public GroupDetails(\n \n         super(wrapper, statusModel, includeStatusPanel, pageRef);\n \n-        final GroupTO groupTO = GroupWrapper.class.cast(wrapper).getInnerObject();\n+        GroupTO groupTO = GroupWrapper.class.cast(wrapper).getInnerObject();\n \n-        final AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", \"name\",\n+        AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", \"name\",\n                 new PropertyModel<String>(groupTO, \"name\"), false);\n         if (templateMode) {\n             name.enableJexlHelp();"},{"sha":"401f8e0d0f3942b074466e868fe07110a2c604eb","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -105,7 +105,6 @@ public List<MembershipTO> execute(final String filter) {\n                     public MembershipTO transform(final GroupTO input) {\n                         return new MembershipTO.Builder().\n                                 group(input.getKey(), input.getName()).\n-                                left(anyTO.getKey(), anyTO.getType()).\n                                 build();\n                     }\n                 }, new ArrayList<MembershipTO>());"},{"sha":"06ea7c8db0894d97fa65d6d241b1d438874a5320","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -570,6 +570,7 @@ private void setAttrNames(final IntMappingType type, final AjaxTextFieldPanel to\n                 case GroupKey:\n                 case GroupName:\n                 case AnyObjectKey:\n+                case AnyObjectName:\n                 default:\n                     toBeUpdated.setRequired(false);\n                     toBeUpdated.setEnabled(false);"},{"sha":"4d821feb58a8fe8368b6b0628c511f6fcb5c1b84","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/AnyObjectDetails.html","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectDetails.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectDetails.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectDetails.html?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -0,0 +1,25 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"name\"/>\n+    </div>\n+  </wicket:extend>\n+</html>"},{"sha":"1f985a40ae49ac4b04f14771cee045210eabd69e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":72,"deletions":18,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -173,7 +174,10 @@ public static AnyObjectPatch diff(\n \n         diff(updated, original, result, incremental);\n \n-        // 1. relationships\n+        // 1. name\n+        result.setName(replacePatchItem(updated.getName(), original.getName(), new StringReplacePatchItem()));\n+\n+        // 2. relationships\n         Map<Pair<String, String>, RelationshipTO> updatedRels = updated.getRelationshipMap();\n         Map<Pair<String, String>, RelationshipTO> originalRels = original.getRelationshipMap();\n \n@@ -193,21 +197,21 @@ public static AnyObjectPatch diff(\n             }\n         }\n \n-        // 2. memberships\n+        // 3. memberships\n         Map<String, MembershipTO> updatedMembs = updated.getMembershipMap();\n         Map<String, MembershipTO> originalMembs = original.getMembershipMap();\n \n         for (Map.Entry<String, MembershipTO> entry : updatedMembs.entrySet()) {\n             if (!originalMembs.containsKey(entry.getKey())) {\n                 result.getMemberships().add(new MembershipPatch.Builder().\n-                        operation(PatchOperation.ADD_REPLACE).membershipTO(entry.getValue()).build());\n+                        operation(PatchOperation.ADD_REPLACE).group(entry.getValue().getGroupKey()).build());\n             }\n         }\n \n         if (!incremental) {\n             for (String key : CollectionUtils.subtract(originalMembs.keySet(), updatedMembs.keySet())) {\n                 result.getMemberships().add(new MembershipPatch.Builder().\n-                        operation(PatchOperation.DELETE).membershipTO(originalMembs.get(key)).build());\n+                        operation(PatchOperation.DELETE).group(originalMembs.get(key).getGroupKey()).build());\n             }\n         }\n \n@@ -294,14 +298,14 @@ public static UserPatch diff(final UserTO updated, final UserTO original, final\n         for (Map.Entry<String, MembershipTO> entry : updatedMembs.entrySet()) {\n             if (!originalMembs.containsKey(entry.getKey())) {\n                 result.getMemberships().add(new MembershipPatch.Builder().\n-                        operation(PatchOperation.ADD_REPLACE).membershipTO(entry.getValue()).build());\n+                        operation(PatchOperation.ADD_REPLACE).group(entry.getValue().getGroupKey()).build());\n             }\n         }\n \n         if (!incremental) {\n             for (String key : CollectionUtils.subtract(originalMembs.keySet(), updatedMembs.keySet())) {\n                 result.getMemberships().add(new MembershipPatch.Builder().\n-                        operation(PatchOperation.DELETE).membershipTO(originalMembs.get(key)).build());\n+                        operation(PatchOperation.DELETE).group(originalMembs.get(key).getGroupKey()).build());\n             }\n         }\n \n@@ -410,7 +414,7 @@ private static <T extends AnyTO, K extends AnyPatch> void patch(final T to, fina\n \n         // 2. plain attributes\n         result.getPlainAttrs().clear();\n-        result.getPlainAttrs().addAll(AnyOperations.patch(to.getPlainAttrMap(), patch.getPlainAttrs()));\n+        result.getPlainAttrs().addAll(patch(to.getPlainAttrMap(), patch.getPlainAttrs()));\n \n         // 3. virtual attributes\n         result.getVirAttrs().clear();\n@@ -432,7 +436,7 @@ private static <T extends AnyTO, K extends AnyPatch> void patch(final T to, fina\n \n     public static GroupTO patch(final GroupTO groupTO, final GroupPatch groupPatch) {\n         GroupTO result = SerializationUtils.clone(groupTO);\n-        AnyOperations.patch(groupTO, groupPatch, result);\n+        patch(groupTO, groupPatch, result);\n \n         if (groupPatch.getName() != null) {\n             result.setName(groupPatch.getName().getValue());\n@@ -454,10 +458,10 @@ public static GroupTO patch(final GroupTO groupTO, final GroupPatch groupPatch)\n \n     public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectPatch anyObjectPatch) {\n         AnyObjectTO result = SerializationUtils.clone(anyObjectTO);\n-        AnyOperations.patch(anyObjectTO, anyObjectPatch, result);\n+        patch(anyObjectTO, anyObjectPatch, result);\n \n         // 1. relationships\n-        for (final RelationshipPatch relPatch : anyObjectPatch.getRelationships()) {\n+        for (RelationshipPatch relPatch : anyObjectPatch.getRelationships()) {\n             if (relPatch.getRelationshipTO() == null) {\n                 LOG.warn(\"Invalid {} specified: {}\", RelationshipPatch.class.getName(), relPatch);\n             } else {\n@@ -470,12 +474,37 @@ public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectPa\n \n         // 2. memberships\n         for (final MembershipPatch membPatch : anyObjectPatch.getMemberships()) {\n-            if (membPatch.getMembershipTO() == null) {\n+            if (membPatch.getGroup() == null) {\n                 LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n             } else {\n-                result.getMemberships().remove(membPatch.getMembershipTO());\n+                MembershipTO memb = IterableUtils.find(result.getMemberships(), new Predicate<MembershipTO>() {\n+\n+                    @Override\n+                    public boolean evaluate(final MembershipTO object) {\n+                        return membPatch.getGroup().equals(object.getGroupKey());\n+                    }\n+                });\n+                if (memb != null) {\n+                    result.getMemberships().remove(memb);\n+                }\n+\n                 if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    result.getMemberships().add(membPatch.getMembershipTO());\n+                    MembershipTO newMembershipTO = new MembershipTO();\n+                    newMembershipTO.setGroupKey(membPatch.getGroup());\n+\n+                    if (memb == null) {\n+                        for (AttrPatch attrPatch : membPatch.getPlainAttrs()) {\n+                            newMembershipTO.getPlainAttrs().add(attrPatch.getAttrTO());\n+                        }\n+                    } else {\n+                        newMembershipTO.getPlainAttrs().addAll(\n+                                patch(memb.getPlainAttrMap(), membPatch.getPlainAttrs()));\n+                    }\n+\n+                    // 3. virtual attributes\n+                    newMembershipTO.getVirAttrs().addAll(membPatch.getVirAttrs());\n+\n+                    result.getMemberships().add(newMembershipTO);\n                 }\n             }\n         }\n@@ -485,7 +514,7 @@ public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectPa\n \n     public static UserTO patch(final UserTO userTO, final UserPatch userPatch) {\n         UserTO result = SerializationUtils.clone(userTO);\n-        AnyOperations.patch(userTO, userPatch, result);\n+        patch(userTO, userPatch, result);\n \n         // 1. password\n         if (userPatch.getPassword() != null) {\n@@ -498,7 +527,7 @@ public static UserTO patch(final UserTO userTO, final UserPatch userPatch) {\n         }\n \n         // 3. relationships\n-        for (final RelationshipPatch relPatch : userPatch.getRelationships()) {\n+        for (RelationshipPatch relPatch : userPatch.getRelationships()) {\n             if (relPatch.getRelationshipTO() == null) {\n                 LOG.warn(\"Invalid {} specified: {}\", RelationshipPatch.class.getName(), relPatch);\n             } else {\n@@ -511,12 +540,37 @@ public static UserTO patch(final UserTO userTO, final UserPatch userPatch) {\n \n         // 4. memberships\n         for (final MembershipPatch membPatch : userPatch.getMemberships()) {\n-            if (membPatch.getMembershipTO() == null) {\n+            if (membPatch.getGroup() == null) {\n                 LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n             } else {\n-                result.getMemberships().remove(membPatch.getMembershipTO());\n+                MembershipTO memb = IterableUtils.find(result.getMemberships(), new Predicate<MembershipTO>() {\n+\n+                    @Override\n+                    public boolean evaluate(final MembershipTO object) {\n+                        return membPatch.getGroup().equals(object.getGroupKey());\n+                    }\n+                });\n+                if (memb != null) {\n+                    result.getMemberships().remove(memb);\n+                }\n+\n                 if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    result.getMemberships().add(membPatch.getMembershipTO());\n+                    MembershipTO newMembershipTO = new MembershipTO();\n+                    newMembershipTO.setGroupKey(membPatch.getGroup());\n+\n+                    if (memb == null) {\n+                        for (AttrPatch attrPatch : membPatch.getPlainAttrs()) {\n+                            newMembershipTO.getPlainAttrs().add(attrPatch.getAttrTO());\n+                        }\n+                    } else {\n+                        newMembershipTO.getPlainAttrs().addAll(\n+                                patch(memb.getPlainAttrMap(), membPatch.getPlainAttrs()));\n+                    }\n+\n+                    // 3. virtual attributes\n+                    newMembershipTO.getVirAttrs().addAll(membPatch.getVirAttrs());\n+\n+                    result.getMemberships().add(newMembershipTO);\n                 }\n             }\n         }"},{"sha":"ddb4ac368fce0a014c2c3b5f2684d420437d1f58","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AnyObjectPatch.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyObjectPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyObjectPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyObjectPatch.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -32,10 +32,20 @@ public class AnyObjectPatch extends AnyPatch {\n \n     private static final long serialVersionUID = -1644118942622556097L;\n \n+    private StringReplacePatchItem name;\n+\n     private final Set<RelationshipPatch> relationships = new HashSet<>();\n \n     private final Set<MembershipPatch> memberships = new HashSet<>();\n \n+    public StringReplacePatchItem getName() {\n+        return name;\n+    }\n+\n+    public void setName(final StringReplacePatchItem name) {\n+        this.name = name;\n+    }\n+\n     @XmlElementWrapper(name = \"relationships\")\n     @XmlElement(name = \"relationship\")\n     @JsonProperty(\"relationships\")"},{"sha":"78e61dd82af2dc9ab1b3c68ae87ee8a2a43e335c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AnyPatch.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n \n @XmlType\n-public abstract class AnyPatch extends AbstractBaseBean {\n+public abstract class AnyPatch extends AbstractBaseBean implements AttributablePatch {\n \n     private static final long serialVersionUID = -7445489774552440544L;\n \n@@ -70,16 +70,12 @@ public Set<StringPatchItem> getAuxClasses() {\n         return auxClasses;\n     }\n \n-    @XmlElementWrapper(name = \"plainAttrs\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"plainAttrs\")\n+    @Override\n     public Set<AttrPatch> getPlainAttrs() {\n         return plainAttrs;\n     }\n \n-    @XmlElementWrapper(name = \"virAttrs\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"virAttrs\")\n+    @Override\n     public Set<AttrTO> getVirAttrs() {\n         return virAttrs;\n     }"},{"sha":"fa9d18950707dda8ea8ed65ab995eaa8fa05cbf7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AttributablePatch.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAttributablePatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAttributablePatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAttributablePatch.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+\n+public interface AttributablePatch {\n+\n+    @XmlElementWrapper(name = \"plainAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"plainAttrs\")\n+    Set<AttrPatch> getPlainAttrs();\n+\n+    @XmlElementWrapper(name = \"virAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virAttrs\")\n+    Set<AttrTO> getVirAttrs();\n+}"},{"sha":"0ed42c1908e4b11080ccc4a994b034651549b385","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/MembershipPatch.java","status":"modified","additions":24,"deletions":9,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FMembershipPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FMembershipPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FMembershipPatch.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -18,13 +18,15 @@\n  */\n package org.apache.syncope.common.lib.patch;\n \n+import java.util.HashSet;\n+import java.util.Set;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n \n @XmlRootElement(name = \"membershipPatch\")\n @XmlType\n-public class MembershipPatch extends AbstractPatch {\n+public class MembershipPatch extends AbstractPatch implements AttributablePatch {\n \n     private static final long serialVersionUID = -6783121761221554433L;\n \n@@ -35,20 +37,33 @@ protected MembershipPatch newInstance() {\n             return new MembershipPatch();\n         }\n \n-        public Builder membershipTO(final MembershipTO membershipTO) {\n-            getInstance().setMembershipTO(membershipTO);\n+        public Builder group(final String group) {\n+            getInstance().setGroup(group);\n             return this;\n         }\n     }\n \n-    private MembershipTO membershipTO;\n+    private String group;\n \n-    public MembershipTO getMembershipTO() {\n-        return membershipTO;\n+    private final Set<AttrPatch> plainAttrs = new HashSet<>();\n+\n+    private final Set<AttrTO> virAttrs = new HashSet<>();\n+\n+    public String getGroup() {\n+        return group;\n     }\n \n-    public void setMembershipTO(final MembershipTO membershipTO) {\n-        this.membershipTO = membershipTO;\n+    public void setGroup(final String group) {\n+        this.group = group;\n     }\n \n+    @Override\n+    public Set<AttrPatch> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public Set<AttrTO> getVirAttrs() {\n+        return virAttrs;\n+    }\n }"},{"sha":"d0bf7d4ef10f9b35bdf43432f6dc1bfebbb9a108","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -37,12 +37,22 @@ public class AnyObjectTO extends AnyTO implements RelatableTO, GroupableTO {\n \n     private static final long serialVersionUID = 8841697496476959639L;\n \n+    private String name;\n+\n     private final List<RelationshipTO> relationships = new ArrayList<>();\n \n     private final List<MembershipTO> memberships = new ArrayList<>();\n \n     private final List<String> dynGroups = new ArrayList<>();\n \n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n     @XmlElementWrapper(name = \"relationships\")\n     @XmlElement(name = \"relationship\")\n     @JsonProperty(\"relationships\")"},{"sha":"7732bcce52db9736bd0636d38cf6a6731ded022c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"modified","additions":22,"deletions":12,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n-import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import java.util.ArrayList;\n@@ -30,15 +29,13 @@\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n \n-@XmlRootElement(name = \"any\")\n @XmlType\n @XmlSeeAlso({ UserTO.class, GroupTO.class, AnyObjectTO.class })\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-public abstract class AnyTO extends ConnObjectTO implements EntityTO {\n+public abstract class AnyTO extends AbstractAnnotatedBean implements EntityTO, AttributableTO {\n \n     private static final long serialVersionUID = -754311920679872084L;\n \n@@ -52,6 +49,8 @@ public abstract class AnyTO extends ConnObjectTO implements EntityTO {\n \n     private final List<String> auxClasses = new ArrayList<>();\n \n+    private final Set<AttrTO> plainAttrs = new HashSet<>();\n+\n     private final Set<AttrTO> derAttrs = new HashSet<>();\n \n     private final Set<AttrTO> virAttrs = new HashSet<>();\n@@ -99,14 +98,27 @@ public List<String> getAuxClasses() {\n         return auxClasses;\n     }\n \n-    @XmlElementWrapper(name = \"derAttrs\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"derAttrs\")\n+    @Override\n+    public Set<AttrTO> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public Map<String, AttrTO> getPlainAttrMap() {\n+        Map<String, AttrTO> result = new HashMap<>(plainAttrs.size());\n+        for (AttrTO attributeTO : plainAttrs) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+\n+        return Collections.unmodifiableMap(result);\n+    }\n+\n+    @Override\n     public Set<AttrTO> getDerAttrs() {\n         return derAttrs;\n     }\n \n-    @JsonIgnore\n+    @Override\n     public Map<String, AttrTO> getDerAttrMap() {\n         Map<String, AttrTO> result = new HashMap<>(derAttrs.size());\n         for (AttrTO attributeTO : derAttrs) {\n@@ -116,14 +128,12 @@ public Map<String, AttrTO> getDerAttrMap() {\n         return Collections.unmodifiableMap(result);\n     }\n \n-    @XmlElementWrapper(name = \"virAttrs\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"virAttrs\")\n+    @Override\n     public Set<AttrTO> getVirAttrs() {\n         return virAttrs;\n     }\n \n-    @JsonIgnore\n+    @Override\n     public Map<String, AttrTO> getVirAttrMap() {\n         Map<String, AttrTO> result = new HashMap<>(virAttrs.size());\n         for (AttrTO attributeTO : virAttrs) {"},{"sha":"51ee0fcc0b211e8c26bb9773058ef5a7d39016a0","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AttributableTO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttributableTO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+\n+public interface AttributableTO {\n+\n+    @XmlElementWrapper(name = \"plainAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"plainAttrs\")\n+    Set<AttrTO> getPlainAttrs();\n+\n+    @JsonIgnore\n+    Map<String, AttrTO> getPlainAttrMap();\n+\n+    @XmlElementWrapper(name = \"derAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derAttrs\")\n+    Set<AttrTO> getDerAttrs();\n+\n+    @JsonIgnore\n+    Map<String, AttrTO> getDerAttrMap();\n+\n+    @XmlElementWrapper(name = \"virAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virAttrs\")\n+    Set<AttrTO> getVirAttrs();\n+\n+    @JsonIgnore\n+    Map<String, AttrTO> getVirAttrMap();\n+}"},{"sha":"8f65b7097f3fb1354d8382ae1a6a7016ab8fc010","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnObjectTO.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -29,19 +29,20 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlRootElement(name = \"connObject\")\n @XmlType\n-public class ConnObjectTO extends AbstractAnnotatedBean {\n+public class ConnObjectTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 5139554911265442497L;\n \n     private final Set<AttrTO> attrs = new LinkedHashSet<>();\n \n-    @XmlElementWrapper(name = \"plainAttrs\")\n+    @XmlElementWrapper(name = \"attrs\")\n     @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"plainAttrs\")\n-    public Set<AttrTO> getPlainAttrs() {\n+    @JsonProperty(\"attrs\")\n+    public Set<AttrTO> getAttrs() {\n         return attrs;\n     }\n "},{"sha":"58f3d9d67f9deba68c1152d14907e6fa98d3790c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java","status":"modified","additions":68,"deletions":7,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -18,26 +18,26 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n @XmlRootElement(name = \"membership\")\n @XmlType\n-public class MembershipTO extends RelationshipTO {\n+public class MembershipTO extends RelationshipTO implements AttributableTO {\n \n     private static final long serialVersionUID = 5992828670273935861L;\n \n     public static class Builder {\n \n         private final MembershipTO instance = new MembershipTO();\n \n-        public Builder left(final String leftType, final String leftKey) {\n-            instance.setLeftType(leftType);\n-            instance.setLeftKey(leftKey);\n-            return this;\n-        }\n-\n         public Builder group(final String groupKey) {\n             instance.setRightKey(groupKey);\n             return this;\n@@ -56,6 +56,12 @@ public MembershipTO build() {\n \n     private String groupName;\n \n+    private final Set<AttrTO> plainAttrs = new HashSet<>();\n+\n+    private final Set<AttrTO> derAttrs = new HashSet<>();\n+\n+    private final Set<AttrTO> virAttrs = new HashSet<>();\n+\n     @Override\n     public String getType() {\n         return \"Membership\";\n@@ -76,11 +82,66 @@ public void setRightType(final String rightType) {\n         // ignore\n     }\n \n+    @JsonIgnore\n+    public String getGroupKey() {\n+        return getRightKey();\n+    }\n+\n+    public void setGroupKey(final String groupKey) {\n+        setRightKey(groupKey);\n+    }\n+\n     public String getGroupName() {\n         return groupName;\n     }\n \n     public void setGroupName(final String groupName) {\n         this.groupName = groupName;\n     }\n+\n+    @Override\n+    public Set<AttrTO> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public Map<String, AttrTO> getPlainAttrMap() {\n+        Map<String, AttrTO> result = new HashMap<>(plainAttrs.size());\n+        for (AttrTO attributeTO : plainAttrs) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+\n+        return Collections.unmodifiableMap(result);\n+    }\n+\n+    @Override\n+    public Set<AttrTO> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @Override\n+    public Map<String, AttrTO> getDerAttrMap() {\n+        Map<String, AttrTO> result = new HashMap<>(derAttrs.size());\n+        for (AttrTO attributeTO : derAttrs) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+\n+        return Collections.unmodifiableMap(result);\n+    }\n+\n+    @Override\n+    public Set<AttrTO> getVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    @Override\n+    public Map<String, AttrTO> getVirAttrMap() {\n+        Map<String, AttrTO> result = new HashMap<>(virAttrs.size());\n+        for (AttrTO attributeTO : virAttrs) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+\n+        return Collections.unmodifiableMap(result);\n+    }\n+\n }"},{"sha":"fc5de4ff76c50313f5555d06f44f5a81df209ff7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java","status":"modified","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -37,12 +37,6 @@ public Builder type(final String type) {\n             return this;\n         }\n \n-        public Builder left(final String leftType, final String leftKey) {\n-            instance.setLeftType(leftType);\n-            instance.setLeftKey(leftKey);\n-            return this;\n-        }\n-\n         public Builder right(final String rightType, final String rightKey) {\n             instance.setRightType(rightType);\n             instance.setRightKey(rightKey);\n@@ -56,10 +50,6 @@ public RelationshipTO build() {\n \n     private String type;\n \n-    private String leftType;\n-\n-    private String leftKey;\n-\n     private String rightType;\n \n     private String rightKey;\n@@ -72,22 +62,6 @@ public void setType(final String type) {\n         this.type = type;\n     }\n \n-    public String getLeftType() {\n-        return leftType;\n-    }\n-\n-    public void setLeftType(final String leftType) {\n-        this.leftType = leftType;\n-    }\n-\n-    public String getLeftKey() {\n-        return leftKey;\n-    }\n-\n-    public void setLeftKey(final String leftKey) {\n-        this.leftKey = leftKey;\n-    }\n-\n     public String getRightType() {\n         return rightType;\n     }"},{"sha":"db3e329cd36bdac63d5363245149fcb5d17df767","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -43,9 +43,7 @@ public enum EntityViolationType {\n     InvalidSchemaMultivalueUnique(\"org.apache.syncope.core.persistence.validation.schema.multivalueUnique\"),\n     InvalidSchedTask(\"org.apache.syncope.core.persistence.validation.schedtask\"),\n     InvalidProvisioningTask(\"org.apache.syncope.core.persistence.validation.provisioningtask\"),\n-    InvalidPlainSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.plainSchema\"),\n-    InvalidDerSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.derSchema\"),\n-    InvalidVirSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.virSchema\"),\n+    InvalidPlainAttr(\"org.apache.syncope.core.persistence.validation.plainattr\"),\n     InvalidUsername(\"org.apache.syncope.core.persistence.validation.user.username\"),\n     InvalidValueList(\"org.apache.syncope.core.persistence.validation.attr.valueList\"),\n     MoreThanOneNonNull(\"org.apache.syncope.core.persistence.validation.attrvalue.moreThanOneNonNull\");"},{"sha":"855334839331fafbbe974694286e9e0556697333","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/IntMappingType.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -56,7 +56,8 @@ public enum IntMappingType {\n     AnyObjectPlainSchema(AnyTypeKind.ANY_OBJECT),\n     AnyObjectDerivedSchema(AnyTypeKind.ANY_OBJECT),\n     AnyObjectVirtualSchema(AnyTypeKind.ANY_OBJECT),\n-    AnyObjectKey(AnyTypeKind.ANY_OBJECT);\n+    AnyObjectKey(AnyTypeKind.ANY_OBJECT),\n+    AnyObjectName(AnyTypeKind.ANY_OBJECT);\n \n     private final AnyTypeKind anyTypeKind;\n \n@@ -119,7 +120,7 @@ public static Set<IntMappingType> getAttributeTypes(final AnyTypeKind anyTypeKin\n     public static Set<IntMappingType> getEmbedded() {\n         return EnumSet.of(IntMappingType.UserKey, IntMappingType.Username, IntMappingType.Password,\n                 IntMappingType.GroupKey, IntMappingType.GroupName, IntMappingType.GroupOwnerSchema,\n-                IntMappingType.AnyObjectKey);\n+                IntMappingType.AnyObjectKey, IntMappingType.AnyObjectName);\n     }\n \n     /**\n@@ -195,7 +196,8 @@ private enum AnyMappingType {\n         AnyObjectPlainSchema,\n         AnyObjectDerivedSchema,\n         AnyObjectVirtualSchema,\n-        AnyObjectKey;\n+        AnyObjectKey,\n+        AnyObjectName;\n \n     }\n }"},{"sha":"6c04ac468b79cc4c3676e529bfc70cbcd1204e37","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AllowedSchemas.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAllowedSchemas.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAllowedSchemas.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAllowedSchemas.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.PredicateUtils;\n+import org.apache.commons.collections4.SetUtils;\n+import org.apache.syncope.core.persistence.api.entity.Schema;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+\n+public class AllowedSchemas<S extends Schema> {\n+\n+    private final Set<S> forSelf = new HashSet<>();\n+\n+    private final Map<Group, Set<S>> forMemberships = new HashMap<>();\n+\n+    public Set<S> getForSelf() {\n+        return forSelf;\n+    }\n+\n+    public Set<S> getForMembership(final Group group) {\n+        return SetUtils.emptyIfNull(forMemberships.get(group));\n+    }\n+\n+    public Map<Group, Set<S>> getForMemberships() {\n+        return forMemberships;\n+    }\n+\n+    public boolean forSelfContains(final S schema) {\n+        return forSelf.contains(schema);\n+    }\n+\n+    public boolean forSelfContains(final String schema) {\n+        return IterableUtils.matchesAny(forSelf, new KeyMatches(schema));\n+    }\n+\n+    public boolean forMembershipsContains(final Group group, final S schema) {\n+        return IterableUtils.matchesAny(forMemberships.get(group), PredicateUtils.equalPredicate(schema));\n+    }\n+\n+    public boolean forMembershipsContains(final S schema) {\n+        for (Map.Entry<Group, Set<S>> entry : forMemberships.entrySet()) {\n+            if (entry.getValue().contains(schema)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public boolean forMembershipsContains(final Group group, final String schema) {\n+        return IterableUtils.matchesAny(forMemberships.get(group), new KeyMatches(schema));\n+    }\n+\n+    public boolean forMembershipsContains(final String schema) {\n+        KeyMatches keyMatches = new KeyMatches(schema);\n+\n+        for (Map.Entry<Group, Set<S>> entry : forMemberships.entrySet()) {\n+            if (IterableUtils.matchesAny(entry.getValue(), keyMatches)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public boolean contains(final S schema) {\n+        if (forSelfContains(schema)) {\n+            return true;\n+        }\n+        return forMembershipsContains(schema);\n+    }\n+\n+    public boolean contains(final String schema) {\n+        if (forSelfContains(schema)) {\n+            return true;\n+        }\n+        return forMembershipsContains(schema);\n+    }\n+\n+    private class KeyMatches implements Predicate<S> {\n+\n+        private final String schema;\n+\n+        KeyMatches(final String schema) {\n+            this.schema = schema;\n+        }\n+\n+        @Override\n+        public boolean evaluate(final S object) {\n+            return object.getKey().equals(schema);\n+        }\n+\n+    }\n+}"},{"sha":"6b2fd4e98b66f2ec897c75050fdf344a00a0cd97","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -72,7 +71,7 @@\n      */\n     List<A> findAll(Set<String> adminRealms, int page, int itemsPerPage, List<OrderByClause> orderBy);\n \n-    <S extends Schema> Collection<S> findAllowedSchemas(A any, Class<S> reference);\n+    <S extends Schema> AllowedSchemas<S> findAllowedSchemas(A any, Class<S> reference);\n \n     int count(Set<String> adminRealms);\n "},{"sha":"c24b37d28f698ec4db2d63761db3160dd55bdb8a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -40,6 +40,10 @@ public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n     Map<String, Integer> countByRealm(AnyType anyType);\n \n+    AnyObject findByName(String name);\n+\n+    AnyObject authFindByName(String name);\n+\n     List<Group> findDynGroupMemberships(AnyObject anyObject);\n \n     List<ARelationship> findARelationships(AnyObject anyObject);"},{"sha":"82359e96b53e78f1d374419748195bd2599d2c95","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Any.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -41,6 +41,8 @@\n \n     boolean add(P attr);\n \n+    boolean remove(P attr);\n+\n     P getPlainAttr(String plainSchemaName);\n \n     List<? extends P> getPlainAttrs();"},{"sha":"0e0c8ccc37569f2cc6b76049c6def844ea3d10e7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface AnyUtils {\n@@ -52,5 +53,5 @@ public interface AnyUtils {\n \n     Set<ExternalResource> getAllResources(Any<?> any);\n \n-    <S extends Schema> Set<S> getAllowedSchemas(Any<?> any, Class<S> reference);\n+    <S extends Schema> AllowedSchemas<S> getAllowedSchemas(Any<?> any, Class<S> reference);\n }"},{"sha":"7e345a5caab2912faa64785f0de8d5c10ce97087","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GroupablePlainAttr.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupablePlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupablePlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupablePlainAttr.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface GroupablePlainAttr<A extends Any<?>, M extends Membership<A>> extends PlainAttr<A> {\n+\n+    M getMembership();\n+\n+    void setMembership(M membership);\n+}"},{"sha":"147f4696ae600dfa2151ad8eec80e2cc93ead697","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GroupableRelatable.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupableRelatable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupableRelatable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupableRelatable.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+public interface GroupableRelatable<\n+        L extends Any<P>, \n+        M extends Membership<L>, \n+        P extends GroupablePlainAttr<L, M>,\n+        R extends Any<?>,\n+        REL extends Relationship<L, R>> extends Any<P> {\n+\n+    @Override\n+    boolean add(final P attr);\n+\n+    @Override\n+    boolean remove(final P attr);\n+\n+    /**\n+     * Returns the plain attribute for this instance and the given schema name - if found, {@code NULL} otherwise.\n+     * <b>IMPORTANT:</b> This method won't return any attribute related to memberships.\n+     *\n+     * @param plainSchemaName plain schema name\n+     * @return plain attribute for this instance and the given schema name - if found, {@code NULL} otherwise\n+     */\n+    @Override\n+    P getPlainAttr(String plainSchemaName);\n+\n+    /**\n+     * Returns the plain attribute for this instance, the given schema name and the given membership -\n+     * if found, {@code NULL} otherwise.\n+     *\n+     * @param plainSchemaName plain schema name\n+     * @param membership membership\n+     * @return plain attribute for this instance, the given schema name and the given membership -\n+     * if found, {@code NULL} otherwise\n+     */\n+    P getPlainAttr(String plainSchemaName, Membership<?> membership);\n+\n+    /**\n+     * Returns the plain attributes for this instance.\n+     * <b>IMPORTANT:</b> This method won't return any attribute related to memberships.\n+     *\n+     * @return plain attribute for this instance\n+     */\n+    @Override\n+    List<? extends P> getPlainAttrs();\n+\n+    /**\n+     * Returns the list of plain attributes for this instance and the given schema name (including membeship attributes,\n+     * as opposite to {@link Any#getPlainAttr(java.lang.String)}).\n+     *\n+     * @param plainSchemaName plain schema name\n+     * @return list of plain attributes for this instance and the given schema name (including membeship attributes)\n+     */\n+    Collection<? extends P> getPlainAttrs(String plainSchemaName);\n+\n+    /**\n+     * Returns the list of plain attributes for this instance and the given membership.\n+     *\n+     * @param membership membership\n+     * @return list of plain attributes for this instance and the given membership\n+     */\n+    Collection<? extends P> getPlainAttrs(Membership<?> membership);\n+\n+    boolean add(M membership);\n+\n+    M getMembership(String groupKey);\n+\n+    List<? extends M> getMemberships();\n+\n+    boolean add(REL relationship);\n+\n+    REL getRelationship(RelationshipType relationshipType, String otherEndKey);\n+\n+    Collection<? extends REL> getRelationships(String otherEndKey);\n+\n+    Collection<? extends REL> getRelationships(RelationshipType relationshipType);\n+\n+    List<? extends REL> getRelationships();\n+\n+}"},{"sha":"64a58ce8cc253446c3f56bbda94fe8466ff0407d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/APlainAttr.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAPlainAttr.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.core.persistence.api.entity.anyobject;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.GroupablePlainAttr;\n \n-public interface APlainAttr extends PlainAttr<AnyObject> {\n+public interface APlainAttr extends GroupablePlainAttr<AnyObject, AMembership> {\n \n     @Override\n     List<? extends APlainAttrValue> getValues();"},{"sha":"7b0f4344e3ea306a32d2d7bcce16d45b13b4474d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/AnyObject.java","status":"modified","additions":5,"deletions":19,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -18,27 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.anyobject;\n \n-import java.util.Collection;\n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n+import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n \n-public interface AnyObject extends Any<APlainAttr> {\n+public interface AnyObject extends\n+        GroupableRelatable<AnyObject, AMembership, APlainAttr, AnyObject, ARelationship> {\n \n-    boolean add(ARelationship relationship);\n+    String getName();\n \n-    ARelationship getRelationship(RelationshipType relationshipType, String anyObjectKey);\n-\n-    Collection<? extends ARelationship> getRelationships(String anyObjectKey);\n-\n-    Collection<? extends ARelationship> getRelationships(RelationshipType relationshipType);\n-\n-    List<? extends ARelationship> getRelationships();\n-\n-    boolean add(AMembership membership);\n-\n-    AMembership getMembership(String membershipKey);\n-\n-    List<? extends AMembership> getMemberships();\n+    void setName(String name);\n \n }"},{"sha":"503352fc6f39ee828753375798e2e4149fa4e061","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UPlainAttr.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttr.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.core.persistence.api.entity.user;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.GroupablePlainAttr;\n \n-public interface UPlainAttr extends PlainAttr<User> {\n+public interface UPlainAttr extends GroupablePlainAttr<User, UMembership> {\n \n     @Override\n     List<? extends UPlainAttrValue> getValues();"},{"sha":"fa81fd1d22d807a5ae216e4ea09abd4686f4fe5c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":4,"deletions":28,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.user;\n \n-import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n \n-public interface User extends Any<UPlainAttr> {\n+public interface User extends\n+        GroupableRelatable<User, UMembership, UPlainAttr, AnyObject, URelationship> {\n \n     String getUsername();\n \n@@ -92,32 +92,8 @@ public interface User extends Any<UPlainAttr> {\n \n     void setMustChangePassword(boolean mustChangePassword);\n \n-    @Override\n-    boolean add(UPlainAttr attr);\n-\n-    @Override\n-    UPlainAttr getPlainAttr(String plainSchemaName);\n-\n-    @Override\n-    List<? extends UPlainAttr> getPlainAttrs();\n-\n     boolean add(Role role);\n \n     List<? extends Role> getRoles();\n \n-    boolean add(URelationship relationship);\n-\n-    URelationship getRelationship(RelationshipType relationshipType, String anyObjectKey);\n-\n-    Collection<? extends URelationship> getRelationships(String anyObjectKey);\n-\n-    Collection<? extends URelationship> getRelationships(RelationshipType relationshipType);\n-\n-    List<? extends URelationship> getRelationships();\n-\n-    boolean add(UMembership membership);\n-\n-    UMembership getMembership(String groupKey);\n-\n-    List<? extends UMembership> getMemberships();\n }"},{"sha":"0eb38aca615b5924d24a892c4ef75447a5228116","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":41,"deletions":15,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -23,8 +23,10 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.regex.Pattern;\n import javax.persistence.NoResultException;\n@@ -35,6 +37,7 @@\n import org.apache.commons.jexl3.parser.Token;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -54,6 +57,7 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n@@ -420,33 +424,55 @@ public List<A> findAll(final Set<String> adminRealms,\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public <S extends Schema> Collection<S> findAllowedSchemas(final A any, final Class<S> reference) {\n-        Set<AnyTypeClass> classes = new HashSet<>();\n-        classes.addAll(any.getType().getClasses());\n-        classes.addAll(any.getAuxClasses());\n+    public <S extends Schema> AllowedSchemas<S> findAllowedSchemas(final A any, final Class<S> reference) {\n+        AllowedSchemas<S> result = new AllowedSchemas<>();\n+\n+        // schemas given by type and aux classes\n+        Set<AnyTypeClass> typeOwnClasses = new HashSet<>();\n+        typeOwnClasses.addAll(any.getType().getClasses());\n+        typeOwnClasses.addAll(any.getAuxClasses());\n+\n+        for (AnyTypeClass typeClass : typeOwnClasses) {\n+            if (reference.equals(PlainSchema.class)) {\n+                result.getForSelf().addAll((Collection<? extends S>) typeClass.getPlainSchemas());\n+            } else if (reference.equals(DerSchema.class)) {\n+                result.getForSelf().addAll((Collection<? extends S>) typeClass.getDerSchemas());\n+            } else if (reference.equals(VirSchema.class)) {\n+                result.getForSelf().addAll((Collection<? extends S>) typeClass.getVirSchemas());\n+            }\n+        }\n+\n+        // schemas given by type extensions\n+        Map<Group, List<? extends AnyTypeClass>> typeExtensionClasses = new HashMap<>();\n         if (any instanceof User) {\n             for (UMembership memb : ((User) any).getMemberships()) {\n                 for (TypeExtension typeExtension : memb.getRightEnd().getTypeExtensions()) {\n-                    classes.addAll(typeExtension.getAuxClasses());\n+                    typeExtensionClasses.put(memb.getRightEnd(), typeExtension.getAuxClasses());\n                 }\n             }\n         } else if (any instanceof AnyObject) {\n             for (AMembership memb : ((AnyObject) any).getMemberships()) {\n                 for (TypeExtension typeExtension : memb.getRightEnd().getTypeExtensions()) {\n-                    classes.addAll(typeExtension.getAuxClasses());\n+                    if (any.getType().equals(typeExtension.getAnyType())) {\n+                        typeExtensionClasses.put(memb.getRightEnd(), typeExtension.getAuxClasses());\n+                    }\n                 }\n             }\n         }\n \n-        Set<S> result = new HashSet<>();\n-\n-        for (AnyTypeClass typeClass : classes) {\n-            if (reference.equals(PlainSchema.class)) {\n-                result.addAll((Collection<? extends S>) typeClass.getPlainSchemas());\n-            } else if (reference.equals(DerSchema.class)) {\n-                result.addAll((Collection<? extends S>) typeClass.getDerSchemas());\n-            } else if (reference.equals(VirSchema.class)) {\n-                result.addAll((Collection<? extends S>) typeClass.getVirSchemas());\n+        for (Map.Entry<Group, List<? extends AnyTypeClass>> entry : typeExtensionClasses.entrySet()) {\n+            result.getForMemberships().put(entry.getKey(), new HashSet<S>());\n+            for (AnyTypeClass typeClass : entry.getValue()) {\n+                if (reference.equals(PlainSchema.class)) {\n+                    result.getForMemberships().get(entry.getKey()).\n+                            addAll((Collection<? extends S>) typeClass.getPlainSchemas());\n+                } else if (reference.equals(DerSchema.class)) {\n+                    result.getForMemberships().get(entry.getKey()).\n+                            addAll((Collection<? extends S>) typeClass.getDerSchemas());\n+                } else if (reference.equals(VirSchema.class)) {\n+                    result.getForMemberships().get(entry.getKey()).\n+                            addAll((Collection<? extends S>) typeClass.getVirSchemas());\n+                }\n             }\n         }\n "},{"sha":"5280c3c2b1fc4b46cddba5083bd48a68aca402fe","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -27,6 +27,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -40,6 +41,7 @@\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -123,6 +125,38 @@ public boolean evaluate(final String realm) {\n         }\n     }\n \n+    @Override\n+    public AnyObject findByName(final String name) {\n+        TypedQuery<AnyObject> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAAnyObject.class.getSimpleName() + \" e WHERE e.name = :name\", AnyObject.class);\n+        query.setParameter(\"name\", name);\n+\n+        AnyObject result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No any object found with name {}\", name, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public AnyObject authFindByName(final String name) {\n+        if (name == null) {\n+            throw new NotFoundException(\"Null name\");\n+        }\n+\n+        AnyObject anyObject = findByName(name);\n+        if (anyObject == null) {\n+            throw new NotFoundException(\"Any Object \" + name);\n+        }\n+\n+        securityChecks(anyObject);\n+\n+        return anyObject;\n+    }\n+\n     @Override\n     public List<ARelationship> findARelationships(final AnyObject anyObject) {\n         TypedQuery<ARelationship> query = entityManager().createQuery("},{"sha":"d1df51807d224c201021251e27b216759cdece49","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -40,9 +39,6 @@ public class JPAConfDAO extends AbstractDAO<Conf> implements ConfDAO {\n     @Autowired\n     private PlainSchemaDAO schemaDAO;\n \n-    @Autowired\n-    private PlainAttrDAO attrDAO;\n-\n     @Override\n     public Conf get() {\n         Conf instance = entityManager().find(JPAConf.class, KEY);\n@@ -96,8 +92,8 @@ public Conf save(final CPlainAttr attr) {\n         if (old != null && (!attr.getSchema().isUniqueConstraint()\n                 || (!attr.getUniqueValue().getStringValue().equals(old.getUniqueValue().getStringValue())))) {\n \n-            instance.getPlainAttrs().remove(old);\n-            attrDAO.delete(old.getKey(), CPlainAttr.class);\n+            old.setOwner(null);\n+            instance.remove(old);\n         }\n \n         instance.add(attr);\n@@ -111,8 +107,8 @@ public Conf delete(final String key) {\n         Conf instance = get();\n         CPlainAttr attr = instance.getPlainAttr(key);\n         if (attr != null) {\n-            instance.getPlainAttrs().remove(attr);\n-            attrDAO.delete(attr.getKey(), CPlainAttr.class);\n+            attr.setOwner(null);\n+            instance.remove(attr);\n \n             instance = entityManager().merge(instance);\n         }"},{"sha":"af5220ff6cdfc9651e731b603d20b7f59c561485","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":26,"deletions":6,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -44,6 +44,7 @@\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -52,9 +53,11 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension;\n@@ -72,6 +75,9 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n     @Autowired\n     private UserDAO userDAO;\n \n+    @Autowired\n+    private PlainAttrDAO plainAttrDAO;\n+\n     @Override\n     protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.GROUP);\n@@ -242,16 +248,30 @@ public Group save(final Group group) {\n     @Override\n     public void delete(final Group group) {\n         for (AMembership membership : findAMemberships(group)) {\n-            membership.getLeftEnd().getMemberships().remove(membership);\n-            anyObjectDAO.save(membership.getLeftEnd());\n+            AnyObject leftEnd = membership.getLeftEnd();\n+            leftEnd.getMemberships().remove(membership);\n+            membership.setRightEnd(null);\n+            for (APlainAttr attr : leftEnd.getPlainAttrs(membership)) {\n+                leftEnd.remove(attr);\n+                attr.setOwner(null);\n+                attr.setMembership(null);\n+                plainAttrDAO.delete(attr);\n+            }\n \n-            entityManager().remove(membership);\n+            anyObjectDAO.save(leftEnd);\n         }\n         for (UMembership membership : findUMemberships(group)) {\n-            membership.getLeftEnd().getMemberships().remove(membership);\n-            userDAO.save(membership.getLeftEnd());\n+            User leftEnd = membership.getLeftEnd();\n+            leftEnd.getMemberships().remove(membership);\n+            membership.setRightEnd(null);\n+            for (UPlainAttr attr : leftEnd.getPlainAttrs(membership)) {\n+                leftEnd.remove(attr);\n+                attr.setOwner(null);\n+                attr.setMembership(null);\n+                plainAttrDAO.delete(attr);\n+            }\n \n-            entityManager().remove(membership);\n+            userDAO.save(leftEnd);\n         }\n \n         entityManager().remove(group);"},{"sha":"d4ba9265176e5ad964c8ecd42c737a36a2e9a374","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -68,7 +68,7 @@ public <T extends PlainAttr<?>> void delete(final String key, final Class<T> ref\n     @SuppressWarnings(\"unchecked\")\n     public <T extends PlainAttr<?>> void delete(final T plainAttr) {\n         if (plainAttr.getOwner() != null) {\n-            ((Any<T>) plainAttr.getOwner()).getPlainAttrs().remove(plainAttr);\n+            ((Any<T>) plainAttr.getOwner()).remove(plainAttr);\n         }\n \n         entityManager().remove(plainAttr);"},{"sha":"cf3ede1f141dc35a227aa38877e977e87fea5245","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAny.java","status":"modified","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -25,14 +25,11 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.AnyCheck;\n \n @AnyCheck\n@@ -80,34 +77,9 @@ public void setStatus(final String status) {\n         this.status = status;\n     }\n \n-    @Override\n-    public P getPlainAttr(final String plainSchemaName) {\n-        return IterableUtils.find(getPlainAttrs(), new Predicate<P>() {\n-\n-            @Override\n-            public boolean evaluate(final P plainAttr) {\n-                return plainAttr != null && plainAttr.getSchema() != null\n-                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n-            }\n-        });\n-    }\n-\n-    protected abstract List<JPAExternalResource> internalGetResources();\n-\n-    @Override\n-    public boolean add(final ExternalResource resource) {\n-        checkType(resource, JPAExternalResource.class);\n-        return internalGetResources().add((JPAExternalResource) resource);\n-    }\n-\n     @Override\n     public List<String> getResourceNames() {\n         return CollectionUtils.collect(\n                 getResources(), EntityUtils.<ExternalResource>keyTransformer(), new ArrayList<String>());\n     }\n-\n-    @Override\n-    public List<? extends ExternalResource> getResources() {\n-        return internalGetResources();\n-    }\n }"},{"sha":"a2a41fac6298a7ff2ab863937abd3740fa754f51","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractGroupableRelatable.java","status":"added","additions":158,"deletions":0,"changes":158,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractGroupableRelatable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractGroupableRelatable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractGroupableRelatable.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.GroupablePlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.Membership;\n+import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n+import org.apache.syncope.core.persistence.api.entity.Relationship;\n+import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n+\n+public abstract class AbstractGroupableRelatable<\n+        L extends Any<P>, \n+        M extends Membership<L>, \n+        P extends GroupablePlainAttr<L, M>,\n+        R extends Any<?>,\n+        REL extends Relationship<L, R>>\n+        extends AbstractAny<P> implements GroupableRelatable<L, M, P, R, REL> {\n+\n+    private static final long serialVersionUID = -2269285197388729673L;\n+\n+    protected abstract List<? extends P> internalGetPlainAttrs();\n+\n+    @Override\n+    public boolean remove(final P attr) {\n+        return internalGetPlainAttrs().remove(attr);\n+    }\n+\n+    @Override\n+    public P getPlainAttr(final String plainSchemaName) {\n+        return IterableUtils.find(internalGetPlainAttrs(), new Predicate<P>() {\n+\n+            @Override\n+            public boolean evaluate(final P plainAttr) {\n+                return plainAttr != null && plainAttr.getSchema() != null\n+                        && plainAttr.getMembership() == null\n+                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public P getPlainAttr(final String plainSchemaName, final Membership<?> membership) {\n+        return IterableUtils.find(internalGetPlainAttrs(), new Predicate<P>() {\n+\n+            @Override\n+            public boolean evaluate(final P plainAttr) {\n+                return plainAttr != null && plainAttr.getSchema() != null\n+                        && plainAttr.getMembership() != null && plainAttr.getMembership().equals(membership)\n+                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public List<? extends P> getPlainAttrs() {\n+        return CollectionUtils.select(internalGetPlainAttrs(), new Predicate<P>() {\n+\n+            @Override\n+            public boolean evaluate(final P plainAttr) {\n+                return plainAttr != null && plainAttr.getSchema() != null\n+                        && plainAttr.getMembership() == null;\n+            }\n+        }, new ArrayList<P>());\n+    }\n+\n+    @Override\n+    public Collection<? extends P> getPlainAttrs(final String plainSchemaName) {\n+        return CollectionUtils.select(internalGetPlainAttrs(), new Predicate<P>() {\n+\n+            @Override\n+            public boolean evaluate(final P plainAttr) {\n+                return plainAttr != null && plainAttr.getSchema() != null\n+                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Collection<? extends P> getPlainAttrs(final Membership<?> membership) {\n+        return CollectionUtils.select(internalGetPlainAttrs(), new Predicate<P>() {\n+\n+            @Override\n+            public boolean evaluate(final P plainAttr) {\n+                return plainAttr != null && plainAttr.getSchema() != null\n+                        && membership.equals(plainAttr.getMembership());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public M getMembership(final String groupKey) {\n+        return IterableUtils.find(getMemberships(), new Predicate<M>() {\n+\n+            @Override\n+            public boolean evaluate(final M membership) {\n+                return groupKey != null && groupKey.equals(membership.getRightEnd().getKey());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public REL getRelationship(final RelationshipType relationshipType, final String otherEndKey) {\n+        return IterableUtils.find(getRelationships(), new Predicate<REL>() {\n+\n+            @Override\n+            public boolean evaluate(final REL relationship) {\n+                return otherEndKey != null && otherEndKey.equals(relationship.getRightEnd().getKey())\n+                        && ((relationshipType == null && relationship.getType() == null)\n+                        || (relationshipType != null && relationshipType.equals(relationship.getType())));\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Collection<? extends REL> getRelationships(final RelationshipType relationshipType) {\n+        return CollectionUtils.select(getRelationships(), new Predicate<REL>() {\n+\n+            @Override\n+            public boolean evaluate(final REL relationship) {\n+                return relationshipType != null && relationshipType.equals(relationship.getType());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Collection<? extends REL> getRelationships(final String otherEndKey) {\n+        return CollectionUtils.select(getRelationships(), new Predicate<REL>() {\n+\n+            @Override\n+            public boolean evaluate(final REL relationship) {\n+                return otherEndKey != null && otherEndKey.equals(relationship.getRightEnd().getKey());\n+            }\n+        });\n+    }\n+}"},{"sha":"5c1b203c519dceb817e6f28c87c39e21e6604e15","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -342,17 +343,17 @@ public Set<ExternalResource> getAllResources(final Any<?> any) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <S extends Schema> Set<S> getAllowedSchemas(final Any<?> any, final Class<S> reference) {\n-        Set<S> schemas = new HashSet<>();\n+    public <S extends Schema> AllowedSchemas<S> getAllowedSchemas(final Any<?> any, final Class<S> reference) {\n+        AllowedSchemas<S> result = null;\n \n         if (any instanceof User) {\n-            schemas.addAll(userDAO.findAllowedSchemas((User) any, reference));\n+            result = userDAO.findAllowedSchemas((User) any, reference);\n         } else if (any instanceof Group) {\n-            schemas.addAll(groupDAO.findAllowedSchemas((Group) any, reference));\n+            result = groupDAO.findAllowedSchemas((Group) any, reference);\n         } else if (any instanceof AnyObject) {\n-            schemas.addAll(anyObjectDAO.findAllowedSchemas((AnyObject) any, reference));\n+            result = anyObjectDAO.findAllowedSchemas((AnyObject) any, reference);\n         }\n \n-        return schemas;\n+        return result;\n     }\n }"},{"sha":"044faae129f38e80e47c2f80ed1772267a3a4945","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAPlainAttr.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttr.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -27,17 +27,20 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n \n @Entity\n-@Table(name = JPAAPlainAttr.TABLE)\n+@Table(name = JPAAPlainAttr.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"owner_id\", \"membership_id\", \"schema_id\" }))\n public class JPAAPlainAttr extends AbstractPlainAttr<AnyObject> implements APlainAttr {\n \n     private static final long serialVersionUID = 8066058729580952116L;\n@@ -47,6 +50,12 @@ public class JPAAPlainAttr extends AbstractPlainAttr<AnyObject> implements APlai\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAAnyObject owner;\n \n+    /**\n+     * The membership of this attribute; might be {@code NULL} if this attribute is not related to a membership.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAAMembership membership;\n+\n     @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n     @Valid\n     private List<JPAAPlainAttrValue> values = new ArrayList<>();\n@@ -66,6 +75,17 @@ public void setOwner(final AnyObject owner) {\n         this.owner = (JPAAnyObject) owner;\n     }\n \n+    @Override\n+    public AMembership getMembership() {\n+        return membership;\n+    }\n+\n+    @Override\n+    public void setMembership(final AMembership membership) {\n+        checkType(membership, JPAAMembership.class);\n+        this.membership = (JPAAMembership) membership;\n+    }\n+\n     @Override\n     protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n         checkType(attrValue, JPAAPlainAttrValue.class);"},{"sha":"d7900828583cdffb0e68852091b961eeabef61a2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":34,"deletions":61,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.List;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n@@ -33,30 +33,33 @@\n import javax.persistence.Table;\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractAny;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGroupableRelatable;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n \n @Entity\n @Table(name = JPAAnyObject.TABLE)\n @Cacheable\n-public class JPAAnyObject extends AbstractAny<APlainAttr> implements AnyObject {\n+public class JPAAnyObject\n+        extends AbstractGroupableRelatable<AnyObject, AMembership, APlainAttr, AnyObject, ARelationship>\n+        implements AnyObject {\n \n     private static final long serialVersionUID = 9063766472970643492L;\n \n     public static final String TABLE = \"AnyObject\";\n \n+    @Column(unique = true)\n+    @NotNull\n+    private String name;\n+\n     @NotNull\n     @ManyToOne(fetch = FetchType.EAGER, optional = false)\n     private JPAAnyType type;\n@@ -79,14 +82,24 @@ public class JPAAnyObject extends AbstractAny<APlainAttr> implements AnyObject {\n             @JoinColumn(name = \"anyTypeClass_id\"))\n     private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"leftEnd\")\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"leftEnd\")\n     @Valid\n     private List<JPAARelationship> relationships = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"leftEnd\")\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"leftEnd\")\n     @Valid\n     private List<JPAAMembership> memberships = new ArrayList<>();\n \n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n     @Override\n     public AnyType getType() {\n         return type;\n@@ -98,22 +111,28 @@ public void setType(final AnyType type) {\n         this.type = (JPAAnyType) type;\n     }\n \n+    @Override\n+    public boolean add(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        return resources.add((JPAExternalResource) resource);\n+    }\n+\n+    @Override\n+    public List<? extends ExternalResource> getResources() {\n+        return resources;\n+    }\n+\n     @Override\n     public boolean add(final APlainAttr attr) {\n         checkType(attr, JPAAPlainAttr.class);\n         return plainAttrs.add((JPAAPlainAttr) attr);\n     }\n \n     @Override\n-    public List<? extends APlainAttr> getPlainAttrs() {\n+    protected List<? extends APlainAttr> internalGetPlainAttrs() {\n         return plainAttrs;\n     }\n \n-    @Override\n-    protected List<JPAExternalResource> internalGetResources() {\n-        return resources;\n-    }\n-\n     @Override\n     public boolean add(final AnyTypeClass auxClass) {\n         checkType(auxClass, JPAAnyTypeClass.class);\n@@ -131,41 +150,6 @@ public boolean add(final ARelationship relationship) {\n         return this.relationships.add((JPAARelationship) relationship);\n     }\n \n-    @Override\n-    public ARelationship getRelationship(final RelationshipType relationshipType, final String anyObjectKey) {\n-        return IterableUtils.find(getRelationships(), new Predicate<ARelationship>() {\n-\n-            @Override\n-            public boolean evaluate(final ARelationship relationship) {\n-                return anyObjectKey != null && anyObjectKey.equals(relationship.getRightEnd().getKey())\n-                        && ((relationshipType == null && relationship.getType() == null)\n-                        || (relationshipType != null && relationshipType.equals(relationship.getType())));\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public Collection<? extends ARelationship> getRelationships(final RelationshipType relationshipType) {\n-        return CollectionUtils.select(getRelationships(), new Predicate<ARelationship>() {\n-\n-            @Override\n-            public boolean evaluate(final ARelationship relationship) {\n-                return relationshipType != null && relationshipType.equals(relationship.getType());\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public Collection<? extends ARelationship> getRelationships(final String anyObjectKey) {\n-        return CollectionUtils.select(getRelationships(), new Predicate<ARelationship>() {\n-\n-            @Override\n-            public boolean evaluate(final ARelationship relationship) {\n-                return anyObjectKey != null && anyObjectKey.equals(relationship.getRightEnd().getKey());\n-            }\n-        });\n-    }\n-\n     @Override\n     public List<? extends ARelationship> getRelationships() {\n         return relationships;\n@@ -177,17 +161,6 @@ public boolean add(final AMembership membership) {\n         return this.memberships.add((JPAAMembership) membership);\n     }\n \n-    @Override\n-    public AMembership getMembership(final String groupKey) {\n-        return IterableUtils.find(getMemberships(), new Predicate<AMembership>() {\n-\n-            @Override\n-            public boolean evaluate(final AMembership membership) {\n-                return groupKey != null && groupKey.equals(membership.getRightEnd().getKey());\n-            }\n-        });\n-    }\n-\n     @Override\n     public List<? extends AMembership> getMemberships() {\n         return memberships;"},{"sha":"88ce38f4b32931ac1c61680baec0323360c10712","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -47,7 +47,7 @@ public class JPAConf extends AbstractProvidedKeyEntity implements Conf {\n \n     public static final String TABLE = \"SyncopeConf\";\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"owner\")\n     @Valid\n     private List<JPACPlainAttr> plainAttrs = new ArrayList<>();\n \n@@ -57,6 +57,12 @@ public boolean add(final CPlainAttr attr) {\n         return plainAttrs.add((JPACPlainAttr) attr);\n     }\n \n+    @Override\n+    public boolean remove(final CPlainAttr attr) {\n+        checkType(attr, JPACPlainAttr.class);\n+        return plainAttrs.remove((JPACPlainAttr) attr);\n+    }\n+\n     @Override\n     public CPlainAttr getPlainAttr(final String plainSchemaName) {\n         return IterableUtils.find(plainAttrs, new Predicate<CPlainAttr>() {"},{"sha":"53cf335a10407cc5045e676e72394b43adb4f3da","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGPlainAttr.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttr.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -27,6 +27,7 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n@@ -37,7 +38,8 @@\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n \n @Entity\n-@Table(name = JPAGPlainAttr.TABLE)\n+@Table(name = JPAGPlainAttr.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"owner_id\", \"schema_id\" }))\n public class JPAGPlainAttr extends AbstractPlainAttr<Group> implements GPlainAttr {\n \n     private static final long serialVersionUID = 2848159565890995780L;"},{"sha":"bcfa9b0c945642a1c5ecaf4c016e0c9474d50f09","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":35,"deletions":10,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -44,6 +44,7 @@\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractAny;\n@@ -74,7 +75,7 @@ public class JPAGroup extends AbstractAny<GPlainAttr> implements Group {\n     @ManyToOne\n     private JPAGroup groupOwner;\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"owner\")\n     @Valid\n     private List<JPAGPlainAttr> plainAttrs = new ArrayList<>();\n \n@@ -103,6 +104,16 @@ public class JPAGroup extends AbstractAny<GPlainAttr> implements Group {\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"group\")\n     private List<JPATypeExtension> typeExtensions = new ArrayList<>();\n \n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n     @Override\n     public AnyType getType() {\n         return ApplicationContextProvider.getBeanFactory().getBean(AnyTypeDAO.class).findGroup();\n@@ -114,18 +125,14 @@ public void setType(final AnyType type) {\n     }\n \n     @Override\n-    protected List<JPAExternalResource> internalGetResources() {\n-        return resources;\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return name;\n+    public boolean add(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        return resources.add((JPAExternalResource) resource);\n     }\n \n     @Override\n-    public void setName(final String name) {\n-        this.name = name;\n+    public List<? extends ExternalResource> getResources() {\n+        return resources;\n     }\n \n     @Override\n@@ -156,6 +163,24 @@ public boolean add(final GPlainAttr attr) {\n         return plainAttrs.add((JPAGPlainAttr) attr);\n     }\n \n+    @Override\n+    public boolean remove(final GPlainAttr attr) {\n+        checkType(attr, JPAGPlainAttr.class);\n+        return plainAttrs.remove((JPAGPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public GPlainAttr getPlainAttr(final String plainSchemaName) {\n+        return IterableUtils.find(getPlainAttrs(), new Predicate<GPlainAttr>() {\n+\n+            @Override\n+            public boolean evaluate(final GPlainAttr plainAttr) {\n+                return plainAttr != null && plainAttr.getSchema() != null\n+                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n+            }\n+        });\n+    }\n+\n     @Override\n     public List<? extends GPlainAttr> getPlainAttrs() {\n         return plainAttrs;"},{"sha":"1d00f89673b9c4f6381201df6abfd27efa69ae7a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMappingItem.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -183,6 +183,10 @@ public String getIntAttrName() {\n                 name = \"groupOwnerSchema\";\n                 break;\n \n+            case AnyObjectName:\n+                name = \"anyObjectName\";\n+                break;\n+                \n             default:\n                 name = intAttrName;\n         }"},{"sha":"bdabf2cc642b7701a07e0a8669fcd937c4caf1b5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUPlainAttr.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -27,17 +27,20 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n \n @Entity\n-@Table(name = JPAUPlainAttr.TABLE)\n+@Table(name = JPAUPlainAttr.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"owner_id\", \"membership_id\", \"schema_id\" }))\n public class JPAUPlainAttr extends AbstractPlainAttr<User> implements UPlainAttr {\n \n     private static final long serialVersionUID = 6333601983691157406L;\n@@ -50,6 +53,12 @@ public class JPAUPlainAttr extends AbstractPlainAttr<User> implements UPlainAttr\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAUser owner;\n \n+    /**\n+     * The membership of this attribute; might be {@code NULL} if this attribute is not related to a membership.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAUMembership membership;\n+\n     /**\n      * Values of this attribute (if schema is not UNIQUE).\n      */\n@@ -75,6 +84,17 @@ public void setOwner(final User owner) {\n         this.owner = (JPAUser) owner;\n     }\n \n+    @Override\n+    public UMembership getMembership() {\n+        return membership;\n+    }\n+\n+    @Override\n+    public void setMembership(final UMembership membership) {\n+        checkType(membership, JPAUMembership.class);\n+        this.membership = (JPAUMembership) membership;\n+    }\n+\n     @Override\n     protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n         checkType(attrValue, JPAUPlainAttrValue.class);"},{"sha":"f207cfe0b35eee3462108033000041811fe388a5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":16,"deletions":57,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.Calendar;\n-import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n import javax.persistence.Basic;\n@@ -47,9 +46,6 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n@@ -62,18 +58,21 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractAny;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGroupableRelatable;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n \n @Entity\n @Table(name = JPAUser.TABLE)\n @Cacheable\n-public class JPAUser extends AbstractAny<UPlainAttr> implements User {\n+public class JPAUser\n+        extends AbstractGroupableRelatable<User, UMembership, UPlainAttr, AnyObject, URelationship>\n+        implements User {\n \n     private static final long serialVersionUID = -3905046855521446823L;\n \n@@ -172,11 +171,11 @@ public class JPAUser extends AbstractAny<UPlainAttr> implements User {\n             @JoinColumn(name = \"anyTypeClass_id\"))\n     private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"leftEnd\")\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"leftEnd\")\n     @Valid\n     private List<JPAURelationship> relationships = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"leftEnd\")\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"leftEnd\")\n     @Valid\n     private List<JPAUMembership> memberships = new ArrayList<>();\n \n@@ -197,7 +196,13 @@ public void setType(final AnyType type) {\n     }\n \n     @Override\n-    protected List<JPAExternalResource> internalGetResources() {\n+    public boolean add(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        return resources.add((JPAExternalResource) resource);\n+    }\n+\n+    @Override\n+    public List<? extends ExternalResource> getResources() {\n         return resources;\n     }\n \n@@ -270,7 +275,7 @@ public boolean add(final UPlainAttr attr) {\n     }\n \n     @Override\n-    public List<? extends UPlainAttr> getPlainAttrs() {\n+    protected List<? extends UPlainAttr> internalGetPlainAttrs() {\n         return plainAttrs;\n     }\n \n@@ -470,41 +475,6 @@ public boolean add(final URelationship relationship) {\n         return this.relationships.add((JPAURelationship) relationship);\n     }\n \n-    @Override\n-    public URelationship getRelationship(final RelationshipType relationshipType, final String anyObjectKey) {\n-        return IterableUtils.find(getRelationships(), new Predicate<URelationship>() {\n-\n-            @Override\n-            public boolean evaluate(final URelationship relationship) {\n-                return anyObjectKey != null && anyObjectKey.equals(relationship.getRightEnd().getKey())\n-                        && ((relationshipType == null && relationship.getType() == null)\n-                        || (relationshipType != null && relationshipType.equals(relationship.getType())));\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public Collection<? extends URelationship> getRelationships(final RelationshipType relationshipType) {\n-        return CollectionUtils.select(getRelationships(), new Predicate<URelationship>() {\n-\n-            @Override\n-            public boolean evaluate(final URelationship relationship) {\n-                return relationshipType != null && relationshipType.equals(relationship.getType());\n-            }\n-        });\n-    }\n-\n-    @Override\n-    public Collection<? extends URelationship> getRelationships(final String anyObjectKey) {\n-        return CollectionUtils.select(getRelationships(), new Predicate<URelationship>() {\n-\n-            @Override\n-            public boolean evaluate(final URelationship relationship) {\n-                return anyObjectKey != null && anyObjectKey.equals(relationship.getRightEnd().getKey());\n-            }\n-        });\n-    }\n-\n     @Override\n     public List<? extends URelationship> getRelationships() {\n         return relationships;\n@@ -516,17 +486,6 @@ public boolean add(final UMembership membership) {\n         return this.memberships.add((JPAUMembership) membership);\n     }\n \n-    @Override\n-    public UMembership getMembership(final String groupKey) {\n-        return IterableUtils.find(getMemberships(), new Predicate<UMembership>() {\n-\n-            @Override\n-            public boolean evaluate(final UMembership membership) {\n-                return groupKey != null && groupKey.equals(membership.getRightEnd().getKey());\n-            }\n-        });\n-    }\n-\n     @Override\n     public List<? extends UMembership> getMemberships() {\n         return memberships;"},{"sha":"37e227f6e948ffef713effaaa9f830c36c81ac4b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyValidator.java","status":"modified","additions":38,"deletions":17,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -18,42 +18,63 @@\n  */\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n-import java.util.Collection;\n import javax.validation.ConstraintValidatorContext;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n+import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n \n @SuppressWarnings(\"rawtypes\")\n public class AnyValidator extends AbstractValidator<AnyCheck, Any> {\n \n+    private boolean raiseNotAllowedViolation(\n+            final ConstraintValidatorContext context,\n+            final String schema,\n+            final Group group) {\n+\n+        if (group == null) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidPlainAttr,\n+                            schema + \" not allowed for this instance\")).\n+                    addPropertyNode(\"plainAttrs\").addConstraintViolation();\n+        } else {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidPlainAttr,\n+                            schema + \" not allowed for membership of group \" + group.getName())).\n+                    addPropertyNode(\"plainAttrs\").addConstraintViolation();\n+        }\n+        return false;\n+    }\n+\n     @Override\n     public boolean isValid(final Any any, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n         if (!(any instanceof Conf)) {\n-            Collection<String> allowedPlainSchemas = CollectionUtils.collect(new JPAAnyUtilsFactory().\n-                    getInstance(any.getType().getKind()).getAllowedSchemas(any, PlainSchema.class),\n-                    new Transformer<PlainSchema, String>() {\n+            AllowedSchemas<PlainSchema> allowedPlainSchemas = new JPAAnyUtilsFactory().\n+                    getInstance(any.getType().getKind()).getAllowedSchemas(any, PlainSchema.class);\n \n-                @Override\n-                public String transform(final PlainSchema schema) {\n-                    return schema.getKey();\n+            for (PlainAttr<?> attr : ((Any<?>) any).getPlainAttrs()) {\n+                if (attr != null && !allowedPlainSchemas.forSelfContains(attr.getSchema().getKey())) {\n+                    return raiseNotAllowedViolation(context, attr.getSchema().getKey(), null);\n                 }\n-            });\n+            }\n+            if (any instanceof GroupableRelatable) {\n+                for (Membership<?> membership : ((GroupableRelatable<?, ?, ?, ?, ?>) any).getMemberships()) {\n+                    for (PlainAttr<?> attr : ((GroupableRelatable<?, ?, ?, ?, ?>) any).getPlainAttrs(membership)) {\n+                        if (attr != null && !allowedPlainSchemas.forMembershipsContains(\n+                                membership.getRightEnd(), attr.getSchema().getKey())) {\n \n-            for (PlainAttr<?> attr : ((Any<?>) any).getPlainAttrs()) {\n-                if (attr != null && !allowedPlainSchemas.contains(attr.getSchema().getKey())) {\n-                    context.buildConstraintViolationWithTemplate(\n-                            getTemplate(EntityViolationType.InvalidPlainSchema,\n-                                    attr.getSchema().getKey() + \" not allowed for this instance\")).\n-                            addPropertyNode(\"plainAttrs\").addConstraintViolation();\n-                    return false;\n+                            return raiseNotAllowedViolation(\n+                                    context, attr.getSchema().getKey(), membership.getRightEnd());\n+                        }\n+                    }\n                 }\n             }\n         }"},{"sha":"e1bdf687618fa1294a20648e72975c4e9412a2d1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/EntityValidationListener.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnnotatedEntity;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n@@ -41,9 +42,6 @@\n  */\n public class EntityValidationListener {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(EntityValidationListener.class);\n \n     @PrePersist\n@@ -62,6 +60,7 @@ public void validate(final Object object) {\n                         && !Schema.class.equals(interf)\n                         && !Task.class.equals(interf)\n                         && !Policy.class.equals(interf)\n+                        && !GroupableRelatable.class.equals(interf)\n                         && !Any.class.equals(interf)\n                         && Entity.class.isAssignableFrom(interf)) {\n "},{"sha":"64ec693e2b0f519413f50510dfddd2bcb56c626a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValueValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueValidator.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -74,7 +74,7 @@ public boolean isValid(final PlainAttrValue object, final ConstraintValidatorCon\n                             + \"]\" + \" is \" + uniqueValueSchema + \", while owning attribute schema is \" + attrSchema);\n \n                     context.disableDefaultConstraintViolation();\n-                    context.buildConstraintViolationWithTemplate(getTemplate(EntityViolationType.InvalidPlainSchema,\n+                    context.buildConstraintViolationWithTemplate(getTemplate(EntityViolationType.InvalidPlainAttr,\n                             \"Unique value schema is \" + uniqueValueSchema\n                             + \", while owning attribute schema is \" + attrSchema)).addPropertyNode(\"schema\").\n                             addConstraintViolation();"},{"sha":"cc324c693343a6b8ff948856bc42bd32f60d8481","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyObjectTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -62,6 +62,7 @@ public void find() {\n     @Test\n     public void save() {\n         AnyObject anyObject = entityFactory.newEntity(AnyObject.class);\n+        anyObject.setName(\"a name\");\n         anyObject.setType(anyTypeDAO.find(\"PRINTER\"));\n         anyObject.setRealm(realmDAO.findByFullPath(SyncopeConstants.ROOT_REALM));\n "},{"sha":"2b7f441fca42401e64a8665e6c5395f28a3aa7fd","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainAttrTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -170,7 +170,7 @@ public void validateAndSave() {\n         // for attribute\n         assertTrue(iee.hasViolation(EntityViolationType.InvalidValueList));\n         // for uauv\n-        assertTrue(iee.hasViolation(EntityViolationType.InvalidPlainSchema));\n+        assertTrue(iee.hasViolation(EntityViolationType.InvalidPlainAttr));\n     }\n \n     @Test"},{"sha":"f9bcff1164e2877b0cf45043d366c64977011be9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConfTest.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConfTest.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.outer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class ConfTest extends AbstractTest {\n+\n+    @Autowired\n+    private ConfDAO confDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    private void add(final CPlainAttr newAttr, final String value) {\n+        JPACPlainAttrValue attrValue;\n+        if (newAttr.getSchema().isUniqueConstraint()) {\n+            attrValue = new JPACPlainAttrValue();\n+            ((PlainAttrUniqueValue) attrValue).setSchema(newAttr.getSchema());\n+        } else {\n+            attrValue = new JPACPlainAttrValue();\n+        }\n+        newAttr.add(value, attrValue);\n+    }\n+\n+    @Test\n+    public void update() {\n+        CPlainAttr expireTime = confDAO.find(\"token.expireTime\");\n+        assertNotNull(expireTime);\n+        long value = expireTime.getValues().get(0).getLongValue();\n+        value++;\n+\n+        CPlainAttr attr = entityFactory.newEntity(CPlainAttr.class);\n+        attr.setSchema(plainSchemaDAO.find(\"token.expireTime\"));\n+        add(attr, String.valueOf(value));\n+\n+        confDAO.save(expireTime);\n+        confDAO.flush();\n+\n+        CPlainAttr actual = confDAO.find(\"token.expireTime\");\n+        assertEquals(expireTime, actual);\n+    }\n+\n+}"},{"sha":"8037a2bf4ebf60ae6ebe1ae5f733b215ab89905b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -271,6 +271,7 @@ private List<Group> findDynGroupMemberships(final AnyObject anyObject) {\n     public void adynMembership() {\n         // 0. create any object matching the condition below\n         AnyObject anyObject = entityFactory.newEntity(AnyObject.class);\n+        anyObject.setName(\"name\");\n         anyObject.setType(anyTypeDAO.find(\"PRINTER\"));\n         anyObject.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n "},{"sha":"cdb30675b3a4a0279ec71c5c6eda8bd55a9ed4d3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":90,"deletions":1,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -23,9 +23,14 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.List;\n import java.util.UUID;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n@@ -145,7 +150,91 @@ public void ships() {\n                 user.getRelationships().get(0).getRightEnd().getKey());\n     }\n \n-    @Test // search by derived attribute\n+    @Test\n+    public void membershipWithAttrs() {\n+        User user = userDAO.findByUsername(\"vivaldi\");\n+        assertNotNull(user);\n+        assertTrue(user.getMemberships().isEmpty());\n+\n+        // add 'obscure' to user (no membership): works because 'obscure' is from 'other', default class for USER\n+        UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n+        attr.setOwner(user);\n+        attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n+        attr.add(\"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        user.add(attr);\n+\n+        // add 'obscure' to user (via 'artDirector' membership): does not work because 'obscure' is from 'other'\n+        // but 'artDirector' defines no type extension\n+        UMembership membership = entityFactory.newEntity(UMembership.class);\n+        membership.setLeftEnd(user);\n+        membership.setRightEnd(groupDAO.findByName(\"artDirector\"));\n+        user.add(membership);\n+\n+        attr = entityFactory.newEntity(UPlainAttr.class);\n+        attr.setOwner(user);\n+        attr.setMembership(membership);\n+        attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n+        attr.add(\"testvalue2\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        user.add(attr);\n+\n+        try {\n+            userDAO.save(user);\n+            fail();\n+        } catch (InvalidEntityException e) {\n+            assertNotNull(e);\n+        }\n+\n+        // replace 'artDirector' with 'additional', which defines type extension with class 'other' and 'csv':\n+        // now it works\n+        membership = user.getMembership(groupDAO.findByName(\"artDirector\").getKey());\n+        user.remove(user.getPlainAttr(\"obscure\", membership));\n+        user.getMemberships().remove(membership);\n+        membership.setLeftEnd(null);\n+\n+        membership = entityFactory.newEntity(UMembership.class);\n+        membership.setLeftEnd(user);\n+        membership.setRightEnd(groupDAO.findByName(\"additional\"));\n+        user.add(membership);\n+\n+        attr = entityFactory.newEntity(UPlainAttr.class);\n+        attr.setOwner(user);\n+        attr.setMembership(membership);\n+        attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n+        attr.add(\"testvalue2\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        user.add(attr);\n+\n+        userDAO.save(user);\n+        userDAO.flush();\n+\n+        user = userDAO.findByUsername(\"vivaldi\");\n+        assertEquals(1, user.getMemberships().size());\n+\n+        final UMembership newM = user.getMembership(groupDAO.findByName(\"additional\").getKey());\n+        assertEquals(1, user.getPlainAttrs(newM).size());\n+\n+        assertNull(user.getPlainAttr(\"obscure\").getMembership());\n+        assertEquals(2, user.getPlainAttrs(\"obscure\").size());\n+        assertTrue(user.getPlainAttrs(\"obscure\").contains(user.getPlainAttr(\"obscure\")));\n+        assertTrue(IterableUtils.matchesAny(user.getPlainAttrs(\"obscure\"), new Predicate<UPlainAttr>() {\n+\n+            @Override\n+            public boolean evaluate(final UPlainAttr object) {\n+                return object.getMembership() == null;\n+            }\n+        }));\n+        assertTrue(IterableUtils.matchesAny(user.getPlainAttrs(\"obscure\"), new Predicate<UPlainAttr>() {\n+\n+            @Override\n+            public boolean evaluate(final UPlainAttr object) {\n+                return newM.equals(object.getMembership());\n+            }\n+        }));\n+    }\n+\n+    /**\n+     * Search by derived attribute.\n+     */\n+    @Test\n     public void issueSYNCOPE800() {\n         // create derived attribute (literal as prefix)\n         DerSchema prefix = entityFactory.newEntity(DerSchema.class);"},{"sha":"e956a9010fd6f8ea111d3fd475323f0c3451bc2e","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -175,15 +175,15 @@ under the License.\n          accountPolicy_id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\"\n          passwordPolicy_id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\"/>\n   \n-  <AnyObject id=\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\"\n+  <AnyObject id=\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\" name=\"HP LJ 1300n\"\n              realm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" type_id=\"PRINTER\"\n              creator=\"admin\" lastModifier=\"admin\" \n              creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <AnyObject id=\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\"\n+  <AnyObject id=\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\" name=\"Canon MF 8030cn\"\n              realm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" type_id=\"PRINTER\"\n              creator=\"admin\" lastModifier=\"admin\" \n              creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <AnyObject id=\"9e1d130c-d6a3-48b1-98b3-182477ed0688\"\n+  <AnyObject id=\"9e1d130c-d6a3-48b1-98b3-182477ed0688\" name=\"Epson Stylus Color\"\n              realm_id=\"0679e069-7355-4b20-bd11-a5a0a5453c7c\" type_id=\"PRINTER\"\n              creator=\"admin\" lastModifier=\"admin\" \n              creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n@@ -966,6 +966,9 @@ under the License.\n   <MappingItem id=\"23aa0299-ddbb-4e59-8918-0ab2a32465fa\" mapping_id=\"16439b5f-50c3-4604-97e9-f4004933abd8\" extAttrName=\"ID\" \n                intMappingType=\"AnyObjectKey\" mandatoryCondition=\"true\"\n                connObjectKey=\"1\" password=\"0\" purpose=\"BOTH\"/>\n+  <MappingItem id=\"3dc96af0-5d0a-4ec1-be84-244716d88401\" mapping_id=\"16439b5f-50c3-4604-97e9-f4004933abd8\" extAttrName=\"PRINTERNAME\" \n+               intMappingType=\"AnyObjectName\" mandatoryCondition=\"true\"\n+               connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"f3ef9f8b-e667-4b18-969f-ba98c3d78bc0\" mapping_id=\"16439b5f-50c3-4604-97e9-f4004933abd8\" extAttrName=\"LOCATION\" \n                intAttrName=\"location\" intMappingType=\"AnyObjectPlainSchema\"\n                mandatoryCondition=\"false\" connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n@@ -985,7 +988,7 @@ under the License.\n         pullMode=\"INCREMENTAL\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\" active=\"1\"/>\n   <AnyTemplatePullTask id=\"3a6173a9-8c34-4e37-b3b1-0c2ea385fac0\"\n                        pullTask_id=\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\" anyType_id=\"USER\"\n-                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":null,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[\"csv\"],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[\"\"]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"relationships\":[],\"memberships\":[{\"leftType\":null,\"leftKey\":0,\"rightType\":\"GROUP\",\"rightKey\":\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\",\"groupName\":null}],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"ctype\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}]}'/>\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":null,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[\"csv\"],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[\"\"]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"relationships\":[],\"memberships\":[{\"rightType\":\"GROUP\",\"rightKey\":\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\",\"groupName\":null}],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"ctype\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}]}'/>\n   <AnyTemplatePullTask id=\"b3772d66-ec06-4133-bf38-b3273845ac5b\"\n                        pullTask_id=\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\" anyType_id=\"GROUP\"\n                        template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":null,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"plainAttrs\":[]}'/>"},{"sha":"c4f44bdccc2108d0b4993bf39a0f8e23d9b84e65","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/DerAttrHandler.java","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FDerAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FDerAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FDerAttrHandler.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -21,6 +21,7 @@\n import java.util.Map;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.Membership;\n \n public interface DerAttrHandler {\n \n@@ -37,7 +38,27 @@ public interface DerAttrHandler {\n      * Calculates derived attributes values associated to the given any.\n      *\n      * @param any any object\n-     * @return derived attribute values, either for local cache or external resources\n+     * @return derived attribute values\n      */\n     Map<DerSchema, String> getValues(Any<?> any);\n+\n+    /**\n+     * Calculates derived attribute value associated to the given any, for the given membership and\n+     * derived schema.\n+     *\n+     * @param any any object\n+     * @param membership membership\n+     * @param schema derived schema\n+     * @return derived attribute value\n+     */\n+    String getValue(Any<?> any, Membership<?> membership, DerSchema schema);\n+\n+    /**\n+     * Calculates derived attributes values associated to the given any, for the given membership.\n+     *\n+     * @param any any object\n+     * @param membership membership\n+     * @return derived attribute values\n+     */\n+    Map<DerSchema, String> getValues(final Any<?> any, final Membership<?> membership);\n }"},{"sha":"72bb198507e9de36e2b2362ddfd3b4afd1085425","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/VirAttrHandler.java","status":"modified","additions":26,"deletions":2,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -21,13 +21,14 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n \n public interface VirAttrHandler {\n \n     /**\n      * Query external resource (or cache, if configured) associated to the given any for values associated to the given\n-     * virtual schema.\n+     * virtual schema, not related to any membership.\n      *\n      * @param any any object\n      * @param schema virtual schema\n@@ -36,14 +37,37 @@ public interface VirAttrHandler {\n      */\n     List<String> getValues(Any<?> any, VirSchema schema);\n \n+    /**\n+     * Query external resource (or cache, if configured) associated to the given any for values associated to the given\n+     * virtual schema, for the given membership.\n+     *\n+     * @param any any object\n+     * @param membership membership\n+     * @param schema virtual schema\n+     * @return virtual attribute values, either for local cache or external resource, if resource is owned by the given\n+     * any and associated to the given virtual schema; empty list otherwise.\n+     */\n+    List<String> getValues(Any<?> any, Membership<?> membership, VirSchema schema);\n+\n     /**\n      * Query external resources (or cache, if configured) associated to the given any for values associated to all\n      * {@link VirSchema} instances in the {@link org.apache.syncope.core.persistence.api.entity.AnyTypeClass}\n-     * associated to the given any.\n+     * associated to the given any, with no membership.\n      *\n      * @param any any object\n      * @return virtual attribute values, either for local cache or external resources\n      */\n     Map<VirSchema, List<String>> getValues(Any<?> any);\n \n+    /**\n+     * Query external resources (or cache, if configured) associated to the given any for values associated to all\n+     * {@link VirSchema} instances in the {@link org.apache.syncope.core.persistence.api.entity.AnyTypeClass}\n+     * associated to the given any, for the given membership.\n+     *\n+     * @param any any object\n+     * @param membership membership\n+     * @return virtual attribute values, either for local cache or external resources\n+     */\n+    Map<VirSchema, List<String>> getValues(Any<?> any, Membership<?> membership);\n+\n }"},{"sha":"0261752d783f080b30bef9aa134d3a3e6e91b6f5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DerAttrHandlerImpl.java","status":"modified","additions":28,"deletions":4,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -28,13 +28,15 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n+@Transactional(readOnly = true)\n @Component\n public class DerAttrHandlerImpl implements DerAttrHandler {\n \n@@ -57,21 +59,43 @@ private Map<DerSchema, String> getValues(final Any<?> any, final Set<DerSchema>\n         return result;\n     }\n \n-    @Transactional(readOnly = true)\n     @Override\n     public String getValue(final Any<?> any, final DerSchema schema) {\n-        if (!anyUtilsFactory.getInstance(any).getAllowedSchemas(any, DerSchema.class).contains(schema)) {\n+        if (!anyUtilsFactory.getInstance(any).\n+                getAllowedSchemas(any, DerSchema.class).forSelfContains(schema)) {\n+\n+            LOG.debug(\"{} not allowed for {}\", schema, any);\n+            return null;\n+        }\n+\n+        return getValues(any, Collections.singleton(schema)).get(schema);\n+    }\n+\n+    @Override\n+    public String getValue(final Any<?> any, final Membership<?> membership, final DerSchema schema) {\n+        if (!anyUtilsFactory.getInstance(any).\n+                getAllowedSchemas(any, DerSchema.class).getForMembership(membership.getRightEnd()).contains(schema)) {\n+\n             LOG.debug(\"{} not allowed for {}\", schema, any);\n             return null;\n         }\n \n         return getValues(any, Collections.singleton(schema)).get(schema);\n     }\n \n-    @Transactional(readOnly = true)\n     @Override\n     public Map<DerSchema, String> getValues(final Any<?> any) {\n-        return getValues(any, anyUtilsFactory.getInstance(any).getAllowedSchemas(any, DerSchema.class));\n+        return getValues(\n+                any,\n+                anyUtilsFactory.getInstance(any).getAllowedSchemas(any, DerSchema.class).getForSelf());\n+    }\n+\n+    @Override\n+    public Map<DerSchema, String> getValues(final Any<?> any, final Membership<?> membership) {\n+        return getValues(\n+                any,\n+                anyUtilsFactory.getInstance(any).getAllowedSchemas(any, DerSchema.class).\n+                getForMembership(membership.getRightEnd()));\n     }\n \n }"},{"sha":"b84799a10e45b657fe8b190ed97c19788048522d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -32,6 +32,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -68,6 +69,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -698,6 +700,16 @@ public List<PlainAttrValue> getIntValues(\n                 }\n                 break;\n \n+            case AnyObjectName:\n+                for (Any<?> any : anys) {\n+                    if (any instanceof AnyObject) {\n+                        APlainAttrValue attrValue = entityFactory.newEntity(APlainAttrValue.class);\n+                        attrValue.setStringValue(((AnyObject) any).getName());\n+                        values.add(attrValue);\n+                    }\n+                }\n+                break;\n+\n             default:\n         }\n \n@@ -800,6 +812,14 @@ public void setIntValues(\n                 }\n                 break;\n \n+            case AnyObjectName:\n+                if (anyTO instanceof AnyObjectTO) {\n+                    ((AnyObjectTO) anyTO).setName(values.isEmpty() || values.get(0) == null\n+                            ? null\n+                            : values.get(0).toString());\n+                }\n+                break;\n+\n             case UserPlainSchema:\n             case GroupPlainSchema:\n             case AnyObjectPlainSchema:"},{"sha":"67a821c09dceff91a77a73d3aafa6c5b87124344","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":31,"deletions":5,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -29,6 +29,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -48,6 +49,7 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n+@Transactional(readOnly = true)\n @Component\n public class VirAttrHandlerImpl implements VirAttrHandler {\n \n@@ -122,7 +124,8 @@ private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSc\n                             if (attr != null) {\n                                 VirAttrCacheValue virAttrCacheValue = new VirAttrCacheValue();\n                                 virAttrCacheValue.setValues(attr.getValue());\n-                                virAttrCache.put(any.getType().getKey(), any.getKey(), schema.getKey(),\n+                                virAttrCache.put(\n+                                        any.getType().getKey(), any.getKey(), schema.getKey(),\n                                         virAttrCacheValue);\n                                 LOG.debug(\"Values for {} set in cache: {}\", schema, virAttrCacheValue);\n \n@@ -139,20 +142,43 @@ private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSc\n         return result;\n     }\n \n-    @Transactional(readOnly = true)\n     @Override\n     public List<String> getValues(final Any<?> any, final VirSchema schema) {\n-        if (!anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class).contains(schema)) {\n+        if (!anyUtilsFactory.getInstance(any).\n+                getAllowedSchemas(any, VirSchema.class).forSelfContains(schema)) {\n+\n+            LOG.debug(\"{} not allowed for {}\", schema, any);\n+            return Collections.emptyList();\n+        }\n+\n+        return ListUtils.emptyIfNull(getValues(any, Collections.singleton(schema)).get(schema));\n+    }\n+\n+    @Override\n+    public List<String> getValues(final Any<?> any, final Membership<?> membership, final VirSchema schema) {\n+        if (!anyUtilsFactory.getInstance(any).\n+                getAllowedSchemas(any, VirSchema.class).getForMembership(membership.getRightEnd()).contains(schema)) {\n+\n             LOG.debug(\"{} not allowed for {}\", schema, any);\n             return Collections.emptyList();\n         }\n \n         return ListUtils.emptyIfNull(getValues(any, Collections.singleton(schema)).get(schema));\n     }\n \n-    @Transactional(readOnly = true)\n     @Override\n     public Map<VirSchema, List<String>> getValues(final Any<?> any) {\n-        return getValues(any, anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class));\n+        return getValues(\n+                any,\n+                anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class).getForSelf());\n     }\n+\n+    @Override\n+    public Map<VirSchema, List<String>> getValues(final Any<?> any, final Membership<?> membership) {\n+        return getValues(\n+                any,\n+                anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class).\n+                getForMembership(membership.getRightEnd()));\n+    }\n+\n }"},{"sha":"0ccbe14790c97161fca67ad88f99e7e92f44edb8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":165,"deletions":83,"changes":248,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -26,7 +26,6 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n@@ -41,6 +40,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -59,6 +59,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.java.MappingManagerImpl;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n@@ -73,6 +74,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.GroupablePlainAttr;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Relationship;\n@@ -88,6 +90,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n \n abstract class AbstractAnyDataBinder {\n \n@@ -150,7 +153,7 @@ abstract class AbstractAnyDataBinder {\n     protected DerAttrHandler derAttrHandler;\n \n     @Autowired\n-    protected VirAttrHandler virAttrHander;\n+    protected VirAttrHandler virAttrHandler;\n \n     @Autowired\n     protected ConnObjectUtils connObjectUtils;\n@@ -186,20 +189,12 @@ protected PlainSchema getPlainSchema(final String schemaName) {\n         return schema;\n     }\n \n-    private DerSchema getDerSchema(final String derSchemaName) {\n-        DerSchema schema = null;\n-        if (StringUtils.isNotBlank(derSchemaName)) {\n-            schema = derSchemaDAO.find(derSchemaName);\n-            if (schema == null) {\n-                LOG.debug(\"Ignoring invalid derived schema {}\", derSchemaName);\n-            }\n-        }\n-\n-        return schema;\n-    }\n-\n-    private void fillAttr(final List<String> values, final AnyUtils anyUtils,\n-            final PlainSchema schema, final PlainAttr<?> attr, final SyncopeClientException invalidValues) {\n+    private void fillAttr(\n+            final List<String> values,\n+            final AnyUtils anyUtils,\n+            final PlainSchema schema,\n+            final PlainAttr<?> attr,\n+            final SyncopeClientException invalidValues) {\n \n         // if schema is multivalue, all values are considered for addition;\n         // otherwise only the fist one - if provided - is considered\n@@ -210,7 +205,7 @@ private void fillAttr(final List<String> values, final AnyUtils anyUtils,\n                         : Collections.singletonList(values.iterator().next()));\n \n         for (String value : valuesProvided) {\n-            if (value == null || value.isEmpty()) {\n+            if (StringUtils.isBlank(value)) {\n                 LOG.debug(\"Null value for {}, ignoring\", schema.getKey());\n             } else {\n                 try {\n@@ -265,47 +260,54 @@ private SyncopeClientException checkMandatoryOnResources(\n         return reqValMissing;\n     }\n \n+    private void checkMandatory(\n+            final PlainSchema schema,\n+            final PlainAttr<?> attr,\n+            final Any<?> any,\n+            final SyncopeClientException reqValMissing) {\n+\n+        if (attr == null\n+                && !schema.isReadonly()\n+                && JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any)) {\n+\n+            LOG.error(\"Mandatory schema \" + schema.getKey() + \" not provided with values\");\n+\n+            reqValMissing.getElements().add(schema.getKey());\n+        }\n+    }\n+\n     private SyncopeClientException checkMandatory(final Any<?> any, final AnyUtils anyUtils) {\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n-        for (PlainSchema schema : anyUtils.getAllowedSchemas(any, PlainSchema.class)) {\n-            if (any.getPlainAttr(schema.getKey()) == null\n-                    && !schema.isReadonly()\n-                    && JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any)) {\n-\n-                LOG.error(\"Mandatory schema \" + schema.getKey() + \" not provided with values\");\n-\n-                reqValMissing.getElements().add(schema.getKey());\n+        AllowedSchemas<PlainSchema> allowedPlainSchemas = anyUtils.getAllowedSchemas(any, PlainSchema.class);\n+        for (PlainSchema schema : allowedPlainSchemas.getForSelf()) {\n+            checkMandatory(schema, any.getPlainAttr(schema.getKey()), any, reqValMissing);\n+        }\n+        for (Map.Entry<Group, Set<PlainSchema>> entry : allowedPlainSchemas.getForMemberships().entrySet()) {\n+            if (any instanceof GroupableRelatable) {\n+                GroupableRelatable<?, ?, ?, ?, ?> groupable = GroupableRelatable.class.cast(any);\n+                Membership<?> membership = groupable.getMembership(entry.getKey().getKey());\n+                for (PlainSchema schema : entry.getValue()) {\n+                    checkMandatory(schema, groupable.getPlainAttr(schema.getKey(), membership), any, reqValMissing);\n+                }\n             }\n         }\n \n         return reqValMissing;\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    private void processAttrPatch(final Any any, final AttrPatch patch, final PlainSchema schema,\n-            final AnyUtils anyUtils, final Set<ExternalResource> resources, final PropagationByResource propByRes,\n+    protected void processAttrPatch(\n+            final Any any,\n+            final AttrPatch patch,\n+            final PlainSchema schema,\n+            final PlainAttr<?> attr,\n+            final AnyUtils anyUtils,\n+            final Set<ExternalResource> resources,\n+            final PropagationByResource propByRes,\n             final SyncopeClientException invalidValues) {\n \n-        PlainAttr<?> attr = any.getPlainAttr(schema.getKey());\n-        if (attr == null) {\n-            LOG.debug(\"No plain attribute found for schema {}\", schema);\n-\n-            switch (patch.getOperation()) {\n-                case ADD_REPLACE:\n-                    attr = anyUtils.newPlainAttr();\n-                    ((PlainAttr) attr).setOwner(any);\n-                    attr.setSchema(schema);\n-                    any.add(attr);\n-                    break;\n-\n-                case DELETE:\n-                default:\n-                    return;\n-            }\n-        }\n-\n         switch (patch.getOperation()) {\n             case ADD_REPLACE:\n                 // 1.1 remove values\n@@ -317,14 +319,8 @@ private void processAttrPatch(final Any any, final AttrPatch patch, final PlainS\n                         plainAttrValueDAO.delete(attr.getUniqueValue().getKey(), anyUtils.plainAttrUniqueValueClass());\n                     }\n                 } else {\n-                    Collection<String> valuesToBeRemoved = CollectionUtils.collect(attr.getValues(),\n-                            new Transformer<PlainAttrValue, String>() {\n-\n-                        @Override\n-                        public String transform(final PlainAttrValue input) {\n-                            return input.getKey();\n-                        }\n-                    });\n+                    Collection<String> valuesToBeRemoved =\n+                            CollectionUtils.collect(attr.getValues(), EntityUtils.keyTransformer());\n                     for (String attrValueKey : valuesToBeRemoved) {\n                         plainAttrValueDAO.delete(attrValueKey, anyUtils.plainAttrValueClass());\n                     }\n@@ -347,13 +343,14 @@ public String transform(final PlainAttrValue input) {\n \n             case DELETE:\n             default:\n-                any.getPlainAttrs().remove(attr);\n+                any.remove(attr);\n                 plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n         }\n \n         for (ExternalResource resource : resources) {\n-            for (MappingItem mapItem : MappingManagerImpl.getPropagationMappingItems(resource.\n-                    getProvision(any.getType()))) {\n+            for (MappingItem mapItem\n+                    : MappingManagerImpl.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n+\n                 if (schema.getKey().equals(mapItem.getIntAttrName())\n                         && mapItem.getIntMappingType() == anyUtils.plainIntMappingType()) {\n \n@@ -367,7 +364,11 @@ public String transform(final PlainAttrValue input) {\n         }\n     }\n \n-    protected PropagationByResource fill(final Any<?> any, final AnyPatch anyPatch, final AnyUtils anyUtils,\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    protected PropagationByResource fill(\n+            final Any any,\n+            final AnyPatch anyPatch,\n+            final AnyUtils anyUtils,\n             final SyncopeClientCompositeException scce) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n@@ -421,7 +422,21 @@ protected PropagationByResource fill(final Any<?> any, final AnyPatch anyPatch,\n                     LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n                             + \"{}, ignoring...\", patch.getAttrTO().getSchema());\n                 } else {\n-                    processAttrPatch(any, patch, schema, anyUtils, resources, propByRes, invalidValues);\n+                    PlainAttr<?> attr = any.getPlainAttr(schema.getKey());\n+                    if (attr == null) {\n+                        LOG.debug(\"No plain attribute found for schema {}\", schema);\n+\n+                        if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                            attr = anyUtils.newPlainAttr();\n+                            ((PlainAttr) attr).setOwner(any);\n+                            attr.setSchema(schema);\n+                            any.add(attr);\n+\n+                        }\n+                    }\n+                    if (attr != null) {\n+                        processAttrPatch(any, patch, schema, attr, anyUtils, resources, propByRes, invalidValues);\n+                    }\n                 }\n             }\n         }\n@@ -443,7 +458,10 @@ protected PropagationByResource fill(final Any<?> any, final AnyPatch anyPatch,\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected void fill(\n-            final Any any, final AnyTO anyTO, final AnyUtils anyUtils, final SyncopeClientCompositeException scce) {\n+            final Any any,\n+            final AnyTO anyTO,\n+            final AnyUtils anyUtils,\n+            final SyncopeClientCompositeException scce) {\n \n         // 0. aux classes\n         any.getAuxClasses().clear();\n@@ -459,9 +477,9 @@ protected void fill(\n         // 1. attributes\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n-        // Only consider attributeTO with values\n         for (AttrTO attrTO : anyTO.getPlainAttrs()) {\n-            if (attrTO.getValues() != null && !attrTO.getValues().isEmpty()) {\n+            // Only consider attributeTO with values\n+            if (!attrTO.getValues().isEmpty()) {\n                 PlainSchema schema = getPlainSchema(attrTO.getSchema());\n                 if (schema != null) {\n                     PlainAttr attr = any.getPlainAttr(schema.getKey());\n@@ -506,6 +524,44 @@ protected void fill(\n         }\n     }\n \n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    protected void fill(\n+            final Any any,\n+            final Membership membership,\n+            final MembershipTO membershipTO,\n+            final AnyUtils anyUtils,\n+            final SyncopeClientCompositeException scce) {\n+\n+        SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n+\n+        for (AttrTO attrTO : membershipTO.getPlainAttrs()) {\n+            if (!attrTO.getValues().isEmpty()) {\n+                PlainSchema schema = getPlainSchema(attrTO.getSchema());\n+                if (schema != null) {\n+                    GroupablePlainAttr attr = GroupableRelatable.class.cast(any).\n+                            getPlainAttr(schema.getKey(), membership);\n+                    if (attr == null) {\n+                        attr = anyUtils.newPlainAttr();\n+                        attr.setOwner(any);\n+                        attr.setMembership(membership);\n+                        attr.setSchema(schema);\n+                    }\n+                    fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n+\n+                    if (attr.getValuesAsStrings().isEmpty()) {\n+                        attr.setOwner(null);\n+                    } else {\n+                        any.add(attr);\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!invalidValues.isEmpty()) {\n+            scce.addException(invalidValues);\n+        }\n+    }\n+\n     protected void fillTO(final AnyTO anyTO,\n             final String realmFullPath,\n             final Collection<? extends AnyTypeClass> auxClasses,\n@@ -519,30 +575,27 @@ protected void fillTO(final AnyTO anyTO,\n         CollectionUtils.collect(auxClasses, EntityUtils.<AnyTypeClass>keyTransformer(), anyTO.getAuxClasses());\n \n         for (PlainAttr<?> plainAttr : plainAttrs) {\n-            AttrTO attrTO = new AttrTO();\n-            attrTO.setSchema(plainAttr.getSchema().getKey());\n-            attrTO.getValues().addAll(plainAttr.getValuesAsStrings());\n-            attrTO.setReadonly(plainAttr.getSchema().isReadonly());\n-\n-            anyTO.getPlainAttrs().add(attrTO);\n+            anyTO.getPlainAttrs().add(new AttrTO.Builder().\n+                    schema(plainAttr.getSchema().getKey()).\n+                    values(plainAttr.getValuesAsStrings()).\n+                    readonly(plainAttr.getSchema().isReadonly()).\n+                    build());\n         }\n \n         for (Map.Entry<DerSchema, String> entry : derAttrs.entrySet()) {\n-            AttrTO attrTO = new AttrTO();\n-            attrTO.setSchema(entry.getKey().getKey());\n-            attrTO.getValues().add(entry.getValue());\n-            attrTO.setReadonly(true);\n-\n-            anyTO.getDerAttrs().add(attrTO);\n+            anyTO.getDerAttrs().add(new AttrTO.Builder().\n+                    schema(entry.getKey().getKey()).\n+                    value(entry.getValue()).\n+                    readonly(true).\n+                    build());\n         }\n \n         for (Map.Entry<VirSchema, List<String>> entry : virAttrs.entrySet()) {\n-            AttrTO attrTO = new AttrTO();\n-            attrTO.setSchema(entry.getKey().getKey());\n-            attrTO.getValues().addAll(entry.getValue());\n-            attrTO.setReadonly(entry.getKey().isReadonly());\n-\n-            anyTO.getVirAttrs().add(attrTO);\n+            anyTO.getVirAttrs().add(new AttrTO.Builder().\n+                    schema(entry.getKey().getKey()).\n+                    values(entry.getValue()).\n+                    readonly(entry.getKey().isReadonly()).\n+                    build());\n         }\n \n         for (ExternalResource resource : resources) {\n@@ -553,16 +606,45 @@ protected void fillTO(final AnyTO anyTO,\n     protected RelationshipTO getRelationshipTO(final Relationship<? extends Any<?>, AnyObject> relationship) {\n         return new RelationshipTO.Builder().\n                 type(relationship.getType().getKey()).\n-                left(relationship.getLeftEnd().getType().getKey(), relationship.getLeftEnd().getKey()).\n                 right(relationship.getRightEnd().getType().getKey(), relationship.getRightEnd().getKey()).\n                 build();\n     }\n \n-    protected MembershipTO getMembershipTO(final Membership<? extends Any<?>> membership) {\n-        return new MembershipTO.Builder().\n-                left(membership.getLeftEnd().getType().getKey(), membership.getLeftEnd().getKey()).\n+    protected MembershipTO getMembershipTO(\n+            final Collection<? extends PlainAttr<?>> plainAttrs,\n+            final Map<DerSchema, String> derAttrs,\n+            final Map<VirSchema, List<String>> virAttrs,\n+            final Membership<? extends Any<?>> membership) {\n+\n+        MembershipTO membershipTO = new MembershipTO.Builder().\n                 group(membership.getRightEnd().getKey(), membership.getRightEnd().getName()).\n                 build();\n+\n+        for (PlainAttr<?> plainAttr : plainAttrs) {\n+            membershipTO.getPlainAttrs().add(new AttrTO.Builder().\n+                    schema(plainAttr.getSchema().getKey()).\n+                    values(plainAttr.getValuesAsStrings()).\n+                    readonly(plainAttr.getSchema().isReadonly()).\n+                    build());\n+        }\n+\n+        for (Map.Entry<DerSchema, String> entry : derAttrs.entrySet()) {\n+            membershipTO.getDerAttrs().add(new AttrTO.Builder().\n+                    schema(entry.getKey().getKey()).\n+                    value(entry.getValue()).\n+                    readonly(true).\n+                    build());\n+        }\n+\n+        for (Map.Entry<VirSchema, List<String>> entry : virAttrs.entrySet()) {\n+            membershipTO.getVirAttrs().add(new AttrTO.Builder().\n+                    schema(entry.getKey().getKey()).\n+                    values(entry.getValue()).\n+                    readonly(entry.getKey().isReadonly()).\n+                    build());\n+        }\n+\n+        return membershipTO;\n     }\n \n     protected Map<String, String> getConnObjectKeys(final Any<?> any) {"},{"sha":"d129dcbd776bb66f44b3ba3b4a6a56b7808d21f7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":98,"deletions":17,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -29,7 +29,9 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.RelationshipPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -46,14 +48,17 @@\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n@@ -74,7 +79,9 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An\n     @Transactional(readOnly = true)\n     @Override\n     public AnyObjectTO getAnyObjectTO(final String key) {\n-        return getAnyObjectTO(anyObjectDAO.authFind(key), true);\n+        return SyncopeConstants.UUID_PATTERN.matcher(key).matches()\n+                ? getAnyObjectTO(anyObjectDAO.authFind(key), true)\n+                : getAnyObjectTO(anyObjectDAO.authFindByName(key), true);\n     }\n \n     @Override\n@@ -84,12 +91,15 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean detai\n \n         BeanUtils.copyProperties(anyObject, anyObjectTO, IGNORE_PROPERTIES);\n \n-        Map<DerSchema, String> derAttrValues = derAttrHandler.getValues(anyObject);\n         Map<VirSchema, List<String>> virAttrValues = details\n-                ? virAttrHander.getValues(anyObject)\n+                ? virAttrHandler.getValues(anyObject)\n                 : Collections.<VirSchema, List<String>>emptyMap();\n-        fillTO(anyObjectTO, anyObject.getRealm().getFullPath(), anyObject.getAuxClasses(),\n-                anyObject.getPlainAttrs(), derAttrValues, virAttrValues, anyObjectDAO.findAllResources(anyObject));\n+        fillTO(anyObjectTO, anyObject.getRealm().getFullPath(),\n+                anyObject.getAuxClasses(),\n+                anyObject.getPlainAttrs(),\n+                derAttrHandler.getValues(anyObject),\n+                virAttrValues,\n+                anyObjectDAO.findAllResources(anyObject));\n \n         if (details) {\n             // relationships\n@@ -107,7 +117,11 @@ public RelationshipTO transform(final ARelationship relationship) {\n \n                 @Override\n                 public MembershipTO transform(final AMembership membership) {\n-                    return AnyObjectDataBinderImpl.this.getMembershipTO(membership);\n+                    return getMembershipTO(\n+                            anyObject.getPlainAttrs(membership),\n+                            derAttrHandler.getValues(anyObject, membership),\n+                            virAttrHandler.getValues(anyObject, membership),\n+                            membership);\n                 }\n             }, anyObjectTO.getMemberships());\n \n@@ -131,6 +145,16 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n+        // name\n+        SyncopeClientException invalidGroups = SyncopeClientException.build(ClientExceptionType.InvalidGroup);\n+        if (anyObjectTO.getName() == null) {\n+            LOG.error(\"No name specified for this anyObject\");\n+\n+            invalidGroups.getElements().add(\"No name specified for this anyObject\");\n+        } else {\n+            anyObject.setName(anyObjectTO.getName());\n+        }\n+\n         // realm\n         Realm realm = realmDAO.findByFullPath(anyObjectTO.getRealm());\n         if (realm == null) {\n@@ -140,6 +164,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n         }\n         anyObject.setRealm(realm);\n \n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT);\n         if (anyObject.getRealm() != null) {\n             AssignableCond assignableCond = new AssignableCond();\n             assignableCond.setRealmFullPath(anyObject.getRealm().getFullPath());\n@@ -199,6 +224,9 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n                     membership.setLeftEnd(anyObject);\n \n                     anyObject.add(membership);\n+\n+                    // membership attributes\n+                    fill(anyObject, membership, membershipTO, anyUtils, scce);\n                 } else {\n                     LOG.error(\"{} cannot be assigned to {}\", group, anyObject);\n \n@@ -210,8 +238,8 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n             }\n         }\n \n-        // attributes, derived attributes, virtual attributes and resources\n-        fill(anyObject, anyObjectTO, anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT), scce);\n+        // attributes and resources\n+        fill(anyObject, anyObjectTO, anyUtils, scce);\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {\n@@ -233,8 +261,19 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         // fetch connObjectKeys before update\n         Map<String, String> oldConnObjectKeys = getConnObjectKeys(anyObject);\n \n-        // attributes, derived attributes, virtual attributes and resources\n-        propByRes.merge(fill(anyObject, anyObjectPatch, anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT), scce));\n+        // realm\n+        setRealm(anyObject, anyObjectPatch);\n+\n+        // name\n+        if (anyObjectPatch.getName() != null && StringUtils.isNotBlank(anyObjectPatch.getName().getValue())) {\n+            propByRes.addAll(ResourceOperation.UPDATE, anyObject.getResourceNames());\n+\n+            anyObject.setName(anyObjectPatch.getName().getValue());\n+        }\n+\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT);\n+        // attributes and resources\n+        propByRes.merge(fill(anyObject, anyObjectPatch, anyUtils, scce));\n \n         Set<String> toBeDeprovisioned = new HashSet<>();\n         Set<String> toBeProvisioned = new HashSet<>();\n@@ -253,6 +292,8 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                             anyObject.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n                     if (relationship != null) {\n                         anyObject.getRelationships().remove(relationship);\n+                        relationship.setLeftEnd(null);\n+\n                         toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n                     }\n \n@@ -293,29 +334,69 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n             }\n         }\n \n+        Set<ExternalResource> resources = anyUtils.getAllResources(anyObject);\n+        SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n+\n         // memberships\n         List<Group> assignableGroups =\n                 searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.GROUP);\n \n-        for (MembershipPatch patch : anyObjectPatch.getMemberships()) {\n-            if (patch.getMembershipTO() != null) {\n-                AMembership membership = anyObject.getMembership(patch.getMembershipTO().getRightKey());\n+        for (MembershipPatch membPatch : anyObjectPatch.getMemberships()) {\n+            if (membPatch.getGroup() != null) {\n+                AMembership membership = anyObject.getMembership(membPatch.getGroup());\n                 if (membership != null) {\n                     anyObject.getMemberships().remove(membership);\n+                    membership.setLeftEnd(null);\n+                    for (APlainAttr attr : anyObject.getPlainAttrs(membership)) {\n+                        anyObject.remove(attr);\n+                        attr.setOwner(null);\n+                    }\n+\n                     toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n                 }\n \n-                if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    Group group = groupDAO.find(patch.getMembershipTO().getRightKey());\n+                if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    Group group = groupDAO.find(membPatch.getGroup());\n                     if (group == null) {\n-                        LOG.debug(\"Ignoring invalid group {}\", patch.getMembershipTO().getRightKey());\n+                        LOG.debug(\"Ignoring invalid group {}\", membPatch.getGroup());\n                     } else if (assignableGroups.contains(group)) {\n                         membership = entityFactory.newEntity(AMembership.class);\n                         membership.setRightEnd(group);\n                         membership.setLeftEnd(anyObject);\n \n                         anyObject.add(membership);\n \n+                        for (AttrPatch patch : membPatch.getPlainAttrs()) {\n+                            if (patch.getAttrTO() != null) {\n+                                PlainSchema schema = getPlainSchema(patch.getAttrTO().getSchema());\n+                                if (schema == null) {\n+                                    LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n+                                            + \"{}, ignoring...\", patch.getAttrTO().getSchema());\n+                                } else {\n+                                    APlainAttr attr = anyObject.getPlainAttr(schema.getKey(), membership);\n+                                    if (attr == null) {\n+                                        LOG.debug(\"No plain attribute found for {} and membership of {}\",\n+                                                schema, membership.getRightEnd());\n+\n+                                        if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                                            attr = anyUtils.newPlainAttr();\n+                                            attr.setOwner(anyObject);\n+                                            attr.setMembership(membership);\n+                                            attr.setSchema(schema);\n+                                            anyObject.add(attr);\n+\n+                                            processAttrPatch(\n+                                                    anyObject, patch, schema, attr, anyUtils,\n+                                                    resources, propByRes, invalidValues);\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        if (!invalidValues.isEmpty()) {\n+                            scce.addException(invalidValues);\n+                        }\n+\n                         toBeProvisioned.addAll(group.getResourceNames());\n                     } else {\n                         LOG.error(\"{} cannot be assigned to {}\", group, anyObject);"},{"sha":"38f1811126e54a9209d3bed0c8b78fd1bf49eeb8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -110,7 +110,7 @@ public void create(final Group group, final GroupTO groupTO) {\n         }\n         group.setRealm(realm);\n \n-        // attributes, derived attributes, virtual attributes and resources\n+        // attributes and resources\n         fill(group, groupTO, anyUtilsFactory.getInstance(AnyTypeKind.GROUP), scce);\n \n         // owner\n@@ -211,7 +211,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n                     : groupDAO.find(groupPatch.getGroupOwner().getValue()));\n         }\n \n-        // attributes, derived attributes, virtual attributes and resources\n+        // attributes and resources\n         propByRes.merge(fill(group, groupPatch, anyUtilsFactory.getInstance(AnyTypeKind.GROUP), scce));\n \n         // check if some connObjectKey was changed by the update above\n@@ -325,7 +325,7 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n \n         Map<DerSchema, String> derAttrValues = derAttrHandler.getValues(group);\n         Map<VirSchema, List<String>> virAttrValues = details\n-                ? virAttrHander.getValues(group)\n+                ? virAttrHandler.getValues(group)\n                 : Collections.<VirSchema, List<String>>emptyMap();\n         fillTO(groupTO, group.getRealm().getFullPath(), group.getAuxClasses(),\n                 group.getPlainAttrs(), derAttrValues, virAttrValues, group.getResources());"},{"sha":"1581463a40f43ed0c78029d17517ae8d4c5b096a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":74,"deletions":16,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.RelationshipPatch;\n@@ -62,7 +63,8 @@\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n@@ -72,6 +74,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n@@ -188,6 +191,7 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         }\n         user.setRealm(realm);\n \n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.USER);\n         if (user.getRealm() != null) {\n             AssignableCond assignableCond = new AssignableCond();\n             assignableCond.setRealmFullPath(user.getRealm().getFullPath());\n@@ -237,6 +241,9 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n                     membership.setLeftEnd(user);\n \n                     user.add(membership);\n+\n+                    // membership attributes\n+                    fill(user, membership, membershipTO, anyUtils, scce);\n                 } else {\n                     LOG.error(\"{} cannot be assigned to {}\", group, user);\n \n@@ -248,8 +255,8 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             }\n         }\n \n-        // attributes, derived attributes, virtual attributes and resources\n-        fill(user, userTO, anyUtilsFactory.getInstance(AnyTypeKind.USER), scce);\n+        // attributes and resources\n+        fill(user, userTO, anyUtils, scce);\n \n         // set password\n         if (StringUtils.isBlank(userTO.getPassword()) || !storePassword) {\n@@ -371,8 +378,9 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n             }\n         }\n \n-        // attributes, derived attributes, virtual attributes and resources\n-        propByRes.merge(fill(user, userPatch, anyUtilsFactory.getInstance(AnyTypeKind.USER), scce));\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.USER);\n+        // attributes and resources\n+        propByRes.merge(fill(user, userPatch, anyUtils, scce));\n \n         Set<String> toBeDeprovisioned = new HashSet<>();\n         Set<String> toBeProvisioned = new HashSet<>();\n@@ -391,6 +399,8 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                             user.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n                     if (relationship != null) {\n                         user.getRelationships().remove(relationship);\n+                        relationship.setLeftEnd(null);\n+\n                         toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n                     }\n \n@@ -420,29 +430,70 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n             }\n         }\n \n+        Set<ExternalResource> resources = anyUtils.getAllResources(user);\n+        SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n+\n         // memberships\n         List<Group> assignableGroups =\n                 searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.GROUP);\n \n-        for (MembershipPatch patch : userPatch.getMemberships()) {\n-            if (patch.getMembershipTO() != null) {\n-                UMembership membership = user.getMembership(patch.getMembershipTO().getRightKey());\n+        for (MembershipPatch membPatch : userPatch.getMemberships()) {\n+            if (membPatch.getGroup() != null) {\n+                UMembership membership = user.getMembership(membPatch.getGroup());\n                 if (membership != null) {\n                     user.getMemberships().remove(membership);\n+                    membership.setLeftEnd(null);\n+                    for (UPlainAttr attr : user.getPlainAttrs(membership)) {\n+                        user.remove(attr);\n+                        attr.setOwner(null);\n+                        attr.setMembership(null);\n+                    }\n+\n                     toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n                 }\n \n-                if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                    Group group = groupDAO.find(patch.getMembershipTO().getRightKey());\n+                if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    Group group = groupDAO.find(membPatch.getGroup());\n                     if (group == null) {\n-                        LOG.debug(\"Ignoring invalid group {}\", patch.getMembershipTO().getRightKey());\n+                        LOG.debug(\"Ignoring invalid group {}\", membPatch.getGroup());\n                     } else if (assignableGroups.contains(group)) {\n                         membership = entityFactory.newEntity(UMembership.class);\n                         membership.setRightEnd(group);\n                         membership.setLeftEnd(user);\n \n                         user.add(membership);\n \n+                        for (AttrPatch patch : membPatch.getPlainAttrs()) {\n+                            if (patch.getAttrTO() != null) {\n+                                PlainSchema schema = getPlainSchema(patch.getAttrTO().getSchema());\n+                                if (schema == null) {\n+                                    LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n+                                            + \"{}, ignoring...\", patch.getAttrTO().getSchema());\n+                                } else {\n+                                    UPlainAttr attr = user.getPlainAttr(schema.getKey(), membership);\n+                                    if (attr == null) {\n+                                        LOG.debug(\"No plain attribute found for {} and membership of {}\",\n+                                                schema, membership.getRightEnd());\n+\n+                                        if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                                            attr = anyUtils.newPlainAttr();\n+                                            attr.setOwner(user);\n+                                            attr.setMembership(membership);\n+                                            attr.setSchema(schema);\n+                                            user.add(attr);\n+\n+                                            processAttrPatch(\n+                                                    user, patch, schema, attr, anyUtils,\n+                                                    resources, propByRes, invalidValues);\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        if (!invalidValues.isEmpty()) {\n+                            scce.addException(invalidValues);\n+                        }\n+\n                         toBeProvisioned.addAll(group.getResourceNames());\n \n                         // SYNCOPE-686: if password is invertible and we are adding resources with password mapping,\n@@ -509,12 +560,15 @@ public UserTO getUserTO(final User user, final boolean details) {\n             userTO.setSecurityQuestion(user.getSecurityQuestion().getKey());\n         }\n \n-        Map<DerSchema, String> derAttrValues = derAttrHandler.getValues(user);\n         Map<VirSchema, List<String>> virAttrValues = details\n-                ? virAttrHander.getValues(user)\n+                ? virAttrHandler.getValues(user)\n                 : Collections.<VirSchema, List<String>>emptyMap();\n-        fillTO(userTO, user.getRealm().getFullPath(), user.getAuxClasses(),\n-                user.getPlainAttrs(), derAttrValues, virAttrValues, userDAO.findAllResources(user));\n+        fillTO(userTO, user.getRealm().getFullPath(),\n+                user.getAuxClasses(),\n+                user.getPlainAttrs(),\n+                derAttrHandler.getValues(user),\n+                virAttrValues,\n+                userDAO.findAllResources(user));\n \n         if (details) {\n             // roles\n@@ -536,7 +590,11 @@ public RelationshipTO transform(final URelationship relationship) {\n \n                 @Override\n                 public MembershipTO transform(final UMembership membership) {\n-                    return UserDataBinderImpl.this.getMembershipTO(membership);\n+                    return getMembershipTO(\n+                            user.getPlainAttrs(membership),\n+                            derAttrHandler.getValues(user, membership),\n+                            virAttrHandler.getValues(user, membership),\n+                            membership);\n                 }\n             }, userTO.getMemberships());\n "},{"sha":"1b509d7677831d8b82617b7bc4d0c4abaa1a3c9a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -22,7 +22,6 @@\n import java.util.Set;\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n@@ -70,7 +69,7 @@ public Void exec() {\n                             userPatch.getMemberships().add(\n                                     new MembershipPatch.Builder().\n                                     operation(PatchOperation.ADD_REPLACE).\n-                                    membershipTO(new MembershipTO.Builder().group(groupKey).build()).\n+                                    group(groupKey).\n                                     build());\n                         }\n "},{"sha":"995f4839a7f1f15267f2717d9814c1c6d41ad90f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -237,6 +238,13 @@ private List<String> findByConnObjectKeyItem(\n                 }\n                 break;\n \n+            case AnyObjectName:\n+                AnyObject anyObject = anyObjectDAO.findByName(transfUid);\n+                if (anyObject != null) {\n+                    result.add(anyObject.getKey());\n+                }\n+                break;\n+                \n             default:\n                 LOG.error(\"Invalid connObjectKey type '{}'\", connObjectKeyItem.getIntMappingType());\n         }"},{"sha":"af2631c4991ea55b4a51854e78f4d7585c0b9512","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -260,7 +260,7 @@ public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n                     }\n                 }\n \n-                connObjectTO.getPlainAttrs().add(attrTO);\n+                connObjectTO.getAttrs().add(attrTO);\n             }\n         }\n "},{"sha":"1df71a404c476e6c679fff1016d00eaedef30707","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -162,7 +162,7 @@ protected String getFormTask(final User user) {\n \n         List<Task> tasks = engine.getTaskService().createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {\n-            LOG.warn(\"While checking if form task: unexpected task number ({})\", tasks.size());\n+            LOG.debug(\"While checking if form task: unexpected task number ({})\", tasks.size());\n         } else {\n             try {\n                 TaskFormData formData = engine.getFormService().getTaskFormData(tasks.get(0).getId());"},{"sha":"610c8a326b4506aa0cb235b752de211868b9ab46","filename":"fit/build-tools/src/main/resources/testdb.sql","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Ftestdb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Ftestdb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Ftestdb.sql?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -45,5 +45,6 @@ lastModification TIMESTAMP);\n DROP TABLE testPRINTER IF EXISTS;\n CREATE TABLE testPRINTER (\n id CHAR(36) PRIMARY KEY,\n+printername VARCHAR(80),\n location VARCHAR(80),\n lastModification TIMESTAMP);"},{"sha":"bfd04fe01e45b276eea1c8e20ac5dd17d916c3ed","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AnyObjectsITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyObjectsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyObjectsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAnyObjectsITCase.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -69,7 +69,7 @@ public void clickToClonePrinter() {\n                 \"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\");\n         assertNotNull(component);\n \n-        wicketTester.clickLink(component.getPageRelativePath() + \":cells:3:cell:panelClone:cloneLink\");\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:4:cell:panelClone:cloneLink\");\n \n         FormTester formTester = wicketTester.newFormTester(tabPanel + \"outerObjectsRepeater:0:outer:form:content:form\");\n         assertNotNull(formTester);\n@@ -87,7 +87,7 @@ public void editPrinter() {\n                 \"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\");\n         assertNotNull(component);\n \n-        wicketTester.clickLink(component.getPageRelativePath() + \":cells:3:cell:panelEdit:editLink\");\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:4:cell:panelEdit:editLink\");\n \n         wicketTester.assertComponent(tabPanel + \"outerObjectsRepeater:0:outer:form:content:form:view:status:\"\n                 + \"resources:firstLevelContainer:first:container:content:group:beans:0:fields:0\", ListItem.class);\n@@ -138,7 +138,7 @@ public void checkDeletePrinterLink() {\n                 \"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\");\n         assertNotNull(component);\n \n-        wicketTester.assertComponent(component.getPageRelativePath() + \":cells:3:cell:panelDelete:deleteLink\",\n+        wicketTester.assertComponent(component.getPageRelativePath() + \":cells:4:cell:panelDelete:deleteLink\",\n                 IndicatingOnConfirmAjaxLink.class);\n     }\n }"},{"sha":"cf829805e2dc79601f7c40e07db8a238463f9ccd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/BulkActionITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBulkActionITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBulkActionITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBulkActionITCase.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -236,7 +236,7 @@ public void printerResourceBulkAction() {\n         assertNotNull(component);\n \n         wicketTester.clickLink(component.getPageRelativePath()\n-                + \":cells:3:cell:panelManageResources:manageResourcesLink\");\n+                + \":cells:4:cell:panelManageResources:manageResourcesLink\");\n \n         wicketTester.assertComponent(tabPanel + \"outerObjectsRepeater:1:outer:form:content:status:\"\n                 + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:groupForm:\""},{"sha":"e0e02b93251663bdc42537284b13a3e4990095c1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/DisplayAttributesITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FDisplayAttributesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FDisplayAttributesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FDisplayAttributesITCase.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -42,7 +42,7 @@ public void read() {\n         wicketTester.clickLink(\"body:content:body:tabbedPanel:panel:\"\n                 + \"searchResult:container:content:searchContainer:resultTable:\"\n                 + \"tablePanel:groupForm:checkgroup:dataTable:topToolbars:\"\n-                + \"toolbars:1:headers:3:header:label:panelChangeView:changeViewLink\");\n+                + \"toolbars:1:headers:4:header:label:panelChangeView:changeViewLink\");\n \n         wicketTester.assertComponent(\n                 \"body:content:body:tabbedPanel:panel:searchResult:outerObjectsRepeater:2:outer\", Modal.class);\n@@ -54,7 +54,7 @@ public void set() {\n         wicketTester.clickLink(\"body:content:body:tabbedPanel:panel:\"\n                 + \"searchResult:container:content:searchContainer:resultTable:\"\n                 + \"tablePanel:groupForm:checkgroup:dataTable:topToolbars:\"\n-                + \"toolbars:1:headers:3:header:label:panelChangeView:changeViewLink\");\n+                + \"toolbars:1:headers:4:header:label:panelChangeView:changeViewLink\");\n \n         wicketTester.assertComponent(\n                 \"body:content:body:tabbedPanel:panel:searchResult:outerObjectsRepeater:2:outer\", Modal.class);"},{"sha":"7356c5ca8d99a373a5ce5b2f95a5fe9026f494f0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -50,6 +50,7 @@ public class AnyObjectITCase extends AbstractITCase {\n \n     public static AnyObjectTO getSampleTO(final String location) {\n         AnyObjectTO anyObjectTO = new AnyObjectTO();\n+        anyObjectTO.setName(location + getUUIDString());\n         anyObjectTO.setRealm(SyncopeConstants.ROOT_REALM);\n         anyObjectTO.setType(\"PRINTER\");\n         anyObjectTO.getPlainAttrs().add(attrTO(\"location\", location + getUUIDString()));"},{"sha":"05d989858d0b4e356fc302577be0933a225a86fd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -432,6 +432,7 @@ public boolean evaluate(final String entitlement) {\n \n         // 3. attempt to create an instance of the type above: fail because no entitlement was assigned\n         AnyObjectTO folder = new AnyObjectTO();\n+        folder.setName(\"home\");\n         folder.setRealm(SyncopeConstants.ROOT_REALM);\n         folder.setType(anyTypeKey);\n         folder.getPlainAttrs().add(attrTO(path.getKey(), \"/home\"));"},{"sha":"b3557997fca8c23e4fec0dc5ad5372ef67573dc0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/CamelRouteITCase.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -24,7 +24,6 @@\n import static org.junit.Assert.assertNotNull;\n \n import java.util.List;\n-import org.apache.commons.collections4.IterableUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n@@ -123,8 +122,7 @@ public void scriptingUpdate() {\n                 + \"    </setProperty>\\n\"\n                 + \"    <setBody>\\n\"\n                 + \"     <groovy>\\n\"\n-                + \"       org.apache.commons.collections4.\"\n-                + \"CollectionUtils.get(request.body.getPlainAttrs(), 3).getValues().set(0,\\\"true\\\")\\n\"\n+                + \"request.body.getPlainAttrMap().get(\\\"camelAttribute\\\").getValues().set(0,\\\"true\\\")\\n\"\n                 + \"       return request.body\\n\"\n                 + \"     </groovy>\\n\"\n                 + \"    </setBody>\\n\"\n@@ -169,7 +167,7 @@ public void scriptingUpdate() {\n \n             userTO = createUser(userTO).getAny();\n             assertNotNull(userTO);\n-            assertEquals(\"true\", IterableUtils.get(userTO.getPlainAttrs(), 3).getValues().get(0));\n+            assertEquals(\"true\", userTO.getPlainAttrMap().get(\"camelAttribute\").getValues().get(0));\n         } finally {\n             doUpdate(oldRoute.getKey(), oldRoute.getContent());\n         }"},{"sha":"38b3631adda4e08d6b08917b7acc08c73f0f0c6b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"added","additions":206,"deletions":0,"changes":206,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.MembershipPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.TypeExtensionTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class MembershipITCase extends AbstractITCase {\n+\n+    @Test\n+    public void misc() {\n+        UserTO user = UserITCase.getUniqueSampleTO(\"memb@apache.org\");\n+        user.setRealm(\"/even/two\");\n+        user.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build());\n+        user.getPlainAttrs().remove(user.getPlainAttrMap().get(\"ctype\"));\n+\n+        // the group 034740a9-fa10-453b-af37-dc7897e98fb1 has USER type extensions for 'csv' and 'other' \n+        // any type classes\n+        MembershipTO membership = new MembershipTO.Builder().group(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build();\n+        membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1977\").build());\n+\n+        // 'fullname' is in 'minimal user', so it is not allowed for this membership\n+        membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"fullname\").value(\"discarded\").build());\n+\n+        user.getMemberships().add(membership);\n+\n+        // user creation fails because of fullname\n+        try {\n+            createUser(user);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+            assertTrue(e.getMessage().contains(\"InvalidPlainAttr: fullname not allowed for membership of group\"));\n+        }\n+\n+        // remove fullname and try again\n+        CollectionUtils.filterInverse(membership.getPlainAttrs(), new Predicate<AttrTO>() {\n+\n+            @Override\n+            public boolean evaluate(final AttrTO object) {\n+                return \"fullname\".equals(object.getSchema());\n+            }\n+        });\n+        try {\n+            user = createUser(user).getAny();\n+\n+            // 1. verify that 'aLong' is correctly populated for user\n+            assertEquals(1, user.getPlainAttrMap().get(\"aLong\").getValues().size());\n+            assertEquals(\"1976\", user.getPlainAttrMap().get(\"aLong\").getValues().get(0));\n+\n+            // 2. verify that 'aLong' is correctly populated for user's membership\n+            assertEquals(1, user.getMemberships().size());\n+            membership = user.getMembershipMap().get(\"034740a9-fa10-453b-af37-dc7897e98fb1\");\n+            assertNotNull(membership);\n+            assertEquals(1, membership.getPlainAttrMap().get(\"aLong\").getValues().size());\n+            assertEquals(\"1977\", membership.getPlainAttrMap().get(\"aLong\").getValues().get(0));\n+\n+            // 3. verify that derived attrbutes from 'csv' and 'other' are also populated for user's membership\n+            assertFalse(membership.getDerAttrMap().get(\"csvuserid\").getValues().isEmpty());\n+            assertFalse(membership.getDerAttrMap().get(\"noschema\").getValues().isEmpty());\n+\n+            // update user - change some values and add new membership attribute\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(user.getKey());\n+\n+            userPatch.getPlainAttrs().add(new AttrPatch.Builder().\n+                    attrTO(new AttrTO.Builder().schema(\"aLong\").value(\"1977\").build()).build());\n+\n+            MembershipPatch membershipPatch = new MembershipPatch.Builder().group(membership.getGroupKey()).build();\n+            membershipPatch.getPlainAttrs().add(new AttrPatch.Builder().\n+                    attrTO(new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build()).build());\n+            membershipPatch.getPlainAttrs().add(new AttrPatch.Builder().\n+                    attrTO(new AttrTO.Builder().schema(\"ctype\").value(\"membership type\").build()).build());\n+            userPatch.getMemberships().add(membershipPatch);\n+\n+            user = updateUser(userPatch).getAny();\n+\n+            // 4. verify that 'aLong' is correctly populated for user\n+            assertEquals(1, user.getPlainAttrMap().get(\"aLong\").getValues().size());\n+            assertEquals(\"1977\", user.getPlainAttrMap().get(\"aLong\").getValues().get(0));\n+            assertFalse(user.getPlainAttrMap().containsKey(\"ctype\"));\n+\n+            // 5. verify that 'aLong' is correctly populated for user's membership\n+            assertEquals(1, user.getMemberships().size());\n+            membership = user.getMembershipMap().get(\"034740a9-fa10-453b-af37-dc7897e98fb1\");\n+            assertNotNull(membership);\n+            assertEquals(1, membership.getPlainAttrMap().get(\"aLong\").getValues().size());\n+            assertEquals(\"1976\", membership.getPlainAttrMap().get(\"aLong\").getValues().get(0));\n+\n+            // 6. verify that 'ctype' is correctly populated for user's membership\n+            assertEquals(\"membership type\", membership.getPlainAttrMap().get(\"ctype\").getValues().get(0));\n+\n+            // finally remove membership\n+            userPatch = new UserPatch();\n+            userPatch.setKey(user.getKey());\n+\n+            membershipPatch = new MembershipPatch.Builder().group(membership.getGroupKey()).\n+                    operation(PatchOperation.DELETE).build();\n+            userPatch.getMemberships().add(membershipPatch);\n+\n+            user = updateUser(userPatch).getAny();\n+\n+            assertTrue(user.getMemberships().isEmpty());\n+        } finally {\n+            if (user.getKey() != null) {\n+                userService.delete(user.getKey());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteUserWithMembership() {\n+        UserTO user = UserITCase.getUniqueSampleTO(\"memb@apache.org\");\n+        user.setRealm(\"/even/two\");\n+        user.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build());\n+\n+        MembershipTO membership = new MembershipTO.Builder().group(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build();\n+        membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1977\").build());\n+        user.getMemberships().add(membership);\n+\n+        user = createUser(user).getAny();\n+        assertNotNull(user.getKey());\n+\n+        userService.delete(user.getKey());\n+    }\n+\n+    @Test\n+    public void onGroupDelete() {\n+        // pre: create group with type extension\n+        TypeExtensionTO typeExtension = new TypeExtensionTO();\n+        typeExtension.setAnyType(AnyTypeKind.USER.name());\n+        typeExtension.getAuxClasses().add(\"csv\");\n+        typeExtension.getAuxClasses().add(\"other\");\n+\n+        GroupTO groupTO = GroupITCase.getBasicSampleTO(\"typeExt\");\n+        groupTO.getTypeExtensions().add(typeExtension);\n+        groupTO = createGroup(groupTO).getAny();\n+        assertNotNull(groupTO);\n+\n+        // pre: create user with membership to such group\n+        UserTO user = UserITCase.getUniqueSampleTO(\"typeExt@apache.org\");\n+\n+        MembershipTO membership = new MembershipTO.Builder().group(groupTO.getKey()).build();\n+        membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1454\").build());\n+        user.getMemberships().add(membership);\n+\n+        user = createUser(user).getAny();\n+\n+        // verify that 'aLong' is correctly populated for user's membership\n+        assertEquals(1, user.getMemberships().size());\n+        membership = user.getMembershipMap().get(groupTO.getKey());\n+        assertNotNull(membership);\n+        assertEquals(1, membership.getPlainAttrMap().get(\"aLong\").getValues().size());\n+        assertEquals(\"1454\", membership.getPlainAttrMap().get(\"aLong\").getValues().get(0));\n+\n+        // verify that derived attrbutes from 'csv' and 'other' are also populated for user's membership\n+        assertFalse(membership.getDerAttrMap().get(\"csvuserid\").getValues().isEmpty());\n+        assertFalse(membership.getDerAttrMap().get(\"noschema\").getValues().isEmpty());\n+\n+        // now remove the group -> all related memberships should have been removed as well\n+        groupService.delete(groupTO.getKey());\n+\n+        // re-read user and verify that no memberships are available any more\n+        user = userService.read(user.getKey());\n+        assertTrue(user.getMemberships().isEmpty());\n+    }\n+}"},{"sha":"4e4af92f43092b0e0b4e6bdb8d7d39fcb6c7150e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -646,10 +646,9 @@ public void update() {\n         userPatch.getPlainAttrs().add(attrAddReplacePatch(\"fullname\", newFullName));\n \n         userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n-                membershipTO(new MembershipTO.Builder().\n-                        group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build()).build());\n+                group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n         userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n-                membershipTO(userTO.getMemberships().get(0)).build());\n+                group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n         userTO = updateUser(userPatch).getAny();\n         assertNotNull(userTO);\n@@ -1218,7 +1217,7 @@ public void issueSYNCOPE108() {\n         userPatch.setKey(userTO.getKey());\n \n         userPatch.getMemberships().add(new MembershipPatch.Builder().\n-                operation(PatchOperation.DELETE).membershipTO(userTO.getMemberships().get(0)).build());\n+                operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n         userTO = updateUser(userPatch).getAny();\n         assertNotNull(userTO);\n@@ -1253,7 +1252,7 @@ public void issueSYNCOPE108() {\n         userPatch.setKey(userTO.getKey());\n \n         userPatch.getMemberships().add(new MembershipPatch.Builder().\n-                operation(PatchOperation.DELETE).membershipTO(userTO.getMemberships().get(0)).build());\n+                operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n         userTO = updateUser(userPatch).getAny();\n         assertNotNull(userTO);\n@@ -1635,7 +1634,7 @@ public void issueSYNCOPE354() {\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n         userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.DELETE).\n-                membershipTO(userTO.getMemberships().get(0)).build());\n+                group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n         userTO = updateUser(userPatch).getAny();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n@@ -2503,7 +2502,7 @@ public void issueSYNCOPE686() {\n             UserPatch userPatch = new UserPatch();\n             userPatch.setKey(userTO.getKey());\n             userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n-                    membershipTO(new MembershipTO.Builder().group(group.getKey()).build()).build());\n+                    group(group.getKey()).build());\n \n             ProvisioningResult<UserTO> result = updateUser(userPatch);\n             assertNotNull(result);"},{"sha":"beb6c6efc359ae88f5d7074877b4c3201549f9c7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -182,8 +182,7 @@ public void updateWithApproval() {\n         userPatch.setUsername(new StringReplacePatchItem.Builder().value(created.getUsername() + \"XX\").build());\n         userPatch.getMemberships().add(new MembershipPatch.Builder().\n                 operation(PatchOperation.ADD_REPLACE).\n-                membershipTO(new MembershipTO.Builder().\n-                        group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build()).\n+                group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").\n                 build());\n         userPatch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());"},{"sha":"a5e1a5ec36316f7dc3d95e811b1d18b67d5047b2","filename":"fit/core-reference/src/test/resources/scriptedsql/CreateScript.groovy","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FCreateScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FCreateScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FCreateScript.groovy?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -37,9 +37,10 @@ def sql = new Sql(connection);\n \n switch ( objectClass ) {  \n case \"__PRINTER__\":\n-  sql.execute(\"INSERT INTO TESTPRINTER (id, location, lastmodification) values (?,?,?)\",\n+  sql.execute(\"INSERT INTO TESTPRINTER (id, printername, location, lastmodification) values (?,?,?,?)\",\n     [\n       id,\n+      attributes.get(\"PRINTERNAME\").get(0),\n       attributes.get(\"LOCATION\").get(0),\n       new Date()\n     ])"},{"sha":"e13f058e5874c05b6a1e0bf12a7bd238c2bb019f","filename":"fit/core-reference/src/test/resources/scriptedsql/SchemaScript.groovy","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSchemaScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSchemaScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSchemaScript.groovy?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -42,6 +42,7 @@ idAIB.setRequired(true);\n \n orgAttrsInfo = new HashSet<AttributeInfo>();\n orgAttrsInfo.add(idAIB.build());\n+orgAttrsInfo.add(AttributeInfoBuilder.build(\"PRINTERNAME\", String.class));\n orgAttrsInfo.add(AttributeInfoBuilder.build(\"LOCATION\", String.class));\n // Create the organization Object class\n ObjectClassInfo ociOrg = new ObjectClassInfoBuilder().setType(\"__PRINTER__\").addAllAttributeInfo(orgAttrsInfo).build();"},{"sha":"bb02d8091ebb9f38b12e28c1fbd3f5cc50d6955f","filename":"fit/core-reference/src/test/resources/scriptedsql/SearchScript.groovy","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSearchScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSearchScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSearchScript.groovy?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -84,7 +84,7 @@ if (query != null)  {\n switch ( objectClass ) {\n case \"__PRINTER__\":\n   sql.eachRow(\"SELECT * FROM TESTPRINTER \" + where, \n-    {result.add([__UID__:it.id, __NAME__:it.id, ID:it.id, LOCATION:it.location])} );\n+    {result.add([__UID__:it.id, __NAME__:it.id, ID:it.id, PRINTERNAME:it.printername, LOCATION:it.location])} );\n   break\n \n default:"},{"sha":"f7ff18f49ee9ea30f3219d8851309fd3ab9e653d","filename":"fit/core-reference/src/test/resources/scriptedsql/SyncScript.groovy","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSyncScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSyncScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSyncScript.groovy?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -71,7 +71,7 @@ if (action.equalsIgnoreCase(\"GET_LATEST_SYNC_TOKEN\")) {\n   }\n \n   switch (objectClass) {\n-  case \"__PRINTER__\":    \n+  case \"__PRINTER__\":\n     sql.eachRow(\"SELECT * FROM TESTPRINTER WHERE lastmodification > ${lastmodification}\",\n       {\n         result.add([\n@@ -82,6 +82,7 @@ if (action.equalsIgnoreCase(\"GET_LATEST_SYNC_TOKEN\")) {\n               __UID__:it.id.toString(),\n               __NAME__:it.id.toString(),\n               ID:it.id.toString(),\n+              PRINTERNAME:it.printername,\n               LOCATION:it.location\n             ]\n           ]);"},{"sha":"1de9d9f8d014a9f4c2602f0a8d18a5233870a56e","filename":"fit/core-reference/src/test/resources/scriptedsql/TestScript.groovy","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FTestScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FTestScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FTestScript.groovy?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -28,4 +28,4 @@ import groovy.sql.DataSet;\n log.info(\"Entering \" + action + \" Script\");\n def sql = new Sql(connection);\n \n-sql.eachRow(\"select * from TESTPRINTER\", { println it.uid} );\n\\ No newline at end of file\n+sql.eachRow(\"select * from TESTPRINTER\", { println it.id} );\n\\ No newline at end of file"},{"sha":"9df30f874bd97176458184e64d9c212240271ce4","filename":"fit/core-reference/src/test/resources/scriptedsql/UpdateScript.groovy","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FUpdateScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f738186c95c51e3aa861babc34f28d0627e773a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FUpdateScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FUpdateScript.groovy?ref=0f738186c95c51e3aa861babc34f28d0627e773a","patch":"@@ -51,8 +51,11 @@ def sql = new Sql(connection);\n switch (action) {\n case \"UPDATE\":\n   if (attributes.get(\"LOCATION\").get(0) != null) {\n-    sql.executeUpdate(\"UPDATE TESTPRINTER SET location = ?, lastmodification = ? where id = ?\", \n-      [attributes.get(\"LOCATION\").get(0), new Date(), attributes.get(\"__NAME__\").get(0)])\n+    sql.executeUpdate(\"UPDATE TESTPRINTER SET printername = ?, location = ?, lastmodification = ? where id = ?\", \n+      [attributes.get(\"PRINTERNAME\").get(0), \n+        attributes.get(\"LOCATION\").get(0), \n+        new Date(), \n+        attributes.get(\"__NAME__\").get(0)])\n     \n     return attributes.get(\"__NAME__\").get(0);\n   }"}]}