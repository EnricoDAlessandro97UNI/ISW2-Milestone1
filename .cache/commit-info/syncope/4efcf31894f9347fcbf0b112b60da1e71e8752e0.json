{"sha":"4efcf31894f9347fcbf0b112b60da1e71e8752e0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRlZmNmMzE4OTRmOTM0N2ZjYmYwYjExMmI2MGRhMWU3MWU4NzUyZTA=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-02T08:57:43Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-02T08:57:43Z"},"message":"Schema and DerivedSchema are now updatable via REST\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246319 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"63587b3aa40a7dd5abd5d98e60faa2bae570ad81","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/63587b3aa40a7dd5abd5d98e60faa2bae570ad81"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4efcf31894f9347fcbf0b112b60da1e71e8752e0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4efcf31894f9347fcbf0b112b60da1e71e8752e0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4efcf31894f9347fcbf0b112b60da1e71e8752e0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4efcf31894f9347fcbf0b112b60da1e71e8752e0/comments","author":null,"committer":null,"parents":[{"sha":"889e51d2481261a420d52259b89d6cb56a490aff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/889e51d2481261a420d52259b89d6cb56a490aff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/889e51d2481261a420d52259b89d6cb56a490aff"}],"stats":{"total":297,"additions":229,"deletions":68},"files":[{"sha":"ba1c008119a225545d2a984bd29153552b20c1ea","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -28,6 +28,9 @@ public enum SyncopeClientExceptionType {\n     InvalidSchemas(\n     \"Syncope.InvalidSchemas\",\n     \"Syncope.InvalidSchemas.schemaName\"),\n+    InvalidSchemaUpdate(\n+    \"Syncope.InvalidSchemaUpdate\",\n+    \"\"),\n     InvalidUniques(\n     \"Syncope.InvalidUniques\",\n     \"Syncope.InvalidUniques.attributeName\"),"},{"sha":"adc87de14a1538f6eb1cd2a58f762529323f1b51","filename":"core/src/main/java/org/syncope/core/persistence/dao/DAO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -14,9 +14,7 @@\n  */\n package org.syncope.core.persistence.dao;\n \n-import javax.persistence.EntityManager;\n-\n public interface DAO {\n \n-    EntityManager getEntityManager();\n+    void flush();\n }"},{"sha":"8e2fcaa00531a647209d1ea62f5254e7a0a7225d","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -27,7 +27,7 @@ public abstract class AbstractDAOImpl implements DAO {\n     protected EntityManager entityManager;\n \n     @Override\n-    public EntityManager getEntityManager() {\n-        return entityManager;\n+    public void flush() {\n+        entityManager.flush();\n     }\n }"},{"sha":"cfea78f6a88b167a482ef696291270f5c34fb2e9","filename":"core/src/main/java/org/syncope/core/rest/controller/Attributable.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAttributable.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -14,6 +14,8 @@\n  */\n package org.syncope.core.rest.controller;\n \n+import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.role.RoleDerivedSchema;\n import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n@@ -23,7 +25,7 @@ enum Attributable {\n \n     USER, ROLE;\n \n-    public Class getSchemaClass() {\n+    public <T extends AbstractSchema> Class<T> getSchemaClass() {\n         Class result = null;\n \n         switch (this) {\n@@ -38,7 +40,7 @@ public Class getSchemaClass() {\n         return result;\n     }\n \n-    public Class getDerivedSchemaClass() {\n+    public <T extends AbstractDerivedSchema> Class<T> getDerivedSchemaClass() {\n         Class result = null;\n \n         switch (this) {"},{"sha":"f64fe04c86ebe790b7d9bf52abb00c37b6f251cc","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -74,7 +74,6 @@ public void delete(HttpServletResponse response,\n             throwNotFoundException(derivedSchemaName, response);\n         } else {\n             derivedSchemaDAO.delete(derivedSchemaName, reference);\n-            derivedSchemaDAO.getEntityManager().flush();\n         }\n     }\n \n@@ -117,14 +116,23 @@ public DerivedSchemaTO read(HttpServletResponse response,\n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n \n-    // TODO: implement and verify if current attributes are affected by this update\n     @Transactional\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n     public DerivedSchemaTO update(HttpServletResponse response,\n             @RequestBody DerivedSchemaTO derivedSchemaTO,\n             @PathVariable(\"kind\") String kind)\n-            throws InstantiationException, IllegalAccessException {\n+            throws InstantiationException, IllegalAccessException, IOException {\n+\n+        Class reference = getAttributable(kind).getDerivedSchemaClass();\n+        AbstractDerivedSchema derivedSchema =\n+                derivedSchemaDataBinder.createDerivedSchema(\n+                derivedSchemaTO, reference,\n+                getAttributable(kind).getSchemaClass());\n+        if (derivedSchema == null) {\n+            log.error(\"Could not find schema '\" + derivedSchemaTO.getName() + \"'\");\n+            return throwNotFoundException(derivedSchemaTO.getName(), response);\n+        }\n \n-        return create(response, derivedSchemaTO, kind);\n+        return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n }"},{"sha":"af53913d0890280abb675b8da0e8b10b9720a72b","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":18,"deletions":4,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -27,6 +27,7 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.to.SchemaTOs;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.persistence.validation.UniqueValueException;\n import org.syncope.core.rest.data.SchemaDataBinder;\n import org.syncope.core.persistence.beans.AbstractSchema;\n@@ -70,7 +71,6 @@ public void delete(HttpServletResponse response,\n             throwNotFoundException(schemaName, response);\n         } else {\n             schemaDAO.delete(schemaName, reference);\n-            schemaDAO.getEntityManager().flush();\n         }\n     }\n \n@@ -106,14 +106,28 @@ public SchemaTO read(HttpServletResponse response,\n         return schemaDataBinder.getSchemaTO(schema);\n     }\n \n-    // TODO: implement and verify if current attributes are affected by this update\n     @Transactional\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n     public SchemaTO update(HttpServletResponse response,\n             @RequestBody SchemaTO schemaTO, @PathVariable(\"kind\") String kind)\n-            throws InstantiationException, IllegalAccessException,\n+            throws IOException, InstantiationException, IllegalAccessException,\n             UniqueValueException {\n \n-        return create(response, schemaTO, kind);\n+        Class reference = getAttributable(kind).getSchemaClass();\n+        AbstractSchema schema = null;\n+        try {\n+            schema = schemaDataBinder.updateSchema(schemaTO,\n+                    reference,\n+                    getAttributable(kind).getDerivedSchemaClass());\n+            if (schema == null) {\n+                log.error(\"Could not find schema '\" + schemaTO.getName() + \"'\");\n+                return throwNotFoundException(schemaTO.getName(), response);\n+            }\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            log.error(\"Could not update for \" + schemaTO, e);\n+            return throwCompositeException(e, response);\n+        }\n+\n+        return schemaDataBinder.getSchemaTO(schema);\n     }\n }"},{"sha":"1cdda7d37e48424f7e7020b3c3e5ef93ba0846c7","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -82,7 +82,6 @@ public void delete(HttpServletResponse response,\n             throwNotFoundException(String.valueOf(userId), response);\n         } else {\n             syncopeUserDAO.delete(userId);\n-            syncopeUserDAO.getEntityManager().flush();\n         }\n     }\n "},{"sha":"2b45e361f9c303406711c9496f23f3b3a9b3ad0c","filename":"core/src/main/java/org/syncope/core/rest/data/DerivedSchemaDataBinder.java","status":"modified","additions":33,"deletions":7,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -43,12 +43,11 @@ public DerivedSchemaDataBinder(SchemaDAO schemaDAO,\n         this.derivedSchemaDAO = derivedSchemaDAO;\n     }\n \n-    public <T extends AbstractDerivedSchema, K extends AbstractSchema> T createDerivedSchema(\n+    private <T extends AbstractDerivedSchema, K extends AbstractSchema> T populateDerivedSchema(\n+            T derivedSchema,\n             DerivedSchemaTO derivedSchemaTO,\n-            Class<T> derivedReference, Class<K> reference)\n-            throws InstantiationException, IllegalAccessException {\n+            Class<K> reference) {\n \n-        T derivedSchema = derivedReference.newInstance();\n         BeanUtils.copyProperties(derivedSchemaTO, derivedSchema,\n                 ignoreDerivedSchemaProperties);\n \n@@ -63,12 +62,39 @@ public <T extends AbstractDerivedSchema, K extends AbstractSchema> T createDeriv\n             }\n         }\n \n-        // Everything went out fine, we can flush to the database\n-        derivedSchema = derivedSchemaDAO.save(derivedSchema);\n-        derivedSchemaDAO.getEntityManager().flush();\n         return derivedSchema;\n     }\n \n+    public <T extends AbstractDerivedSchema, K extends AbstractSchema> T createDerivedSchema(\n+            DerivedSchemaTO derivedSchemaTO,\n+            Class<T> derivedReference,\n+            Class<K> reference)\n+            throws InstantiationException, IllegalAccessException {\n+\n+        T derivedSchema = populateDerivedSchema(derivedReference.newInstance(),\n+                derivedSchemaTO, reference);\n+\n+        // Everything went out fine, we can flush to the database\n+        return derivedSchemaDAO.save(derivedSchema);\n+    }\n+\n+    public <T extends AbstractDerivedSchema, K extends AbstractSchema> T updateDerivedSchema(\n+            DerivedSchemaTO derivedSchemaTO,\n+            Class<T> derivedReference,\n+            Class<K> reference) {\n+\n+        T derivedSchema = derivedSchemaDAO.find(derivedSchemaTO.getName(),\n+                derivedReference);\n+        if (derivedSchema != null) {\n+            derivedSchema = populateDerivedSchema(derivedSchema, derivedSchemaTO, reference);\n+\n+            // Everything went out fine, we can flush to the database\n+            return derivedSchemaDAO.save(derivedSchema);\n+        }\n+\n+        return null;\n+    }\n+\n     public <T extends AbstractDerivedSchema> DerivedSchemaTO getDerivedSchemaTO(\n             T derivedSchema) {\n "},{"sha":"8f8054a4de6ee79f5e53037551af1166d99e2f36","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":75,"deletions":9,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -14,17 +14,24 @@\n  */\n package org.syncope.core.rest.data;\n \n+import java.util.Iterator;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.syncope.client.to.SchemaTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttributeValue;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.validation.UniqueValueException;\n+import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n public class SchemaDataBinder {\n@@ -44,12 +51,11 @@ public SchemaDataBinder(SchemaDAO schemaDAO,\n         this.derivedSchemaDAO = derivedSchemaDAO;\n     }\n \n-    public <T extends AbstractSchema, K extends AbstractDerivedSchema> T createSchema(\n-            SchemaTO schemaTO, Class<T> reference, Class<K> derivedReference)\n-            throws InstantiationException, IllegalAccessException,\n-            UniqueValueException {\n+    private <T extends AbstractSchema, K extends AbstractDerivedSchema> T populateSchema(\n+            T schema,\n+            SchemaTO schemaTO,\n+            Class<K> derivedReference) {\n \n-        T schema = reference.newInstance();\n         BeanUtils.copyProperties(schemaTO, schema, ignoreSchemaProperties);\n \n         AbstractDerivedSchema abstractDerivedSchema = null;\n@@ -64,18 +70,78 @@ public <T extends AbstractSchema, K extends AbstractDerivedSchema> T createSchem\n             }\n         }\n \n-        // Everything went out fine, we can flush to the database\n-        schema = schemaDAO.save(schema);\n-        schemaDAO.getEntityManager().flush();\n         return schema;\n     }\n \n+    public <T extends AbstractSchema, K extends AbstractDerivedSchema> T createSchema(\n+            SchemaTO schemaTO,\n+            Class<T> reference,\n+            Class<K> derivedReference)\n+            throws InstantiationException, IllegalAccessException,\n+            UniqueValueException {\n+\n+        T schema = populateSchema(reference.newInstance(), schemaTO, derivedReference);\n+\n+        // Everything went out fine, we can flush to the database\n+        return schemaDAO.save(schema);\n+    }\n+\n+    public <T extends AbstractSchema, K extends AbstractDerivedSchema> T updateSchema(\n+            SchemaTO schemaTO,\n+            Class<T> reference,\n+            Class<K> derivedReference)\n+            throws InstantiationException, IllegalAccessException,\n+            SyncopeClientCompositeErrorException, UniqueValueException {\n+\n+        T schema = schemaDAO.find(schemaTO.getName(), reference);\n+        if (schema != null) {\n+            schema = populateSchema(schema, schemaTO, derivedReference);\n+\n+            boolean validationExceptionFound = false;\n+            AbstractAttribute attribute = null;\n+            AbstractAttributeValue attributeValue = null;\n+            for (Iterator<? extends AbstractAttribute> attributeItor =\n+                    schema.getAttributes().iterator();\n+                    attributeItor.hasNext() && !validationExceptionFound;) {\n+\n+                attribute = attributeItor.next();\n+                for (Iterator<? extends AbstractAttributeValue> attributeValueItor =\n+                        attribute.getAttributeValues().iterator();\n+                        attributeValueItor.hasNext()\n+                        && !validationExceptionFound;) {\n+\n+                    attributeValue = attributeValueItor.next();\n+                    try {\n+                        schema.getValidator().getValue(\n+                                attributeValue.getValueAsString(),\n+                                attributeValue);\n+                    } catch (Exception e) {\n+                        validationExceptionFound = true;\n+                    }\n+                }\n+            }\n+\n+            if (validationExceptionFound) {\n+                SyncopeClientCompositeErrorException sccee =\n+                        new SyncopeClientCompositeErrorException(\n+                        HttpStatus.BAD_REQUEST);\n+                sccee.addException(new SyncopeClientException(\n+                        SyncopeClientExceptionType.InvalidSchemaUpdate));\n+                throw sccee;\n+            }\n+\n+            // Everything went out fine, we can flush to the database\n+            return schemaDAO.save(schema);\n+        }\n+\n+        return null;\n+    }\n+\n     public <T extends AbstractSchema> SchemaTO getSchemaTO(T schema) {\n         SchemaTO schemaTO = new SchemaTO();\n         BeanUtils.copyProperties(schema, schemaTO, ignoreSchemaProperties);\n \n         for (AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas()) {\n-\n             schemaTO.addDerivedSchema(derivedSchema.getName());\n         }\n         schemaTO.setAttributes(schema.getAttributes().size());"},{"sha":"eaa1e7696f5c2b48fb8efc9b270ed7b1679df1ee","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -245,9 +245,7 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n         }\n \n         // Everything went out fine, we can flush to the database\n-        user = syncopeUserDAO.save(user);\n-        syncopeUserDAO.getEntityManager().flush();\n-        return user;\n+        return syncopeUserDAO.save(user);\n     }\n \n     public UserTO getUserTO(SyncopeUser user) {"},{"sha":"059fe004fd54b149bf506c9354e0dcb7f4fec2ad","filename":"core/src/main/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -16,12 +16,17 @@\n     <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>\n \n+    <!-- pRCSIAM: default content -->\n+    <UserSchema name=\"userId\" type=\"String\" virtual=\"false\"\n+                mandatory=\"true\" multivalue=\"false\" uniquevalue=\"true\"\n+                validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n+\n     <UserSchema name=\"surname\" type=\"String\" virtual=\"false\"\n-                mandatory=\"true\" multivalue=\"false\"/>\n+                mandatory=\"true\" multivalue=\"false\" uniquevalue=\"false\"/>\n     <UserSchema name=\"firstname\" type=\"String\" virtual=\"false\"\n-                mandatory=\"false\" multivalue=\"false\"/>\n+                mandatory=\"false\" multivalue=\"false\" uniquevalue=\"false\"/>\n     <UserSchema name=\"email\" type=\"String\" virtual=\"false\"\n-                mandatory=\"false\" multivalue=\"true\"\n+                mandatory=\"false\" multivalue=\"true\" uniquevalue=\"false\"\n                 validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n \n     <UserDerivedSchema name=\"username\" expression=\"firstname + '.' + surname\"/>"},{"sha":"4e20917465442f83d82d647c9777b5c88c646005","filename":"core/src/test/java/org/syncope/core/test/persistence/AbstractTest.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAbstractTest.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -20,6 +20,7 @@\n import java.sql.ResultSetMetaData;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import javax.persistence.EntityManager;\n import javax.sql.DataSource;\n import org.dbunit.database.DatabaseConfig;\n import org.dbunit.database.DatabaseConnection;\n@@ -44,6 +45,8 @@ public abstract class AbstractTest {\n     protected static final Logger log = LoggerFactory.getLogger(\n             AbstractTest.class);\n     @Autowired\n+    protected EntityManager entityManager;\n+    @Autowired\n     private DataSource dataSource;\n     @Autowired\n     private HsqldbDataTypeFactory dbUnitDataTypeFactory;"},{"sha":"3d012690d8b43a00a517a6e8640d20b79648d5b6","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/DerivedSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FDerivedSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FDerivedSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FDerivedSchemaTest.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -47,7 +47,7 @@ public class DerivedSchemaTest extends AbstractTest {\n     public final void test() {\n         derivedSchemaDAO.delete(\"cn\", UserDerivedSchema.class);\n \n-        derivedSchemaDAO.getEntityManager().flush();\n+        derivedSchemaDAO.flush();\n \n         assertNull(derivedSchemaDAO.find(\"cn\", UserDerivedSchema.class));\n         assertNull(derivedAttributeDAO.find(1000L, UserDerivedAttribute.class));"},{"sha":"78e958f1c52da2451c3d07886ee59a930119c5c6","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/ResourceTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -87,7 +87,7 @@ public final void save() {\n \n         assertNotNull(actual);\n \n-        resourceDAO.getEntityManager().flush();\n+        resourceDAO.flush();\n \n         // connector should be updated\n         connector = connectorInstanceDAO.find(100L);\n@@ -167,7 +167,7 @@ public final void delete() {\n         resourceDAO.delete(resource.getName());\n \n         // close the transaction\n-        resourceDAO.getEntityManager().flush();\n+        resourceDAO.flush();\n \n         // resource must be removed\n         Resource actual = resourceDAO.find(\"ws-target-resource-2\");"},{"sha":"564c72c6a29ca96415753f476157fd7ee6c5c342","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/RoleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FRoleTest.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -50,7 +50,7 @@ public class RoleTest extends AbstractTest {\n     public final void test() {\n         syncopeRoleDAO.delete(2L);\n \n-        syncopeRoleDAO.getEntityManager().flush();\n+        syncopeRoleDAO.flush();\n \n         assertNull(syncopeRoleDAO.find(2L));\n         assertTrue(entitlementDAO.find(\"base\").getRoles().size() == 1);"},{"sha":"a606ca768a05d81ed205e25cfa67d8be70c96e31","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/SchemaMappingTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -56,7 +56,7 @@ public final void save() throws ClassNotFoundException {\n         resource.addMapping(actual);\n \n         // close the transaction\n-        schemaMappingDAO.getEntityManager().flush();\n+        schemaMappingDAO.flush();\n \n         assertNotNull(actual);\n \n@@ -100,7 +100,7 @@ public final void delete() {\n         schemaMappingDAO.delete(schema.getId());\n \n         // close the transaction\n-        schemaMappingDAO.getEntityManager().flush();\n+        schemaMappingDAO.flush();\n \n         SchemaMapping actual = schemaMappingDAO.find(100L);\n "},{"sha":"ccd609b613c060e4a8716c302ccec1c1b3cd9a2f","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/SchemaTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -51,7 +51,7 @@ public final void test1() {\n         // 2\n         schemaDAO.delete(\"surname\", UserSchema.class);\n \n-        schemaDAO.getEntityManager().flush();\n+        schemaDAO.flush();\n \n         // 1\n         assertNull(schemaDAO.find(\"username\", UserSchema.class));\n@@ -70,7 +70,7 @@ public final void test1() {\n     public final void test2() {\n         schemaDAO.delete(\"email\", UserSchema.class);\n \n-        schemaDAO.getEntityManager().flush();\n+        schemaDAO.flush();\n \n         assertNull(schemaDAO.find(\"email\", UserSchema.class));\n         assertNull(schemaMappingDAO.find(100L));"},{"sha":"30034dc2ea81c11409cd22ef675262f68ac617ec","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/UserTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FUserTest.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -47,7 +47,7 @@ public class UserTest extends AbstractTest {\n     public final void test() {\n         syncopeUserDAO.delete(4L);\n \n-        syncopeUserDAO.getEntityManager().flush();\n+        syncopeUserDAO.flush();\n \n         assertNull(syncopeUserDAO.find(4L));\n         assertNull(attributeDAO.find(550L, UserAttribute.class));"},{"sha":"ebb783874b35a9c8d0774eafa509ab64a6b9f583","filename":"core/src/test/java/org/syncope/core/test/rest/DerivedSchemaTestITCase.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FDerivedSchemaTestITCase.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.rest;\n+\n+import org.syncope.client.to.DerivedSchemaTOs;\n+import org.syncope.client.to.DerivedSchemaTO;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+public class DerivedSchemaTestITCase extends AbstractTestITCase {\n+\n+    @Test\n+    public void derivedList() {\n+        DerivedSchemaTOs derivedSchemas =\n+                restTemplate.getForObject(BASE_URL\n+                + \"derivedSchema/user/list.json\", DerivedSchemaTOs.class);\n+        assertFalse(derivedSchemas.getDerivedSchemas().isEmpty());\n+    }\n+\n+    @Test\n+    public void derivedRead() {\n+        DerivedSchemaTO derivedSchemaTO = restTemplate.getForObject(BASE_URL\n+                + \"derivedSchema/user/read/cn.json\", DerivedSchemaTO.class);\n+        assertNotNull(derivedSchemaTO);\n+    }\n+}"},{"sha":"37bf05eebd843d9e6ad25b47b49a27638b6b247a","filename":"core/src/test/java/org/syncope/core/test/rest/SchemaTestITCase.java","status":"modified","additions":22,"deletions":21,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4efcf31894f9347fcbf0b112b60da1e71e8752e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java?ref=4efcf31894f9347fcbf0b112b60da1e71e8752e0","patch":"@@ -14,26 +14,19 @@\n  */\n package org.syncope.core.test.rest;\n \n+import org.syncope.types.SyncopeClientExceptionType;\n+import org.syncope.client.validation.SyncopeClientException;\n import org.springframework.web.client.HttpClientErrorException;\n-import org.syncope.client.to.DerivedSchemaTOs;\n-import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n-import org.syncope.client.to.DerivedSchemaTO;\n import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.to.SchemaTOs;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.types.SchemaType;\n import static org.junit.Assert.*;\n \n public class SchemaTestITCase extends AbstractTestITCase {\n \n-    @Autowired\n-    SchemaDAO schemaDAO;\n-    @Autowired\n-    DerivedSchemaDAO derivedSchemaDAO;\n-\n     @Test\n     public void create() {\n         SchemaTO schemaTO = new SchemaTO();\n@@ -72,17 +65,25 @@ public void list() {\n     }\n \n     @Test\n-    public void derivedList() {\n-        DerivedSchemaTOs derivedSchemas =\n-                restTemplate.getForObject(BASE_URL\n-                + \"derivedSchema/user/list.json\", DerivedSchemaTOs.class);\n-        assertFalse(derivedSchemas.getDerivedSchemas().isEmpty());\n-    }\n+    public void update() {\n+        SchemaTO schemaTO = restTemplate.getForObject(BASE_URL\n+                + \"schema/role/read/icon.json\", SchemaTO.class);\n+        assertNotNull(schemaTO);\n \n-    @Test\n-    public void derivedRead() {\n-        DerivedSchemaTO derivedSchemaTO = restTemplate.getForObject(BASE_URL\n-                + \"derivedSchema/user/read/cn.json\", DerivedSchemaTO.class);\n-        assertNotNull(derivedSchemaTO);\n+        schemaTO.setVirtual(true);\n+        SchemaTO updatedTO = restTemplate.postForObject(BASE_URL\n+                + \"schema/role/update\", schemaTO, SchemaTO.class);\n+        assertEquals(schemaTO, updatedTO);\n+\n+        updatedTO.setType(SchemaType.Date);\n+        SyncopeClientException syncopeClientException = null;\n+        try {\n+            restTemplate.postForObject(BASE_URL\n+                    + \"schema/role/update\", updatedTO, SchemaTO.class);\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            syncopeClientException = e.getException(\n+                    SyncopeClientExceptionType.InvalidSchemaUpdate);\n+        }\n+        assertNotNull(syncopeClientException);\n     }\n }"}]}