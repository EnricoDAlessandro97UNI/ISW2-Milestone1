{"sha":"bc010c158dcb41fb08b4666e630a81eda1627593","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJjMDEwYzE1OGRjYjQxZmIwOGI0NjY2ZTYzMGE4MWVkYTE2Mjc1OTM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-23T16:42:04Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-23T16:42:04Z"},"message":"Preparing modifications for SYNCOPE-122 and SYNCOPE-136 (also fixed void call to UserService.setStatus - now removed\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1437557 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0576da6a60c171860db9b0108f263b42cfedc597","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0576da6a60c171860db9b0108f263b42cfedc597"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bc010c158dcb41fb08b4666e630a81eda1627593","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bc010c158dcb41fb08b4666e630a81eda1627593","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bc010c158dcb41fb08b4666e630a81eda1627593","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bc010c158dcb41fb08b4666e630a81eda1627593/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0fe3038516467218929285df625b3256b2141eef","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0fe3038516467218929285df625b3256b2141eef","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0fe3038516467218929285df625b3256b2141eef"}],"stats":{"total":728,"additions":358,"deletions":370},"files":[{"sha":"658e938670cb66ffdc4b8c2f863e29ca2694d0a0","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserServiceProxy.java","status":"modified","additions":42,"deletions":19,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -20,10 +20,10 @@\n \n import java.util.Arrays;\n import java.util.List;\n-import org.apache.syncope.common.mod.StatusMod;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.UserService;\n+import org.apache.syncope.common.to.PropagationRequestTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n import org.springframework.web.client.RestTemplate;\n@@ -113,8 +113,15 @@ public UserTO submitForm(final WorkflowFormTO form) {\n \n     @Override\n     public UserTO activate(final long userId, final String token) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/activate/{userId}?token=\" + token, UserTO.class,\n-                userId);\n+        return getRestTemplate().getForObject(baseUrl + \"user/activate/{userId}?token=\" + token, UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO activate(final long userId, final String token,\n+            final PropagationRequestTO propagationRequestTO) {\n+\n+        return getRestTemplate().postForObject(baseUrl + \"user/activate/{userId}?token=\" + token, propagationRequestTO,\n+                UserTO.class, userId);\n     }\n \n     @Override\n@@ -123,25 +130,46 @@ public UserTO activateByUsername(final String username, final String token) {\n                 UserTO.class, username);\n     }\n \n+    @Override\n+    public UserTO activateByUsername(final String username, final String token,\n+            final PropagationRequestTO propagationRequestTO) {\n+\n+        return getRestTemplate().postForObject(baseUrl + \"user/activateByUsername/{username}.json?token=\" + token,\n+                propagationRequestTO, UserTO.class, username);\n+    }\n+\n     @Override\n     public UserTO suspend(final long userId) {\n         return getRestTemplate().getForObject(baseUrl + \"user/suspend/{userId}\", UserTO.class, userId);\n     }\n \n     @Override\n-    public UserTO reactivate(final long userId) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/reactivate/{userId}\", UserTO.class, userId);\n+    public UserTO suspend(final long userId, final PropagationRequestTO propagationRequestTO) {\n+        return getRestTemplate().postForObject(baseUrl + \"user/suspend/{userId}\", propagationRequestTO,\n+                UserTO.class, userId);\n     }\n \n     @Override\n-    public UserTO reactivate(long userId, String query) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/reactivate/\" + userId + query, UserTO.class);\n+    public UserTO suspendByUsername(final String username) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/suspendByUsername/{username}.json\",\n+                UserTO.class, username);\n     }\n \n     @Override\n-    public UserTO suspendByUsername(final String username) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/suspendByUsername/{username}.json\", UserTO.class,\n-                username);\n+    public UserTO suspendByUsername(final String username, final PropagationRequestTO propagationRequestTO) {\n+        return getRestTemplate().postForObject(baseUrl + \"user/suspendByUsername/{username}.json\", propagationRequestTO,\n+                UserTO.class, username);\n+    }\n+\n+    @Override\n+    public UserTO reactivate(final long userId) {\n+        return getRestTemplate().getForObject(baseUrl + \"user/reactivate/{userId}\", UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO reactivate(final long userId, final PropagationRequestTO propagationRequestTO) {\n+        return getRestTemplate().postForObject(baseUrl + \"user/reactivate/{userId}\", propagationRequestTO,\n+                UserTO.class, userId);\n     }\n \n     @Override\n@@ -151,8 +179,9 @@ public UserTO reactivateByUsername(final String username) {\n     }\n \n     @Override\n-    public UserTO suspend(final long userId, final String query) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/suspend/\" + userId + query, UserTO.class);\n+    public UserTO reactivateByUsername(final String username, final PropagationRequestTO propagationRequestTO) {\n+        return getRestTemplate().postForObject(baseUrl + \"user/reactivateByUsername/{username}.json\",\n+                propagationRequestTO, UserTO.class, username);\n     }\n \n     @Override\n@@ -174,12 +203,6 @@ public List<UserTO> search(final NodeCond searchCondition, final int page, final\n \n     @Override\n     public int searchCount(final NodeCond searchCondition) {\n-        return getRestTemplate()\n-                .postForObject(baseUrl + \"user/search/count.json\", searchCondition, Integer.class);\n-    }\n-\n-    @Override\n-    public UserTO setStatus(final Long userId, final StatusMod statusUpdate) {\n-        return null; // Not used in old REST API\n+        return getRestTemplate().postForObject(baseUrl + \"user/search/count.json\", searchCondition, Integer.class);\n     }\n }"},{"sha":"c18fc4ed8595bd38e855fac3b7599ef205f65c1d","filename":"common/src/main/java/org/apache/syncope/common/mod/StatusMod.java","status":"removed","additions":0,"deletions":121,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0fe3038516467218929285df625b3256b2141eef/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FStatusMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0fe3038516467218929285df625b3256b2141eef/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FStatusMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FStatusMod.java?ref=0fe3038516467218929285df625b3256b2141eef","patch":"@@ -1,121 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.mod;\r\n-\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-\r\n-import javax.xml.bind.annotation.XmlElement;\r\n-import javax.xml.bind.annotation.XmlElementWrapper;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-\r\n-@XmlType\r\n-@XmlRootElement\r\n-public class StatusMod extends AbstractBaseBean {\r\n-\r\n-    public enum Status {\r\n-        ACTIVATE, REACTIVATE, SUSPEND;\r\n-    }\r\n-\r\n-    public StatusMod(long id, Status status) {\r\n-        this.id = id;\r\n-        this.status = status;\r\n-    }\r\n-\r\n-    public StatusMod() {\r\n-    }\r\n-\r\n-    private Status status;\r\n-\r\n-    private String token;\r\n-\r\n-    private static final long serialVersionUID = 1338094801957616986L;\r\n-\r\n-    private long id;\r\n-\r\n-    private boolean updateInternal = true;\r\n-\r\n-    private boolean updateRemote = true;\r\n-\r\n-    private final Set<String> excludeResources = new HashSet<String>();\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public boolean isUpdateInternal() {\r\n-        return updateInternal;\r\n-    }\r\n-\r\n-    public void setUpdateInternal(boolean updateInternal) {\r\n-        this.updateInternal = updateInternal;\r\n-    }\r\n-\r\n-    public boolean isUpdateRemote() {\r\n-        return updateRemote;\r\n-    }\r\n-\r\n-    public void setUpdateRemote(boolean updateRemote) {\r\n-        this.updateRemote = updateRemote;\r\n-    }\r\n-\r\n-    @XmlElementWrapper(name = \"excludeResources\")\r\n-    @XmlElement(name = \"resource\")\r\n-    public Set<String> getExcludeResources() {\r\n-        return excludeResources;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the status\r\n-     */\r\n-    public Status getStatus() {\r\n-        return status;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param status\r\n-     *            the status to set\r\n-     */\r\n-    public void setStatus(Status status) {\r\n-        this.status = status;\r\n-    }\r\n-\r\n-    /**\r\n-     * @return the token\r\n-     */\r\n-    public String getToken() {\r\n-        return token;\r\n-    }\r\n-\r\n-    /**\r\n-     * @param token\r\n-     *            the token to set\r\n-     */\r\n-    public void setToken(String token) {\r\n-        this.token = token;\r\n-    }\r\n-\r\n-}\r"},{"sha":"c87cdc103f9b944a6fa27c776ee2e9cb83ab36a7","filename":"common/src/main/java/org/apache/syncope/common/services/UserService.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.common.services;\n \n import java.util.List;\n-\n import javax.ws.rs.DELETE;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n@@ -28,10 +27,9 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.QueryParam;\n-\n-import org.apache.syncope.common.mod.StatusMod;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.PropagationRequestTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n \n@@ -40,8 +38,12 @@ public interface UserService {\n \n     UserTO activate(long userId, String token);\n \n+    UserTO activate(long userId, String token, PropagationRequestTO propagationRequestTO);\n+\n     UserTO activateByUsername(String username, String token);\n \n+    UserTO activateByUsername(String username, String token, PropagationRequestTO propagationRequestTO);\n+\n     @POST\n     @Path(\"workflow/task/{taskId}/claim\")\n     WorkflowFormTO claimForm(@PathParam(\"taskId\") String taskId);\n@@ -72,15 +74,16 @@ public interface UserService {\n     List<UserTO> list();\n \n     @GET\n-    List<UserTO> list(@QueryParam(\"page\") int page,\n-            @QueryParam(\"size\") @DefaultValue(\"25\") int size);\n+    List<UserTO> list(@QueryParam(\"page\") int page, @QueryParam(\"size\") @DefaultValue(\"25\") int size);\n \n     UserTO reactivate(long userId);\n \n-    UserTO reactivate(long userId, String query);\n+    UserTO reactivate(long userId, PropagationRequestTO propagationRequestTO);\n \n     UserTO reactivateByUsername(String username);\n \n+    UserTO reactivateByUsername(String username, PropagationRequestTO propagationRequestTO);\n+\n     @GET\n     @Path(\"{userId}\")\n     UserTO read(@PathParam(\"userId\") Long userId);\n@@ -103,20 +106,18 @@ List<UserTO> search(NodeCond searchCondition, @QueryParam(\"page\") int page,\n     @Path(\"search/count\")\n     int searchCount(NodeCond searchCondition);\n \n-    @POST\n-    @Path(\"user/{userId}/status\")\n-    public abstract UserTO setStatus(@PathParam(\"userId\") Long userId, StatusMod statusUpdate);\n-\n     @POST\n     @Path(\"workflow/form\")\n     UserTO submitForm(WorkflowFormTO form);\n \n     UserTO suspend(long userId);\n \n-    UserTO suspend(long userId, String query);\n+    UserTO suspend(long userId, PropagationRequestTO propagationRequestTO);\n \n     UserTO suspendByUsername(String username);\n \n+    UserTO suspendByUsername(String username, PropagationRequestTO propagationRequestTO);\n+\n     @POST\n     @Path(\"{userId}\")\n     UserTO update(@PathParam(\"userId\") Long userId, UserMod userMod);"},{"sha":"2d6e060b91dedc821412a1f144920c19db4ae7b5","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractAttributableTO.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -39,15 +39,15 @@ public abstract class AbstractAttributableTO extends ConnObjectTO {\n \r\n     private Set<String> resources;\r\n \r\n-    private List<PropagationTO> propagationTOs;\r\n+    private List<PropagationStatusTO> propagationStatusTOs;\r\n \r\n     protected AbstractAttributableTO() {\r\n         super();\r\n \r\n         derivedAttributes = new ArrayList<AttributeTO>();\r\n         virtualAttributes = new ArrayList<AttributeTO>();\r\n         resources = new HashSet<String>();\r\n-        propagationTOs = new ArrayList<PropagationTO>();\r\n+        propagationStatusTOs = new ArrayList<PropagationStatusTO>();\r\n     }\r\n \r\n     public long getId() {\r\n@@ -141,33 +141,33 @@ public void setResources(final Set<String> resources) {\n         this.resources = resources;\r\n     }\r\n \r\n-    public boolean addPropagationTO(final PropagationTO status) {\r\n-        return propagationTOs.add(status);\r\n+    public boolean addPropagationTO(final PropagationStatusTO status) {\r\n+        return propagationStatusTOs.add(status);\r\n     }\r\n \r\n     public boolean removePropagationTO(final String resource) {\r\n-        if (resource != null && getPropagationTOs().isEmpty()) {\r\n-            final List<PropagationTO> toBeRemoved = new ArrayList<PropagationTO>();\r\n+        if (resource != null && getPropagationStatusTOs().isEmpty()) {\r\n+            final List<PropagationStatusTO> toBeRemoved = new ArrayList<PropagationStatusTO>();\r\n \r\n-            for (PropagationTO propagationTO : getPropagationTOs()) {\r\n-                if (resource.equals(propagationTO.getResourceName())) {\r\n+            for (PropagationStatusTO propagationTO : getPropagationStatusTOs()) {\r\n+                if (resource.equals(propagationTO.getResource())) {\r\n                     toBeRemoved.add(propagationTO);\r\n                 }\r\n             }\r\n \r\n-            return propagationTOs.removeAll(toBeRemoved);\r\n+            return propagationStatusTOs.removeAll(toBeRemoved);\r\n         }\r\n         return false;\r\n     }\r\n \r\n-    public List<PropagationTO> getPropagationTOs() {\r\n-        return propagationTOs;\r\n+    public List<PropagationStatusTO> getPropagationStatusTOs() {\r\n+        return propagationStatusTOs;\r\n     }\r\n \r\n-    public void setPropagationTOs(final List<PropagationTO> propagationTOs) {\r\n-        if (this.propagationTOs != propagationTOs) {\r\n-            this.propagationTOs.clear();\r\n-            this.propagationTOs.addAll(propagationTOs);\r\n+    public void setPropagationStatusTOs(final List<PropagationStatusTO> propagationStatusTOs) {\r\n+        if (this.propagationStatusTOs != propagationStatusTOs) {\r\n+            this.propagationStatusTOs.clear();\r\n+            this.propagationStatusTOs.addAll(propagationStatusTOs);\r\n         }\r\n     }\r\n }\r"},{"sha":"931f91554a86536a6faa6f01a717b7f2613e5e3d","filename":"common/src/main/java/org/apache/syncope/common/to/MembershipTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -66,7 +66,7 @@ public void setResources(Set<String> resources) {\n     }\r\n \r\n     @Override\r\n-    public boolean addPropagationTO(PropagationTO status) {\r\n+    public boolean addPropagationTO(PropagationStatusTO status) {\r\n         return false;\r\n     }\r\n \r\n@@ -76,11 +76,11 @@ public boolean removePropagationTO(String resource) {\n     }\r\n \r\n     @Override\r\n-    public List<PropagationTO> getPropagationTOs() {\r\n-        return Collections.<PropagationTO>emptyList();\r\n+    public List<PropagationStatusTO> getPropagationStatusTOs() {\r\n+        return Collections.<PropagationStatusTO>emptyList();\r\n     }\r\n \r\n     @Override\r\n-    public void setPropagationTOs(List<PropagationTO> propagationTOs) {\r\n+    public void setPropagationStatusTOs(List<PropagationStatusTO> propagationTOs) {\r\n     }\r\n }\r"},{"sha":"bd2b94985e69a99c071d08b18830f2ef392d1de9","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationRequestTO.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationRequestTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationRequestTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationRequestTO.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+/**\n+ * Propagation request on internal storage or on 0+ external resources.\n+ */\n+public class PropagationRequestTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 7601716025754543004L;\n+\n+    /**\n+     * External resources propagation is requested to.\n+     */\n+    private final Set<String> resources;\n+\n+    /**\n+     * Whether update should be performed on internal storage.\n+     */\n+    private boolean onSyncope;\n+\n+    public PropagationRequestTO() {\n+        super();\n+\n+        this.resources = new HashSet<String>();\n+    }\n+\n+    public boolean isOnSyncope() {\n+        return onSyncope;\n+    }\n+\n+    public void setOnSyncope(final boolean onSyncope) {\n+        this.onSyncope = onSyncope;\n+    }\n+\n+    public Set<String> getResources() {\n+        return resources;\n+    }\n+\n+    public boolean addResource(final String resource) {\n+        return this.resources.add(resource);\n+    }\n+\n+    public boolean removeResource(final String resource) {\n+        return this.resources.remove(resource);\n+    }\n+\n+    public void setResources(final Set<String> resources) {\n+        if (this.resources != resources) {\n+            this.resources.clear();\n+            if (resources != null && !resources.isEmpty()) {\n+                this.resources.addAll(resources);\n+            }\n+        }\n+    }\n+}"},{"sha":"17f7f8999a5f5831a6ab85eda4642b3bd48b3ef8","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationStatusTO.java","status":"renamed","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationStatusTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationStatusTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationStatusTO.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -24,7 +24,7 @@\n /**\r\n  * Single propagation status.\r\n  */\r\n-public class PropagationTO extends AbstractBaseBean {\r\n+public class PropagationStatusTO extends AbstractBaseBean {\r\n \r\n     /**\r\n      * Serial version ID.\r\n@@ -44,7 +44,7 @@ public class PropagationTO extends AbstractBaseBean {\n     /**\r\n      * Propagated resource name.\r\n      */\r\n-    private String resourceName;\r\n+    private String resource;\r\n \r\n     /**\r\n      * Propagation task execution status.\r\n@@ -92,23 +92,23 @@ public void setBeforeObj(final ConnObjectTO beforeObj) {\n      *\r\n      * @return resource name.\r\n      */\r\n-    public String getResourceName() {\r\n-        return resourceName;\r\n+    public String getResource() {\r\n+        return resource;\r\n     }\r\n \r\n     /**\r\n      * Resource name setter.\r\n      *\r\n-     * @param resourceName resource name.\r\n+     * @param resource resource name\r\n      */\r\n-    public void setResourceName(final String resourceName) {\r\n-        this.resourceName = resourceName;\r\n+    public void setResource(final String resource) {\r\n+        this.resource = resource;\r\n     }\r\n \r\n     /**\r\n      * Propagation execution status getter.\r\n      *\r\n-     * @return status.\r\n+     * @return status\r\n      */\r\n     public PropagationTaskExecStatus getStatus() {\r\n         return status;\r\n@@ -117,7 +117,7 @@ public PropagationTaskExecStatus getStatus() {\n     /**\r\n      * Propagation execution status setter.\r\n      *\r\n-     * @param status propagation execution status.\r\n+     * @param status propagation execution status\r\n      */\r\n     public void setStatus(final PropagationTaskExecStatus status) {\r\n         this.status = status;\r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/PropagationTO.java"},{"sha":"537f1763eda96669d35d25ea95e55e482e3f33fc","filename":"console/src/main/java/org/apache/syncope/console/pages/ResultStatusModalPage.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -24,11 +24,10 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.to.ConnObjectTO;\n-import org.apache.syncope.common.to.PropagationTO;\n+import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n@@ -104,13 +103,13 @@ public ResultStatusModalPage(final ModalWindow window, final UserModalPage.Mode\n \n         if (mode == UserModalPage.Mode.ADMIN) {\n             // add Syncope propagation status\n-            PropagationTO syncope = new PropagationTO();\n-            syncope.setResourceName(\"Syncope\");\n+            PropagationStatusTO syncope = new PropagationStatusTO();\n+            syncope.setResource(\"Syncope\");\n             syncope.setStatus(PropagationTaskExecStatus.SUCCESS);\n \n-            List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n+            List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n             propagations.add(syncope);\n-            propagations.addAll(attributable.getPropagationTOs());\n+            propagations.addAll(attributable.getPropagationStatusTOs());\n \n             fragment.add(new Label(\"info\",\n                     ((attributable instanceof UserTO) && ((UserTO) attributable).getUsername() != null)\n@@ -119,13 +118,13 @@ public ResultStatusModalPage(final ModalWindow window, final UserModalPage.Mode\n                     ? ((RoleTO) attributable).getName()\n                     : String.valueOf(attributable.getId())));\n \n-            final ListView<PropagationTO> propRes = new ListView<PropagationTO>(\"resources\", propagations) {\n+            final ListView<PropagationStatusTO> propRes = new ListView<PropagationStatusTO>(\"resources\", propagations) {\n \n                 private static final long serialVersionUID = -1020475259727720708L;\n \n                 @Override\n-                protected void populateItem(final ListItem<PropagationTO> item) {\n-                    final PropagationTO propTO = (PropagationTO) item.getDefaultModelObject();\n+                protected void populateItem(final ListItem<PropagationStatusTO> item) {\n+                    final PropagationStatusTO propTO = (PropagationStatusTO) item.getDefaultModelObject();\n \n                     final ListView attributes = getConnObjectView(propTO);\n \n@@ -139,7 +138,7 @@ protected void populateItem(final ListItem<PropagationTO> item) {\n                     item.add(attrhead);\n                     item.add(attributes);\n \n-                    attrhead.add(new Label(\"resource\", propTO.getResourceName()));\n+                    attrhead.add(new Label(\"resource\", propTO.getResource()));\n \n                     attrhead.add(new Label(\"propagation\", propTO.getStatus() == null\n                             ? \"UNDEFINED\" : propTO.getStatus().toString()));\n@@ -199,7 +198,7 @@ public void onClick(final AjaxRequestTarget target) {\n      * @param propTO propagation TO.\n      * @return list view.\n      */\n-    private ListView getConnObjectView(final PropagationTO propTO) {\n+    private ListView getConnObjectView(final PropagationStatusTO propTO) {\n         final ConnObjectTO before = propTO.getBeforeObj();\n         final ConnObjectTO after = propTO.getAfterObj();\n "},{"sha":"24bd2a66bf68221a7517f2f7b2f4607c8b5035d7","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRestClient.java","status":"modified","additions":15,"deletions":28,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -19,14 +19,12 @@\n package org.apache.syncope.console.rest;\n \n import java.util.List;\n-\n-import org.apache.syncope.common.mod.StatusMod;\n-import org.apache.syncope.common.mod.StatusMod.Status;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.ResourceService;\n import org.apache.syncope.common.services.UserService;\n import org.apache.syncope.common.to.ConnObjectTO;\n+import org.apache.syncope.common.to.PropagationRequestTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n@@ -110,39 +108,28 @@ public ConnObjectTO getRemoteObject(final String resourceName, final String obje\n         return getService(ResourceService.class).getConnector(resourceName, AttributableType.USER, objectId);\n     }\n \n-    public UserTO reactivate(final long userId, final List<StatusBean> statuses) {\n-        return enable(userId, statuses, true);\n-    }\n-\n-    public UserTO suspend(final long userId, final List<StatusBean> statuses) {\n-        return enable(userId, statuses, false);\n-    }\n-\n-    private UserTO enable(final long userId, final List<StatusBean> statuses, final boolean enable) {\n-\n-        StatusMod statusMod = new StatusMod();\n-        statusMod.setId(userId);\n-\n-        statusMod.setStatus(enable\n-                ? Status.REACTIVATE\n-                : Status.SUSPEND);\n-\n-        // perform on resource if and only if resources have been speciofied\n-        statusMod.setUpdateRemote(!statuses.isEmpty());\n-\n-        // perform on syncope if and only if it has been requested\n-        statusMod.setUpdateInternal(false);\n+    private PropagationRequestTO getPropagationRequestTO(final List<StatusBean> statuses, final boolean enable) {\n+        PropagationRequestTO propagationRequestTO = new PropagationRequestTO();\n \n         for (StatusBean status : statuses) {\n             if ((enable && !status.getStatus().isActive()) || (!enable && status.getStatus().isActive())) {\n+\n                 if (\"Syncope\".equals(status.getResourceName())) {\n-                    statusMod.setUpdateInternal(true);\n+                    propagationRequestTO.setOnSyncope(true);\n                 } else {\n-                    statusMod.getExcludeResources().add(status.getResourceName());\n+                    propagationRequestTO.addResource(status.getResourceName());\n                 }\n             }\n         }\n \n-        return getService(UserService.class).setStatus(userId, statusMod);\n+        return propagationRequestTO;\n+    }\n+\n+    public UserTO suspend(final long userId, final List<StatusBean> statuses) {\n+        return getService(UserService.class).suspend(userId, getPropagationRequestTO(statuses, false));\n+    }\n+\n+    public UserTO reactivate(final long userId, final List<StatusBean> statuses) {\n+        return getService(UserService.class).reactivate(userId, getPropagationRequestTO(statuses, true));\n     }\n }"},{"sha":"59ab03a044e0bdbc278ab6020e7ff0e5a1161845","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/DefaultPropagationHandler.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDefaultPropagationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDefaultPropagationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDefaultPropagationHandler.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -19,8 +19,7 @@\n package org.apache.syncope.core.propagation.impl;\n \n import java.util.List;\n-\n-import org.apache.syncope.common.to.PropagationTO;\n+import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.propagation.PropagationHandler;\n@@ -30,19 +29,21 @@ public class DefaultPropagationHandler implements PropagationHandler {\n \n     private final ConnObjectUtil connObjectUtil;\n \n-    private final List<PropagationTO> propagations;\n+    private final List<PropagationStatusTO> propagations;\n+\n+    public DefaultPropagationHandler(final ConnObjectUtil connObjectUtil,\n+            final List<PropagationStatusTO> propagations) {\n \n-    public DefaultPropagationHandler(final ConnObjectUtil connObjectUtil, final List<PropagationTO> propagations) {\n         this.connObjectUtil = connObjectUtil;\n         this.propagations = propagations;\n     }\n \n     @Override\n-    public void handle(final String resourceName, final PropagationTaskExecStatus executionStatus,\n+    public void handle(final String resource, final PropagationTaskExecStatus executionStatus,\n             final ConnectorObject beforeObj, final ConnectorObject afterObj) {\n \n-        final PropagationTO propagation = new PropagationTO();\n-        propagation.setResourceName(resourceName);\n+        final PropagationStatusTO propagation = new PropagationStatusTO();\n+        propagation.setResource(resource);\n         propagation.setStatus(executionStatus);\n \n         if (beforeObj != null) {"},{"sha":"f02646b59f30b89b2b2c3377f67a635d18c8b670","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":1,"deletions":24,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -20,9 +20,7 @@\n \n import java.util.List;\n import java.util.Set;\n-\n import javax.servlet.http.HttpServletResponse;\n-\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.AttributableType;\n@@ -40,10 +38,8 @@\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.propagation.ConnectorFactory;\n import org.apache.syncope.core.propagation.SyncopeConnector;\n-import org.apache.syncope.core.propagation.impl.ConnectorFacadeProxy;\n import org.apache.syncope.core.rest.data.ResourceDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n-import org.apache.syncope.core.util.ConnBundleManager;\n import org.apache.syncope.core.util.NotFoundException;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n@@ -60,21 +56,6 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n-import org.identityconnectors.framework.common.objects.Attribute;\n-import org.identityconnectors.framework.common.objects.AttributeUtil;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.Name;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.Uid;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.servlet.ModelAndView;\n \n @Controller\n@@ -105,9 +86,6 @@ public class ResourceController extends AbstractController {\n     @Autowired\n     private ConnectorFactory connLoader;\n \n-    @Autowired\n-    private ConnBundleManager bundleManager;\n-\n     @PreAuthorize(\"hasRole('RESOURCE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public ResourceTO create(final HttpServletResponse response, @RequestBody final ResourceTO resourceTO)\n@@ -231,16 +209,15 @@ public ConnObjectTO getObject(@PathVariable(\"resourceName\") final String resourc\n         }\n \n         if (AttributableType.MEMBERSHIP == type) {\n+            throw new IllegalArgumentException(\"getObject() not supported for MEMBERSHIP\");\n         }\n-\n         AttributableUtil attrUtil = AttributableUtil.getInstance(type);\n         ObjectClass objectClass = AttributableType.USER == type ? ObjectClass.ACCOUNT : ObjectClass.GROUP;\n \n         final SyncopeConnector connector = connLoader.getConnector(resource);\n \n         final ConnectorObject connectorObject = connector.getObject(objectClass, new Uid(objectId),\n                 connector.getOperationOptions(attrUtil.getMappingItems(resource)));\n-\n         if (connectorObject == null) {\n             throw new NotFoundException(\"Object \" + objectId + \" not found on resource \" + resourceName);\n         }"},{"sha":"91a6055b70bb7a90b96c94fd83a247974feff310","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -25,7 +25,7 @@\n import javax.servlet.http.HttpServletResponse;\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.to.PropagationTO;\n+import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AuditElements;\n@@ -285,11 +285,11 @@ public RoleTO create(final HttpServletResponse response, @RequestBody final Role\n \n         List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created, roleTO.getVirtualAttributes());\n \n-        final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n+        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n         taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n \n         final RoleTO savedTO = dataBinder.getRoleTO(created.getResult());\n-        savedTO.setPropagationTOs(propagations);\n+        savedTO.setPropagationStatusTOs(propagations);\n \n         LOG.debug(\"About to return created role\\n{}\", savedTO);\n \n@@ -314,11 +314,11 @@ public RoleTO update(@RequestBody final RoleMod roleMod)\n         List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n                 roleMod.getVirtualAttributesToBeRemoved(), roleMod.getVirtualAttributesToBeUpdated());\n \n-        final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n+        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n         taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n \n         final RoleTO updatedTO = dataBinder.getRoleTO(updated.getResult());\n-        updatedTO.setPropagationTOs(propagations);\n+        updatedTO.setPropagationStatusTOs(propagations);\n \n         auditManager.audit(Category.role, RoleSubCategory.update, Result.success,\n                 \"Successfully updated role: \" + role.getId());\n@@ -339,7 +339,7 @@ public RoleTO delete(@PathVariable(\"roleId\") final Long roleId)\n \n         List<PropagationTask> tasks = propagationManager.getRoleDeleteTaskIds(roleId);\n \n-        final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n+        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n         taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n \n         rwfAdapter.delete(roleId);"},{"sha":"3f9e2b731e30b7d5d0ea7dd4c4086bc2e2f021c9","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":109,"deletions":68,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -25,13 +25,12 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import javax.servlet.http.HttpServletResponse;\n-\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.MembershipTO;\n-import org.apache.syncope.common.to.PropagationTO;\n+import org.apache.syncope.common.to.PropagationRequestTO;\n+import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n import org.apache.syncope.common.types.AttributableType;\n@@ -84,37 +83,37 @@ public class UserController {\n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(UserController.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(UserController.class);\n \n     @Autowired\n-    private AuditManager auditManager;\n+    protected AuditManager auditManager;\n \n     @Autowired\n-    private UserDAO userDAO;\n+    protected UserDAO userDAO;\n \n     @Autowired\n-    private AttributableSearchDAO searchDAO;\n+    protected AttributableSearchDAO searchDAO;\n \n     @Autowired\n-    private UserDataBinder dataBinder;\n+    protected UserDataBinder dataBinder;\n \n     @Autowired\n-    private UserWorkflowAdapter uwfAdapter;\n+    protected UserWorkflowAdapter uwfAdapter;\n \n     @Autowired\n-    private PropagationManager propagationManager;\n+    protected PropagationManager propagationManager;\n \n     @Autowired\n-    private PropagationTaskExecutor taskExecutor;\n+    protected PropagationTaskExecutor taskExecutor;\n \n     @Autowired\n-    private NotificationManager notificationManager;\n+    protected NotificationManager notificationManager;\n \n     /**\n      * ConnectorObject util.\n      */\n     @Autowired\n-    private ConnObjectUtil connObjectUtil;\n+    protected ConnObjectUtil connObjectUtil;\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/verifyPassword/{username}\")\n@@ -176,7 +175,6 @@ public List<UserTO> list() {\n     @RequestMapping(method = RequestMethod.GET, value = \"/list/{page}/{size}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"size\") final int size) {\n-\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n         List<SyncopeUser> users = userDAO.findAll(adminRoleIds, page, size);\n@@ -292,13 +290,13 @@ public UserTO create(final HttpServletResponse response, @RequestBody final User\n         List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n                 created, userTO.getPassword(), userTO.getVirtualAttributes());\n \n-        final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n+        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n         taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n \n         notificationManager.createTasks(created.getResult().getKey(), created.getPerformedTasks());\n \n         final UserTO savedTO = dataBinder.getUserTO(created.getResult().getKey());\n-        savedTO.setPropagationTOs(propagations);\n+        savedTO.setPropagationStatusTOs(propagations);\n \n         LOG.debug(\"About to return created user\\n{}\", savedTO);\n \n@@ -321,13 +319,13 @@ public UserTO update(@RequestBody final UserMod userMod)\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated, userMod.getPassword(),\n                 userMod.getVirtualAttributesToBeRemoved(), userMod.getVirtualAttributesToBeUpdated());\n \n-        final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n+        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n         taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n \n         notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n \n         final UserTO updatedTO = dataBinder.getUserTO(updated.getResult().getKey());\n-        updatedTO.setPropagationTOs(propagations);\n+        updatedTO.setPropagationStatusTOs(propagations);\n \n         auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n                 \"Successfully updated user: \" + updatedTO.getUsername());\n@@ -340,12 +338,21 @@ public UserTO update(@RequestBody final UserMod userMod)\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/activate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n+    public UserTO activate(\n+            @PathVariable(\"userId\") final Long userId,\n+            @RequestParam(required = true) final String token)\n+            throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {\n+\n+        return activate(userId, token, null);\n+    }\n+\n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/activate/{userId}\")\n+    @Transactional(rollbackFor = {Throwable.class})\n     public UserTO activate(\n             @PathVariable(\"userId\") final Long userId,\n             @RequestParam(required = true) final String token,\n-            @RequestParam(required = false) final Set<String> resourceNames,\n-            @RequestParam(required = false, defaultValue = \"true\") final Boolean performLocally,\n-            @RequestParam(required = false, defaultValue = \"true\") final Boolean performRemotely)\n+            @RequestBody final PropagationRequestTO propagationRequestTO)\n             throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {\n \n         LOG.debug(\"About to activate \" + userId);\n@@ -355,18 +362,27 @@ public UserTO activate(\n             throw new NotFoundException(\"User \" + userId);\n         }\n \n-        return setStatus(user, token, resourceNames, performLocally, performRemotely, true, \"activate\");\n+        return setStatus(user, token, propagationRequestTO, true, \"activate\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/activateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n+    public UserTO activate(\n+            @PathVariable(\"username\") final String username,\n+            @RequestParam(required = true) final String token)\n+            throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {\n+\n+        return activate(username, token, null);\n+    }\n+\n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/activateByUsername/{username}\")\n+    @Transactional(rollbackFor = {Throwable.class})\n     public UserTO activate(\n             @PathVariable(\"username\") final String username,\n             @RequestParam(required = true) final String token,\n-            @RequestParam(required = false) final Set<String> resourceNames,\n-            @RequestParam(required = false, defaultValue = \"true\") final Boolean performLocally,\n-            @RequestParam(required = false, defaultValue = \"true\") final Boolean performRemotely)\n+            @RequestBody final PropagationRequestTO propagationRequestTO)\n             throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {\n \n         LOG.debug(\"About to activate \" + username);\n@@ -376,55 +392,76 @@ public UserTO activate(\n             throw new NotFoundException(\"User \" + username);\n         }\n \n-        return setStatus(user, token, resourceNames, performLocally, performRemotely, true, \"activate\");\n+        return setStatus(user, token, propagationRequestTO, true, \"activate\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/suspendByUsername/{username}\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/suspend/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO suspend(@PathVariable(\"username\") final String username,\n-            @RequestParam(required = false) final Set<String> resourceNames,\n-            @RequestParam(required = false, defaultValue = \"true\") final Boolean performLocally,\n-            @RequestParam(required = false, defaultValue = \"true\") final Boolean performRemotely)\n+    public UserTO suspend(@PathVariable(\"userId\") final Long userId)\n             throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n \n-        LOG.debug(\"About to suspend \" + username);\n+        return suspend(userId, null);\n+    }\n \n-        SyncopeUser user = userDAO.find(username);\n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/suspend/{userId}\")\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public UserTO suspend(@PathVariable(\"userId\") final Long userId,\n+            @RequestBody final PropagationRequestTO propagationRequestTO)\n+            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n \n+        LOG.debug(\"About to suspend \" + userId);\n+\n+        SyncopeUser user = userDAO.find(userId);\n         if (user == null) {\n-            throw new NotFoundException(\"User \" + username);\n+            throw new NotFoundException(\"User \" + userId);\n         }\n \n-        return setStatus(user, null, resourceNames, performLocally, performRemotely, false, \"suspend\");\n+        return setStatus(user, null, propagationRequestTO, false, \"suspend\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/suspend/{userId}\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/suspendByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO suspend(@PathVariable(\"userId\") final Long userId,\n-            @RequestParam(required = false) final Set<String> resourceNames,\n-            @RequestParam(required = false, defaultValue = \"true\") final Boolean performLocally,\n-            @RequestParam(required = false, defaultValue = \"true\") final Boolean performRemotely)\n+    public UserTO suspend(@PathVariable(\"username\") final String username)\n             throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n \n-        LOG.debug(\"About to suspend \" + userId);\n+        return suspend(username, null);\n+    }\n+\n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/suspendByUsername/{username}\")\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public UserTO suspend(@PathVariable(\"username\") final String username,\n+            @RequestBody final PropagationRequestTO propagationRequestTO)\n+            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n+\n+        LOG.debug(\"About to suspend \" + username);\n+\n+        SyncopeUser user = userDAO.find(username);\n \n-        SyncopeUser user = userDAO.find(userId);\n         if (user == null) {\n-            throw new NotFoundException(\"User \" + userId);\n+            throw new NotFoundException(\"User \" + username);\n         }\n \n-        return setStatus(user, null, resourceNames, performLocally, performRemotely, false, \"suspend\");\n+        return setStatus(user, null, propagationRequestTO, false, \"suspend\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/reactivate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n+    public UserTO reactivate(final @PathVariable(\"userId\") Long userId)\n+            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n+\n+        return reactivate(userId, null);\n+    }\n+\n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/reactivate/{userId}\")\n+    @Transactional(rollbackFor = {Throwable.class})\n     public UserTO reactivate(final @PathVariable(\"userId\") Long userId,\n-            @RequestParam(required = false) final Set<String> resourceNames,\n-            @RequestParam(required = false, defaultValue = \"true\") final Boolean performLocally,\n-            @RequestParam(required = false, defaultValue = \"true\") final Boolean performRemotely)\n+            @RequestBody final PropagationRequestTO propagationRequestTO)\n             throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n \n         LOG.debug(\"About to reactivate \" + userId);\n@@ -434,16 +471,22 @@ public UserTO reactivate(final @PathVariable(\"userId\") Long userId,\n             throw new NotFoundException(\"User \" + userId);\n         }\n \n-        return setStatus(user, null, resourceNames, performLocally, performRemotely, true, \"reactivate\");\n+        return setStatus(user, null, propagationRequestTO, true, \"reactivate\");\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/reactivateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n+    public UserTO reactivate(final @PathVariable(\"username\") String username)\n+            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n+\n+        return reactivate(username, null);\n+    }\n+\n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/reactivateByUsername/{username}\")\n+    @Transactional(rollbackFor = {Throwable.class})\n     public UserTO reactivate(final @PathVariable(\"username\") String username,\n-            @RequestParam(required = false) final Set<String> resourceNames,\n-            @RequestParam(required = false, defaultValue = \"true\") final Boolean performLocally,\n-            @RequestParam(required = false, defaultValue = \"true\") final Boolean performRemotely)\n+            @RequestBody final PropagationRequestTO propagationRequestTO)\n             throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n \n         LOG.debug(\"About to reactivate \" + username);\n@@ -453,13 +496,14 @@ public UserTO reactivate(final @PathVariable(\"username\") String username,\n             throw new NotFoundException(\"User \" + username);\n         }\n \n-        return setStatus(user, null, resourceNames, performLocally, performRemotely, true, \"reactivate\");\n+        return setStatus(user, null, propagationRequestTO, true, \"reactivate\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{userId}\")\n     public UserTO delete(@PathVariable(\"userId\") final Long userId)\n             throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {\n+\n         LOG.debug(\"User delete called with {}\", userId);\n \n         return doDelete(userId);\n@@ -469,6 +513,7 @@ public UserTO delete(@PathVariable(\"userId\") final Long userId)\n     @RequestMapping(method = RequestMethod.GET, value = \"/deleteByUsername/{username}\")\n     public UserTO delete(@PathVariable final String username)\n             throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {\n+\n         LOG.debug(\"User delete called with {}\", username);\n \n         UserTO result = dataBinder.getUserTO(username);\n@@ -578,14 +623,14 @@ public UserTO submitForm(@RequestBody final WorkflowFormTO form)\n         return savedTO;\n     }\n \n-    private UserTO setStatus(final SyncopeUser user, final String token, final Set<String> resourceNames,\n-            final boolean performLocally, final boolean performRemotely, final boolean status, final String task)\n+    protected UserTO setStatus(final SyncopeUser user, final String token,\n+            final PropagationRequestTO propagationRequestTO, final boolean status, final String task)\n             throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n \n         LOG.debug(\"About to set status of {}\" + user);\n \n         WorkflowResult<Long> updated;\n-        if (performLocally) {\n+        if (propagationRequestTO == null || propagationRequestTO.isOnSyncope()) {\n             if (\"suspend\".equals(task)) {\n                 updated = uwfAdapter.suspend(user.getId());\n             } else if (\"reactivate\".equals(task)) {\n@@ -598,19 +643,14 @@ private UserTO setStatus(final SyncopeUser user, final String token, final Set<S\n         }\n \n         // Resources to exclude from propagation.\n-        Set<String> resources = new HashSet<String>();\n-        if (performRemotely) {\n-            if (resourceNames != null) {\n-                resources.addAll(user.getResourceNames());\n-                resources.removeAll(resourceNames);\n-            }\n-        } else {\n-            resources.addAll(user.getResourceNames());\n+        Set<String> resourcesToBeExcluded = new HashSet<String>(user.getResourceNames());\n+        if (propagationRequestTO != null) {\n+            resourcesToBeExcluded.removeAll(propagationRequestTO.getResources());\n         }\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(user, status, resources);\n-\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(user, status, resourcesToBeExcluded);\n         taskExecutor.execute(tasks);\n+\n         notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n \n         final UserTO savedTO = dataBinder.getUserTO(updated.getResult());\n@@ -625,6 +665,7 @@ private UserTO setStatus(final SyncopeUser user, final String token, final Set<S\n \n     protected UserTO doDelete(final Long userId)\n             throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {\n+\n         // Note here that we can only notify about \"delete\", not any other\n         // task defined in workflow process definition: this because this\n         // information could only be available after uwfAdapter.delete(), which\n@@ -637,9 +678,9 @@ protected UserTO doDelete(final Long userId)\n         final UserTO userTO = new UserTO();\n         userTO.setId(userId);\n \n-        final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n+        final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n         taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n-        userTO.setPropagationTOs(propagations);\n+        userTO.setPropagationStatusTOs(propagations);\n \n         uwfAdapter.delete(userId);\n "},{"sha":"6337c4cd8332cb9d7de35c2f08dd236431785980","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/NoOpUserWorkflowAdapter.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.core.workflow.user;\n \n-import java.util.AbstractMap.SimpleEntry;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.AbstractMap;\n+import java.util.AbstractMap.SimpleEntry;\n import java.util.Map;\n-\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.to.WorkflowDefinitionTO;\n@@ -113,9 +113,8 @@ protected WorkflowResult<Map.Entry<Long, Boolean>> doUpdate(final SyncopeUser us\n \n         SyncopeUser updated = userDAO.save(user);\n \n-        return new WorkflowResult<Map.Entry<Long, Boolean>>(new SimpleEntry<Long, Boolean>(updated.getId(), true),\n-                propByRes,\n-                \"update\");\n+        return new WorkflowResult<Map.Entry<Long, Boolean>>(\n+                new AbstractMap.SimpleEntry<Long, Boolean>(updated.getId(), true), propByRes, \"update\");\n     }\n \n     @Override"},{"sha":"5f133cee5f326e6ff8567ecf4a05b471303d4fef","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -715,8 +715,8 @@ public void issueSYNCOPE272() {\n             userTO = userService.create(userTO);\n \n             assertNotNull(userTO);\n-            assertEquals(1, userTO.getPropagationTOs().size());\n-            assertTrue(userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n+            assertEquals(1, userTO.getPropagationStatusTOs().size());\n+            assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n \n             // Update sync task\n             SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, SYNC_TASK_ID);"},{"sha":"f8787c7dbcce48a1fe331c1f82da6130c9935d73","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":45,"deletions":40,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc010c158dcb41fb08b4666e630a81eda1627593/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=bc010c158dcb41fb08b4666e630a81eda1627593","patch":"@@ -31,9 +31,7 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n-\n import javax.ws.rs.core.Response;\n-\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.common.mod.UserMod;\n@@ -43,7 +41,8 @@\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PolicyTO;\n-import org.apache.syncope.common.to.PropagationTO;\n+import org.apache.syncope.common.to.PropagationRequestTO;\n+import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.to.PropagationTaskTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -342,8 +341,8 @@ public void createUserWithDbPropagation() {\n         userTO.addResource(\"resource-testdb\");\n         userTO = userService.create(userTO);\n         assertNotNull(userTO);\n-        assertEquals(1, userTO.getPropagationTOs().size());\n-        assertTrue(userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n+        assertEquals(1, userTO.getPropagationStatusTOs().size());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n@@ -633,7 +632,7 @@ public void createWithApproval() {\n         assertEquals(\"createApproval\", userTO.getStatus());\n         assertEquals(Collections.singleton(\"resource-testdb\"), userTO.getResources());\n \n-        assertTrue(userTO.getPropagationTOs().isEmpty());\n+        assertTrue(userTO.getPropagationStatusTOs().isEmpty());\n \n         Exception exception = null;\n         try {\n@@ -711,8 +710,8 @@ public void delete() {\n         assertTrue(userTO.getAttributes().isEmpty());\n \n         // check for propagation result\n-        assertFalse(userTO.getPropagationTOs().isEmpty());\n-        assertTrue(userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n \n         try {\n             userService.delete(userTO.getId());\n@@ -739,8 +738,8 @@ public void deleteByUsername() {\n         assertTrue(userTO.getAttributes().isEmpty());\n \n         // check for propagation result\n-        assertFalse(userTO.getPropagationTOs().isEmpty());\n-        assertTrue(userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n \n         try {\n             userService.read(userTO.getId());\n@@ -1177,10 +1176,11 @@ public void suspendReactivateOnResource() {\n                 ? \"active\"\n                 : \"created\", userTO.getStatus());\n \n-        String query = \"?resourceNames=\" + dbTable.getName() + \"&resourceNames=\" + ldap.getName()\n-                + \"&performLocally=true\"; // check also performLocally\n-\n-        userTO = userService.suspend(userTO.getId(), query);\n+        PropagationRequestTO propagationRequestTO = new PropagationRequestTO();\n+        propagationRequestTO.setOnSyncope(true);\n+        propagationRequestTO.addResource(dbTable.getName());\n+        propagationRequestTO.addResource(ldap.getName());\n+        userTO = userService.suspend(userTO.getId(), propagationRequestTO);\n \n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n@@ -1198,19 +1198,24 @@ public void suspendReactivateOnResource() {\n         connObjectTO = readUserConnObj(ldap.getName(), ldapUID);\n         assertNotNull(connObjectTO);\n \n-        query = \"?resourceNames=\" + ldap.getName() + \"&performLocally=false\"; // check also performLocally\n+        propagationRequestTO = new PropagationRequestTO();\n+        propagationRequestTO.setOnSyncope(false);\n+        propagationRequestTO.addResource(ldap.getName());\n+        userTO = userService.suspend(userTO.getId(), propagationRequestTO);\n \n-        userTO = userService.reactivate(userTO.getId(), query);\n+        userTO = userService.reactivate(userTO.getId(), propagationRequestTO);\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         connObjectTO = readUserConnObj(dbTable.getName(), dbTableUID);\n         assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME)\n                 .getValues().get(0)));\n \n-        query = \"?resourceNames=\" + dbTable.getName() + \"&performLocally=true\"; // check also performLocally\n+        propagationRequestTO = new PropagationRequestTO();\n+        propagationRequestTO.setOnSyncope(true);\n+        propagationRequestTO.addResource(dbTable.getName());\n \n-        userTO = userService.reactivate(userTO.getId(), query);\n+        userTO = userService.reactivate(userTO.getId(), propagationRequestTO);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n@@ -1347,13 +1352,13 @@ public final void issue280() {\n         userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n \n-        final List<PropagationTO> propagations = userTO.getPropagationTOs();\n+        final List<PropagationStatusTO> propagations = userTO.getPropagationStatusTOs();\n \n         assertNotNull(propagations);\n         assertEquals(1, propagations.size());\n \n         final PropagationTaskExecStatus status = propagations.get(0).getStatus();\n-        final String resource = propagations.get(0).getResourceName();\n+        final String resource = propagations.get(0).getResource();\n \n         assertNotNull(status);\n         assertEquals(\"resource-testdb\", resource);\n@@ -1371,13 +1376,13 @@ public void issue281() {\n         userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n-        final List<PropagationTO> propagations = userTO.getPropagationTOs();\n+        final List<PropagationStatusTO> propagations = userTO.getPropagationStatusTOs();\n \n         assertNotNull(propagations);\n         assertEquals(1, propagations.size());\n \n         final PropagationTaskExecStatus status = propagations.get(0).getStatus();\n-        final String resource = propagations.get(0).getResourceName();\n+        final String resource = propagations.get(0).getResource();\n \n         assertNotNull(status);\n         assertEquals(\"resource-csv\", resource);\n@@ -1652,9 +1657,9 @@ public void issueSYNCOPE185() {\n \n         userTO = userService.create(userTO);\n         assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationTOs().isEmpty());\n-        assertEquals(\"resource-ldap\", userTO.getPropagationTOs().get(0).getResourceName());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationTOs().get(0).getStatus());\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(\"resource-ldap\", userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n         // 2. delete this user\n         userService.delete(userTO.getId());\n@@ -1710,9 +1715,9 @@ public void issueSYNCOPE260() {\n \n         userTO = userService.create(userTO);\n         assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationTOs().isEmpty());\n-        assertEquals(\"ws-target-resource-2\", userTO.getPropagationTOs().get(0).getResourceName());\n-        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationTOs().get(0).getStatus());\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n         ConnObjectTO connObjectTO = readUserConnObj(\"ws-target-resource-2\", userTO.getUsername());\n         assertNotNull(connObjectTO);\n@@ -1734,9 +1739,9 @@ public void issueSYNCOPE260() {\n \n         userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationTOs().isEmpty());\n-        assertEquals(\"ws-target-resource-2\", userTO.getPropagationTOs().get(0).getResourceName());\n-        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationTOs().get(0).getStatus());\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n         connObjectTO = readUserConnObj(\"ws-target-resource-2\", userTO.getUsername());\n         assertNotNull(connObjectTO);\n@@ -1778,9 +1783,9 @@ public void issueSYNCOPE260() {\n \n         userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationTOs().isEmpty());\n-        assertEquals(\"ws-target-resource-2\", userTO.getPropagationTOs().get(0).getResourceName());\n-        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationTOs().get(0).getStatus());\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n         connObjectTO = readUserConnObj(\"ws-target-resource-2\", userTO.getUsername());\n         assertNotNull(connObjectTO);\n@@ -1801,9 +1806,9 @@ public void issueSYNCOPE260() {\n         userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n         assertTrue(userTO.getVirtualAttributes().isEmpty());\n-        assertFalse(userTO.getPropagationTOs().isEmpty());\n-        assertEquals(\"ws-target-resource-2\", userTO.getPropagationTOs().get(0).getResourceName());\n-        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationTOs().get(0).getStatus());\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n         connObjectTO = readUserConnObj(\"ws-target-resource-2\", userTO.getUsername());\n         assertNotNull(connObjectTO);\n@@ -1825,9 +1830,9 @@ public void issueSYNCOPE267() {\n \n         userTO = userService.create(userTO);\n         assertNotNull(userTO);\n-        assertFalse(userTO.getPropagationTOs().isEmpty());\n-        assertEquals(\"resource-db-virattr\", userTO.getPropagationTOs().get(0).getResourceName());\n-        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationTOs().get(0).getStatus());\n+        assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n+        assertEquals(\"resource-db-virattr\", userTO.getPropagationStatusTOs().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n         ConnObjectTO connObjectTO = readUserConnObj(\"resource-db-virattr\", String.valueOf(userTO.getId()));\n         assertNotNull(connObjectTO);"}]}