{"sha":"aaaced89f94f30c3280d4cc3d57a880a52a94571","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFhYWNlZDg5Zjk0ZjMwYzMyODBkNGNjM2Q1N2E4ODBhNTJhOTQ1NzE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2020-08-05T06:11:26Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-08-05T06:11:26Z"},"message":"[SYNCOPE-1582] Adding CAS client support (#209)","tree":{"sha":"e4f61277860aabb6c2d810e2308dfa167d2aee8a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e4f61277860aabb6c2d810e2308dfa167d2aee8a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/aaaced89f94f30c3280d4cc3d57a880a52a94571","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfKk2OCRBK7hj4Ov3rIwAAdHIIAFCFstT6V3cRzjeirzJGL+0h\n2XyaDhFT431gSlRwd0XDA2Zhc71csHVWCh7iKnj1udi7Kmcu8D8Swl082TOzOc8n\npSvmUrSj6ltaihiw1XKxnqB/fkYgdcmnFjxLbvKiO4M/F4UNODAiJVv32weVwVK+\nd4gVAjs52emlosmTK9XPzYkBpy1/AO25BJZw7wiMAjBYVpizzOQ7hlFllFKMjzeS\nzSv7M9FBseBe/HIy6+tm2NkBwbDivPEDBIe9xQQDX/YXW3crLXHa8J9aR5tI/pfF\n2k8gdPRSnfizvTJkXufInsQ3SNUU2UHagWQzsQCRmw7+4OodR/KCk6NlbzLkczI=\n=T/jj\n-----END PGP SIGNATURE-----\n","payload":"tree e4f61277860aabb6c2d810e2308dfa167d2aee8a\nparent 79700fca93657910274a2aab58f793c07af2d8d2\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1596607886 +0200\ncommitter GitHub <noreply@github.com> 1596607886 +0200\n\n[SYNCOPE-1582] Adding CAS client support (#209)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aaaced89f94f30c3280d4cc3d57a880a52a94571","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aaaced89f94f30c3280d4cc3d57a880a52a94571","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aaaced89f94f30c3280d4cc3d57a880a52a94571/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"79700fca93657910274a2aab58f793c07af2d8d2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/79700fca93657910274a2aab58f793c07af2d8d2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/79700fca93657910274a2aab58f793c07af2d8d2"}],"stats":{"total":1021,"additions":930,"deletions":91},"files":[{"sha":"2d05503b295e8292c31af791a2c50be9f4b76eb7","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WAClientAppLogic.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -29,8 +29,10 @@\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -51,6 +53,9 @@ public class WAClientAppLogic {\n     @Autowired\n     private OIDCRPDAO oidcrpDAO;\n \n+    @Autowired\n+    private CASSPDAO casspDAO;\n+\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n     public List<WAClientApp> list() {\n@@ -64,9 +69,14 @@ public List<WAClientApp> list() {\n                     break;\n \n                 case SAML2SP:\n-                default:\n                     clientApps.addAll(saml2spDAO.findAll().stream().\n                             map(binder::getWAClientApp).collect(Collectors.toList()));\n+                    break;\n+\n+                case CASSP:\n+                default:\n+                    clientApps.addAll(casspDAO.findAll().stream().\n+                            map(binder::getWAClientApp).collect(Collectors.toList()));\n             }\n         });\n \n@@ -91,6 +101,13 @@ private WAClientApp doRead(final Long clientAppId, final ClientAppType type) {\n                 }\n                 break;\n \n+            case CASSP:\n+                CASSP cassp = casspDAO.findByClientAppId(clientAppId);\n+                if (cassp != null) {\n+                    clientApp = binder.getWAClientApp(cassp);\n+                }\n+                break;\n+\n             default:\n         }\n \n@@ -134,6 +151,13 @@ private WAClientApp doRead(final String name, final ClientAppType type) {\n                 }\n                 break;\n \n+            case CASSP:\n+                CASSP cassp = casspDAO.findByName(name);\n+                if (cassp != null) {\n+                    clientApp = binder.getWAClientApp(cassp);\n+                }\n+                break;\n+\n             default:\n         }\n "},{"sha":"9ff4b9765239c9f28081341689c78e859d56e740","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/AbstractITCase.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractITCase.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -44,6 +44,7 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.http.Consts;\n import org.apache.http.HttpStatus;\n@@ -96,6 +97,9 @@ public abstract class AbstractITCase {\n \n     protected static final String SRA_ADDRESS = \"http://localhost:\" + PORT;\n \n+    protected static final String QUERY_STRING =\n+            \"key1=value1&key2=value2&key2=value3&key3=an%20url%20encoded%20value%3A%20this%21\";\n+\n     protected static final String LOGGED_OUT_HEADER = \"X-LOGGED-OUT\";\n \n     protected static SyncopeClientFactoryBean clientFactory;\n@@ -332,12 +336,16 @@ protected static ObjectNode checkGetResponse(\n         assertEquals(\"value2\", key2.get(0).asText());\n         assertEquals(\"value3\", key2.get(1).asText());\n \n+        assertEquals(\"an url encoded value: this!\", args.get(\"key3\").asText());\n+\n         ObjectNode headers = (ObjectNode) json.get(\"headers\");\n         assertEquals(MediaType.TEXT_HTML, headers.get(HttpHeaders.ACCEPT).asText());\n         assertEquals(EN_LANGUAGE, headers.get(HttpHeaders.ACCEPT_LANGUAGE).asText());\n         assertEquals(\"localhost:\" + PORT, headers.get(\"X-Forwarded-Host\").asText());\n \n-        assertEquals(originalRequestURI, json.get(\"url\").asText());\n+        assertEquals(\n+                StringUtils.substringBefore(originalRequestURI, \"?\"),\n+                StringUtils.substringBefore(json.get(\"url\").asText(), \"?\"));\n \n         return headers;\n     }"},{"sha":"2b0e59a04a984d1d0827a260643057b688fc930f","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/CASSRAITCase.java","status":"added","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FCASSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FCASSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FCASSRAITCase.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.sra;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeoutException;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.http.Consts;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.apache.syncope.common.lib.to.client.CASSPTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+public class CASSRAITCase extends AbstractITCase {\n+\n+    @BeforeAll\n+    public static void startSRA() throws IOException, InterruptedException, TimeoutException {\n+        assumeTrue(CASSRAITCase.class.equals(MethodHandles.lookup().lookupClass()));\n+\n+        doStartSRA(\"cas\");\n+    }\n+\n+    @BeforeAll\n+    public static void clientAppSetup() {\n+        String appName = CASSRAITCase.class.getName();\n+        CASSPTO clientApp = clientAppService.list(ClientAppType.CASSP).stream().\n+                filter(app -> appName.equals(app.getName())).\n+                map(CASSPTO.class::cast).\n+                findFirst().\n+                orElseGet(() -> {\n+                    CASSPTO app = new CASSPTO();\n+                    app.setName(appName);\n+                    app.setClientAppId(4L);\n+                    app.setServiceId(\"http://localhost:8080/.*\");\n+\n+                    Response response = clientAppService.create(ClientAppType.CASSP, app);\n+                    if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                        fail(\"Could not create CAS Client App\");\n+                    }\n+\n+                    return clientAppService.read(\n+                            ClientAppType.CASSP, response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                });\n+\n+        clientApp.setAuthPolicy(getAuthPolicy().getKey());\n+\n+        clientAppService.update(ClientAppType.CASSP, clientApp);\n+        clientAppService.pushToWA();\n+    }\n+\n+    @Test\n+    public void web() throws IOException {\n+        CloseableHttpClient httpclient = HttpClients.createDefault();\n+        HttpClientContext context = HttpClientContext.create();\n+        context.setCookieStore(new BasicCookieStore());\n+\n+        // 1. public\n+        HttpGet get = new HttpGet(SRA_ADDRESS + \"/public/get?\" + QUERY_STRING);\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        CloseableHttpResponse response = httpclient.execute(get, context);\n+\n+        ObjectNode headers = checkGetResponse(response, get.getURI().toASCIIString().replace(\"/public\", \"\"));\n+        assertFalse(headers.has(HttpHeaders.COOKIE));\n+\n+        // 2. protected\n+        get = new HttpGet(SRA_ADDRESS + \"/protected/get?\" + QUERY_STRING);\n+        String originalRequestURI = get.getURI().toASCIIString();\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        // 2a. authenticate\n+        String responseBody = EntityUtils.toString(response.getEntity());\n+        response = authenticateToCas(responseBody, httpclient, context);\n+\n+        // 2b. WA attribute consent screen\n+        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n+            responseBody = EntityUtils.toString(response.getEntity());\n+            String execution = extractCASExecution(responseBody);\n+\n+            List<NameValuePair> form = new ArrayList<>();\n+            form.add(new BasicNameValuePair(\"_eventId\", \"confirm\"));\n+            form.add(new BasicNameValuePair(\"execution\", execution));\n+            form.add(new BasicNameValuePair(\"option\", \"1\"));\n+            form.add(new BasicNameValuePair(\"reminder\", \"30\"));\n+            form.add(new BasicNameValuePair(\"reminderTimeUnit\", \"days\"));\n+\n+            HttpPost post = new HttpPost(WA_ADDRESS + \"/login\");\n+            post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+            post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+            post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n+            response = httpclient.execute(post, context);\n+        }\n+        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n+\n+        // 2c. finally get requested content\n+        get = new HttpGet(response.getFirstHeader(HttpHeaders.LOCATION).getValue());\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+\n+        headers = checkGetResponse(response, originalRequestURI.replace(\"/protected\", \"\"));\n+        assertFalse(headers.get(HttpHeaders.COOKIE).asText().isBlank());\n+\n+        // 3. logout\n+        get = new HttpGet(SRA_ADDRESS + \"/protected/logout\");\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+\n+        checkLogout(response);\n+    }\n+}"},{"sha":"d0b98f133254cfa8ae4a99910a3a68c2045ca708","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/OIDCSRAITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -144,7 +144,7 @@ public void web() throws IOException {\n         context.setCookieStore(new BasicCookieStore());\n \n         // 1. public\n-        HttpGet get = new HttpGet(SRA_ADDRESS + \"/public/get?key1=value1&key2=value2&key2=value3\");\n+        HttpGet get = new HttpGet(SRA_ADDRESS + \"/public/get?\" + QUERY_STRING);\n         get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n         get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n         CloseableHttpResponse response = httpclient.execute(get, context);\n@@ -153,7 +153,7 @@ public void web() throws IOException {\n         assertFalse(headers.has(HttpHeaders.COOKIE));\n \n         // 2. protected\n-        get = new HttpGet(SRA_ADDRESS + \"/protected/get?key1=value1&key2=value2&key2=value3\");\n+        get = new HttpGet(SRA_ADDRESS + \"/protected/get?\" + QUERY_STRING);\n         String originalRequestURI = get.getURI().toASCIIString();\n         get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n         get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);"},{"sha":"e4e11f21dcd24599f9dd9b5fb868839575bce2d7","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/SAML2SRAITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -35,7 +35,6 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.commons.text.StringEscapeUtils;\n import org.apache.http.Consts;\n@@ -156,7 +155,7 @@ public void web() throws IOException {\n         context.setCookieStore(new BasicCookieStore());\n \n         // 1. public\n-        HttpGet get = new HttpGet(SRA_ADDRESS + \"/public/get?key1=value1&key2=value2&key2=value3\");\n+        HttpGet get = new HttpGet(SRA_ADDRESS + \"/public/get?\" + QUERY_STRING);\n         get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n         get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n         CloseableHttpResponse response = httpclient.execute(get, context);\n@@ -165,7 +164,7 @@ public void web() throws IOException {\n         assertFalse(headers.has(HttpHeaders.COOKIE));\n \n         // 2. protected\n-        get = new HttpGet(SRA_ADDRESS + \"/protected/get?key1=value1&key2=value2&key2=value3\");\n+        get = new HttpGet(SRA_ADDRESS + \"/protected/get?\" + QUERY_STRING);\n         String originalRequestURI = get.getURI().toASCIIString();\n         get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n         get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);"},{"sha":"acc6237937b5153f83f8c03c392a449ea08eab9f","filename":"fit/wa-reference/src/test/resources/application-cas.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-cas.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-cas.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-cas.properties?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+am.type=CAS\n+am.cas.server.name=http://localhost:80\n+am.cas.url.prefix=http://localhost:9080/syncope-wa/\n+\n+global.postLogout=http://localhost:8080/logout"},{"sha":"27c29855f6cf03dcfacabe32182d2c31e84b291b","filename":"pom.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -450,6 +450,7 @@ under the License.\n     <pac4j.version>4.0.3</pac4j.version>\n \n     <cas.version>6.3.0-SNAPSHOT</cas.version>\n+    <cas-client.version>3.6.1</cas-client.version>\n \n     <h2.version>1.4.200</h2.version>\n \n@@ -1374,6 +1375,12 @@ under the License.\n         <groupId>org.pac4j</groupId>\n         <artifactId>pac4j-saml</artifactId>\n         <version>${pac4j.version}</version>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>org.apache.velocity</groupId>\n+            <artifactId>velocity</artifactId>            \n+          </exclusion>\n+        </exclusions>\n       </dependency>\n       <dependency>\n         <groupId>org.pac4j</groupId>\n@@ -1643,6 +1650,12 @@ under the License.\n         <artifactId>cas-server-webapp-config</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+\n+      <dependency>\n+        <groupId>org.jasig.cas.client</groupId>\n+        <artifactId>cas-client-core</artifactId>\n+        <version>${cas-client.version}</version>\n+      </dependency>\n       <!-- /CAS -->\n \n       <!-- Wicket -->"},{"sha":"183b170ca058f9734206c944a8b66059ddcc4ae5","filename":"sra/pom.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fpom.xml?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -82,7 +82,12 @@ under the License.\n       <artifactId>pac4j-saml</artifactId>\n     </dependency>\n \n-    <dependency> \n+    <dependency>\n+      <groupId>org.jasig.cas.client</groupId>\n+      <artifactId>cas-client-core</artifactId>\n+    </dependency>\n+\n+    <dependency>\n       <groupId>org.springframework.session</groupId>\n       <artifactId>spring-session-core</artifactId> \n     </dependency>"},{"sha":"9d9fda1ddb41119d138663c98cef94887afd66c6","filename":"sra/src/main/java/org/apache/syncope/sra/SecurityConfig.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -27,10 +27,12 @@\n import org.apache.syncope.sra.security.LogoutRouteMatcher;\n import org.apache.syncope.sra.security.oauth2.OAuth2SecurityConfigUtils;\n import org.apache.syncope.sra.security.PublicRouteMatcher;\n+import org.apache.syncope.sra.security.cas.CASSecurityConfigUtils;\n import org.apache.syncope.sra.security.saml2.SAML2BindingType;\n import org.apache.syncope.sra.security.saml2.SAML2MetadataEndpoint;\n import org.apache.syncope.sra.security.saml2.SAML2SecurityConfigUtils;\n import org.apache.syncope.sra.security.saml2.SAML2WebSsoAuthenticationWebFilter;\n+import org.jasig.cas.client.Protocol;\n import org.pac4j.core.http.callback.NoParameterCallbackUrlResolver;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.config.SAML2Configuration;\n@@ -266,10 +268,24 @@ public SecurityWebFilterChain routesSecurityFilterChain(\n             case SAML2:\n                 SAML2Client saml2Client = saml2Client();\n                 SAML2SecurityConfigUtils.forLogin(http, saml2Client, publicRouteMatcher);\n-                SAML2SecurityConfigUtils.forLogout(builder, saml2Client, logoutRouteMatcher, ctx);\n+                SAML2SecurityConfigUtils.forLogout(builder, saml2Client, cacheManager, logoutRouteMatcher, ctx);\n                 break;\n \n             case CAS:\n+                CASSecurityConfigUtils.forLogin(\n+                        http,\n+                        env.getProperty(\"am.cas.server.name\"),\n+                        Protocol.CAS3,\n+                        env.getProperty(\"am.cas.url.prefix\"),\n+                        publicRouteMatcher);\n+                CASSecurityConfigUtils.forLogout(\n+                        builder,\n+                        cacheManager,\n+                        env.getProperty(\"am.cas.url.prefix\"),\n+                        logoutRouteMatcher,\n+                        ctx);\n+                break;\n+\n             default:\n         }\n "},{"sha":"7d741fdb5730975e1382b4508c5cbc8e72894bee","filename":"sra/src/main/java/org/apache/syncope/sra/security/cas/CASAuthenticationRequestWebFilter.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASAuthenticationRequestWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASAuthenticationRequestWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASAuthenticationRequestWebFilter.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.cas;\n+\n+import java.net.URI;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.sra.security.PublicRouteMatcher;\n+import org.apache.syncope.sra.security.web.server.DoNothingIfCommittedServerRedirectStrategy;\n+import org.apache.syncope.sra.session.SessionUtils;\n+import org.jasig.cas.client.Protocol;\n+import org.jasig.cas.client.util.CommonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.web.server.ServerRedirectStrategy;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebFilter;\n+import org.springframework.web.server.WebFilterChain;\n+import reactor.core.publisher.Mono;\n+\n+public class CASAuthenticationRequestWebFilter implements WebFilter {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CASAuthenticationRequestWebFilter.class);\n+\n+    private final ServerWebExchangeMatcher matcher;\n+\n+    /**\n+     * The name of the server. Should be in the following format: {protocol}:{hostName}:{port}.\n+     * Standard ports can be excluded.\n+     */\n+    private final String serverName;\n+\n+    private final Protocol protocol;\n+\n+    /**\n+     * The URL to the CAS Server login.\n+     */\n+    private final String casServerLoginUrl;\n+\n+    private ServerRedirectStrategy authenticationRedirectStrategy = new DoNothingIfCommittedServerRedirectStrategy();\n+\n+    public CASAuthenticationRequestWebFilter(\n+            final PublicRouteMatcher publicRouteMatcher,\n+            final String serverName,\n+            final Protocol protocol,\n+            final String casServerUrlPrefix) {\n+\n+        this.matcher = ServerWebExchangeMatchers.matchers(\n+                publicRouteMatcher,\n+                CASUtils.ticketAvailable(protocol),\n+                SessionUtils.authInSession());\n+        this.serverName = serverName;\n+        this.protocol = protocol;\n+        this.casServerLoginUrl = StringUtils.appendIfMissing(casServerUrlPrefix, \"/\") + \"login\";\n+    }\n+\n+    public void setAuthenticationRedirectStrategy(final ServerRedirectStrategy authenticationRedirectStrategy) {\n+        this.authenticationRedirectStrategy = authenticationRedirectStrategy;\n+    }\n+\n+    @Override\n+    public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {\n+        return matcher.matches(exchange).\n+                filter(matchResult -> !matchResult.isMatch()).\n+                switchIfEmpty(chain.filter(exchange).then(Mono.empty())).\n+                flatMap(r -> exchange.getSession()).\n+                flatMap(session -> {\n+                    session.getAttributes().\n+                            put(SessionUtils.INITIAL_REQUEST_URI, exchange.getRequest().getURI());\n+\n+                    LOG.debug(\"no ticket and no assertion found\");\n+\n+                    String serviceUrl = CASUtils.constructServiceUrl(exchange, this.serverName, this.protocol);\n+                    LOG.debug(\"Constructed service url: {}\", serviceUrl);\n+\n+                    String urlToRedirectTo = CommonUtils.constructRedirectUrl(\n+                            this.casServerLoginUrl,\n+                            this.protocol.getServiceParameterName(),\n+                            serviceUrl,\n+                            false,\n+                            false,\n+                            null);\n+                    LOG.debug(\"redirecting to \\\"{}\\\"\", urlToRedirectTo);\n+\n+                    return authenticationRedirectStrategy.sendRedirect(exchange, URI.create(urlToRedirectTo));\n+                });\n+    }\n+}"},{"sha":"bf5d23cd8bba5773bd06d8274b6f224b8e73dfef","filename":"sra/src/main/java/org/apache/syncope/sra/security/cas/CASAuthenticationToken.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASAuthenticationToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASAuthenticationToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASAuthenticationToken.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.cas;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.jasig.cas.client.validation.Assertion;\n+import org.springframework.security.authentication.AbstractAuthenticationToken;\n+\n+public class CASAuthenticationToken extends AbstractAuthenticationToken {\n+\n+    private static final long serialVersionUID = 6333776590644298469L;\n+\n+    private final Assertion assertion;\n+\n+    public CASAuthenticationToken(final Assertion assertion) {\n+        super(null);\n+        this.assertion = assertion;\n+        this.setAuthenticated(true);\n+    }\n+\n+    @Override\n+    public Object getCredentials() {\n+        return StringUtils.EMPTY;\n+    }\n+\n+    @Override\n+    public Assertion getPrincipal() {\n+        return assertion;\n+    }\n+}"},{"sha":"224c1b2e4b7ed5e7347fc12c2f08fcd7bc0e682b","filename":"sra/src/main/java/org/apache/syncope/sra/security/cas/CASAuthenticationWebFilter.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASAuthenticationWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASAuthenticationWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASAuthenticationWebFilter.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.cas;\n+\n+import java.net.URI;\n+import org.apache.syncope.sra.security.web.server.DoNothingIfCommittedServerRedirectStrategy;\n+import org.apache.syncope.sra.session.SessionUtils;\n+import org.jasig.cas.client.Protocol;\n+import org.jasig.cas.client.validation.Assertion;\n+import org.jasig.cas.client.validation.TicketValidationException;\n+import org.jasig.cas.client.validation.TicketValidator;\n+import org.jasig.cas.client.validation.json.Cas30JsonServiceTicketValidator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.authentication.ReactiveAuthenticationManager;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.web.server.ServerRedirectStrategy;\n+import org.springframework.security.web.server.WebFilterExchange;\n+import org.springframework.security.web.server.authentication.AuthenticationWebFilter;\n+import org.springframework.security.web.server.authentication.ServerAuthenticationConverter;\n+import org.springframework.security.web.server.authentication.ServerAuthenticationSuccessHandler;\n+import org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;\n+import reactor.core.publisher.Mono;\n+\n+public class CASAuthenticationWebFilter extends AuthenticationWebFilter {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CASAuthenticationWebFilter.class);\n+\n+    private final String serverName;\n+\n+    private final Protocol protocol;\n+\n+    private final TicketValidator ticketValidator;\n+\n+    public CASAuthenticationWebFilter(\n+            final ReactiveAuthenticationManager authenticationManager,\n+            final String serverName,\n+            final Protocol protocol,\n+            final String casServerUrlPrefix) {\n+\n+        super(authenticationManager);\n+\n+        this.serverName = serverName;\n+        this.protocol = protocol;\n+        this.ticketValidator = new Cas30JsonServiceTicketValidator(casServerUrlPrefix);\n+\n+        setRequiresAuthenticationMatcher(new AndServerWebExchangeMatcher(\n+                CASUtils.ticketAvailable(protocol),\n+                new NegatedServerWebExchangeMatcher(SessionUtils.authInSession())));\n+\n+        setServerAuthenticationConverter(validateAssertion());\n+\n+        setAuthenticationSuccessHandler(redirectToInitialRequestURI());\n+    }\n+\n+    private ServerAuthenticationConverter validateAssertion() {\n+        return exchange -> CASUtils.retrieveTicketFromRequest(exchange, this.protocol).\n+                flatMap(ticket -> {\n+                    try {\n+                        Assertion assertion = this.ticketValidator.validate(\n+                                ticket,\n+                                CASUtils.constructServiceUrl(exchange, this.serverName, this.protocol));\n+                        return Mono.just(new CASAuthenticationToken(assertion));\n+                    } catch (TicketValidationException e) {\n+                        LOG.error(\"Could not validate {}\", ticket, e);\n+                        throw new BadCredentialsException(\"Could not validate \" + ticket);\n+                    }\n+                });\n+    }\n+\n+    private ServerAuthenticationSuccessHandler redirectToInitialRequestURI() {\n+        return new ServerAuthenticationSuccessHandler() {\n+\n+            private final ServerRedirectStrategy redirectStrategy = new DoNothingIfCommittedServerRedirectStrategy();\n+\n+            @Override\n+            public Mono<Void> onAuthenticationSuccess(\n+                    final WebFilterExchange webFilterExchange, final Authentication authentication) {\n+\n+                return webFilterExchange.getExchange().getSession().\n+                        flatMap(session -> this.redirectStrategy.sendRedirect(\n+                        webFilterExchange.getExchange(),\n+                        session.<URI>getRequiredAttribute(SessionUtils.INITIAL_REQUEST_URI)));\n+            }\n+        };\n+    }\n+}"},{"sha":"1c159ba8c1e75e5ab54a9d0b927d62ceae385776","filename":"sra/src/main/java/org/apache/syncope/sra/security/cas/CASSecurityConfigUtils.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASSecurityConfigUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASSecurityConfigUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASSecurityConfigUtils.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.cas;\n+\n+import org.apache.syncope.sra.ApplicationContextUtils;\n+import org.apache.syncope.sra.security.LogoutRouteMatcher;\n+import org.apache.syncope.sra.security.PublicRouteMatcher;\n+import org.jasig.cas.client.Protocol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.security.authentication.ReactiveAuthenticationManager;\n+import org.springframework.security.config.web.server.SecurityWebFiltersOrder;\n+import org.springframework.security.config.web.server.ServerHttpSecurity;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.web.server.authentication.AuthenticationWebFilter;\n+import org.springframework.security.web.server.authentication.logout.LogoutWebFilter;\n+import org.springframework.security.web.server.context.WebSessionServerSecurityContextRepository;\n+import reactor.core.publisher.Mono;\n+\n+public final class CASSecurityConfigUtils {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CASSecurityConfigUtils.class);\n+\n+    private static ReactiveAuthenticationManager authenticationManager() {\n+        return authentication -> Mono.just(authentication).filter(Authentication::isAuthenticated);\n+    }\n+\n+    public static void forLogin(\n+            final ServerHttpSecurity http,\n+            final String serverName,\n+            final Protocol protocol,\n+            final String casServerUrlPrefix,\n+            final PublicRouteMatcher publicRouteMatcher) {\n+\n+        ReactiveAuthenticationManager authenticationManager = authenticationManager();\n+\n+        CASAuthenticationRequestWebFilter authRequestFilter = new CASAuthenticationRequestWebFilter(\n+                publicRouteMatcher,\n+                serverName,\n+                protocol,\n+                casServerUrlPrefix);\n+        http.addFilterAt(authRequestFilter, SecurityWebFiltersOrder.HTTP_BASIC);\n+\n+        AuthenticationWebFilter authenticationFilter = new CASAuthenticationWebFilter(\n+                authenticationManager,\n+                serverName, protocol,\n+                casServerUrlPrefix);\n+        authenticationFilter.setAuthenticationFailureHandler((exchange, ex) -> Mono.error(ex));\n+        authenticationFilter.setSecurityContextRepository(new WebSessionServerSecurityContextRepository());\n+        http.addFilterAt(authenticationFilter, SecurityWebFiltersOrder.AUTHENTICATION);\n+    }\n+\n+    public static void forLogout(\n+            final ServerHttpSecurity.AuthorizeExchangeSpec builder,\n+            final CacheManager cacheManager,\n+            final String casServerUrlPrefix,\n+            final LogoutRouteMatcher logoutRouteMatcher,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        LogoutWebFilter logoutWebFilter = new LogoutWebFilter();\n+        logoutWebFilter.setRequiresLogoutMatcher(logoutRouteMatcher);\n+\n+        logoutWebFilter.setLogoutHandler(new CASServerLogoutHandler(cacheManager, casServerUrlPrefix));\n+\n+        try {\n+            CASServerLogoutSuccessHandler handler = ApplicationContextUtils.getOrCreateBean(ctx,\n+                    CASServerLogoutSuccessHandler.class.getName(),\n+                    CASServerLogoutSuccessHandler.class);\n+            logoutWebFilter.setLogoutSuccessHandler(handler);\n+        } catch (ClassNotFoundException e) {\n+            LOG.error(\"While creating instance of {}\", CASServerLogoutSuccessHandler.class.getName(), e);\n+        }\n+\n+        builder.and().addFilterAt(logoutWebFilter, SecurityWebFiltersOrder.LOGOUT);\n+    }\n+\n+    private CASSecurityConfigUtils() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"3c62df027e3b9664826563dff0135ac32c9b0414","filename":"sra/src/main/java/org/apache/syncope/sra/security/cas/CASServerLogoutHandler.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASServerLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASServerLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASServerLogoutHandler.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.cas;\n+\n+import java.net.URI;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.sra.SessionConfig;\n+import org.apache.syncope.sra.security.web.server.DoNothingIfCommittedServerRedirectStrategy;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.web.server.ServerRedirectStrategy;\n+import org.springframework.security.web.server.WebFilterExchange;\n+import org.springframework.security.web.server.authentication.logout.ServerLogoutHandler;\n+import reactor.core.publisher.Mono;\n+\n+public class CASServerLogoutHandler implements ServerLogoutHandler {\n+\n+    private final ServerRedirectStrategy redirectStrategy = new DoNothingIfCommittedServerRedirectStrategy();\n+\n+    private final CacheManager cacheManager;\n+\n+    /**\n+     * The URL to the CAS Server logout.\n+     */\n+    private final String casServerLogoutUrl;\n+\n+    public CASServerLogoutHandler(final CacheManager cacheManager, final String casServerUrlPrefix) {\n+        this.cacheManager = cacheManager;\n+        this.casServerLogoutUrl = StringUtils.appendIfMissing(casServerUrlPrefix, \"/\") + \"logout\";\n+    }\n+\n+    @Override\n+    public Mono<Void> logout(final WebFilterExchange exchange, final Authentication authentication) {\n+        return exchange.getExchange().getSession().\n+                flatMap(session -> {\n+                    cacheManager.getCache(SessionConfig.DEFAULT_CACHE).evictIfPresent(session.getId());\n+\n+                    return session.invalidate().then(\n+                            redirectStrategy.sendRedirect(exchange.getExchange(), URI.create(this.casServerLogoutUrl)));\n+                }).onErrorResume(Mono::error);\n+    }\n+}"},{"sha":"9d5c4b644c3643ee99a4d452d0de2b66bdd7e664","filename":"sra/src/main/java/org/apache/syncope/sra/security/cas/CASServerLogoutSuccessHandler.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASServerLogoutSuccessHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASServerLogoutSuccessHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASServerLogoutSuccessHandler.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.cas;\n+\n+import org.apache.syncope.sra.security.AbstractServerLogoutSuccessHandler;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.web.server.WebFilterExchange;\n+import reactor.core.publisher.Mono;\n+\n+public class CASServerLogoutSuccessHandler extends AbstractServerLogoutSuccessHandler {\n+\n+    @Override\n+    public Mono<Void> onLogoutSuccess(final WebFilterExchange exchange, final Authentication authentication) {\n+        return Mono.just(authentication).\n+                flatMap(auth -> redirectStrategy.sendRedirect(exchange.getExchange(), getPostLogout(exchange)));\n+    }\n+}"},{"sha":"1f1931f76f4619a6bf2800c6a0325978af0b4a3c","filename":"sra/src/main/java/org/apache/syncope/sra/security/cas/CASUtils.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fcas%2FCASUtils.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security.cas;\n+\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jasig.cas.client.Protocol;\n+import org.jasig.cas.client.util.URIBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.util.UriComponents;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import reactor.core.publisher.Mono;\n+\n+public final class CASUtils {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CASUtils.class);\n+\n+    public static Mono<String> safeGetParameter(final ServerWebExchange exchange, final String parameter) {\n+        if (exchange.getRequest().getMethod() == HttpMethod.POST) {\n+            LOG.debug(\n+                    \"safeGetParameter called on a POST ServerHttpRequest for Restricted Parameters. \"\n+                    + \"Cannot complete check safely. \"\n+                    + \"Reverting to standard behavior for this Parameter\");\n+            return exchange.getFormData().\n+                    flatMap(form -> Mono.justOrEmpty(form.getFirst(parameter)));\n+        }\n+        return Mono.justOrEmpty(exchange.getRequest().getQueryParams().getFirst(parameter));\n+    }\n+\n+    public static Mono<String> retrieveTicketFromRequest(final ServerWebExchange exchange, final Protocol protocol) {\n+        return safeGetParameter(exchange, protocol.getArtifactParameterName());\n+    }\n+\n+    public static ServerWebExchangeMatcher ticketAvailable(final Protocol protocol) {\n+        return exchange -> CASUtils.retrieveTicketFromRequest(exchange, protocol).\n+                flatMap(ticket -> ServerWebExchangeMatcher.MatchResult.match()).\n+                switchIfEmpty(ServerWebExchangeMatcher.MatchResult.notMatch());\n+    }\n+\n+    public static String constructServiceUrl(\n+            final ServerWebExchange exchange,\n+            final String serverName,\n+            final Protocol protocol) {\n+\n+        UriComponents requestURI = UriComponentsBuilder.fromHttpRequest(exchange.getRequest()).build();\n+\n+        URIBuilder originalRequestUrl = new URIBuilder(\n+                StringUtils.substringBefore(requestURI.toUriString(), \"?\"), true);\n+        originalRequestUrl.setParameters(requestURI.getQuery());\n+\n+        URIBuilder builder;\n+        if (!serverName.startsWith(\"https://\") && !serverName.startsWith(\"http://\")) {\n+            String scheme = exchange.getRequest().getSslInfo() == null ? \"http://\" : \"https://\";\n+            builder = new URIBuilder(scheme + serverName, true);\n+        } else {\n+            builder = new URIBuilder(serverName, true);\n+        }\n+\n+        builder.setPort(requestURI.getPort());\n+\n+        builder.setEncodedPath(builder.getEncodedPath() + requestURI.getPath());\n+\n+        List<String> serviceParameterNames = List.of(protocol.getServiceParameterName().split(\",\"));\n+        if (!serviceParameterNames.isEmpty() && !originalRequestUrl.getQueryParams().isEmpty()) {\n+            originalRequestUrl.getQueryParams().stream().\n+                    filter(pair -> !pair.getName().equals(protocol.getArtifactParameterName())\n+                    && !serviceParameterNames.contains(pair.getName())).\n+                    forEach(pair -> {\n+                        String name = pair.getName();\n+                        if (name.contains(\"&\") || name.contains(\"=\")) {\n+                            URIBuilder encodedParamBuilder = new URIBuilder();\n+                            encodedParamBuilder.setParameters(name);\n+                            encodedParamBuilder.getQueryParams().stream().\n+                                    filter(pair2 -> !pair2.getName().equals(protocol.getArtifactParameterName())\n+                                    && !serviceParameterNames.contains(pair2.getName())).\n+                                    forEach(pair2 -> builder.addParameter(pair2.getName(), pair2.getValue()));\n+                        } else {\n+                            builder.addParameter(name, pair.getValue());\n+                        }\n+                    });\n+        }\n+\n+        String result = builder.toString();\n+        LOG.debug(\"serviceUrl generated: {}\", result);\n+        return result;\n+    }\n+\n+    private CASUtils() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"6a92551e02ce7124639bfa5a81eac22328c990ab","filename":"sra/src/main/java/org/apache/syncope/sra/security/oauth2/OAuth2SecurityConfigUtils.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOAuth2SecurityConfigUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOAuth2SecurityConfigUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOAuth2SecurityConfigUtils.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.sra.ApplicationContextUtils;\n import org.apache.syncope.sra.SecurityConfig.AMType;\n import org.apache.syncope.sra.security.LogoutRouteMatcher;\n-import org.apache.syncope.sra.security.SessionRemovalServerLogoutHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.cache.CacheManager;\n@@ -122,7 +121,7 @@ public static void forLogout(\n \n         LogoutWebFilter logoutWebFilter = new LogoutWebFilter();\n         logoutWebFilter.setRequiresLogoutMatcher(logoutRouteMatcher);\n-        logoutWebFilter.setLogoutHandler(new SessionRemovalServerLogoutHandler(cacheManager));\n+        logoutWebFilter.setLogoutHandler(new OAuth2SessionRemovalServerLogoutHandler(cacheManager));\n \n         if (AMType.OIDC == amType) {\n             try {"},{"sha":"9cf3d0ec6e6cbf1d7ddd73db3f75f3efe1435f3c","filename":"sra/src/main/java/org/apache/syncope/sra/security/oauth2/OAuth2SessionRemovalServerLogoutHandler.java","status":"renamed","additions":6,"deletions":11,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOAuth2SessionRemovalServerLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOAuth2SessionRemovalServerLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOAuth2SessionRemovalServerLogoutHandler.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -16,33 +16,28 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.sra.security;\n+package org.apache.syncope.sra.security.oauth2;\n \n import org.apache.syncope.sra.SessionConfig;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.cache.CacheManager;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.web.server.WebFilterExchange;\n import org.springframework.security.web.server.authentication.logout.ServerLogoutHandler;\n import reactor.core.publisher.Mono;\n \n-public class SessionRemovalServerLogoutHandler implements ServerLogoutHandler {\n-\n-    private static final Logger EVENTS = LoggerFactory.getLogger(\"events\");\n+public class OAuth2SessionRemovalServerLogoutHandler implements ServerLogoutHandler {\n \n     private final CacheManager cacheManager;\n \n-    public SessionRemovalServerLogoutHandler(final CacheManager cacheManager) {\n+    public OAuth2SessionRemovalServerLogoutHandler(final CacheManager cacheManager) {\n         this.cacheManager = cacheManager;\n     }\n \n     @Override\n     public Mono<Void> logout(final WebFilterExchange exchange, final Authentication authentication) {\n-        return exchange.getExchange().getSession().doOnNext(session -> {\n-            session.invalidate();\n-            EVENTS.debug(\"Invalidate session {}\", (authentication == null) ? null : authentication.getPrincipal());\n+        return exchange.getExchange().getSession().flatMap(session -> {\n             cacheManager.getCache(SessionConfig.DEFAULT_CACHE).evictIfPresent(session.getId());\n-        }).flatMap(session -> Mono.empty());\n+            return session.invalidate();\n+        });\n     }\n }","previous_filename":"sra/src/main/java/org/apache/syncope/sra/security/SessionRemovalServerLogoutHandler.java"},{"sha":"bf22e69e6c795dcf40d9ccc428a99b06dab20ee5","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/ServerWebExchangeContext.java","status":"renamed","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerWebExchangeContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerWebExchangeContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerWebExchangeContext.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -36,11 +36,11 @@\n import org.springframework.web.server.WebSession;\n import org.springframework.web.util.UriComponentsBuilder;\n \n-public class ServerHttpContext implements WebContext {\n+public class ServerWebExchangeContext implements WebContext {\n \n     private final ServerWebExchange exchange;\n \n-    private ServerHttpSessionStore sessionStore;\n+    private WebSessionStore sessionStore;\n \n     private MultiValueMap<String, String> form;\n \n@@ -52,8 +52,8 @@ public class ServerHttpContext implements WebContext {\n      * @param exchange the current exchange\n      * @param webSession the current web session\n      */\n-    public ServerHttpContext(final ServerWebExchange exchange, final WebSession webSession) {\n-        this(exchange, new ServerHttpSessionStore(webSession));\n+    public ServerWebExchangeContext(final ServerWebExchange exchange, final WebSession webSession) {\n+        this(exchange, new WebSessionStore(webSession));\n     }\n \n     /**\n@@ -62,22 +62,22 @@ public ServerHttpContext(final ServerWebExchange exchange, final WebSession webS\n      * @param exchange the current exchange\n      * @param sessionStore the session store to use\n      */\n-    public ServerHttpContext(\n+    public ServerWebExchangeContext(\n             final ServerWebExchange exchange,\n-            final ServerHttpSessionStore sessionStore) {\n+            final WebSessionStore sessionStore) {\n \n         CommonHelper.assertNotNull(\"exchange\", exchange);\n         CommonHelper.assertNotNull(\"sessionStore\", sessionStore);\n         this.exchange = exchange;\n         this.sessionStore = sessionStore;\n     }\n \n-    public ServerHttpSessionStore getNativeSessionStore() {\n+    public WebSessionStore getNativeSessionStore() {\n         return this.sessionStore;\n     }\n \n     @Override\n-    public SessionStore<ServerHttpContext> getSessionStore() {\n+    public SessionStore<ServerWebExchangeContext> getSessionStore() {\n         return this.sessionStore;\n     }\n \n@@ -103,7 +103,7 @@ public Optional<String> getRequestParameter(final String name) {\n         return Optional.empty();\n     }\n \n-    public ServerHttpContext setForm(final MultiValueMap<String, String> form) {\n+    public ServerWebExchangeContext setForm(final MultiValueMap<String, String> form) {\n         this.form = form;\n         return this;\n     }\n@@ -214,7 +214,7 @@ public String getPath() {\n         return exchange.getRequest().getPath().value();\n     }\n \n-    public ServerHttpContext setBody(final String body) {\n+    public ServerWebExchangeContext setBody(final String body) {\n         this.body = body;\n         return this;\n     }","previous_filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/ServerHttpContext.java"},{"sha":"c74336c69243299e14ed0a1817f78553bdf79fa7","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/WebSessionStore.java","status":"renamed","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FWebSessionStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FWebSessionStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FWebSessionStore.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -22,47 +22,47 @@\n import org.pac4j.core.context.session.SessionStore;\n import org.springframework.web.server.WebSession;\n \n-public class ServerHttpSessionStore implements SessionStore<ServerHttpContext> {\n+public class WebSessionStore implements SessionStore<ServerWebExchangeContext> {\n \n     private final WebSession webSession;\n \n-    public ServerHttpSessionStore(final WebSession webSession) {\n+    public WebSessionStore(final WebSession webSession) {\n         this.webSession = webSession;\n     }\n \n     @Override\n-    public String getOrCreateSessionId(final ServerHttpContext context) {\n+    public String getOrCreateSessionId(final ServerWebExchangeContext context) {\n         return this.webSession.getId();\n     }\n \n     @Override\n-    public Optional<Object> get(final ServerHttpContext context, final String key) {\n+    public Optional<Object> get(final ServerWebExchangeContext context, final String key) {\n         return Optional.ofNullable(this.webSession.getAttribute(key));\n     }\n \n     @Override\n-    public void set(final ServerHttpContext context, final String key, final Object value) {\n+    public void set(final ServerWebExchangeContext context, final String key, final Object value) {\n     }\n \n     @Override\n-    public boolean destroySession(final ServerHttpContext context) {\n+    public boolean destroySession(final ServerWebExchangeContext context) {\n         return false;\n     }\n \n     @Override\n-    public Optional<WebSession> getTrackableSession(final ServerHttpContext context) {\n+    public Optional<WebSession> getTrackableSession(final ServerWebExchangeContext context) {\n         return Optional.ofNullable(this.webSession);\n     }\n \n     @Override\n-    public Optional<SessionStore<ServerHttpContext>> buildFromTrackableSession(\n-            final ServerHttpContext context, final Object trackableSession) {\n+    public Optional<SessionStore<ServerWebExchangeContext>> buildFromTrackableSession(\n+            final ServerWebExchangeContext context, final Object trackableSession) {\n \n         return Optional.empty();\n     }\n \n     @Override\n-    public boolean renewSession(final ServerHttpContext context) {\n+    public boolean renewSession(final ServerWebExchangeContext context) {\n         return false;\n     }\n }","previous_filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/ServerHttpSessionStore.java"},{"sha":"6cf7be5d03706405749a668bea38e3584893bba9","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2AnonymousWebFilter.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AnonymousWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AnonymousWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AnonymousWebFilter.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -20,33 +20,33 @@\n \n import java.net.URI;\n import org.apache.syncope.sra.security.PublicRouteMatcher;\n+import org.apache.syncope.sra.session.SessionUtils;\n import org.springframework.http.HttpStatus;\n-import org.springframework.security.web.server.context.WebSessionServerSecurityContextRepository;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n import org.springframework.web.server.ServerWebExchange;\n import org.springframework.web.server.WebFilter;\n import org.springframework.web.server.WebFilterChain;\n import reactor.core.publisher.Mono;\n \n public class SAML2AnonymousWebFilter implements WebFilter {\n \n-    public static final String INITIAL_REQUEST_URI = \"INITIAL_REQUEST_URI\";\n-\n-    private final PublicRouteMatcher publicRouteMatcher;\n+    private final ServerWebExchangeMatcher matcher;\n \n     public SAML2AnonymousWebFilter(final PublicRouteMatcher publicRouteMatcher) {\n-        this.publicRouteMatcher = publicRouteMatcher;\n+        this.matcher = ServerWebExchangeMatchers.matchers(\n+                publicRouteMatcher,\n+                SessionUtils.authInSession());\n     }\n \n     @Override\n     public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {\n-        return publicRouteMatcher.matches(exchange).\n+        return matcher.matches(exchange).\n                 filter(matchResult -> !matchResult.isMatch()).\n-                flatMap(r -> exchange.getSession()).flatMap(r -> exchange.getSession()).\n-                filter(s -> !s.getAttributes().containsKey(\n-                WebSessionServerSecurityContextRepository.DEFAULT_SPRING_SECURITY_CONTEXT_ATTR_NAME)).\n                 switchIfEmpty(chain.filter(exchange).then(Mono.empty())).\n+                flatMap(r -> exchange.getSession()).\n                 flatMap(session -> {\n-                    session.getAttributes().put(INITIAL_REQUEST_URI, exchange.getRequest().getURI());\n+                    session.getAttributes().put(SessionUtils.INITIAL_REQUEST_URI, exchange.getRequest().getURI());\n \n                     exchange.getResponse().setStatusCode(HttpStatus.SEE_OTHER);\n                     exchange.getResponse().getHeaders()."},{"sha":"b595d57784737443816eaaef1881a8c995d52e8f","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2RequestGenerator.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestGenerator.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.sra.security.saml2;\n \n-import org.apache.syncope.sra.security.pac4j.ServerHttpContext;\n+import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import java.net.URI;\n import org.pac4j.core.exception.http.RedirectionAction;\n import org.pac4j.core.exception.http.WithContentAction;\n@@ -38,13 +38,13 @@ protected SAML2RequestGenerator(final SAML2Client saml2Client) {\n \n     protected Mono<Void> handle(\n             final RedirectionAction action,\n-            final ServerHttpContext shc) {\n+            final ServerWebExchangeContext swec) {\n \n         if (action instanceof WithLocationAction) {\n             WithLocationAction withLocationAction = (WithLocationAction) action;\n-            shc.getNative().getResponse().setStatusCode(HttpStatus.FOUND);\n-            shc.getNative().getResponse().getHeaders().setLocation(URI.create(withLocationAction.getLocation()));\n-            return shc.getNative().getResponse().setComplete();\n+            swec.getNative().getResponse().setStatusCode(HttpStatus.FOUND);\n+            swec.getNative().getResponse().getHeaders().setLocation(URI.create(withLocationAction.getLocation()));\n+            return swec.getNative().getResponse().setComplete();\n         } else if (action instanceof WithContentAction) {\n             WithContentAction withContentAction = (WithContentAction) action;\n             String content = withContentAction.getContent();\n@@ -54,9 +54,9 @@ protected Mono<Void> handle(\n             }\n \n             return Mono.defer(() -> {\n-                shc.getNative().getResponse().getHeaders().setContentType(MediaType.TEXT_HTML);\n-                return shc.getNative().getResponse().\n-                        writeWith(Mono.just(shc.getNative().getResponse().bufferFactory().wrap(content.getBytes())));\n+                swec.getNative().getResponse().getHeaders().setContentType(MediaType.TEXT_HTML);\n+                return swec.getNative().getResponse().\n+                        writeWith(Mono.just(swec.getNative().getResponse().bufferFactory().wrap(content.getBytes())));\n             });\n         } else {\n             throw new IllegalArgumentException(\"Unsupported Action: \" + action.getClass().getName());"},{"sha":"63001da83b6b61c2340e7bfc5a5684af4e523599","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2SecurityConfigUtils.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2SecurityConfigUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2SecurityConfigUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2SecurityConfigUtils.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -24,6 +24,7 @@\n import org.pac4j.saml.client.SAML2Client;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.cache.CacheManager;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.security.authentication.ReactiveAuthenticationManager;\n import org.springframework.security.config.web.server.SecurityWebFiltersOrder;\n@@ -40,8 +41,7 @@ public final class SAML2SecurityConfigUtils {\n     private static final Logger LOG = LoggerFactory.getLogger(SAML2SecurityConfigUtils.class);\n \n     private static ReactiveAuthenticationManager authenticationManager() {\n-        return authentication -> Mono.just(authentication).\n-                filter(Authentication::isAuthenticated);\n+        return authentication -> Mono.just(authentication).filter(Authentication::isAuthenticated);\n     }\n \n     public static void forLogin(\n@@ -68,23 +68,22 @@ public static void forLogin(\n     public static void forLogout(\n             final ServerHttpSecurity.AuthorizeExchangeSpec builder,\n             final SAML2Client saml2Client,\n+            final CacheManager cacheManager,\n             final LogoutRouteMatcher logoutRouteMatcher,\n             final ConfigurableApplicationContext ctx) {\n \n         LogoutWebFilter logoutWebFilter = new LogoutWebFilter();\n         logoutWebFilter.setRequiresLogoutMatcher(logoutRouteMatcher);\n \n-        SAML2ServerLogoutHandler logoutHandler = new SAML2ServerLogoutHandler(saml2Client);\n-        logoutWebFilter.setLogoutHandler(logoutHandler);\n+        logoutWebFilter.setLogoutHandler(new SAML2ServerLogoutHandler(saml2Client, cacheManager));\n \n         try {\n             SAML2ServerLogoutSuccessHandler handler = ApplicationContextUtils.getOrCreateBean(ctx,\n                     SAML2ServerLogoutSuccessHandler.class.getName(),\n                     SAML2ServerLogoutSuccessHandler.class);\n             logoutWebFilter.setLogoutSuccessHandler(handler);\n         } catch (ClassNotFoundException e) {\n-            LOG.error(\"While creating instance of {}\",\n-                    SAML2ServerLogoutSuccessHandler.class.getName(), e);\n+            LOG.error(\"While creating instance of {}\", SAML2ServerLogoutSuccessHandler.class.getName(), e);\n         }\n \n         builder.and().addFilterAt(logoutWebFilter, SecurityWebFiltersOrder.LOGOUT);"},{"sha":"09590651f74d7d1f10783c378dd96143263c990f","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2ServerLogoutHandler.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2ServerLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2ServerLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2ServerLogoutHandler.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -18,11 +18,13 @@\n  */\n package org.apache.syncope.sra.security.saml2;\n \n-import org.apache.syncope.sra.security.pac4j.ServerHttpContext;\n+import org.apache.syncope.sra.SessionConfig;\n+import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.credentials.SAML2Credentials;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.cache.CacheManager;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.web.server.WebFilterExchange;\n import org.springframework.security.web.server.authentication.logout.ServerLogoutHandler;\n@@ -32,8 +34,11 @@ public class SAML2ServerLogoutHandler extends SAML2RequestGenerator implements S\n \n     private static final Logger LOG = LoggerFactory.getLogger(SAML2ServerLogoutHandler.class);\n \n-    public SAML2ServerLogoutHandler(final SAML2Client saml2Client) {\n+    private final CacheManager cacheManager;\n+\n+    public SAML2ServerLogoutHandler(final SAML2Client saml2Client, final CacheManager cacheManager) {\n         super(saml2Client);\n+        this.cacheManager = cacheManager;\n     }\n \n     @Override\n@@ -45,11 +50,12 @@ public Mono<Void> logout(final WebFilterExchange exchange, final Authentication\n                     LOG.debug(\"Creating SAML2 SP Logout Request for IDP[{}] and Profile[{}]\",\n                             saml2Client.getIdentityProviderResolvedEntityId(), credentials.getUserProfile());\n \n-                    ServerHttpContext shc = new ServerHttpContext(exchange.getExchange(), session);\n+                    ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange.getExchange(), session);\n \n+                    cacheManager.getCache(SessionConfig.DEFAULT_CACHE).evictIfPresent(session.getId());\n                     return session.invalidate().then(\n-                            saml2Client.getLogoutAction(shc, credentials.getUserProfile(), null).\n-                                    map(action -> handle(action, shc)).\n+                            saml2Client.getLogoutAction(swec, credentials.getUserProfile(), null).\n+                                    map(action -> handle(action, swec)).\n                                     orElseThrow(() -> new IllegalStateException(\"No action generated\")));\n                 }).onErrorResume(Mono::error);\n     }"},{"sha":"ab1819c38d888559d64bf59b48c9d71de23622e8","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2WebSsoAuthenticationRequestWebFilter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.sra.security.saml2;\n \n-import org.apache.syncope.sra.security.pac4j.ServerHttpContext;\n+import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import org.pac4j.saml.client.SAML2Client;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -57,10 +57,10 @@ public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain\n                     LOG.debug(\"Creating SAML2 SP Authentication Request for IDP[{}]\",\n                             saml2Client.getIdentityProviderResolvedEntityId());\n \n-                    ServerHttpContext shc = new ServerHttpContext(exchange, session);\n+                    ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange, session);\n \n-                    return saml2Client.getRedirectionAction(shc).\n-                            map(action -> handle(action, shc)).\n+                    return saml2Client.getRedirectionAction(swec).\n+                            map(action -> handle(action, swec)).\n                             orElseThrow(() -> new IllegalStateException(\"No action generated\"));\n                 }).onErrorResume(Mono::error);\n     }"},{"sha":"0cbd9f77628a382048d8348cf5098de133410342","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2WebSsoAuthenticationWebFilter.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.syncope.sra.security.saml2;\n \n-import org.apache.syncope.sra.security.pac4j.ServerHttpContext;\n import java.net.URI;\n+import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import org.apache.syncope.sra.security.web.server.DoNothingIfCommittedServerRedirectStrategy;\n+import org.apache.syncope.sra.session.SessionUtils;\n import org.pac4j.core.util.Pac4jConstants;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.credentials.SAML2Credentials;\n@@ -87,12 +88,12 @@ private ServerAuthenticationConverter convertSamlResponse() {\n                 flatMap(form -> this.matcher.matches(exchange).\n                 flatMap(matchResult -> exchange.getSession()).\n                 flatMap(session -> {\n-                    ServerHttpContext shc = new ServerHttpContext(exchange, session).setForm(form);\n+                    ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange, session).setForm(form);\n \n-                    SAML2Credentials credentials = saml2Client.getCredentialsExtractor().extract(shc).\n+                    SAML2Credentials credentials = saml2Client.getCredentialsExtractor().extract(swec).\n                             orElseThrow(() -> new IllegalStateException(\"No AuthnResponse found\"));\n \n-                    saml2Client.getAuthenticator().validate(credentials, shc);\n+                    saml2Client.getAuthenticator().validate(credentials, swec);\n \n                     return Mono.just(new SAML2AuthenticationToken(credentials));\n                 }));\n@@ -110,7 +111,7 @@ public Mono<Void> onAuthenticationSuccess(\n                 return webFilterExchange.getExchange().getSession().\n                         flatMap(session -> this.redirectStrategy.sendRedirect(\n                         webFilterExchange.getExchange(),\n-                        (URI) session.getRequiredAttribute(SAML2AnonymousWebFilter.INITIAL_REQUEST_URI)));\n+                        session.<URI>getRequiredAttribute(SessionUtils.INITIAL_REQUEST_URI)));\n             }\n         };\n     }"},{"sha":"0f0b490250e6e40a85aeb8eb5ab85cfd44908588","filename":"sra/src/main/java/org/apache/syncope/sra/session/SessionUtils.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsession%2FSessionUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsession%2FSessionUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsession%2FSessionUtils.java?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.session;\n+\n+import org.springframework.security.web.server.context.WebSessionServerSecurityContextRepository;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+\n+public final class SessionUtils {\n+\n+    public static final String INITIAL_REQUEST_URI = \"INITIAL_REQUEST_URI\";\n+\n+    public static ServerWebExchangeMatcher authInSession() {\n+        return exchange -> exchange.getSession().\n+                filter(session -> session.getAttributes().containsKey(\n+                WebSessionServerSecurityContextRepository.DEFAULT_SPRING_SECURITY_CONTEXT_ATTR_NAME)).\n+                flatMap(session -> ServerWebExchangeMatcher.MatchResult.match()).\n+                switchIfEmpty(ServerWebExchangeMatcher.MatchResult.notMatch());\n+    }\n+\n+    private SessionUtils() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"b74d3a4e3360f65cb13e9c019a7ec8b8da309935","filename":"sra/src/test/resources/debug/application-debug.properties","status":"modified","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aaaced89f94f30c3280d4cc3d57a880a52a94571/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties?ref=aaaced89f94f30c3280d4cc3d57a880a52a94571","patch":"@@ -30,16 +30,20 @@\n #am.oauth2.client.id=oauth2TestClientId\n #am.oauth2.client.secret=oauth2TestClientSecret\n \n-am.type=SAML2\n-am.saml2.sp.authnrequest.binding=POST\n-am.saml2.sp.logout.request.binding=POST\n-am.saml2.sp.logout.response.binding=POST\n-am.saml2.sp.entityId=http://localhost:8080\n-am.saml2.sp.skew=300\n-am.saml2.idp=http://localhost:9080/syncope-wa/idp/metadata\n-am.saml2.keystore=classpath:/saml.keystore.jks\n-am.saml2.keystore.type=jks\n-am.saml2.keystore.storepass=changeit\n-am.saml2.keystore.keypass=changeit\n+#am.type=SAML2\n+#am.saml2.sp.authnrequest.binding=POST\n+#am.saml2.sp.logout.request.binding=POST\n+#am.saml2.sp.logout.response.binding=POST\n+#am.saml2.sp.entityId=http://localhost:8080\n+#am.saml2.sp.skew=300\n+#am.saml2.idp=http://localhost:9080/syncope-wa/idp/metadata\n+#am.saml2.keystore=classpath:/saml.keystore.jks\n+#am.saml2.keystore.type=jks\n+#am.saml2.keystore.storepass=changeit\n+#am.saml2.keystore.keypass=changeit\n+\n+am.type=CAS\n+am.cas.server.name=http://localhost:80\n+am.cas.url.prefix=http://localhost:9080/syncope-wa/\n \n global.postLogout=http://localhost:8080/logout"}]}