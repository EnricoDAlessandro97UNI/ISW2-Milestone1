{"sha":"5922db7a689ed8287a04bf107ea9beeaaff02d02","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU5MjJkYjdhNjg5ZWQ4Mjg3YTA0YmYxMDdlYTliZWVhYWZmMDJkMDI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-09-27T06:17:16Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-09-27T06:26:06Z"},"message":"[SYNCOPE-1498] Injecting Spring Environment into ContentLoaderHandler and resolving variables via StringSubstitutor","tree":{"sha":"62b7fd33c2f7983549c4b2f983393ddd35e15409","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/62b7fd33c2f7983549c4b2f983393ddd35e15409"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5922db7a689ed8287a04bf107ea9beeaaff02d02","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5922db7a689ed8287a04bf107ea9beeaaff02d02","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5922db7a689ed8287a04bf107ea9beeaaff02d02","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5922db7a689ed8287a04bf107ea9beeaaff02d02/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5f4d29b3f83b195182bdbe38738e77f8abe18150","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5f4d29b3f83b195182bdbe38738e77f8abe18150","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5f4d29b3f83b195182bdbe38738e77f8abe18150"}],"stats":{"total":82,"additions":53,"deletions":29},"files":[{"sha":"15f9e04e9f28eabcfbcce5a0cb076090bb0c1c86","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/ContentLoaderHandler.java","status":"modified","additions":45,"deletions":26,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5922db7a689ed8287a04bf107ea9beeaaff02d02/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5922db7a689ed8287a04bf107ea9beeaaff02d02/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java?ref=5922db7a689ed8287a04bf107ea9beeaaff02d02","patch":"@@ -26,9 +26,12 @@\n \n import javax.sql.DataSource;\n import javax.xml.bind.DatatypeConverter;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.text.StringSubstitutor;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.core.env.Environment;\n import org.springframework.dao.DataAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.xml.sax.Attributes;\n@@ -48,21 +51,31 @@ public class ContentLoaderHandler extends DefaultHandler {\n \n     private final boolean continueOnError;\n \n-    public ContentLoaderHandler(final DataSource dataSource, final String rootElement, final boolean continueOnError) {\n+    private final StringSubstitutor envParamSubstitutor;\n+\n+    public ContentLoaderHandler(\n+            final DataSource dataSource,\n+            final String rootElement,\n+            final boolean continueOnError,\n+            final Environment env) {\n+\n         this.jdbcTemplate = new JdbcTemplate(dataSource);\n         this.rootElement = rootElement;\n         this.continueOnError = continueOnError;\n+        this.envParamSubstitutor = new StringSubstitutor(key -> {\n+            String value = env.getProperty(key);\n+            return StringUtils.isBlank(value) ? null : value;\n+        });\n     }\n \n     private Object[] getParameters(final String tableName, final Attributes attrs) {\n         Map<String, Integer> colTypes = jdbcTemplate.query(\n                 \"SELECT * FROM \" + tableName + \" WHERE 0=1\", rs -> {\n-                    Map<String, Integer> colTypes1 = new HashMap<>();\n+                    Map<String, Integer> types = new HashMap<>();\n                     for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {\n-                        colTypes1.put(\n-                                rs.getMetaData().getColumnName(i).toUpperCase(), rs.getMetaData().getColumnType(i));\n+                        types.put(rs.getMetaData().getColumnName(i).toUpperCase(), rs.getMetaData().getColumnType(i));\n                     }\n-                    return colTypes1;\n+                    return types;\n                 });\n \n         Object[] parameters = new Object[attrs.getLength()];\n@@ -73,87 +86,93 @@ private Object[] getParameters(final String tableName, final Attributes attrs) {\n                 colType = Types.VARCHAR;\n             }\n \n+            String value = envParamSubstitutor.replace(attrs.getValue(i));\n+            if (value == null) {\n+                LOG.warn(\"Variable ${} could not be resolved\", attrs.getValue(i));\n+                value = attrs.getValue(i);\n+            }\n+\n             switch (colType) {\n                 case Types.INTEGER:\n                 case Types.TINYINT:\n                 case Types.SMALLINT:\n                     try {\n-                        parameters[i] = Integer.valueOf(attrs.getValue(i));\n+                        parameters[i] = Integer.valueOf(value);\n                     } catch (NumberFormatException e) {\n-                        LOG.error(\"Unparsable Integer '{}'\", attrs.getValue(i));\n-                        parameters[i] = attrs.getValue(i);\n+                        LOG.error(\"Unparsable Integer '{}'\", value);\n+                        parameters[i] = value;\n                     }\n                     break;\n \n                 case Types.NUMERIC:\n                 case Types.DECIMAL:\n                 case Types.BIGINT:\n                     try {\n-                        parameters[i] = Long.valueOf(attrs.getValue(i));\n+                        parameters[i] = Long.valueOf(value);\n                     } catch (NumberFormatException e) {\n-                        LOG.error(\"Unparsable Long '{}'\", attrs.getValue(i));\n-                        parameters[i] = attrs.getValue(i);\n+                        LOG.error(\"Unparsable Long '{}'\", value);\n+                        parameters[i] = value;\n                     }\n                     break;\n \n                 case Types.DOUBLE:\n                     try {\n-                        parameters[i] = Double.valueOf(attrs.getValue(i));\n+                        parameters[i] = Double.valueOf(value);\n                     } catch (NumberFormatException e) {\n-                        LOG.error(\"Unparsable Double '{}'\", attrs.getValue(i));\n-                        parameters[i] = attrs.getValue(i);\n+                        LOG.error(\"Unparsable Double '{}'\", value);\n+                        parameters[i] = value;\n                     }\n                     break;\n \n                 case Types.REAL:\n                 case Types.FLOAT:\n                     try {\n-                        parameters[i] = Float.valueOf(attrs.getValue(i));\n+                        parameters[i] = Float.valueOf(value);\n                     } catch (NumberFormatException e) {\n-                        LOG.error(\"Unparsable Float '{}'\", attrs.getValue(i));\n-                        parameters[i] = attrs.getValue(i);\n+                        LOG.error(\"Unparsable Float '{}'\", value);\n+                        parameters[i] = value;\n                     }\n                     break;\n \n                 case Types.DATE:\n                 case Types.TIME:\n                 case Types.TIMESTAMP:\n                     try {\n-                        parameters[i] = FormatUtils.parseDate(attrs.getValue(i));\n+                        parameters[i] = FormatUtils.parseDate(value);\n                     } catch (ParseException e) {\n-                        LOG.error(\"Unparsable Date '{}'\", attrs.getValue(i));\n-                        parameters[i] = attrs.getValue(i);\n+                        LOG.error(\"Unparsable Date '{}'\", value);\n+                        parameters[i] = value;\n                     }\n                     break;\n \n                 case Types.BIT:\n                 case Types.BOOLEAN:\n-                    parameters[i] = \"1\".equals(attrs.getValue(i)) ? Boolean.TRUE : Boolean.FALSE;\n+                    parameters[i] = \"1\".equals(value) ? Boolean.TRUE : Boolean.FALSE;\n                     break;\n \n                 case Types.BINARY:\n                 case Types.VARBINARY:\n                 case Types.LONGVARBINARY:\n                     try {\n-                        parameters[i] = DatatypeConverter.parseHexBinary(attrs.getValue(i));\n+                        parameters[i] = DatatypeConverter.parseHexBinary(value);\n                     } catch (IllegalArgumentException e) {\n-                        parameters[i] = attrs.getValue(i);\n+                        parameters[i] = value;\n                     }\n                     break;\n \n                 case Types.BLOB:\n                     try {\n-                        parameters[i] = DatatypeConverter.parseHexBinary(attrs.getValue(i));\n+                        parameters[i] = DatatypeConverter.parseHexBinary(value);\n                     } catch (IllegalArgumentException e) {\n                         LOG.warn(\"Error decoding hex string to specify a blob parameter\", e);\n-                        parameters[i] = attrs.getValue(i);\n+                        parameters[i] = value;\n                     } catch (Exception e) {\n                         LOG.warn(\"Error creating a new blob parameter\", e);\n                     }\n                     break;\n \n                 default:\n-                    parameters[i] = attrs.getValue(i);\n+                    parameters[i] = value;\n             }\n         }\n "},{"sha":"db95a6a9305790399b2de3256c8a12d4afa52d70","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5922db7a689ed8287a04bf107ea9beeaaff02d02/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5922db7a689ed8287a04bf107ea9beeaaff02d02/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java?ref=5922db7a689ed8287a04bf107ea9beeaaff02d02","patch":"@@ -33,6 +33,8 @@\n import org.apache.syncope.core.spring.ResourceWithFallbackLoader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.env.Environment;\n import org.springframework.core.io.support.PropertiesLoaderUtils;\n import org.springframework.dao.DataAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n@@ -54,6 +56,9 @@ public class XMLContentLoader implements ContentLoader {\n     @Resource(name = \"indexesXML\")\n     private ResourceWithFallbackLoader indexesXML;\n \n+    @Autowired\n+    private Environment env;\n+\n     @Override\n     public int getOrder() {\n         return 400;\n@@ -101,15 +106,15 @@ public void load(final String domain, final DataSource datasource) {\n         }\n     }\n \n-    private static void loadDefaultContent(\n-        final String domain, final InputStream contentXML, final DataSource dataSource)\n+    private void loadDefaultContent(\n+            final String domain, final InputStream contentXML, final DataSource dataSource)\n             throws IOException, ParserConfigurationException, SAXException {\n \n         SAXParserFactory factory = SAXParserFactory.newInstance();\n         factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);\n         try (contentXML) {\n             SAXParser parser = factory.newSAXParser();\n-            parser.parse(contentXML, new ContentLoaderHandler(dataSource, ROOT_ELEMENT, true));\n+            parser.parse(contentXML, new ContentLoaderHandler(dataSource, ROOT_ELEMENT, true, env));\n             LOG.debug(\"[{}] Default content successfully loaded\", domain);\n         }\n     }"}]}