{"sha":"a42103ffd0b7b8966626644945c1016a68d7d0b5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE0MjEwM2ZmZDBiN2I4OTY2NjI2NjQ0OTQ1YzEwMTZhNjhkN2QwYjU=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-25T09:46:17Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-25T09:46:17Z"},"message":"Fixes #68\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246650 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"42cb6f6cd3c6566fcfd5ac9d688d60ac95db01e1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/42cb6f6cd3c6566fcfd5ac9d688d60ac95db01e1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a42103ffd0b7b8966626644945c1016a68d7d0b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a42103ffd0b7b8966626644945c1016a68d7d0b5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a42103ffd0b7b8966626644945c1016a68d7d0b5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a42103ffd0b7b8966626644945c1016a68d7d0b5/comments","author":null,"committer":null,"parents":[{"sha":"dfd1dceecb56544fae7528b48c55c1d845f4b6ec","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dfd1dceecb56544fae7528b48c55c1d845f4b6ec","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dfd1dceecb56544fae7528b48c55c1d845f4b6ec"}],"stats":{"total":625,"additions":401,"deletions":224},"files":[{"sha":"bcc224b1d6f33865b2443f0c8169f490b14c0ba1","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceLoader.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -148,6 +148,7 @@ public final void contextInitialized(final ServletContextEvent sce) {\n         List<ConnectorInstance> instances = connectorInstanceDAO.findAll();\n         for (ConnectorInstance instance : instances) {\n             try {\n+                LOG.error(\"register connector {}\", instance);\n                 registerConnector(instance);\n             } catch (NotFoundException e) {\n                 LOG.error(\"While loading connector bundle for instance \""},{"sha":"39557ceeb52e33b87cb2995c5cc46ff9873cce87","filename":"core/src/main/java/org/syncope/core/persistence/beans/Task.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -26,6 +26,7 @@\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n@@ -92,7 +93,8 @@ public class Task extends AbstractBaseBean {\n     /**\n      * When this task has been (or will be) executed, what its result was.\n      */\n-    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"task\")\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"task\",\n+    fetch = FetchType.EAGER)\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private List<TaskExecution> executions;\n "},{"sha":"1508c32745b213ddc389f79136006f4e7a4421cb","filename":"core/src/main/java/org/syncope/core/persistence/beans/TaskExecution.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExecution.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExecution.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExecution.java?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -15,6 +15,7 @@\n package org.syncope.core.persistence.beans;\n \n import java.util.Date;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n@@ -69,7 +70,8 @@ public class TaskExecution extends AbstractBaseBean {\n     /**\n      * The referred task.\n      */\n-    @ManyToOne(fetch = FetchType.LAZY)\n+    @ManyToOne(cascade = {CascadeType.MERGE, CascadeType.REFRESH},\n+    fetch = FetchType.LAZY)\n     private Task task;\n \n     /**"},{"sha":"b9abaf4cd034caac9c308d4f9c76938924552fc0","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -249,15 +249,18 @@ public void setWorkflowId(Long workflowEntryId) {\n     }\n \n     public void generateToken(\n-            int tokenLength, int tokenExpireTime, String prefix) {\n+            int tokenLength, int tokenExpireTime) {\n+        generateToken(tokenLength, tokenExpireTime, null);\n+    }\n \n-        if (prefix == null || prefix.isEmpty()) {\n-            prefix = \"\";\n-        } else {\n-            prefix += \"|\";\n+    public void generateToken(\n+            int tokenLength, int tokenExpireTime, String token) {\n+\n+        if (token == null) {\n+            token = RandomStringUtils.randomAlphanumeric(tokenLength);\n         }\n \n-        token = prefix + RandomStringUtils.randomAlphanumeric(tokenLength);\n+        this.token = token;\n \n         Calendar calendar = Calendar.getInstance();\n         calendar.add(Calendar.MINUTE, tokenExpireTime);\n@@ -277,15 +280,9 @@ public Date getTokenExpireTime() {\n         return tokenExpireTime;\n     }\n \n-    public boolean checkToken(final String token, String prefix) {\n-        if (prefix == null || prefix.isEmpty()) {\n-            prefix = \"\";\n-        } else {\n-            prefix += \"|\";\n-        }\n+    public boolean checkToken(final String token) {\n \n-        return token.startsWith(prefix)\n-                && this.token.equals(token)\n+        return this.token.equals(token)\n                 && tokenExpireTime.after(new Date());\n     }\n }"},{"sha":"f2020a2cd649fb006ad8e24d4593e4c029517115","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ConnectorFacadeProxy.java","status":"modified","additions":68,"deletions":6,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -33,6 +33,7 @@\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.types.ConnectorCapability;\n import org.syncope.types.PropagationMode;\n+import org.syncope.types.ResourceOperationType;\n \n /**\n  * Intercept calls to ConnectorFacade's methods and check if the correspondant\n@@ -46,10 +47,12 @@ public class ConnectorFacadeProxy {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(\n             ConnectorFacadeProxy.class);\n+\n     /**\n      * Connector facade wrapped instance.\n      */\n     private final ConnectorFacade connector;\n+\n     /**\n      * Set of configure connecto instance capabilities.\n      * @see org.syncope.core.persistence.beans.ConnectorInstance\n@@ -144,10 +147,12 @@ public ConnectorFacadeProxy(final ConnectorInstance connectorInstance)\n         this.capabitilies = connectorInstance.getCapabilities();\n     }\n \n-    public Uid create(final PropagationMode propagationMode,\n+    public Uid create(\n+            final PropagationMode propagationMode,\n             final ObjectClass oclass,\n             final Set<Attribute> attrs,\n-            final OperationOptions options) {\n+            final OperationOptions options,\n+            final Set<String> triedPropagationRequests) {\n \n         Uid result = null;\n \n@@ -157,6 +162,10 @@ public Uid create(final PropagationMode propagationMode,\n                 : capabitilies.contains(\n                 ConnectorCapability.ASYNC_CREATE)) {\n \n+            if (triedPropagationRequests != null) {\n+                triedPropagationRequests.add(\"create\");\n+            }\n+\n             result = connector.create(oclass, attrs, options);\n             if (result == null) {\n                 throw new IllegalStateException(\"Error creating user\");\n@@ -166,7 +175,8 @@ public Uid create(final PropagationMode propagationMode,\n         return result;\n     }\n \n-    public Uid resolveUsername(final ObjectClass objectClass,\n+    public Uid resolveUsername(\n+            final ObjectClass objectClass,\n             final String username,\n             final OperationOptions options) {\n \n@@ -179,20 +189,67 @@ public Uid resolveUsername(final ObjectClass objectClass,\n         return result;\n     }\n \n+    public Uid resolveUsernameForUpdate(\n+            final PropagationMode propagationMode,\n+            final ResourceOperationType operationType,\n+            final ObjectClass objectClass,\n+            final String username,\n+            final OperationOptions options) {\n+\n+        Uid result = null;\n+\n+        if (capabitilies.contains(ConnectorCapability.RESOLVE)) {\n+            switch (operationType) {\n+                case CREATE:\n+                    if (propagationMode == PropagationMode.SYNC\n+                            ? capabitilies.contains(\n+                            ConnectorCapability.SYNC_CREATE)\n+                            : capabitilies.contains(\n+                            ConnectorCapability.ASYNC_CREATE)) {\n+\n+                        result = connector.resolveUsername(\n+                                objectClass, username, options);\n+                    }\n+                    break;\n+                case UPDATE:\n+                    if (propagationMode == PropagationMode.SYNC\n+                            ? capabitilies.contains(\n+                            ConnectorCapability.SYNC_UPDATE)\n+                            : capabitilies.contains(\n+                            ConnectorCapability.ASYNC_UPDATE)) {\n+\n+                        result = connector.resolveUsername(\n+                                objectClass, username, options);\n+                    }\n+                    break;\n+                default:\n+                    result = connector.resolveUsername(\n+                            objectClass, username, options);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     public Uid update(final PropagationMode propagationMode,\n             final ObjectClass objclass,\n             final Uid uid,\n             final Set<Attribute> replaceAttributes,\n-            final OperationOptions options) {\n+            final OperationOptions options,\n+            final Set<String> triedPropagationRequests) {\n \n-        Uid result = uid;\n+        Uid result = null;\n \n         if (propagationMode == PropagationMode.SYNC\n                 ? capabitilies.contains(\n                 ConnectorCapability.SYNC_UPDATE)\n                 : capabitilies.contains(\n                 ConnectorCapability.ASYNC_UPDATE)) {\n \n+            if (triedPropagationRequests != null) {\n+                triedPropagationRequests.add(\"update\");\n+            }\n+\n             result = connector.update(\n                     objclass, uid, replaceAttributes, options);\n             if (result == null) {\n@@ -206,14 +263,19 @@ public Uid update(final PropagationMode propagationMode,\n     public void delete(final PropagationMode propagationMode,\n             final ObjectClass objClass,\n             final Uid uid,\n-            final OperationOptions options) {\n+            final OperationOptions options,\n+            final Set<String> triedPropagationRequests) {\n \n         if (propagationMode == PropagationMode.SYNC\n                 ? capabitilies.contains(\n                 ConnectorCapability.SYNC_DELETE)\n                 : capabitilies.contains(\n                 ConnectorCapability.ASYNC_DELETE)) {\n \n+            if (triedPropagationRequests != null) {\n+                triedPropagationRequests.add(\"delete\");\n+            }\n+\n             connector.delete(objClass, uid, options);\n         }\n     }"},{"sha":"8cbc8edde2885cbe4d8694eb341fd9565a2611d1","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":100,"deletions":51,"changes":151,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -32,7 +32,6 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.AbstractSchema;\n@@ -215,32 +214,35 @@ private void provision(\n                 task.setAttributes(\n                         preparedAttributes.values().iterator().next());\n \n-                execution = new TaskExecution();\n-                execution.setTask(task);\n-                task.addExecution(execution);\n+                LOG.debug(\"Execution started for {}\", task);\n \n                 task = taskDAO.save(task);\n-                // re-read it after saving\n-                execution = task.getExecutions().get(0);\n \n-                LOG.debug(\"Execution started for {}\", task);\n+                TaskExecution taskExecution = new TaskExecution();\n+                taskExecution.setTask(task);\n \n-                if (PropagationMode.SYNC\n-                        == execution.getTask().getPropagationMode()) {\n+                if (PropagationMode.SYNC.equals(task.getPropagationMode())) {\n+                    syncPropagate(taskExecution);\n+\n+                    // read execution after saving\n+                    taskExecution =\n+                            task.getExecutions() != null\n+                            && !task.getExecutions().isEmpty()\n+                            ? task.getExecutions().get(0) : null;\n \n-                    syncPropagate(execution);\n                 } else {\n-                    asyncPropagate(execution);\n+                    asyncPropagate(taskExecution);\n                 }\n \n                 LOG.debug(\"Execution finished for {}\", task);\n \n-                if (syncResourceNames.contains(resource.getName())\n-                        && execution.getStatus()\n+                if (taskExecution != null\n+                        && syncResourceNames.contains(resource.getName())\n+                        && taskExecution.getStatus()\n                         != TaskExecutionStatus.SUCCESS) {\n \n                     throw new PropagationException(resource.getName(),\n-                            execution.getMessage());\n+                            taskExecution.getMessage());\n                 }\n             }\n         }\n@@ -407,103 +409,150 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n         return Collections.singletonMap(accountId, attributes);\n     }\n \n-    protected void propagate(final TaskExecution execution) {\n-        execution.setStartDate(new Date());\n+    public void propagate(final TaskExecution execution) {\n+        Date startDate = new Date();\n+        TaskExecutionStatus taskExecutionStatus = null;\n+        String taskExecutionMessage = null;\n+\n+        Task task = execution.getTask();\n+\n+        // Output parameter to verify the propagation request tryed\n+        final Set<String> triedPropagationRequests = new HashSet<String>();\n+\n \n         try {\n-            ConnectorInstance connectorInstance = execution.getTask().\n-                    getResource().getConnector();\n+            ConnectorInstance connectorInstance =\n+                    task.getResource().getConnector();\n \n-            ConnectorFacadeProxy connector = ConnectorInstanceLoader.\n-                    getConnector(connectorInstance.getId().toString());\n+            ConnectorFacadeProxy connector =\n+                    ConnectorInstanceLoader.getConnector(\n+                    connectorInstance.getId().toString());\n \n             if (connector == null) {\n                 LOG.error(\"Connector instance bean \"\n-                        + connectorInstance.getId().toString() + \" not found\");\n+                        + connectorInstance.getId().toString()\n+                        + \" not found\");\n \n                 throw new NoSuchBeanDefinitionException(\n                         \"Connector instance bean not found\");\n             }\n \n-            switch (execution.getTask().getResourceOperationType()) {\n+            switch (task.getResourceOperationType()) {\n                 case CREATE:\n                 case UPDATE:\n                     Uid userUid = null;\n                     try {\n-                        userUid = connector.resolveUsername(ObjectClass.ACCOUNT,\n-                                execution.getTask().getOldAccountId() == null\n-                                ? execution.getTask().getAccountId()\n-                                : execution.getTask().getOldAccountId(),\n+                        userUid = connector.resolveUsernameForUpdate(\n+                                task.getPropagationMode(),\n+                                task.getResourceOperationType(),\n+                                ObjectClass.ACCOUNT,\n+                                task.getOldAccountId() == null\n+                                ? task.getAccountId()\n+                                : task.getOldAccountId(),\n                                 null);\n                     } catch (RuntimeException ignore) {\n                         if (LOG.isDebugEnabled()) {\n-                            LOG.debug(\"To be ignored, \"\n-                                    + \"when resolving username on connector\",\n-                                    ignore);\n+                            LOG.debug(\"To be ignored, when resolving \"\n+                                    + \"username on connector\", ignore);\n                         }\n                     }\n \n                     if (userUid != null) {\n                         connector.update(\n-                                execution.getTask().getPropagationMode(),\n+                                task.getPropagationMode(),\n                                 ObjectClass.ACCOUNT,\n                                 userUid,\n-                                execution.getTask().getAttributes(),\n-                                null);\n+                                task.getAttributes(),\n+                                null,\n+                                triedPropagationRequests);\n                     } else {\n                         connector.create(\n-                                execution.getTask().getPropagationMode(),\n+                                task.getPropagationMode(),\n                                 ObjectClass.ACCOUNT,\n-                                execution.getTask().getAttributes(),\n-                                null);\n+                                task.getAttributes(),\n+                                null,\n+                                triedPropagationRequests);\n                     }\n                     break;\n \n                 case DELETE:\n-                    connector.delete(execution.getTask().getPropagationMode(),\n+                    connector.delete(task.getPropagationMode(),\n                             ObjectClass.ACCOUNT,\n-                            new Uid(execution.getTask().getAccountId()),\n-                            null);\n+                            new Uid(task.getAccountId()),\n+                            null,\n+                            triedPropagationRequests);\n                     break;\n \n                 default:\n             }\n \n-            LOG.debug(\"Succesfully propagated to resource {}\",\n-                    execution.getTask().getResource().getName());\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Succesfully propagated to resource \"\n+                        + task.getResource().getName());\n+            }\n \n-            execution.setStatus(execution.getTask().getPropagationMode()\n+            taskExecutionStatus = task.getPropagationMode()\n                     == PropagationMode.SYNC\n                     ? TaskExecutionStatus.SUCCESS\n-                    : TaskExecutionStatus.SUBMITTED);\n+                    : TaskExecutionStatus.SUBMITTED;\n         } catch (Throwable t) {\n             LOG.error(\"Exception during provision on resource \"\n-                    + execution.getTask().getResource().getName(), t);\n+                    + task.getResource().getName(), t);\n \n             StringWriter execeptionWriter = new StringWriter();\n             t.printStackTrace(new PrintWriter(execeptionWriter));\n-            execution.setMessage(execeptionWriter.toString());\n+            taskExecutionMessage = execeptionWriter.toString();\n \n-            execution.setStatus(execution.getTask().getPropagationMode()\n+            taskExecutionStatus = task.getPropagationMode()\n                     == PropagationMode.SYNC\n                     ? TaskExecutionStatus.FAILURE\n-                    : TaskExecutionStatus.UNSUBMITTED);\n+                    : TaskExecutionStatus.UNSUBMITTED;\n+\n+            triedPropagationRequests.add(\n+                    task.getResourceOperationType().toString().toLowerCase());\n         } finally {\n-            execution.setEndDate(new Date());\n+            LOG.debug(\"Update execution for {}\", task);\n+\n+            if (!triedPropagationRequests.isEmpty()\n+                    || execution.getId() != null) {\n+\n+                execution.setStartDate(startDate);\n+\n+                if (taskExecutionMessage != null) {\n+                    execution.setMessage(taskExecutionMessage);\n+                }\n+\n+                if (taskExecutionStatus != null) {\n+                    execution.setStatus(taskExecutionStatus);\n+                }\n+\n+                execution.setEndDate(new Date());\n+\n+                TaskExecution actualExecution =\n+                        taskDataBinder.storeTaskExecution(execution);\n+\n+                task.addExecution(actualExecution);\n+                taskDAO.save(task);\n+\n+                LOG.debug(\"Updated {}\", actualExecution);\n+            }\n         }\n     }\n \n     public void syncPropagate(final TaskExecution execution) {\n         LOG.debug(\"Synchronous execution {}\", execution);\n-\n         propagate(execution);\n     }\n \n-    @Async\n+    //@Async\n     public void asyncPropagate(final TaskExecution execution) {\n         LOG.debug(\"Asynchronous execution {}\", execution);\n+        new Thread() {\n \n-        propagate(execution);\n-        taskDataBinder.storeTaskExecution(execution);\n+            @Override\n+            public void run() {\n+                propagate(execution);\n+            }\n+        }.start();\n     }\n }"},{"sha":"c4fe4f0748565405659b00f246cfb4df8704bc4b","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -133,7 +133,7 @@ public TaskExecutionTO execute(@PathVariable(\"taskId\") final Long taskId)\n \n         LOG.debug(\"Execution finished for {}\", task);\n \n-        execution = taskExecutionDAO.save(execution);\n+        LOG.debug(\"Return execution {}\", execution);\n \n         return taskDataBinder.getTaskExecutionTO(execution);\n     }"},{"sha":"4328625abd8b2271a4b9358b0013d040a2f374fa","filename":"core/src/main/java/org/syncope/core/workflow/GenerateToken.java","status":"modified","additions":84,"deletions":3,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -22,6 +22,11 @@\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import javax.crypto.Cipher;\n+import javax.crypto.SecretKey;\n+import javax.crypto.SecretKeyFactory;\n+import javax.crypto.spec.DESKeySpec;\n+import org.identityconnectors.common.Base64;\n \n public class GenerateToken extends OSWorkflowComponent\n         implements FunctionProvider {\n@@ -44,19 +49,95 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n         SyncopeUser syncopeUser = (SyncopeUser) transientVars.get(\n                 Constants.SYNCOPE_USER);\n \n-        final String prefix = (String) transientVars.get(\n-                Constants.PREFIX);\n+        final String token = (String) transientVars.get(\n+                Constants.TOKEN);\n+\n+        LOG.debug(\"Received token {}\", token);\n \n         try {\n             syncopeUser.generateToken(\n                     Integer.parseInt(syncopeConfigurationDAO.find(\n                     \"token.length\").getConfValue()),\n                     Integer.parseInt(syncopeConfigurationDAO.find(\n-                    \"token.expireTime\").getConfValue()), prefix);\n+                    \"token.expireTime\").getConfValue()), token);\n         } catch (MissingConfKeyException e) {\n             throw new WorkflowException(e);\n         }\n \n         transientVars.put(Constants.SYNCOPE_USER, syncopeUser);\n     }\n+\n+    public final String encrypt(final String toBeCrypted) {\n+\n+        String res = null;\n+\n+        try {\n+\n+            final DESKeySpec keySpec =\n+                    new DESKeySpec(syncopeConfigurationDAO.find(\n+                    \"token.encryption.key\").getConfValue().getBytes(\"UTF8\"));\n+\n+            final SecretKeyFactory keyFactory =\n+                    SecretKeyFactory.getInstance(\"DES\");\n+\n+            final SecretKey key = keyFactory.generateSecret(keySpec);\n+\n+            final byte[] cleartext = toBeCrypted.getBytes(\"UTF8\");\n+\n+            final Cipher cipher = Cipher.getInstance(\"DES\");\n+\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"To Be Encrypted: \" + toBeCrypted);\n+            }\n+\n+            cipher.init(Cipher.ENCRYPT_MODE, key);\n+            res = Base64.encode(cipher.doFinal(cleartext));\n+\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Encrypted: \" + res);\n+            }\n+\n+        } catch (Exception e) {\n+            LOG.error(\"Encrypt operation failed\", e);\n+        }\n+\n+        return res;\n+    }\n+\n+    public final String decrypt(final String toBeDecrypted) {\n+        String res = null;\n+\n+        try {\n+\n+            final DESKeySpec keySpec =\n+                    new DESKeySpec(syncopeConfigurationDAO.find(\n+                    \"token.encryption.key\").getConfValue().getBytes(\"UTF8\"));\n+\n+            final SecretKeyFactory keyFactory =\n+                    SecretKeyFactory.getInstance(\"DES\");\n+\n+            final SecretKey key = keyFactory.generateSecret(keySpec);\n+\n+            final byte[] encrypedPwdBytes =\n+                    Base64.decode(toBeDecrypted);\n+\n+            final Cipher cipher = Cipher.getInstance(\"DES\");\n+\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"To Be Dencrypted: \" + toBeDecrypted);\n+            }\n+\n+            cipher.init(Cipher.DECRYPT_MODE, key);\n+            res = new String(cipher.doFinal(encrypedPwdBytes));\n+\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Dencrypted: \" + res);\n+            }\n+\n+        } catch (Exception e) {\n+            LOG.error(\"Decrypt operation failed\", e);\n+        }\n+\n+        return res;\n+    }\n }"},{"sha":"1c28181b5c453cb267d4b5d4eb856431210f9dda","filename":"core/src/main/java/org/syncope/core/workflow/IsValidToken.java","status":"modified","additions":3,"deletions":12,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsValidToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsValidToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsValidToken.java?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -19,7 +19,6 @@\n import com.opensymphony.workflow.WorkflowException;\n import java.util.Map;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.MissingConfKeyException;\n \n public class IsValidToken extends OSWorkflowComponent\n         implements Condition {\n@@ -28,26 +27,18 @@ public class IsValidToken extends OSWorkflowComponent\n     public boolean passesCondition(Map transientVars, Map args, PropertySet ps)\n             throws WorkflowException {\n \n-        boolean validToken = false;\n-\n-        final String prefix = (String) transientVars.get(\n-                Constants.PREFIX);\n-\n         SyncopeUser syncopeUser = (SyncopeUser) transientVars.get(\n                 Constants.SYNCOPE_USER);\n \n         final String token = (String) transientVars.get(Constants.TOKEN);\n \n-        LOG.debug(\"Check for token validity with prefix '{}'\", prefix);\n-\n-        validToken = syncopeUser.checkToken(token, prefix);\n-\n-        LOG.debug(\"Validated token '{}': \" + validToken, token);\n+        boolean validToken = syncopeUser.checkToken(token);\n \n         if (validToken) {\n+            LOG.debug(\"Remove valid token '{}': \", token);\n             syncopeUser.removeToken();\n         }\n-        \n+\n         return validToken;\n     }\n }"},{"sha":"b6a763474ffdc61f386e2472a5b91c481a79033b","filename":"core/src/main/resources/content.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -29,6 +29,7 @@\n \n     <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>\n+    <SyncopeConfiguration confKey=\"token.encryption.key\" confValue=\"1abcdefghil3mnopqrstuvz2\"/>\n     <SyncopeConfiguration confKey=\"smtp.host\" confValue=\"smtp.ngi.it\"/>\n     <SyncopeConfiguration confKey=\"mail.templates.url\" confValue=\"http://localhost:8080/syncope/mailTemplates/\"/>\n     <SyncopeConfiguration confKey=\"activate.email.from\" confValue=\"syncope@googlecode.com\"/>"},{"sha":"26e24c776ef223b69d4e108e03bbafe9dcdee53b","filename":"core/src/test/java/org/syncope/core/persistence/relationships/PropagationManagerTest.java","status":"removed","additions":0,"deletions":132,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dfd1dceecb56544fae7528b48c55c1d845f4b6ec/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dfd1dceecb56544fae7528b48c55c1d845f4b6ec/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FPropagationManagerTest.java?ref=dfd1dceecb56544fae7528b48c55c1d845f4b6ec","patch":"@@ -1,132 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence.relationships;\n-\n-import static org.junit.Assert.*;\n-\n-import java.util.Collections;\n-import org.junit.Test;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.propagation.PropagationException;\n-import org.syncope.core.persistence.propagation.PropagationManager;\n-import org.syncope.core.persistence.beans.TargetResource;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.ResourceDAO;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n-import org.syncope.core.persistence.propagation.ResourceOperations;\n-import org.syncope.core.persistence.AbstractTest;\n-import org.syncope.types.ResourceOperationType;\n-\n-@Transactional\n-public class PropagationManagerTest extends AbstractTest {\n-\n-    @Autowired\n-    private ResourceDAO resourceDAO;\n-\n-    @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n-\n-    @Autowired\n-    private PropagationManager propagationManager;\n-\n-    @Test\n-    public final void create() {\n-        SyncopeUser user = syncopeUserDAO.find(1L);\n-        assertNotNull(user);\n-\n-        TargetResource resource = resourceDAO.find(\"ws-target-resource-1\");\n-        assertNotNull(resource);\n-\n-        user.setResources(Collections.singleton(resource));\n-\n-        PropagationException pe = null;\n-        try {\n-            propagationManager.create(user, \"password\");\n-        } catch (PropagationException e) {\n-            pe = e;\n-        }\n-\n-        assertNull(pe);\n-    }\n-\n-    @Test\n-    public final void update() {\n-        SyncopeUser user = syncopeUserDAO.find(2L);\n-        assertNotNull(user);\n-\n-        TargetResource resource = resourceDAO.find(\"ws-target-resource-1\");\n-        assertNotNull(resource);\n-\n-        user.setResources(Collections.singleton(resource));\n-\n-        ResourceOperations resourceOperations = new ResourceOperations();\n-        resourceOperations.add(ResourceOperationType.UPDATE, resource);\n-\n-        PropagationException pe = null;\n-        try {\n-            propagationManager.update(\n-                    user, \"password\", resourceOperations, null);\n-        } catch (PropagationException e) {\n-            pe = e;\n-        }\n-\n-        assertNull(pe);\n-    }\n-\n-    @Test\n-    public final void createWithException() {\n-        SyncopeUser user = syncopeUserDAO.find(3L);\n-        assertNotNull(user);\n-\n-        TargetResource resource = resourceDAO.find(\"ws-target-resource-2\");\n-        assertNotNull(resource);\n-\n-        user.setResources(Collections.singleton(resource));\n-\n-        PropagationException re = null;\n-        try {\n-            propagationManager.create(user, \"password\",\n-                    Collections.singleton(\"ws-target-resource-2\"));\n-        } catch (PropagationException e) {\n-            re = e;\n-        }\n-        assertNotNull(re);\n-    }\n-\n-    @Test\n-    public final void updateWithException() {\n-        SyncopeUser user = syncopeUserDAO.find(4L);\n-        assertNotNull(user);\n-\n-        TargetResource resource = resourceDAO.find(\"ws-target-resource-2\");\n-        assertNotNull(resource);\n-\n-        user.setResources(Collections.singleton(resource));\n-\n-        ResourceOperations resourceOperations = new ResourceOperations();\n-        resourceOperations.add(ResourceOperationType.UPDATE, resource);\n-\n-        PropagationException re = null;\n-        try {\n-            propagationManager.update(user, \"password\", resourceOperations,\n-                    Collections.singleton(\"ws-target-resource-2\"));\n-        } catch (PropagationException e) {\n-            re = e;\n-        }\n-        assertNotNull(re);\n-    }\n-}"},{"sha":"bdf5f3b525a9a406eec41cbcd0e359873bfdccd9","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -15,8 +15,6 @@\n package org.syncope.core.rest;\n \n import java.util.Arrays;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n import static org.junit.Assert.*;\n \n import java.util.List;\n@@ -88,7 +86,7 @@ public final void deal() {\n \n         // To be sure that the execution above has time to start\n         try {\n-            Thread.sleep(2000);\n+            Thread.sleep(5000);\n         } catch (InterruptedException e) {\n         }\n "},{"sha":"131f8a21d4d6e57e005ef89969a5d73e365ea75b","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -36,6 +36,7 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.client.to.TaskTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -84,6 +85,79 @@ private UserTO getSampleTO(final String email) {\n         return userTO;\n     }\n \n+    @Test\n+    public final void createUserWithNoPropagation() {\n+\n+        // get task list\n+        List<TaskTO> tasks = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"task/list\", TaskTO[].class));\n+\n+        assertNotNull(tasks);\n+        assertFalse(tasks.isEmpty());\n+\n+        // get max task id\n+        long maxId = Long.MIN_VALUE;\n+        for (TaskTO task : tasks) {\n+            if (task.getId() > maxId) maxId = task.getId();\n+        }\n+\n+        // create a new user\n+        UserTO newUserTO = new UserTO();\n+\n+        AttributeTO attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"firstname\");\n+        attributeTO.addValue(\"xxx\");\n+        newUserTO.addAttribute(attributeTO);\n+\n+        attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"surname\");\n+        attributeTO.addValue(\"xxx\");\n+        newUserTO.addAttribute(attributeTO);\n+\n+        attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"userId\");\n+        attributeTO.addValue(\"xxx@xxx.xxx\");\n+        newUserTO.addAttribute(attributeTO);\n+\n+        attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"username\");\n+        attributeTO.addValue(\"xxx\");\n+        newUserTO.addAttribute(attributeTO);\n+\n+        newUserTO.setPassword(\"xxx\");\n+        newUserTO.addResource(\"ws-target-resource-nopropagation\");\n+\n+        restTemplate.postForObject(BASE_URL + \"user/create\"\n+                + \"?syncResources=ws-target-resource-nopropagation\",\n+                newUserTO, UserTO.class);\n+\n+        // get the new task list\n+        tasks = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"task/list\", TaskTO[].class));\n+\n+        assertNotNull(tasks);\n+        assertFalse(tasks.isEmpty());\n+\n+        // get max task id\n+        long newMaxId = Long.MIN_VALUE;\n+        for (TaskTO task : tasks) {\n+            if (task.getId() > newMaxId) newMaxId = task.getId();\n+        }\n+\n+        assertTrue(newMaxId > maxId);\n+\n+        // get last task\n+        TaskTO taskTO = restTemplate.getForObject(\n+                BASE_URL + \"task/read/{taskId}\", TaskTO.class, newMaxId);\n+\n+        assertNotNull(taskTO);\n+        assertTrue(taskTO.getExecutions() == null\n+                || taskTO.getExecutions().isEmpty());\n+\n+    }\n+\n     @Test\n     @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n     public final void createWithException() {\n@@ -100,6 +174,20 @@ public final void createWithException() {\n \n     @Test\n     public final void create() {\n+        // get task list\n+        List<TaskTO> tasks = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"task/list\", TaskTO[].class));\n+\n+        assertNotNull(tasks);\n+        assertFalse(tasks.isEmpty());\n+\n+        // get max task id\n+        long maxId = Long.MIN_VALUE;\n+        for (TaskTO task : tasks) {\n+            if (task.getId() > maxId) maxId = task.getId();\n+        }\n+\n         UserTO userTO = getSampleTO(\"a.b@c.com\");\n \n         // add a membership\n@@ -147,6 +235,30 @@ public final void create() {\n                 restTemplate.getForObject(BASE_URL + \"user/status/\"\n                 + newUserTO.getId(), String.class));\n \n+        // get the new task list\n+        tasks = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"task/list\", TaskTO[].class));\n+\n+        assertNotNull(tasks);\n+        assertFalse(tasks.isEmpty());\n+\n+        // get max task id\n+        long newMaxId = Long.MIN_VALUE;\n+        for (TaskTO task : tasks) {\n+            if (task.getId() > newMaxId) newMaxId = task.getId();\n+        }\n+\n+        assertTrue(newMaxId > maxId);\n+\n+        // get last task\n+        TaskTO taskTO = restTemplate.getForObject(\n+                BASE_URL + \"task/read/{taskId}\", TaskTO.class, newMaxId);\n+\n+        assertNotNull(taskTO);\n+        assertFalse(taskTO.getExecutions() == null\n+                || taskTO.getExecutions().isEmpty());\n+\n         // 3. verify password\n         Boolean verify = restTemplate.getForObject(\n                 BASE_URL + \"user/verifyPassword/{userId}?password=password\","},{"sha":"449bf6bee78cd4ff5ee8ee4cb525da5f544095b9","filename":"core/src/test/resources/content.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a42103ffd0b7b8966626644945c1016a68d7d0b5/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=a42103ffd0b7b8966626644945c1016a68d7d0b5","patch":"@@ -29,6 +29,7 @@\n     \n     <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>\n+    <SyncopeConfiguration confKey=\"token.encryption.key\" confValue=\"1abcdefghil3mnopqrstuvz2\"/>\n     <SyncopeConfiguration confKey=\"smtp.host\" confValue=\"smtp.ngi.it\"/>\n     <SyncopeConfiguration confKey=\"mail.templates.url\" confValue=\"http://localhost:9080/syncope/mailTemplates/\"/>\n     <SyncopeConfiguration confKey=\"activate.email.from\" confValue=\"syncope@googlecode.com\"/>\n@@ -175,12 +176,19 @@\n     <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"ASYNC_DELETE\"/>\n     <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"RESOLVE\"/>\n \n+    <ConnectorInstance id=\"103\"\n+                       bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n+                       connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n+                       version=\"${project.version}\"\n+                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+\n     <TargetResource name=\"ws-target-resource-1\" connector_id=\"100\" forceMandatoryConstraint=\"1\"/>\n     <TargetResource name=\"ws-target-resource-2\" connector_id=\"100\" forceMandatoryConstraint=\"1\"/>\n     <TargetResource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\" forceMandatoryConstraint=\"0\"/>\n     <TargetResource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\" forceMandatoryConstraint=\"1\"/>\n     <TargetResource name=\"ws-target-resource-delete\" connector_id=\"102\" forceMandatoryConstraint=\"0\"/>\n     <TargetResource name=\"ws-target-resource-update\" connector_id=\"100\" forceMandatoryConstraint=\"1\"/>\n+    <TargetResource name=\"ws-target-resource-nopropagation\" connector_id=\"103\" forceMandatoryConstraint=\"1\"/>\n \n     <SyncopeUser_TargetResource users_id=\"3\" targetResources_name=\"ws-target-resource-delete\" />\n     <SyncopeRole_TargetResource roles_id=\"3\" targetResources_name=\"ws-target-resource-list-mappings-1\" />\n@@ -263,6 +271,11 @@\n                    schemaName=\"firstname\" schemaType=\"UserSchema\" mandatoryCondition=\"type == 'F'\"\n                    accountid=\"0\" password=\"0\"/>\n \n+    <SchemaMapping id=\"114\" field=\"name\"\n+                   resource_name=\"ws-target-resource-nopropagation\"\n+                   schemaName=\"firstname\" schemaType=\"UserSchema\" mandatoryCondition=\"true\"\n+                   accountid=\"0\" password=\"0\"/>\n+\n     <Task id=\"1\" propagationMode=\"ASYNC\" resourceOperationType=\"UPDATE\"\n                  resource_name=\"ws-target-resource-2\"\n                  xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>"}]}