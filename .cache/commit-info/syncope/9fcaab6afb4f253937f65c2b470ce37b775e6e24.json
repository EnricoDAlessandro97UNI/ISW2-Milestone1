{"sha":"9fcaab6afb4f253937f65c2b470ce37b775e6e24","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlmY2FhYjZhZmI0ZjI1MzkzN2Y2NWMyYjQ3MGNlMzdiNzc1ZTZlMjQ=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2014-06-10T09:45:54Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2014-06-10T09:45:54Z"},"message":"[SYNCOPE-458] improved membership virtual attribute management\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1601588 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6774ea6e3763636004f1b32aab1de4807e3365d2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6774ea6e3763636004f1b32aab1de4807e3365d2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9fcaab6afb4f253937f65c2b470ce37b775e6e24","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9fcaab6afb4f253937f65c2b470ce37b775e6e24","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9fcaab6afb4f253937f65c2b470ce37b775e6e24","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9fcaab6afb4f253937f65c2b470ce37b775e6e24/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"aceaf25fdc38d26e5885a78ac2e775352eca1715","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aceaf25fdc38d26e5885a78ac2e775352eca1715","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aceaf25fdc38d26e5885a78ac2e775352eca1715"}],"stats":{"total":446,"additions":378,"deletions":68},"files":[{"sha":"64402db8ddf7f16e9ac0d20dadf5812c64ab1a57","filename":"console/src/main/java/org/apache/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9fcaab6afb4f253937f65c2b470ce37b775e6e24/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9fcaab6afb4f253937f65c2b470ce37b775e6e24/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=9fcaab6afb4f253937f65c2b470ce37b775e6e24","patch":"@@ -140,16 +140,16 @@ public List<String> getDerSchemaNames(final AttributableType type) {\n                 userDerSchemasNames.add(schemaTO.getName());\n             }\n         } catch (SyncopeClientException e) {\n-            LOG.error(\"While getting all user derived schema names\", e);\n+            LOG.error(\"While getting all {} derived schema names\", type, e);\n         }\n \n         return userDerSchemasNames;\n     }\n \n     /**\n-     * Get derived schemas.\n+     * Get virtual schemas.\n      *\n-     * @return List of derived schemas.\n+     * @return List of virtual schemas.\n      */\n     @SuppressWarnings(\"unchecked\")\n     public List<VirSchemaTO> getVirSchemas(final AttributableType type) {\n@@ -158,7 +158,7 @@ public List<VirSchemaTO> getVirSchemas(final AttributableType type) {\n         try {\n             userVirSchemas = getService(SchemaService.class).list(type, SchemaType.VIRTUAL);\n         } catch (SyncopeClientException e) {\n-            LOG.error(\"While getting all user derived schemas\", e);\n+            LOG.error(\"While getting all {} virtual schemas\", type, e);\n         }\n \n         return userVirSchemas;"},{"sha":"1b60410fdf522df4ea413b7106450ea5bc112f2e","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":31,"deletions":6,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=9fcaab6afb4f253937f65c2b470ce37b775e6e24","patch":"@@ -550,7 +550,15 @@ private void retrieveVirAttrValue(\n \n             final VirAttrCacheValue toBeCached = new VirAttrCacheValue();\n \n-            for (ExternalResource resource : getTargetResource(virAttr, type, attrUtil)) {\n+            // SYNCOPE-458 if virattr owner is a Membership, owner must become user involved in membership because \n+            // membership mapping is contained in user mapping\n+            final AbstractAttributable realOwner = owner instanceof Membership ? ((Membership) owner).getSyncopeUser()\n+                    : owner;\n+\n+            final Set<ExternalResource> targetResources = owner instanceof Membership ? getTargetResource(virAttr, type,\n+                    attrUtil, realOwner.getResources()) : getTargetResource(virAttr, type, attrUtil);\n+\n+            for (ExternalResource resource : targetResources) {\n                 LOG.debug(\"Search values into {}\", resource.getName());\n                 try {\n                     final List<AbstractMappingItem> mappings = attrUtil.getMappingItems(resource, MappingPurpose.BOTH);\n@@ -564,7 +572,7 @@ private void retrieveVirAttrValue(\n                         final String accountId = attrUtil.getAccountIdItem(resource) == null\n                                 ? null\n                                 : MappingUtil.getAccountIdValue(\n-                                        owner, resource, attrUtil.getAccountIdItem(resource));\n+                                        realOwner, resource, attrUtil.getAccountIdItem(resource));\n \n                         if (StringUtils.isBlank(accountId)) {\n                             throw new IllegalArgumentException(\"No AccountId found for \" + resource.getName());\n@@ -575,7 +583,7 @@ private void retrieveVirAttrValue(\n                         final OperationOptions oo =\n                                 connector.getOperationOptions(MappingUtil.getMatchingMappingItems(mappings, type));\n \n-                        connectorObject = connector.getObject(fromAttributable(owner), new Uid(accountId), oo);\n+                        connectorObject = connector.getObject(fromAttributable(realOwner), new Uid(accountId), oo);\n                         externalResources.put(resource.getName(), connectorObject);\n                     }\n \n@@ -617,9 +625,9 @@ private void retrieveVirAttrValue(\n                 }\n             }\n \n-            virAttrCache.put(attrUtil.getType(), owner.getId(), schemaName, toBeCached);\n+                virAttrCache.put(attrUtil.getType(), owner.getId(), schemaName, toBeCached);\n+            }\n         }\n-    }\n \n     private Set<ExternalResource> getTargetResource(\n             final AbstractVirAttr attr, final IntMappingType type, final AttributableUtil attrUtil) {\n@@ -638,6 +646,23 @@ private Set<ExternalResource> getTargetResource(\n         return resources;\n     }\n \n+    private Set<ExternalResource> getTargetResource(final AbstractVirAttr attr, final IntMappingType type,\n+            final AttributableUtil attrUtil, final Set<ExternalResource> ownerResources) {\n+\n+        final Set<ExternalResource> resources = new HashSet<ExternalResource>();\n+\n+        for (ExternalResource res : ownerResources) {\n+            if (!MappingUtil.getMatchingMappingItems(\n+                    attrUtil.getMappingItems(res, MappingPurpose.BOTH),\n+                    attr.getSchema().getName(), type).isEmpty()) {\n+\n+                resources.add(res);\n+            }\n+        }\n+\n+        return resources;\n+    }\n+\n     private void fillFromTemplate(final AbstractAttributableTO attributableTO, final AbstractAttributableTO template) {\n         Map<String, AttributeTO> currentAttrMap = attributableTO.getAttrMap();\n         for (AttributeTO templateAttr : template.getAttrs()) {\n@@ -657,7 +682,7 @@ private void fillFromTemplate(final AbstractAttributableTO attributableTO, final\n         }\n \n         currentAttrMap = attributableTO.getVirAttrMap();\n-        for (AttributeTO templateVirAttr : template.getDerAttrs()) {\n+        for (AttributeTO templateVirAttr : template.getVirAttrs()) {\n             if (templateVirAttr.getValues() != null && !templateVirAttr.getValues().isEmpty()\n                     && (!currentAttrMap.containsKey(templateVirAttr.getSchema())\n                     || currentAttrMap.get(templateVirAttr.getSchema()).getValues().isEmpty())) {"},{"sha":"ba94ba59fd3332a6e0c45fdcecbbd89faa5c6e5a","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/MVirAttr.java","status":"modified","additions":0,"deletions":22,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirAttr.java?ref=9fcaab6afb4f253937f65c2b470ce37b775e6e24","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.beans.membership;\n \n-import java.util.Collections;\n-import java.util.List;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n@@ -69,24 +67,4 @@ public void setTemplate(final MVirAttrTemplate template) {\n     public <T extends AbstractVirSchema> T getSchema() {\n         return template == null ? null : (T) template.getSchema();\n     }\n-\n-    @Override\n-    public List<String> getValues() {\n-        return Collections.emptyList();\n-    }\n-\n-    @Override\n-    public boolean addValue(final String value) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean removeValue(final String value) {\n-        return false;\n-    }\n-\n-    @Override\n-    public void setValues(final List<String> values) {\n-        // do nothing\n-    }\n }"},{"sha":"d8da8a09624d5cbdfd7de53bdc91538c118a2293","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":91,"deletions":14,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=9fcaab6afb4f253937f65c2b470ce37b775e6e24","patch":"@@ -27,8 +27,10 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.syncope.common.mod.AttributeMod;\n+import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.ResourceOperation;\n@@ -38,6 +40,7 @@\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n@@ -101,15 +104,16 @@ public class PropagationManager {\n      * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @param password to be set\n      * @param vAttrs virtual attributes to be set\n+     * @param membershipTOs user memberships\n      * @return list of propagation tasks\n      * @throws NotFoundException if user is not found\n      * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n     public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            final String password, final List<AttributeTO> vAttrs)\n+            final String password, final List<AttributeTO> vAttrs, final List<MembershipTO> membershipTOs)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        return getUserCreateTaskIds(wfResult, password, vAttrs, null);\n+        return getUserCreateTaskIds(wfResult, password, vAttrs, null, membershipTOs);\n     }\n \n     /**\n@@ -119,17 +123,30 @@ public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry\n      * @param password to be set\n      * @param vAttrs virtual attributes to be set\n      * @param noPropResourceNames external resources not to be considered for propagation\n+     * @param membershipTOs user memberships\n      * @return list of propagation tasks\n      * @throws NotFoundException if user is not found\n      * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n     public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            final String password, final Collection<AttributeTO> vAttrs, final Set<String> noPropResourceNames)\n+            final String password, final Collection<AttributeTO> vAttrs,\n+            final Set<String> noPropResourceNames, final List<MembershipTO> membershipTOs)\n             throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeUser user = userDataBinder.getUserFromId(wfResult.getResult().getKey());\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n             userDataBinder.fillVirtual(user, vAttrs, AttributableUtil.getInstance(AttributableType.USER));\n+\n+        }\n+        for (Membership membership : user.getMemberships()) {\n+            MembershipTO membershipTO;\n+            if (membership.getVirAttrs() != null && !membership.getVirAttrs().isEmpty()) {\n+                membershipTO = findMembershipTO(membership, membershipTOs);\n+                if (membershipTO != null) {\n+                    userDataBinder.fillVirtual(membership, membershipTO.getVirAttrs(), AttributableUtil.getInstance(\n+                            AttributableType.MEMBERSHIP));\n+                }\n+            }\n         }\n         return getCreateTaskIds(user, password,\n                 wfResult.getResult().getValue(), wfResult.getPropByRes(), noPropResourceNames);\n@@ -185,7 +202,7 @@ protected List<PropagationTask> getCreateTaskIds(final AbstractAttributable attr\n             propByRes.get(ResourceOperation.CREATE).removeAll(noPropResourceNames);\n         }\n \n-        return createTasks(attributable, password, true, null, null, enable, false, propByRes);\n+        return createTasks(attributable, password, true, null, null, null, null, enable, false, propByRes);\n     }\n \n     /**\n@@ -209,7 +226,8 @@ public List<PropagationTask> getUserUpdateTaskIds(final SyncopeUser user, final\n                 Collections.<String>emptySet(), // no virtual attributes to be managed\n                 Collections.<AttributeMod>emptySet(), // no virtual attributes to be managed\n                 null, // no propagation by resources\n-                noPropResourceNames);\n+                noPropResourceNames,\n+                Collections.<MembershipMod>emptySet());\n     }\n \n     /**\n@@ -234,7 +252,8 @@ public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry\n                 wfResult.getResult().getKey().getVirAttrsToRemove(),\n                 wfResult.getResult().getKey().getVirAttrsToUpdate(),\n                 wfResult.getPropByRes(),\n-                noPropResourceNames);\n+                noPropResourceNames,\n+                wfResult.getResult().getKey().getMembershipsToAdd());\n     }\n \n     public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry<UserMod, Boolean>> wfResult) {\n@@ -310,13 +329,15 @@ public List<PropagationTask> getRoleUpdateTaskIds(final WorkflowResult<Long> wfR\n \n         SyncopeRole role = roleDataBinder.getRoleFromId(wfResult.getResult());\n         return getUpdateTaskIds(role, null, false, null,\n-                vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult.getPropByRes(), noPropResourceNames);\n+                vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult.getPropByRes(), noPropResourceNames,\n+                Collections.<MembershipMod>emptySet());\n     }\n \n     protected List<PropagationTask> getUpdateTaskIds(final AbstractAttributable attributable,\n             final String password, final boolean changePwd, final Boolean enable,\n             final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated,\n-            final PropagationByResource propByRes, final Collection<String> noPropResourceNames)\n+            final PropagationByResource propByRes, final Collection<String> noPropResourceNames,\n+            final Set<MembershipMod> membershipsToAdd)\n             throws NotFoundException {\n \n         AbstractAttributableDataBinder binder = attributable instanceof SyncopeUser\n@@ -328,6 +349,24 @@ protected List<PropagationTask> getUpdateTaskIds(final AbstractAttributable attr\n                 ? Collections.<AttributeMod>emptySet()\n                 : vAttrsToBeUpdated, AttributableUtil.getInstance(attributable));\n \n+        // SYNCOPE-458 fill membership virtual attributes\n+        if (attributable instanceof SyncopeUser) {\n+            final SyncopeUser user = (SyncopeUser) attributable;\n+            for (Membership membership : user.getMemberships()) {\n+                if (membership.getVirAttrs() != null && !membership.getVirAttrs().isEmpty()) {\n+                    final MembershipMod membershipMod = findMembershipMod(membership, membershipsToAdd);\n+                    if (membershipMod != null) {\n+                        binder.fillVirtual(membership, membershipMod.getVirAttrsToRemove() == null\n+                                ? Collections.<String>emptySet()\n+                                : membershipMod.getVirAttrsToRemove(),\n+                                membershipMod.getVirAttrsToUpdate() == null ? Collections.<AttributeMod>emptySet()\n+                                : membershipMod.getVirAttrsToUpdate(), AttributableUtil.getInstance(\n+                                        AttributableType.MEMBERSHIP));\n+                    }\n+                }\n+            }\n+        }\n+\n         if (propByRes == null || propByRes.isEmpty()) {\n             localPropByRes.addAll(ResourceOperation.UPDATE, attributable.getResourceNames());\n         } else {\n@@ -346,8 +385,23 @@ protected List<PropagationTask> getUpdateTaskIds(final AbstractAttributable attr\n             }\n         }\n \n+        // SYNCOPE-458 fill membership virtual attributes to be updated map\n+        Map<String, AttributeMod> membVAttrsToBeUpdatedMap = new HashMap<String, AttributeMod>();\n+        for (MembershipMod membershipMod : membershipsToAdd) {\n+            for (AttributeMod attrMod : membershipMod.getVirAttrsToUpdate()) {\n+                membVAttrsToBeUpdatedMap.put(attrMod.getSchema(), attrMod);\n+            }\n+        }\n+\n+        // SYNCOPE-458 fill membership virtual attributes to be removed set\n+        final Set<String> membVAttrsToBeRemoved = new HashSet<String>();\n+        for (MembershipMod membershipMod : membershipsToAdd) {\n+            membVAttrsToBeRemoved.addAll(membershipMod.getVirAttrsToRemove());\n+        }\n+\n         return createTasks(attributable, password, changePwd,\n-                vAttrsToBeRemoved, vAttrsToBeUpdatedMap, enable, false, localPropByRes);\n+                vAttrsToBeRemoved, vAttrsToBeUpdatedMap, membVAttrsToBeRemoved, membVAttrsToBeUpdatedMap, enable, false,\n+                localPropByRes);\n     }\n \n     /**\n@@ -429,7 +483,7 @@ public List<PropagationTask> getUserDeleteTaskIds(\n      */\n     public List<PropagationTask> getUserDeleteTaskIds(final WorkflowResult<Long> wfResult) {\n         SyncopeUser user = userDataBinder.getUserFromId(wfResult.getResult());\n-        return createTasks(user, null, false, null, null, false, true, wfResult.getPropByRes());\n+        return createTasks(user, null, false, null, null, null, null, false, true, wfResult.getPropByRes());\n     }\n \n     /**\n@@ -512,7 +566,7 @@ protected List<PropagationTask> getDeleteTaskIds(\n         if (noPropResourceNames != null && !noPropResourceNames.isEmpty()) {\n             propByRes.get(ResourceOperation.DELETE).removeAll(noPropResourceNames);\n         }\n-        return createTasks(attributable, null, false, null, null, false, true, propByRes);\n+        return createTasks(attributable, null, false, null, null, null, null, false, true, propByRes);\n     }\n \n     /**\n@@ -524,6 +578,8 @@ protected List<PropagationTask> getDeleteTaskIds(\n      * @param changePwd whether password should be included for propagation attributes or not\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @param membVAttrsToBeRemoved membership virtual attributes to be removed\n+     * @param membVAttrsToBeUpdatedMap membership virtual attributes to be added\n      * @param enable whether user must be enabled or not\n      * @param deleteOnResource whether user / role must be deleted anyway from external resource or not\n      * @param propByRes operation to be performed per resource\n@@ -532,8 +588,8 @@ protected List<PropagationTask> getDeleteTaskIds(\n     protected <T extends AbstractAttributable> List<PropagationTask> createTasks(final T subject,\n             final String password, final boolean changePwd,\n             final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated,\n-            final Boolean enable, final boolean deleteOnResource,\n-            final PropagationByResource propByRes) {\n+            final Set<String> membVAttrsToBeRemoved, final Map<String, AttributeMod> membVAttrsToBeUpdatedMap,\n+            final Boolean enable, final boolean deleteOnResource, final PropagationByResource propByRes) {\n \n         LOG.debug(\"Provisioning subject {}:\\n{}\", subject, propByRes);\n \n@@ -583,7 +639,8 @@ protected <T extends AbstractAttributable> List<PropagationTask> createTasks(fin\n                     task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));\n \n                     Map.Entry<String, Set<Attribute>> preparedAttrs = MappingUtil.prepareAttributes(attrUtil, subject,\n-                            password, changePwd, vAttrsToBeRemoved, vAttrsToBeUpdated, enable, resource);\n+                            password, changePwd, vAttrsToBeRemoved, vAttrsToBeUpdated, membVAttrsToBeRemoved,\n+                            membVAttrsToBeUpdatedMap, enable, resource);\n                     task.setAccountId(preparedAttrs.getKey());\n \n                     // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n@@ -621,4 +678,24 @@ protected <T extends AbstractAttributable> List<PropagationTask> createTasks(fin\n \n         return tasks;\n     }\n+\n+    private MembershipTO findMembershipTO(final Membership membership, final List<MembershipTO> memberships) {\n+        for (MembershipTO membershipTO : memberships) {\n+            if (membershipTO.getRoleId() == membership.getSyncopeRole().getId()) {\n+                return membershipTO;\n+            }\n+        }\n+        LOG.error(\"No MembershipTO found for membership {}\", membership);\n+        return null;\n+    }\n+\n+    private MembershipMod findMembershipMod(final Membership membership, final Set<MembershipMod> membershipMods) {\n+        for (MembershipMod membershipMod : membershipMods) {\n+            if (membershipMod.getRole() == membership.getSyncopeRole().getId()) {\n+                return membershipMod;\n+            }\n+        }\n+        LOG.error(\"No MembershipMod found for membership {}\", membership);\n+        return null;\n+    }\n }"},{"sha":"8c86d7c5781ccf114e7e72f8f526b6b20e927fe7","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=9fcaab6afb4f253937f65c2b470ce37b775e6e24","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -207,7 +208,7 @@ protected UserTO doCreate(final UserTO userTO) {\n         WorkflowResult<Map.Entry<Long, Boolean>> created = uwfAdapter.create(actual);\n \n         List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n-                created, actual.getPassword(), actual.getVirAttrs());\n+                created, actual.getPassword(), actual.getVirAttrs(), actual.getMemberships());\n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n                 getBean(PropagationReporter.class);\n         try {"},{"sha":"a8511e13de7cff934409bc227a1a5af386f4942a","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=9fcaab6afb4f253937f65c2b470ce37b775e6e24","patch":"@@ -104,7 +104,7 @@ public SyncopeUser getUserFromId(final Long userId) {\n \n         return user;\n     }\n-\n+    \n     @Transactional(readOnly = true)\n     public Set<String> getResourceNamesForUserId(final Long userId) {\n         return getUserFromId(userId).getResourceNames();\n@@ -412,6 +412,9 @@ public UserTO getUserTO(final SyncopeUser user) {\n             membershipTO.setRoleId(membership.getSyncopeRole().getId());\n             membershipTO.setRoleName(membership.getSyncopeRole().getName());\n \n+            // SYNCOPE-458 retrieve also membership virtual attributes\n+            connObjectUtil.retrieveVirAttrValues(membership, AttributableUtil.getInstance(AttributableType.MEMBERSHIP));\n+            \n             fillTO(membershipTO,\n                     membership.getAttrs(), membership.getDerAttrs(), membership.getVirAttrs(),\n                     membership.getResources());"},{"sha":"7d22a51abcd8a672399d35c42e74d9b3ca16d7c4","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopePushResultHandler.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopePushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopePushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopePushResultHandler.java?ref=9fcaab6afb4f253937f65c2b470ce37b775e6e24","patch":"@@ -117,6 +117,8 @@ protected final void doHandle(final AbstractAttributable attributable)\n                     true, // propagate password (if required)\n                     null, // no vir attrs to be removed\n                     null, // propagate current vir attr values\n+                    null, // no membership vir attrs to be removed\n+                    null, // propagate current membership vir attr values\n                     enabled, // propagate status (suspended or not) if required\n                     getSyncTask().getResource()); // target external resource\n "},{"sha":"0560601cad0f2182dacd3e45b67d04ca82e26db8","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=9fcaab6afb4f253937f65c2b470ce37b775e6e24","patch":"@@ -362,7 +362,7 @@ public Long findMatchingAttributableId(final ObjectClass objectClass, final Stri\n \n         final List<ConnectorObject> found = connector.search(objectClass,\n                 new EqualsFilter(new Name(name)), connector.getOperationOptions(\n-                attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n+                        attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", objectClass, syncTask.getResource(), name);\n@@ -441,7 +441,7 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n \n                     List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(created,\n                             ((UserTO) actual).getPassword(), actual.getVirAttrs(),\n-                            Collections.singleton(syncTask.getResource().getName()));\n+                            Collections.singleton(syncTask.getResource().getName()), ((UserTO) actual).getMemberships());\n \n                     taskExecutor.execute(tasks);\n "},{"sha":"43d5f87e7732d10ee1c2f43dd0a42041acc67b31","filename":"core/src/main/java/org/apache/syncope/core/util/AttributableUtil.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=9fcaab6afb4f253937f65c2b470ce37b775e6e24","patch":"@@ -190,17 +190,17 @@ public <T extends AbstractMappingItem> T getAccountIdItem(final ExternalResource\n \n         if (resource != null) {\n             switch (type) {\n-                case USER:\n-                    if (resource.getUmapping() != null) {\n-                        result = resource.getUmapping().getAccountIdItem();\n-                    }\n-                    break;\n                 case ROLE:\n                     if (resource.getRmapping() != null) {\n                         result = resource.getRmapping().getAccountIdItem();\n                     }\n                     break;\n                 case MEMBERSHIP:\n+                case USER:\n+                    if (resource.getUmapping() != null) {\n+                        result = resource.getUmapping().getAccountIdItem();\n+                    }\n+                    break;\n                 default:\n             }\n         }\n@@ -215,17 +215,17 @@ public <T extends AbstractMappingItem> List<T> getMappingItems(\n \n         if (resource != null) {\n             switch (type) {\n-                case USER:\n-                    if (resource.getUmapping() != null) {\n-                        items = resource.getUmapping().getItems();\n-                    }\n-                    break;\n                 case ROLE:\n                     if (resource.getRmapping() != null) {\n                         items = resource.getRmapping().getItems();\n                     }\n                     break;\n                 case MEMBERSHIP:\n+                case USER:\n+                    if (resource.getUmapping() != null) {\n+                        items = resource.getUmapping().getItems();\n+                    }\n+                    break;\n                 default:\n             }\n         }\n@@ -265,6 +265,7 @@ public <T extends AbstractMappingItem> List<T> getMappingItems(\n                 }\n                 break;\n             default:\n+                LOG.error(\"You requested not existing purpose {}\", purpose);\n         }\n \n         return result;"},{"sha":"0ff83e0eae033e54ea458ddb9ead609821d6782e","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":65,"deletions":8,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=9fcaab6afb4f253937f65c2b470ce37b775e6e24","patch":"@@ -49,6 +49,7 @@\n import org.apache.syncope.core.persistence.beans.membership.MDerSchema;\n import org.apache.syncope.core.persistence.beans.membership.MSchema;\n import org.apache.syncope.core.persistence.beans.membership.MVirSchema;\n+import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.RAttrValue;\n import org.apache.syncope.core.persistence.beans.role.RDerSchema;\n import org.apache.syncope.core.persistence.beans.role.RSchema;\n@@ -130,13 +131,16 @@ public static <T extends AbstractMappingItem> Set<T> getMatchingMappingItems(fin\n      * @param changePwd whether password should be included for propagation attributes or not\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @param membVAttrsToBeRemoved membership virtual attributes to be removed\n+     * @param membVAttrsToBeUpdated membership virtual attributes to be added\n      * @param enable whether user must be enabled or not\n      * @param resource target resource\n      * @return account link + prepared attributes\n      */\n     public static <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> prepareAttributes(\n             final AttributableUtil attrUtil, final T subject, final String password, final boolean changePwd,\n             final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated,\n+            final Set<String> membVAttrsToBeRemoved, final Map<String, AttributeMod> membVAttrsToBeUpdated,\n             final Boolean enable, final ExternalResource resource) {\n \n         LOG.debug(\"Preparing resource attributes for {} on resource {} with attributes {}\",\n@@ -162,8 +166,21 @@ public static <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>>\n                     virAttrCache.expire(attrUtil.getType(), subject.getId(), mapping.getIntAttrName());\n                 }\n \n+                // SYNCOPE-458 expire cache also for membership virtual schemas\n+                if (attrUtil.getType() == AttributableType.USER && mapping.getIntMappingType()\n+                        == IntMappingType.MembershipVirtualSchema && (subject instanceof SyncopeUser)) {\n+                    final SyncopeUser user = (SyncopeUser) subject;\n+                    for (Membership membership : user.getMemberships()) {\n+                        LOG.debug(\"Expire entry cache {}-{} for membership {}\", subject.getId(), mapping.\n+                                getIntAttrName(), membership);\n+                        virAttrCache.expire(AttributableType.MEMBERSHIP, membership.getId(), mapping.\n+                                getIntAttrName());\n+                    }\n+                }\n+\n                 Map.Entry<String, Attribute> preparedAttribute = prepareAttribute(\n-                        resource, mapping, subject, password, passwordGenerator, vAttrsToBeRemoved, vAttrsToBeUpdated);\n+                        resource, mapping, subject, password, passwordGenerator, vAttrsToBeRemoved, vAttrsToBeUpdated,\n+                        membVAttrsToBeRemoved, membVAttrsToBeUpdated);\n \n                 if (preparedAttribute != null && preparedAttribute.getKey() != null) {\n                     accountId = preparedAttribute.getKey();\n@@ -220,7 +237,8 @@ public static <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>>\n     private static <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n             final ExternalResource resource, final AbstractMappingItem mapItem,\n             final T subject, final String password, final PasswordGenerator passwordGenerator,\n-            final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated) {\n+            final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated,\n+            final Set<String> membVAttrsToBeRemoved, final Map<String, AttributeMod> membVAttrsToBeUpdated) {\n \n         final List<AbstractAttributable> attributables = new ArrayList<AbstractAttributable>();\n \n@@ -256,7 +274,8 @@ private static <T extends AbstractAttributable> Map.Entry<String, Attribute> pre\n         }\n \n         List<AbstractAttrValue> values = getIntValues(\n-                resource, mapItem, attributables, vAttrsToBeRemoved, vAttrsToBeUpdated);\n+                resource, mapItem, attributables, vAttrsToBeRemoved, vAttrsToBeUpdated, membVAttrsToBeRemoved,\n+                membVAttrsToBeUpdated);\n \n         AbstractNormalSchema schema = null;\n         boolean readOnlyVirSchema = false;\n@@ -415,7 +434,8 @@ private static <T extends AbstractAttributable> String getRoleOwnerValue(final E\n \n         Map.Entry<String, Attribute> preparedAttr = prepareAttribute(\n                 resource, attrUtil.getAccountIdItem(resource), subject, null, null,\n-                Collections.<String>emptySet(), Collections.<String, AttributeMod>emptyMap());\n+                Collections.<String>emptySet(), Collections.<String, AttributeMod>emptyMap(), Collections.\n+                <String>emptySet(), Collections.<String, AttributeMod>emptyMap());\n         String accountId = preparedAttr.getKey();\n \n         final Name roleOwnerName = evaluateNAME(subject, resource, accountId);\n@@ -430,11 +450,14 @@ private static <T extends AbstractAttributable> String getRoleOwnerValue(final E\n      * @param attributables list of attributables\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @param membVAttrsToBeRemoved membership virtual attributes to be removed\n+     * @param membVAttrsToBeUpdated membership virtual attributes to be added\n      * @return attribute values.\n      */\n     public static List<AbstractAttrValue> getIntValues(final ExternalResource resource,\n             final AbstractMappingItem mappingItem, final List<AbstractAttributable> attributables,\n-            final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated) {\n+            final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated,\n+            final Set<String> membVAttrsToBeRemoved, final Map<String, AttributeMod> membVAttrsToBeUpdated) {\n \n         LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", attributables, mappingItem.getIntMappingType());\n \n@@ -465,7 +488,6 @@ public static List<AbstractAttrValue> getIntValues(final ExternalResource resour\n \n             case UserVirtualSchema:\n             case RoleVirtualSchema:\n-            case MembershipVirtualSchema:\n                 for (AbstractAttributable attributable : attributables) {\n                     AbstractVirAttr virAttr = attributable.getVirAttr(mappingItem.getIntAttrName());\n                     if (virAttr != null) {\n@@ -489,10 +511,44 @@ public static List<AbstractAttrValue> getIntValues(final ExternalResource resour\n                         }\n                     }\n \n-                    LOG.debug(\"Retrieved virtual attribute {}\"\n+                    LOG.debug(\"Retrieved {} virtual attribute {}\"\n+                            + \"\\n* IntAttrName {}\"\n+                            + \"\\n* IntMappingType {}\"\n+                            + \"\\n* Attribute values {}\",\n+                            attributable.getClass().getSimpleName(),\n+                            virAttr, mappingItem.getIntAttrName(), mappingItem.getIntMappingType(), values);\n+                }\n+                break;\n+\n+            case MembershipVirtualSchema:\n+                for (AbstractAttributable attributable : attributables) {\n+                    AbstractVirAttr virAttr = attributable.getVirAttr(mappingItem.getIntAttrName());\n+                    if (virAttr != null) {\n+                        if (membVAttrsToBeRemoved != null && membVAttrsToBeUpdated != null) {\n+                            if (membVAttrsToBeUpdated.containsKey(mappingItem.getIntAttrName())) {\n+                                virAttr.setValues(\n+                                        membVAttrsToBeUpdated.get(mappingItem.getIntAttrName()).getValuesToBeAdded());\n+                            } else if (membVAttrsToBeRemoved.contains(mappingItem.getIntAttrName())) {\n+                                virAttr.getValues().clear();\n+                            } else {\n+                                throw new IllegalArgumentException(\"Don't need to update membership virtual attribute '\"\n+                                        + mappingItem.getIntAttrName() + \"'\");\n+                            }\n+                        }\n+                        if (virAttr.getValues() != null) {\n+                            for (String value : virAttr.getValues()) {\n+                                attrValue = new UAttrValue();\n+                                attrValue.setStringValue(value);\n+                                values.add(attrValue);\n+                            }\n+                        }\n+                    }\n+\n+                    LOG.debug(\"Retrieved {} virtual attribute {}\"\n                             + \"\\n* IntAttrName {}\"\n                             + \"\\n* IntMappingType {}\"\n                             + \"\\n* Attribute values {}\",\n+                            attributable.getClass().getSimpleName(),\n                             virAttr, mappingItem.getIntAttrName(), mappingItem.getIntMappingType(), values);\n                 }\n                 break;\n@@ -580,14 +636,15 @@ public static List<AbstractAttrValue> getIntValues(final ExternalResource resour\n      * Get accountId internal value.\n      *\n      * @param attributable attributable\n+     * @param resource external resource\n      * @param accountIdItem accountid mapping item\n      * @return accountId internal value\n      */\n     public static String getAccountIdValue(final AbstractAttributable attributable, final ExternalResource resource,\n             final AbstractMappingItem accountIdItem) {\n \n         List<AbstractAttrValue> values = getIntValues(resource, accountIdItem,\n-                Collections.<AbstractAttributable>singletonList(attributable), null, null);\n+                Collections.<AbstractAttributable>singletonList(attributable), null, null, null, null);\n         return values == null || values.isEmpty()\n                 ? null\n                 : values.get(0).getValueAsString();"},{"sha":"5c318fcb3eb8f9c61f126b6580de23d51fd0ff1d","filename":"core/src/test/java/org/apache/syncope/core/rest/VirAttrTestITCase.java","status":"modified","additions":166,"deletions":0,"changes":166,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9fcaab6afb4f253937f65c2b470ce37b775e6e24/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java?ref=9fcaab6afb4f253937f65c2b470ce37b775e6e24","patch":"@@ -27,6 +27,7 @@\n import org.apache.commons.lang3.SerializationUtils;\n import java.util.Map;\n import org.apache.syncope.common.mod.AttributeMod;\n+import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.common.mod.StatusMod;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.services.ResourceService;\n@@ -555,4 +556,169 @@ public void issueSYNCOPE459() {\n         userTO = updateUser(userMod);\n         assertNotNull(userTO.getVirAttrMap().get(\"virtualdata\"));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE458() {\n+        // -------------------------------------------\n+        // Create a role ad-hoc\n+        // -------------------------------------------\n+        final String roleName = \"issueSYNCOPE458-Role-\" + getUUIDString();\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(roleName);\n+        roleTO.setParent(2L);\n+        roleTO.setInheritTemplates(true);\n+        roleTO = createRole(roleTO);\n+        // -------------------------------------------\n+\n+        // -------------------------------------------\n+        // Update resource-db-virattr mapping adding new membership virtual schema mapping\n+        // -------------------------------------------\n+        ResourceTO resourceDBVirAttr = resourceService.read(RESOURCE_NAME_DBVIRATTR);\n+        assertNotNull(resourceDBVirAttr);\n+\n+        final MappingTO resourceUMapping = resourceDBVirAttr.getUmapping();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntAttrName(\"mvirtualdata\");\n+        item.setIntMappingType(IntMappingType.MembershipVirtualSchema);\n+        item.setExtAttrName(\"EMAIL\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+\n+        resourceUMapping.addItem(item);\n+\n+        resourceDBVirAttr.setUmapping(resourceUMapping);\n+\n+        resourceService.update(RESOURCE_NAME_DBVIRATTR, resourceDBVirAttr);\n+        // -------------------------------------------\n+\n+        // -------------------------------------------\n+        // Create new user\n+        // -------------------------------------------\n+        UserTO userTO = getUniqueSampleTO(\"syncope458@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getMemberships().clear();\n+\n+        // add membership, with virtual attribute populated, to user\n+        MembershipTO membership = new MembershipTO();\n+        membership.setRoleId(roleTO.getId());\n+        membership.getVirAttrs().add(attributeTO(\"mvirtualdata\", \"syncope458@syncope.apache.org\"));\n+        userTO.getMemberships().add(membership);\n+\n+        //propagate user\n+        userTO = createUser(userTO);\n+        assertEquals(1, userTO.getPropagationStatusTOs().size());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+       // -------------------------------------------\n+\n+        // 1. check if membership has virtual attribute populated\n+        assertNotNull(userTO.getMemberships().get(0).getVirAttrMap().get(\"mvirtualdata\"));\n+        assertEquals(\"syncope458@syncope.apache.org\",\n+                userTO.getMemberships().get(0).getVirAttrMap().get(\"mvirtualdata\").getValues().get(0));\n+        // -------------------------------------------\n+\n+        // 2. update membership virtual attribute\n+        MembershipMod membershipMod = new MembershipMod();\n+        membershipMod.setRole(roleTO.getId());\n+        membershipMod.getVirAttrsToUpdate().add(attributeMod(\"mvirtualdata\", \"syncope458_NEW@syncope.apache.org\"));\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().iterator().next().getId());\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        // 3. check again after update if membership has virtual attribute populated with new value\n+        assertNotNull(userTO.getMemberships().get(0).getVirAttrMap().get(\"mvirtualdata\"));\n+        assertEquals(\"syncope458_NEW@syncope.apache.org\", userTO.getMemberships().get(0).getVirAttrMap().get(\n+                \"mvirtualdata\").getValues().get(0));\n+\n+        // ----------------------------------------\n+        // force cache expiring without any modification\n+        // ----------------------------------------\n+        String jdbcURL = null;\n+        ConnInstanceTO connInstanceBean = connectorService.readByResource(RESOURCE_NAME_DBVIRATTR);\n+        for (ConnConfProperty prop : connInstanceBean.getConfiguration()) {\n+            if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n+                jdbcURL = prop.getValues().iterator().next().toString();\n+                prop.getValues().clear();\n+                prop.getValues().add(\"jdbc:h2:tcp://localhost:9092/xxx\");\n+            }\n+        }\n+\n+        connectorService.update(connInstanceBean.getId(), connInstanceBean);\n+\n+        membershipMod = new MembershipMod();\n+        membershipMod.setRole(roleTO.getId());\n+        membershipMod.getVirAttrsToUpdate().add(attributeMod(\"mvirtualdata\", \"syncope458_updated@syncope.apache.org\"));\n+\n+        userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().iterator().next().getId());\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        // ----------------------------------\n+\n+        // change attribute value directly on resource\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        String value = jdbcTemplate.queryForObject(\n+                \"SELECT EMAIL FROM testsync WHERE ID=?\", String.class, userTO.getId());\n+        assertEquals(\"syncope458_NEW@syncope.apache.org\", value);\n+\n+        jdbcTemplate.update(\"UPDATE testsync set EMAIL='syncope458_NEW_TWO@syncope.apache.org' WHERE ID=?\", userTO.\n+                getId());\n+\n+        value = jdbcTemplate.queryForObject(\"SELECT EMAIL FROM testsync WHERE ID=?\", String.class, userTO.getId());\n+        assertEquals(\"syncope458_NEW_TWO@syncope.apache.org\", value);\n+        // ----------------------------------------\n+\n+        // ----------------------------------------\n+        // restore connector\n+        // ----------------------------------------\n+        for (ConnConfProperty prop : connInstanceBean.getConfiguration()) {\n+            if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n+                prop.getValues().clear();\n+                prop.getValues().add(jdbcURL);\n+            }\n+        }\n+        connectorService.update(connInstanceBean.getId(), connInstanceBean);\n+        // ----------------------------------------\n+\n+        userTO = userService.read(userTO.getId());\n+        assertNotNull(userTO);\n+        // 4. check virtual attribute synchronization after direct update on resource\n+        assertEquals(\"syncope458_NEW_TWO@syncope.apache.org\", userTO.getMemberships().get(0).getVirAttrMap().get(\n+                \"mvirtualdata\").getValues().get(0));\n+\n+        // 5. remove membership virtual attribute\n+        membershipMod = new MembershipMod();\n+        membershipMod.setRole(roleTO.getId());\n+        membershipMod.getVirAttrsToRemove().add(\"mvirtualdata\");\n+\n+        userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getMembershipsToRemove().add(userTO.getMemberships().iterator().next().getId());\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+        // check again after update if membership hasn't any virtual attribute\n+        assertTrue(userTO.getMemberships().get(0).getVirAttrMap().isEmpty());\n+\n+        // -------------------------------------------\n+        // Delete role ad-hoc and restore resource mapping\n+        // -------------------------------------------\n+        roleService.delete(roleTO.getId());\n+\n+        resourceUMapping.removeItem(item);\n+        resourceDBVirAttr.setUmapping(resourceUMapping);\n+        resourceService.update(RESOURCE_NAME_DBVIRATTR, resourceDBVirAttr);\n+        // -------------------------------------------\n+    }\n }"}]}