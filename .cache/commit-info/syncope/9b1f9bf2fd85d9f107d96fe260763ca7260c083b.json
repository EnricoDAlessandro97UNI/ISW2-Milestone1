{"sha":"9b1f9bf2fd85d9f107d96fe260763ca7260c083b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjliMWY5YmYyZmQ4NWQ5ZjEwN2Q5NmZlMjYwNzYzY2E3MjYwYzA4M2I=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-09-07T10:13:08Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-09-07T10:13:19Z"},"message":"Minor cleanup","tree":{"sha":"245b9f745f64dfb8d60cf81bc77dfa51ebcd3075","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/245b9f745f64dfb8d60cf81bc77dfa51ebcd3075"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9b1f9bf2fd85d9f107d96fe260763ca7260c083b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9b1f9bf2fd85d9f107d96fe260763ca7260c083b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9b1f9bf2fd85d9f107d96fe260763ca7260c083b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9b1f9bf2fd85d9f107d96fe260763ca7260c083b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"723080fe726698547978c268ad6e6681666f10c8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/723080fe726698547978c268ad6e6681666f10c8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/723080fe726698547978c268ad6e6681666f10c8"}],"stats":{"total":43,"additions":22,"deletions":21},"files":[{"sha":"0bd38b5eac2a77a78b67d711abc3eeb0659200d8","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java","status":"modified","additions":21,"deletions":19,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b1f9bf2fd85d9f107d96fe260763ca7260c083b/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b1f9bf2fd85d9f107d96fe260763ca7260c083b/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java?ref=9b1f9bf2fd85d9f107d96fe260763ca7260c083b","patch":"@@ -73,7 +73,8 @@ public class UserRequestLogic extends AbstractTransactionalLogic<EntityTO> {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n-    public Pair<Integer, List<UserRequest>> list(final String userKey,\n+    public Pair<Integer, List<UserRequest>> list(\n+            final String userKey,\n             final int page,\n             final int size,\n             final List<OrderByClause> orderByClauses) {\n@@ -100,8 +101,9 @@ protected UserRequest doStart(\n             final String bpmnProcess,\n             final User user,\n             final WorkflowTaskExecInput inputVariables) {\n+\n         // check if BPMN process exists\n-        bpmnProcessManager.exportProcess(bpmnProcess, BpmnProcessFormat.XML, new NullOutputStream());\n+        bpmnProcessManager.exportProcess(bpmnProcess, BpmnProcessFormat.XML, NullOutputStream.NULL_OUTPUT_STREAM);\n \n         return userRequestHandler.start(bpmnProcess, user, inputVariables);\n     }\n@@ -159,6 +161,23 @@ public UserRequestForm unclaimForm(final String taskId) {\n         return form;\n     }\n \n+    private void evaluateKey(final String userKey) {\n+        if (userKey == null) {\n+            securityChecks(null,\n+                    FlowableEntitlement.USER_REQUEST_FORM_LIST,\n+                    \"Listing forms not allowed\");\n+        } else {\n+            User user = userDAO.find(userKey);\n+            if (user == null) {\n+                throw new NotFoundException(\"User \" + userKey);\n+            }\n+\n+            securityChecks(user.getUsername(),\n+                    FlowableEntitlement.USER_REQUEST_FORM_LIST,\n+                    \"Listing forms for user\" + user.getUsername() + \" not allowed\");\n+        }\n+    }\n+\n     @PreAuthorize(\"isAuthenticated()\")\n     public UserRequestForm getForm(final String userKey, final String taskId) {\n         evaluateKey(userKey);\n@@ -220,21 +239,4 @@ protected EntityTO resolveReference(final Method method, final Object... args)\n \n         throw new UnresolvedReferenceException();\n     }\n-\n-    private void evaluateKey(final String userKey) {\n-        if (userKey == null) {\n-            securityChecks(null,\n-                    FlowableEntitlement.USER_REQUEST_FORM_LIST,\n-                    \"Listing forms not allowed\");\n-        } else {\n-            User user = userDAO.find(userKey);\n-            if (user == null) {\n-                throw new NotFoundException(\"User \" + userKey);\n-            }\n-\n-            securityChecks(user.getUsername(),\n-                    FlowableEntitlement.USER_REQUEST_FORM_LIST,\n-                    \"Listing forms for user\" + user.getUsername() + \" not allowed\");\n-        }\n-    }\n }"},{"sha":"1ca09405cfe7fec18a8662bd51fe320963176558","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b1f9bf2fd85d9f107d96fe260763ca7260c083b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b1f9bf2fd85d9f107d96fe260763ca7260c083b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java?ref=9b1f9bf2fd85d9f107d96fe260763ca7260c083b","patch":"@@ -43,8 +43,7 @@ public class CreateARelationship extends FlowableServiceTask {\n \n     @Override\n     protected void doExecute(final DelegateExecution execution) {\n-        User user = execution.\n-                getVariable(FlowableRuntimeUtils.USER, User.class);\n+        User user = execution.getVariable(FlowableRuntimeUtils.USER, User.class);\n \n         Boolean approve = execution.getVariable(\"approve\", Boolean.class);\n         if (Boolean.TRUE.equals(approve)) {"}]}