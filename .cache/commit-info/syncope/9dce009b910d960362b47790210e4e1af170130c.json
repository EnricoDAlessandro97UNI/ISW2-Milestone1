{"sha":"9dce009b910d960362b47790210e4e1af170130c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlkY2UwMDliOTEwZDk2MDM2MmI0Nzc5MDIxMGU0ZTFhZjE3MDEzMGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-11-15T11:01:43Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-11-15T11:01:43Z"},"message":"Fixing getItems() call for role-only resources\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/branches/DEV_ROLE_PROVISIONING@1409730 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c8c0a987db3e0e90a3756c3b8964f155639cf4a5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c8c0a987db3e0e90a3756c3b8964f155639cf4a5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9dce009b910d960362b47790210e4e1af170130c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9dce009b910d960362b47790210e4e1af170130c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9dce009b910d960362b47790210e4e1af170130c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9dce009b910d960362b47790210e4e1af170130c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"73ac12be536e7ff3ac984b7f4749b24d584ee5b8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/73ac12be536e7ff3ac984b7f4749b24d584ee5b8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/73ac12be536e7ff3ac984b7f4749b24d584ee5b8"}],"stats":{"total":31,"additions":16,"deletions":15},"files":[{"sha":"c03d23dbe76e14b90e9dbda1eee1c2654ca09d81","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9dce009b910d960362b47790210e4e1af170130c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9dce009b910d960362b47790210e4e1af170130c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=9dce009b910d960362b47790210e4e1af170130c","patch":"@@ -211,13 +211,13 @@ private boolean evaluateMandatoryCondition(final String mandatoryCondition,\n         return Boolean.parseBoolean(jexlUtil.evaluate(mandatoryCondition, jexlContext));\n     }\n \n-    private boolean evaluateMandatoryCondition(final ExternalResource resource, final AbstractAttributable attributable,\n-            final String intAttrName, final IntMappingType intMappingType) {\n+    private boolean evaluateMandatoryCondition(final AttributableUtil attrUtil, final ExternalResource resource,\n+            final AbstractAttributable attributable, final String intAttrName, final IntMappingType intMappingType) {\n \n         boolean result = false;\n \n         final List<AbstractMappingItem> mappings = MappingUtil.getMatchingMappingItems(\n-                resource.getUmapping().getItems(), intAttrName, intMappingType);\n+                attrUtil.getMappingItems(resource), intAttrName, intMappingType);\n         for (Iterator<AbstractMappingItem> itor = mappings.iterator(); itor.hasNext() && !result;) {\n             final AbstractMappingItem mapping = itor.next();\n             result |= evaluateMandatoryCondition(mapping.getMandatoryCondition(), attributable);\n@@ -226,22 +226,22 @@ private boolean evaluateMandatoryCondition(final ExternalResource resource, fina\n         return result;\n     }\n \n-    private boolean evaluateMandatoryCondition(final AbstractAttributable attributable, final String intAttrName,\n-            final IntMappingType intMappingType) {\n+    private boolean evaluateMandatoryCondition(final AttributableUtil attrUtil,\n+            final AbstractAttributable attributable, final String intAttrName, final IntMappingType intMappingType) {\n \n         boolean result = false;\n \n         for (Iterator<ExternalResource> itor = attributable.getResources().iterator(); itor.hasNext() && !result;) {\n             final ExternalResource resource = itor.next();\n             if (resource.isEnforceMandatoryCondition()) {\n-                result |= evaluateMandatoryCondition(resource, attributable, intAttrName, intMappingType);\n+                result |= evaluateMandatoryCondition(attrUtil, resource, attributable, intAttrName, intMappingType);\n             }\n         }\n \n         return result;\n     }\n \n-    private SyncopeClientException checkMandatory(final AttributableUtil attributableUtil,\n+    private SyncopeClientException checkMandatory(final AttributableUtil attrUtil,\n             final AbstractAttributable attributable) {\n \n         SyncopeClientException reqValMissing = new SyncopeClientException(\n@@ -250,31 +250,32 @@ private SyncopeClientException checkMandatory(final AttributableUtil attributabl\n         LOG.debug(\"Check mandatory constraint among resources {}\", attributable.getResources());\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n-        for (AbstractSchema schema : schemaDAO.findAll(attributableUtil.schemaClass())) {\n+        for (AbstractSchema schema : schemaDAO.findAll(attrUtil.schemaClass())) {\n             if (attributable.getAttribute(schema.getName()) == null\n                     && !schema.isReadonly()\n                     && (evaluateMandatoryCondition(schema.getMandatoryCondition(), attributable)\n-                    || evaluateMandatoryCondition(attributable, schema.getName(), attributableUtil.intMappingType()))) {\n+                    || evaluateMandatoryCondition(attrUtil, attributable, schema.getName(),\n+                    attrUtil.intMappingType()))) {\n \n                 LOG.error(\"Mandatory schema \" + schema.getName() + \" not provided with values\");\n \n                 reqValMissing.addElement(schema.getName());\n             }\n         }\n-        for (AbstractDerSchema derSchema : derSchemaDAO.findAll(attributableUtil.derSchemaClass())) {\n+        for (AbstractDerSchema derSchema : derSchemaDAO.findAll(attrUtil.derSchemaClass())) {\n             if (attributable.getDerivedAttribute(derSchema.getName()) == null\n-                    && evaluateMandatoryCondition(\n-                    attributable, derSchema.getName(), attributableUtil.derIntMappingType())) {\n+                    && evaluateMandatoryCondition(attrUtil, attributable, derSchema.getName(),\n+                    attrUtil.derIntMappingType())) {\n \n                 LOG.error(\"Mandatory derived schema \" + derSchema.getName() + \" does not evaluate to any value\");\n \n                 reqValMissing.addElement(derSchema.getName());\n             }\n         }\n-        for (AbstractVirSchema virSchema : virSchemaDAO.findAll(attributableUtil.virSchemaClass())) {\n+        for (AbstractVirSchema virSchema : virSchemaDAO.findAll(attrUtil.virSchemaClass())) {\n             if (attributable.getAttribute(virSchema.getName()) == null\n-                    && evaluateMandatoryCondition(\n-                    attributable, virSchema.getName(), attributableUtil.virIntMappingType())) {\n+                    && evaluateMandatoryCondition(attrUtil, attributable, virSchema.getName(),\n+                    attrUtil.virIntMappingType())) {\n \n                 LOG.error(\"Mandatory virtual schema \" + virSchema.getName() + \" not provided with values\");\n "}]}