{"sha":"cb72af53771e8fd909e8adfb14fc9b415916bc27","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNiNzJhZjUzNzcxZThmZDkwOWU4YWRmYjE0ZmM5YjQxNTkxNmJjMjc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-01-31T15:58:29Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-01-31T16:44:22Z"},"message":"[SYNCOPE-1538] Introducing realm search","tree":{"sha":"a1b406358d7093049e133ba3eec3c7742795d700","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a1b406358d7093049e133ba3eec3c7742795d700"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cb72af53771e8fd909e8adfb14fc9b415916bc27","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb72af53771e8fd909e8adfb14fc9b415916bc27","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cb72af53771e8fd909e8adfb14fc9b415916bc27","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb72af53771e8fd909e8adfb14fc9b415916bc27/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e3c50b2693dc42fece29cd4482107bf2f2900fab","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e3c50b2693dc42fece29cd4482107bf2f2900fab","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e3c50b2693dc42fece29cd4482107bf2f2900fab"}],"stats":{"total":184,"additions":154,"deletions":30},"files":[{"sha":"034b9a2b5b530fe7581e785eeeed4de6df1f6fb1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Realms.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -72,6 +72,7 @@ public Realms(final PageParameters parameters) {\n             @Override\n             protected Serializable onApplyInternal(\n                     final TemplatableTO targetObject, final String type, final AnyTO anyTO) {\n+\n                 targetObject.getTemplates().put(type, anyTO);\n                 RealmRestClient.update(RealmTO.class.cast(targetObject));\n                 return targetObject;"},{"sha":"486d0ba57737b01992579af37e00156fdc832284","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/RealmRestClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n@@ -35,7 +36,7 @@ public class RealmRestClient extends BaseRestClient {\n     private static final long serialVersionUID = -8549081557283519638L;\n \n     public static List<RealmTO> list() {\n-        return getService(RealmService.class).list();\n+        return getService(RealmService.class).list(SyncopeConstants.ROOT_REALM);\n     }\n \n     public static List<DynRealmTO> listDynReams() {"},{"sha":"def9fd03ccfd4e0be20651c3f7163985e6abfaed","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/RealmRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRealmRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRealmRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRealmRestClient.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.enduser.rest;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.rest.api.service.RealmService;\n \n@@ -30,7 +31,6 @@ public class RealmRestClient extends BaseRestClient {\n     private static final long serialVersionUID = -8549081557283519638L;\n \n     public static List<RealmTO> list() {\n-        return getService(RealmService.class).list();\n+        return getService(RealmService.class).list(SyncopeConstants.ROOT_REALM);\n     }\n-\n }"},{"sha":"f32d6d72d11c42e9232c9fbf46e82eab259a8953","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/RealmQuery.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FRealmQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FRealmQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FRealmQuery.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import java.io.Serializable;\n+import javax.ws.rs.QueryParam;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+public class RealmQuery implements Serializable {\n+\n+    private static final long serialVersionUID = -2278419397595186866L;\n+\n+    public static class Builder {\n+\n+        private final RealmQuery instance = new RealmQuery();\n+\n+        public Builder keyword(final String keyword) {\n+            instance.setKeyword(keyword);\n+            return this;\n+        }\n+\n+        public RealmQuery build() {\n+            return instance;\n+        }\n+    }\n+\n+    private String keyword;\n+\n+    public String getKeyword() {\n+        return keyword;\n+    }\n+\n+    @QueryParam(\"keyword\")\n+    public void setKeyword(final String keyword) {\n+        this.keyword = keyword;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        RealmQuery other = (RealmQuery) obj;\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n+                append(keyword, other.keyword).\n+                build();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(keyword).\n+                build();\n+    }\n+}"},{"sha":"0790b7cfcc8593ba9a64e1dd2868d71f37ce1544","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -30,6 +30,7 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n import java.util.List;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n@@ -44,6 +45,7 @@\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n \n /**\n  * REST operations for realms.\n@@ -56,13 +58,15 @@\n public interface RealmService extends JAXRSService {\n \n     /**\n-     * Returns a list of all realms.\n+     * Returns a paged list of existing realms matching the given query.\n      *\n-     * @return list of all realms.\n+     * @param query query conditions\n+     * @return paged list of existing realms matching the given query\n      */\n     @GET\n+    @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<RealmTO> list();\n+    List<RealmTO> search(@BeanParam RealmQuery query);\n \n     /**\n      * Returns realms rooted at the given path."},{"sha":"a1fd376eea1fa28216093b9694598f8ca786abdf","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -69,6 +70,20 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {\n     @Autowired\n     private PropagationTaskExecutor taskExecutor;\n \n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_LIST + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<RealmTO> search(final String keyword) {\n+        Set<String> bases = AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.REALM_LIST);\n+\n+        return realmDAO.findMatching(keyword).stream().\n+                filter(realm -> bases.stream().anyMatch(base -> realm.getFullPath().startsWith(base))).\n+                flatMap(realm -> realmDAO.findDescendants(realm).stream()).\n+                distinct().\n+                map(realm -> binder.getRealmTO(realm, true)).\n+                sorted(Comparator.comparing(RealmTO::getFullPath)).\n+                collect(Collectors.toList());\n+    }\n+\n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     public List<RealmTO> list(final String fullPath) {\n@@ -79,7 +94,7 @@ public List<RealmTO> list(final String fullPath) {\n             throw new NotFoundException(fullPath);\n         }\n \n-        final boolean admin = AuthContextUtils.getAuthorizations().keySet().contains(IdRepoEntitlement.REALM_LIST);\n+        boolean admin = AuthContextUtils.getAuthorizations().keySet().contains(IdRepoEntitlement.REALM_LIST);\n         return realmDAO.findDescendants(realm).stream().\n                 map(descendant -> binder.getRealmTO(descendant, admin)).collect(Collectors.toList());\n     }\n@@ -222,5 +237,4 @@ protected RealmTO resolveReference(final Method method, final Object... args)\n \n         throw new UnresolvedReferenceException();\n     }\n-\n }"},{"sha":"5767ad290a2398b11c74d3e6e1a9b7c81784acbc","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RealmServiceImpl.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.core.logic.RealmLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -38,8 +39,9 @@ public class RealmServiceImpl extends AbstractServiceImpl implements RealmServic\n     private RealmLogic logic;\n \n     @Override\n-    public List<RealmTO> list() {\n-        return list(StringUtils.EMPTY);\n+    public List<RealmTO> search(final RealmQuery query) {\n+        String keyword = query.getKeyword() == null ? null : query.getKeyword().replace('*', '%');\n+        return logic.search(keyword);\n     }\n \n     @Override"},{"sha":"9daabb12a11cca7d552993f29908359922640fb3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -41,6 +41,8 @@ public interface RealmDAO extends DAO<Realm> {\n \n     List<Realm> findByResource(ExternalResource resource);\n \n+    List<Realm> findMatching(String keyword);\n+\n     <T extends Policy> List<Realm> findByPolicy(T policy);\n \n     List<Realm> findByLogicActions(Implementation logicActions);"},{"sha":"f8a0020b12c1eeeaf883383bdd66007421e6e174","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":18,"deletions":10,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -102,16 +102,15 @@ public Realm findByFullPath(final String fullPath) {\n     private <T extends Policy> List<Realm> findSamePolicyChildren(final Realm realm, final T policy) {\n         List<Realm> result = new ArrayList<>();\n \n-        for (Realm child : findChildren(realm)) {\n-            if ((policy instanceof AccountPolicy\n-                    && child.getAccountPolicy() == null || policy.equals(child.getAccountPolicy()))\n-                    || (policy instanceof PasswordPolicy\n-                    && child.getPasswordPolicy() == null || policy.equals(child.getPasswordPolicy()))) {\n-\n-                result.add(child);\n-                result.addAll(findSamePolicyChildren(child, policy));\n-            }\n-        }\n+        findChildren(realm).stream().\n+                filter(child -> (policy instanceof AccountPolicy\n+                && child.getAccountPolicy() == null || policy.equals(child.getAccountPolicy()))\n+                || (policy instanceof PasswordPolicy\n+                && child.getPasswordPolicy() == null || policy.equals(child.getPasswordPolicy()))).\n+                forEach(child -> {\n+                    result.add(child);\n+                    result.addAll(findSamePolicyChildren(child, policy));\n+                });\n \n         return result;\n     }\n@@ -134,6 +133,15 @@ public List<Realm> findByResource(final ExternalResource resource) {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<Realm> findMatching(final String keyword) {\n+        TypedQuery<Realm> query = entityManager().createQuery(\"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e \"\n+                + \"WHERE e.name LIKE :keyword\", Realm.class);\n+        query.setParameter(\"keyword\", keyword);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public <T extends Policy> List<Realm> findByPolicy(final T policy) {\n         if (ProvisioningPolicy.class.isAssignableFrom(policy.getClass())) {"},{"sha":"236027ca7eea3a60488e7d7771f7c8998707f977","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -231,8 +231,8 @@ public RealmTO getRealmTO(final Realm realm, final boolean admin) {\n \n             realm.getActions().forEach(action -> realmTO.getActions().add(action.getKey()));\n \n-            realm.getTemplates().\n-                    forEach(template -> realmTO.getTemplates().put(template.getAnyType().getKey(), template.get()));\n+            realm.getTemplates().forEach(\n+                    template -> realmTO.getTemplates().put(template.getAnyType().getKey(), template.get()));\n \n             realm.getResources().forEach(resource -> realmTO.getResources().add(resource.getKey()));\n         }"},{"sha":"f5f16e0e4b8e60d812b6f31d03ad950c88231547","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -58,6 +58,7 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.syncope.common.rest.api.beans.ReconQuery;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n@@ -113,14 +114,16 @@ public void readPlainSchemas() {\n \n     @Test\n     public void readRealm() {\n-        List<RealmTO> realms = adminClient.getService(RealmService.class).list();\n+        List<RealmTO> realms = adminClient.getService(RealmService.class).\n+                search(new RealmQuery.Builder().keyword(\"*\").build());\n         assertEquals(1, realms.size());\n         assertEquals(SyncopeConstants.ROOT_REALM, realms.get(0).getName());\n     }\n \n     @Test\n     public void createUser() {\n-        assertNull(adminClient.getService(RealmService.class).list().get(0).getPasswordPolicy());\n+        assertNull(adminClient.getService(RealmService.class).\n+                search(new RealmQuery.Builder().keyword(\"*\").build()).get(0).getPasswordPolicy());\n \n         UserCR userCR = new UserCR();\n         userCR.setRealm(SyncopeConstants.ROOT_REALM);"},{"sha":"bc86a1b655223d2f236ef8d69a1572067c6d1001","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -43,6 +43,7 @@\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -55,9 +56,15 @@ private static Optional<RealmTO> getRealm(final String fullPath) {\n         return realmService.list(fullPath).stream().filter(realm -> fullPath.equals(realm.getFullPath())).findFirst();\n     }\n \n+    @Test\n+    public void search() {\n+        List<RealmTO> match = realmService.search(new RealmQuery.Builder().keyword(\"*o*\").build());\n+        assertTrue(match.stream().allMatch(realm -> realm.getName().contains(\"o\")));\n+    }\n+\n     @Test\n     public void list() {\n-        List<RealmTO> realms = realmService.list();\n+        List<RealmTO> realms = realmService.list(SyncopeConstants.ROOT_REALM);\n         assertNotNull(realms);\n         assertFalse(realms.isEmpty());\n         realms.forEach(Assertions::assertNotNull);\n@@ -105,7 +112,7 @@ public void createUpdate() {\n         assertNotNull(actual);\n         assertEquals(\"/odd/last\", actual.getFullPath());\n \n-        assertEquals(1, realmService.list().stream().\n+        assertEquals(1, realmService.list(SyncopeConstants.ROOT_REALM).stream().\n                 filter(object -> realm.getName().equals(object.getName())).count());\n \n         // 4. create under invalid path"},{"sha":"f93a363058169060a19a2f7f17c240791942f0ff","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -85,6 +85,7 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n@@ -962,7 +963,7 @@ public void customPolicyRules() {\n         passwordPolicy = createPolicy(PolicyType.PASSWORD, passwordPolicy);\n         assertNotNull(passwordPolicy);\n \n-        RealmTO realm = realmService.list(\"/even/two\").get(0);\n+        RealmTO realm = realmService.search(new RealmQuery.Builder().keyword(\"two\").build()).get(0);\n         String oldAccountPolicy = realm.getAccountPolicy();\n         realm.setAccountPolicy(accountPolicy.getKey());\n         String oldPasswordPolicy = realm.getPasswordPolicy();"},{"sha":"a24107c9fce435c5c96ffcab66632f06de099f7a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb72af53771e8fd909e8adfb14fc9b415916bc27/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb72af53771e8fd909e8adfb14fc9b415916bc27/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=cb72af53771e8fd909e8adfb14fc9b415916bc27","patch":"@@ -75,6 +75,7 @@\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.LDAPPasswordPropagationActions;\n@@ -792,7 +793,7 @@ public void issueSYNCOPE420() throws IOException {\n         }\n         assertNotNull(logicActions);\n \n-        RealmTO realm = realmService.list(\"/even/two\").get(0);\n+        RealmTO realm = realmService.search(new RealmQuery.Builder().keyword(\"two\").build()).get(0);\n         assertNotNull(realm);\n         realm.getActions().add(logicActions.getKey());\n         realmService.update(realm);\n@@ -1222,7 +1223,7 @@ public void issueSYNCOPE626() {\n         passwordPolicy = createPolicy(PolicyType.PASSWORD, passwordPolicy);\n         assertNotNull(passwordPolicy);\n \n-        RealmTO realm = realmService.list(\"/even/two\").get(0);\n+        RealmTO realm = realmService.search(new RealmQuery.Builder().keyword(\"two\").build()).get(0);\n         String oldPasswordPolicy = realm.getPasswordPolicy();\n         realm.setPasswordPolicy(passwordPolicy.getKey());\n         realmService.update(realm);\n@@ -1548,6 +1549,6 @@ public void issueSYNCOPE1472() {\n         UserTO userTO = userService.read(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n         assertFalse(userTO.getResources().contains(RESOURCE_NAME_TESTDB), \"Should not contain removed resources\");\n         assertFalse(userTO.getAuxClasses().contains(\"csv\"), \"Should not contain removed auxiliary classes\");\n-        assertFalse(userTO.getRoles().contains(\"Other\"),\"Should not contain removed roles\");\n+        assertFalse(userTO.getRoles().contains(\"Other\"), \"Should not contain removed roles\");\n     }\n }"}]}