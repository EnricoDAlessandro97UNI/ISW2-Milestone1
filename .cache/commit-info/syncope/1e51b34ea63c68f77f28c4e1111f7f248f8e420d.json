{"sha":"1e51b34ea63c68f77f28c4e1111f7f248f8e420d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFlNTFiMzRlYTYzYzY4Zjc3ZjI4YzRlMTExMWY3ZjI0OGY4ZTQyMGQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-09T15:41:14Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-09T15:41:14Z"},"message":"[SYNCOPE-666] Fixing dynamic memberships and group aDynMembership update","tree":{"sha":"0f40f36ce8ae85543c32f33724a6b6f992226190","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0f40f36ce8ae85543c32f33724a6b6f992226190"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1e51b34ea63c68f77f28c4e1111f7f248f8e420d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1e51b34ea63c68f77f28c4e1111f7f248f8e420d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1e51b34ea63c68f77f28c4e1111f7f248f8e420d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1e51b34ea63c68f77f28c4e1111f7f248f8e420d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"666d73f1bd34e1fc6eccba83a0901dbe794d3f99","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/666d73f1bd34e1fc6eccba83a0901dbe794d3f99","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/666d73f1bd34e1fc6eccba83a0901dbe794d3f99"}],"stats":{"total":107,"additions":84,"deletions":23},"files":[{"sha":"262d15a3a3dcd080cfed7d62334fba191dfb7744","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1e51b34ea63c68f77f28c4e1111f7f248f8e420d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1e51b34ea63c68f77f28c4e1111f7f248f8e420d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java?ref=1e51b34ea63c68f77f28c4e1111f7f248f8e420d","patch":"@@ -86,7 +86,7 @@ public void setUDynMembershipCond(final String udynMembershipCond) {\n         this.udynMembershipCond = udynMembershipCond;\n     }\n \n-    @JsonIgnore\n+    @JsonProperty\n     public Map<String, String> getADynMembershipConds() {\n         return adynMembershipConds;\n     }"},{"sha":"031c0bab80f0f6821364aaf688d128113f2bb642","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":15,"deletions":10,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1e51b34ea63c68f77f28c4e1111f7f248f8e420d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1e51b34ea63c68f77f28c4e1111f7f248f8e420d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=1e51b34ea63c68f77f28c4e1111f7f248f8e420d","patch":"@@ -59,7 +59,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n@@ -269,32 +268,38 @@ public List<TypeExtension> findTypeExtensionByAnyTypeClass(final AnyTypeClass an\n         return query.getResultList();\n     }\n \n-    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Transactional\n     @Override\n     public void refreshDynMemberships(final AnyObject anyObject) {\n         for (Group group : findAll()) {\n             for (ADynGroupMembership memb : group.getADynMemberships()) {\n-                if (!searchDAO.matches(\n+                if (searchDAO.matches(\n                         anyObject,\n                         buildDynMembershipCond(memb.getFIQLCond(), group.getRealm()),\n                         AnyTypeKind.ANY_OBJECT)) {\n \n+                    memb.add(anyObject);\n+                } else {\n                     memb.remove(anyObject);\n                 }\n             }\n         }\n     }\n \n-    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Transactional\n     @Override\n     public void refreshDynMemberships(final User user) {\n         for (Group group : findAll()) {\n-            if (group.getUDynMembership() != null && !searchDAO.matches(\n-                    user,\n-                    buildDynMembershipCond(group.getUDynMembership().getFIQLCond(), group.getRealm()),\n-                    AnyTypeKind.USER)) {\n-\n-                group.getUDynMembership().remove(user);\n+            if (group.getUDynMembership() != null) {\n+                if (searchDAO.matches(\n+                        user,\n+                        buildDynMembershipCond(group.getUDynMembership().getFIQLCond(), group.getRealm()),\n+                        AnyTypeKind.USER)) {\n+\n+                    group.getUDynMembership().add(user);\n+                } else {\n+                    group.getUDynMembership().remove(user);\n+                }\n             }\n         }\n     }"},{"sha":"ea47cf8f2d7798c5c603674ac39c1eee5f33417c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1e51b34ea63c68f77f28c4e1111f7f248f8e420d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1e51b34ea63c68f77f28c4e1111f7f248f8e420d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=1e51b34ea63c68f77f28c4e1111f7f248f8e420d","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n@@ -99,14 +98,18 @@ public void delete(final String key) {\n         delete(role);\n     }\n \n-    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Transactional\n     @Override\n     public void refreshDynMemberships(final User user) {\n         for (Role role : findAll()) {\n-            if (role.getDynMembership() != null && !searchDAO.matches(user,\n-                    SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), AnyTypeKind.USER)) {\n-\n-                role.getDynMembership().remove(user);\n+            if (role.getDynMembership() != null) {\n+                if (searchDAO.matches(user,\n+                        SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), AnyTypeKind.USER)) {\n+\n+                    role.getDynMembership().add(user);\n+                } else {\n+                    role.getDynMembership().remove(user);\n+                }\n             }\n         }\n     }"},{"sha":"942d0392e73d64ad3de8dc230baa1e9c43a3763a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":59,"deletions":6,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1e51b34ea63c68f77f28c4e1111f7f248f8e420d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1e51b34ea63c68f77f28c4e1111f7f248f8e420d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=1e51b34ea63c68f77f28c4e1111f7f248f8e420d","patch":"@@ -36,16 +36,20 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.AssociationPatch;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.patch.LongReplacePatchItem;\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -544,24 +548,73 @@ public void anonymous() {\n     }\n \n     @Test\n-    public void dynMembership() {\n+    public void uDynMembership() {\n         assertTrue(userService.read(4L).getDynGroups().isEmpty());\n \n-        GroupTO group = getBasicSampleTO(\"dynMembership\");\n+        GroupTO group = getBasicSampleTO(\"uDynMembership\");\n         group.setUDynMembershipCond(\"cool==true\");\n         group = createGroup(group).getAny();\n         assertNotNull(group);\n \n         assertTrue(userService.read(4L).getDynGroups().contains(group.getKey()));\n \n-        GroupPatch mod = new GroupPatch();\n-        mod.setKey(group.getKey());\n-        mod.setUDynMembershipCond(\"cool==false\");\n-        groupService.update(mod);\n+        GroupPatch patch = new GroupPatch();\n+        patch.setKey(group.getKey());\n+        patch.setUDynMembershipCond(\"cool==false\");\n+        groupService.update(patch);\n \n         assertTrue(userService.read(4L).getDynGroups().isEmpty());\n     }\n \n+    @Test\n+    public void aDynMembership() {\n+        String fiql = SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").is(\"location\").notNullValue().query();\n+\n+        // 1. create group with a given aDynMembership condition\n+        GroupTO group = getBasicSampleTO(\"aDynMembership\");\n+        group.getADynMembershipConds().put(\"PRINTER\", fiql);\n+        group = createGroup(group).getAny();\n+        assertEquals(fiql, group.getADynMembershipConds().get(\"PRINTER\"));\n+\n+        group = groupService.read(group.getKey());\n+        assertEquals(fiql, group.getADynMembershipConds().get(\"PRINTER\"));\n+\n+        // verify that the condition is dynamically applied\n+        AnyObjectTO newAny = AnyObjectITCase.getSampleTO(\"aDynMembership\");\n+        newAny.getResources().clear();\n+        newAny = createAnyObject(newAny).getAny();\n+        assertNotNull(newAny.getPlainAttrMap().get(\"location\"));\n+        assertTrue(anyObjectService.read(1L).getDynGroups().contains(group.getKey()));\n+        assertTrue(anyObjectService.read(2L).getDynGroups().contains(group.getKey()));\n+        assertTrue(anyObjectService.read(newAny.getKey()).getDynGroups().contains(group.getKey()));\n+\n+        // 2. update group and change aDynMembership condition\n+        fiql = SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").is(\"location\").nullValue().query();\n+\n+        GroupPatch patch = new GroupPatch();\n+        patch.setKey(group.getKey());\n+        patch.getADynMembershipConds().put(\"PRINTER\", fiql);\n+\n+        group = updateGroup(patch).getAny();\n+        assertEquals(fiql, group.getADynMembershipConds().get(\"PRINTER\"));\n+\n+        group = groupService.read(group.getKey());\n+        assertEquals(fiql, group.getADynMembershipConds().get(\"PRINTER\"));\n+\n+        // verify that the condition is dynamically applied\n+        AnyObjectPatch anyPatch = new AnyObjectPatch();\n+        anyPatch.setKey(newAny.getKey());\n+        anyPatch.getPlainAttrs().add(new AttrPatch.Builder().\n+                operation(PatchOperation.DELETE).\n+                attrTO(new AttrTO.Builder().schema(\"location\").build()).\n+                build());\n+        newAny = updateAnyObject(anyPatch).getAny();\n+        assertNull(newAny.getPlainAttrMap().get(\"location\"));\n+        assertFalse(anyObjectService.read(1L).getDynGroups().contains(group.getKey()));\n+        assertFalse(anyObjectService.read(2L).getDynGroups().contains(group.getKey()));\n+        assertTrue(anyObjectService.read(newAny.getKey()).getDynGroups().contains(group.getKey()));\n+    }\n+\n     @Test\n     public void capabilitiesOverride() {\n         // resource with no capability override"}]}