{"sha":"e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUyYzg5NzkzNGZkNGM4YTVjYTRiYjdhZDZmOWZiZWViMTcxYzgwNGU=","commit":{"author":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-24T14:20:00Z"},"committer":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-24T14:20:00Z"},"message":"SYNCOPE-231 Adding ReportService for CXF\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1438009 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"776e929004a63ea4e9d2d42b13a8e18d8a4d5502","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/776e929004a63ea4e9d2d42b13a8e18d8a4d5502"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/comments","author":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"committer":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"parents":[{"sha":"ea72d7b4c1b175c1a581356786fd9fdcd47a5f1f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ea72d7b4c1b175c1a581356786fd9fdcd47a5f1f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ea72d7b4c1b175c1a581356786fd9fdcd47a5f1f"}],"stats":{"total":321,"additions":268,"deletions":53},"files":[{"sha":"c7a46c3e6ef5e5c5b4cf53691658b7485717b045","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ReportServiceProxy.java","status":"modified","additions":17,"deletions":10,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java?ref=e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e","patch":"@@ -19,8 +19,12 @@\n package org.apache.syncope.client.services.proxy;\r\n \r\n import java.io.InputStream;\r\n+import java.net.URI;\r\n import java.util.Arrays;\r\n+import java.util.HashSet;\r\n import java.util.List;\r\n+import java.util.Set;\r\n+\r\n import javax.ws.rs.core.Response;\r\n import org.apache.syncope.common.services.ReportService;\r\n import org.apache.syncope.common.to.ReportExecTO;\r\n@@ -35,13 +39,15 @@ public ReportServiceProxy(final String baseUrl, final RestTemplate restTemplate)\n     }\r\n \r\n     @Override\r\n-    public ReportTO create(final ReportTO reportTO) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"report/create\", reportTO, ReportTO.class);\r\n+    public Response create(final ReportTO reportTO) {\r\n+        ReportTO createdReportTO = getRestTemplate().postForObject(baseUrl + \"report/create\", reportTO, ReportTO.class);\r\n+        URI location = URI.create(baseUrl + \"report/read/\" + createdReportTO.getId() + \".json\");\r\n+        return Response.created(location).entity(createdReportTO.getId()).build();\r\n     }\r\n \r\n     @Override\r\n-    public ReportTO update(final Long reportId, final ReportTO reportTO) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"report/update\", reportTO, ReportTO.class);\r\n+    public void update(final Long reportId, final ReportTO reportTO) {\r\n+        getRestTemplate().postForObject(baseUrl + \"report/update\", reportTO, ReportTO.class);\r\n     }\r\n \r\n     @Override\r\n@@ -66,9 +72,10 @@ public List<ReportExecTO> listExecutions() {\n     }\r\n \r\n     @Override\r\n-    public List<String> getReportletConfClasses() {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"report/reportletConfClasses.json\",\r\n+    public Set<String> getReportletConfClasses() {\r\n+        List<String> confClasses = Arrays.asList(getRestTemplate().getForObject(baseUrl + \"report/reportletConfClasses.json\",\r\n                 String[].class));\r\n+        return new HashSet<String>(confClasses);\r\n     }\r\n \r\n     @Override\r\n@@ -99,13 +106,13 @@ public ReportExecTO execute(final Long reportId) {\n     }\r\n \r\n     @Override\r\n-    public ReportTO delete(final Long reportId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"report/delete/{reportId}\", ReportTO.class, reportId);\r\n+    public void delete(final Long reportId) {\r\n+        getRestTemplate().getForObject(baseUrl + \"report/delete/{reportId}\", ReportTO.class, reportId);\r\n     }\r\n \r\n     @Override\r\n-    public ReportExecTO deleteExecution(final Long executionId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"report/execution/delete/{executionId}\", ReportExecTO.class,\r\n+    public void deleteExecution(final Long executionId) {\r\n+        getRestTemplate().getForObject(baseUrl + \"report/execution/delete/{executionId}\", ReportExecTO.class,\r\n                 executionId);\r\n     }\r\n }\r"},{"sha":"83502efa1945bb489205a68f217e39d7e6d98048","filename":"common/src/main/java/org/apache/syncope/common/services/ReportService.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java?ref=e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n+import java.util.Set;\r\n \r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.DefaultValue;\r\n@@ -40,11 +41,11 @@\n public interface ReportService {\r\n \r\n     @POST\r\n-    ReportTO create(ReportTO reportTO);\r\n+    Response create(ReportTO reportTO);\r\n \r\n     @PUT\r\n     @Path(\"{reportId}\")\r\n-    ReportTO update(@PathParam(\"reportId\") Long reportId, ReportTO reportTO);\r\n+    void update(@PathParam(\"reportId\") Long reportId, ReportTO reportTO);\r\n \r\n     @GET\r\n     @Path(\"count\")\r\n@@ -63,7 +64,7 @@ List<ReportTO> list(@QueryParam(\"page\") int page,\n \r\n     @GET\r\n     @Path(\"reportletConfClasses\")\r\n-    List<String> getReportletConfClasses();\r\n+    Set<String> getReportletConfClasses();\r\n \r\n     @GET\r\n     @Path(\"{reportId}\")\r\n@@ -85,9 +86,9 @@ Response exportExecutionResult(@PathParam(\"executionId\") Long executionId,\n \r\n     @DELETE\r\n     @Path(\"{reportId}\")\r\n-    ReportTO delete(@PathParam(\"reportId\") Long reportId);\r\n+    void delete(@PathParam(\"reportId\") Long reportId);\r\n \r\n     @DELETE\r\n     @Path(\"executions/{executionId}\")\r\n-    ReportExecTO deleteExecution(@PathParam(\"executionId\") Long executionId);\r\n+    void deleteExecution(@PathParam(\"executionId\") Long executionId);\r\n }\r"},{"sha":"fa45be093a63d864f0bb723e2cfea41761e8dd77","filename":"console/src/main/java/org/apache/syncope/console/rest/ReportRestClient.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java?ref=e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e","patch":"@@ -18,7 +18,12 @@\n  */\n package org.apache.syncope.console.rest;\n \n+import java.util.Collections;\n+import java.util.LinkedList;\n import java.util.List;\n+import java.util.Set;\n+\n+import javax.ws.rs.core.Response;\n \n import org.apache.syncope.common.services.ReportService;\n import org.apache.syncope.common.to.ReportExecTO;\n@@ -35,7 +40,8 @@ public List<String> getReportletConfClasses() {\n         List<String> reportletClasses = null;\n \n         try {\n-            reportletClasses = getService(ReportService.class).getReportletConfClasses();\n+            Set<String> reportletClassesSet = getService(ReportService.class).getReportletConfClasses();\n+            reportletClasses = new LinkedList<String>(reportletClassesSet);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting available reportlet classes\", e);\n         }\n@@ -59,20 +65,22 @@ public int count() {\n     }\n \n     public ReportTO create(final ReportTO reportTO) {\n-        return getService(ReportService.class).create(reportTO);\n+        Response response = getService(ReportService.class).create(reportTO);\n+        Long reportId = (Long) response.getEntity();\n+        return getService(ReportService.class).read(reportId);\n     }\n \n-    public ReportTO update(final ReportTO reportTO) {\n-        return getService(ReportService.class).update(reportTO.getId(), reportTO);\n+    public void update(final ReportTO reportTO) {\n+        getService(ReportService.class).update(reportTO.getId(), reportTO);\n     }\n \n     /**\n      * Delete specified report.\n      *\n      * @param reportId report to delete\n      */\n-    public ReportTO delete(final Long reportId) {\n-        return getService(ReportService.class).delete(reportId);\n+    public void delete(final Long reportId) {\n+        getService(ReportService.class).delete(reportId);\n     }\n \n     /**"},{"sha":"b2d7915dcd4e9b03c0046c4c38059b7d221d535d","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":48,"deletions":22,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e","patch":"@@ -20,6 +20,7 @@\n \n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n+import java.io.OutputStream;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashMap;\n@@ -29,6 +30,7 @@\n import java.util.Set;\n import java.util.zip.ZipInputStream;\n \n+import javax.servlet.ServletOutputStream;\n import javax.servlet.http.HttpServletResponse;\n \n import org.apache.cocoon.optional.pipeline.components.sax.fop.FopSerializer;\n@@ -100,6 +102,12 @@ public class ReportController extends AbstractController {\n     @PreAuthorize(\"hasRole('REPORT_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public ReportTO create(final HttpServletResponse response, @RequestBody final ReportTO reportTO) {\n+        ReportTO createdReportTO = createInternal(reportTO);\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return createdReportTO;\n+    }\n+    \n+    public ReportTO createInternal(final ReportTO reportTO) {\n         LOG.debug(\"Creating report \" + reportTO);\n \n         Report report = new Report();\n@@ -122,7 +130,6 @@ public ReportTO create(final HttpServletResponse response, @RequestBody final Re\n         auditManager.audit(Category.report, ReportSubCategory.create, Result.success,\n                 \"Successfully created report: \" + report.getId());\n \n-        response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getReportTO(report);\n     }\n \n@@ -212,6 +219,12 @@ public List<ReportExecTO> listExecutions() {\n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/reportletConfClasses\")\n     public ModelAndView getReportletConfClasses() {\n+        Set<String> reportletConfClasses = getReportletConfClassesInternal();\n+        return new ModelAndView().addObject(reportletConfClasses);\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public Set<String> getReportletConfClassesInternal() {\n         Set<String> reportletConfClasses = new HashSet<String>();\n \n         for (Class<Reportlet> reportletClass : binder.getAllReportletClasses()) {\n@@ -223,8 +236,7 @@ public ModelAndView getReportletConfClasses() {\n \n         auditManager.audit(Category.report, ReportSubCategory.getReportletConfClasses, Result.success,\n                 \"Successfully listed all ReportletConf classes: \" + reportletConfClasses.size());\n-\n-        return new ModelAndView().addObject(reportletConfClasses);\n+        return reportletConfClasses;\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n@@ -265,31 +277,26 @@ public void exportExecutionResult(final HttpServletResponse response,\n             @PathVariable(\"executionId\") final Long executionId,\n             @RequestParam(value = \"fmt\", required = false) final ReportExecExportFormat fmt) throws NotFoundException {\n \n-        ReportExec reportExec = reportExecDAO.find(executionId);\n-        if (reportExec == null) {\n-            throw new NotFoundException(\"Report execution \" + executionId);\n-        }\n-        if (!ReportExecStatus.SUCCESS.name().equals(reportExec.getStatus()) || reportExec.getExecResult() == null) {\n-            SyncopeClientCompositeErrorException sccee = new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.InvalidReportExec);\n-            sce.addElement(reportExec.getExecResult() == null\n-                    ? \"No report data produced\"\n-                    : \"Report did not run successfully\");\n-            sccee.addException(sce);\n-            throw sccee;\n+        ServletOutputStream os;\n+        try {\n+            os = response.getOutputStream();\n+        } catch (IOException e1) {\n+            throw new RuntimeException(\"Could not retrieve stream\", e1);\n         }\n+        ReportExec reportExec = getAndCheckReportExecInternal(executionId);\n \n-        ReportExecExportFormat format = fmt == null\n-                ? ReportExecExportFormat.XML\n-                : fmt;\n-\n-        LOG.debug(\"Exporting result of {} as {}\", reportExec, format);\n+        ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n \n         response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n         response.addHeader(\"Content-Disposition\", \"attachment; filename=\" + reportExec.getReport().getName() + \".\"\n                 + format.name().toLowerCase());\n \n+        exportExecutionResultInternal(os, reportExec, format);\n+    }\n+\n+    public void exportExecutionResultInternal(OutputStream os, ReportExec reportExec, ReportExecExportFormat format) {\n+        LOG.debug(\"Exporting result of {} as {}\", reportExec, format);\n+\n         // streaming SAX handler from a compressed byte array stream\n         ByteArrayInputStream bais = new ByteArrayInputStream(reportExec.getExecResult());\n         ZipInputStream zis = new ZipInputStream(bais);\n@@ -333,7 +340,7 @@ public void exportExecutionResult(final HttpServletResponse response,\n                     pipeline.addComponent(XMLSerializer.createXMLSerializer());\n             }\n \n-            pipeline.setup(response.getOutputStream());\n+            pipeline.setup(os);\n             pipeline.execute();\n \n             LOG.debug(\"Result of {} successfully exported as {}\", reportExec, format);\n@@ -352,6 +359,25 @@ public void exportExecutionResult(final HttpServletResponse response,\n                 \"Successfully exported report execution: \" + reportExec.getId());\n     }\n \n+    public ReportExec getAndCheckReportExecInternal(final Long executionId)\n+            throws NotFoundException {\n+        ReportExec reportExec = reportExecDAO.find(executionId);\n+        if (reportExec == null) {\n+            throw new NotFoundException(\"Report execution \" + executionId);\n+        }\n+        if (!ReportExecStatus.SUCCESS.name().equals(reportExec.getStatus()) || reportExec.getExecResult() == null) {\n+            SyncopeClientCompositeErrorException sccee = new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.InvalidReportExec);\n+            sce.addElement(reportExec.getExecResult() == null\n+                    ? \"No report data produced\"\n+                    : \"Report did not run successfully\");\n+            sccee.addException(sce);\n+            throw sccee;\n+        }\n+        return reportExec;\n+    }\n+\n     @PreAuthorize(\"hasRole('REPORT_EXECUTE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/execute/{reportId}\")\n     public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) throws NotFoundException {"},{"sha":"fa3b3effddb47a082738d4e1fc3fe929c1ac2708","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e","patch":"@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.services;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.StreamingOutput;\n+import javax.ws.rs.core.UriInfo;\n+\n+import org.apache.syncope.common.services.ReportService;\n+import org.apache.syncope.common.to.ReportExecTO;\n+import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.types.ReportExecExportFormat;\n+import org.apache.syncope.core.persistence.beans.ReportExec;\n+import org.apache.syncope.core.persistence.dao.ReportDAO;\n+import org.apache.syncope.core.rest.controller.ReportController;\n+import org.apache.syncope.core.util.NotFoundException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportServiceImpl implements ReportService, ContextAware {\n+    @Autowired\n+    ReportController reportController;\n+    \n+    @Autowired\n+    private ReportDAO reportDAO;\n+    \n+    private UriInfo uriInfo;\n+\n+    @Override\n+    public Response create(ReportTO reportTO) {\n+        ReportTO createdReportTO = reportController.createInternal(reportTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + createdReportTO.getId()).build();\n+        return Response.created(location).build();\n+    }\n+\n+    @Override\n+    public void update(@PathParam(\"reportId\") Long reportId, ReportTO reportTO) {\n+        try {\n+            reportController.update(reportTO);\n+        } catch (NotFoundException e) {\n+            throw new javax.ws.rs.NotFoundException(e);\n+        }\n+    }\n+\n+    @Override\n+    public int count() {\n+        return reportDAO.count();\n+    }\n+\n+    @Override\n+    public List<ReportTO> list() {\n+        return reportController.list();\n+    }\n+\n+    @Override\n+    public List<ReportTO> list(@QueryParam(\"page\") int page,\n+            @QueryParam(\"size\") @DefaultValue(\"25\") int size) {\n+        return reportController.list(page, size);\n+    }\n+\n+    @Override\n+    public List<ReportExecTO> listExecutions() {\n+        return reportController.listExecutions();\n+    }\n+\n+    @Override\n+    public Set<String> getReportletConfClasses() {\n+        return reportController.getReportletConfClassesInternal();\n+    }\n+\n+    @Override\n+    public ReportTO read(@PathParam(\"reportId\") Long reportId) {\n+        try {\n+            return reportController.read(reportId);\n+        } catch (NotFoundException e) {\n+            throw new javax.ws.rs.NotFoundException();\n+        }\n+    }\n+\n+    @Override\n+    public ReportExecTO readExecution(@PathParam(\"executionId\") Long executionId) {\n+        try {\n+            return reportController.readExecution(executionId);\n+        } catch (NotFoundException e) {\n+            throw new javax.ws.rs.NotFoundException(e);\n+        }\n+    }\n+\n+    @Override\n+    public Response exportExecutionResult(final @PathParam(\"executionId\") Long executionId,\n+            final @QueryParam(\"format\") ReportExecExportFormat fmt) {\n+        final ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n+        try {\n+            final ReportExec reportExec = reportController.getAndCheckReportExecInternal(executionId);\n+            return Response.ok(new StreamingOutput() {\n+                public void write(final OutputStream os) throws IOException {\n+                    reportController.exportExecutionResultInternal(os, reportExec, format);\n+                }\n+            }).build();\n+        } catch (NotFoundException e) {\n+            throw new javax.ws.rs.NotFoundException(e);\n+        }\n+    }\n+\n+    @Override\n+    public ReportExecTO execute(@PathParam(\"reportId\") Long reportId) {\n+        try {\n+            return reportController.execute(reportId);\n+        } catch (NotFoundException e) {\n+            throw new javax.ws.rs.NotFoundException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void delete(@PathParam(\"reportId\") Long reportId) {\n+        try {\n+            reportController.delete(reportId);\n+        } catch (NotFoundException e) {\n+            throw new javax.ws.rs.NotFoundException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void deleteExecution(@PathParam(\"executionId\") Long executionId) {\n+        try {\n+            reportController.deleteExecution(executionId);\n+        } catch (NotFoundException e) {\n+            throw new javax.ws.rs.NotFoundException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void setUriInfo(UriInfo uriInfo) {\n+        this.uriInfo = uriInfo;\n+    }\n+\n+}"},{"sha":"72dc84e570b89678ba827d8e5a24602858c671f4","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e","patch":"@@ -72,6 +72,7 @@ under the License.\n       <ref bean=\"entitlementServiceImpl\"/>\n       <ref bean=\"policyServiceImpl\"/>\n       <ref bean=\"schemaServiceImpl\"/>\n+      <ref bean=\"reportServiceImpl\"/>\n     </jaxrs:serviceBeans>\n     <jaxrs:resourceComparator>\n       <bean id=\"myServiceComparator\" class=\"org.apache.syncope.core.rest.utils.QueryResourceInfoComperator\"/>"},{"sha":"6982c75b09b1de809b2eb54228881e3928de2dbb","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":19,"deletions":10,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=e2c897934fd4c8a5ca4bb7ad6f9fbeeb171c804e","patch":"@@ -29,6 +29,9 @@\n import java.net.HttpURLConnection;\n import java.net.URL;\n import java.util.List;\n+import java.util.Set;\n+\n+import javax.ws.rs.core.Response;\n \n import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.io.IOUtils;\n@@ -43,6 +46,12 @@\n \n @FixMethodOrder(MethodSorters.JVM)\n public class ReportTestITCase extends AbstractTest {\n+    \n+    ReportTO createReport(ReportTO report) {\n+        Response response = reportService.create(report);\n+        Long reportId = (Long) response.getEntity();\n+        return reportService.read(reportId);\n+    }\n \n     // Enable running test more than once with parameters\n     public ReportTestITCase(String contentType) {\n@@ -51,7 +60,7 @@ public ReportTestITCase(String contentType) {\n \n     @Test\n     public void getReportletClasses() {\n-        List<String> reportletClasses = reportService.getReportletConfClasses();\n+        Set<String> reportletClasses = reportService.getReportletConfClasses();\n         assertNotNull(reportletClasses);\n         assertFalse(reportletClasses.isEmpty());\n     }\n@@ -105,7 +114,7 @@ public void create() {\n         report.addReportletConf(new UserReportletConf(\"first\"));\n         report.addReportletConf(new UserReportletConf(\"second\"));\n \n-        report = reportService.create(report);\n+        report = createReport(report);\n         assertNotNull(report);\n \n         ReportTO actual = reportService.read(report.getId());\n@@ -121,13 +130,14 @@ public void update() {\n         report.addReportletConf(new UserReportletConf(\"first\"));\n         report.addReportletConf(new UserReportletConf(\"second\"));\n \n-        report = reportService.create(report);\n+        report = createReport(report);\n         assertNotNull(report);\n         assertEquals(2, report.getReportletConfs().size());\n \n         report.addReportletConf(new UserReportletConf(\"last\"));\n \n-        ReportTO updated = reportService.update(report.getId(), report);\n+        reportService.update(report.getId(), report);\n+        ReportTO updated = reportService.read(report.getId());\n         assertNotNull(updated);\n         assertEquals(3, updated.getReportletConfs().size());\n     }\n@@ -139,11 +149,10 @@ public void delete() {\n         report.addReportletConf(new UserReportletConf(\"first\"));\n         report.addReportletConf(new UserReportletConf(\"second\"));\n \n-        report = reportService.create(report);\n+        report = createReport(report);\n         assertNotNull(report);\n \n-        ReportTO deletedReport = reportService.delete(report.getId());\n-        assertNotNull(deletedReport);\n+        reportService.delete(report.getId());\n \n         try {\n             reportService.read(report.getId());\n@@ -186,7 +195,7 @@ public void executeAndExport() throws IOException {\n         ReportTO reportTO = reportService.read(1L);\n         reportTO.setId(0);\n         reportTO.setName(\"executeAndExport\" + getUUIDString());\n-        reportTO = reportService.create(reportTO);\n+        reportTO = createReport(reportTO);\n         assertNotNull(reportTO);\n \n         ReportExecTO execution = reportService.execute(reportTO.getId());\n@@ -258,7 +267,7 @@ public void executeAndExport() throws IOException {\n     public void issueSYNCOPE43() {\n         ReportTO reportTO = new ReportTO();\n         reportTO.setName(\"issueSYNCOPE43\" + getUUIDString());\n-        reportTO = reportService.create(reportTO);\n+        reportTO = createReport(reportTO);\n         assertNotNull(reportTO);\n \n         ReportExecTO execution = reportService.execute(reportTO.getId());\n@@ -285,7 +294,7 @@ public void issueSYNCOPE102() throws IOException {\n         ReportTO reportTO = reportService.read(1L);\n         reportTO.setId(0);\n         reportTO.setName(\"issueSYNCOPE102\" + getUUIDString());\n-        reportTO = reportService.create(reportTO);\n+        reportTO = createReport(reportTO);\n         assertNotNull(reportTO);\n \n         // Execute (multiple requests)"}]}