{"sha":"5063ce6e1b6db266470e42e17cae244b789e1dc4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUwNjNjZTZlMWI2ZGIyNjY0NzBlNDJlMTdjYWUyNDRiNzg5ZTFkYzQ=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T09:51:54Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T09:51:54Z"},"message":"Fixed SYNCOPE-708","tree":{"sha":"9da412cc55762ecc748181af9959e6c15a1fb355","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9da412cc55762ecc748181af9959e6c15a1fb355"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5063ce6e1b6db266470e42e17cae244b789e1dc4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5063ce6e1b6db266470e42e17cae244b789e1dc4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5063ce6e1b6db266470e42e17cae244b789e1dc4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5063ce6e1b6db266470e42e17cae244b789e1dc4/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"876fde9aa6abe7501a6cfdd53e32be0828ecdf03","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/876fde9aa6abe7501a6cfdd53e32be0828ecdf03","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/876fde9aa6abe7501a6cfdd53e32be0828ecdf03"}],"stats":{"total":63,"additions":53,"deletions":10},"files":[{"sha":"d077cd1a7b6f684e938510ef019d32636a977196","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/LoggerController.java","status":"modified","additions":28,"deletions":4,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5063ce6e1b6db266470e42e17cae244b789e1dc4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5063ce6e1b6db266470e42e17cae244b789e1dc4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=5063ce6e1b6db266470e42e17cae244b789e1dc4","patch":"@@ -116,6 +116,31 @@ private void throwInvalidLogger(final LoggerType type) {\n         throw sce;\n     }\n \n+    @PreAuthorize(\"hasRole('LOG_LIST')\")\n+    @Transactional(readOnly = true)\n+    public LoggerTO readLog(final String name) {\n+        for (final LoggerTO logger : listLogs()) {\n+            if (logger.getName().equals(name)) {\n+                return logger;\n+            }\n+        }\n+        throw new NotFoundException(\"Logger \" + name);\n+    }\n+\n+    @PreAuthorize(\"hasRole('AUDIT_LIST')\")\n+    @Transactional(readOnly = true)\n+    public LoggerTO readAudit(final String name) {\n+        for (final AuditLoggerName logger : listAudits()) {\n+            if (logger.toLoggerName().equals(name)) {\n+                final LoggerTO loggerTO = new LoggerTO();\n+                loggerTO.setName(logger.toLoggerName());\n+                loggerTO.setLevel(LoggerLevel.DEBUG);\n+                return loggerTO;\n+            }\n+        }\n+        throw new NotFoundException(\"Logger \" + name);\n+    }\n+\n     private LoggerTO setLevel(final String name, final Level level, final LoggerType expectedType) {\n         SyncopeLogger syncopeLogger = loggerDAO.find(name);\n         if (syncopeLogger == null) {\n@@ -213,11 +238,10 @@ public List<EventCategoryTO> listAuditEvents() {\n \n         try {\n             final ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\n-            final MetadataReaderFactory metadataReaderFactory =\n-                    new CachingMetadataReaderFactory(resourcePatternResolver);\n+            final MetadataReaderFactory metadataReaderFactory\n+                    = new CachingMetadataReaderFactory(resourcePatternResolver);\n \n-            final String packageSearchPath =\n-                    ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX\n+            final String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX\n                     + ClassUtils.convertClassNameToResourcePath(\n                             SystemPropertyUtils.resolvePlaceholders(this.getClass().getPackage().getName()))\n                     + \"/\" + \"**/*.class\";"},{"sha":"2b106d12e78aeb87ea1b6dafc916ab8adb997e83","filename":"core/src/main/java/org/apache/syncope/core/services/LoggerServiceImpl.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5063ce6e1b6db266470e42e17cae244b789e1dc4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5063ce6e1b6db266470e42e17cae244b789e1dc4/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java?ref=5063ce6e1b6db266470e42e17cae244b789e1dc4","patch":"@@ -80,13 +80,16 @@ public List<LoggerTO> list(final LoggerType type) {\n \n     @Override\n     public LoggerTO read(final LoggerType type, final String name) {\n-        List<LoggerTO> logger = list(type);\n-        for (LoggerTO l : logger) {\n-            if (l.getName().equals(name)) {\n-                return l;\n-            }\n+        switch (type) {\n+            case LOG:\n+                return controller.readLog(name);\n+\n+            case AUDIT:\n+                return controller.readAudit(name);\n+\n+            default:\n+                throw new BadRequestException();\n         }\n-        throw new NotFoundException();\n     }\n \n     @Override"},{"sha":"8092098f47df3164eaddcdd26f059cc3b0ef7799","filename":"core/src/test/java/org/apache/syncope/core/rest/LoggerTestITCase.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5063ce6e1b6db266470e42e17cae244b789e1dc4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5063ce6e1b6db266470e42e17cae244b789e1dc4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java?ref=5063ce6e1b6db266470e42e17cae244b789e1dc4","patch":"@@ -22,9 +22,13 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n \n import java.text.ParseException;\n import java.util.List;\n+import javax.ws.rs.core.Response;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.common.to.EventCategoryTO;\n import org.apache.syncope.common.to.LoggerTO;\n import org.apache.syncope.common.types.AttributableType;\n@@ -212,4 +216,16 @@ public void listAuditEvents() {\n         }\n         assertTrue(found);\n     }\n+    \n+    @Test\n+    public void issueSYNCOPE708() {\n+        try {\n+            loggerService.read(LoggerType.LOG, \"notExists\");\n+            fail(\"Read a not exists logger, it should go in exception\");\n+        } catch (final WebServiceException ex) {\n+            fail(\"Exception is WebServiceException but it should be SyncopeClientException\");\n+        } catch (final SyncopeClientException ex) {\n+            assertEquals(Response.Status.NOT_FOUND, ex.getType().getResponseStatus());\n+        }\n+    }\n }"}]}