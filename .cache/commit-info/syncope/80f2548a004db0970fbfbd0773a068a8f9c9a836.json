{"sha":"80f2548a004db0970fbfbd0773a068a8f9c9a836","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgwZjI1NDhhMDA0ZGIwOTcwZmJmYmQwNzczYTA2OGE4ZjljOWE4MzY=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-22T09:12:50Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-22T09:12:50Z"},"message":"refactoring of the schema and notification stack + bugfixing, SYNCOPE-158","tree":{"sha":"65cf45c3fa4abbc4ed85dd07d23d154217a1ac14","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/65cf45c3fa4abbc4ed85dd07d23d154217a1ac14"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/80f2548a004db0970fbfbd0773a068a8f9c9a836","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80f2548a004db0970fbfbd0773a068a8f9c9a836","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/80f2548a004db0970fbfbd0773a068a8f9c9a836","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80f2548a004db0970fbfbd0773a068a8f9c9a836/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"171c0ae360d913c20c846a4a17983e5ca1540002","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/171c0ae360d913c20c846a4a17983e5ca1540002","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/171c0ae360d913c20c846a4a17983e5ca1540002"}],"stats":{"total":2359,"additions":1500,"deletions":859},"files":[{"sha":"c316e138eb0b2deaae47462138affbeacda52a5f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/CommonsResultManager.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.client.cli.commands;\n \n import org.apache.syncope.client.cli.messages.Messages;\n-import org.apache.syncope.client.cli.util.CommandUtils;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n \n public abstract class CommonsResultManager {\n \n@@ -32,8 +30,12 @@ public void notFoundError(final String what, final String parameter) {\n         Messages.printNofFoundMessage(what, parameter);\n     }\n \n-    public void typeNotValidError(final String parameter) {\n-        Messages.printTypeNotValidMessage(\"logger level\", parameter, CommandUtils.fromEnumToArray(LoggerLevel.class));\n+    public void notBooleanDeletedError(final String what, final String key) {\n+        Messages.printNotBooleanDeletedMessage(what, key);\n+    }\n+\n+    public void typeNotValidError(final String what, final String parameter, final String[] options) {\n+        Messages.printTypeNotValidMessage(what, parameter, options);\n     }\n \n     public void commandOptionError(final String message) {"},{"sha":"8868f9b11792bf15614530ff0edcc4840c53184b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/InfoCommand.java","status":"removed","additions":0,"deletions":339,"changes":339,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/171c0ae360d913c20c846a4a17983e5ca1540002/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FInfoCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/171c0ae360d913c20c846a4a17983e5ca1540002/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FInfoCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FInfoCommand.java?ref=171c0ae360d913c20c846a4a17983e5ca1540002","patch":"@@ -1,339 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.cli.Command;\n-import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.Messages;\n-import org.apache.syncope.client.cli.util.CommandUtils;\n-import org.apache.syncope.common.lib.to.SyncopeTO;\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-@Command(name = \"info\")\n-public class InfoCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(InfoCommand.class);\n-\n-    @Override\n-    public void execute(final Input input) {\n-        LOG.debug(\"Option: {}\", input.getOption());\n-        LOG.debug(\"Parameters:\");\n-        for (final String parameter : input.getParameters()) {\n-            LOG.debug(\"   > \" + parameter);\n-        }\n-\n-        if (StringUtils.isBlank(input.getOption())) {\n-            input.setOption(Options.HELP.getOptionName());\n-        }\n-\n-        final SyncopeService syncopeService = SyncopeServices.get(SyncopeService.class);\n-        final SyncopeTO syncopeTO = syncopeService.info();\n-        switch (Options.fromName(input.getOption())) {\n-            case VERSION:\n-                try {\n-                    Messages.printMessage(\"Syncope version: \" + syncopeTO.getVersion());\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case PWD_RESET_ALLOWED:\n-                try {\n-                    Messages.printMessage(\"Password reset allowed: \" + syncopeTO.isPwdResetAllowed());\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case PWD_RESET_WITH_SECURITY_QUESTION:\n-                try {\n-                    Messages.printMessage(\"Password reset requiring security question: \"\n-                            + syncopeTO.isPwdResetRequiringSecurityQuestions());\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case SELF_REG_ALLOWED:\n-                try {\n-                    Messages.printMessage(\"Self registration allowed: \" + syncopeTO.isSelfRegAllowed());\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case PROVISIONING_MANAGER:\n-                try {\n-                    Messages.printMessage(\n-                            \"Any object provisioning manager class: \" + syncopeTO.getAnyObjectProvisioningManager(),\n-                            \"User       provisioning manager class: \" + syncopeTO.getUserProvisioningManager(),\n-                            \"Group      provisioning manager class: \" + syncopeTO.getGroupProvisioningManager());\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case WORKFLOW_ADAPTER:\n-                try {\n-                    Messages.printMessage(\n-                            \"Any object workflow adapter class: \" + syncopeTO.getAnyObjectWorkflowAdapter(),\n-                            \"User       workflow adapter class: \" + syncopeTO.getUserWorkflowAdapter(),\n-                            \"Group      workflow adapter class: \" + syncopeTO.getGroupWorkflowAdapter());\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case ACCOUNT_RULES:\n-                try {\n-                    for (final String accountRule : syncopeTO.getAccountRules()) {\n-                        Messages.printMessage(\"Account rule: \" + accountRule);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case CONNID_LOCATION:\n-                try {\n-                    for (final String location : syncopeTO.getConnIdLocations()) {\n-                        Messages.printMessage(\"ConnId location: \" + location);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case LOGIC_ACTIONS:\n-                try {\n-                    for (final String logic : syncopeTO.getLogicActions()) {\n-                        Messages.printMessage(\"Logic action: \" + logic);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case MAIL_TEMPLATES:\n-                try {\n-                    for (final String template : syncopeTO.getMailTemplates()) {\n-                        Messages.printMessage(\"Mail template: \" + template);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case MAPPING_ITEM_TRANSFORMERS:\n-                try {\n-                    for (final String tranformer : syncopeTO.getMappingItemTransformers()) {\n-                        Messages.printMessage(\"Mapping item tranformer: \" + tranformer);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case PASSWORD_RULES:\n-                try {\n-                    for (final String rules : syncopeTO.getPasswordRules()) {\n-                        Messages.printMessage(\"Password rule: \" + rules);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case PROPAGATION_ACTIONS:\n-                try {\n-                    for (final String action : syncopeTO.getPropagationActions()) {\n-                        Messages.printMessage(\"Propagation action: \" + action);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case PUSH_ACTIONS:\n-                try {\n-                    for (final String action : syncopeTO.getPushActions()) {\n-                        Messages.printMessage(\"Push action: \" + action);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case PUSH_CORRELATION_ACTIONS:\n-                try {\n-                    for (final String rule : syncopeTO.getPushCorrelationRules()) {\n-                        Messages.printMessage(\"Push correlation rule: \" + rule);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case REPORTLETS:\n-                try {\n-                    for (final String reportlet : syncopeTO.getReportlets()) {\n-                        Messages.printMessage(\"Reportlet: \" + reportlet);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case SYNC_ACTIONS:\n-                try {\n-                    for (final String action : syncopeTO.getSyncActions()) {\n-                        Messages.printMessage(\"Sync action: \" + action);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case SYNC_CORRELATION_RULES:\n-                try {\n-                    for (final String rule : syncopeTO.getSyncCorrelationRules()) {\n-                        Messages.printMessage(\"Sync correlation rule: \" + rule);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case TASK_JOBS:\n-                try {\n-                    for (final String job : syncopeTO.getTaskJobs()) {\n-                        Messages.printMessage(\"Task job: \" + job);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case VALIDATORS:\n-                try {\n-                    for (final String validator : syncopeTO.getValidators()) {\n-                        Messages.printMessage(\"Validator: \" + validator);\n-                    }\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case PASSWORD_GENERATOR:\n-                try {\n-                    Messages.printMessage(\n-                            \"Password generator class: \" + syncopeTO.getPasswordGenerator());\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case VIR_ATTR_CACHE:\n-                try {\n-                    Messages.printMessage(\n-                            \"Virtual attribute cache class: \" + syncopeTO.getVirAttrCache());\n-                } catch (final Exception ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                    break;\n-                }\n-                break;\n-            case HELP:\n-                System.out.println(CommandUtils.helpMessage(\"info\", Options.toList()));\n-                break;\n-            default:\n-                Messages.printDefaultMessage(input.getOption(), CommandUtils.helpMessage(\"info\", Options.toList()));\n-                break;\n-        }\n-    }\n-\n-    @Override\n-    public String getHelpMessage() {\n-        return CommandUtils.helpMessage(\"info\", Options.toList());\n-    }\n-\n-    private enum Options {\n-\n-        VERSION(\"--version\"),\n-        PWD_RESET_ALLOWED(\"--pwd-reset-allowed\"),\n-        PWD_RESET_WITH_SECURITY_QUESTION(\"--pwd-reset-with-question\"),\n-        SELF_REG_ALLOWED(\"--self-reg-allowed\"),\n-        PROVISIONING_MANAGER(\"--provisioning-manager-classes\"),\n-        WORKFLOW_ADAPTER(\"--workflow-adapter-classes\"),\n-        ACCOUNT_RULES(\"--account-rules-classes\"),\n-        CONNID_LOCATION(\"--connid-locations\"),\n-        LOGIC_ACTIONS(\"--logic-actions\"),\n-        MAIL_TEMPLATES(\"--mail-templates\"),\n-        MAPPING_ITEM_TRANSFORMERS(\"--mapping-item-transformers\"),\n-        PASSWORD_RULES(\"--password-rules\"),\n-        PROPAGATION_ACTIONS(\"--propagation-actions\"),\n-        PUSH_ACTIONS(\"--push-actions\"),\n-        PUSH_CORRELATION_ACTIONS(\"--push-correlation-actions\"),\n-        REPORTLETS(\"--reportlets\"),\n-        SYNC_ACTIONS(\"--sync-actions\"),\n-        SYNC_CORRELATION_RULES(\"--sync-correlation-rules\"),\n-        TASK_JOBS(\"--task-jobs\"),\n-        VALIDATORS(\"--validators\"),\n-        PASSWORD_GENERATOR(\"--password-generator\"),\n-        VIR_ATTR_CACHE(\"--vir-attr-cache\"),\n-        HELP(\"--help\");\n-\n-        private final String optionName;\n-\n-        Options(final String optionName) {\n-            this.optionName = optionName;\n-        }\n-\n-        public String getOptionName() {\n-            return optionName;\n-        }\n-\n-        public boolean equalsOptionName(final String otherName) {\n-            return (otherName == null) ? false : optionName.equals(otherName);\n-        }\n-\n-        public static Options fromName(final String name) {\n-            Options optionToReturn = HELP;\n-            for (final Options option : Options.values()) {\n-                if (option.equalsOptionName(name)) {\n-                    optionToReturn = option;\n-                }\n-            }\n-            return optionToReturn;\n-        }\n-\n-        public static List<String> toList() {\n-            final List<String> options = new ArrayList<>();\n-            for (final Options value : values()) {\n-                options.add(value.getOptionName());\n-            }\n-            return options;\n-        }\n-    }\n-}"},{"sha":"3d1866bb6607bddcd47fe19625c4ea9335c939ff","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/NotificationCommand.java","status":"removed","additions":0,"deletions":169,"changes":169,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/171c0ae360d913c20c846a4a17983e5ca1540002/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/171c0ae360d913c20c846a4a17983e5ca1540002/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java?ref=171c0ae360d913c20c846a4a17983e5ca1540002","patch":"@@ -1,169 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.ws.WebServiceException;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.cli.Command;\n-import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.Messages;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.NotificationTO;\n-import org.apache.syncope.common.rest.api.service.NotificationService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-@Command(name = \"notification\")\n-public class NotificationCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(NotificationCommand.class);\n-\n-    private static final String HELP_MESSAGE = \"Usage: notification [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    --help \\n\"\n-            + \"    --list \\n\"\n-            + \"    --read \\n\"\n-            + \"       Syntax: --read {NOTIFICATION-ID} \\n\"\n-            + \"    --delete \\n\"\n-            + \"       Syntax: --delete {NOTIFICATION-ID}\";\n-    \n-    @Override\n-    public void execute(final Input input) {\n-        LOG.debug(\"Option: {}\", input.getOption());\n-        LOG.debug(\"Parameters:\");\n-        for (final String parameter : input.getParameters()) {\n-            LOG.debug(\"   > \" + parameter);\n-        }\n-\n-        final String[] parameters = input.getParameters();\n-\n-        if (StringUtils.isBlank(input.getOption())) {\n-            input.setOption(Options.HELP.getOptionName());\n-        }\n-\n-        final NotificationService notificationService = SyncopeServices.get(NotificationService.class);\n-        switch (Options.fromName(input.getOption())) {\n-            case LIST:\n-                try {\n-                    for (final NotificationTO notificationTO : notificationService.list()) {\n-                        System.out.println(notificationTO);\n-                    }\n-                } catch (final SyncopeClientException ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                }\n-                break;\n-            case READ:\n-                final String readErrorMessage = \"notification --read {NOTIFICATION-ID} {NOTIFICATION-ID} [...]\";\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            System.out.println(notificationService.read(Long.valueOf(parameter)));\n-                        } catch (final NumberFormatException ex) {\n-                            Messages.printIdNotNumberDeletedMessage(\"notification\", parameter);\n-                        } catch (final WebServiceException | SyncopeClientException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Notification\", parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(readErrorMessage);\n-                }\n-                break;\n-            case DELETE:\n-                final String deleteErrorMessage = \"notification --delete {NOTIFICATION-ID} {NOTIFICATION-ID} [...]\";\n-\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            notificationService.delete(Long.valueOf(parameter));\n-                            Messages.printDeletedMessage(\"Notification\", parameter);\n-                        } catch (final WebServiceException | SyncopeClientException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Notification\", parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                        } catch (final NumberFormatException ex) {\n-                            Messages.printIdNotNumberDeletedMessage(\"notification\", parameter);\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(deleteErrorMessage);\n-                }\n-                break;\n-            case HELP:\n-                System.out.println(HELP_MESSAGE);\n-                break;\n-            default:\n-                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n-        }\n-    }\n-\n-    @Override\n-    public String getHelpMessage() {\n-        return HELP_MESSAGE;\n-    }\n-\n-    private enum Options {\n-\n-        HELP(\"--help\"),\n-        LIST(\"--list\"),\n-        READ(\"--read\"),\n-        DELETE(\"--delete\");\n-\n-        private final String optionName;\n-\n-        Options(final String optionName) {\n-            this.optionName = optionName;\n-        }\n-\n-        public String getOptionName() {\n-            return optionName;\n-        }\n-\n-        public boolean equalsOptionName(final String otherName) {\n-            return (otherName == null) ? false : optionName.equals(otherName);\n-        }\n-\n-        public static Options fromName(final String name) {\n-            Options optionToReturn = HELP;\n-            for (final Options option : Options.values()) {\n-                if (option.equalsOptionName(name)) {\n-                    optionToReturn = option;\n-                }\n-            }\n-            return optionToReturn;\n-        }\n-\n-        public static List<String> toList() {\n-            final List<String> options = new ArrayList<>();\n-            for (final Options value : values()) {\n-                options.add(value.getOptionName());\n-            }\n-            return options;\n-        }\n-    }\n-\n-}"},{"sha":"e00ae3f1b709550e3cfdbfe95893f27dabdaa6ab","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/SchemaCommand.java","status":"removed","additions":0,"deletions":309,"changes":309,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/171c0ae360d913c20c846a4a17983e5ca1540002/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/171c0ae360d913c20c846a4a17983e5ca1540002/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java?ref=171c0ae360d913c20c846a4a17983e5ca1540002","patch":"@@ -1,309 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.xml.ws.WebServiceException;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.cli.Command;\n-import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.Messages;\n-import org.apache.syncope.client.cli.util.CommandUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n-import org.apache.syncope.common.lib.to.DerSchemaTO;\n-import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.to.VirSchemaTO;\n-import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.rest.api.service.SchemaService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-@Command(name = \"schema\")\n-public class SchemaCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SchemaCommand.class);\n-\n-    private static final String HELP_MESSAGE = \"Usage: schema [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    --help \\n\"\n-            + \"    --list-all\\n\"\n-            + \"    --list-plain\\n\"\n-            + \"    --list-derived\\n\"\n-            + \"    --list-virtual\\n\"\n-            + \"    --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n-            + \"        Schema type: PLAIN / DERIVED / VIRTUAL\\n\"\n-            + \"    --delete {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n-            + \"        Schema type: PLAIN / DERIVED / VIRTUAL\";\n-\n-    @Override\n-    public void execute(final Input input) {\n-        LOG.debug(\"Option: {}\", input.getOption());\n-        LOG.debug(\"Parameters:\");\n-        for (final String parameter : input.getParameters()) {\n-            LOG.debug(\"   > \" + parameter);\n-        }\n-\n-        String[] parameters = input.getParameters();\n-\n-        if (StringUtils.isBlank(input.getOption())) {\n-            input.setOption(Options.HELP.getOptionName());\n-        }\n-\n-        final SchemaService schemaService = SyncopeServices.get(SchemaService.class);\n-        switch (Options.fromName(input.getOption())) {\n-            case LIST:\n-                final String listErrorMessage = \"schema --list {SCHEMA-TYPE}\\n\"\n-                        + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n-                if (parameters.length == 1) {\n-                    try {\n-                        final SchemaType schemaType = SchemaType.valueOf(input.firstParameter());\n-                        System.out.println(\"\");\n-                        for (final AbstractSchemaTO schemaTO : schemaService.list(schemaType)) {\n-                            switch (schemaType) {\n-                                case PLAIN:\n-                                    System.out.println(\" - Schema key: \" + ((PlainSchemaTO) schemaTO).getKey());\n-                                    System.out.println(\"      type: \" + ((PlainSchemaTO) schemaTO).getType());\n-                                    System.out.println(\"      is mandatory: \"\n-                                            + ((PlainSchemaTO) schemaTO).getMandatoryCondition());\n-                                    break;\n-                                case DERIVED:\n-                                    System.out.println(\" - Schema key: \" + ((DerSchemaTO) schemaTO).getKey());\n-                                    System.out.println(\"      expression: \" + ((DerSchemaTO) schemaTO).getExpression());\n-                                    break;\n-                                case VIRTUAL:\n-                                    System.out.println(\" - Schema key: \" + ((VirSchemaTO) schemaTO).getKey());\n-                                    break;\n-                                default:\n-                                    break;\n-                            }\n-                        }\n-                        System.out.println(\"\");\n-                    } catch (final SyncopeClientException ex) {\n-                        Messages.printMessage(ex.getMessage());\n-                    } catch (final IllegalArgumentException ex) {\n-                        Messages.printTypeNotValidMessage(\n-                                \"schema\", input.firstParameter(), CommandUtils.fromEnumToArray(SchemaType.class));\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(listErrorMessage);\n-                }\n-                break;\n-            case LIST_ALL:\n-                try {\n-                    for (final SchemaType value : SchemaType.values()) {\n-                        System.out.println(\"\");\n-                        System.out.println(value + \" schemas\");\n-                        for (final AbstractSchemaTO schemaTO : schemaService.list(value)) {\n-                            System.out.println(\"   - Name: \" + schemaTO.getKey() + \" type: \"\n-                                    + schemaTO.getAnyTypeClass());\n-                        }\n-                        System.out.println(\"\");\n-                    }\n-                } catch (final SyncopeClientException | WebServiceException ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                }\n-                break;\n-            case LIST_PLAIN:\n-                try {\n-                    System.out.println(\"\");\n-                    for (final AbstractSchemaTO schemaTO : schemaService.list(SchemaType.PLAIN)) {\n-                        System.out.println(\" - Schema key: \" + ((PlainSchemaTO) schemaTO).getKey());\n-                        System.out.println(\"      type: \" + ((PlainSchemaTO) schemaTO).getType());\n-                        System.out.println(\"      is mandatory: \"\n-                                + ((PlainSchemaTO) schemaTO).getMandatoryCondition());\n-                    }\n-                    System.out.println(\"\");\n-                } catch (final SyncopeClientException | WebServiceException ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                }\n-                break;\n-            case LIST_DERIVED:\n-                try {\n-                    System.out.println(\"\");\n-                    for (final AbstractSchemaTO schemaTO : schemaService.list(SchemaType.DERIVED)) {\n-                        System.out.println(\" - Schema key: \" + ((DerSchemaTO) schemaTO).getKey());\n-                        System.out.println(\"      expression: \" + ((DerSchemaTO) schemaTO).getExpression());\n-                    }\n-                    System.out.println(\"\");\n-                } catch (final SyncopeClientException | WebServiceException ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                }\n-                break;\n-            case LIST_VIRTUAL:\n-                try {\n-                    System.out.println(\"\");\n-                    for (final AbstractSchemaTO schemaTO : schemaService.list(SchemaType.VIRTUAL)) {\n-                        System.out.println(\" - Schema key: \" + ((VirSchemaTO) schemaTO).getKey());\n-                    }\n-                    System.out.println(\"\");\n-                } catch (final SyncopeClientException | WebServiceException ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                }\n-                break;\n-            case READ:\n-                final String readErrorMessage = \"schema --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n-                        + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n-                if (parameters.length >= 2) {\n-                    parameters = Arrays.copyOfRange(parameters, 1, parameters.length);\n-                    try {\n-                        final SchemaType schemaType = SchemaType.valueOf(input.firstParameter());\n-                        System.out.println(\"\");\n-                        for (final String parameter : parameters) {\n-                            final AbstractSchemaTO schemaTO = schemaService.read(schemaType, parameter);\n-                            switch (schemaType) {\n-                                case PLAIN:\n-                                    System.out.println(\" - Schema key: \" + ((PlainSchemaTO) schemaTO).getKey());\n-                                    System.out.println(\"      any type class: \"\n-                                            + ((PlainSchemaTO) schemaTO).getAnyTypeClass());\n-                                    System.out.println(\"      conversion pattern: \"\n-                                            + ((PlainSchemaTO) schemaTO).getConversionPattern());\n-                                    System.out.println(\"      enumeration keys: \"\n-                                            + ((PlainSchemaTO) schemaTO).getEnumerationKeys());\n-                                    System.out.println(\"      enumeration values: \"\n-                                            + ((PlainSchemaTO) schemaTO).getEnumerationValues());\n-                                    System.out.println(\"      mandatory condition: \"\n-                                            + ((PlainSchemaTO) schemaTO).getMandatoryCondition());\n-                                    System.out.println(\"      mime type: \" + ((PlainSchemaTO) schemaTO).getMimeType());\n-                                    System.out.println(\"      secret key: \"\n-                                            + ((PlainSchemaTO) schemaTO).getSecretKey());\n-                                    System.out.println(\"      validator class: \"\n-                                            + ((PlainSchemaTO) schemaTO).getValidatorClass());\n-                                    System.out.println(\"      cipher algorithm: \"\n-                                            + ((PlainSchemaTO) schemaTO).getCipherAlgorithm());\n-                                    System.out.println(\"      TYPE: \"\n-                                            + ((PlainSchemaTO) schemaTO).getType());\n-                                    break;\n-                                case DERIVED:\n-                                    System.out.println(\" - Schema key: \" + ((DerSchemaTO) schemaTO).getKey());\n-                                    System.out.println(\"      any type class: \"\n-                                            + ((DerSchemaTO) schemaTO).getAnyTypeClass());\n-                                    System.out.println(\"      expression: \" + ((DerSchemaTO) schemaTO).getExpression());\n-                                    break;\n-                                case VIRTUAL:\n-                                    System.out.println(\" - Schema key: \" + ((VirSchemaTO) schemaTO).getKey());\n-                                    System.out.println(\"      any type class: \"\n-                                            + ((VirSchemaTO) schemaTO).getAnyTypeClass());\n-                                    break;\n-                                default:\n-                                    break;\n-                            }\n-                            System.out.println(\"\");\n-                        }\n-                    } catch (final SyncopeClientException | WebServiceException ex) {\n-                        if (ex.getMessage().startsWith(\"NotFound\")) {\n-                            Messages.printNofFoundMessage(\"Schema\", parameters[0]);\n-                        } else {\n-                            Messages.printMessage(ex.getMessage());\n-                        }\n-                    } catch (final IllegalArgumentException ex) {\n-                        Messages.printTypeNotValidMessage(\n-                                \"schema\", input.firstParameter(), CommandUtils.fromEnumToArray(SchemaType.class));\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(readErrorMessage);\n-                }\n-                break;\n-            case DELETE:\n-                final String deleteErrorMessage = \"schema --delete {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n-                        + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n-                if (parameters.length >= 2) {\n-                    parameters = Arrays.copyOfRange(parameters, 1, parameters.length);\n-                    try {\n-                        for (final String parameter : parameters) {\n-                            schemaService.delete(SchemaType.valueOf(input.firstParameter()), parameter);\n-                            Messages.printDeletedMessage(\"Schema\", parameter);\n-                        }\n-                    } catch (final SyncopeClientException | WebServiceException ex) {\n-                        if (ex.getMessage().startsWith(\"NotFound\")) {\n-                            Messages.printNofFoundMessage(\"Schema\", parameters[0]);\n-                        } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                            Messages.printMessage(\n-                                    \"You cannot delete schema \" + parameters[0]);\n-                        } else {\n-                            Messages.printMessage(ex.getMessage());\n-                        }\n-                    } catch (final IllegalArgumentException ex) {\n-                        Messages.printTypeNotValidMessage(\n-                                \"schema\", input.firstParameter(), CommandUtils.fromEnumToArray(SchemaType.class));\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(deleteErrorMessage);\n-                }\n-                break;\n-            case HELP:\n-                System.out.println(HELP_MESSAGE);\n-                break;\n-            default:\n-                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n-        }\n-    }\n-\n-    @Override\n-    public String getHelpMessage() {\n-        return HELP_MESSAGE;\n-    }\n-\n-    private enum Options {\n-\n-        HELP(\"--help\"),\n-        LIST(\"--list\"),\n-        LIST_ALL(\"--list-all\"),\n-        LIST_PLAIN(\"--list-plain\"),\n-        LIST_DERIVED(\"--list-derived\"),\n-        LIST_VIRTUAL(\"--list-virtual\"),\n-        READ(\"--read\"),\n-        DELETE(\"--delete\");\n-\n-        private final String optionName;\n-\n-        Options(final String optionName) {\n-            this.optionName = optionName;\n-        }\n-\n-        public String getOptionName() {\n-            return optionName;\n-        }\n-\n-        public boolean equalsOptionName(final String otherName) {\n-            return (otherName == null) ? false : optionName.equals(otherName);\n-        }\n-\n-        public static Options fromName(final String name) {\n-            Options optionToReturn = HELP;\n-            for (final Options option : Options.values()) {\n-                if (option.equalsOptionName(name)) {\n-                    optionToReturn = option;\n-                }\n-            }\n-            return optionToReturn;\n-        }\n-\n-        public static List<String> toList() {\n-            final List<String> options = new ArrayList<>();\n-            for (final Options value : values()) {\n-                options.add(value.getOptionName());\n-            }\n-            return options;\n-        }\n-    }\n-}"},{"sha":"2942c07bd4ca05bc335920f1f77a2282c1206770","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/AbstractConfigurationCommand.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FAbstractConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FAbstractConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FAbstractConfigurationCommand.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.common.rest.api.service.ConfigurationService;\n \n-public class AbstractConfigurationCommand {\n+public abstract class AbstractConfigurationCommand {\n \n     protected final ConfigurationService configurationService = SyncopeServices.get(ConfigurationService.class);\n "},{"sha":"b5bfca5e603e1b8aac68163e51fb964836de1473","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/domain/AbstractDomainCommand.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FAbstractDomainCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FAbstractDomainCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FAbstractDomainCommand.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.common.rest.api.service.DomainService;\n \n-public class AbstractDomainCommand {\n+public abstract class AbstractDomainCommand {\n \n     protected final DomainService domainService = SyncopeServices.get(DomainService.class);\n "},{"sha":"c658beb84c1d397b9fdfb9f664f25933ecd9256d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/help/Help.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelp.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.help;\n+\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+\n+public class Help {\n+\n+    public void help() {\n+        final StringBuilder generalHelpBuilder = new StringBuilder(\"General help\\n\");\n+        try {\n+            for (final AbstractCommand command : CommandUtils.commands()) {\n+                generalHelpBuilder.append(\"Command: \")\n+                        .append(command.getClass().getAnnotation(Command.class).name())\n+                        .append(\"\\n\")\n+                        .append(command.getHelpMessage())\n+                        .append(\"\\n\")\n+                        .append(\" \\n\");\n+            }\n+            System.out.println(generalHelpBuilder.toString());\n+        } catch (final IllegalAccessException | IllegalArgumentException | InstantiationException e) {\n+            new HelpResultManager().generic(e.getMessage());\n+        }\n+    }\n+}"},{"sha":"eed0924d06ba8baf6a00a3ccfcdb0e6a5ab60953","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/help/HelpCommand.java","status":"renamed","additions":5,"deletions":28,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelpCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelpCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelpCommand.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -16,54 +16,32 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.cli.commands;\n+package org.apache.syncope.client.cli.commands.help;\n \n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.cli.Command;\n import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n import org.apache.syncope.client.cli.util.CommandUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n @Command(name = \"help\")\n public class HelpCommand extends AbstractCommand {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(HelpCommand.class);\n-\n     @Override\n     public void execute(final Input input) {\n-        LOG.debug(\"Option: {}\", input.getOption());\n-        LOG.debug(\"Parameters:\");\n-        for (final String parameter : input.getParameters()) {\n-            LOG.debug(\"   > \" + parameter);\n-        }\n-\n         if (StringUtils.isBlank(input.getOption())) {\n             input.setOption(Options.HELP.getOptionName());\n         }\n \n         switch (Options.fromName(input.getOption())) {\n             case HELP:\n-                final StringBuilder generalHelpBuilder = new StringBuilder(\"General help\\n\");\n-                try {\n-                    for (final AbstractCommand command : CommandUtils.commands()) {\n-                        generalHelpBuilder.append(\"Command: \")\n-                                .append(command.getClass().getAnnotation(Command.class).name())\n-                                .append(\"\\n\")\n-                                .append(command.getHelpMessage())\n-                                .append(\"\\n\")\n-                                .append(\" \\n\");\n-                    }\n-                    System.out.println(generalHelpBuilder.toString());\n-                } catch (final IllegalAccessException | IllegalArgumentException | InstantiationException e) {\n-                    Messages.printMessage(e.getMessage());\n-                }\n+                new Help().help();\n                 break;\n             default:\n-                Messages.printDefaultMessage(input.getOption(), CommandUtils.helpMessage(\"info\", Options.toList()));\n+                new HelpResultManager().defaultError(\n+                        input.getOption(), CommandUtils.helpMessage(\"info\", Options.toList()));\n                 break;\n         }\n     }\n@@ -109,5 +87,4 @@ public static List<String> toList() {\n             return options;\n         }\n     }\n-\n }","previous_filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/HelpCommand.java"},{"sha":"7a67943eddb012f2a54fd762d962ce5e3fe92c0c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/help/HelpResultManager.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelpResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelpResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelpResultManager.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.help;\n+\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+\n+public class HelpResultManager extends CommonsResultManager {\n+\n+}"},{"sha":"ccf917089c863da789f36e2c1f76f59e503abc97","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/info/Info.java","status":"added","additions":243,"deletions":0,"changes":243,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,243 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.info;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.lib.to.SyncopeTO;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n+\n+public class Info {\n+\n+    private final SyncopeTO syncopeTO = SyncopeServices.get(SyncopeService.class).info();\n+    \n+    private final InfoResultManager infoResultManager = new InfoResultManager();\n+\n+    public void version() {\n+        try {\n+            infoResultManager.generic(\"Syncope version: \" + syncopeTO.getVersion());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void pwdResetAllowed() {\n+        try {\n+            infoResultManager.generic(\"Password reset allowed: \" + syncopeTO.isPwdResetAllowed());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void resetWithSecurityQuestion() {\n+        try {\n+            infoResultManager.generic(\"Password reset requiring security question: \"\n+                    + syncopeTO.isPwdResetRequiringSecurityQuestions());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void selfRegistrationAllowed() {\n+        try {\n+            infoResultManager.generic(\"Self registration allowed: \" + syncopeTO.isSelfRegAllowed());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void provisioningManager() {\n+        try {\n+            infoResultManager.generic(\n+                    \"Any object provisioning manager class: \" + syncopeTO.getAnyObjectProvisioningManager(),\n+                    \"User       provisioning manager class: \" + syncopeTO.getUserProvisioningManager(),\n+                    \"Group      provisioning manager class: \" + syncopeTO.getGroupProvisioningManager());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void workflowAdapter() {\n+        try {\n+            infoResultManager.generic(\n+                    \"Any object workflow adapter class: \" + syncopeTO.getAnyObjectWorkflowAdapter(),\n+                    \"User       workflow adapter class: \" + syncopeTO.getUserWorkflowAdapter(),\n+                    \"Group      workflow adapter class: \" + syncopeTO.getGroupWorkflowAdapter());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void accountRules() {\n+        try {\n+            for (final String accountRule : syncopeTO.getAccountRules()) {\n+                infoResultManager.generic(\"Account rule: \" + accountRule);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void connidLocation() {\n+        try {\n+            for (final String location : syncopeTO.getConnIdLocations()) {\n+                infoResultManager.generic(\"ConnId location: \" + location);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void logicActions() {\n+        try {\n+            for (final String logic : syncopeTO.getLogicActions()) {\n+                infoResultManager.generic(\"Logic action: \" + logic);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void mailTemplates() {\n+        try {\n+            for (final String template : syncopeTO.getMailTemplates()) {\n+                infoResultManager.generic(\"Mail template: \" + template);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void mappingItemTransformers() {\n+        try {\n+            for (final String tranformer : syncopeTO.getMappingItemTransformers()) {\n+                infoResultManager.generic(\"Mapping item tranformer: \" + tranformer);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void passwordRules() {\n+        try {\n+            for (final String rules : syncopeTO.getPasswordRules()) {\n+                infoResultManager.generic(\"Password rule: \" + rules);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void propagationActions() {\n+        try {\n+            for (final String action : syncopeTO.getPropagationActions()) {\n+                infoResultManager.generic(\"Propagation action: \" + action);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void pushActions() {\n+        try {\n+            for (final String action : syncopeTO.getPushActions()) {\n+                infoResultManager.generic(\"Push action: \" + action);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void pushCorrelationActions() {\n+        try {\n+            for (final String rule : syncopeTO.getPushCorrelationRules()) {\n+                infoResultManager.generic(\"Push correlation rule: \" + rule);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void reportlets() {\n+        try {\n+            for (final String reportlet : syncopeTO.getReportlets()) {\n+                infoResultManager.generic(\"Reportlet: \" + reportlet);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void syncActions() {\n+        try {\n+            for (final String action : syncopeTO.getSyncActions()) {\n+                infoResultManager.generic(\"Sync action: \" + action);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void syncCorrelationRules() {\n+        try {\n+            for (final String rule : syncopeTO.getSyncCorrelationRules()) {\n+                infoResultManager.generic(\"Sync correlation rule: \" + rule);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void taskJobs() {\n+        try {\n+            for (final String job : syncopeTO.getTaskJobs()) {\n+                infoResultManager.generic(\"Task job: \" + job);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void validators() {\n+        try {\n+            for (final String validator : syncopeTO.getValidators()) {\n+                infoResultManager.generic(\"Validator: \" + validator);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void passwordGenerators() {\n+        try {\n+            infoResultManager.generic(\n+                    \"Password generator class: \" + syncopeTO.getPasswordGenerator());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void virAttrCache() {\n+        try {\n+            infoResultManager.generic(\n+                    \"Virtual attribute cache class: \" + syncopeTO.getVirAttrCache());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"31b9aaa9d6c8f08ad35d56751b22a1e54fd37dea","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/info/InfoCommand.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoCommand.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.info;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+\n+@Command(name = \"info\")\n+public class InfoCommand extends AbstractCommand {\n+\n+    private final Info info = new Info();\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case VERSION:\n+                info.version();\n+                break;\n+            case PWD_RESET_ALLOWED:\n+                info.pwdResetAllowed();\n+                break;\n+            case PWD_RESET_WITH_SECURITY_QUESTION:\n+                info.resetWithSecurityQuestion();\n+                break;\n+            case SELF_REG_ALLOWED:\n+                info.selfRegistrationAllowed();\n+                break;\n+            case PROVISIONING_MANAGER:\n+                info.provisioningManager();\n+                break;\n+            case WORKFLOW_ADAPTER:\n+                info.workflowAdapter();\n+                break;\n+            case ACCOUNT_RULES:\n+                info.accountRules();\n+                break;\n+            case CONNID_LOCATION:\n+                info.connidLocation();\n+                break;\n+            case LOGIC_ACTIONS:\n+                info.logicActions();\n+                break;\n+            case MAIL_TEMPLATES:\n+                info.mailTemplates();\n+                break;\n+            case MAPPING_ITEM_TRANSFORMERS:\n+                info.mappingItemTransformers();\n+                break;\n+            case PASSWORD_RULES:\n+                info.passwordRules();\n+                break;\n+            case PROPAGATION_ACTIONS:\n+                info.propagationActions();\n+                break;\n+            case PUSH_ACTIONS:\n+                info.pushActions();\n+                break;\n+            case PUSH_CORRELATION_ACTIONS:\n+                info.pushCorrelationActions();\n+                break;\n+            case REPORTLETS:\n+                info.reportlets();\n+                break;\n+            case SYNC_ACTIONS:\n+                info.syncActions();\n+                break;\n+            case SYNC_CORRELATION_RULES:\n+                info.syncCorrelationRules();\n+                break;\n+            case TASK_JOBS:\n+                info.taskJobs();\n+                break;\n+            case VALIDATORS:\n+                info.validators();\n+                break;\n+            case PASSWORD_GENERATOR:\n+                info.passwordGenerators();\n+                break;\n+            case VIR_ATTR_CACHE:\n+                info.virAttrCache();\n+                break;\n+            case HELP:\n+                System.out.println(CommandUtils.helpMessage(\"info\", Options.toList()));\n+                break;\n+            default:\n+                new InfoResultManager().defaultError(\n+                        input.getOption(), CommandUtils.helpMessage(\"info\", Options.toList()));\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return CommandUtils.helpMessage(\"info\", Options.toList());\n+    }\n+\n+    private enum Options {\n+\n+        VERSION(\"--version\"),\n+        PWD_RESET_ALLOWED(\"--pwd-reset-allowed\"),\n+        PWD_RESET_WITH_SECURITY_QUESTION(\"--pwd-reset-with-question\"),\n+        SELF_REG_ALLOWED(\"--self-reg-allowed\"),\n+        PROVISIONING_MANAGER(\"--provisioning-manager-classes\"),\n+        WORKFLOW_ADAPTER(\"--workflow-adapter-classes\"),\n+        ACCOUNT_RULES(\"--account-rules-classes\"),\n+        CONNID_LOCATION(\"--connid-locations\"),\n+        LOGIC_ACTIONS(\"--logic-actions\"),\n+        MAIL_TEMPLATES(\"--mail-templates\"),\n+        MAPPING_ITEM_TRANSFORMERS(\"--mapping-item-transformers\"),\n+        PASSWORD_RULES(\"--password-rules\"),\n+        PROPAGATION_ACTIONS(\"--propagation-actions\"),\n+        PUSH_ACTIONS(\"--push-actions\"),\n+        PUSH_CORRELATION_ACTIONS(\"--push-correlation-actions\"),\n+        REPORTLETS(\"--reportlets\"),\n+        SYNC_ACTIONS(\"--sync-actions\"),\n+        SYNC_CORRELATION_RULES(\"--sync-correlation-rules\"),\n+        TASK_JOBS(\"--task-jobs\"),\n+        VALIDATORS(\"--validators\"),\n+        PASSWORD_GENERATOR(\"--password-generator\"),\n+        VIR_ATTR_CACHE(\"--vir-attr-cache\"),\n+        HELP(\"--help\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"237af649c3dce474d44ff54a8867ca73715c0ddc","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/info/InfoResultManager.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoResultManager.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.info;\n+\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+\n+public class InfoResultManager extends CommonsResultManager {\n+\n+}"},{"sha":"a8703a9befff2e776f0a7166871ad014f0e9e1cc","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/AbstractLoggerCommand.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FAbstractLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FAbstractLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FAbstractLoggerCommand.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n \n-public class AbstractLoggerCommand {\n+public abstract class AbstractLoggerCommand {\n \n     protected final LoggerService loggerService = SyncopeServices.get(LoggerService.class);\n     "},{"sha":"6a51e953d59cf7114d001e9f4dea17c5647ed8eb","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerCreate.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -21,6 +21,7 @@\n import java.util.LinkedList;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n@@ -52,7 +53,8 @@ public void create() {\n                     loggerService.update(LoggerType.LOG, loggerTO);\n                     loggerTOs.add(loggerTO);\n                 } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n-                    loggerResultManager.typeNotValidError(input.firstParameter());\n+                    loggerResultManager.typeNotValidError(\n+                            \"logger level\", input.firstParameter(), CommandUtils.fromEnumToArray(LoggerLevel.class));\n                     failed = true;\n                     break;\n                 }"},{"sha":"03de917368d73f93f3f3870e7a720b8dac6bd8f3","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerUpdate.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -21,6 +21,7 @@\n import java.util.LinkedList;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n@@ -52,7 +53,10 @@ public void update() {\n                     loggerTOs.add(loggerTO);\n                 } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n                     if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                        loggerResultManager.typeNotValidError(input.firstParameter());\n+                        loggerResultManager.typeNotValidError(\n+                                \"logger level\",\n+                                input.firstParameter(),\n+                                CommandUtils.fromEnumToArray(LoggerLevel.class));\n                     } else if (\"Parameter syntax error!\".equalsIgnoreCase(ex.getMessage())) {\n                         loggerResultManager.generic(ex.getMessage(), UPDATE_HELP_MESSAGE);\n                     } else if (ex.getMessage().startsWith(\"NotFound\")) {"},{"sha":"55c2e603cc8479acc102e803ae2c20c34801d885","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerUpdateAll.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -21,6 +21,7 @@\n import java.util.LinkedList;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n@@ -47,7 +48,10 @@ public void updateAll() {\n                     loggerTOs.add(loggerTO);\n                 } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n                     if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                        loggerResultManager.typeNotValidError(input.firstParameter());\n+                        loggerResultManager.typeNotValidError(\n+                                \"logger level\",\n+                                input.firstParameter(),\n+                                CommandUtils.fromEnumToArray(LoggerLevel.class));\n                     } else {\n                         loggerResultManager.generic(ex.getMessage(), UPDATE_ALL_HELP_MESSAGE);\n                     }"},{"sha":"2b862ed28e02b6e51d39e8d9e4486cd7fff1f88d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/AbstractNotificationCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FAbstractNotificationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FAbstractNotificationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FAbstractNotificationCommand.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.notification;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.NotificationService;\n+\n+public abstract class AbstractNotificationCommand {\n+\n+    protected final NotificationService notificationService = SyncopeServices.get(NotificationService.class);\n+    \n+    protected final NotificationResultManager notificationResultManager = new NotificationResultManager();\n+\n+}"},{"sha":"d5197acc6d043a79281d1e9cb19bdff626377f9f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationCommand.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationCommand.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.notification;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"notification\")\n+public class NotificationCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: notification [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {NOTIFICATION-ID} \\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {NOTIFICATION-ID}\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST:\n+                new NotificationList().list();\n+                break;\n+            case READ:\n+                new NotificationRead(input).read();\n+                break;\n+            case DELETE:\n+                new NotificationDelete(input).delete();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new NotificationResultManager().deletedMessage(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        READ(\"--read\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+\n+}"},{"sha":"1e4b96d00f7a1246f95f009633e981dd6af2cc43","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationDelete.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationDelete.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.notification;\n+\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class NotificationDelete extends AbstractNotificationCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"notification --delete {NOTIFICATION-ID} {NOTIFICATION-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public NotificationDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    notificationService.delete(Long.valueOf(parameter));\n+                    notificationResultManager.deletedMessage(\"Notification\", parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        notificationResultManager.notFoundError(\"Notification\", parameter);\n+                    } else {\n+                        Messages.printMessage(ex.getMessage());\n+                    }\n+                } catch (final NumberFormatException ex) {\n+                    notificationResultManager.notBooleanDeletedError(\"notification\", parameter);\n+                }\n+            }\n+        } else {\n+            notificationResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"ff9561ca4b23fc2de4e68cbee4702023e5242486","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationList.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationList.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.notification;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.NotificationTO;\n+\n+public class NotificationList extends AbstractNotificationCommand {\n+\n+    public void list() {\n+        try {\n+            for (final NotificationTO notificationTO : notificationService.list()) {\n+                System.out.println(notificationTO);\n+            }\n+        } catch (final SyncopeClientException ex) {\n+            notificationResultManager.generic(ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"386700c6b4f25a7f63ce5c75d00b37d05b08c305","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationRead.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationRead.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.notification;\n+\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class NotificationRead extends AbstractNotificationCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"notification --read {NOTIFICATION-ID} {NOTIFICATION-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public NotificationRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    System.out.println(notificationService.read(Long.valueOf(parameter)));\n+                } catch (final NumberFormatException ex) {\n+                    notificationResultManager.notBooleanDeletedError(\"notification\", parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        notificationResultManager.notFoundError(\"Notification\", parameter);\n+                    } else {\n+                        notificationResultManager.generic(ex.getMessage());\n+                    }\n+                }\n+            }\n+        } else {\n+            notificationResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"d16d88b064ec6e838abb079a83eaf83934e183aa","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationResultManager.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationResultManager.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.notification;\n+\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+\n+public class NotificationResultManager extends CommonsResultManager {\n+\n+}"},{"sha":"3074135a7137edc3555f83841e60d00f032f732e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/AbstractSchemaCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FAbstractSchemaCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FAbstractSchemaCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FAbstractSchemaCommand.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.SchemaService;\n+\n+public abstract class AbstractSchemaCommand {\n+\n+    protected final SchemaService schemaService = SyncopeServices.get(SchemaService.class);\n+    \n+    protected final SchemaResultManager schemaResultManager = new SchemaResultManager();\n+\n+}"},{"sha":"193c79b45f3f481ecc3916a99dc19f30621e3755","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaCommand.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaCommand.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"schema\")\n+public class SchemaCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: schema [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list-all\\n\"\n+            + \"    --list-plain\\n\"\n+            + \"    --list-derived\\n\"\n+            + \"    --list-virtual\\n\"\n+            + \"    --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+            + \"        Schema type: PLAIN / DERIVED / VIRTUAL\\n\"\n+            + \"    --delete {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+            + \"        Schema type: PLAIN / DERIVED / VIRTUAL\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST:\n+                new SchemaList(input).list();\n+                break;\n+            case LIST_ALL:\n+                new SchemaListAll().listAll();\n+                break;\n+            case LIST_PLAIN:\n+                new SchemaListPlain().listPlain();\n+                break;\n+            case LIST_DERIVED:\n+                new SchemaListDerived().listDerived();\n+                break;\n+            case LIST_VIRTUAL:\n+                new SchemaListVirtual().listVirtual();\n+                break;\n+            case READ:\n+                new SchemaRead(input).read();\n+                break;\n+            case DELETE:\n+                new SchemaDelete(input).delete();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new SchemaResultManager().defaultError(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        LIST_ALL(\"--list-all\"),\n+        LIST_PLAIN(\"--list-plain\"),\n+        LIST_DERIVED(\"--list-derived\"),\n+        LIST_VIRTUAL(\"--list-virtual\"),\n+        READ(\"--read\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"9cf6fe2048db4cced334decef573034d228d9325","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaDelete.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaDelete.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.Arrays;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaDelete extends AbstractSchemaCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"schema --delete {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+            + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n+\n+    private final Input input;\n+\n+    public SchemaDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.parameterNumber() >= 2) {\n+            final String[] parameters = Arrays.copyOfRange(input.getParameters(), 1, input.parameterNumber());\n+            try {\n+                for (final String parameter : parameters) {\n+                    schemaService.delete(SchemaType.valueOf(input.firstParameter()), parameter);\n+                    schemaResultManager.deletedMessage(\"Schema\", parameter);\n+                }\n+            } catch (final SyncopeClientException | WebServiceException ex) {\n+                if (ex.getMessage().startsWith(\"NotFound\")) {\n+                    schemaResultManager.notFoundError(\"Schema\", parameters[0]);\n+                } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                    schemaResultManager.generic(\"You cannot delete schema \" + parameters[0]);\n+                } else {\n+                    schemaResultManager.generic(ex.getMessage());\n+                }\n+            } catch (final IllegalArgumentException ex) {\n+                schemaResultManager.typeNotValidError(\n+                        \"schema\", input.firstParameter(), CommandUtils.fromEnumToArray(SchemaType.class));\n+            }\n+        } else {\n+            schemaResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"5f51604896b03db16c59327310d2b39ebd401656","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaList.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaList.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.LinkedList;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaList extends AbstractSchemaCommand {\n+\n+    private static final String LIST_HELP_MESSAGE = \"schema --list {SCHEMA-TYPE}\\n\"\n+            + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n+\n+    private final Input input;\n+\n+    public SchemaList(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void list() {\n+        if (input.parameterNumber() == 1) {\n+            try {\n+                final SchemaType schemaType = SchemaType.valueOf(input.firstParameter());\n+                final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+                for (final AbstractSchemaTO schemaTO : schemaService.list(schemaType)) {\n+                    schemaTOs.add(schemaTO);\n+                }\n+                switch (schemaType) {\n+                    case PLAIN:\n+                        schemaResultManager.fromListPlain(schemaTOs);\n+                        break;\n+                    case DERIVED:\n+                        schemaResultManager.fromListDerived(schemaTOs);\n+                        break;\n+                    case VIRTUAL:\n+                        schemaResultManager.fromListVirtual(schemaTOs);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                schemaResultManager.generic(ex.getMessage());\n+            } catch (final IllegalArgumentException ex) {\n+                schemaResultManager.typeNotValidError(\n+                        \"schema\", input.firstParameter(), CommandUtils.fromEnumToArray(SchemaType.class));\n+            }\n+        } else {\n+            schemaResultManager.commandOptionError(LIST_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"5d00adb1c3505985deb98d35c3f5b188371cb07b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaListAll.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListAll.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListAll.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListAll.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaListAll extends AbstractSchemaCommand {\n+\n+    public void listAll() {\n+        try {\n+            for (final SchemaType schemaType : SchemaType.values()) {\n+                final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+                for (final AbstractSchemaTO schemaTO : schemaService.list(schemaType)) {\n+                    schemaTOs.add(schemaTO);\n+                }\n+                switch (schemaType) {\n+                    case PLAIN:\n+                        schemaResultManager.fromListPlain(schemaTOs);\n+                        break;\n+                    case DERIVED:\n+                        schemaResultManager.fromListDerived(schemaTOs);\n+                        break;\n+                    case VIRTUAL:\n+                        schemaResultManager.fromListVirtual(schemaTOs);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        } catch (final SyncopeClientException | WebServiceException ex) {\n+            schemaResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+}"},{"sha":"8cdb5016b8251e901535f6864dff79a61880b82e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaListDerived.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListDerived.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListDerived.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListDerived.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaListDerived extends AbstractSchemaCommand {\n+\n+    public void listDerived() {\n+        try {\n+            final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+            for (final AbstractSchemaTO schemaTO : schemaService.list(SchemaType.DERIVED)) {\n+                schemaTOs.add(schemaTO);\n+            }\n+            schemaResultManager.fromListDerived(schemaTOs);\n+        } catch (final SyncopeClientException | WebServiceException ex) {\n+            schemaResultManager.generic(ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"e4160a786e630635decbb3673ebd1d2d143a5751","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaListPlain.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListPlain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListPlain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListPlain.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaListPlain extends AbstractSchemaCommand {\n+\n+    public void listPlain() {\n+        try {\n+            final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+            for (final AbstractSchemaTO schemaTO : schemaService.list(SchemaType.PLAIN)) {\n+                schemaTOs.add(schemaTO);\n+            }\n+            schemaResultManager.fromListPlain(schemaTOs);\n+        } catch (final SyncopeClientException | WebServiceException ex) {\n+            schemaResultManager.generic(ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"7b1bf249a57aa139841f9393a2dd76a8e99da734","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaListVirtual.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListVirtual.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListVirtual.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListVirtual.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaListVirtual extends AbstractSchemaCommand {\n+\n+    public void listVirtual() {\n+        try {\n+            final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+            for (final AbstractSchemaTO schemaTO : schemaService.list(SchemaType.VIRTUAL)) {\n+                schemaTOs.add(schemaTO);\n+            }\n+            schemaResultManager.fromListVirtual(schemaTOs);\n+        } catch (final SyncopeClientException | WebServiceException ex) {\n+            schemaResultManager.generic(ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"97f1029bfe74fb423b76ccb015f3bea1610e2c76","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaRead.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaRead.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaRead extends AbstractSchemaCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"schema --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+            + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n+\n+    private final Input input;\n+\n+    public SchemaRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.parameterNumber() >= 2) {\n+            final String[] parameters = Arrays.copyOfRange(input.getParameters(), 1, input.parameterNumber());\n+            try {\n+                final SchemaType schemaType = SchemaType.valueOf(input.firstParameter());\n+                final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+                for (final String parameter : parameters) {\n+                    schemaTOs.add(schemaService.read(schemaType, parameter));\n+                }\n+                switch (schemaType) {\n+                    case PLAIN:\n+                        schemaResultManager.fromReadPlain(schemaTOs);\n+                        break;\n+                    case DERIVED:\n+                        schemaResultManager.fromListDerived(schemaTOs);\n+                        break;\n+                    case VIRTUAL:\n+                        schemaResultManager.fromListVirtual(schemaTOs);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            } catch (final SyncopeClientException | WebServiceException ex) {\n+                if (ex.getMessage().startsWith(\"NotFound\")) {\n+                    schemaResultManager.notFoundError(\"Schema\", parameters[0]);\n+                } else {\n+                    schemaResultManager.generic(ex.getMessage());\n+                }\n+            } catch (final IllegalArgumentException ex) {\n+                schemaResultManager.typeNotValidError(\n+                        \"schema\", input.firstParameter(), CommandUtils.fromEnumToArray(SchemaType.class));\n+            }\n+        } else {\n+            schemaResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"8880dd39a3111370dffde2db2f6fb42f16601c49","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaResultManager.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+import org.apache.syncope.client.cli.messages.Table;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.DerSchemaTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.VirSchemaTO;\n+\n+public class SchemaResultManager extends CommonsResultManager {\n+\n+    public void fromListPlain(final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+        final Table.TableBuilder tableBuilder\n+                = new Table.TableBuilder(\"plain schemas\").header(\"schema key\").header(\"type\").header(\"mandatory\");\n+        for (final AbstractSchemaTO schemaTO : schemaTOs) {\n+            tableBuilder.rowValues(new LinkedList(Arrays.asList(\n+                    ((PlainSchemaTO) schemaTO).getKey(),\n+                    ((PlainSchemaTO) schemaTO).getType().toString(),\n+                    ((PlainSchemaTO) schemaTO).getMandatoryCondition())));\n+        }\n+        tableBuilder.build().print();\n+    }\n+\n+    public void fromReadPlain(final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+        final Table.TableBuilder tableBuilder\n+                = new Table.TableBuilder(\"plain schema details \")\n+                .header(\"schema key\")\n+                .header(\"type class\")\n+                .header(\"pattern\")\n+                .header(\"enum keys\")\n+                .header(\"enum values\")\n+                .header(\"mandatory condition\")\n+                .header(\"mime type\")\n+                .header(\"secret key\")\n+                .header(\"class validator\")\n+                .header(\"chiper\")\n+                .header(\"type\");\n+        for (final AbstractSchemaTO schemaTO : schemaTOs) {\n+            tableBuilder.rowValues(new LinkedList(Arrays.asList(\n+                    ((PlainSchemaTO) schemaTO).getKey(),\n+                    ((PlainSchemaTO) schemaTO).getAnyTypeClass(),\n+                    ((PlainSchemaTO) schemaTO).getConversionPattern(),\n+                    ((PlainSchemaTO) schemaTO).getEnumerationKeys(),\n+                    ((PlainSchemaTO) schemaTO).getEnumerationValues(),\n+                    ((PlainSchemaTO) schemaTO).getMandatoryCondition(),\n+                    ((PlainSchemaTO) schemaTO).getMimeType(),\n+                    ((PlainSchemaTO) schemaTO).getSecretKey(),\n+                    ((PlainSchemaTO) schemaTO).getValidatorClass(),\n+                    ((PlainSchemaTO) schemaTO).getCipherAlgorithm(),\n+                    ((PlainSchemaTO) schemaTO).getType().toString())));\n+        }\n+        tableBuilder.build().print();\n+    }\n+\n+    public void fromListDerived(final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+        final Table.TableBuilder tableBuilder\n+                = new Table.TableBuilder(\"derived schemas\").header(\"schema key\").header(\"expression\");\n+        for (final AbstractSchemaTO schemaTO : schemaTOs) {\n+            tableBuilder.rowValues(new LinkedList(Arrays.asList(\n+                    ((DerSchemaTO) schemaTO).getKey(),\n+                    ((DerSchemaTO) schemaTO).getExpression())));\n+        }\n+        tableBuilder.build().print();\n+    }\n+\n+    public void fromListVirtual(final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+        final Table.TableBuilder tableBuilder\n+                = new Table.TableBuilder(\"virtual schemas\").header(\"schema key\").header(\"readonly\");\n+        for (final AbstractSchemaTO schemaTO : schemaTOs) {\n+            tableBuilder.rowValues(new LinkedList(Arrays.asList(\n+                    ((VirSchemaTO) schemaTO).getKey(),\n+                    String.valueOf(((VirSchemaTO) schemaTO).isReadonly()))));\n+        }\n+        tableBuilder.build().print();\n+    }\n+}"},{"sha":"311682cccaa70159a3f83dc46668f4be3c40a5a0","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/Table.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f2548a004db0970fbfbd0773a068a8f9c9a836/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTable.java?ref=80f2548a004db0970fbfbd0773a068a8f9c9a836","patch":"@@ -94,7 +94,7 @@ private void initializeColumnSize() {\n \n         for (final LinkedList<String> value : values) {\n             for (int j = 0; j < columnsSize.length; j++) {\n-                if (value.get(j).length() > columnsSize[j]) {\n+                if (value.get(j) != null && value.get(j).length() > columnsSize[j]) {\n                     columnsSize[j] = value.get(j).length();\n                 }\n             }\n@@ -143,9 +143,13 @@ private void printHeaders() {\n     private void printeContent() {\n         printColumnSpace();\n \n-        for (LinkedList<String> value : values) {\n+        for (final LinkedList<String> value : values) {\n             for (int j = 0; j < columnsNumber; j++) {\n-                tmpValuesArray[j] = StringUtils.center(value.get(j), columnsSize[j]);\n+                if (value.get(j) == null) {\n+                    tmpValuesArray[j] = StringUtils.center(\"null\", columnsSize[j]);\n+                } else {\n+                    tmpValuesArray[j] = StringUtils.center(value.get(j), columnsSize[j]);\n+                }\n             }\n             System.out.format(tableContentFormat, tmpValuesArray);\n         }\n@@ -160,7 +164,7 @@ private void printColumnSpace() {\n \n         System.out.format(tableContentFormat, tmpValuesArray);\n     }\n-    \n+\n     public static class TableBuilder {\n \n         private final LinkedList<String> headers = new LinkedList<>();"}]}