{"sha":"e2038a4d278501b97f9fad35b5ca9ff751d8fb77","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUyMDM4YTRkMjc4NTAxYjk3ZjlmYWQzNWI1Y2E5ZmY3NTFkOGZiNzc=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-06-12T15:52:30Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-06-12T15:52:30Z"},"message":"SYNCOPE-1556: Manage OIDC JWKS (#196)","tree":{"sha":"44b10d43c9a1db36d765e8fbf8388e7552fee537","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/44b10d43c9a1db36d765e8fbf8388e7552fee537"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e2038a4d278501b97f9fad35b5ca9ff751d8fb77","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe46S+CRBK7hj4Ov3rIwAAdHIIABbNhWCmZ4muOKFy7nHEu0YV\nsxPiVUCc3dz9x56O2CgnfVyiH4O7tI9f2bDHVK35dKvEXV35EcfylarNUoCNUSuA\n+3yWVmWT/6LYFKorvNWf5PG+1GHMnvIPKMiIjOEs0a9KYBtZVzvuEuexkPkPb+Y4\nvpFGy/vNAtSGAo1tI+t9b30KyNouPQgFEjTIqEvZz+1BORBP1td1S1uVx58jqxT/\nrfzZ+2hQ5NK6uxquo77VnRCc3TPuvpqHclZanoVX9DqsvsQnBGm7YLuwOy2/mrW0\nvYvmlDOWWQ20QbDYSmG1G8KfnpwAsyRYGxBMBdQ5w7F5Jghg04z82vVNuVh2vW8=\n=QWpL\n-----END PGP SIGNATURE-----\n","payload":"tree 44b10d43c9a1db36d765e8fbf8388e7552fee537\nparent 2a47e9d9ff3da0e44af5fbcc0e46a608ac82f9a5\nauthor Misagh Moayyed <mm1844@gmail.com> 1591977150 +0430\ncommitter GitHub <noreply@github.com> 1591977150 +0430\n\nSYNCOPE-1556: Manage OIDC JWKS (#196)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e2038a4d278501b97f9fad35b5ca9ff751d8fb77","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e2038a4d278501b97f9fad35b5ca9ff751d8fb77","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"2a47e9d9ff3da0e44af5fbcc0e46a608ac82f9a5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a47e9d9ff3da0e44af5fbcc0e46a608ac82f9a5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a47e9d9ff3da0e44af5fbcc0e46a608ac82f9a5"}],"stats":{"total":1023,"additions":1012,"deletions":11},"files":[{"sha":"abbcbdeb0740972839e180af1859355ddb14f5f5","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/OIDCJWKSTO.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCJWKSTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCJWKSTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCJWKSTO.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+\n+public class OIDCJWKSTO implements EntityTO {\n+\n+    private static final long serialVersionUID = 1285073386484048953L;\n+\n+    private String key;\n+\n+    private String json;\n+\n+    public String getJson() {\n+        return json;\n+    }\n+\n+    public void setJson(final String json) {\n+        this.json = json;\n+    }\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder()\n+            .appendSuper(super.hashCode())\n+            .append(key)\n+            .append(json)\n+            .toHashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        OIDCJWKSTO rhs = (OIDCJWKSTO) obj;\n+        return new EqualsBuilder()\n+            .appendSuper(super.equals(obj))\n+            .append(this.key, rhs.key)\n+            .append(this.json, rhs.json)\n+            .isEquals();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this)\n+            .append(\"key\", key)\n+            .append(\"json\", json)\n+            .toString();\n+    }\n+\n+    public static class Builder {\n+\n+        private final OIDCJWKSTO instance = new OIDCJWKSTO();\n+\n+        public OIDCJWKSTO.Builder json(final String json) {\n+            instance.setJson(json);\n+            return this;\n+        }\n+\n+        public OIDCJWKSTO.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public OIDCJWKSTO build() {\n+            return instance;\n+        }\n+    }\n+}"},{"sha":"6e2ccaabf9c48859f712f4556f4c953dbf5dfded","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -96,6 +96,14 @@ public final class AMEntitlement {\n \n     public static final String GOOGLE_MFA_COUNT_ACCOUNTS = \"GOOGLE_MFA_COUNT_ACCOUNTS\";\n \n+    public static final String OIDC_JWKS_CREATE = \"OIDC_JWKS_CREATE\";\n+\n+    public static final String OIDC_JWKS_READ = \"OIDC_JWKS_READ\";\n+\n+    public static final String OIDC_JWKS_UPDATE = \"OIDC_JWKS_UPDATE\";\n+\n+    public static final String OIDC_JWKS_DELETE = \"OIDC_JWKS_DELETE\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"fbc8de74a6d6baf8da6c5ab5de96cc7782921038","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCJWKSConfService.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCJWKSConfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCJWKSConfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCJWKSConfService.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Tag(name = \"OIDC Json Web Keystore\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\")})\n+@Path(\"oidc/jwks\")\n+public interface OIDCJWKSConfService extends JAXRSService {\n+\n+    @ApiResponse(responseCode = \"204\", description = \"Operation was successful\")\n+    @PUT\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    void update(@NotNull OIDCJWKSTO jwksTO);\n+\n+    @DELETE\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response delete();\n+}"},{"sha":"6c28c9ac08f2e012469baef6b25bbd14a0cae80c","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/OIDCJWKSService.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FOIDCJWKSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FOIDCJWKSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FOIDCJWKSService.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.common.rest.api.service.wa;\n+\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Tag(name = \"OIDC Json Web Keystore\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\")})\n+@Path(\"wa/oidc/jwks\")\n+public interface OIDCJWKSService extends JAXRSService {\n+\n+    @GET\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    OIDCJWKSTO get();\n+\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+            description = \"JWKS successfully created\", headers = {\n+            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+            @Schema(type = \"string\"),\n+                description = \"UUID generated for the entity created\"),\n+            @Header(name = HttpHeaders.LOCATION, schema =\n+            @Schema(type = \"string\"),\n+                description = \"URL of the entity created\")}),\n+        @ApiResponse(responseCode = \"409\",\n+            description = \"JWKS already exists\")})\n+    @POST\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    Response set();\n+}"},{"sha":"1ba9274f12a12150557ad4233a8cc46bc6b3d3ec","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/GoogleMfaAuthAccountLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthAccountLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthAccountLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthAccountLogic.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -37,7 +38,6 @@\n import java.lang.reflect.Method;\n import java.util.List;\n import java.util.Objects;\n-import java.util.UUID;\n import java.util.stream.Collectors;\n \n @Component\n@@ -108,7 +108,7 @@ public GoogleMfaAuthAccount save(final GoogleMfaAuthAccount acct) {\n             });\n \n         if (acct.getKey() == null) {\n-            acct.setKey(UUID.randomUUID().toString());\n+            acct.setKey(SecureRandomUtils.generateRandomUUID().toString());\n         }\n         profile.setGoogleMfaAuthAccount(acct);\n         return authProfileDAO.save(profile).getGoogleMfaAuthAccount();"},{"sha":"759b1d0fed0a062d0cefd812c15fb0f09d41ec26","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/GoogleMfaAuthTokenLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthTokenLogic.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -22,7 +22,6 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n-import java.util.UUID;\n import java.util.function.Predicate;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.AuthProfileTO;\n@@ -34,6 +33,7 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -106,7 +106,7 @@ public GoogleMfaAuthToken save(final GoogleMfaAuthToken token) {\n                 });\n \n         if (token.getKey() == null) {\n-            token.setKey(UUID.randomUUID().toString());\n+            token.setKey(SecureRandomUtils.generateRandomUUID().toString());\n         }\n         profile.add(token);\n         profile = authProfileDAO.save(profile);"},{"sha":"4212427f817a354eca57cc18954922b19f7c822f","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/OIDCJWKSLogic.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCJWKSDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.provisioning.api.data.OIDCJWKSDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.lang.reflect.Method;\n+\n+@Component\n+public class OIDCJWKSLogic extends AbstractTransactionalLogic<OIDCJWKSTO> {\n+\n+    @Autowired\n+    private OIDCJWKSDataBinder binder;\n+\n+    @Autowired\n+    private OIDCJWKSDAO dao;\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_READ + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public OIDCJWKSTO get() {\n+        OIDCJWKS jwks = dao.get();\n+        if (jwks != null) {\n+            return binder.get(jwks);\n+        }\n+        throw new NotFoundException(\"OIDC JWKS not found\");\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_CREATE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public OIDCJWKSTO set() {\n+        OIDCJWKS jwks = dao.get();\n+        if (jwks == null) {\n+            return binder.get(dao.save(binder.create()));\n+        }\n+        throw SyncopeClientException.build(ClientExceptionType.EntityExists);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_UPDATE + \"')\")\n+    public OIDCJWKSTO update(final OIDCJWKSTO jwksTO) {\n+        OIDCJWKS jwks = dao.get();\n+        if (jwks == null) {\n+            throw SyncopeClientException.build(ClientExceptionType.NotFound);\n+        }\n+        return binder.get(dao.save(binder.update(jwks, jwksTO)));\n+    }\n+\n+    @Override\n+    protected OIDCJWKSTO resolveReference(final Method method, final Object... args)\n+        throws UnresolvedReferenceException {\n+        OIDCJWKS jwks = dao.get();\n+        if (jwks == null) {\n+            throw new UnresolvedReferenceException();\n+        }\n+        return binder.get(jwks);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_DELETE + \"')\")\n+    public void delete() {\n+         dao.delete();\n+    }\n+}"},{"sha":"520d0c68cc54ef47fe981c71ec24b5f5fcf1be48","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPMetadataLogic.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import static org.apache.syncope.core.logic.AbstractLogic.LOG;\n-\n import java.lang.reflect.Method;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -30,7 +28,7 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPMetadataDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n-import org.apache.syncope.core.provisioning.api.data.SAML2IdPMetadataBinder;\n+import org.apache.syncope.core.provisioning.api.data.SAML2IdPMetadataDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -40,7 +38,7 @@\n public class SAML2IdPMetadataLogic extends AbstractTransactionalLogic<SAML2IdPMetadataTO> {\n \n     @Autowired\n-    private SAML2IdPMetadataBinder binder;\n+    private SAML2IdPMetadataDataBinder binder;\n \n     @Autowired\n     private SAML2IdPMetadataDAO saml2IdPMetadataDAO;"},{"sha":"a6a534b24f9563ed79f67322b62ccd4753993493","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/OIDCJWKSConfServiceImpl.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSConfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSConfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSConfServiceImpl.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.rest.api.service.OIDCJWKSConfService;\n+import org.apache.syncope.core.logic.OIDCJWKSLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.core.Response;\n+\n+@Service\n+public class OIDCJWKSConfServiceImpl extends AbstractServiceImpl implements OIDCJWKSConfService {\n+\n+    @Autowired\n+    private OIDCJWKSLogic logic;\n+\n+    @Override\n+    public void update(final OIDCJWKSTO jwksTO) {\n+        logic.update(jwksTO);\n+    }\n+\n+    @Override\n+    public Response delete() {\n+        logic.delete();\n+        return Response.noContent().build();\n+    }\n+}"},{"sha":"19df5d471523542bb4865fd3461c4bc7f99ff449","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/OIDCJWKSServiceImpl.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FOIDCJWKSServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FOIDCJWKSServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FOIDCJWKSServiceImpl.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.rest.cxf.service.wa;\n+\n+import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.wa.OIDCJWKSService;\n+import org.apache.syncope.core.logic.OIDCJWKSLogic;\n+import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.net.URI;\n+\n+@Service\n+public class OIDCJWKSServiceImpl extends AbstractServiceImpl implements OIDCJWKSService {\n+    @Autowired\n+    private OIDCJWKSLogic logic;\n+\n+    @Override\n+    public OIDCJWKSTO get() {\n+        return logic.get();\n+    }\n+\n+    @Override\n+    public Response set() {\n+        OIDCJWKSTO jwks = logic.set();\n+        URI location = uriInfo.getAbsolutePathBuilder().path(jwks.getKey()).build();\n+        return Response.created(location).\n+            header(RESTHeaders.RESOURCE_KEY, jwks.getKey()).\n+            entity(jwks).\n+            build();\n+    }\n+}"},{"sha":"98acd8aa88ab328d656932ac0341eb37867583d5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/OIDCJWKSDAO.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FOIDCJWKSDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FOIDCJWKSDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FOIDCJWKSDAO.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.DAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+\n+public interface OIDCJWKSDAO extends DAO<OIDCJWKS> {\n+    OIDCJWKS get();\n+\n+    OIDCJWKS save(OIDCJWKS jwks);\n+\n+    void delete();\n+}"},{"sha":"fe617a099523b45a4a3b7cc524009c178e47266a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/OIDCJWKS.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCJWKS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCJWKS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCJWKS.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+\n+public interface OIDCJWKS extends Entity {\n+\n+    String getJson();\n+\n+    void setJson(String json);\n+\n+}"},{"sha":"e71f5ae1ec88c0269186582eee0252f36568901b","filename":"core/persistence-jpa-json/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-jpa-json%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-jpa-json%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fpom.xml?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -86,6 +86,11 @@ under the License.\n       <artifactId>junit-jupiter</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>com.nimbusds</groupId>\n+      <artifactId>nimbus-jose-jwt</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"8019673540997dfd9fec3839ce4be1038150b587","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -138,6 +138,11 @@ under the License.\n       <artifactId>bcprov-jdk15on</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>com.nimbusds</groupId>\n+      <artifactId>nimbus-jose-jwt</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"19cc1e360e7e3c3d13b9f3e3507a6c987e770b29","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAOIDCJWKSDAO.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCJWKSDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCJWKSDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCJWKSDAO.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCJWKSDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCJWKS;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+\n+@Repository\n+public class JPAOIDCJWKSDAO extends AbstractDAO<OIDCJWKS> implements OIDCJWKSDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public OIDCJWKS get() {\n+        try {\n+            TypedQuery<OIDCJWKS> query = entityManager().\n+                createQuery(\"SELECT e FROM \" + JPAOIDCJWKS.class.getSimpleName() + \" e\", OIDCJWKS.class);\n+            return query.getSingleResult();\n+        } catch (final NoResultException e) {\n+            LOG.debug(e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public OIDCJWKS save(final OIDCJWKS jwks) {\n+        return entityManager().merge(jwks);\n+    }\n+\n+    @Override\n+    public void delete() {\n+        entityManager().\n+            createQuery(\"DELETE FROM \" + JPAOIDCJWKS.class.getSimpleName()).\n+            executeUpdate();\n+    }\n+}"},{"sha":"6f730ef20307525f555dcd8fbe26d256b2483436","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -59,6 +59,7 @@\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n@@ -114,6 +115,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthProfile;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCJWKS;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRP;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SP;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPKeystore;\n@@ -337,6 +339,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPASAML2SPKeystore();\n         } else if (reference.equals(AuthProfile.class)) {\n             result = (E) new JPAAuthProfile();\n+        } else if (reference.equals(OIDCJWKS.class)) {\n+            result = (E) new JPAOIDCJWKS();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"d01b038214747db90b2c2ed906473dd16393d577","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAOIDCJWKS.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCJWKS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCJWKS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCJWKS.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = JPAOIDCJWKS.TABLE)\n+public class JPAOIDCJWKS extends AbstractGeneratedKeyEntity implements OIDCJWKS {\n+\n+    public static final String TABLE = \"OIDCJWKS\";\n+\n+    private static final long serialVersionUID = 47352617217394093L;\n+\n+    @Column\n+    @Lob\n+    private String json;\n+\n+    @Override\n+    public String getJson() {\n+        return this.json;\n+    }\n+\n+    @Override\n+    public void setJson(final String json) {\n+        this.json = json;\n+    }\n+}"},{"sha":"bd23665a0e0f885a0a5e432a36711f407e4ab990","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/OIDCJWKSTest.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCJWKSTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCJWKSTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCJWKSTest.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import com.nimbusds.jose.jwk.JWKSet;\n+import com.nimbusds.jose.jwk.KeyUse;\n+import com.nimbusds.jose.jwk.RSAKey;\n+import com.nimbusds.jose.jwk.gen.RSAKeyGenerator;\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCJWKSDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@Transactional(\"Master\")\n+public class OIDCJWKSTest extends AbstractTest {\n+\n+    @Autowired\n+    private OIDCJWKSDAO jwksDAO;\n+\n+    @Test\n+    public void save() throws Exception {\n+        OIDCJWKS jwks = entityFactory.newEntity(OIDCJWKS.class);\n+\n+        RSAKey jwk = new RSAKeyGenerator(2048)\n+            .keyUse(KeyUse.SIGNATURE)\n+            .keyID(UUID.randomUUID().toString())\n+            .generate();\n+\n+        String json = new JWKSet(jwk).toString();\n+        jwks.setJson(json);\n+        jwks = jwksDAO.save(jwks);\n+        assertNotNull(jwks);\n+        assertNotNull(jwks.getKey());\n+\n+    }\n+}"},{"sha":"164c6201e6553bef1653566c437dfe92f4a3d2a2","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/OIDCJWKSDataBinder.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FOIDCJWKSDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FOIDCJWKSDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FOIDCJWKSDataBinder.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+\n+public interface OIDCJWKSDataBinder {\n+    \n+    OIDCJWKSTO get(OIDCJWKS jwks);\n+\n+    OIDCJWKS create();\n+\n+    OIDCJWKS update(OIDCJWKS oidcjwks, OIDCJWKSTO jwksTO);\n+}"},{"sha":"3cabfbbff627891169cf331fb2a3a232264b4256","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2IdPMetadataDataBinder.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPMetadataDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPMetadataDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPMetadataDataBinder.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n \n-public interface SAML2IdPMetadataBinder {\n+public interface SAML2IdPMetadataDataBinder {\n \n     SAML2IdPMetadata create(SAML2IdPMetadataTO saml2IdPMetadataTO);\n ","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2IdPMetadataBinder.java"},{"sha":"9ac7db60c0c376e84c12b8500b4982591a9b66eb","filename":"core/provisioning-java/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fpom.xml?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -96,6 +96,11 @@ under the License.\n       <artifactId>groovy-sql</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.nimbusds</groupId>\n+      <artifactId>nimbus-jose-jwt</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.syncope.core</groupId>\n       <artifactId>syncope-core-workflow-api</artifactId>"},{"sha":"7ff3397ba1e94ef9de9e4123da24eef1dc981942","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCJWKSDataBinderImpl.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCJWKSDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCJWKSDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCJWKSDataBinderImpl.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import com.nimbusds.jose.jwk.JWKSet;\n+import com.nimbusds.jose.jwk.KeyUse;\n+import com.nimbusds.jose.jwk.RSAKey;\n+import com.nimbusds.jose.jwk.gen.RSAKeyGenerator;\n+import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.provisioning.api.data.OIDCJWKSDataBinder;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class OIDCJWKSDataBinderImpl implements OIDCJWKSDataBinder {\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public OIDCJWKSTO get(final OIDCJWKS jwks) {\n+        return new OIDCJWKSTO.Builder().\n+            json(jwks.getJson()).\n+            key(jwks.getKey()).\n+            build();\n+    }\n+\n+    @Override\n+    public OIDCJWKS create() {\n+        try {\n+            OIDCJWKS jwks = entityFactory.newEntity(OIDCJWKS.class);\n+            RSAKey jwk = new RSAKeyGenerator(2048)\n+                .keyUse(KeyUse.SIGNATURE)\n+                .keyID(SecureRandomUtils.generateRandomUUID().toString())\n+                .generate();\n+            jwks.setJson(new JWKSet(jwk).toString());\n+            return jwks;\n+        } catch (final Exception e) {\n+            throw new RuntimeException(\"Unable to create OIDC JWKS\", e);\n+        }\n+    }\n+\n+    @Override\n+    public OIDCJWKS update(final OIDCJWKS oidcjwks, final OIDCJWKSTO jwksTO) {\n+        oidcjwks.setJson(jwksTO.getJson());\n+        return oidcjwks;\n+    }\n+}"},{"sha":"2d17168ba67c2074b880159075c5ac173aa4db3a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPMetadataDataBinderImpl.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPMetadataDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPMetadataDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPMetadataDataBinderImpl.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -23,10 +23,10 @@\n import org.springframework.stereotype.Component;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n-import org.apache.syncope.core.provisioning.api.data.SAML2IdPMetadataBinder;\n+import org.apache.syncope.core.provisioning.api.data.SAML2IdPMetadataDataBinder;\n \n @Component\n-public class SAML2IdPMetadataBinderImpl implements SAML2IdPMetadataBinder {\n+public class SAML2IdPMetadataDataBinderImpl implements SAML2IdPMetadataDataBinder {\n \n     @Autowired\n     private EntityFactory entityFactory;","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPMetadataBinderImpl.java"},{"sha":"cf081ff0bb8e01ffe5ca750c7aad9667b0c381b8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -113,9 +113,11 @@\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.apache.syncope.common.rest.api.service.OIDCJWKSConfService;\n import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreConfService;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n+import org.apache.syncope.common.rest.api.service.wa.OIDCJWKSService;\n import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n import org.apache.syncope.common.rest.api.service.SAML2SPMetadataConfService;\n import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n@@ -343,6 +345,10 @@ public abstract class AbstractITCase {\n \n     protected static AuthProfileService authProfileService;\n \n+    protected static OIDCJWKSService oidcJwksService;\n+\n+    protected static OIDCJWKSConfService oidcJwksConfService;\n+\n     @BeforeAll\n     public static void securitySetup() {\n         try (InputStream propStream = Encryptor.class.getResourceAsStream(\"/security.properties\")) {\n@@ -423,6 +429,8 @@ public static void restSetup() {\n         googleMfaAuthTokenService = adminClient.getService(GoogleMfaAuthTokenService.class);\n         googleMfaAuthAccountService = adminClient.getService(GoogleMfaAuthAccountService.class);\n         authProfileService = adminClient.getService(AuthProfileService.class);\n+        oidcJwksService = adminClient.getService(OIDCJWKSService.class);\n+        oidcJwksConfService = adminClient.getService(OIDCJWKSConfService.class);\n     }\n \n     @Autowired"},{"sha":"8c1a70da5fd8024225817e1b782acb46bcc94f6f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/OIDCJWKSConfITCase.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSConfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSConfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSConfITCase.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import com.nimbusds.jose.jwk.JWKSet;\n+import com.nimbusds.jose.jwk.KeyUse;\n+import com.nimbusds.jose.jwk.RSAKey;\n+import com.nimbusds.jose.jwk.gen.RSAKeyGenerator;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.function.Executable;\n+import org.springframework.http.HttpStatus;\n+\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.Response;\n+\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class OIDCJWKSConfITCase extends AbstractITCase {\n+\n+    private static OIDCJWKSTO getCurrentJwksTO() {\n+        try {\n+            return oidcJwksService.get();\n+        } catch (final SyncopeClientException e) {\n+            if (e.getType() == ClientExceptionType.NotFound) {\n+                Response response = oidcJwksService.set();\n+                assertEquals(HttpStatus.CREATED.value(), response.getStatus());\n+                return response.readEntity(new GenericType<OIDCJWKSTO>() {\n+                });\n+            }\n+        }\n+        throw new RuntimeException(\"Unable to locate current OIDC JWKS\");\n+    }\n+\n+    @Test\n+    public void verifyJwks() throws Exception {\n+        oidcJwksConfService.delete();\n+\n+        RSAKey jwk = new RSAKeyGenerator(2048)\n+            .keyUse(KeyUse.SIGNATURE)\n+            .keyID(UUID.randomUUID().toString())\n+            .generate();\n+        String json = new JWKSet(jwk).toString();\n+\n+        assertDoesNotThrow(new Executable() {\n+            @Override\n+            public void execute() {\n+                OIDCJWKSTO currentTO = getCurrentJwksTO();\n+                currentTO.setJson(json);\n+                oidcJwksConfService.update(currentTO);\n+            }\n+        });\n+        OIDCJWKSTO currentTO = getCurrentJwksTO();\n+        assertEquals(json, currentTO.getJson());\n+    }\n+\n+}"},{"sha":"931213f24f04bcbe71c8e2e40b7265f8007604c5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/OIDCJWKSITCase.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSITCase.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.http.HttpStatus;\n+\n+import javax.ws.rs.core.Response;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class OIDCJWKSITCase extends AbstractITCase {\n+\n+    @Test\n+    public void verifyJwks() {\n+        try {\n+            oidcJwksConfService.delete();\n+\n+            oidcJwksService.get();\n+            fail(\"Should not locate an OIDC JWKS\");\n+        } catch (final SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+        Response response = oidcJwksService.set();\n+        assertEquals(HttpStatus.CREATED.value(), response.getStatus());\n+        try {\n+            oidcJwksService.set();\n+            fail(\"Should not recreate an OIDC JWKS\");\n+        } catch (final SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.EntityExists, e.getType());\n+        }\n+    }\n+\n+}"},{"sha":"ae586426d57cabf94ebdb286a3d0718b241847e3","filename":"pom.xml","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -452,6 +452,8 @@ under the License.\n \n     <h2.version>1.4.200</h2.version>\n \n+    <nimbus.jose.version>8.19</nimbus.jose.version>\n+\n     <junit.version>5.6.2</junit.version>\n     <mockito.version>3.3.0</mockito.version>\n \n@@ -1605,6 +1607,16 @@ under the License.\n         <artifactId>cas-server-support-oidc</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-oidc-core-api</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-oidc-core</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-support-oauth-services</artifactId>\n@@ -1993,6 +2005,11 @@ under the License.\n         <artifactId>bcprov-jdk15on</artifactId>\n         <version>${bouncycastle.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>com.nimbusds</groupId>\n+        <artifactId>nimbus-jose-jwt</artifactId>\n+        <version>${nimbus.jose.version}</version>\n+      </dependency>\n \n       <!-- TEST -->\n       <dependency>"},{"sha":"419dfd35215ca84481c97ba527cdef728b4db85e","filename":"wa/starter/pom.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -178,6 +178,14 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-oidc</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-oidc-core-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-oidc-core</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-oauth-services</artifactId>"},{"sha":"0cce83012b5521a43679e4525213b28d88a3f7f4","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -20,6 +20,7 @@\n \n import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.oidc.jwks.OidcJsonWebKeystoreGeneratorService;\n import org.apereo.cas.otp.repository.credentials.OneTimeTokenCredentialRepository;\n import org.apereo.cas.otp.repository.token.OneTimeTokenRepository;\n import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n@@ -48,6 +49,7 @@\n import org.apache.syncope.wa.starter.mapping.ClientAppMapFor;\n import org.apache.syncope.wa.starter.mapping.ClientAppMapper;\n import org.apache.syncope.wa.starter.mapping.RegisteredServiceMapper;\n+import org.apache.syncope.wa.starter.oidc.SyncopeWAOIDCJWKSGeneratorService;\n import org.apache.syncope.wa.starter.pac4j.saml.SyncopeWASAML2ClientCustomizer;\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataGenerator;\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataLocator;\n@@ -188,6 +190,12 @@ public OneTimeTokenCredentialRepository googleAuthenticatorAccountRegistry(\n         return new SyncopeWAGoogleMfaAuthCredentialRepository(restClient, googleAuthenticatorInstance);\n     }\n \n+    @Bean\n+    @Autowired\n+    public OidcJsonWebKeystoreGeneratorService oidcJsonWebKeystoreGeneratorService(final WARestClient restClient) {\n+        return new SyncopeWAOIDCJWKSGeneratorService(restClient);\n+    }\n+\n     @Bean\n     public KeymasterStart keymasterStart() {\n         return new KeymasterStart(NetworkService.Type.WA);"},{"sha":"346f504dfe33e03c45b49da286934dc8e7f51581","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/oidc/SyncopeWAOIDCJWKSGeneratorService.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FSyncopeWAOIDCJWKSGeneratorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2038a4d278501b97f9fad35b5ca9ff751d8fb77/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FSyncopeWAOIDCJWKSGeneratorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FSyncopeWAOIDCJWKSGeneratorService.java?ref=e2038a4d278501b97f9fad35b5ca9ff751d8fb77","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.oidc;\n+\n+import org.apereo.cas.oidc.jwks.OidcJsonWebKeystoreGeneratorService;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.wa.OIDCJWKSService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.springframework.core.io.ByteArrayResource;\n+import org.springframework.core.io.Resource;\n+\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.Response;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+public class SyncopeWAOIDCJWKSGeneratorService implements OidcJsonWebKeystoreGeneratorService {\n+    private final WARestClient waRestClient;\n+\n+    public SyncopeWAOIDCJWKSGeneratorService(final WARestClient restClient) {\n+        this.waRestClient = restClient;\n+    }\n+\n+    @Override\n+    public Resource generate() {\n+        if (!WARestClient.isReady()) {\n+            throw new RuntimeException(\"Syncope core is not yet ready\");\n+        }\n+\n+        OIDCJWKSService service = waRestClient.getSyncopeClient().\n+            getService(OIDCJWKSService.class);\n+        try {\n+            Response response = service.set();\n+            OIDCJWKSTO jwksTO = response.readEntity(new GenericType<OIDCJWKSTO>() {\n+            });\n+            return new ByteArrayResource(jwksTO.getJson().getBytes(StandardCharsets.UTF_8), \"OIDC JWKS\");\n+        } catch (final SyncopeClientException e) {\n+            if (e.getType() == ClientExceptionType.EntityExists) {\n+                OIDCJWKSTO jwksTO = service.get();\n+                return new ByteArrayResource(jwksTO.getJson().getBytes(StandardCharsets.UTF_8), \"OIDC JWKS\");\n+            }\n+        }\n+        throw new RuntimeException(\"Unable to determine OIDC JWKS resource\");\n+    }\n+}"}]}