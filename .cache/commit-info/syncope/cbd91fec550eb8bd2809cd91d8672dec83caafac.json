{"sha":"cbd91fec550eb8bd2809cd91d8672dec83caafac","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNiZDkxZmVjNTUwZWI4YmQyODA5Y2Q5MWQ4NjcyZGVjODNjYWFmYWM=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-02-27T12:38:51Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-02-27T12:38:51Z"},"message":"SYNCOPE-278 - fix for a mysql db export\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1450761 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6d5d2b21e2bd17c965a0b5dc383c2a7b9515a800","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6d5d2b21e2bd17c965a0b5dc383c2a7b9515a800"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cbd91fec550eb8bd2809cd91d8672dec83caafac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cbd91fec550eb8bd2809cd91d8672dec83caafac","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cbd91fec550eb8bd2809cd91d8672dec83caafac","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cbd91fec550eb8bd2809cd91d8672dec83caafac/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"0b3cd3fff7679f9a88bac6bbeca6e622ff60f043","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0b3cd3fff7679f9a88bac6bbeca6e622ff60f043","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0b3cd3fff7679f9a88bac6bbeca6e622ff60f043"}],"stats":{"total":49,"additions":33,"deletions":16},"files":[{"sha":"62a81e65096f8bc9e7e7ae98e40667e97ee6dfe0","filename":"core/src/main/java/org/apache/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbd91fec550eb8bd2809cd91d8672dec83caafac/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbd91fec550eb8bd2809cd91d8672dec83caafac/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=cbd91fec550eb8bd2809cd91d8672dec83caafac","patch":"@@ -214,7 +214,7 @@ public void unregisterJob(final Report report) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Transactional(readOnly = true)\n+    @Transactional\n     public void load() {\n         // 1. jobs for SchedTasks\n         Set<SchedTask> tasks = new HashSet(taskDAO.findAll(SchedTask.class));"},{"sha":"3cf84b13b2ff58920677af0df4376a4f58a5cc07","filename":"core/src/main/java/org/apache/syncope/core/util/ImportExport.java","status":"modified","additions":29,"deletions":12,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbd91fec550eb8bd2809cd91d8672dec83caafac/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FImportExport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbd91fec550eb8bd2809cd91d8672dec83caafac/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FImportExport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FImportExport.java?ref=cbd91fec550eb8bd2809cd91d8672dec83caafac","patch":"@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.lang.String;\n import java.sql.Blob;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n@@ -43,6 +44,7 @@\n import java.util.Properties;\n import java.util.Set;\n import java.util.TreeMap;\n+import java.util.TreeSet;\n import javax.persistence.EntityManager;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n@@ -93,15 +95,15 @@ protected SimpleDateFormat initialValue() {\n     @Autowired\n     private DataSource dataSource;\n \n-    private final Set<String> tablePrefixesToBeExcluded = new HashSet<String>(\n-            Arrays.asList(new String[]{\"QRTZ_\", \"LOGGING\", \"REPORTEXEC\", \"TASKEXEC\",\n+    private final static Set<String> TABLE_PREFIXES_TO_BE_EXCLUDED =\n+            new HashSet<String>(Arrays.asList(new String[]{\"QRTZ_\", \"LOGGING\", \"REPORTEXEC\", \"TASKEXEC\",\n                 \"SYNCOPEUSER\", \"UATTR\", \"UATTRVALUE\", \"UATTRUNIQUEVALUE\", \"UDERATTR\", \"UVIRATTR\",\n-                \"MEMBERSHIP\", \"MATTR\", \"MATTRVALUE\", \"MATTRUNIQUEVALUE\", \"MDERATTR\", \"MVIRATTR\"}));\n+                \"MEMBERSHIP\", \"MATTR\", \"MATTRVALUE\", \"MATTRUNIQUEVALUE\", \"MDERATTR\", \"MVIRATTR\", \"USERREQUEST\"}));\n \n-    private final Map<String, String> tablesTobeFiltered =\n+    private final static Map<String, String> TABLES_TO_BE_FILTERED =\n             Collections.singletonMap(\"TASK\", \"DTYPE <> 'PropagationTask'\");\n \n-    private final Map<String, Set<String>> columnsToBeNullified =\n+    private final static Map<String, Set<String>> COLUMNS_TO_BE_NULLIFIED =\n             Collections.singletonMap(\"SYNCOPEROLE\", Collections.singleton(\"USEROWNER_ID\"));\n \n     private String[] wfInitSQLStatements;\n@@ -305,6 +307,8 @@ public void startElement(final String uri, final String localName, final String\n     private void doExportTable(final TransformerHandler handler, final Connection conn, final String tableName,\n             final String whereClause) throws SQLException, SAXException {\n \n+        LOG.debug(\"Export table {}\", tableName);\n+\n         AttributesImpl attrs = new AttributesImpl();\n \n         PreparedStatement stmt = null;\n@@ -352,15 +356,17 @@ private void doExportTable(final TransformerHandler handler, final Connection co\n \n                     // Retrieve value taking care of binary values.\n                     String value = getValues(rs, columnName, columnType);\n-                    if (value != null && (!columnsToBeNullified.containsKey(tableName)\n-                            || !columnsToBeNullified.get(tableName).contains(columnName))) {\n+                    if (value != null && (!COLUMNS_TO_BE_NULLIFIED.containsKey(tableName)\n+                            || !COLUMNS_TO_BE_NULLIFIED.get(tableName).contains(columnName))) {\n \n                         attrs.addAttribute(\"\", \"\", columnName, \"CDATA\", value);\n                     }\n                 }\n \n                 handler.startElement(\"\", \"\", tableName, attrs);\n                 handler.endElement(\"\", \"\", tableName);\n+\n+                LOG.debug(\"Add record {}\", attrs);\n             }\n         } finally {\n             if (rs != null) {\n@@ -448,16 +454,20 @@ private List<String> sortByForeignKeys(final Connection conn, final Set<String>\n         final List<String> sortedTableNames = new ArrayList<String>(tableNames.size());\n         MultiParentNodeOp.traverseTree(roots, sortedTableNames);\n \n-        Collections.reverse(sortedTableNames);\n         // remove from sortedTableNames any table possibly added during lookup \n         // but matching some item in this.tablePrefixesToBeExcluded\n         sortedTableNames.retainAll(tableNames);\n+\n+        LOG.debug(\"Tables after retainAll {}\", sortedTableNames);\n+\n+        Collections.reverse(sortedTableNames);\n+\n         return sortedTableNames;\n     }\n \n     private boolean isTableAllowed(final String tableName) {\n         boolean allowed = true;\n-        for (String prefix : tablePrefixesToBeExcluded) {\n+        for (String prefix : TABLE_PREFIXES_TO_BE_EXCLUDED) {\n             if (tableName.toUpperCase().startsWith(prefix)) {\n                 allowed = false;\n             }\n@@ -469,7 +479,7 @@ public void export(final OutputStream os, final String wfTablePrefix)\n             throws SAXException, TransformerConfigurationException {\n \n         if (StringUtils.isNotBlank(wfTablePrefix)) {\n-            tablePrefixesToBeExcluded.add(wfTablePrefix);\n+            TABLE_PREFIXES_TO_BE_EXCLUDED.add(wfTablePrefix);\n         }\n \n         StreamResult streamResult = new StreamResult(os);\n@@ -493,18 +503,25 @@ public void export(final OutputStream os, final String wfTablePrefix)\n \n             rs = meta.getTables(null, schema, null, new String[]{\"TABLE\"});\n \n-            final Set<String> tableNames = new HashSet<String>();\n+            final Set<String> tableNames = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);\n \n             while (rs.next()) {\n                 String tableName = rs.getString(\"TABLE_NAME\");\n+                LOG.debug(\"Found table {}\", tableName);\n                 if (isTableAllowed(tableName)) {\n                     tableNames.add(tableName);\n                 }\n             }\n \n+            LOG.debug(\"Tables to be exported {}\", tableNames);\n+\n             // then sort tables based on foreign keys and dump\n             for (String tableName : sortByForeignKeys(conn, tableNames, schema)) {\n-                doExportTable(handler, conn, tableName, tablesTobeFiltered.get(tableName.toUpperCase()));\n+                try {\n+                    doExportTable(handler, conn, tableName, TABLES_TO_BE_FILTERED.get(tableName.toUpperCase()));\n+                } catch (Exception e) {\n+                    LOG.error(\"Failure exporting table {}\", tableName, e);\n+                }\n             }\n         } catch (SQLException e) {\n             LOG.error(\"While exporting database content\", e);"},{"sha":"1ada20d85d8d04aa71ab71d49e75ed24d4496f4c","filename":"core/src/main/java/org/apache/syncope/core/util/multiparent/MultiParentNodeOp.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbd91fec550eb8bd2809cd91d8672dec83caafac/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2Fmultiparent%2FMultiParentNodeOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbd91fec550eb8bd2809cd91d8672dec83caafac/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2Fmultiparent%2FMultiParentNodeOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2Fmultiparent%2FMultiParentNodeOp.java?ref=cbd91fec550eb8bd2809cd91d8672dec83caafac","patch":"@@ -18,21 +18,21 @@\n  */\n package org.apache.syncope.core.util.multiparent;\n \n-import java.util.List;\n+import java.util.Collection;\n import java.util.Set;\n \n public class MultiParentNodeOp {\n \n     private MultiParentNodeOp() {\n     }\n \n-    public static <T> void traverseTree(final Set<MultiParentNode<T>> roots, final List<T> objects) {\n+    public static <T> void traverseTree(final Set<MultiParentNode<T>> roots, final Collection<T> objects) {\n         for (MultiParentNode<T> root : roots) {\n             traverseTree(root, objects);\n         }\n     }\n \n-    public static <T> void traverseTree(final MultiParentNode<T> root, final List<T> objects) {\n+    public static <T> void traverseTree(final MultiParentNode<T> root, final Collection<T> objects) {\n \n         root.setExploited(true);\n "}]}