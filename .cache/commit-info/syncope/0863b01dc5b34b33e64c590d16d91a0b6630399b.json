{"sha":"0863b01dc5b34b33e64c590d16d91a0b6630399b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA4NjNiMDFkYzViMzRiMzNlNjRjNTkwZDE2ZDkxYTBiNjYzMDM5OWI=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-30T09:55:40Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-30T09:55:40Z"},"message":"[SYNCOPE-231][SYNCOPE-289]\n* Fixing UserService\n* Removing RestTemplate dependencies from IT tests\n* Code cleanup\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1440323 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"94777c91652a105dbc86d36e2c713aa00de8ca97","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/94777c91652a105dbc86d36e2c713aa00de8ca97"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0863b01dc5b34b33e64c590d16d91a0b6630399b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0863b01dc5b34b33e64c590d16d91a0b6630399b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0863b01dc5b34b33e64c590d16d91a0b6630399b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0863b01dc5b34b33e64c590d16d91a0b6630399b/comments","author":null,"committer":null,"parents":[{"sha":"bb3905dfdaeeb97282a876e3d70d97edb18c9aed","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bb3905dfdaeeb97282a876e3d70d97edb18c9aed","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bb3905dfdaeeb97282a876e3d70d97edb18c9aed"}],"stats":{"total":341,"additions":192,"deletions":149},"files":[{"sha":"14085ce24d07e60f6a6261a4e4ef63ea772a038f","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/RoleServiceProxy.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -54,7 +54,10 @@ public Response create(final RoleTO roleTO) {\n         RoleTO role = getRestTemplate().postForObject(baseUrl + \"role/create\", roleTO, RoleTO.class);\r\n \r\n         URI location = URI.create(baseUrl + \"role/read/\" + role.getId() + \".json\");\r\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, role.getId()).entity(role).build();\r\n+        return Response.created(location)\r\n+                .header(SyncopeConstants.REST_HEADER_ID, role.getId())\r\n+                .entity(role)\r\n+                .build();\r\n     }\r\n \r\n     @Override\r"},{"sha":"7b21b93db9cfe5812068b30f51de7fe6b3b4d60b","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserRequestServiceProxy.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -22,6 +22,8 @@\n import java.util.Arrays;\r\n import java.util.List;\r\n import javax.ws.rs.core.Response;\r\n+\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.UserRequestService;\r\n import org.apache.syncope.common.to.UserRequestTO;\r\n import org.springframework.web.client.RestTemplate;\r\n@@ -39,7 +41,7 @@ public Response getOptions() {\n \r\n     @Override\r\n     public boolean isCreateAllowed() {\r\n-        return getRestTemplate().getForObject(baseUrl + \"user/request/create/allowed\", Boolean.class);\r\n+        return getRestTemplate().getForObject(baseUrl + \"user/request/create/allowed.json\", Boolean.class);\r\n     }\r\n \r\n     @Override\r\n@@ -62,24 +64,24 @@ public Response create(final UserRequestTO userRequestTO) {\n                         UserRequestTO.class);\r\n         }\r\n \r\n-        URI location = URI.create(baseUrl + \"user/request/read/\" + created.getId());\r\n-        return Response.created(location).entity(created.getId()).build();\r\n+        URI location = URI.create(baseUrl + \"user/request/read/\" + created.getId() + \".json\");\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, created.getId()).build();\r\n     }\r\n \r\n     @Override\r\n     public List<UserRequestTO> list() {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/request/list\", UserRequestTO[].class));\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/request/list.json\", UserRequestTO[].class));\r\n     }\r\n \r\n     @Override\r\n     public UserRequestTO read(final Long requestId) {\r\n         return getRestTemplate().getForObject(\r\n-                baseUrl + \"user/request/read/{requestId}\", UserRequestTO.class, requestId);\r\n+                baseUrl + \"user/request/read/{requestId}.json\", UserRequestTO.class, requestId);\r\n     }\r\n \r\n     @Override\r\n     public void delete(final Long requestId) {\r\n         getRestTemplate().getForObject(\r\n-                baseUrl + \"user/request/deleteRequest/{requestId}\", UserRequestTO.class, requestId);\r\n+                baseUrl + \"user/request/deleteRequest/{requestId}.json\", UserRequestTO.class, requestId);\r\n     }\r\n }\r"},{"sha":"68898affa4fc78a4d52e94d3e100780f0ec2d86f","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserServiceProxy.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -24,6 +24,7 @@\n \n import javax.ws.rs.core.Response;\n \n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.UserService;\n@@ -75,8 +76,11 @@ public UserTO read(final String username) {\n     @Override\n     public Response create(final UserTO userTO) {\n         UserTO created = getRestTemplate().postForObject(baseUrl + \"user/create\", userTO, UserTO.class);\n-        URI location = URI.create(baseUrl + \"user/\" + created.getId());\n-        return Response.created(location).entity(created).build();\n+        URI location = URI.create(baseUrl + \"user/read/\" + created.getId() + \".json\");\n+        return Response.created(location)\n+                .header(SyncopeConstants.REST_HEADER_ID, created.getId())\n+                .entity(created)\n+                .build();\n     }\n \n     @Override"},{"sha":"6a65e3668b2402e1601cf0ba376498520f9b5210","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRequestRestClient.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -22,6 +22,7 @@\n \n import javax.ws.rs.core.Response;\n \n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.services.UserRequestService;\n import org.apache.syncope.common.to.UserRequestTO;\n@@ -42,27 +43,24 @@ public void delete(final Long requestId) {\n         getService(UserRequestService.class).delete(requestId);\n     }\n \n-    public UserRequestTO requestCreate(final UserTO userTO) {\n+    public void requestCreate(final UserTO userTO) {\n         UserRequestTO userRequestTO = new UserRequestTO();\n         userRequestTO.setType(UserRequestType.CREATE);\n         userRequestTO.setUserTO(userTO);\n-        Response response = getService(UserRequestService.class).create(userRequestTO);\n-        return getService(UserRequestService.class).read((Long) response.getEntity());\n+        getService(UserRequestService.class).create(userRequestTO);\n     }\n \n-    public UserRequestTO requestUpdate(final UserMod userMod) {\n+    public void requestUpdate(final UserMod userMod) {\n         UserRequestTO userRequestTO = new UserRequestTO();\n         userRequestTO.setType(UserRequestType.UPDATE);\n         userRequestTO.setUserMod(userMod);\n-        Response response = getService(UserRequestService.class).create(userRequestTO);\n-        return getService(UserRequestService.class).read((Long) response.getEntity());\n+        getService(UserRequestService.class).create(userRequestTO);\n     }\n \n-    public UserRequestTO requestDelete(final Long userId) {\n+    public void requestDelete(final Long userId) {\n         UserRequestTO userRequestTO = new UserRequestTO();\n         userRequestTO.setType(UserRequestType.DELETE);\n         userRequestTO.setUserId(userId);\n-        Response response = getService(UserRequestService.class).create(userRequestTO);\n-        return getService(UserRequestService.class).read((Long) response.getEntity());\n+        getService(UserRequestService.class).create(userRequestTO);\n     }\n }"},{"sha":"8dab2385c111fc48c19aff612d739a0b4af9299f","filename":"core/src/main/java/org/apache/syncope/core/services/LoggerServiceImpl.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -39,6 +39,29 @@ public class LoggerServiceImpl implements LoggerService {\n     @Autowired\r\n     private LoggerController loggerController;\r\n \r\n+    @Override\r\n+    public void delete(final LoggerType type, final String name) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                loggerController.deleteLog(name);\r\n+                break;\r\n+\r\n+            case AUDIT:\r\n+                try {\r\n+                    loggerController.disableAudit(AuditLoggerName.fromLoggerName(name));\r\n+                } catch (IllegalArgumentException e) {\r\n+                    throw new BadRequestException(e);\r\n+                } catch (ParseException e) {\r\n+                    throw new BadRequestException(e);\r\n+                }\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n+\r\n+    }\r\n+\r\n     @Override\r\n     public List<LoggerTO> list(final LoggerType type) {\r\n         switch (type) {\r\n@@ -87,27 +110,4 @@ public void update(final LoggerType type, final String name, final LoggerTO logg\n         }\r\n     }\r\n \r\n-    @Override\r\n-    public void delete(final LoggerType type, final String name) {\r\n-        switch (type) {\r\n-            case NORMAL:\r\n-                loggerController.deleteLog(name);\r\n-                break;\r\n-\r\n-            case AUDIT:\r\n-                try {\r\n-                    loggerController.disableAudit(AuditLoggerName.fromLoggerName(name));\r\n-                } catch (IllegalArgumentException e) {\r\n-                    throw new BadRequestException(e);\r\n-                } catch (ParseException e) {\r\n-                    throw new BadRequestException(e);\r\n-                }\r\n-                break;\r\n-\r\n-            default:\r\n-                throw new BadRequestException();\r\n-        }\r\n-\r\n-    }\r\n-\r\n }\r"},{"sha":"de6db37bb75a7958d26b8606fb085499e0c8c396","filename":"core/src/main/java/org/apache/syncope/core/services/NotificationServiceImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -24,6 +24,7 @@\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.UriInfo;\n \n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.services.NotificationService;\n import org.apache.syncope.common.to.NotificationTO;\n import org.apache.syncope.core.rest.controller.NotificationController;\n@@ -42,7 +43,9 @@ public class NotificationServiceImpl implements NotificationService, ContextAwar\n     public Response create(final NotificationTO notificationTO) {\n         NotificationTO createdNotificationTO = notificationController.createInternal(notificationTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + createdNotificationTO.getId()).build();\n-        return Response.created(location).build();\n+        return Response.created(location)\n+                .header(SyncopeConstants.REST_HEADER_ID, createdNotificationTO.getId())\n+                .build();\n     }\n \n     @Override"},{"sha":"6ab5e997eb05883208e8fdf802fe9c0534591ed0","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -64,7 +64,9 @@ public <T extends PolicyTO> Response create(final PolicyType type, final T polic\n                 throw new BadRequestException();\r\n         }\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(policy.getId() + \"\").build();\r\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, policy.getId()).build();\r\n+        return Response.created(location)\r\n+                .header(SyncopeConstants.REST_HEADER_ID, policy.getId())\r\n+                .build();\r\n     }\r\n \r\n     @Override\r"},{"sha":"d1f406e01d480b4de7c662d18773ad52dcd1170b","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -28,6 +28,7 @@\n import javax.ws.rs.core.StreamingOutput;\n import javax.ws.rs.core.UriInfo;\n \n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.services.ReportService;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n@@ -53,7 +54,9 @@ public class ReportServiceImpl implements ReportService, ContextAware {\n     public Response create(final ReportTO reportTO) {\n         ReportTO createdReportTO = reportController.createInternal(reportTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + createdReportTO.getId()).build();\n-        return Response.created(location).build();\n+        return Response.created(location)\n+                .header(SyncopeConstants.REST_HEADER_ID, createdReportTO.getId())\n+                .build();\n     }\n \n     @Override"},{"sha":"4325d5837961898f322cdc35637cb340a565b28b","filename":"core/src/main/java/org/apache/syncope/core/services/ResourceServiceImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -48,7 +48,9 @@ public class ResourceServiceImpl implements ResourceService, ContextAware {\n     public Response create(final ResourceTO resourceTO) {\r\n         ResourceTO resource = resourceController.create(new DummyHTTPServletResponse(), resourceTO);\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(resource.getName()).build();\r\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, resource.getName()).build();\r\n+        return Response.created(location)\r\n+                .header(SyncopeConstants.REST_HEADER_ID, resource.getName())\r\n+                .build();\r\n     }\r\n \r\n     @Override\r"},{"sha":"40d402201a0e5e88719bca819162d94954f1f302","filename":"core/src/main/java/org/apache/syncope/core/services/RoleServiceImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -56,7 +56,9 @@ public int count() {\n     public Response create(final RoleTO roleTO) {\r\n         RoleTO created = roleController.create(new DummyHTTPServletResponse(), roleTO);\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getId() + \"\").build();\r\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, created.getId()).entity(created)\r\n+        return Response.created(location)\r\n+                .header(SyncopeConstants.REST_HEADER_ID, created.getId())\r\n+                .entity(created)\r\n                 .build();\r\n     }\r\n \r"},{"sha":"a72289e58a3ee0de64e39d44cb69425b1f371414","filename":"core/src/main/java/org/apache/syncope/core/services/SchemaServiceImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -76,7 +76,9 @@ public <T extends AbstractSchemaTO> Response create(final AttributableType kind,\n                 throw new BadRequestException();\r\n         }\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(response.getName()).build();\r\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, response.getName()).build();\r\n+        return Response.created(location)\r\n+                .header(SyncopeConstants.REST_HEADER_ID, response.getName())\r\n+                .build();\r\n     }\r\n \r\n     @Override\r"},{"sha":"ae7d242b23e3390d8ad99bea282072e44dcebcd9","filename":"core/src/main/java/org/apache/syncope/core/services/UserRequestServiceImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -24,6 +24,7 @@\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.UriInfo;\n \n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.services.UserRequestService;\n import org.apache.syncope.common.to.UserRequestTO;\n import org.apache.syncope.common.types.UserRequestType;\n@@ -61,7 +62,9 @@ public Response create(final UserRequestTO userRequestTO) {\n             userRequestController.delete(userRequestTO.getUserId());\n         }\n         URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + outUserRequestTO.getId()).build();\n-        return Response.created(location).entity(outUserRequestTO.getId()).build();\n+        return Response.created(location)\n+                .header(SyncopeConstants.REST_HEADER_ID, outUserRequestTO.getId())\n+                .build();\n     }\n \n     @Override"},{"sha":"db55932ea31b1bc322d9c3b3f87ac132baae5c19","filename":"core/src/main/java/org/apache/syncope/core/services/UserServiceImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -79,7 +79,9 @@ public int count() {\n     public Response create(final UserTO userTO) {\n         UserTO created = userController.createInternal(userTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getId() + \"\").build();\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, created.getId()).entity(created)\n+        return Response.created(location)\n+                .header(SyncopeConstants.REST_HEADER_ID, created.getId())\n+                .entity(created)\n                 .build();\n     }\n "},{"sha":"3e21046279e1a05ac4870f9209f91611fe16f9f7","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":32,"deletions":10,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.client.services.proxy.ResourceServiceProxy;\n import org.apache.syncope.client.services.proxy.RoleServiceProxy;\n import org.apache.syncope.client.services.proxy.SchemaServiceProxy;\n+import org.apache.syncope.client.services.proxy.SpringServiceProxy;\n import org.apache.syncope.client.services.proxy.TaskServiceProxy;\n import org.apache.syncope.client.services.proxy.UserRequestServiceProxy;\n import org.apache.syncope.client.services.proxy.UserServiceProxy;\n@@ -147,29 +148,29 @@ public abstract class AbstractTest {\n     protected UserRequestService userRequestService;\n \n     protected PolicyService policyService;\n-    \n+\n     @Autowired\n     protected RestClientExceptionMapper clientExceptionMapper;\n \n     @Before\n     public void setup() throws Exception {\n-        if (!enabledCXF) {\n-            resetRestTemplate();\n-        } else {\n+        if (enabledCXF) {\n             setupCXFServices();\n+        } else {\n+            resetRestTemplate();\n         }\n     }\n \n     // BEGIN Spring MVC Initialization\n-    protected void setupRestTemplate(final String uid, final String pwd) {\n+    private void setupRestTemplate(final String uid, final String pwd) {\n         PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate\n                 .getRequestFactory());\n \n         ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n                 requestFactory.getAuthScope(), new UsernamePasswordCredentials(uid, pwd));\n     }\n \n-    protected RestTemplate anonymousRestTemplate() {\n+    private RestTemplate getAnonymousRestTemplate() {\n         RestTemplate template = new RestTemplate(httpClientFactory);\n         List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>();\n         converters.add(mappingJacksonHttpMessageConverter);\n@@ -254,6 +255,26 @@ public void setupContentType(final Client restClient) {\n \n     // END CXF Initialization\n \n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T setupCredentials(final T proxy, final String username, final String password) {\n+        if (proxy instanceof SpringServiceProxy) {\n+            SpringServiceProxy service = (SpringServiceProxy) proxy;\n+            if (username == null && password == null) {\n+                service.setRestTemplate(getAnonymousRestTemplate());\n+            } else {\n+                setupRestTemplate(username, password);\n+            }\n+            return proxy;\n+        } else {\n+            restClientFactory.setUsername(username);\n+            restClientFactory.setPassword(password);\n+            restClientFactory.setServiceClass(proxy.getClass());\n+            T serviceProxy = (T) restClientFactory.create(proxy.getClass());\n+            setupContentType(WebClient.client(serviceProxy));\n+            return serviceProxy;\n+        }\n+    }\n+\n     public <T> T getObject(final Response response, final Class<T> type, final Object serviceProxy) {\n         assertNotNull(response);\n         assertNotNull(response.getLocation());\n@@ -301,13 +322,13 @@ protected static AttributeMod attributeMod(final String schema, final String val\n         attr.addValueToBeAdded(valueToBeAdded);\n         return attr;\n     }\n-    \n-    protected UserTO createUser(UserTO userTO) {\n+\n+    protected UserTO createUser(final UserTO userTO) {\n         Response response = userService.create(userTO);\n         return response.readEntity(UserTO.class);\n     }\n \n-    protected void assertCreated(Response response) {\n+    protected void assertCreated(final Response response) {\n         if (response.getStatus() != HttpStatus.SC_CREATED) {\n             StringBuilder builder = new StringBuilder();\n             MultivaluedMap<String, Object> headers = response.getHeaders();\n@@ -316,7 +337,8 @@ protected void assertCreated(Response response) {\n                 builder.append(key + \":\" + headers.getFirst(key) + \",\");\n             }\n             builder.append(\")\");\n-            throw new RuntimeException(\"Error on create. Status is : \" + response.getStatus() + \" with headers \" + builder.toString());\n+            throw new RuntimeException(\"Error on create. Status is : \" + response.getStatus() + \" with headers \"\n+                    + builder.toString());\n         }\n     }\n }"},{"sha":"47e22d4d6bc80d7a6d14c3e7a923ba9ca248a2be","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.search.AttributeCond;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.SchemaService;\n+import org.apache.syncope.common.services.UserService;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.to.EntitlementTO;\n import org.apache.syncope.common.to.MembershipTO;\n@@ -52,7 +53,7 @@\n \n @FixMethodOrder(MethodSorters.JVM)\n public class AuthenticationTestITCase extends AbstractTest {\n-    \n+\n     @Test\n     public void testAdminEntitlements() {\n         // 1. as anonymous, read all available entitlements\n@@ -109,15 +110,15 @@ public void testUserSchemaAuthorization() {\n         assertNotNull(schemaTO);\n \n         // 4. read the schema created above (as user) - success\n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        SchemaService schemaService2 = setupCredentials(schemaService, userTO.getUsername(), \"password123\");\n \n-        schemaTO = schemaService.read(AttributableType.USER, SchemaService.SchemaType.NORMAL, \"authTestSchema\");\n+        schemaTO = schemaService2.read(AttributableType.USER, SchemaService.SchemaType.NORMAL, \"authTestSchema\");\n         assertNotNull(schemaTO);\n \n         // 5. update the schema create above (as user) - failure\n         HttpClientErrorException exception = null;\n         try {\n-            schemaService.update(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n+            schemaService2.update(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n         } catch (HttpClientErrorException e) {\n             exception = e;\n         }\n@@ -149,20 +150,19 @@ public void testUserRead() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        UserService userService2 = setupCredentials(userService, userTO.getUsername(), \"password123\");\n \n-        UserTO readUserTO = userService.read(1L);\n+        UserTO readUserTO = userService2.read(1L);\n         assertNotNull(readUserTO);\n \n-        super.setupRestTemplate(\"user2\", \"password\");\n+        UserService userService3 = setupCredentials(userService, \"user2\", ADMIN_PWD);\n \n         SyncopeClientException exception = null;\n         try {\n-            userService.read(1L);\n+            userService3.read(1L);\n             fail();\n         } catch (SyncopeClientCompositeErrorException e) {\n-            exception = e\n-                    .getException(SyncopeClientExceptionType.UnauthorizedRole);\n+            exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n         }\n         assertNotNull(exception);\n \n@@ -185,14 +185,13 @@ public void testUserSearch() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        UserService userService2 = setupCredentials(userService, userTO.getUsername(), \"password123\");\n \n-        AttributeCond isNullCond = new AttributeCond(\n-                AttributeCond.Type.ISNOTNULL);\n+        AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n         isNullCond.setSchema(\"loginDate\");\n         NodeCond searchCondition = NodeCond.getLeafCond(isNullCond);\n \n-        List<UserTO> matchedUsers = userService.search(searchCondition);\n+        List<UserTO> matchedUsers = userService2.search(searchCondition);\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());\n         Set<Long> userIds = new HashSet<Long>(matchedUsers.size());\n@@ -201,9 +200,9 @@ public void testUserSearch() {\n         }\n         assertTrue(userIds.contains(1L));\n \n-        super.setupRestTemplate(\"user2\", \"password\");\n+        UserService userService3 = setupCredentials(userService, \"user2\", \"password\");\n \n-        matchedUsers = userService.search(searchCondition);\n+        matchedUsers = userService3.search(searchCondition);\n \n         assertNotNull(matchedUsers);\n \n@@ -233,22 +232,22 @@ public void checkFailedLogins() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        UserService userService2 = setupCredentials(userService, userTO.getUsername(), \"password123\");\n \n-        UserTO readUserTO = userService.read(userTO.getId());\n+        UserTO readUserTO = userService2.read(userTO.getId());\n \n         assertNotNull(readUserTO);\n         assertNotNull(readUserTO.getFailedLogins());\n         assertEquals(Integer.valueOf(0), readUserTO.getFailedLogins());\n \n         // authentications failed ...\n \n-        super.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n+        UserService userService3 = setupCredentials(userService, userTO.getUsername(), \"wrongpwd1\");\n \n         Throwable t = null;\n \n         try {\n-            userService.read(userTO.getId());\n+            userService3.read(userTO.getId());\n             assertNotNull(readUserTO);\n         } catch (Exception e) {\n             t = e;\n@@ -258,7 +257,7 @@ public void checkFailedLogins() {\n         t = null;\n \n         try {\n-            userService.read(userTO.getId());\n+            userService3.read(userTO.getId());\n             assertNotNull(readUserTO);\n         } catch (Exception e) {\n             t = e;\n@@ -272,9 +271,9 @@ public void checkFailedLogins() {\n         assertNotNull(readUserTO.getFailedLogins());\n         assertEquals(Integer.valueOf(2), readUserTO.getFailedLogins());\n \n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        UserService userService4 = setupCredentials(userService, userTO.getUsername(), \"password123\");\n \n-        readUserTO = userService.read(userTO.getId());\n+        readUserTO = userService4.read(userTO.getId());\n         assertNotNull(readUserTO);\n         assertNotNull(readUserTO.getFailedLogins());\n         assertEquals(Integer.valueOf(0), readUserTO.getFailedLogins());\n@@ -295,22 +294,22 @@ public void checkUserSuspension() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        UserService userService2 = setupCredentials(userService, userTO.getUsername(), \"password123\");\n \n-        userTO = userService.read(userTO.getId());\n+        userTO = userService2.read(userTO.getId());\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getFailedLogins());\n         assertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n \n         // authentications failed ...\n \n-        super.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n+        UserService userService3 = setupCredentials(userService, userTO.getUsername(), \"wrongpwd1\");\n \n         Throwable t = null;\n \n         try {\n-            userService.read(userTO.getId());\n+            userService3.read(userTO.getId());\n             fail();\n         } catch (Exception e) {\n             t = e;\n@@ -320,7 +319,7 @@ public void checkUserSuspension() {\n         t = null;\n \n         try {\n-            userService.read(userTO.getId());\n+            userService3.read(userTO.getId());\n         } catch (Exception e) {\n             t = e;\n         }\n@@ -329,7 +328,7 @@ public void checkUserSuspension() {\n         t = null;\n \n         try {\n-            userService.read(userTO.getId());\n+            userService3.read(userTO.getId());\n         } catch (Exception e) {\n             t = e;\n         }\n@@ -347,10 +346,11 @@ public void checkUserSuspension() {\n         assertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n \n         // last authentication before suspension\n-        super.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n+        // TODO remove after CXF migration is complete\n+        userService3 = setupCredentials(userService, userTO.getUsername(), \"wrongpwd1\");\n \n         try {\n-            userService.read(userTO.getId());\n+            userService3.read(userTO.getId());\n         } catch (Exception e) {\n             t = e;\n         }\n@@ -369,11 +369,11 @@ public void checkUserSuspension() {\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         // check for authentication\n-\n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        // TODO remove after CXF migration is complete\n+        userService2 = setupCredentials(userService, userTO.getUsername(), \"password123\");\n \n         try {\n-            userService.read(userTO.getId());\n+            userService2.read(userTO.getId());\n             assertNotNull(userTO);\n         } catch (Exception e) {\n             t = e;\n@@ -390,9 +390,10 @@ public void checkUserSuspension() {\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        // TODO remove after CXF migration is complete\n+        userService2 = setupCredentials(userService, userTO.getUsername(), \"password123\");\n \n-        userTO = userService.read(userTO.getId());\n+        userTO = userService2.read(userTO.getId());\n \n         assertNotNull(userTO);\n         assertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n@@ -430,18 +431,17 @@ public void issueSYNCOPE48() {\n         role1Admin = createUser(role1Admin);\n         assertNotNull(role1Admin);\n \n-        super.setupRestTemplate(role1Admin.getUsername(), \"password\");\n+        UserService userService2 = setupCredentials(userService, role1Admin.getUsername(), \"password\");\n \n         // User with role 1, created by user with child role created above\n         UserTO role1User = UserTestITCase.getUniqueSampleTO(\"syncope48user@apache.org\");\n         membershipTO = new MembershipTO();\n         membershipTO.setRoleId(1L);\n         role1User.addMembership(membershipTO);\n \n-        role1User = createUser(role1User);\n+        response = userService2.create(role1User);\n+        assertNotNull(response);\n+        role1User = response.readEntity(UserTO.class);\n         assertNotNull(role1User);\n-\n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n     }\n }"},{"sha":"7d960fb88f8b65ea28fb6ea99442ff4a46fcb41c","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -31,6 +31,7 @@\n import javax.ws.rs.core.Response;\n \n import org.apache.syncope.common.mod.RoleMod;\n+import org.apache.syncope.common.services.RoleService;\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -196,24 +197,21 @@ public void selfRead() {\n         assertTrue(userTO.getMembershipMap().containsKey(1L));\n         assertFalse(userTO.getMembershipMap().containsKey(3L));\n \n-        super.setupRestTemplate(\"user1\", \"password\");\n+        RoleService roleService2 = setupCredentials(roleService, \"user1\", ADMIN_PWD);\n \n         SyncopeClientException exception = null;\n         try {\n-            roleService.selfRead(3L);\n+            roleService2.selfRead(3L);\n             fail();\n         } catch (SyncopeClientCompositeErrorException e) {\n             exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n         }\n         assertNotNull(exception);\n \n-        RoleTO roleTO = roleService.selfRead(1L);\n+        RoleTO roleTO = roleService2.selfRead(1L);\n         assertNotNull(roleTO);\n         assertNotNull(roleTO.getAttributes());\n         assertFalse(roleTO.getAttributes().isEmpty());\n-\n-        // restore admin authentication\n-        super.resetRestTemplate();\n     }\n \n     @Test\n@@ -305,24 +303,21 @@ public void updateAsRoleOwner() {\n         roleMod.setName(\"Managing Director\");\n \n         // 3. try to update as user3, not owner of role 7 - fail\n-        setupRestTemplate(\"user2\", \"password\");\n+        RoleService roleService2 = setupCredentials(roleService, \"user2\", ADMIN_PWD);\n \n         try {\n-            roleService.update(roleMod.getId(), roleMod);\n+            roleService2.update(roleMod.getId(), roleMod);\n             fail();\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n         }\n \n         // 4. update as user5, owner of role 7 because owner of role 6 with\n         // inheritance - success\n-        super.setupRestTemplate(\"user5\", ADMIN_PWD);\n+        RoleService roleService3 = setupCredentials(roleService, \"user5\", ADMIN_PWD);\n \n-        roleTO = roleService.update(roleMod.getId(), roleMod);\n+        roleTO = roleService3.update(roleMod.getId(), roleMod);\n         assertEquals(\"Managing Director\", roleTO.getName());\n-\n-        // restore admin authentication\n-        super.resetRestTemplate();\n     }\n \n     /**"},{"sha":"6dfeff0a748ff6eb9bb93ba63ee0203a5af85b90","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -31,12 +31,12 @@\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.AttributeCond;\n import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.services.UserRequestService;\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.UserRequestTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -62,14 +62,12 @@ public void create() {\n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"selfcreate@syncope.apache.org\");\n \n         // 2. get unauthorized when trying to request user create\n-        SyncopeClientException exception = null;\n         try {\n             createUserRequest(new UserRequestTO(userTO));\n             fail();\n         } catch (SyncopeClientCompositeErrorException e) {\n-            exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n+            assertNotNull(e.getException(SyncopeClientExceptionType.UnauthorizedRole));\n         }\n-        assertNotNull(exception);\n \n         // 3. set create request allowed\n         configurationTO.setValue(\"true\");\n@@ -81,12 +79,12 @@ public void create() {\n         assertNotNull(configurationTO);\n \n         // 4. as anonymous, request user create works\n-        UserRequestTO request = anonymousRestTemplate().postForObject(BASE_URL + \"user/request/create\",\n-                userTO, UserRequestTO.class);\n-        assertNotNull(request);\n+        UserRequestService userRequestService2 = setupCredentials(userRequestService, null, null);\n+        response = userRequestService2.create(new UserRequestTO(userTO));\n+        UserRequestTO request = getObject(response, UserRequestTO.class, userRequestService2);\n \n         // 5. switch back to admin\n-        super.resetRestTemplate();\n+        super.resetRestTemplate(); // TODO remove after CXF migration is complete\n \n         // 6. try to find user\n         AttributeCond attrCond = new AttributeCond(AttributeCond.Type.EQ);\n@@ -115,26 +113,27 @@ public void update() {\n         userMod.setPassword(initialPassword);\n \n         // 2. try to request user update as admin: failure\n-        SyncopeClientException exception = null;\n         try {\n             createUserRequest(new UserRequestTO(userMod));\n             fail();\n         } catch (SyncopeClientCompositeErrorException e) {\n-            exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n+            assertNotNull(e.getException(SyncopeClientExceptionType.UnauthorizedRole));\n         }\n-        assertNotNull(exception);\n \n         // 3. auth as user just created\n-        super.setupRestTemplate(userTO.getUsername(), initialPassword);\n+        UserRequestService userRequestService2 = setupCredentials(userRequestService, userTO.getUsername(),\n+                initialPassword);\n \n         // 4. update with same password: not matching password policy\n-        exception = null;\n         try {\n-            createUserRequest(new UserRequestTO(userMod));\n+            Response response = userRequestService2.create(new UserRequestTO(userMod));\n+            if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n+                throw (RuntimeException) clientExceptionMapper.fromResponse(response);\n+            }\n+            fail();\n         } catch (SyncopeClientCompositeErrorException scce) {\n-            exception = scce.getException(SyncopeClientExceptionType.InvalidSyncopeUser);\n+            assertNotNull(scce.getException(SyncopeClientExceptionType.InvalidSyncopeUser));\n         }\n-        assertNotNull(exception);\n \n         // 5. now request user update works\n         userMod.setPassword(\"new\" + initialPassword);\n@@ -167,20 +166,21 @@ public void delete() {\n         assertNotNull(userTO);\n \n         // 2. try to request user delete as admin: failure\n-        SyncopeClientException exception = null;\n         try {\n             createUserRequest(new UserRequestTO(userTO.getId()));\n             fail();\n         } catch (SyncopeClientCompositeErrorException e) {\n-            exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n+            assertNotNull(e.getException(SyncopeClientExceptionType.UnauthorizedRole));\n         }\n-        assertNotNull(exception);\n \n         // 3. auth as user just created\n-        super.setupRestTemplate(userTO.getUsername(), initialPassword);\n+        UserRequestService userRequestService2 = setupCredentials(userRequestService, userTO.getUsername(),\n+                initialPassword);\n \n         // 4. now request user delete works\n-        createUserRequest(new UserRequestTO(userTO.getId()));\n+        Response response = userRequestService2.create(new UserRequestTO(userTO.getId()));\n+        assertNotNull(response);\n+        assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n \n         // 5. switch back to admin\n         super.resetRestTemplate();\n@@ -201,11 +201,11 @@ public void delete() {\n         }\n     }\n \n-    private Long createUserRequest(UserRequestTO userRequestTO) throws RuntimeException {\n+    private UserRequestTO createUserRequest(final UserRequestTO userRequestTO) {\n         Response response = userRequestService.create(userRequestTO);\n         if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n-            throw (RuntimeException)clientExceptionMapper.fromResponse(response);\n+            throw (RuntimeException) clientExceptionMapper.fromResponse(response);\n         }\n-        return (Long) response.readEntity(Long.class);\n+        return getObject(response, UserRequestTO.class, userRequestService);\n     }\n }"},{"sha":"5e078aaccdc447e34a470ff240d7146cb4d7e548","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0863b01dc5b34b33e64c590d16d91a0b6630399b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=0863b01dc5b34b33e64c590d16d91a0b6630399b","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.services.UserService;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.ConnObjectTO;\n@@ -106,16 +107,16 @@ public static UserTO getSampleTO(final String email) {\n \n     @Test\n     public void selfRead() {\n-        super.setupRestTemplate(\"user1\", ADMIN_PWD);\n+        UserService userService2 = setupCredentials(userService, \"user1\", ADMIN_PWD);\n \n         try {\n-            userService.read(1L);\n+            userService2.read(1L);\n             fail();\n         } catch (HttpClientErrorException e) {\n             assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n         }\n \n-        UserTO userTO = userService.readSelf();\n+        UserTO userTO = userService2.readSelf();\n         assertEquals(\"user1\", userTO.getUsername());\n     }\n \n@@ -585,20 +586,19 @@ public void createWithReject() {\n         assertNull(form.getOwner());\n \n         // 3. claim task from user1, not in role 7 (designated for approval in workflow definition): fail\n-        super.setupRestTemplate(\"user1\", ADMIN_PWD);\n+        UserService userService2 = setupCredentials(userService, \"user1\", ADMIN_PWD);\n \n-        SyncopeClientException sce = null;\n         try {\n-            userService.claimForm(form.getTaskId());\n+            userService2.claimForm(form.getTaskId());\n+            fail();\n         } catch (SyncopeClientCompositeErrorException scce) {\n-            sce = scce.getException(SyncopeClientExceptionType.Workflow);\n+            assertNotNull(scce.getException(SyncopeClientExceptionType.Workflow));\n         }\n-        assertNotNull(sce);\n \n         // 4. claim task from user4, in role 7\n-        super.setupRestTemplate(\"user4\", ADMIN_PWD);\n+        UserService userService3 = setupCredentials(userService, \"user4\", ADMIN_PWD);\n \n-        form = userService.claimForm(form.getTaskId());\n+        form = userService3.claimForm(form.getTaskId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getOwner());\n@@ -608,7 +608,7 @@ public void createWithReject() {\n         props.get(\"approve\").setValue(Boolean.FALSE.toString());\n         props.get(\"rejectReason\").setValue(\"I don't like him.\");\n         form.setProperties(props.values());\n-        userTO = userService.submitForm(form);\n+        userTO = userService3.submitForm(form);\n         assertNotNull(userTO);\n         assertEquals(\"rejected\", userTO.getStatus());\n \n@@ -1931,7 +1931,7 @@ public void issueSYNCOPE122() {\n         assertNotNull(userTO.getPropagationStatusTOs());\n         assertEquals(1, userTO.getPropagationStatusTOs().size());\n         assertEquals(\"resource-testdb\", userTO.getPropagationStatusTOs().iterator().next().getResource());\n-        \n+\n         // 3b. verify that password hasn't changed on Syncope\n         assertEquals(pwdOnSyncope, userTO.getPassword());\n "}]}