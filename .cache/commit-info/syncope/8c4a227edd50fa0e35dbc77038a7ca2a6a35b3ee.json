{"sha":"8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhjNGEyMjdlZGQ1MGZhMGUzNWRiYzc3MDM4YTdjYTJhNmEzNWIzZWU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-04T15:34:14Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-04T15:34:14Z"},"message":"[SYNCOPE-454] Merge from 1_1_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1547823 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3d7b2efddcddadf9ab5f983e90f5b3f44c048de3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3d7b2efddcddadf9ab5f983e90f5b3f44c048de3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0e2dfae7c29c375e22427df4655bc102a0808f0a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0e2dfae7c29c375e22427df4655bc102a0808f0a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0e2dfae7c29c375e22427df4655bc102a0808f0a"},{"sha":"8beb540ecfc37e38778d6aab24b185a30395f9ff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8beb540ecfc37e38778d6aab24b185a30395f9ff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8beb540ecfc37e38778d6aab24b185a30395f9ff"}],"stats":{"total":299,"additions":180,"deletions":119},"files":[{"sha":"3d08b408afbbc8becaf3f3a3c7c822213d5452d4","filename":"console/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fpom.xml?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -261,6 +261,7 @@ under the License.\n                   <fileset dir=\"${project.build.directory}/test-classes\">\n                     <exclude name=\"**/*.class\"/>\n                     <exclude name=\"restClientContext.xml\"/>\n+                    <exclude name=\"rest.properties\"/>\n                   </fileset>\n                 </copy>\n               </target>"},{"sha":"d8314b8d5394d1e9499e094853d3ef5e24984515","filename":"console/src/main/java/org/apache/syncope/console/pages/EditUserModalPage.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -74,6 +74,7 @@ public EditUserModalPage(final PageReference pageRef, final ModalWindow window,\n         }\n     }\n \n+    @SuppressWarnings(\"rawtypes\")\n     @Override\n     protected void submitAction(final AjaxRequestTarget target, final Form form) {\n         final UserTO updatedUserTO = (UserTO) form.getModelObject();\n@@ -94,6 +95,7 @@ protected void submitAction(final AjaxRequestTarget target, final Form form) {\n         }\n     }\n \n+    @SuppressWarnings(\"rawtypes\")\n     @Override\n     protected void closeAction(final AjaxRequestTarget target, final Form form) {\n         setResponsePage(new ResultStatusModalPage.Builder(window, userTO).mode(mode).build());"},{"sha":"d7df3d98167820fc43f0d50a18fe967a32caa900","filename":"console/src/main/java/org/apache/syncope/console/pages/Reports.java","status":"modified","additions":54,"deletions":51,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -105,7 +105,7 @@ public Reports(final PageParameters parameters) {\n         setupAudit();\n     }\n \n-    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     private void setupReport() {\n         reportContainer = new WebMarkupContainer(\"reportContainer\");\n         setWindowClosedCallback(window, reportContainer);\n@@ -272,6 +272,7 @@ public Page createPage() {\n         add(createLink);\n     }\n \n+    @SuppressWarnings(\"rawtypes\")\n     private void setupAudit() {\n         auditContainer = new WebMarkupContainer(\"auditContainer\");\n         auditContainer.setOutputMarkupId(true);\n@@ -300,77 +301,79 @@ private void setupAudit() {\n         form.add(new LoggerCategoryPanel(\n                 \"events\", loggerRestClient.listEvents(), model, getPageReference(), \"Reports\") {\n \n-            private static final long serialVersionUID = 6113164334533550277L;\n+                    private static final long serialVersionUID = 6113164334533550277L;\n \n-            @Override\n-            protected String[] getListRoles() {\n-                return new String[] {\n-                    xmlRolesReader.getAllAllowedRoles(\"Audit\", \"list\")\n-                };\n-            }\n+                    @Override\n+                    protected String[] getListRoles() {\n+                        return new String[] {\n+                            xmlRolesReader.getAllAllowedRoles(\"Audit\", \"list\")\n+                        };\n+                    }\n \n-            @Override\n-            protected String[] getChangeRoles() {\n-                return new String[] {\n-                    xmlRolesReader.getAllAllowedRoles(\"Audit\", \"enable\"),\n-                    xmlRolesReader.getAllAllowedRoles(\"Audit\", \"disable\")\n-                };\n-            }\n+                    @Override\n+                    protected String[] getChangeRoles() {\n+                        return new String[] {\n+                            xmlRolesReader.getAllAllowedRoles(\"Audit\", \"enable\"),\n+                            xmlRolesReader.getAllAllowedRoles(\"Audit\", \"disable\")\n+                        };\n+                    }\n \n-            @Override\n-            public void onEventAction(final IEvent<?> event) {\n-                if (event.getPayload() instanceof SelectedEventsPanel.EventSelectionChanged) {\n+                    @Override\n+                    public void onEventAction(final IEvent<?> event) {\n+                        if (event.getPayload() instanceof SelectedEventsPanel.EventSelectionChanged) {\n \n-                    final SelectedEventsPanel.EventSelectionChanged eventSelectionChanged =\n+                            final SelectedEventsPanel.EventSelectionChanged eventSelectionChanged =\n                             (SelectedEventsPanel.EventSelectionChanged) event.getPayload();\n \n-                    for (String toBeRemoved : eventSelectionChanged.getToBeRemoved()) {\n-                        if (events.contains(toBeRemoved)) {\n-                            final Map.Entry<EventCategoryTO, Result> eventCategory =\n+                            for (String toBeRemoved : eventSelectionChanged.getToBeRemoved()) {\n+                                if (events.contains(toBeRemoved)) {\n+                                    final Map.Entry<EventCategoryTO, Result> eventCategory =\n                                     LoggerEventUtils.parseEventCategory(toBeRemoved);\n \n-                            final AuditLoggerName auditLoggerName = new AuditLoggerName(\n-                                    eventCategory.getKey().getType(),\n-                                    eventCategory.getKey().getCategory(),\n-                                    eventCategory.getKey().getSubcategory(),\n-                                    CollectionUtils.isEmpty(eventCategory.getKey().getEvents())\n-                                    ? null : eventCategory.getKey().getEvents().iterator().next(),\n-                                    eventCategory.getValue());\n-\n-                            loggerRestClient.disableAudit(auditLoggerName);\n-                            events.remove(toBeRemoved);\n-                        }\n-                    }\n+                                    final AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                                            eventCategory.getKey().getType(),\n+                                            eventCategory.getKey().getCategory(),\n+                                            eventCategory.getKey().getSubcategory(),\n+                                            CollectionUtils.isEmpty(eventCategory.getKey().getEvents())\n+                                            ? null : eventCategory.getKey().getEvents().iterator().next(),\n+                                            eventCategory.getValue());\n+\n+                                    loggerRestClient.disableAudit(auditLoggerName);\n+                                    events.remove(toBeRemoved);\n+                                }\n+                            }\n \n-                    for (String toBeAdded : eventSelectionChanged.getToBeAdded()) {\n-                        if (!events.contains(toBeAdded)) {\n-                            final Map.Entry<EventCategoryTO, Result> eventCategory =\n+                            for (String toBeAdded : eventSelectionChanged.getToBeAdded()) {\n+                                if (!events.contains(toBeAdded)) {\n+                                    final Map.Entry<EventCategoryTO, Result> eventCategory =\n                                     LoggerEventUtils.parseEventCategory(toBeAdded);\n \n-                            final AuditLoggerName auditLoggerName = new AuditLoggerName(\n-                                    eventCategory.getKey().getType(),\n-                                    eventCategory.getKey().getCategory(),\n-                                    eventCategory.getKey().getSubcategory(),\n-                                    CollectionUtils.isEmpty(eventCategory.getKey().getEvents())\n-                                    ? null : eventCategory.getKey().getEvents().iterator().next(),\n-                                    eventCategory.getValue());\n-\n-                            loggerRestClient.enableAudit(auditLoggerName);\n-                            events.add(toBeAdded);\n+                                    final AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                                            eventCategory.getKey().getType(),\n+                                            eventCategory.getKey().getCategory(),\n+                                            eventCategory.getKey().getSubcategory(),\n+                                            CollectionUtils.isEmpty(eventCategory.getKey().getEvents())\n+                                            ? null : eventCategory.getKey().getEvents().iterator().next(),\n+                                            eventCategory.getValue());\n+\n+                                    loggerRestClient.enableAudit(auditLoggerName);\n+                                    events.add(toBeAdded);\n+                                }\n+                            }\n                         }\n                     }\n-                }\n-            }\n-        });\n+                });\n     }\n \n     private class ReportProvider extends SortableDataProvider<ReportTO, String> {\n \n         private static final long serialVersionUID = -2311716167583335852L;\n \n-        private SortableDataProviderComparator<ReportTO> comparator;\n+        private final SortableDataProviderComparator<ReportTO> comparator;\n \n         public ReportProvider() {\n+            super();\n+\n             //Default sorting\n             setSort(\"id\", SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<ReportTO>(this);"},{"sha":"4c0deb338b98f31dd6164f3ad12feabea333cdb1","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/StatusPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FStatusPanel.java?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -228,12 +228,11 @@ public Page createPage() {\n     }\n \n     public StatusMod getStatusMod() {\n-        StatusMod result = null;\n+        StatusMod result = new StatusMod();\n \n         Collection<StatusBean> statusBeans = checkGroup.getModel().getObject();\n         if (statusBeans != null && !statusBeans.isEmpty()) {\n             result = StatusUtils.buildStatusMod(statusBeans);\n-\n         }\n \n         return result;"},{"sha":"ded8c790f2b32e1f56d8ae2841fc21291ec8e078","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":30,"deletions":17,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -59,6 +59,7 @@\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -67,7 +68,7 @@\n /**\n  * Manage the data propagation to external resources.\n  */\n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = { Throwable.class })\n public class PropagationManager {\n \n     /**\n@@ -198,7 +199,7 @@ protected List<PropagationTask> getCreateTaskIds(final AbstractAttributable attr\n             propByRes.get(ResourceOperation.CREATE).removeAll(noPropResourceNames);\n         }\n \n-        return createTasks(attributable, password, null, null, enable, false, propByRes);\n+        return createTasks(attributable, password, true, null, null, enable, false, propByRes);\n     }\n \n     /**\n@@ -217,6 +218,7 @@ public List<PropagationTask> getUserUpdateTaskIds(final SyncopeUser user, final\n         return getUpdateTaskIds(\n                 user, // SyncopeUser to be updated on external resources\n                 null, // no password\n+                false,\n                 enable, // status to be propagated\n                 Collections.<String>emptySet(), // no virtual attributes to be managed\n                 Collections.<AttributeMod>emptySet(), // no virtual attributes to be managed\n@@ -228,18 +230,20 @@ public List<PropagationTask> getUserUpdateTaskIds(final SyncopeUser user, final\n      * Performs update on each resource associated to the user.\n      *\n      * @param wfResult user to be propagated (and info associated), as per result from workflow\n+     * @param changePwd whether password should be included for propagation attributes or not\n      * @param noPropResourceNames external resources not to be considered for propagation\n      * @return list of propagation tasks\n      * @throws NotFoundException if user is not found\n      * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n     public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry<UserMod, Boolean>> wfResult,\n-            final Collection<String> noPropResourceNames)\n+            final boolean changePwd, final Collection<String> noPropResourceNames)\n             throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeUser user = userDataBinder.getUserFromId(wfResult.getResult().getKey().getId());\n         return getUpdateTaskIds(user,\n                 wfResult.getResult().getKey().getPassword(),\n+                changePwd,\n                 wfResult.getResult().getValue(),\n                 wfResult.getResult().getKey().getVirAttrsToRemove(),\n                 wfResult.getResult().getKey().getVirAttrsToUpdate(),\n@@ -254,7 +258,7 @@ public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry\n         List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n         if (userMod.getPwdPropRequest() == null) {\n             // a. no specific password propagation request: generate propagation tasks for any resource associated\n-            tasks = getUserUpdateTaskIds(wfResult, null);\n+            tasks = getUserUpdateTaskIds(wfResult, true, null);\n         } else {\n             // b. generate the propagation task list in two phases: first the ones containing password,\n             // the the rest (with no password)\n@@ -270,15 +274,15 @@ public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry\n                 Set<String> toBeExcluded = new HashSet<String>(currentResourceNames);\n                 toBeExcluded.addAll(userMod.getResourcesToAdd());\n                 toBeExcluded.removeAll(pwdResourceNames);\n-                tasks.addAll(getUserUpdateTaskIds(wfResult, toBeExcluded));\n+                tasks.addAll(getUserUpdateTaskIds(wfResult, true, toBeExcluded));\n             }\n \n             final PropagationByResource nonPwdPropByRes = new PropagationByResource();\n             nonPwdPropByRes.merge(origPropByRes);\n             nonPwdPropByRes.removeAll(pwdResourceNames);\n             nonPwdPropByRes.purge();\n             if (!nonPwdPropByRes.isEmpty()) {\n-                tasks.addAll(getUserUpdateTaskIds(wfResult, pwdResourceNames));\n+                tasks.addAll(getUserUpdateTaskIds(wfResult, false, pwdResourceNames));\n             }\n         }\n \n@@ -319,12 +323,12 @@ public List<PropagationTask> getRoleUpdateTaskIds(final WorkflowResult<Long> wfR\n             throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeRole role = roleDataBinder.getRoleFromId(wfResult.getResult());\n-        return getUpdateTaskIds(role, null, null,\n+        return getUpdateTaskIds(role, null, false, null,\n                 vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult.getPropByRes(), noPropResourceNames);\n     }\n \n     protected List<PropagationTask> getUpdateTaskIds(final AbstractAttributable attributable,\n-            final String password, final Boolean enable,\n+            final String password, final boolean changePwd, final Boolean enable,\n             final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated,\n             final PropagationByResource propByRes, final Collection<String> noPropResourceNames)\n             throws NotFoundException {\n@@ -356,7 +360,7 @@ protected List<PropagationTask> getUpdateTaskIds(final AbstractAttributable attr\n             }\n         }\n \n-        return createTasks(attributable, password,\n+        return createTasks(attributable, password, changePwd,\n                 vAttrsToBeRemoved, vAttrsToBeUpdatedMap, enable, false, localPropByRes);\n     }\n \n@@ -422,7 +426,7 @@ public List<PropagationTask> getUserDeleteTaskIds(final Long userId, final Colle\n      */\n     public List<PropagationTask> getUserDeleteTaskIds(final WorkflowResult<Long> wfResult) {\n         SyncopeUser user = userDataBinder.getUserFromId(wfResult.getResult());\n-        return createTasks(user, null, null, null, false, true, wfResult.getPropByRes());\n+        return createTasks(user, null, false, null, null, false, true, wfResult.getPropByRes());\n     }\n \n     /**\n@@ -484,7 +488,7 @@ protected List<PropagationTask> getDeleteTaskIds(final AbstractAttributable attr\n         if (noPropResourceNames != null && !noPropResourceNames.isEmpty()) {\n             propByRes.get(ResourceOperation.DELETE).removeAll(noPropResourceNames);\n         }\n-        return createTasks(attributable, null, null, null, false, true, propByRes);\n+        return createTasks(attributable, null, false, null, null, false, true, propByRes);\n     }\n \n     /**\n@@ -494,14 +498,15 @@ protected List<PropagationTask> getDeleteTaskIds(final AbstractAttributable attr\n      * @param attrUtil user / role\n      * @param subject given user / role\n      * @param password clear-text password\n+     * @param changePwd whether password should be included for propagation attributes or not\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n      * @param enable whether user must be enabled or not\n      * @param resource target resource\n      * @return account link + prepared attributes\n      */\n     protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> prepareAttributes(\n-            final AttributableUtil attrUtil, final T subject, final String password,\n+            final AttributableUtil attrUtil, final T subject, final String password, final boolean changePwd,\n             final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated,\n             final Boolean enable, final ExternalResource resource) {\n \n@@ -527,11 +532,11 @@ protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> pre\n                 Map.Entry<String, Attribute> preparedAttribute = MappingUtil.prepareAttribute(\n                         resource, mapping, subject, password, passwordGenerator, vAttrsToBeRemoved, vAttrsToBeUpdated);\n \n-                if (preparedAttribute.getKey() != null) {\n+                if (preparedAttribute != null && preparedAttribute.getKey() != null) {\n                     accountId = preparedAttribute.getKey();\n                 }\n \n-                if (preparedAttribute.getValue() != null) {\n+                if (preparedAttribute != null && preparedAttribute.getValue() != null) {\n                     Attribute alreadyAdded = AttributeUtil.find(preparedAttribute.getValue().getName(), attributes);\n \n                     if (alreadyAdded == null) {\n@@ -555,6 +560,12 @@ protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> pre\n         if (enable != null) {\n             attributes.add(AttributeBuilder.buildEnabled(enable));\n         }\n+        if (!changePwd) {\n+            Attribute pwdAttr = AttributeUtil.find(OperationalAttributes.PASSWORD_NAME, attributes);\n+            if (pwdAttr != null) {\n+                attributes.remove(pwdAttr);\n+            }\n+        }\n \n         return new SimpleEntry<String, Set<Attribute>>(accountId, attributes);\n     }\n@@ -565,14 +576,16 @@ protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> pre\n      * @param <T> user / role\n      * @param subject user / role to be provisioned\n      * @param password cleartext password to be provisioned\n+     * @param changePwd whether password should be included for propagation attributes or not\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n      * @param enable whether user must be enabled or not\n      * @param deleteOnResource whether user / role must be deleted anyway from external resource or not\n      * @param propByRes operation to be performed per resource\n      * @return list of propagation tasks created\n      */\n-    protected <T extends AbstractAttributable> List<PropagationTask> createTasks(final T subject, final String password,\n+    protected <T extends AbstractAttributable> List<PropagationTask> createTasks(final T subject,\n+            final String password, final boolean changePwd,\n             final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated,\n             final Boolean enable, final boolean deleteOnResource,\n             final PropagationByResource propByRes) {\n@@ -624,8 +637,8 @@ protected <T extends AbstractAttributable> List<PropagationTask> createTasks(fin\n                     task.setPropagationMode(resource.getPropagationMode());\n                     task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));\n \n-                    Map.Entry<String, Set<Attribute>> preparedAttrs = prepareAttributes(attrUtil, subject, password,\n-                            vAttrsToBeRemoved, vAttrsToBeUpdated, enable, resource);\n+                    Map.Entry<String, Set<Attribute>> preparedAttrs = prepareAttributes(attrUtil, subject,\n+                            password, changePwd, vAttrsToBeRemoved, vAttrsToBeUpdated, enable, resource);\n                     task.setAccountId(preparedAttrs.getKey());\n \n                     // Check if any of mandatory attributes (in the mapping) is missing or not received any value: "},{"sha":"10b726c52ef63d2f3129b001dc0b46cb916c0eff","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -174,15 +174,15 @@ public List<RoleTO> children(final Long roleId) {\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<RoleTO> search(final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         return search(searchCondition, -1, -1);\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size)\n             throws InvalidSearchConditionException {\n \n@@ -204,7 +204,7 @@ public List<RoleTO> search(final NodeCond searchCondition, final int page, final\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public int searchCount(final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n@@ -310,7 +310,7 @@ public RoleTO delete(final Long roleId) {\n         final List<SyncopeRole> toBeDeprovisioned = new ArrayList<SyncopeRole>();\n \n         final SyncopeRole syncopeRole = roleDAO.find(roleId);\n-        \n+\n         if (syncopeRole != null) {\n             toBeDeprovisioned.add(syncopeRole);\n "},{"sha":"4c966040f575e1328403319e63b180bba0e1269a","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/LDAPMembershipSyncActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -211,7 +211,7 @@ protected void userUpdate(final UserMod userMod, final String resourceName) {\n             updated = uwfAdapter.update(userMod);\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                    updated, Collections.singleton(resourceName));\n+                    updated, false, Collections.singleton(resourceName));\n \n             taskExecutor.execute(tasks);\n             result = Result.SUCCESS;"},{"sha":"ff5c414c7ecf8e4375fcd898bd517c539b13bfef","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -475,7 +475,7 @@ public Long findMatchingAttributableId(final ObjectClass objectClass, final Stri\n \n         final List<ConnectorObject> found = connector.search(objectClass,\n                 new EqualsFilter(new Name(name)), connector.getOperationOptions(\n-                attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n+                        attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", objectClass, syncTask.getResource(), name);\n@@ -678,7 +678,8 @@ protected Map.Entry<UserTO, UserTO> updateUser(final Long id, SyncDelta delta, f\n         }\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                updated, Collections.singleton(syncTask.getResource().getName()));\n+                updated, updated.getResult().getKey().getPassword() != null,\n+                Collections.singleton(syncTask.getResource().getName()));\n \n         taskExecutor.execute(tasks);\n "},{"sha":"b19530316fa1af3fb9328a8ba643275adf4f7eac","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -247,8 +247,12 @@ public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prep\n                     }\n                 }\n \n-                result = new AbstractMap.SimpleEntry<String, Attribute>(null,\n-                        AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n+                if (passwordAttrValue == null) {\n+                    result = null;\n+                } else {\n+                    result = new AbstractMap.SimpleEntry<String, Attribute>(null,\n+                            AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n+                }\n             } else {\n                 if ((schema != null && schema.isMultivalue()) || AttributableUtil.getInstance(subject).getType()\n                         != mapItem.getIntMappingType().getAttributableType()) {"},{"sha":"5dee3682e9db76d629d2aa70fc8d1ef391963cd4","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":36,"deletions":4,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -22,9 +22,12 @@\n \n import java.io.InputStream;\n import java.net.URI;\n+import java.util.Hashtable;\n+import java.util.Map;\n import java.util.Properties;\n import java.util.UUID;\n-\n+import javax.naming.Context;\n+import javax.naming.directory.InitialDirContext;\n import javax.sql.DataSource;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n@@ -58,6 +61,7 @@\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.RESTHeaders;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.core.util.PasswordEncoder;\n@@ -70,7 +74,7 @@\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\"classpath:testJDBCContext.xml\"})\n+@ContextConfiguration(locations = { \"classpath:testJDBCContext.xml\" })\n public abstract class AbstractTest {\n \n     /**\n@@ -257,14 +261,14 @@ protected UserTO updateUser(final UserMod userMod) {\n     protected UserTO deleteUser(final Long id) {\n         return userService.delete(id).readEntity(UserTO.class);\n     }\n-    \n+\n     public <T> T getObject(final URI location, final Class<?> serviceClass, final Class<T> resultClass) {\n         WebClient webClient = WebClient.fromClient(WebClient.client(adminClient.getService(serviceClass)));\n         webClient.accept(clientFactory.getContentType().getMediaType()).to(location.toASCIIString(), false);\n \n         return webClient.get(resultClass);\n     }\n-    \n+\n     @SuppressWarnings(\"unchecked\")\n     protected <T extends AbstractSchemaTO> T createSchema(final AttributableType kind,\n             final SchemaType type, final T schemaTO) {\n@@ -321,4 +325,32 @@ protected ResourceTO createResource(final ResourceTO resourceTO) {\n         }\n         return getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n     }\n+\n+    protected Object getLdapRemoteObject(final String objectDn) {\n+        return getLdapRemoteObject(null, null, objectDn);\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\", \"UseOfObsoleteCollectionType\" })\n+    protected Object getLdapRemoteObject(final String bindDn, final String bindPwd, final String objectDn) {\n+        ResourceTO ldapRes = resourceService.read(RESOURCE_NAME_LDAP);\n+        final Map<String, ConnConfProperty> ldapConnConf =\n+                connectorService.read(ldapRes.getConnectorId()).getConfigurationMap();\n+\n+        Hashtable env = new Hashtable();\n+        env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n+        env.put(Context.PROVIDER_URL, \"ldap://\" + ldapConnConf.get(\"host\").getValues().get(0)\n+                + \":\" + ldapConnConf.get(\"port\").getValues().get(0) + \"/\");\n+        env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n+        env.put(Context.SECURITY_PRINCIPAL,\n+                bindDn == null ? ldapConnConf.get(\"principal\").getValues().get(0) : bindDn);\n+        env.put(Context.SECURITY_CREDENTIALS,\n+                bindPwd == null ? ldapConnConf.get(\"credentials\").getValues().get(0) : bindPwd);\n+\n+        try {\n+            final InitialDirContext ctx = new InitialDirContext(env);\n+            return ctx.lookup(objectDn);\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n }"},{"sha":"956f693245acb6400a5c16a231c5fca802385a21","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":2,"deletions":29,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -28,11 +28,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.security.AccessControlException;\n-import java.util.Hashtable;\n import java.util.List;\n-import java.util.Map;\n-import javax.naming.Context;\n-import javax.naming.directory.InitialDirContext;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -41,13 +37,11 @@\n import org.apache.syncope.common.services.RoleService;\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.ResourceNameTO;\n-import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.Preference;\n import org.apache.syncope.common.types.RESTHeaders;\n import org.apache.syncope.common.types.ResourceAssociationActionType;\n@@ -592,38 +586,17 @@ public void issueSYNCOPE455() {\n             roleService.read(parent.getId());\n             fail();\n         } catch (SyncopeClientException scce) {\n-            // ignore\n+            assertNotNull(scce);\n         }\n \n         try {\n             roleService.read(child.getId());\n             fail();\n         } catch (SyncopeClientException scce) {\n-            // ignore\n+            assertNotNull(scce);\n         }\n \n         assertNull(getLdapRemoteObject(parentRemoteObject.getAttrMap().get(Name.NAME).getValues().get(0)));\n         assertNull(getLdapRemoteObject(childRemoteObject.getAttrMap().get(Name.NAME).getValues().get(0)));\n     }\n-\n-    private Object getLdapRemoteObject(final String name) {\n-        ResourceTO ldapRes = resourceService.read(RESOURCE_NAME_LDAP);\n-        final Map<String, ConnConfProperty> ldapConnConf =\n-                connectorService.read(ldapRes.getConnectorId()).getConfigurationMap();\n-\n-        Hashtable env = new Hashtable();\n-        env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n-        env.put(Context.PROVIDER_URL, \"ldap://\" + ldapConnConf.get(\"host\").getValues().get(0)\n-                + \":\" + ldapConnConf.get(\"port\").getValues().get(0) + \"/\");\n-        env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n-        env.put(Context.SECURITY_PRINCIPAL, ldapConnConf.get(\"principal\").getValues().get(0));\n-        env.put(Context.SECURITY_CREDENTIALS, ldapConnConf.get(\"credentials\").getValues().get(0));\n-\n-        try {\n-            final InitialDirContext ctx = new InitialDirContext(env);\n-            return ctx.lookup(name);\n-        } catch (Exception e) {\n-            return null;\n-        }\n-    }\n }"},{"sha":"5f2ac2b3c024c84f0b72c823bb46f68743712796","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":38,"deletions":3,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -73,6 +73,7 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n+import javax.naming.NamingException;\n import javax.ws.rs.core.EntityTag;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n@@ -81,6 +82,7 @@\n import org.apache.syncope.common.services.UserService;\n import org.apache.syncope.common.types.Preference;\n import org.apache.syncope.common.types.RESTHeaders;\n+import org.identityconnectors.framework.common.objects.Name;\n import org.junit.Assume;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -1060,7 +1062,6 @@ public void issue270() {\n \n         // 2. try to update by adding a resource, but no password: must fail\n         UserMod userMod = AttributableOperations.diff(toBeUpdated, original);\n-\n         assertNotNull(userMod);\n \n         toBeUpdated = updateUser(userMod);\n@@ -1447,7 +1448,7 @@ public void issueSYNCOPE267() {\n         assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n         ConnObjectTO connObjectTO =\n-                resourceService.getConnectorObject(\"resource-db-virattr\", AttributableType.USER, userTO.getId());\n+                resourceService.getConnectorObject(RESOURCE_NAME_DBVIRATTR, AttributableType.USER, userTO.getId());\n         assertNotNull(connObjectTO);\n         assertEquals(\"virtualvalue\", connObjectTO.getAttrMap().get(\"USERNAME\").getValues().get(0));\n         // ----------------------------------\n@@ -1636,7 +1637,7 @@ public void mappingPurpose() {\n         UserTO actual = createUser(userTO);\n         assertNotNull(actual);\n \n-        final ConnObjectTO connObjectTO =\n+        ConnObjectTO connObjectTO =\n                 resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNull(connObjectTO.getAttrMap().get(\"email\"));\n     }\n@@ -2043,4 +2044,38 @@ public void ifMatch() {\n         userTO = userService.read(userTO.getId());\n         assertTrue(userTO.getUsername().endsWith(\"XX\"));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE454() throws NamingException {\n+        // 1. create user with LDAP resource (with 'Generate password if missing' enabled)\n+        UserTO userTO = getUniqueSampleTO(\"syncope454@syncope.apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        // 2. read resource configuration for LDAP binding\n+        ConnObjectTO connObject =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.USER, userTO.getId());\n+\n+        // 3. try (and succeed) to perform simple LDAP binding with provided password ('password123')\n+        assertNotNull(getLdapRemoteObject(\n+                connObject.getAttrMap().get(Name.NAME).getValues().get(0),\n+                \"password123\",\n+                connObject.getAttrMap().get(Name.NAME).getValues().get(0)));\n+\n+        // 4. update user without any password change request\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.setPwdPropRequest(new StatusMod());\n+        userMod.getAttrsToUpdate().add(attributeMod(\"surname\", \"surname2\"));\n+\n+        userService.update(userTO.getId(), userMod);\n+\n+        // 5. try (and succeed again) to perform simple LDAP binding: password has not changed\n+        assertNotNull(getLdapRemoteObject(\n+                connObject.getAttrMap().get(Name.NAME).getValues().get(0),\n+                \"password123\",\n+                connObject.getAttrMap().get(Name.NAME).getValues().get(0)));\n+    }\n+\n }"},{"sha":"b247685f61bbf0f5856039deb594902535b226af","filename":"core/src/test/java/org/apache/syncope/core/rest/VirAttrTestITCase.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirAttrTestITCase.java?ref=8c4a227edd50fa0e35dbc77038a7ca2a6a35b3ee","patch":"@@ -136,8 +136,7 @@ public void issueSYNCOPE260() {\n         userTO = userService.status(userTO.getId(), statusMod).readEntity(UserTO.class);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        connObjectTO =\n-                resourceService.getConnectorObject(RESOURCE_NAME_WS2, AttributableType.USER, userTO.getId());\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_WS2, AttributableType.USER, userTO.getId());\n         assertNotNull(connObjectTO);\n         assertFalse(connObjectTO.getAttrMap().get(\"NAME\").getValues().isEmpty());\n         assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n@@ -147,8 +146,7 @@ public void issueSYNCOPE260() {\n         userTO = userService.status(userTO.getId(), statusMod).readEntity(UserTO.class);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        connObjectTO =\n-                resourceService.getConnectorObject(RESOURCE_NAME_WS2, AttributableType.USER, userTO.getId());\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_WS2, AttributableType.USER, userTO.getId());\n         assertNotNull(connObjectTO);\n         assertFalse(connObjectTO.getAttrMap().get(\"NAME\").getValues().isEmpty());\n         assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));"}]}