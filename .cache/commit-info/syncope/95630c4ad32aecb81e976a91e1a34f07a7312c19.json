{"sha":"95630c4ad32aecb81e976a91e1a34f07a7312c19","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk1NjMwYzRhZDMyYWVjYjgxZTk3NmE5MWUxYTM0ZjA3YTczMTJjMTk=","commit":{"author":{"name":"Dima Ayash","email":"dimaayash@apache.org","date":"2020-04-09T11:46:23Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@users.noreply.github.com","date":"2020-04-10T08:27:53Z"},"message":"[SYNCOPE-160] RegisteredClientApp service for WA","tree":{"sha":"0c2bdae467898880e662c240945f66147a9c6ea9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0c2bdae467898880e662c240945f66147a9c6ea9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/95630c4ad32aecb81e976a91e1a34f07a7312c19","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/95630c4ad32aecb81e976a91e1a34f07a7312c19","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/95630c4ad32aecb81e976a91e1a34f07a7312c19","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/95630c4ad32aecb81e976a91e1a34f07a7312c19/comments","author":{"login":"DimaAy","id":19169906,"node_id":"MDQ6VXNlcjE5MTY5OTA2","avatar_url":"https://avatars.githubusercontent.com/u/19169906?v=4","gravatar_id":"","url":"https://api.github.com/users/DimaAy","html_url":"https://github.com/DimaAy","followers_url":"https://api.github.com/users/DimaAy/followers","following_url":"https://api.github.com/users/DimaAy/following{/other_user}","gists_url":"https://api.github.com/users/DimaAy/gists{/gist_id}","starred_url":"https://api.github.com/users/DimaAy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DimaAy/subscriptions","organizations_url":"https://api.github.com/users/DimaAy/orgs","repos_url":"https://api.github.com/users/DimaAy/repos","events_url":"https://api.github.com/users/DimaAy/events{/privacy}","received_events_url":"https://api.github.com/users/DimaAy/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"485ddef93383d473d2c189b3a5987bceeb00815c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/485ddef93383d473d2c189b3a5987bceeb00815c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/485ddef93383d473d2c189b3a5987bceeb00815c"}],"stats":{"total":764,"additions":764,"deletions":0},"files":[{"sha":"6b56357e0b7ae9f4bafbb2e4a3bc16c61a30116b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/RegisteredClientAppTO.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRegisteredClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRegisteredClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRegisteredClientAppTO.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+\n+public class RegisteredClientAppTO implements Serializable {\n+\n+    private static final long serialVersionUID = 6633251825655119506L;\n+\n+    private ClientAppTO clientAppTO;\n+\n+    private AccessPolicyConf accessPolicyConf;\n+\n+    private AuthPolicyConf authPolicyConf;\n+\n+    private AttrReleasePolicyConf attrReleasePolicyConf;\n+\n+    public ClientAppTO getClientAppTO() {\n+        return clientAppTO;\n+    }\n+\n+    public void setClientAppTO(final ClientAppTO clientAppTO) {\n+        this.clientAppTO = clientAppTO;\n+    }\n+\n+    public AccessPolicyConf getAccessPolicyConf() {\n+        return accessPolicyConf;\n+    }\n+\n+    public void setAccessPolicyConf(final AccessPolicyConf accessPolicyConf) {\n+        this.accessPolicyConf = accessPolicyConf;\n+    }\n+\n+    public AuthPolicyConf getAuthPolicyConf() {\n+        return authPolicyConf;\n+    }\n+\n+    public void setAuthPolicyConf(final AuthPolicyConf authPolicyConf) {\n+        this.authPolicyConf = authPolicyConf;\n+    }\n+\n+    public AttrReleasePolicyConf getAttrReleasePolicyConf() {\n+        return attrReleasePolicyConf;\n+    }\n+\n+    public void setAttrReleasePolicyConf(final AttrReleasePolicyConf attrReleasePolicyConf) {\n+        this.attrReleasePolicyConf = attrReleasePolicyConf;\n+    }\n+\n+}"},{"sha":"cd55423818ee10adce23243ed3a14960ceeb045f","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RegisteredClientAppService.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRegisteredClientAppService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRegisteredClientAppService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRegisteredClientAppService.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import java.util.List;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+\n+/**\n+ * REST operations for resgistered client applications.\n+ */\n+@Tag(name = \"RegisteredClientApps\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"registeredClientApps\")\n+public interface RegisteredClientAppService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all client applications to be registered.\n+     *\n+     * @return list of all client applications.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    List<RegisteredClientAppTO> list();\n+\n+    /**\n+     * Returns a client application with matching key.\n+     *\n+     * @param clientAppId registered client application ID to be read\n+     * @return registered client application with matching id\n+     */\n+    @GET\n+    @Path(\"{clientAppId}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    RegisteredClientAppTO read(@NotNull @PathParam(\"clientAppId\") Long clientAppId);\n+\n+    @GET\n+    @Path(\"{clientAppId}/{type}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    RegisteredClientAppTO read(\n+            @NotNull @PathParam(\"clientAppId\") Long clientAppId,\n+            @NotNull @PathParam(\"type\") ClientAppType type);\n+\n+    /**\n+     * Returns a client application with matching key.\n+     *\n+     * @param name registered client application name to be read\n+     * @return registered client application with matching name\n+     */\n+    @GET\n+    @Path(\"/name/{name}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    RegisteredClientAppTO read(@NotNull @PathParam(\"name\") String name);\n+\n+    @GET\n+    @Path(\"/name/{name}/{type}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    RegisteredClientAppTO read(\n+            @NotNull @PathParam(\"name\") String name,\n+            @NotNull @PathParam(\"type\") ClientAppType type);\n+\n+    /**\n+     * Create a new client app.\n+     *\n+     * @param registeredClientAppTO\n+     * @return Response object featuring Location header of created registered client app\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"ClientApp successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the entity created\"),\n+                @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response create(@NotNull RegisteredClientAppTO registeredClientAppTO);\n+\n+    /**\n+     * Delete client app matching the given key.\n+     *\n+     * @param name name of registered client application to be deleted\n+     * @return\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @DELETE\n+    @Path(\"{name}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    boolean delete(@NotNull @PathParam(\"name\") String name);\n+\n+}"},{"sha":"f9b162ae9bb9be2bd7fb781deb9d4d581ff3a837","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/RegisteredClientAppLogic.java","status":"added","additions":238,"deletions":0,"changes":238,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRegisteredClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRegisteredClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRegisteredClientAppLogic.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.to.AccessPolicyTO;\n+import org.apache.syncope.common.lib.to.AttrReleasePolicyTO;\n+import org.apache.syncope.common.lib.to.AuthPolicyTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.AMImplementationType;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.RegisteredClientAppBinder;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class RegisteredClientAppLogic {\n+\n+    @Autowired\n+    private ImplementationLogic implementationLogic;\n+\n+    @Autowired\n+    private PolicyLogic policyLogic;\n+\n+    @Autowired\n+    private ClientAppDataBinder clientAppDataBinder;\n+\n+    @Autowired\n+    private RegisteredClientAppBinder binder;\n+\n+    @Autowired\n+    private SAML2SPDAO saml2spDAO;\n+\n+    @Autowired\n+    private OIDCRPDAO oidcrpDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<RegisteredClientAppTO> list() {\n+        List<RegisteredClientAppTO> registeredApplications = new ArrayList<>();\n+        Arrays.asList(ClientAppType.values()).forEach(type -> {\n+            switch (type) {\n+                case OIDCRP:\n+                    registeredApplications.addAll(oidcrpDAO.findAll().stream().map(binder::getRegisteredClientAppTO).\n+                            collect(Collectors.toList()));\n+                    break;\n+\n+                case SAML2SP:\n+                default:\n+                    registeredApplications.addAll(saml2spDAO.findAll().stream().map(binder::getRegisteredClientAppTO).\n+                            collect(Collectors.toList()));\n+            }\n+        });\n+\n+        return registeredApplications;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public RegisteredClientAppTO read(final Long clientAppId, final ClientAppType type) {\n+        switch (type) {\n+            case OIDCRP:\n+                OIDCRP oidcrp = oidcrpDAO.findByClientAppId(clientAppId);\n+                if (oidcrp != null) {\n+                    return binder.getRegisteredClientAppTO(oidcrp);\n+                }\n+            case SAML2SP:\n+                SAML2SP saml2sp = saml2spDAO.findByClientAppId(clientAppId);\n+                if (saml2sp != null) {\n+                    return binder.getRegisteredClientAppTO(saml2sp);\n+                }\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public RegisteredClientAppTO read(final Long clientAppId) {\n+        for (ClientAppType type : ClientAppType.values()) {\n+            RegisteredClientAppTO registeredClientAppTO = read(clientAppId, type);\n+            if (registeredClientAppTO != null) {\n+                return registeredClientAppTO;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public RegisteredClientAppTO read(final String name, final ClientAppType type) {\n+        switch (type) {\n+            case OIDCRP:\n+                OIDCRP oidcrp = oidcrpDAO.findByName(name);\n+                if (oidcrp != null) {\n+                    return binder.getRegisteredClientAppTO(oidcrp);\n+                }\n+            case SAML2SP:\n+                SAML2SP saml2sp = saml2spDAO.findByName(name);\n+                if (saml2sp != null) {\n+                    return binder.getRegisteredClientAppTO(saml2sp);\n+                }\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public RegisteredClientAppTO read(final String name) {\n+        for (ClientAppType type : ClientAppType.values()) {\n+            RegisteredClientAppTO registeredClientAppTO = read(name, type);\n+            if (registeredClientAppTO != null) {\n+                return registeredClientAppTO;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional\n+    public RegisteredClientAppTO create(final RegisteredClientAppTO registeredClientAppTO) {\n+\n+        AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n+        if (registeredClientAppTO.getAuthPolicyConf() != null) {\n+            String policyName = registeredClientAppTO.getClientAppTO().getName() + \"AuthPolicy\";\n+            ImplementationTO implementationTO = new ImplementationTO();\n+            implementationTO.setKey(policyName);\n+            implementationTO.setEngine(ImplementationEngine.JAVA);\n+            implementationTO.setType(AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+            implementationTO.setBody(POJOHelper.serialize(registeredClientAppTO.getAuthPolicyConf()));\n+\n+            ImplementationTO conf = implementationLogic.create(implementationTO);\n+\n+            authPolicyTO.setConfiguration(conf.getKey());\n+            authPolicyTO = policyLogic.create(PolicyType.AUTH, authPolicyTO);\n+        }\n+\n+        AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n+        if (registeredClientAppTO.getAccessPolicyConf() != null) {\n+\n+            String policyName = registeredClientAppTO.getClientAppTO().getName() + \"AccessPolicy\";\n+            ImplementationTO implementationTO = new ImplementationTO();\n+            implementationTO.setKey(policyName);\n+            implementationTO.setEngine(ImplementationEngine.JAVA);\n+            implementationTO.setType(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+            implementationTO.setBody(POJOHelper.serialize(registeredClientAppTO.getAuthPolicyConf()));\n+\n+            ImplementationTO conf = implementationLogic.create(implementationTO);\n+\n+            accessPolicyTO.setConfiguration(conf.getKey());\n+            accessPolicyTO = policyLogic.create(PolicyType.ACCESS, accessPolicyTO);\n+        }\n+\n+        AttrReleasePolicyTO attrReleasePolicyTO = new AttrReleasePolicyTO();\n+        if (registeredClientAppTO.getAttrReleasePolicyConf() != null) {\n+\n+            String policyName = registeredClientAppTO.getClientAppTO().getName() + \"AttrReleasePolicy\";\n+            ImplementationTO implementationTO = new ImplementationTO();\n+            implementationTO.setKey(policyName);\n+            implementationTO.setEngine(ImplementationEngine.JAVA);\n+            implementationTO.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS);\n+            implementationTO.setBody(POJOHelper.serialize(registeredClientAppTO.getAttrReleasePolicyConf()));\n+\n+            ImplementationTO conf = implementationLogic.create(implementationTO);\n+\n+            attrReleasePolicyTO.setConfiguration(conf.getKey());\n+            attrReleasePolicyTO = policyLogic.create(PolicyType.ATTR_RELEASE, attrReleasePolicyTO);\n+        }\n+\n+        if (registeredClientAppTO.getClientAppTO() instanceof OIDCRPTO) {\n+            OIDCRPTO oidcrpto = OIDCRPTO.class.cast(registeredClientAppTO.getClientAppTO());\n+            oidcrpto.setAccessPolicy(accessPolicyTO.getKey());\n+            oidcrpto.setAttrReleasePolicy(attrReleasePolicyTO.getKey());\n+            oidcrpto.setAuthPolicy(authPolicyTO.getKey());\n+            return binder.getRegisteredClientAppTO(oidcrpDAO.save(clientAppDataBinder.create(oidcrpto)));\n+\n+        } else if (registeredClientAppTO.getClientAppTO() instanceof SAML2SPTO) {\n+            SAML2SPTO saml2spto = SAML2SPTO.class.cast(registeredClientAppTO.getClientAppTO());\n+            saml2spto.setAccessPolicy(accessPolicyTO.getKey());\n+            saml2spto.setAttrReleasePolicy(attrReleasePolicyTO.getKey());\n+            saml2spto.setAuthPolicy(authPolicyTO.getKey());\n+            return binder.getRegisteredClientAppTO(saml2spDAO.save(clientAppDataBinder.create(saml2spto)));\n+        }\n+\n+        return null;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional\n+    public boolean delete(final String name) {\n+        ClientAppTO clientAppTO = read(name).getClientAppTO();\n+        if (clientAppTO != null) {\n+            if (clientAppTO instanceof OIDCRPTO) {\n+                oidcrpDAO.delete(clientAppTO.getKey());\n+            } else if (clientAppTO instanceof SAML2SPTO) {\n+                saml2spDAO.delete(clientAppTO.getKey());\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+}"},{"sha":"9a858fd5e5e2fcc0567646188c0d9558d837ea3f","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RegisteredClientAppServiceImpl.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRegisteredClientAppServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRegisteredClientAppServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRegisteredClientAppServiceImpl.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.RegisteredClientAppService;\n+import org.apache.syncope.core.logic.RegisteredClientAppLogic;\n+\n+@Service\n+public class RegisteredClientAppServiceImpl extends AbstractServiceImpl implements RegisteredClientAppService {\n+\n+    @Autowired\n+    private RegisteredClientAppLogic logic;\n+\n+    @Override\n+    public List<RegisteredClientAppTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public RegisteredClientAppTO read(final Long clientAppId) {\n+        RegisteredClientAppTO registeredClientAppTO = logic.read(clientAppId);\n+        if (registeredClientAppTO == null) {\n+            throw new NotFoundException(\"Client app with clientApp ID \" + clientAppId + \" not found\");\n+        }\n+        return registeredClientAppTO;\n+    }\n+\n+    @Override\n+    public RegisteredClientAppTO read(final Long clientAppId, final ClientAppType type) {\n+        RegisteredClientAppTO registeredClientAppTO = logic.read(clientAppId, type);\n+        if (registeredClientAppTO == null) {\n+            throw new NotFoundException(\"Client app with clientApp ID \" + clientAppId\n+                    + \" with type \" + type + \" not found\");\n+        }\n+        return registeredClientAppTO;\n+    }\n+\n+    @Override\n+    public RegisteredClientAppTO read(final String name) {\n+        RegisteredClientAppTO registeredClientAppTO = logic.read(name);\n+        if (registeredClientAppTO == null) {\n+            throw new NotFoundException(\"Client app with name \" + name + \" not found\");\n+        }\n+        return registeredClientAppTO;\n+    }\n+\n+    @Override\n+    public RegisteredClientAppTO read(final String name, final ClientAppType type) {\n+        RegisteredClientAppTO registeredClientAppTO = logic.read(name, type);\n+        if (registeredClientAppTO == null) {\n+            throw new NotFoundException(\"Client app with name \" + name + \" with type \" + type + \" not found\");\n+        }\n+        return registeredClientAppTO;\n+    }\n+\n+    @Override\n+    public Response create(final RegisteredClientAppTO registeredClientAppTO) {\n+        RegisteredClientAppTO appTO = logic.create(registeredClientAppTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(appTO.getClientAppTO().getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, appTO.getClientAppTO().getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean delete(final String name) {\n+        return logic.delete(name);\n+    }\n+\n+}"},{"sha":"d4225348fd4c76098c6108f8d66317720ad51009","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RegisteredClientAppBinder.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRegisteredClientAppBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRegisteredClientAppBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRegisteredClientAppBinder.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+\n+public interface RegisteredClientAppBinder {\n+\n+    RegisteredClientAppTO getRegisteredClientAppTO(ClientApp clientApp);\n+\n+}"},{"sha":"c8aae5b941be93d8a34a929305a56c07a7028f6c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RegisteredClientAppBinderImpl.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRegisteredClientAppBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRegisteredClientAppBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRegisteredClientAppBinderImpl.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.RegisteredClientAppBinder;\n+import org.apache.syncope.core.spring.ImplementationManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RegisteredClientAppBinderImpl implements RegisteredClientAppBinder {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RegisteredClientAppBinder.class);\n+\n+    @Autowired\n+    private ClientAppDataBinder clientAppDataBinder;\n+\n+    @Override\n+    public RegisteredClientAppTO getRegisteredClientAppTO(final ClientApp clientApp) {\n+        RegisteredClientAppTO registeredClientAppTO = new RegisteredClientAppTO();\n+        registeredClientAppTO.setClientAppTO(clientAppDataBinder.getClientAppTO(clientApp));\n+\n+        try {\n+            if (clientApp.getAuthPolicy() != null) {\n+                registeredClientAppTO.setAuthPolicyConf(build((clientApp.getAuthPolicy()).getConfiguration()));\n+            } else if (clientApp.getRealm().getAuthPolicy() != null) {\n+                registeredClientAppTO.\n+                        setAuthPolicyConf(build((clientApp.getRealm().getAuthPolicy()).getConfiguration()));\n+            } else {\n+                registeredClientAppTO.setAuthPolicyConf(null);\n+            }\n+\n+            if (clientApp.getAccessPolicy() != null) {\n+                registeredClientAppTO.setAccessPolicyConf(build((clientApp.getAccessPolicy()).getConfiguration()));\n+            } else if (clientApp.getRealm().getAccessPolicy() != null) {\n+                registeredClientAppTO.setAccessPolicyConf(build((clientApp.getRealm().getAccessPolicy()).\n+                        getConfiguration()));\n+            } else {\n+                registeredClientAppTO.setAccessPolicyConf(null);\n+            }\n+\n+            if (clientApp.getAttrReleasePolicy() != null) {\n+                registeredClientAppTO.setAttrReleasePolicyConf(build((clientApp.getAttrReleasePolicy()).\n+                        getConfiguration()));\n+            } else if (clientApp.getRealm().getAttrReleasePolicy() != null) {\n+                registeredClientAppTO.setAttrReleasePolicyConf(build((clientApp.getRealm().getAttrReleasePolicy()).\n+                        getConfiguration()));\n+            } else {\n+                registeredClientAppTO.setAttrReleasePolicyConf(null);\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"While building the configuration from an application's policy \", e);\n+        }\n+\n+        return registeredClientAppTO;\n+    }\n+\n+    private <T> T build(final Implementation impl) throws InstantiationException, IllegalAccessException,\n+            ClassNotFoundException {\n+        return ImplementationManager.build(impl);\n+    }\n+}"},{"sha":"42fe26f5c3e692ca20cfd206b272ca0dcafc1aef","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RegisteredClientAppITCase.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRegisteredClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRegisteredClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRegisteredClientAppITCase.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.List;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.rest.api.service.RegisteredClientAppService;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+public class RegisteredClientAppITCase extends AbstractITCase {\n+\n+    protected static RegisteredClientAppService registeredClientAppService;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        SyncopeClient anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n+        registeredClientAppService = anonymous.getService(RegisteredClientAppService.class);\n+    }\n+\n+    @Test\n+    public void list() {\n+        createClientApp(ClientAppType.OIDCRP, buildOIDCRP());\n+\n+        List<RegisteredClientAppTO> list = registeredClientAppService.list();\n+        assertFalse(list.isEmpty());\n+    }\n+\n+    @Test\n+    public void read() {\n+        OIDCRPTO oidcrpto = createClientApp(ClientAppType.OIDCRP, buildOIDCRP());\n+        RegisteredClientAppTO registeredOidcClientApp = registeredClientAppService.read(oidcrpto.getClientAppId());\n+        assertNotNull(registeredOidcClientApp);\n+\n+        registeredOidcClientApp = registeredClientAppService.read(oidcrpto.getClientAppId(),\n+                ClientAppType.OIDCRP);\n+        assertNotNull(registeredOidcClientApp);\n+\n+        registeredOidcClientApp = registeredClientAppService.read(oidcrpto.getName());\n+        assertNotNull(registeredOidcClientApp);\n+\n+        registeredOidcClientApp = registeredClientAppService.read(oidcrpto.getName(), ClientAppType.OIDCRP);\n+        assertNotNull(registeredOidcClientApp);\n+        \n+        \n+        SAML2SPTO samlspto = createClientApp(ClientAppType.SAML2SP, buildSAML2SP());\n+        RegisteredClientAppTO registeredSamlClientApp=  registeredClientAppService.read(samlspto.getClientAppId());\n+        assertNotNull(registeredSamlClientApp);\n+\n+        registeredSamlClientApp = registeredClientAppService.read(samlspto.getClientAppId(),\n+                ClientAppType.SAML2SP);\n+        assertNotNull(registeredSamlClientApp);\n+\n+        registeredSamlClientApp = registeredClientAppService.read(samlspto.getName());\n+        assertNotNull(registeredSamlClientApp);\n+\n+        registeredSamlClientApp = registeredClientAppService.read(samlspto.getName(), ClientAppType.SAML2SP);\n+        assertNotNull(registeredSamlClientApp);\n+    }\n+\n+\n+    @Test\n+    public void delete() {\n+        SAML2SPTO samlspto = createClientApp(ClientAppType.SAML2SP, buildSAML2SP());\n+\n+        assertTrue(registeredClientAppService.delete(samlspto.getName()));\n+        try {\n+            clientAppService.read(ClientAppType.SAML2SP, samlspto.getKey());\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void create() {\n+        OIDCRPTO oidcrpto = buildOIDCRP();\n+        RegisteredClientAppTO appTO = new RegisteredClientAppTO();\n+        appTO.setClientAppTO(oidcrpto);\n+\n+        registeredClientAppService.create(appTO);\n+        assertNotNull(registeredClientAppService.read(oidcrpto.getClientAppId()));\n+    }\n+\n+}"}]}