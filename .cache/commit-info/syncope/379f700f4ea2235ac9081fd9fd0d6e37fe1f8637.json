{"sha":"379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM3OWY3MDBmNGVhMjIzNWFjOTA4MWZkOWZkMGQ2ZTM3ZmUxZjg2Mzc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-06T15:57:28Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-06T15:57:28Z"},"message":"[SYNCOPE-145] Removing UserRequest concept and injecting selfservice operations into the normal user workflow, with support for approval\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1539376 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46cef2239c8ff0f962dd09ba2976660eef09d308","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/46cef2239c8ff0f962dd09ba2976660eef09d308"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1dde8bf764b4a82bf07c01afdeb79e4829000194","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1dde8bf764b4a82bf07c01afdeb79e4829000194","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1dde8bf764b4a82bf07c01afdeb79e4829000194"}],"stats":{"total":4884,"additions":1761,"deletions":3123},"files":[{"sha":"bc7fd251b3c4b19fd78c3be474aaa307c51a80e8","filename":"client/src/main/java/org/apache/syncope/client/SyncopeClient.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -24,6 +24,8 @@\n import javax.ws.rs.core.MediaType;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.rest.RestClientFactoryBean;\n+import org.apache.syncope.common.services.UserSelfService;\n+import org.apache.syncope.common.types.RESTHeaders;\n \n /**\n  * Entry point for client access to all REST services exposed by Syncope core; obtain instances via\n@@ -67,4 +69,9 @@ public <T> T getObject(final URI location, final Class<?> serviceClass, final Cl\n \n         return webClient.get(resultClass);\n     }\n+\n+    public boolean isSelfRegistrationAllowed() {\n+        return Boolean.valueOf(restClientFactory.createServiceInstance(UserSelfService.class, mediaType, null, null).\n+                getOptions().getHeaderString(RESTHeaders.SELFREGISTRATION_ALLOWED.toString()));\n+    }\n }"},{"sha":"234625b3b281e4f3e4c7f552939bfc07011fabad","filename":"client/src/main/java/org/apache/syncope/client/SyncopeClientFactoryBean.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClientFactoryBean.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -79,7 +79,7 @@ protected JacksonJaxbJsonProvider defaultJsonProvider() {\n         return new JacksonJaxbJsonProvider();\n     }\n \n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected JAXBElementProvider defaultJAXBProvider() {\n         JAXBElementProvider defaultJAXBProvider = new JAXBElementProvider();\n \n@@ -194,6 +194,10 @@ public SyncopeClientFactoryBean setRestClientFactoryBean(final RestClientFactory\n         return this;\n     }\n \n+    public SyncopeClient createAnonymous() {\n+        return create(null, null);\n+    }\n+\n     public SyncopeClient create(final String username, final String password) {\n         return new SyncopeClient(getContentType().getMediaType(), getRestClientFactoryBean(), username, password);\n     }"},{"sha":"00a15e9f3384f5976a3a6bdd32b72a4d30bbadff","filename":"common/src/main/java/org/apache/syncope/common/report/AbstractReportletConf.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FAbstractReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FAbstractReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FAbstractReportletConf.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,11 +18,13 @@\n  */\r\n package org.apache.syncope.common.report;\r\n \r\n+import javax.xml.bind.annotation.XmlSeeAlso;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n import org.apache.syncope.common.AbstractBaseBean;\r\n \r\n @XmlType\r\n+@XmlSeeAlso({ StaticReportletConf.class, UserReportletConf.class, RoleReportletConf.class })\r\n public abstract class AbstractReportletConf extends AbstractBaseBean implements ReportletConf {\r\n \r\n     private static final long serialVersionUID = -6130008602014516608L;\r"},{"sha":"4e5720f23dccd601979b795c305f8ff2849f3394","filename":"common/src/main/java/org/apache/syncope/common/services/UserRequestService.java","status":"removed","additions":0,"deletions":102,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,102 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.services;\r\n-\r\n-import java.util.List;\r\n-import javax.ws.rs.Consumes;\r\n-\r\n-import javax.ws.rs.DELETE;\r\n-import javax.ws.rs.GET;\r\n-import javax.ws.rs.MatrixParam;\r\n-import javax.ws.rs.OPTIONS;\r\n-import javax.ws.rs.POST;\r\n-import javax.ws.rs.Path;\r\n-import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.core.MediaType;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.syncope.common.mod.UserMod;\r\n-\r\n-import org.apache.syncope.common.to.UserRequestTO;\r\n-import org.apache.syncope.common.to.UserTO;\r\n-\r\n-@Path(\"userrequests\")\r\n-@Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-@Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n-public interface UserRequestService {\r\n-\r\n-    /**\r\n-     * @return Response contains special syncope HTTP header indicating if user is allowed to\r\n-     * make a create UserRequest\r\n-     * @see org.apache.syncope.common.SyncopeConstants.REST_USER_REQUEST_CREATE_ALLOWED\r\n-     */\r\n-    @OPTIONS\r\n-    Response getOptions();\r\n-\r\n-    /**\r\n-     * @param userRequestTO Request for user to be created\r\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created user request\r\n-     */\r\n-    @POST\r\n-    Response create(UserRequestTO userRequestTO);\r\n-\r\n-    /**\r\n-     * @return Returns list of all UserRequests.\r\n-     */\r\n-    @GET\r\n-    List<UserRequestTO> list();\r\n-\r\n-    /**\r\n-     * @param username user name\r\n-     * @return Returns list of all UserRequests of the given user.\r\n-     */\r\n-    @GET\r\n-    List<UserRequestTO> listByUsername(@MatrixParam(\"username\") String username);\r\n-\r\n-    /**\r\n-     * @param requestId ID of UserRequest to be read\r\n-     * @return Returns UserRequest with matching requestId.\r\n-     */\r\n-    @GET\r\n-    @Path(\"{requestId}\")\r\n-    UserRequestTO read(@PathParam(\"requestId\") Long requestId);\r\n-\r\n-    /**\r\n-     * @param requestId ID of UserRequest to be deleted.\r\n-     */\r\n-    @DELETE\r\n-    @Path(\"{requestId}\")\r\n-    void delete(@PathParam(\"requestId\") Long requestId);\r\n-\r\n-    @GET\r\n-    @Path(\"claim/{requestId}\")\r\n-    UserRequestTO claim(@PathParam(\"requestId\") Long requestId);\r\n-\r\n-    @POST\r\n-    @Path(\"execute/create/{requestId}\")\r\n-    UserTO executeCreate(@PathParam(\"requestId\") Long requestId, UserTO reviewed);\r\n-\r\n-    @POST\r\n-    @Path(\"execute/update/{requestId}\")\r\n-    UserTO executeUpdate(@PathParam(\"requestId\") Long requestId, UserMod changes);\r\n-\r\n-    @POST\r\n-    @Path(\"execute/delete/{requestId}\")\r\n-    UserTO executeDelete(@PathParam(\"requestId\") Long requestId);\r\n-}\r"},{"sha":"e459261ebb69fe9174b5959483366a47e3116921","filename":"common/src/main/java/org/apache/syncope/common/services/UserSelfService.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserSelfService.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.services;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.OPTIONS;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.to.UserTO;\n+\n+@Path(\"users/self\")\n+@Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+@Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+public interface UserSelfService {\n+\n+    /**\n+     * @return Response contains special syncope HTTP header indicating if user self registration is allowed\n+     * @see org.apache.syncope.common.types.RESTHeaders#SELFREGISTRATION_ALLOWED\n+     */\n+    @OPTIONS\n+    Response getOptions();\n+\n+    @POST\n+    Response create(UserTO userTO);\n+\n+    @GET\n+    UserTO read();\n+\n+    @POST\n+    @Path(\"{userId}\")\n+    Response update(@PathParam(\"userId\") Long userId, UserMod userMod);\n+\n+    @DELETE\n+    Response delete();\n+\n+}"},{"sha":"680e1b37731490f90bef29be9a63ed76da13d25d","filename":"common/src/main/java/org/apache/syncope/common/services/UserService.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -70,19 +70,6 @@ public interface UserService {\n     })\n     UserTO read(@Description(\"id of user to be read\") @PathParam(\"userId\") Long userId);\n \n-    /**\n-     * Reads data about the authenticated user.\n-     *\n-     * @return Data about the authenticated user\n-     */\n-    @GET\n-    @Path(\"self\")\n-    @Descriptions({\n-        @Description(target = DocTarget.METHOD, value = \"Reads data about the authenticated user\"),\n-        @Description(target = DocTarget.RETURN, value = \"Data about the authenticated user\")\n-    })\n-    UserTO readSelf();\n-\n     /**\n      * Returns the number of existing users.\n      *"},{"sha":"8392947bb457db72ae5d71d01e6547f051070122","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractPolicyTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractPolicyTO.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -30,7 +30,7 @@\n \r\n @XmlRootElement(name = \"policy\")\r\n @XmlType\r\n-@XmlSeeAlso({AccountPolicyTO.class, PasswordPolicyTO.class, SyncPolicyTO.class})\r\n+@XmlSeeAlso({ AccountPolicyTO.class, PasswordPolicyTO.class, SyncPolicyTO.class })\r\n @JsonTypeInfo(use = Id.CLASS, include = As.PROPERTY, property = \"@class\")\r\n public abstract class AbstractPolicyTO extends AbstractBaseBean {\r\n \r"},{"sha":"a2c715203ffcc425b93fdc99674cd5babe3fb60d","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSchemaTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -27,7 +27,7 @@\n \r\n @XmlRootElement(name = \"abstractSchema\")\r\n @XmlType\r\n-@XmlSeeAlso({SchemaTO.class, DerSchemaTO.class, VirSchemaTO.class})\r\n+@XmlSeeAlso({ SchemaTO.class, DerSchemaTO.class, VirSchemaTO.class })\r\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n public abstract class AbstractSchemaTO extends AbstractBaseBean {\r\n \r"},{"sha":"1de73c3fe16c36f2803fe07480a12048ba19b673","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractTaskTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractTaskTO.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -36,7 +36,9 @@\n \r\n @XmlRootElement(name = \"task\")\r\n @XmlType\r\n-@XmlSeeAlso({SyncTaskTO.class, NotificationTaskTO.class, SyncTaskTO.class, SchedTaskTO.class, PropagationTaskTO.class})\r\n+@XmlSeeAlso({\r\n+    SyncTaskTO.class, NotificationTaskTO.class, SyncTaskTO.class, SchedTaskTO.class, PropagationTaskTO.class\r\n+})\r\n @JsonTypeInfo(use = Id.CLASS, include = As.PROPERTY, property = \"@class\")\r\n public abstract class AbstractTaskTO extends AbstractBaseBean {\r\n \r"},{"sha":"6402b3535d64487f869c004cb8efd481540bbd12","filename":"common/src/main/java/org/apache/syncope/common/to/ReportTO.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportTO.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -26,17 +26,13 @@\n import javax.xml.bind.annotation.XmlElement;\r\n import javax.xml.bind.annotation.XmlElementWrapper;\r\n import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlSeeAlso;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n import org.apache.syncope.common.AbstractBaseBean;\r\n import org.apache.syncope.common.report.AbstractReportletConf;\r\n-import org.apache.syncope.common.report.StaticReportletConf;\r\n-import org.apache.syncope.common.report.UserReportletConf;\r\n \r\n @XmlRootElement(name = \"report\")\r\n @XmlType\r\n-@XmlSeeAlso({UserReportletConf.class, StaticReportletConf.class})\r\n public class ReportTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = 5274568072084814410L;\r\n@@ -73,7 +69,7 @@ public String getName() {\n         return name;\r\n     }\r\n \r\n-    public void setName(String name) {\r\n+    public void setName(final String name) {\r\n         this.name = name;\r\n     }\r\n \r\n@@ -88,7 +84,7 @@ public String getCronExpression() {\n         return cronExpression;\r\n     }\r\n \r\n-    public void setCronExpression(String cronExpression) {\r\n+    public void setCronExpression(final String cronExpression) {\r\n         this.cronExpression = cronExpression;\r\n     }\r\n \r\n@@ -103,7 +99,7 @@ public String getLatestExecStatus() {\n         return latestExecStatus;\r\n     }\r\n \r\n-    public void setLatestExecStatus(String latestExecStatus) {\r\n+    public void setLatestExecStatus(final String latestExecStatus) {\r\n         this.latestExecStatus = latestExecStatus;\r\n     }\r\n \r\n@@ -113,7 +109,7 @@ public Date getLastExec() {\n                 : new Date(lastExec.getTime());\r\n     }\r\n \r\n-    public void setLastExec(Date lastExec) {\r\n+    public void setLastExec(final Date lastExec) {\r\n         if (lastExec != null) {\r\n             this.lastExec = new Date(lastExec.getTime());\r\n         }\r\n@@ -125,7 +121,7 @@ public Date getNextExec() {\n                 : new Date(nextExec.getTime());\r\n     }\r\n \r\n-    public void setNextExec(Date nextExec) {\r\n+    public void setNextExec(final Date nextExec) {\r\n         if (nextExec != null) {\r\n             this.nextExec = new Date(nextExec.getTime());\r\n         }\r\n@@ -137,7 +133,7 @@ public Date getStartDate() {\n                 : new Date(startDate.getTime());\r\n     }\r\n \r\n-    public void setStartDate(Date startDate) {\r\n+    public void setStartDate(final Date startDate) {\r\n         if (startDate != null) {\r\n             this.startDate = new Date(startDate.getTime());\r\n         }\r\n@@ -149,7 +145,7 @@ public Date getEndDate() {\n                 : new Date(endDate.getTime());\r\n     }\r\n \r\n-    public void setEndDate(Date endDate) {\r\n+    public void setEndDate(final Date endDate) {\r\n         if (endDate != null) {\r\n             this.endDate = new Date(endDate.getTime());\r\n         }\r"},{"sha":"07386cb46eac5f8467a51f2b132a8d824d4d05fb","filename":"common/src/main/java/org/apache/syncope/common/to/UserRequestOptionsTO.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestOptionsTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestOptionsTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestOptionsTO.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.to;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-\n-@XmlRootElement\n-public class UserRequestOptionsTO {\n-\n-    private boolean createAllowed;\n-\n-    public UserRequestOptionsTO(final boolean createAllowed) {\n-        super();\n-        this.createAllowed = createAllowed;\n-    }\n-\n-    public boolean isCreateAllowed() {\n-        return createAllowed;\n-    }\n-}"},{"sha":"336abc0097f610da6e59687d8f8d35f474911f06","filename":"common/src/main/java/org/apache/syncope/common/to/UserRequestTO.java","status":"removed","additions":0,"deletions":195,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,195 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.to;\r\n-\r\n-import java.util.Date;\r\n-import javax.xml.bind.annotation.XmlRootElement;\r\n-import javax.xml.bind.annotation.XmlType;\r\n-\r\n-import org.apache.syncope.common.AbstractBaseBean;\r\n-import org.apache.syncope.common.mod.UserMod;\r\n-import org.apache.syncope.common.types.UserRequestType;\r\n-\r\n-@XmlRootElement(name = \"userRequest\")\r\n-@XmlType\r\n-public class UserRequestTO extends AbstractBaseBean {\r\n-\r\n-    private static final long serialVersionUID = 1228351243795629329L;\r\n-\r\n-    private long id;\r\n-\r\n-    private UserTO userTO;\r\n-\r\n-    private UserMod userMod;\r\n-\r\n-    private Long userId;\r\n-\r\n-    private String username;\r\n-\r\n-    private UserRequestType type;\r\n-\r\n-    private boolean executed;\r\n-\r\n-    /**\r\n-     * Username of the last user who claimed the request.\r\n-     */\r\n-    private String owner;\r\n-\r\n-    /**\r\n-     * Creation date.\r\n-     */\r\n-    private Date creationDate;\r\n-\r\n-    /**\r\n-     * Claim date.\r\n-     */\r\n-    private Date claimDate;\r\n-\r\n-    /**\r\n-     * Execution date.\r\n-     */\r\n-    private Date executionDate;\r\n-\r\n-    public UserRequestTO() {\r\n-    }\r\n-\r\n-    /**\r\n-     * Request to create an user.\r\n-     *\r\n-     * @param userTO\r\n-     */\r\n-    public UserRequestTO(final UserTO userTO) {\r\n-        this.type = UserRequestType.CREATE;\r\n-        this.userTO = userTO;\r\n-    }\r\n-\r\n-    /**\r\n-     * Request to update an user.\r\n-     *\r\n-     * @param userMod\r\n-     */\r\n-    public UserRequestTO(final UserMod userMod) {\r\n-        this.userMod = userMod;\r\n-        this.type = UserRequestType.UPDATE;\r\n-    }\r\n-\r\n-    /**\r\n-     * Request to delete a user.\r\n-     *\r\n-     * @param userId\r\n-     */\r\n-    public UserRequestTO(final long userId) {\r\n-        this.type = UserRequestType.DELETE;\r\n-        this.userId = userId;\r\n-    }\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public UserRequestType getType() {\r\n-        return type;\r\n-    }\r\n-\r\n-    public void setType(final UserRequestType type) {\r\n-        this.type = type;\r\n-    }\r\n-\r\n-    public UserTO getUserTO() {\r\n-        return type != UserRequestType.CREATE\r\n-                ? null\r\n-                : userTO;\r\n-    }\r\n-\r\n-    public void setUserTO(final UserTO userTO) {\r\n-        this.userTO = userTO;\r\n-    }\r\n-\r\n-    public UserMod getUserMod() {\r\n-        return type != UserRequestType.UPDATE\r\n-                ? null\r\n-                : userMod;\r\n-    }\r\n-\r\n-    public void setUserMod(final UserMod userMod) {\r\n-        this.userMod = userMod;\r\n-    }\r\n-\r\n-    public Long getUserId() {\r\n-        return type != UserRequestType.DELETE\r\n-                ? null\r\n-                : userId;\r\n-    }\r\n-\r\n-    public void setUserId(Long userId) {\r\n-        this.userId = userId;\r\n-    }\r\n-\r\n-    public String getUsername() {\r\n-        return username;\r\n-    }\r\n-\r\n-    public void setUsername(String username) {\r\n-        this.username = username;\r\n-    }\r\n-\r\n-    public void setExecuted(boolean executed) {\r\n-        this.executed = executed;\r\n-    }\r\n-\r\n-    public boolean isExecuted() {\r\n-        return executed;\r\n-    }\r\n-\r\n-    public String getOwner() {\r\n-        return owner;\r\n-    }\r\n-\r\n-    public void setOwner(String owner) {\r\n-        this.owner = owner;\r\n-    }\r\n-\r\n-    public Date getCreationDate() {\r\n-        return creationDate;\r\n-    }\r\n-\r\n-    public void setCreationDate(Date creationDate) {\r\n-        this.creationDate = creationDate;\r\n-    }\r\n-\r\n-    public Date getClaimDate() {\r\n-        return claimDate;\r\n-    }\r\n-\r\n-    public void setClaimDate(Date claimDate) {\r\n-        this.claimDate = claimDate;\r\n-    }\r\n-\r\n-    public Date getExecutionDate() {\r\n-        return executionDate;\r\n-    }\r\n-\r\n-    public void setExecutionDate(Date executionDate) {\r\n-        this.executionDate = executionDate;\r\n-    }\r\n-}\r"},{"sha":"dd2a7abb574304e300ea068513ff1c4e4302dfb0","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":1,"deletions":15,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -41,7 +41,6 @@ public enum Category {\n         schema(SchemaSubCategory.class),\r\n         task(TaskSubCategory.class),\r\n         user(UserSubCategory.class),\r\n-        userRequest(UserRequestSubCategory.class),\r\n         workflow(WorkflowSubCategory.class);\r\n \r\n         private Class<? extends Enum<?>> subCategory;\r\n@@ -217,6 +216,7 @@ public enum TaskSubCategory {\n     @XmlEnum\r\n     public enum UserSubCategory {\r\n \r\n+        selfRegistrationAllowed,\r\n         list,\r\n         create,\r\n         read,\r\n@@ -233,20 +233,6 @@ public enum UserSubCategory {\n \r\n     }\r\n \r\n-    @XmlEnum\r\n-    public enum UserRequestSubCategory {\r\n-\r\n-        list,\r\n-        create,\r\n-        read,\r\n-        update,\r\n-        delete,\r\n-        isCreateAllowed,\r\n-        execute,\r\n-        claim\r\n-\r\n-    }\r\n-\r\n     @XmlEnum\r\n     public enum WorkflowSubCategory {\r\n \r"},{"sha":"a393c87d782bf2c7aa7af37364c79816b7195e34","filename":"common/src/main/java/org/apache/syncope/common/types/RESTHeaders.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FRESTHeaders.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -34,7 +34,7 @@ public enum RESTHeaders {\n     /**\n      * Option key stating if user request create is allowed or not.\n      */\n-    USERREQUEST_CREATE_ALLOWED(\"Syncope.UserRequestCreate.Allowed\"),\n+    SELFREGISTRATION_ALLOWED(\"Syncope.SelfRegistration.Allowed\"),\n     /**\n      * HTTP header key for object ID assigned to an object after its creation.\n      */"},{"sha":"d2b6700ff7b2eea089d3c7ee675cf61c9b3a8fbd","filename":"common/src/main/java/org/apache/syncope/common/types/UserRequestType.java","status":"removed","additions":0,"deletions":34,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUserRequestType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUserRequestType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUserRequestType.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,34 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.types;\r\n-\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n-@XmlEnum\r\n-public enum UserRequestType {\r\n-\r\n-    CREATE,\r\n-    UPDATE,\r\n-    DELETE;\r\n-\r\n-    public static UserRequestType fromString(final String value) {\r\n-        return UserRequestType.valueOf(value.toUpperCase());\r\n-    }\r\n-\r\n-}\r"},{"sha":"4b272eec527e747beb9ca502d7bb242567cd00ff","filename":"common/src/main/java/org/apache/syncope/common/util/AttributableOperations.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -230,10 +230,14 @@ public static UserMod diff(final UserTO updated, final UserTO original, final bo\n             membMod.setRole(entry.getValue().getRoleId());\r\n \r\n             if (originalMembs.containsKey(entry.getKey())) {\r\n-                diff(entry.getValue(), originalMembs.get(entry.getKey()), membMod, false);\r\n+                // if memberships are actually same, just make the isEmpty() call below succeed\r\n+                if (entry.getValue().equals(originalMembs.get(entry.getKey()))) {\r\n+                    membMod.setRole(0);\r\n+                } else {\r\n+                    diff(entry.getValue(), originalMembs.get(entry.getKey()), membMod, false);\r\n+                }\r\n             } else {\r\n                 for (AttributeTO attr : entry.getValue().getAttrs()) {\r\n-\r\n                     AttributeMod attrMod = new AttributeMod();\r\n                     attrMod.setSchema(attr.getSchema());\r\n                     attrMod.getValuesToBeAdded().addAll(attr.getValues());\r"},{"sha":"294a8bce8438f21f36d6f6eacd942bc5f5c0d8d5","filename":"console/src/main/java/org/apache/syncope/console/SyncopeApplication.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeApplication.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -32,11 +32,10 @@\n import org.apache.syncope.console.pages.Schema;\n import org.apache.syncope.console.pages.Tasks;\n import org.apache.syncope.console.pages.Todo;\n-import org.apache.syncope.console.pages.UserModalPage;\n-import org.apache.syncope.console.pages.UserRequestModalPage;\n+import org.apache.syncope.console.pages.UserSelfModalPage;\n import org.apache.syncope.console.pages.Users;\n import org.apache.syncope.console.pages.WelcomePage;\n-import org.apache.syncope.console.rest.UserRestClient;\n+import org.apache.syncope.console.rest.UserSelfRestClient;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.RestartResponseAtInterceptPageException;\n@@ -189,7 +188,7 @@ public void onClick(final AjaxRequestTarget target) {\n         page.add(new BookmarkablePageLink<Void>(\"logout\", Logout.class));\n     }\n \n-    public void setupEditProfileModal(final WebPage page, final UserRestClient userRestClient) {\n+    public void setupEditProfileModal(final WebPage page, final UserSelfRestClient userSelfRestClient) {\n         // Modal window for editing user profile\n         final ModalWindow editProfileModalWin = new ModalWindow(\"editProfileModal\");\n         editProfileModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n@@ -205,7 +204,7 @@ public void setupEditProfileModal(final WebPage page, final UserRestClient userR\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 final UserTO userTO = SyncopeSession.get().isAuthenticated()\n-                        ? userRestClient.readSelf()\n+                        ? userSelfRestClient.read()\n                         : new UserTO();\n \n                 editProfileModalWin.setPageCreator(new ModalWindow.PageCreator() {\n@@ -214,8 +213,7 @@ public void onClick(final AjaxRequestTarget target) {\n \n                     @Override\n                     public Page createPage() {\n-                        return new UserRequestModalPage(page.getPageReference(), editProfileModalWin,\n-                                userTO, UserModalPage.Mode.SELF);\n+                        return new UserSelfModalPage(page.getPageReference(), editProfileModalWin, userTO);\n                     }\n                 });\n "},{"sha":"0e9cf9b101b962f9bc100cfefe12c9c77ab43e07","filename":"console/src/main/java/org/apache/syncope/console/SyncopeSession.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -57,6 +57,10 @@ public class SyncopeSession extends WebSession {\n \n     private final SyncopeClientFactoryBean clientFactory;\n \n+    private final String anonymousUser;\n+\n+    private final String anonymousKey;\n+\n     private final Map<Integer, SyncopeClient> clients = new HashMap<Integer, SyncopeClient>();\n \n     public static SyncopeSession get() {\n@@ -70,12 +74,25 @@ public SyncopeSession(final Request request) {\n                 getWebApplicationContext(WebApplication.get().getServletContext());\n \n         clientFactory = applicationContext.getBean(SyncopeClientFactoryBean.class);\n+        anonymousUser = applicationContext.getBean(\"anonymousUser\", String.class);\n+        anonymousKey = applicationContext.getBean(\"anonymousKey\", String.class);\n+    }\n+\n+    public boolean isSelfRegistrationAllowed() {\n+        SyncopeClient client = clients.isEmpty()\n+                ? clientFactory.createAnonymous()\n+                : clients.values().iterator().next();\n+        return client.isSelfRegistrationAllowed();\n     }\n \n     public <T> T getService(final Class<T> service) {\n         return getService(service, this.username, this.password);\n     }\n \n+    public <T> T getAnonymousService(final Class<T> service) {\n+        return getService(service, this.anonymousUser, this.anonymousKey);\n+    }\n+\n     public <T> T getService(final Class<T> serviceClass, final String username, final String password) {\n         final int clientKey = new HashCodeBuilder().\n                 append(username)."},{"sha":"2b46f5f7dad976509c6277e6a8282b430a0dc2f3","filename":"console/src/main/java/org/apache/syncope/console/commons/Constants.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -80,9 +80,7 @@ public final class Constants {\n \n     public static final String PREF_SYNC_TASKS_PAGINATOR_ROWS = \"synctasks.paginator.rows\";\n \n-    public static final String PREF_APPROVAL_PAGINATOR_ROWS = \"approval.paginator.rows\";\n-\n-    public static final String PREF_USER_REQUEST_PAGINATOR_ROWS = \"userRequest.paginator.rows\";\n+    public static final String PREF_TODO_PAGINATOR_ROWS = \"todo.paginator.rows\";\n \n     public static final String PREF_REPORT_PAGINATOR_ROWS = \"report.paginator.rows\";\n "},{"sha":"312dace72e76f45ce51c26c8bb10c1ed0f443f6f","filename":"console/src/main/java/org/apache/syncope/console/pages/AbstractBasePage.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractBasePage.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.console.rest.SchemaRestClient;\n import org.apache.syncope.console.rest.TaskRestClient;\n import org.apache.syncope.console.rest.UserRestClient;\n+import org.apache.syncope.console.rest.UserSelfRestClient;\n import org.apache.syncope.markup.head.MetaHeaderItem;\n import org.apache.wicket.markup.head.HeaderItem;\n import org.apache.wicket.markup.html.WebPage;\n@@ -64,6 +65,9 @@ public class AbstractBasePage extends WebPage {\n     @SpringBean\n     protected UserRestClient userRestClient;\n \n+    @SpringBean\n+    protected UserSelfRestClient userSelfRestClient;\n+\n     @SpringBean\n     protected RoleRestClient roleRestClient;\n "},{"sha":"22d0b936c9cf37cbd8f4864a188a785dbd9471bd","filename":"console/src/main/java/org/apache/syncope/console/pages/BasePage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -81,7 +81,7 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n             }\n         }\n \n-        ((SyncopeApplication) getApplication()).setupEditProfileModal(this, userRestClient);\n+        ((SyncopeApplication) getApplication()).setupEditProfileModal(this, userSelfRestClient);\n     }\n \n     @Override"},{"sha":"79c4b8977395ab8ffdb513b35042f9a2d063a692","filename":"console/src/main/java/org/apache/syncope/console/pages/EditUserModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -45,7 +45,7 @@ public class EditUserModalPage extends UserModalPage {\n \n     protected Form form;\n \n-    private UserTO initialUserTO = null;\n+    private final UserTO initialUserTO;\n \n     private StatusPanel statusPanel;\n "},{"sha":"87768acef3022fc21ef88196be372cb809435f9f","filename":"console/src/main/java/org/apache/syncope/console/pages/Login.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.console.commons.Constants;\n-import org.apache.syncope.console.rest.UserRequestRestClient;\n+import org.apache.syncope.console.rest.UserSelfRestClient;\n import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n import org.apache.syncope.console.wicket.markup.html.form.LinkPanel;\n import org.apache.wicket.Page;\n@@ -83,7 +83,7 @@ public class Login extends WebPage {\n     private String anonymousKey;\n \n     @SpringBean\n-    private UserRequestRestClient userReqRestClient;\n+    private UserSelfRestClient userSelfRestClient;\n \n     private Form<Void> form;\n \n@@ -145,7 +145,7 @@ public void onSubmit() {\n         add(editProfileModalWin);\n \n         Fragment selfRegFrag;\n-        if (userReqRestClient.isSelfRegistrationAllowed()) {\n+        if (userSelfRestClient.isSelfRegistrationAllowed()) {\n             selfRegFrag = new Fragment(\"selfRegistration\", \"selfRegAllowed\", this);\n \n             final AjaxLink<Void> selfRegLink = new ClearIndicatingAjaxLink<Void>(\"link\", getPageReference()) {\n@@ -163,8 +163,8 @@ public Page createPage() {\n                             // anonymous authentication needed for self-registration\n                             authenticate(anonymousUser, anonymousKey);\n \n-                            return new UserRequestModalPage(Login.this.getPageReference(), editProfileModalWin,\n-                                    new UserTO(), UserModalPage.Mode.SELF);\n+                            return new UserSelfModalPage(\n+                                    Login.this.getPageReference(), editProfileModalWin, new UserTO());\n                         }\n                     });\n "},{"sha":"91ce82e258131389310d2cfd5c0597056aa5aa3e","filename":"console/src/main/java/org/apache/syncope/console/pages/ResultStatusModalPage.java","status":"modified","additions":87,"deletions":91,"changes":178,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,10 +18,6 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import static org.apache.syncope.common.types.PropagationTaskExecStatus.CREATED;\n-import static org.apache.syncope.common.types.PropagationTaskExecStatus.SUBMITTED;\n-import static org.apache.syncope.common.types.PropagationTaskExecStatus.SUCCESS;\n-\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -122,7 +118,7 @@ private ResultStatusModalPage(final Builder builder) {\n         add(container);\n \n         final Fragment fragment = new Fragment(\"resultFrag\", mode == UserModalPage.Mode.SELF\n-                ? \"userRequestResultFrag\"\n+                ? \"userSelfResultFrag\"\n                 : \"propagationResultFrag\", this);\n         fragment.setOutputMarkupId(true);\n         container.add(fragment);\n@@ -147,97 +143,97 @@ private ResultStatusModalPage(final Builder builder) {\n             final ListView<PropagationStatusTO> propRes = new ListView<PropagationStatusTO>(\"resources\",\n                     propagations) {\n \n-                private static final long serialVersionUID = -1020475259727720708L;\n-\n-                @Override\n-                protected void populateItem(final ListItem<PropagationStatusTO> item) {\n-                    final PropagationStatusTO propTO = (PropagationStatusTO) item.getDefaultModelObject();\n-\n-                    final ListView attributes = getConnObjectView(propTO);\n-\n-                    final Fragment attrhead;\n-                    if (attributes.getModelObject() == null || attributes.getModelObject().isEmpty()) {\n-                        attrhead = new Fragment(\"attrhead\", \"emptyAttrHeadFrag\", page);\n-                    } else {\n-                        attrhead = new Fragment(\"attrhead\", \"attrHeadFrag\", page);\n-                    }\n-\n-                    item.add(attrhead);\n-                    item.add(attributes);\n-\n-                    attrhead.add(new Label(\"resource\", propTO.getResource()));\n-\n-                    attrhead.add(new Label(\"propagation\", propTO.getStatus() == null\n-                            ? \"UNDEFINED\" : propTO.getStatus().toString()));\n-\n-                    final Image image;\n-                    final String alt, title;\n-                    final ModalWindow failureWindow = new ModalWindow(\"failureWindow\");\n-                    final AjaxLink<?> failureWindowLink = new AjaxLink<Void>(\"showFailureWindow\") {\n-\n-                        private static final long serialVersionUID = -7978723352517770644L;\n-\n-                        @Override\n-                        public void onClick(AjaxRequestTarget target) {\n-                            failureWindow.show(target);\n-                        }\n-                    };\n-\n-                    switch (propTO.getStatus()) {\n-\n-                        case SUCCESS:\n-                        case SUBMITTED:\n-                        case CREATED:\n-                            image = new Image(\"icon\", IMG_STATUSES + Status.ACTIVE.toString()\n-                                    + Constants.PNG_EXT);\n-                            alt = \"success icon\";\n-                            title = \"success\";\n-                            failureWindow.setVisible(false);\n-                            failureWindowLink.setEnabled(false);\n-                            break;\n-\n-                        default:\n-                            image = new Image(\"icon\", IMG_STATUSES + Status.SUSPENDED.toString()\n-                                    + Constants.PNG_EXT);\n-                            alt = \"failure icon\";\n-                            title = \"failure\";\n-                    }\n-\n-                    image.add(new Behavior() {\n-\n-                        private static final long serialVersionUID = 1469628524240283489L;\n+                        private static final long serialVersionUID = -1020475259727720708L;\n \n                         @Override\n-                        public void onComponentTag(final Component component, final ComponentTag tag) {\n-                            tag.put(\"alt\", alt);\n-                            tag.put(\"title\", title);\n-                        }\n-                    });\n-                    final FailureMessageModalPage executionFailureMessagePage;\n-                    if (propTO.getFailureReason() == null) {\n-                        executionFailureMessagePage =\n+                        protected void populateItem(final ListItem<PropagationStatusTO> item) {\n+                            final PropagationStatusTO propTO = (PropagationStatusTO) item.getDefaultModelObject();\n+\n+                            final ListView attributes = getConnObjectView(propTO);\n+\n+                            final Fragment attrhead;\n+                            if (attributes.getModelObject() == null || attributes.getModelObject().isEmpty()) {\n+                                attrhead = new Fragment(\"attrhead\", \"emptyAttrHeadFrag\", page);\n+                            } else {\n+                                attrhead = new Fragment(\"attrhead\", \"attrHeadFrag\", page);\n+                            }\n+\n+                            item.add(attrhead);\n+                            item.add(attributes);\n+\n+                            attrhead.add(new Label(\"resource\", propTO.getResource()));\n+\n+                            attrhead.add(new Label(\"propagation\", propTO.getStatus() == null\n+                                            ? \"UNDEFINED\" : propTO.getStatus().toString()));\n+\n+                            final Image image;\n+                            final String alt, title;\n+                            final ModalWindow failureWindow = new ModalWindow(\"failureWindow\");\n+                            final AjaxLink<?> failureWindowLink = new AjaxLink<Void>(\"showFailureWindow\") {\n+\n+                                private static final long serialVersionUID = -7978723352517770644L;\n+\n+                                @Override\n+                                public void onClick(AjaxRequestTarget target) {\n+                                    failureWindow.show(target);\n+                                }\n+                            };\n+\n+                            switch (propTO.getStatus()) {\n+\n+                                case SUCCESS:\n+                                case SUBMITTED:\n+                                case CREATED:\n+                                    image = new Image(\"icon\", IMG_STATUSES + Status.ACTIVE.toString()\n+                                            + Constants.PNG_EXT);\n+                                    alt = \"success icon\";\n+                                    title = \"success\";\n+                                    failureWindow.setVisible(false);\n+                                    failureWindowLink.setEnabled(false);\n+                                    break;\n+\n+                                default:\n+                                    image = new Image(\"icon\", IMG_STATUSES + Status.SUSPENDED.toString()\n+                                            + Constants.PNG_EXT);\n+                                    alt = \"failure icon\";\n+                                    title = \"failure\";\n+                            }\n+\n+                            image.add(new Behavior() {\n+\n+                                private static final long serialVersionUID = 1469628524240283489L;\n+\n+                                @Override\n+                                public void onComponentTag(final Component component, final ComponentTag tag) {\n+                                    tag.put(\"alt\", alt);\n+                                    tag.put(\"title\", title);\n+                                }\n+                            });\n+                            final FailureMessageModalPage executionFailureMessagePage;\n+                            if (propTO.getFailureReason() == null) {\n+                                executionFailureMessagePage =\n                                 new FailureMessageModalPage(failureWindow.getContentId(), StringUtils.EMPTY);\n-                    } else {\n-                        executionFailureMessagePage =\n+                            } else {\n+                                executionFailureMessagePage =\n                                 new FailureMessageModalPage(failureWindow.getContentId(), propTO.getFailureReason());\n-                    }\n-\n-                    failureWindow.setPageCreator(new ModalWindow.PageCreator() {\n-\n-                        private static final long serialVersionUID = -7834632442532690940L;\n-\n-                        @Override\n-                        public Page createPage() {\n-                            return executionFailureMessagePage;\n+                            }\n+\n+                            failureWindow.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                                private static final long serialVersionUID = -7834632442532690940L;\n+\n+                                @Override\n+                                public Page createPage() {\n+                                    return executionFailureMessagePage;\n+                                }\n+                            });\n+                            failureWindow.setCookieName(\"failureWindow\");\n+                            failureWindow.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+                            failureWindowLink.add(image);\n+                            attrhead.add(failureWindowLink);\n+                            attrhead.add(failureWindow);\n                         }\n-                    });\n-                    failureWindow.setCookieName(\"failureWindow\");\n-                    failureWindow.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n-                    failureWindowLink.add(image);\n-                    attrhead.add(failureWindowLink);\n-                    attrhead.add(failureWindow);\n-                }\n-            };\n+                    };\n             fragment.add(propRes);\n         }\n "},{"sha":"5cefdab1cb0a48cf1b75d84549123ff683d1f018","filename":"console/src/main/java/org/apache/syncope/console/pages/Todo.java","status":"modified","additions":33,"deletions":301,"changes":334,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -22,17 +22,13 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.to.UserRequestTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n-import org.apache.syncope.common.types.UserRequestType;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.console.rest.ApprovalRestClient;\n-import org.apache.syncope.console.rest.UserRequestRestClient;\n import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n@@ -49,7 +45,6 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.repeater.Item;\n@@ -65,51 +60,32 @@ public class Todo extends BasePage {\n     private static final long serialVersionUID = -7122136682275797903L;\n \n     @SpringBean\n-    private ApprovalRestClient approvalRestClient;\n+    private ApprovalRestClient restClient;\n \n-    @SpringBean\n-    private UserRequestRestClient userRequestRestClient;\n-\n-    private final ModalWindow editApprovalWin;\n-\n-    private final ModalWindow editUserRequestWin;\n-\n-    private static final int APPROVAL_WIN_HEIGHT = 400;\n-\n-    private static final int APPROVAL_WIN_WIDTH = 600;\n+    private final ModalWindow window;\n \n-    private final static int USER_REQUEST_WIN_HEIGHT = 550;\n+    private static final int WIN_HEIGHT = 400;\n \n-    private final static int USER_REQUESTL_WIN_WIDTH = 800;\n+    private static final int WIN_WIDTH = 600;\n \n     @SpringBean\n     private PreferenceManager prefMan;\n \n-    private WebMarkupContainer approvalContainer;\n+    private WebMarkupContainer container;\n \n-    private WebMarkupContainer userRequestContainer;\n-\n-    private int approvalPaginatorRows;\n-\n-    private int userRequestPaginatorRows;\n+    private int paginatorRows;\n \n     public Todo(final PageParameters parameters) {\n         super(parameters);\n \n-        add(editApprovalWin = new ModalWindow(\"editApprovalWin\"));\n-        add(editUserRequestWin = new ModalWindow(\"editUserRequestWin\"));\n+        add(window = new ModalWindow(\"editApprovalWin\"));\n \n-        setupApproval();\n-        setupUserRequest();\n-    }\n+        container = new WebMarkupContainer(\"approvalContainer\");\n \n-    private void setupApproval() {\n-        approvalContainer = new WebMarkupContainer(\"approvalContainer\");\n-\n-        MetaDataRoleAuthorizationStrategy.authorize(approvalContainer, RENDER, xmlRolesReader.getAllAllowedRoles(\n-                \"Approval\", \"list\"));\n+        MetaDataRoleAuthorizationStrategy.authorize(container, RENDER,\n+                xmlRolesReader.getAllAllowedRoles(\"Approval\", \"list\"));\n \n-        approvalPaginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_APPROVAL_PAGINATOR_ROWS);\n+        paginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_TODO_PAGINATOR_ROWS);\n \n         List<IColumn> columns = new ArrayList<IColumn>();\n         columns.add(new PropertyColumn(new ResourceModel(\"taskId\"), \"taskId\", \"taskId\"));\n@@ -142,13 +118,13 @@ public void populateItem(final Item<ICellPopulator<WorkflowFormTO>> cellItem, fi\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            approvalRestClient.claimForm(formTO.getTaskId());\n+                            restClient.claimForm(formTO.getTaskId());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (SyncopeClientException scee) {\n                             error(getString(Constants.ERROR) + \": \" + scee.getMessage());\n                         }\n                         target.add(feedbackPanel);\n-                        target.add(approvalContainer);\n+                        target.add(container);\n                     }\n                 }, ActionLink.ActionType.CLAIM, \"Approval\");\n \n@@ -158,17 +134,17 @@ public void onClick(final AjaxRequestTarget target) {\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n-                        editApprovalWin.setPageCreator(new ModalWindow.PageCreator() {\n+                        window.setPageCreator(new ModalWindow.PageCreator() {\n \n                             private static final long serialVersionUID = -7834632442532690940L;\n \n                             @Override\n                             public Page createPage() {\n-                                return new ApprovalModalPage(Todo.this.getPageReference(), editApprovalWin, formTO);\n+                                return new ApprovalModalPage(Todo.this.getPageReference(), window, formTO);\n                             }\n                         });\n \n-                        editApprovalWin.show(target);\n+                        window.show(target);\n                     }\n                 }, ActionLink.ActionType.EDIT, \"Approval\",\n                         SyncopeSession.get().getUsername().equals(formTO.getOwner()));\n@@ -178,209 +154,44 @@ public Page createPage() {\n         });\n \n         final AjaxFallbackDefaultDataTable approvalTable = new AjaxFallbackDefaultDataTable(\"approvalTable\", columns,\n-                new ApprovalProvider(), approvalPaginatorRows);\n+                new ApprovalProvider(), paginatorRows);\n \n-        approvalContainer.add(approvalTable);\n-        approvalContainer.setOutputMarkupId(true);\n+        container.add(approvalTable);\n+        container.setOutputMarkupId(true);\n \n-        add(approvalContainer);\n+        add(container);\n \n-        Form approvalPaginatorForm = new Form(\"approvalPaginatorForm\");\n+        Form approvalPaginatorForm = new Form(\"paginatorForm\");\n \n         MetaDataRoleAuthorizationStrategy.authorize(approvalPaginatorForm, RENDER, xmlRolesReader.getAllAllowedRoles(\n                 \"Approval\", \"list\"));\n \n         final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this,\n-                \"approvalPaginatorRows\"), prefMan.getPaginatorChoices());\n+                \"paginatorRows\"), prefMan.getPaginatorChoices());\n \n         rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                prefMan.set(getRequest(), getResponse(), Constants.PREF_APPROVAL_PAGINATOR_ROWS, String.valueOf(\n-                        approvalPaginatorRows));\n-                approvalTable.setItemsPerPage(approvalPaginatorRows);\n+                prefMan.set(getRequest(), getResponse(), Constants.PREF_TODO_PAGINATOR_ROWS, String.valueOf(\n+                        paginatorRows));\n+                approvalTable.setItemsPerPage(paginatorRows);\n \n-                target.add(approvalContainer);\n+                target.add(container);\n             }\n         });\n \n         approvalPaginatorForm.add(rowsChooser);\n         add(approvalPaginatorForm);\n \n-        editApprovalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n-        editApprovalWin.setInitialHeight(APPROVAL_WIN_HEIGHT);\n-        editApprovalWin.setInitialWidth(APPROVAL_WIN_WIDTH);\n-        editApprovalWin.setCookieName(\"edit-approval-modal\");\n+        window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        window.setInitialHeight(WIN_HEIGHT);\n+        window.setInitialWidth(WIN_WIDTH);\n+        window.setCookieName(\"edit-approval-modal\");\n \n-        setWindowClosedCallback(editApprovalWin, approvalContainer);\n-    }\n-\n-    private void setupUserRequest() {\n-        userRequestContainer = new WebMarkupContainer(\"userRequestContainer\");\n-\n-        MetaDataRoleAuthorizationStrategy.authorize(userRequestContainer, RENDER, xmlRolesReader.getAllAllowedRoles(\n-                \"UserRequest\", \"list\"));\n-\n-        userRequestPaginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_USER_REQUEST_PAGINATOR_ROWS);\n-\n-        List<IColumn> columns = new ArrayList<IColumn>();\n-        columns.add(new PropertyColumn(new ResourceModel(\"id\"), \"id\", \"id\"));\n-        columns.add(new PropertyColumn(new ResourceModel(\"type\"), \"type\", \"type\"));\n-        columns.add(new PropertyColumn(new ResourceModel(\"username\"), \"username\", \"username\"));\n-        columns.add(new DatePropertyColumn(new ResourceModel(\"creationDate\"), \"creationDate\", \"creationDate\"));\n-        columns.add(new DatePropertyColumn(new ResourceModel(\"claimDate\"), \"claimDate\", \"claimDate\"));\n-        columns.add(new PropertyColumn(new ResourceModel(\"owner\"), \"owner\", \"owner\"));\n-        columns.add(new AbstractColumn<UserRequestTO, String>(new ResourceModel(\"actions\", \"\")) {\n-\n-            private static final long serialVersionUID = 2054811145491901166L;\n-\n-            @Override\n-            public String getCssClass() {\n-                return \"action\";\n-            }\n-\n-            @Override\n-            public void populateItem(final Item<ICellPopulator<UserRequestTO>> cellItem, final String componentId,\n-                    final IModel<UserRequestTO> model) {\n-\n-                final UserRequestTO request = model.getObject();\n-\n-                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n-\n-                panel.add(new ActionLink() {\n-\n-                    private static final long serialVersionUID = -3722207913631435501L;\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target) {\n-                        try {\n-                            userRequestRestClient.claim(model.getObject().getId());\n-                            info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientException scee) {\n-                            error(getString(Constants.ERROR) + \": \" + scee.getMessage());\n-                        }\n-                        target.add(feedbackPanel);\n-                        target.add(userRequestContainer);\n-                    }\n-                }, ActionLink.ActionType.CLAIM, \"Approval\");\n-\n-                panel.add(new ActionLink() {\n-\n-                    private static final long serialVersionUID = -3722207913631435501L;\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target) {\n-                        editUserRequestWin.setPageCreator(new ModalWindow.PageCreator() {\n-\n-                            private static final long serialVersionUID = -7834632442532690940L;\n-\n-                            @Override\n-                            public Page createPage() {\n-                                return new UserRequestModalPage(Todo.this.getPageReference(), editUserRequestWin,\n-                                        model.getObject(), UserModalPage.Mode.ADMIN);\n-                            }\n-                        });\n-\n-                        editUserRequestWin.show(target);\n-                    }\n-                }, ActionLink.ActionType.EDIT, \"UserRequest\",\n-                        model.getObject().getType() != UserRequestType.DELETE\n-                        && StringUtils.isNotBlank(model.getObject().getOwner())\n-                        && model.getObject().getOwner().equalsIgnoreCase(SyncopeSession.get().getUsername()));\n-\n-                panel.add(new ActionLink() {\n-\n-                    private static final long serialVersionUID = -3722207913631435501L;\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target) {\n-                        try {\n-                            userRequestRestClient.executeDelete(model.getObject().getId());\n-                        } catch (SyncopeClientException e) {\n-                            LOG.error(\"While deleting an user\", e);\n-                            error(e.getMessage());\n-                            return;\n-                        }\n-\n-                        info(getString(Constants.OPERATION_SUCCEEDED));\n-                        target.add(feedbackPanel);\n-\n-                        target.add(userRequestContainer);\n-                    }\n-                }, ActionLink.ActionType.DELETE, \"Users\",\n-                        model.getObject().getType() == UserRequestType.DELETE\n-                        && StringUtils.isNotBlank(model.getObject().getOwner())\n-                        && model.getObject().getOwner().equalsIgnoreCase(SyncopeSession.get().getUsername()));\n-\n-                panel.add(new ActionLink() {\n-\n-                    private static final long serialVersionUID = -3722207913631435501L;\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target) {\n-                        try {\n-                            userRequestRestClient.delete(request.getId());\n-                        } catch (SyncopeClientException e) {\n-                            LOG.error(\"While deleting an user request\", e);\n-                            error(e.getMessage());\n-                            return;\n-                        }\n-\n-                        info(getString(Constants.OPERATION_SUCCEEDED));\n-                        target.add(feedbackPanel);\n-\n-                        target.add(userRequestContainer);\n-                    }\n-                }, ActionLink.ActionType.DELETE, \"UserRequest\",\n-                        StringUtils.isNotBlank(model.getObject().getOwner())\n-                        && model.getObject().getOwner().equalsIgnoreCase(SyncopeSession.get().getUsername()));\n-\n-                cellItem.add(panel);\n-            }\n-        });\n-\n-        final AjaxFallbackDefaultDataTable userRequestTable = new AjaxFallbackDefaultDataTable(\"userRequestTable\",\n-                columns, new UserRequestProvider(), userRequestPaginatorRows);\n-\n-        userRequestContainer.add(userRequestTable);\n-        userRequestContainer.setOutputMarkupId(true);\n-\n-        add(userRequestContainer);\n-\n-        Form userRequestPaginatorForm = new Form(\"userRequestPaginatorForm\");\n-\n-        MetaDataRoleAuthorizationStrategy.authorize(userRequestPaginatorForm, RENDER, xmlRolesReader.getAllAllowedRoles(\n-                \"UserRequest\", \"list\"));\n-\n-        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this,\n-                \"userRequestPaginatorRows\"), prefMan.getPaginatorChoices());\n-\n-        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                prefMan.set(getRequest(), getResponse(), Constants.PREF_USER_REQUEST_PAGINATOR_ROWS, String.valueOf(\n-                        userRequestPaginatorRows));\n-                userRequestTable.setItemsPerPage(userRequestPaginatorRows);\n-\n-                target.add(userRequestContainer);\n-            }\n-        });\n-\n-        userRequestPaginatorForm.add(rowsChooser);\n-        add(userRequestPaginatorForm);\n-\n-        editUserRequestWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n-        editUserRequestWin.setInitialHeight(USER_REQUEST_WIN_HEIGHT);\n-        editUserRequestWin.setInitialWidth(USER_REQUESTL_WIN_WIDTH);\n-        editUserRequestWin.setCookieName(\"edit-userRequest-modal\");\n-\n-        setWindowClosedCallback(editUserRequestWin, userRequestContainer);\n+        setWindowClosedCallback(window, container);\n     }\n \n     private class ApprovalProvider extends SortableDataProvider<WorkflowFormTO, String> {\n@@ -398,7 +209,7 @@ public ApprovalProvider() {\n         @Override\n         public Iterator<WorkflowFormTO> iterator(final long first, final long count) {\n \n-            final List<WorkflowFormTO> list = approvalRestClient.getForms();\n+            final List<WorkflowFormTO> list = restClient.getForms();\n \n             Collections.sort(list, comparator);\n \n@@ -407,7 +218,7 @@ public Iterator<WorkflowFormTO> iterator(final long first, final long count) {\n \n         @Override\n         public long size() {\n-            return approvalRestClient.getForms().size();\n+            return restClient.getForms().size();\n         }\n \n         @Override\n@@ -425,83 +236,4 @@ public WorkflowFormTO getObject() {\n         }\n     }\n \n-    private class UserRequestProvider extends SortableDataProvider<UserRequestTO, String> {\n-\n-        private static final long serialVersionUID = -2311716167583335852L;\n-\n-        private SortableDataProviderComparator<UserRequestTO> comparator;\n-\n-        public UserRequestProvider() {\n-            //Default sorting\n-            setSort(\"id\", SortOrder.ASCENDING);\n-            comparator = new SortableDataProviderComparator<UserRequestTO>(this);\n-        }\n-\n-        @Override\n-        public Iterator<UserRequestTO> iterator(final long first, final long count) {\n-\n-            List<UserRequestTO> list = userRequestRestClient.list();\n-\n-            Collections.sort(list, comparator);\n-\n-            return list.subList((int) first, (int) first + (int) count).iterator();\n-        }\n-\n-        @Override\n-        public long size() {\n-            return userRequestRestClient.list().size();\n-        }\n-\n-        @Override\n-        public IModel<UserRequestTO> model(final UserRequestTO userRequestTO) {\n-\n-            return new AbstractReadOnlyModel<UserRequestTO>() {\n-\n-                private static final long serialVersionUID = -2566070996511906708L;\n-\n-                @Override\n-                public UserRequestTO getObject() {\n-                    return userRequestTO;\n-                }\n-            };\n-        }\n-    }\n-\n-    private class UserRequestColumn extends AbstractColumn<UserRequestTO, String> {\n-\n-        private static final long serialVersionUID = 8077865338230121496L;\n-\n-        public UserRequestColumn(final String name) {\n-            super(new ResourceModel(name, name), name);\n-        }\n-\n-        @Override\n-        public void populateItem(\n-                final Item<ICellPopulator<UserRequestTO>> cellItem,\n-                final String componentId,\n-                final IModel<UserRequestTO> rowModel) {\n-\n-            String label = \"\";\n-            switch (rowModel.getObject().getType()) {\n-                case CREATE:\n-                    label = rowModel.getObject().getUserTO().getUsername();\n-                    if (label == null) {\n-                        label = getString(\"new_user\");\n-                    }\n-                    break;\n-\n-                case UPDATE:\n-                    label = String.valueOf(rowModel.getObject().getUserMod().getId());\n-                    break;\n-\n-                case DELETE:\n-                    label = String.valueOf(rowModel.getObject().getUserId());\n-                    break;\n-\n-                default:\n-            }\n-\n-            cellItem.add(new Label(componentId, label));\n-        }\n-    }\n }"},{"sha":"7de0568af1568d946d542a062ba8015bf6ecb3be","filename":"console/src/main/java/org/apache/syncope/console/pages/UserRequestModalPage.java","status":"removed","additions":0,"deletions":124,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserRequestModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserRequestModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserRequestModalPage.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,124 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.console.pages;\n-\n-import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.to.UserRequestTO;\n-import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.util.AttributableOperations;\n-import org.apache.syncope.console.rest.UserRequestRestClient;\n-import org.apache.wicket.PageReference;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n-import org.apache.wicket.markup.html.form.Form;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n-\n-/**\n- * Modal window with User form.\n- */\n-public class UserRequestModalPage extends UserModalPage {\n-\n-    private static final long serialVersionUID = 603212869211672852L;\n-\n-    @SpringBean\n-    private UserRequestRestClient restClient;\n-\n-    private UserTO initialUserTO;\n-\n-    private UserRequestTO userRequestTO;\n-\n-    public UserRequestModalPage(final PageReference callerPageRef, final ModalWindow window, final UserTO userTO,\n-            final Mode mode) {\n-\n-        super(callerPageRef, window, userTO, mode, false);\n-\n-        setupEditPanel();\n-    }\n-\n-    public UserRequestModalPage(final PageReference callerPageRef, final ModalWindow window,\n-            final UserRequestTO userRequestTO, final Mode mode) {\n-\n-        super(callerPageRef, window, null, mode, false);\n-\n-        switch (userRequestTO.getType()) {\n-            case CREATE:\n-                userTO = userRequestTO.getUserTO();\n-                this.initialUserTO = AttributableOperations.clone(userTO);\n-                break;\n-\n-            case UPDATE:\n-                this.initialUserTO = userRestClient.read(userRequestTO.getUserMod().getId());\n-                userTO = AttributableOperations.apply(initialUserTO, userRequestTO.getUserMod());\n-                break;\n-\n-            case DELETE:\n-            default:\n-        }\n-\n-        this.userRequestTO = userRequestTO;\n-\n-        setupEditPanel();\n-    }\n-\n-    @Override\n-    protected void submitAction(final AjaxRequestTarget target, final Form form) {\n-        final UserTO updatedUserTO = (UserTO) form.getModelObject();\n-\n-        if (updatedUserTO.getId() == 0) {\n-            switch (mode) {\n-                case SELF:\n-                    restClient.requestCreate(updatedUserTO);\n-                    break;\n-\n-                case ADMIN:\n-                    restClient.executeCreate(userRequestTO.getId(), userTO);\n-                    break;\n-\n-                default:\n-                    LOG.warn(\"Invalid mode specified for {}: {}\", getClass().getName(), mode);\n-            }\n-        } else {\n-            final UserTO originalUserTO = mode == Mode.SELF\n-                    ? userRestClient.readSelf()\n-                    : userRestClient.read(updatedUserTO.getId());\n-            final UserMod userMod = AttributableOperations.diff(updatedUserTO, originalUserTO);\n-\n-            // update user only if it has changed\n-            if (!userMod.isEmpty()) {\n-                switch (mode) {\n-                    case SELF:\n-                        restClient.requestUpdate(userMod);\n-                        break;\n-\n-                    case ADMIN:\n-                        restClient.executeUpdate(userRequestTO.getId(), userMod);\n-                        break;\n-\n-                    default:\n-                        LOG.warn(\"Invalid mode specified for {}: {}\", getClass().getName(), mode);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Override\n-    protected void closeAction(final AjaxRequestTarget target, final Form form) {\n-        setResponsePage(new ResultStatusModalPage.Builder(window, userTO).mode(mode).build());\n-    }\n-}"},{"sha":"f5161f0599826d5ba4ea3398323d992c6456c112","filename":"console/src/main/java/org/apache/syncope/console/pages/UserSelfModalPage.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserSelfModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserSelfModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserSelfModalPage.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.pages;\n+\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.util.AttributableOperations;\n+import org.apache.syncope.console.rest.UserSelfRestClient;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+/**\n+ * Modal window with User form.\n+ */\n+public class UserSelfModalPage extends UserModalPage {\n+\n+    private static final long serialVersionUID = 603212869211672852L;\n+\n+    @SpringBean\n+    private UserSelfRestClient restClient;\n+\n+    private final UserTO initialUserTO;\n+\n+    public UserSelfModalPage(final PageReference callerPageRef, final ModalWindow window, final UserTO userTO) {\n+        super(callerPageRef, window, userTO, Mode.SELF, userTO.getId() != 0);\n+\n+        this.initialUserTO = AttributableOperations.clone(userTO);\n+        setupEditPanel();\n+    }\n+\n+    @Override\n+    protected void submitAction(final AjaxRequestTarget target, final Form form) {\n+        final UserTO updatedUserTO = (UserTO) form.getModelObject();\n+\n+        if (updatedUserTO.getId() == 0) {\n+            restClient.create(updatedUserTO);\n+        } else {\n+            final UserMod userMod = AttributableOperations.diff(updatedUserTO, initialUserTO);\n+\n+            // update user only if it has changed\n+            if (!userMod.isEmpty()) {\n+                restClient.update(userMod);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void closeAction(final AjaxRequestTarget target, final Form form) {\n+        setResponsePage(new ResultStatusModalPage.Builder(window, userTO).mode(mode).build());\n+    }\n+}"},{"sha":"28f0a7ec6e3f9ead2839271142049c68dd28d1fc","filename":"console/src/main/java/org/apache/syncope/console/pages/WelcomePage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.console.SyncopeApplication;\n import org.apache.syncope.console.commons.XMLRolesReader;\n-import org.apache.syncope.console.rest.UserRestClient;\n+import org.apache.syncope.console.rest.UserSelfRestClient;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n@@ -36,7 +36,7 @@ public class WelcomePage extends WebPage {\n     private XMLRolesReader xmlRolesReader;\n \n     @SpringBean\n-    protected UserRestClient userRestClient;\n+    private UserSelfRestClient userSelfRestClient;\n \n     public WelcomePage(final PageParameters parameters) {\n         super(parameters);\n@@ -50,6 +50,6 @@ private void setupNavigationPanel() {\n     }\n \n     private void setupEditProfileModal() {\n-        ((SyncopeApplication) getApplication()).setupEditProfileModal(this, userRestClient);\n+        ((SyncopeApplication) getApplication()).setupEditProfileModal(this, userSelfRestClient);\n     }\n }"},{"sha":"2edd7327ec4f2f3e436497b3de6468da47c4e755","filename":"console/src/main/java/org/apache/syncope/console/rest/BaseRestClient.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -33,6 +33,10 @@ public abstract class BaseRestClient implements Serializable {\n \n     private static final long serialVersionUID = 1523999867826481989L;\n \n+    protected <T> T getAnonymousService(final Class<T> serviceClass) {\n+        return SyncopeSession.get().getAnonymousService(serviceClass);\n+    }\n+\n     protected <T> T getService(final Class<T> serviceClass) {\n         return SyncopeSession.get().getService(serviceClass);\n     }"},{"sha":"b80041eee92f09b3354e21680558162091aaa0d3","filename":"console/src/main/java/org/apache/syncope/console/rest/RoleRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -84,7 +84,7 @@ public RoleTO create(final RoleTO roleTO) {\n     }\n \n     public RoleTO read(final Long id) {\n-        return getService(RoleService.class).read(id);\n+        return getAnonymousService(RoleService.class).read(id);\n     }\n \n     public RoleTO update(final RoleMod roleMod) {"},{"sha":"ad9b01acf0159464d98fc91f13fcdc6e04decbbc","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRequestRestClient.java","status":"removed","additions":0,"deletions":95,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,95 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.console.rest;\n-\n-import java.util.List;\n-\n-import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.services.UserRequestService;\n-import org.apache.syncope.common.to.UserRequestTO;\n-import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.types.RESTHeaders;\n-import org.apache.syncope.common.types.UserRequestType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class UserRequestRestClient extends BaseRestClient {\n-\n-    private static final long serialVersionUID = 171408947099311191L;\n-\n-    public boolean isSelfRegistrationAllowed() {\n-        Boolean result = null;\n-        try {\n-            result = Boolean.valueOf(getService(UserRequestService.class).getOptions().\n-                    getHeaderString(RESTHeaders.USERREQUEST_CREATE_ALLOWED.toString()));\n-        } catch (SyncopeClientException e) {\n-            LOG.error(\"While seeking if self registration is allowed\", e);\n-        }\n-\n-        return result == null\n-                ? false\n-                : result.booleanValue();\n-    }\n-\n-    public List<UserRequestTO> list() {\n-        return getService(UserRequestService.class).list();\n-    }\n-\n-    public void delete(final Long requestId) {\n-        getService(UserRequestService.class).delete(requestId);\n-    }\n-\n-    public void claim(final Long requestId) {\n-        getService(UserRequestService.class).claim(requestId);\n-    }\n-\n-    public void requestCreate(final UserTO userTO) {\n-        UserRequestTO userRequestTO = new UserRequestTO();\n-        userRequestTO.setType(UserRequestType.CREATE);\n-        userRequestTO.setUserTO(userTO);\n-        getService(UserRequestService.class).create(userRequestTO);\n-    }\n-\n-    public void requestUpdate(final UserMod userMod) {\n-        UserRequestTO userRequestTO = new UserRequestTO();\n-        userRequestTO.setType(UserRequestType.UPDATE);\n-        userRequestTO.setUserMod(userMod);\n-        getService(UserRequestService.class).create(userRequestTO);\n-    }\n-\n-    public void requestDelete(final Long userId) {\n-        UserRequestTO userRequestTO = new UserRequestTO();\n-        userRequestTO.setType(UserRequestType.DELETE);\n-        userRequestTO.setUserId(userId);\n-        getService(UserRequestService.class).create(userRequestTO);\n-    }\n-\n-    public UserTO executeCreate(final Long requestId, final UserTO reviewed) {\n-        return getService(UserRequestService.class).executeCreate(requestId, reviewed);\n-    }\n-\n-    public UserTO executeUpdate(final Long requestId, final UserMod changes) {\n-        return getService(UserRequestService.class).executeUpdate(requestId, changes);\n-    }\n-\n-    public UserTO executeDelete(final Long requestId) {\n-        return getService(UserRequestService.class).executeDelete(requestId);\n-    }\n-}"},{"sha":"2bcef2c46c7e7f8cdf41afcebbc6392ffea6d70b","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRestClient.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -88,10 +88,6 @@ public UserTO read(final Long id) {\n         return userTO;\n     }\n \n-    public UserTO readSelf() {\n-        return getService(UserService.class).readSelf();\n-    }\n-\n     @Override\n     public Integer searchCount(final NodeCond searchCond) throws InvalidSearchConditionException {\n         return getService(UserService.class).searchCount(searchCond);"},{"sha":"003ac410e318f2cc7f10d0ccab57d9aa95cb3be5","filename":"console/src/main/java/org/apache/syncope/console/rest/UserSelfRestClient.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserSelfRestClient.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.rest;\n+\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.services.UserSelfService;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.console.SyncopeSession;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UserSelfRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = 2994691796924731295L;\n+\n+    public boolean isSelfRegistrationAllowed() {\n+        Boolean result = null;\n+        try {\n+            result = SyncopeSession.get().isSelfRegistrationAllowed();\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"While seeking if self registration is allowed\", e);\n+        }\n+\n+        return result == null\n+                ? false\n+                : result.booleanValue();\n+    }\n+\n+    public UserTO read() {\n+        return getService(UserSelfService.class).read();\n+    }\n+\n+    public void create(final UserTO userTO) {\n+        getService(UserSelfService.class).create(userTO);\n+    }\n+\n+    public void update(final UserMod userMod) {\n+        getService(UserSelfService.class).update(userMod.getId(), userMod);\n+    }\n+\n+    public void delete() {\n+        getService(UserSelfService.class).delete();\n+    }\n+}"},{"sha":"d728e581b0bb413ebb987616718fc34c65108305","filename":"console/src/main/resources/authorizations.xml","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -196,18 +196,6 @@ under the License.\n     </action>\n   </page>\n     \n-  <page id=\"UserRequest\">\n-    <action id=\"list\">\n-      <entitlement>USER_REQUEST_LIST</entitlement>\n-    </action>\n-    <action id=\"read\">\n-      <entitlement>USER_REQUEST_READ</entitlement>\n-    </action>\n-    <action id=\"delete\">\n-      <entitlement>USER_REQUEST_DELETE</entitlement>\n-    </action>\n-  </page>\n-    \n   <page id=\"Configuration\">\n     <action id=\"list\">\n       <entitlement>CONFIGURATION_LIST</entitlement>"},{"sha":"647a311043292e02b6fd28b66b006a01cb2649c9","filename":"console/src/main/resources/org/apache/syncope/console/pages/ResultStatusModalPage.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.html?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -147,7 +147,7 @@\n       </div>\n     </wicket:fragment>\n \n-    <wicket:fragment wicket:id=\"userRequestResultFrag\">\n+    <wicket:fragment wicket:id=\"userSelfResultFrag\">\n       <p><wicket:message key=\"selfResult\"/></p>\n     </wicket:fragment>\n "},{"sha":"3ee25f8ada74de70befb4c5c86b485dafb3c756d","filename":"console/src/main/resources/org/apache/syncope/console/pages/ResultStatusModalPage.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.properties?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -16,7 +16,7 @@\n # under the License.\n operationResult=Operation result for\n close=Close\n-selfResult=Your request has been registered and will be forwarded to designated administrator. Thanks.\n+selfResult=Your request has been registered: depending on configuration, approval might be required.\n __NAME__=Account Link\n __UID__=Account Id\n __PASSWORD__=Password"},{"sha":"92ee70ed510c9ffdd95224daec01e9258582e99d","filename":"console/src/main/resources/org/apache/syncope/console/pages/ResultStatusModalPage_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage_it.properties?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -16,7 +16,7 @@\n # under the License.\n operationResult=Risultato dell'operazione per\n close=Chiudi\n-selfResult=La sua richiesta \\u00e8 stata presa in carico e verr\\u00e0 inoltrata all'amministratore designato. Grazie.\n+selfResult=La sua richiesta \\u00e8 stata presa in carico: se la configurazione lo prevede, sar\\u00e0 necessaria l'approvazione.\n __NAME__=Account Link\n __UID__=Account Id\n __PASSWORD__=Password"},{"sha":"e18efa02a0ed383c1447fb626e18a925f2f96321","filename":"console/src/main/resources/org/apache/syncope/console/pages/Todo.html","status":"modified","additions":23,"deletions":41,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.html?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -16,48 +16,30 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<wicket:extend>\n-  <div id=\"tabs\">\n-    <ul>\n-      <li class=\"tabs-selected\"><a href=\"#tabs-1\"><span><wicket:message key=\"approvals\"/></span></a></li>\n-      <li><a href=\"#tabs-2\"><span><wicket:message key=\"userRequests\"/></span></a></li>\n-    </ul>\n-    <div id=\"tabs-1\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <div id=\"tabs\">\n+      <ul>\n+        <li class=\"tabs-selected\"><a href=\"#tabs-1\"><span><wicket:message key=\"approvals\"/></span></a></li>\n+      </ul>\n+      <div id=\"tabs-1\">\n \n-      <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit;\">\n-        <span wicket:id=\"approvalContainer\">\n-          <table class=\"ui-widget ui-widget-content table-hover\"\n-                 wicket:id=\"approvalTable\"/>\n-        </span>\n-        <span style=\"float:right\">\n-          <form wicket:id=\"approvalPaginatorForm\" style=\"display:inline\">\n-            <label><wicket:message key=\"displayRows\"/></label>\n-            <select class=\"text ui-widget-content ui-corner-all\"\n-                    wicket:id=\"rowsChooser\"/>\n-          </form>\n-        </span>\n-      </div>\n-\n-      <div wicket:id=\"editApprovalWin\">[Show modal window for editing approval]</div>\n-    </div>\n+        <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit;\">\n+          <span wicket:id=\"approvalContainer\">\n+            <table class=\"ui-widget ui-widget-content table-hover\"\n+                   wicket:id=\"approvalTable\"/>\n+          </span>\n+          <span style=\"float:right\">\n+            <form wicket:id=\"paginatorForm\" style=\"display:inline\">\n+              <label><wicket:message key=\"displayRows\"/></label>\n+              <select class=\"text ui-widget-content ui-corner-all\"\n+                      wicket:id=\"rowsChooser\"/>\n+            </form>\n+          </span>\n+        </div>\n \n-    <div id=\"tabs-2\">\n-\n-      <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit;\">\n-        <span wicket:id=\"userRequestContainer\">\n-          <table class=\"ui-widget ui-widget-content table-hover\"\n-                 wicket:id=\"userRequestTable\"/>\n-        </span>\n-        <span style=\"float:right\">\n-          <form wicket:id=\"userRequestPaginatorForm\" style=\"display:inline\">\n-            <label><wicket:message key=\"displayRows\"/></label>\n-            <select class=\"text ui-widget-content ui-corner-all\"\n-                    wicket:id=\"rowsChooser\"/>\n-          </form>\n-        </span>\n+        <div wicket:id=\"editApprovalWin\">[Show modal window for editing approval]</div>\n       </div>\n-\n-      <div wicket:id=\"editUserRequestWin\">[Show modal window for editing user request]</div>\n     </div>\n-  </div>\n-</wicket:extend>\n+  </wicket:extend>\n+</html>"},{"sha":"2e4442a9f50800e54e47c3a004471e674170d3a7","filename":"console/src/main/resources/org/apache/syncope/console/pages/Todo.properties","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.properties?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -22,8 +22,7 @@ dueDate=Due date\n owner=Owner\n claim=Claim\n manage=Manage\n-approvals=Approval\n-userRequests=User requests\n+approvals=Approvals\n delete=Delete\n type=Type\n username=User"},{"sha":"df4fba85731aafdd5e1debd3a7cff106d78ec76b","filename":"console/src/main/resources/org/apache/syncope/console/pages/Todo_it.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo_it.properties?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -23,7 +23,6 @@ owner=Esecutore\n claim=Richiedi\n manage=Gestisci\n approvals=Approvazioni\n-userRequests=Richieste utente\n delete=Rimuovi\n type=Tipo\n username=Utente"},{"sha":"fb255fb49880a1ed75dcdef48f3c900e804664ee","filename":"console/src/main/resources/org/apache/syncope/console/pages/Todo_pt_BR.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo_pt_BR.properties?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -23,7 +23,6 @@ owner=Propriet\\u00e1rio\n claim=Requerimento\n manage=Ger\\u00eancia\n approvals=Aprova\\u00e7\\u00e3o\n-userRequests=Requisi\\u00e7\\u00f5es  de usu\\u00e1rio\n delete=Excluir\n type=Tipo\n username=Usu\\u00e1rio"},{"sha":"8625b7f7c038be88d9fda3abab74f11704125378","filename":"console/src/main/resources/org/apache/syncope/console/pages/WelcomePage.html","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.html?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -41,16 +41,16 @@\n     <div id=\"splash\">\n       <img src=\"img/logo.png\" alt=\"syncope\" title=\"syncope\" id=\"logo\" />\n       <div style=\"display: table-row;\">\n-        <div id=\"username\" style=\"padding-right: 5px;cursor: pointer;display: table-cell;\">          \n-          <a href=\"#\" wicket:id=\"editProfileLink\" style=\"font-family: monospace;padding-left: 130px;\">\n+        <div id=\"username\" style=\"display: table-cell; padding-left: 5px; cursor: pointer; width:100%;\">          \n+          <a href=\"#\" wicket:id=\"editProfileLink\" style=\"font-family: monospace;line-height: 20px;\">\n             <span style=\"color: #B9CFB3;\"><wicket:message key=\"welcome\"/>,\n               <span wicket:id=\"username\" style=\"color: #B9CFB3;text-decoration: underline;\"/>\n             </span>\n           </a>\n         </div>\n-        <div>\n+        <div style=\"display: table-cell; padding-right: 5px;\">\n           <div wicket:id=\"infoModal\"/>\n-          <a wicket:id=\"infoLink\"><img src=\"img/info.png\" alt=\"info\" style=\"padding-right: 10px;\"/></a>\n+          <a wicket:id=\"infoLink\"><img src=\"img/info.png\" alt=\"info\"/></a>\n         </div>\n       </div>\n       <ul>"},{"sha":"57a33ad6b581e85e98266d451d054a5dd8e6b8e0","filename":"console/src/test/java/org/apache/syncope/console/ConfigurationTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -50,7 +50,7 @@ public void browseEditModal() {\n \n         selenium.waitForCondition(\"selenium.isElementPresent(\\\"//input[@name='key:textField']\\\");\", \"30000\");\n \n-        assertEquals(\"createRequest.allowed\", selenium.getAttribute(\"//input[@name='key:textField']@value\"));\n+        assertEquals(\"notification.maxRetries\", selenium.getAttribute(\"//input[@name='key:textField']@value\"));\n \n         selenium.click(\"css=a.w_close\");\n     }"},{"sha":"7776046a1e90f4d7f13a1b550afd76256f886b1e","filename":"console/src/test/java/org/apache/syncope/console/ReportTestITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FReportTestITCase.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -77,6 +77,5 @@ public void navigateAudit() {\n         selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[11]/a\");\n         selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[12]/a\");\n         selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[13]/a\");\n-        selenium.click(\"//div[3]/div[2]/span/form/div[2]/div/span/ul/li[14]/a\");\n     }\n }"},{"sha":"ae8376a796dfa34a9f4699237aefbbb9873433b6","filename":"core/src/main/java/org/apache/syncope/core/init/ContentUpgrader.java","status":"modified","additions":21,"deletions":47,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentUpgrader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentUpgrader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentUpgrader.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -37,14 +37,12 @@\n import org.apache.syncope.core.persistence.beans.Policy;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n-import org.apache.syncope.core.persistence.beans.UserRequest;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.dao.UserRequestDAO;\n import org.apache.syncope.core.persistence.dao.impl.AbstractContentDealer;\n import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.apache.syncope.core.util.XMLSerializer;\n@@ -80,9 +78,6 @@ public class ContentUpgrader extends AbstractContentDealer {\n     @Autowired\n     private TaskDAO taskDAO;\n \n-    @Autowired\n-    private UserRequestDAO userRequestDAO;\n-\n     private void upgradeActiviti() {\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n \n@@ -93,14 +88,14 @@ private void upgradeActiviti() {\n                     \"org\\\\.apache.syncope\\\\.core\\\\.workflow\\\\.activiti\\\\.\",\n                     \"org.apache.syncope.core.workflow.user.activiti.task.\").\n                     replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.to\\\\.\",\n-                    \"org.apache.syncope.common.to\").\n+                            \"org.apache.syncope.common.to\").\n                     replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.\",\n-                    \"org.apache.syncope.common.types\").\n+                            \"org.apache.syncope.common.types\").\n                     replaceAll(\"org/apache/syncope/types/\",\n-                    \"org/apache/syncope/common/types/\").\n+                            \"org/apache/syncope/common/types/\").\n                     getBytes();\n             jdbcTemplate.update(\"UPDATE ACT_GE_BYTEARRAY SET BYTES_=? WHERE ID_=?\",\n-                    new Object[] {updated, row.get(\"ID_\")});\n+                    new Object[] { updated, row.get(\"ID_\") });\n         }\n     }\n \n@@ -135,8 +130,8 @@ private void upgradeConnInstance(final String localConnIdLocation) {\n                 String oldConf = (String) xmlConfiguration.get(connInstance);\n                 connInstance.setConfiguration(\n                         XMLSerializer.<HashSet<ConnConfProperty>>deserialize(\n-                        oldConf.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.ConnConfProperty\",\n-                        ConnConfProperty.class.getName())));\n+                                oldConf.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.ConnConfProperty\",\n+                                        ConnConfProperty.class.getName())));\n             } catch (Exception e) {\n                 LOG.error(\"While upgrading {}\", connInstance, e);\n             }\n@@ -152,8 +147,8 @@ private void upgradeExternalResource() {\n                 if (StringUtils.isNotBlank(oldConf)) {\n                     resource.setConnInstanceConfiguration(\n                             XMLSerializer.<HashSet<ConnConfProperty>>deserialize(\n-                            oldConf.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.ConnConfProperty\",\n-                            ConnConfProperty.class.getName())));\n+                                    oldConf.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.ConnConfProperty\",\n+                                            ConnConfProperty.class.getName())));\n                 }\n             } catch (Exception e) {\n                 LOG.error(\"While upgrading {}\", resource, e);\n@@ -169,9 +164,9 @@ private void upgradePolicy() {\n                 String oldConf = (String) specification.get(policy);\n                 policy.setSpecification(\n                         XMLSerializer.<AbstractPolicySpec>deserialize(\n-                        oldConf.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.\",\n-                        \"org.apache.syncope.common.types.\").\n-                        replaceAll(\"alternativeSearchAttrs\", \"uAltSearchSchemas\")));\n+                                oldConf.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.\",\n+                                        \"org.apache.syncope.common.types.\").\n+                                replaceAll(\"alternativeSearchAttrs\", \"uAltSearchSchemas\")));\n             } catch (Exception e) {\n                 LOG.error(\"While upgrading {}\", policy, e);\n             }\n@@ -189,15 +184,15 @@ private void upgradeNotification() {\n                 if (oldAbout != null) {\n                     notification.setAbout(\n                             XMLSerializer.<NodeCond>deserialize(\n-                            oldAbout.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.search\\\\.\",\n-                            \"org.apache.syncope.common.search.\")));\n+                                    oldAbout.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.search\\\\.\",\n+                                            \"org.apache.syncope.common.search.\")));\n                 }\n                 String oldRecipients = (String) xmlRecipients.get(notification);\n                 if (oldRecipients != null) {\n                     notification.setRecipients(\n                             XMLSerializer.<NodeCond>deserialize(\n-                            oldRecipients.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.search\\\\.\",\n-                            \"org.apache.syncope.common.search.\")));\n+                                    oldRecipients.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.search\\\\.\",\n+                                            \"org.apache.syncope.common.search.\")));\n                 }\n             } catch (Exception e) {\n                 LOG.error(\"While upgrading {}\", notification, e);\n@@ -214,10 +209,10 @@ private void upgradeSyncTask() {\n                 if (oldUserTemplate != null) {\n                     task.setUserTemplate(\n                             XMLSerializer.<UserTO>deserialize(\n-                            oldUserTemplate.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.to\\\\.\",\n-                            \"org.apache.syncope.common.to.\").\n-                            replaceAll(\"propagationTOs\",\n-                            \"propagationStatusTOs\")));\n+                                    oldUserTemplate.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.to\\\\.\",\n+                                            \"org.apache.syncope.common.to.\").\n+                                    replaceAll(\"propagationTOs\",\n+                                            \"propagationStatusTOs\")));\n                 }\n             } catch (Exception e) {\n                 LOG.error(\"While upgrading {}\", task, e);\n@@ -233,28 +228,9 @@ private void upgradeReportletConf() {\n         for (Map<String, Object> row : rcInstances) {\n             String updated = ((String) row.get(\"serializedInstance\")).\n                     replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.report\\\\.\",\n-                    \"org.apache.syncope.common.report.\");\n+                            \"org.apache.syncope.common.report.\");\n             jdbcTemplate.update(\"UPDATE ReportletConfInstance SET serializedInstance=? WHERE id=?\",\n-                    new Object[] {updated, row.get(\"id\")});\n-        }\n-    }\n-\n-    private void upgradeUserRequest() {\n-        Field payload = ReflectionUtils.findField(UserRequest.class, \"payload\");\n-        payload.setAccessible(true);\n-        for (UserRequest request : userRequestDAO.findAll()) {\n-            try {\n-                String oldPayload = (String) payload.get(request);\n-                if (oldPayload != null) {\n-                    payload.set(request,\n-                            oldPayload.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.to\\\\.\",\n-                            \"org.apache.syncope.common.to.\").\n-                            replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.mod\\\\.\",\n-                            \"org.apache.syncope.common.mod.\"));\n-                }\n-            } catch (Exception e) {\n-                LOG.error(\"While upgrading {}\", request, e);\n-            }\n+                    new Object[] { updated, row.get(\"id\") });\n         }\n     }\n \n@@ -283,8 +259,6 @@ public void upgrade() {\n \n         upgradeReportletConf();\n \n-        upgradeUserRequest();\n-\n         Connection conn = DataSourceUtils.getConnection(dataSource);\n         try {\n             createIndexes();"},{"sha":"9bb266585f269a6cf44a6c60aa8c0b63040f99d2","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationJob.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.notification;\n \n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n import java.util.Date;\n import javax.mail.internet.MimeMessage;\n import org.apache.commons.lang3.StringUtils;\n@@ -33,6 +31,7 @@\n import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n+import org.apache.syncope.core.util.ExceptionUtil;\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.Job;\n import org.quartz.JobExecutionContext;\n@@ -205,12 +204,8 @@ public TaskExec executeSingle(final NotificationTask task) {\n                     LOG.error(\"Could not send e-mail\", e);\n \n                     execution.setStatus(Status.NOT_SENT.name());\n-                    StringWriter exceptionWriter = new StringWriter();\n-                    exceptionWriter.write(e.getMessage() + \"\\n\\n\");\n-                    e.printStackTrace(new PrintWriter(exceptionWriter));\n-\n                     if (task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal()) {\n-                        execution.setMessage(exceptionWriter.toString());\n+                        execution.setMessage(ExceptionUtil.getFullStackTrace(e));\n                     }\n \n                     auditManager.audit(Category.notification, NotificationSubCategory.send, Result.failure,"},{"sha":"7a6426b4cd40eda88f18a3504e187cdb2e14592e","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/UserRequest.java","status":"removed","additions":0,"deletions":185,"changes":185,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,185 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.beans;\n-\n-import java.util.Date;\n-import javax.persistence.Basic;\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n-import javax.persistence.Id;\n-import javax.persistence.Lob;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n-import javax.validation.constraints.Max;\n-import javax.validation.constraints.Min;\n-import javax.validation.constraints.NotNull;\n-\n-import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.types.UserRequestType;\n-import org.apache.syncope.core.util.XMLSerializer;\n-\n-@Entity\n-public class UserRequest extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 4977358381988835119L;\n-\n-    @Id\n-    @GeneratedValue(strategy = GenerationType.AUTO)\n-    private Long id;\n-\n-    @Column\n-    private String username;\n-\n-    @NotNull\n-    @Lob\n-    private String payload;\n-\n-    @NotNull\n-    @Enumerated(EnumType.STRING)\n-    private UserRequestType type;\n-\n-    @Basic\n-    @Min(0)\n-    @Max(1)\n-    private Integer executed;\n-\n-    /**\n-     * Creation date.\n-     */\n-    @Column(nullable = false)\n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date creationDate;\n-\n-    /**\n-     * Claim date.\n-     */\n-    @Column\n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date claimDate;\n-\n-    /**\n-     * Execution date.\n-     */\n-    @Column\n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date executionDate;\n-\n-    /**\n-     * Username of the last user who claimed the request.\n-     */\n-    private String owner;\n-\n-    public UserRequest() {\n-        this.executed = 0;\n-    }\n-\n-    public Long getId() {\n-        return id;\n-    }\n-\n-    public UserRequestType getType() {\n-        return type;\n-    }\n-\n-    public UserTO getUserTO() {\n-        return type != UserRequestType.CREATE\n-                ? null\n-                : XMLSerializer.<UserTO>deserialize(payload);\n-    }\n-\n-    public void createUser(final UserTO userTO) {\n-        type = UserRequestType.CREATE;\n-        payload = XMLSerializer.serialize(userTO);\n-    }\n-\n-    public UserMod getUserMod() {\n-        return type != UserRequestType.UPDATE\n-                ? null\n-                : XMLSerializer.<UserMod>deserialize(payload);\n-    }\n-\n-    public void updateUser(final UserMod userMod) {\n-        type = UserRequestType.UPDATE;\n-        payload = XMLSerializer.serialize(userMod);\n-    }\n-\n-    public Long getUserId() {\n-        return type != UserRequestType.DELETE\n-                ? null\n-                : Long.valueOf(payload);\n-    }\n-\n-    public void deleteUser(final Long userId) {\n-        type = UserRequestType.DELETE;\n-        payload = String.valueOf(userId);\n-    }\n-\n-    public void setUsername(final String username) {\n-        this.username = username;\n-    }\n-\n-    public String getUsername() {\n-        return username;\n-    }\n-\n-    public boolean isExecuted() {\n-        return isBooleanAsInteger(executed);\n-    }\n-\n-    public void setExecuted(boolean executed) {\n-        this.executed = getBooleanAsInteger(executed);\n-    }\n-\n-    public String getOwner() {\n-        return owner;\n-    }\n-\n-    public void setOwner(String owner) {\n-        this.owner = owner;\n-    }\n-\n-    public Date getCreationDate() {\n-        return creationDate;\n-    }\n-\n-    public void setCreationDate(Date creationDate) {\n-        this.creationDate = creationDate;\n-    }\n-\n-    public Date getClaimDate() {\n-        return claimDate;\n-    }\n-\n-    public void setClaimDate(Date claimDate) {\n-        this.claimDate = claimDate;\n-    }\n-\n-    public Date getExecutionDate() {\n-        return executionDate;\n-    }\n-\n-    public void setExecutionDate(Date executionDate) {\n-        this.executionDate = executionDate;\n-    }\n-}"},{"sha":"352eecaf6a0f86c7db362e6530b25e8d291ada8b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/Membership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -40,7 +40,7 @@\n \n @Entity\n @Table(uniqueConstraints =\n-        @UniqueConstraint(columnNames = {\"syncopeUser_id\", \"syncopeRole_id\"}))\n+        @UniqueConstraint(columnNames = { \"syncopeUser_id\", \"syncopeRole_id\" }))\n public class Membership extends AbstractAttributable {\n \n     private static final long serialVersionUID = 5030106264797289469L;"},{"sha":"efcf403268c2c5a732df70115fe2bf83bdebec78","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -63,7 +63,7 @@\n \n @Entity\n @Table(uniqueConstraints =\n-        @UniqueConstraint(columnNames = {\"name\", \"parent_id\"}))\n+        @UniqueConstraint(columnNames = { \"name\", \"parent_id\" }))\n @Cacheable\n @SyncopeRoleCheck\n public class SyncopeRole extends AbstractAttributable {\n@@ -284,7 +284,7 @@ public void setInheritTemplates(final boolean inheritAttrTemplates) {\n         this.inheritTemplates = getBooleanAsInteger(inheritAttrTemplates);\n     }\n \n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public <T extends AbstractAttrTemplate> List<T> getAttrTemplates(final Class<T> reference) {\n         List<T> result = null;\n "},{"sha":"5df229eb22ed737130ea658601f73e31ecd4aafa","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -491,8 +491,8 @@ public boolean verifyPasswordHistory(final String password, final int size) {\n                 res = passwordHistory.subList(size >= passwordHistory.size()\n                         ? 0\n                         : passwordHistory.size() - size, passwordHistory.size()).contains(cipherAlgorithm == null\n-                        ? password\n-                        : PasswordEncoder.encode(password, cipherAlgorithm));\n+                                ? password\n+                                : PasswordEncoder.encode(password, cipherAlgorithm));\n             } catch (Exception e) {\n                 LOG.error(\"Error evaluating password history\", e);\n             }"},{"sha":"a87b88e81e6f72bd2788b7a89e7292bb2a51e365","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/RoleDAO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.RAttrValue;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface RoleDAO extends AttributableDAO {\n@@ -37,9 +36,9 @@ public interface RoleDAO extends AttributableDAO {\n \n     SyncopeRole find(String name, Long parent);\n \n-    List<SyncopeRole> findOwned(SyncopeUser owner);\n+    List<SyncopeRole> findOwnedByUser(Long userId);\n \n-    List<SyncopeRole> findOwned(SyncopeRole owner);\n+    List<SyncopeRole> findOwnedByRole(Long roleId);\n \n     List<SyncopeRole> findByEntitlement(final Entitlement entitlement);\n "},{"sha":"9f9d3d105e1446d642c5b7b758e070b323fa3271","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/UserRequestDAO.java","status":"removed","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserRequestDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserRequestDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserRequestDAO.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,39 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.dao;\n-\n-import java.util.List;\n-\n-import org.apache.syncope.core.persistence.beans.UserRequest;\n-import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n-\n-public interface UserRequestDAO extends DAO {\n-\n-    UserRequest find(Long id);\n-\n-    List<UserRequest> findAll();\n-\n-    List<UserRequest> findAll(boolean executed);\n-\n-    List<UserRequest> findAll(String username);\n-\n-    UserRequest save(UserRequest userRequest) throws InvalidEntityException;\n-\n-    void delete(Long id);\n-}"},{"sha":"3dfe5a849b874ef0c9f01aa30584137d28f48a53","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n@@ -60,6 +61,7 @@\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class RoleDAOImpl extends AbstractAttributableDAOImpl implements RoleDAO {\n@@ -144,8 +146,14 @@ private void findSameOwnerDescendants(final List<SyncopeRole> result, final Sync\n         result.add(role);\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n-    public List<SyncopeRole> findOwned(final SyncopeUser owner) {\n+    public List<SyncopeRole> findOwnedByUser(final Long userId) {\n+        SyncopeUser owner = userDAO.find(userId);\n+        if (owner == null) {\n+            return Collections.emptyList();\n+        }\n+\n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(SyncopeRole.class.getSimpleName()).\n                 append(\" e WHERE e.userOwner=:owner \");\n         for (Long roleId : owner.getRoleIds()) {\n@@ -163,8 +171,14 @@ public List<SyncopeRole> findOwned(final SyncopeUser owner) {\n         return result;\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n-    public List<SyncopeRole> findOwned(final SyncopeRole owner) {\n+    public List<SyncopeRole> findOwnedByRole(final Long roleId) {\n+        SyncopeRole owner = find(roleId);\n+        if (owner == null) {\n+            return Collections.emptyList();\n+        }\n+\n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(SyncopeRole.class.getSimpleName()).\n                 append(\" e WHERE e.roleOwner=:owner \");\n "},{"sha":"db7e93553c8be1eda8cf1ff1efea1dbd2915c5eb","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/UserRequestDAOImpl.java","status":"removed","additions":0,"deletions":78,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,78 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.dao.impl;\n-\n-import java.util.List;\n-import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.beans.UserRequest;\n-import org.apache.syncope.core.persistence.dao.UserRequestDAO;\n-import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n-import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Repository\n-@Transactional(noRollbackFor = {Throwable.class})\n-public class UserRequestDAOImpl extends AbstractDAOImpl implements UserRequestDAO {\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public UserRequest find(Long id) {\n-        return entityManager.find(UserRequest.class, id);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<UserRequest> findAll() {\n-        TypedQuery<UserRequest> query = entityManager.createQuery(\n-                \"SELECT e \" + \"FROM \" + UserRequest.class.getSimpleName() + \" e\", UserRequest.class);\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<UserRequest> findAll(final boolean executed) {\n-        TypedQuery<UserRequest> query = entityManager.createQuery(\n-                \"SELECT e \" + \"FROM \" + UserRequest.class.getSimpleName() + \" e WHERE e.executed = :executed\",\n-                UserRequest.class);\n-        query.setParameter(\"executed\", executed ? 1 : 0);\n-\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<UserRequest> findAll(final String username) {\n-        TypedQuery<UserRequest> query = entityManager.createQuery(\n-                \"SELECT e \" + \"FROM \" + UserRequest.class.getSimpleName() + \" e WHERE e.username = :username\",\n-                UserRequest.class);\n-        query.setParameter(\"username\", username);\n-\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public UserRequest save(final UserRequest userRequest) throws InvalidEntityException {\n-        return entityManager.merge(userRequest);\n-    }\n-\n-    @Override\n-    public void delete(final Long id) {\n-        entityManager.remove(find(id));\n-    }\n-}"},{"sha":"dd93e65f9904545f9418e307946367821beb6bf3","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncopeUserValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -128,8 +128,8 @@ public boolean isValid(final SyncopeUser user, final ConstraintValidatorContext\n             LOG.debug(\"Invalid username\");\n \n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidUsername, e.getMessage()))\n-                    .addNode(\"username\").addConstraintViolation();\n+                    getTemplate(EntityViolationType.InvalidUsername, e.getMessage())).\n+                    addNode(\"username\").addConstraintViolation();\n \n             return false;\n         }"},{"sha":"f4d11053148c9c763a87620cc172506530b765e4","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationByResource.java","status":"modified","additions":16,"deletions":5,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationByResource.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -298,14 +298,25 @@ public final void set(final ResourceOperation type, final Set<String> resourceNa\n      * @param propByRes to be merged\n      */\n     public final void merge(final PropagationByResource propByRes) {\n-        toBeCreated.addAll(propByRes.get(ResourceOperation.CREATE));\n-        toBeUpdated.addAll(propByRes.get(ResourceOperation.UPDATE));\n-        toBeDeleted.addAll(propByRes.get(ResourceOperation.DELETE));\n-        oldAccountIds.putAll(propByRes.getOldAccountIds());\n+        if (propByRes != null) {\n+            toBeCreated.addAll(propByRes.get(ResourceOperation.CREATE));\n+            toBeUpdated.addAll(propByRes.get(ResourceOperation.UPDATE));\n+            toBeDeleted.addAll(propByRes.get(ResourceOperation.DELETE));\n+            oldAccountIds.putAll(propByRes.getOldAccountIds());\n+        }\n+    }\n+\n+    /**\n+     * Removes all of the operations.\n+     */\n+    public void clear() {\n+        toBeCreated.clear();\n+        toBeUpdated.clear();\n+        toBeDeleted.clear();\n     }\n \n     /**\n-     * whether no operations are present.\n+     * Whether no operations are present.\n      *\n      * @return true if no operations (create / update / delete) and no old account ids are present\n      */"},{"sha":"6b8dd67f58771bc20b849773b97a336d509e1571","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AbstractPropagationTaskExecutor.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.propagation.impl;\n \n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n@@ -48,6 +46,7 @@\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.AttributableUtil;\n+import org.apache.syncope.core.util.ExceptionUtil;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -62,7 +61,7 @@\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = { Throwable.class })\n public abstract class AbstractPropagationTaskExecutor implements PropagationTaskExecutor {\n \n     /**\n@@ -317,10 +316,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 taskExecutionMessage = e.getCause().getMessage();\n                 failureReason = e.getMessage() + \"\\n\\n Cause: \" + e.getCause().getMessage().split(\"\\n\")[0];\n             } else {\n-                StringWriter exceptionWriter = new StringWriter();\n-                exceptionWriter.write(e.getMessage() + \"\\n\\n\");\n-                e.printStackTrace(new PrintWriter(exceptionWriter));\n-                taskExecutionMessage = exceptionWriter.toString();\n+                taskExecutionMessage = ExceptionUtil.getFullStackTrace(e);\n                 if (e.getCause() == null) {\n                     failureReason = e.getMessage();\n                 } else {\n@@ -451,7 +447,7 @@ protected ConnectorObject getRemoteObject(final PropagationTask task, final Conn\n                     new ObjectClass(task.getObjectClassName()),\n                     new Uid(accountId),\n                     connector.getOperationOptions(AttributableUtil.getInstance(task.getSubjectType()).\n-                    getMappingItems(task.getResource(), MappingPurpose.PROPAGATION)));\n+                            getMappingItems(task.getResource(), MappingPurpose.PROPAGATION)));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;"},{"sha":"7687e85b60d4ac748bd460e412a48a17fd2f1288","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":46,"deletions":39,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -28,6 +28,7 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.syncope.common.mod.AttributeMod;\n+import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.IntMappingType;\n@@ -223,56 +224,62 @@ public List<PropagationTask> getUserUpdateTaskIds(final SyncopeUser user, final\n     /**\n      * Performs update on each resource associated to the user.\n      *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow.\n+     * @param wfResult user to be propagated (and info associated), as per result from workflow\n+     * @param noPropResourceNames external resources not to be considered for propagation\n      * @return list of propagation tasks\n      * @throws NotFoundException if user is not found\n      * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n-    public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult)\n+    public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry<UserMod, Boolean>> wfResult,\n+            final Collection<String> noPropResourceNames)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        return getUserUpdateTaskIds(\n-                wfResult, null, Collections.<String>emptySet(), Collections.<AttributeMod>emptySet(), null);\n+        SyncopeUser user = userDataBinder.getUserFromId(wfResult.getResult().getKey().getId());\n+        return getUpdateTaskIds(user,\n+                wfResult.getResult().getKey().getPassword(),\n+                wfResult.getResult().getValue(),\n+                wfResult.getResult().getKey().getVirAttrsToRemove(),\n+                wfResult.getResult().getKey().getVirAttrsToUpdate(),\n+                wfResult.getPropByRes(),\n+                noPropResourceNames);\n     }\n \n-    /**\n-     * Performs update on each resource associated to the user.\n-     *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow\n-     * @param password to be updated\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if user is not found\n-     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n-     */\n-    public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            final String password, final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated)\n-            throws NotFoundException, UnauthorizedRoleException {\n+    public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry<UserMod, Boolean>> wfResult) {\n+        UserMod userMod = wfResult.getResult().getKey();\n \n-        return getUserUpdateTaskIds(wfResult, password, vAttrsToBeRemoved, vAttrsToBeUpdated, null);\n-    }\n+        // Propagate password update only to requested resources\n+        List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n+        if (userMod.getPwdPropRequest() == null) {\n+            // a. no specific password propagation request: generate propagation tasks for any resource associated\n+            tasks = getUserUpdateTaskIds(wfResult, null);\n+        } else {\n+            // b. generate the propagation task list in two phases: first the ones containing password,\n+            // the the rest (with no password)\n+            final PropagationByResource origPropByRes = new PropagationByResource();\n+            origPropByRes.merge(wfResult.getPropByRes());\n+\n+            Set<String> pwdResourceNames = new HashSet<String>(userMod.getPwdPropRequest().getResourceNames());\n+            Set<String> currentResourceNames = userDataBinder.getResourceNamesForUserId(userMod.getId());\n+            pwdResourceNames.retainAll(currentResourceNames);\n+            PropagationByResource pwdPropByRes = new PropagationByResource();\n+            pwdPropByRes.addAll(ResourceOperation.UPDATE, pwdResourceNames);\n+            if (!pwdPropByRes.isEmpty()) {\n+                Set<String> toBeExcluded = new HashSet<String>(currentResourceNames);\n+                toBeExcluded.addAll(userMod.getResourcesToAdd());\n+                toBeExcluded.removeAll(pwdResourceNames);\n+                tasks.addAll(getUserUpdateTaskIds(wfResult, toBeExcluded));\n+            }\n \n-    /**\n-     * Performs update on each resource associated to the user.\n-     *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow\n-     * @param password to be updated\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n-     * @param noPropResourceNames external resources not to be considered for propagation\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if user is not found\n-     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n-     */\n-    public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            final String password, final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated,\n-            final Collection<String> noPropResourceNames)\n-            throws NotFoundException, UnauthorizedRoleException {\n+            final PropagationByResource nonPwdPropByRes = new PropagationByResource();\n+            nonPwdPropByRes.merge(origPropByRes);\n+            nonPwdPropByRes.removeAll(pwdResourceNames);\n+            nonPwdPropByRes.purge();\n+            if (!nonPwdPropByRes.isEmpty()) {\n+                tasks.addAll(getUserUpdateTaskIds(wfResult, pwdResourceNames));\n+            }\n+        }\n \n-        SyncopeUser user = userDataBinder.getUserFromId(wfResult.getResult().getKey());\n-        return getUpdateTaskIds(user, password, wfResult.getResult().getValue(),\n-                vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult.getPropByRes(), noPropResourceNames);\n+        return tasks;\n     }\n \n     /**"},{"sha":"74964deae91b9d3ba0016eec60e5671cdaf21204","filename":"core/src/main/java/org/apache/syncope/core/quartz/AbstractTaskJob.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,14 +18,13 @@\n  */\n package org.apache.syncope.core.quartz;\n \n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n import java.util.Date;\n \n import org.apache.syncope.core.persistence.beans.Task;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.persistence.dao.TaskExecDAO;\n+import org.apache.syncope.core.util.ExceptionUtil;\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n@@ -111,11 +110,7 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n         } catch (JobExecutionException e) {\n             LOG.error(\"While executing task \" + taskId, e);\n \n-            StringWriter exceptionWriter = new StringWriter();\n-            exceptionWriter.write(e.getMessage() + \"\\n\\n\");\n-            e.printStackTrace(new PrintWriter(exceptionWriter));\n-            execution.setMessage(exceptionWriter.toString());\n-\n+            execution.setMessage(ExceptionUtil.getFullStackTrace(e));\n             execution.setStatus(Status.FAILURE.name());\n         }\n         execution.setEndDate(new Date());"},{"sha":"314c01a8690f7ea38b05520cc3761ce54f3898f2","filename":"core/src/main/java/org/apache/syncope/core/report/ReportJob.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportJob.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -20,7 +20,6 @@\n \n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n-import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.util.Date;\n import java.util.zip.Deflater;\n@@ -31,6 +30,7 @@\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n+import org.apache.commons.io.IOUtils;\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.report.ReportletConf;\n import org.apache.syncope.common.types.ReportExecStatus;\n@@ -40,6 +40,7 @@\n import org.apache.syncope.core.persistence.dao.ReportExecDAO;\n import org.apache.syncope.core.rest.data.ReportDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.util.ExceptionUtil;\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.Job;\n import org.quartz.JobExecutionContext;\n@@ -165,9 +166,9 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n                         Throwable t = e instanceof ReportException\n                                 ? e.getCause()\n                                 : e;\n-                        exceptionWriter.write(t.getMessage() + \"\\n\\n\");\n-                        t.printStackTrace(new PrintWriter(exceptionWriter));\n-                        reportExecutionMessage.append(exceptionWriter.toString()).append(\"\\n==================\\n\");\n+                        reportExecutionMessage.\n+                                append(ExceptionUtil.getFullStackTrace(t)).\n+                                append(\"\\n==================\\n\");\n                     }\n                 }\n             }\n@@ -181,17 +182,14 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n             }\n         } catch (Exception e) {\n             execution.setStatus(ReportExecStatus.FAILURE);\n-\n-            exceptionWriter.write(e.getMessage() + \"\\n\\n\");\n-            e.printStackTrace(new PrintWriter(exceptionWriter));\n-            reportExecutionMessage.append(exceptionWriter.toString());\n+            reportExecutionMessage.append(ExceptionUtil.getFullStackTrace(e));\n \n             throw new JobExecutionException(e, true);\n         } finally {\n             try {\n                 zos.closeEntry();\n-                zos.close();\n-                baos.close();\n+                IOUtils.closeQuietly(zos);\n+                IOUtils.closeQuietly(baos);\n             } catch (IOException e) {\n                 LOG.error(\"While closing StreamResult's backend\", e);\n             }"},{"sha":"dd368d4d25d44f4dfe60ee1d93e03fcfa2025874","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -111,6 +111,10 @@ public RoleTO read(final Long roleId) {\n             role = binder.getRoleFromId(roleId);\n         }\n \n+        if (role == null) {\n+            throw new NotFoundException(\"Role \" + roleId);\n+        }\n+\n         auditManager.audit(Category.role, RoleSubCategory.read, Result.success,\n                 \"Successfully read role: \" + role.getId());\n \n@@ -338,7 +342,7 @@ public RoleTO update(final RoleMod roleMod) {\n     public RoleTO delete(final Long roleId) {\n         LOG.debug(\"Role delete called for {}\", roleId);\n \n-        List<SyncopeRole> ownedRoles = roleDAO.findOwned(binder.getRoleFromId(roleId));\n+        List<SyncopeRole> ownedRoles = roleDAO.findOwnedByRole(roleId);\n         if (!ownedRoles.isEmpty()) {\n             List<String> owned = new ArrayList<String>(ownedRoles.size());\n             for (SyncopeRole role : ownedRoles) {"},{"sha":"fc03b8c85e704d24921e932745cfdec5af73f9ab","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.EntityExistsException;\n-import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.AbstractSchemaTO;\n import org.apache.syncope.common.to.DerSchemaTO;\n@@ -31,7 +30,6 @@\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;"},{"sha":"d7d29e28815db841c3596c450239592c0f051be2","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.security.AccessControlException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -35,21 +36,22 @@\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditElements.UserSubCategory;\n-import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.SyncopeConf;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n+import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.propagation.PropagationException;\n import org.apache.syncope.core.propagation.PropagationReporter;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n@@ -94,6 +96,9 @@ public class UserController extends AbstractResourceAssociator<UserTO> {\n     @Autowired\n     protected AttributableSearchDAO searchDAO;\n \n+    @Autowired\n+    protected ConfDAO confDAO;\n+\n     @Autowired\n     protected UserDataBinder binder;\n \n@@ -112,6 +117,15 @@ public class UserController extends AbstractResourceAssociator<UserTO> {\n     @Autowired\n     protected NotificationManager notificationManager;\n \n+    public boolean isSelfRegistrationAllowed() {\n+        final SyncopeConf selfRegistrationAllowed = confDAO.find(\"selfRegistration.allowed\", \"false\");\n+\n+        auditManager.audit(Category.user, AuditElements.UserSubCategory.selfRegistrationAllowed, Result.success,\n+                \"Successfully checked whether self registration is allowed\");\n+\n+        return Boolean.valueOf(selfRegistrationAllowed.getValue());\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     public String getUsername(final Long userId) {\n         return binder.getUserTO(userId).getUsername();\n@@ -174,17 +188,6 @@ public List<UserTO> list(final int page, final int size) {\n         return userTOs;\n     }\n \n-    @PreAuthorize(\"hasRole('USER_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n-    public UserTO read(final Long userId) {\n-        UserTO result = binder.getUserTO(userId);\n-\n-        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n-                \"Successfully read user: \" + userId);\n-\n-        return result;\n-    }\n-\n     @PreAuthorize(\"isAuthenticated() \"\n             + \"and not(hasRole(T(org.apache.syncope.common.SyncopeConstants).ANONYMOUS_ENTITLEMENT))\")\n     @Transactional(readOnly = true)\n@@ -197,6 +200,17 @@ public UserTO readSelf() {\n         return userTO;\n     }\n \n+    @PreAuthorize(\"hasRole('USER_READ')\")\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    public UserTO read(final Long userId) {\n+        UserTO result = binder.getUserTO(userId);\n+\n+        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n+                \"Successfully read user: \" + userId);\n+\n+        return result;\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<UserTO> search(final NodeCond searchCondition)\n@@ -232,6 +246,16 @@ public List<UserTO> search(final NodeCond searchCondition, final int page, final\n         return result;\n     }\n \n+    @PreAuthorize(\"isAnonymous() or hasRole(T(org.apache.syncope.common.SyncopeConstants).ANONYMOUS_ENTITLEMENT)\")\n+    public UserTO createSelf(final UserTO userTO) {\n+        if (!isSelfRegistrationAllowed()) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n+            sce.getElements().add(\"SelfRegistration forbidden by configuration\");\n+        }\n+\n+        return doCreate(userTO);\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n     public UserTO create(final UserTO userTO) {\n         LOG.debug(\"User create called with {}\", userTO);\n@@ -246,6 +270,10 @@ public UserTO create(final UserTO userTO) {\n             throw new UnauthorizedRoleException(requestRoleIds);\n         }\n \n+        return doCreate(userTO);\n+    }\n+\n+    protected UserTO doCreate(final UserTO userTO) {\n         // Attributable transformation (if configured)\n         UserTO actual = attrTransformer.transform(userTO);\n         LOG.debug(\"Transformed: {}\", actual);\n@@ -279,70 +307,31 @@ public UserTO create(final UserTO userTO) {\n         return savedTO;\n     }\n \n+    @PreAuthorize(\"isAuthenticated() \"\n+            + \"and not(hasRole(T(org.apache.syncope.common.SyncopeConstants).ANONYMOUS_ENTITLEMENT))\")\n+    public UserTO updateSelf(final UserMod userMod) {\n+        UserTO userTO = binder.getAuthenticatedUserTO();\n+\n+        if (userTO.getId() != userMod.getId()) {\n+            throw new AccessControlException(\"Not allowed for user id \" + userMod.getId());\n+        }\n+\n+        return update(userMod);\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     public UserTO update(final UserMod userMod) {\n         LOG.debug(\"User update called with {}\", userMod);\n \n-        final String changedPwd = userMod.getPassword();\n-\n         // AttributableMod transformation (if configured)\n         UserMod actual = attrTransformer.transform(userMod);\n         LOG.debug(\"Transformed: {}\", actual);\n+        /*\n+         * Actual operations: workflow, propagation, notification\n+         */\n+        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(actual);\n \n-        // 1. update password internally only if required\n-        if (actual.getPwdPropRequest() != null && !actual.getPwdPropRequest().isOnSyncope()) {\n-            actual.setPassword(null);\n-        }\n-        WorkflowResult<Map.Entry<Long, Boolean>> updated = uwfAdapter.update(actual);\n-\n-        // 2. propagate password update only to requested resources\n-        List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n-        if (actual.getPwdPropRequest() == null) {\n-            // 2a. no specific password propagation request: generate propagation tasks for any resource associated\n-            tasks = propagationManager.getUserUpdateTaskIds(updated, changedPwd,\n-                    actual.getVirAttrsToRemove(), actual.getVirAttrsToUpdate());\n-        } else {\n-            // 2b. generate the propagation task list in two phases: first the ones containing password,\n-            // the the rest (with no password)\n-            final PropagationByResource origPropByRes = new PropagationByResource();\n-            origPropByRes.merge(updated.getPropByRes());\n-\n-            List<String> pwdResourceNames = actual.getPwdPropRequest().getResourceNames();\n-            SyncopeUser user = binder.getUserFromId(updated.getResult().getKey());\n-            pwdResourceNames.retainAll(user.getResourceNames());\n-            final PropagationByResource pwdPropByRes = new PropagationByResource();\n-            pwdPropByRes.addAll(ResourceOperation.UPDATE, pwdResourceNames);\n-            updated.setPropByRes(pwdPropByRes);\n-\n-            if (!pwdPropByRes.isEmpty()) {\n-                Set<String> toBeExcluded = new HashSet<String>(user.getResourceNames());\n-                toBeExcluded.addAll(actual.getResourcesToAdd());\n-                toBeExcluded.removeAll(pwdResourceNames);\n-                tasks.addAll(propagationManager.getUserUpdateTaskIds(\n-                        updated,\n-                        changedPwd,\n-                        actual.getVirAttrsToRemove(),\n-                        actual.getVirAttrsToUpdate(),\n-                        toBeExcluded));\n-            }\n-\n-            final PropagationByResource nonPwdPropByRes = new PropagationByResource();\n-            nonPwdPropByRes.merge(origPropByRes);\n-            nonPwdPropByRes.removeAll(pwdResourceNames);\n-            nonPwdPropByRes.purge();\n-            updated.setPropByRes(nonPwdPropByRes);\n-\n-            if (!nonPwdPropByRes.isEmpty()) {\n-                tasks.addAll(propagationManager.getUserUpdateTaskIds(\n-                        updated,\n-                        null,\n-                        actual.getVirAttrsToRemove(),\n-                        actual.getVirAttrsToUpdate(),\n-                        pwdResourceNames));\n-            }\n-\n-            updated.setPropByRes(origPropByRes);\n-        }\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n \n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n                 getBean(PropagationReporter.class);\n@@ -353,11 +342,9 @@ public UserTO update(final UserMod userMod) {\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        // 3. create notification tasks\n-        notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n+        notificationManager.createTasks(updated.getResult().getKey().getId(), updated.getPerformedTasks());\n \n-        // 4. prepare result, including propagation status on external resources\n-        final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey());\n+        final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey().getId());\n         updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n         auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n@@ -424,11 +411,19 @@ public UserTO status(final StatusMod statusMod) {\n         return savedTO;\n     }\n \n+    @PreAuthorize(\"isAuthenticated() \"\n+            + \"and not(hasRole(T(org.apache.syncope.common.SyncopeConstants).ANONYMOUS_ENTITLEMENT))\")\n+    public UserTO deleteSelf() {\n+        UserTO userTO = binder.getAuthenticatedUserTO();\n+\n+        return delete(userTO.getId());\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n     public UserTO delete(final Long userId) {\n         LOG.debug(\"User delete called for {}\", userId);\n \n-        List<SyncopeRole> ownedRoles = roleDAO.findOwned(binder.getUserFromId(userId));\n+        List<SyncopeRole> ownedRoles = roleDAO.findOwnedByUser(userId);\n         if (!ownedRoles.isEmpty()) {\n             List<String> owned = new ArrayList<String>(ownedRoles.size());\n             for (SyncopeRole role : ownedRoles) {\n@@ -452,9 +447,6 @@ public UserTO delete(final Long userId) {\n \n         List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userId);\n \n-        final UserTO userTO = new UserTO();\n-        userTO.setId(userId);\n-\n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n                 getBean(PropagationReporter.class);\n         try {\n@@ -464,16 +456,24 @@ public UserTO delete(final Long userId) {\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        userTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n-\n         uwfAdapter.delete(userId);\n \n+        final UserTO deletedTO;\n+        SyncopeUser deleted = userDAO.find(userId);\n+        if (deleted == null) {\n+            deletedTO = new UserTO();\n+            deletedTO.setId(userId);\n+        } else {\n+            deletedTO = binder.getUserTO(userId);\n+        }\n+        deletedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n+\n         auditManager.audit(Category.user, UserSubCategory.delete, Result.success,\n                 \"Successfully deleted user: \" + userId);\n \n         LOG.debug(\"User successfully deleted: {}\", userId);\n \n-        return userTO;\n+        return deletedTO;\n     }\n \n     @PreAuthorize(\"(hasRole('USER_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE) or \"\n@@ -542,9 +542,9 @@ public UserTO unlink(final Long userId, final Collection<String> resources) {\n \n         userMod.getResourcesToRemove().addAll(resources);\n \n-        final WorkflowResult<Map.Entry<Long, Boolean>> updated = uwfAdapter.update(userMod);\n+        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(userMod);\n \n-        final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey());\n+        final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey().getId());\n \n         auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n                 \"Successfully updated user: \" + updatedTO.getUsername());"},{"sha":"eb8e9585019bebd4cf4df26d7f300240b860d8b2","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserRequestController.java","status":"removed","additions":0,"deletions":294,"changes":294,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,294 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.controller;\n-\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.List;\n-import javax.annotation.Resource;\n-import javax.persistence.RollbackException;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.to.UserRequestTO;\n-import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.UserRequestSubCategory;\n-import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.persistence.beans.SyncopeConf;\n-import org.apache.syncope.core.persistence.beans.UserRequest;\n-import org.apache.syncope.core.persistence.dao.ConfDAO;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.dao.UserRequestDAO;\n-import org.apache.syncope.core.rest.data.UserRequestDataBinder;\n-import org.apache.syncope.core.util.EntitlementUtil;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Component\n-public class UserRequestController {\n-\n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(UserRequestController.class);\n-\n-    @Autowired\n-    private AuditManager auditManager;\n-\n-    @Autowired\n-    private ConfDAO confDAO;\n-\n-    @Autowired\n-    private UserRequestDAO userRequestDAO;\n-\n-    @Autowired\n-    private UserController userController;\n-\n-    @Autowired\n-    private UserRequestDataBinder binder;\n-\n-    public boolean isCreateAllowed() {\n-        final SyncopeConf createRequestAllowed = confDAO.find(\"createRequest.allowed\", \"false\");\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.isCreateAllowed, Result.success,\n-                \"Successfully checked whether self create is allowed\");\n-\n-        return Boolean.valueOf(createRequestAllowed.getValue());\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    public UserRequestTO create(final UserTO userTO) {\n-        if (!isCreateAllowed()) {\n-            LOG.error(\"Create requests are not allowed\");\n-\n-            throw new UnauthorizedRoleException(-1L);\n-        }\n-\n-        LOG.debug(\"Request user create called with {}\", userTO);\n-\n-        try {\n-            binder.testCreate(userTO);\n-        } catch (RollbackException e) {\n-            LOG.debug(\"Testing create - ignore exception\");\n-        }\n-\n-        UserRequest request = new UserRequest();\n-        request.setUsername(userTO.getUsername());\n-        request.createUser(userTO);\n-        request.setCreationDate(new Date());\n-        request = userRequestDAO.save(request);\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.create, Result.success,\n-                \"Successfully created user request for \" + request.getUsername());\n-\n-        return binder.getUserRequestTO(request);\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated() \"\n-            + \"and not(hasRole(T(org.apache.syncope.common.SyncopeConstants).ANONYMOUS_ENTITLEMENT))\")\n-    public UserRequestTO update(final UserMod userMod) {\n-        LOG.debug(\"Request user update called with {}\", userMod);\n-\n-        try {\n-            binder.testUpdate(userMod);\n-        } catch (RollbackException e) {\n-            LOG.debug(\"Testing update - ignore exception\");\n-        }\n-\n-        UserRequest request = new UserRequest();\n-        request.setUsername(binder.getUserFromId(userMod.getId()).getUsername());\n-        request.updateUser(userMod);\n-        request.setCreationDate(new Date());\n-        request = userRequestDAO.save(request);\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.update, Result.success,\n-                \"Successfully updated user request for \" + request.getUsername());\n-\n-        return binder.getUserRequestTO(request);\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated() \"\n-            + \"and not(hasRole(T(org.apache.syncope.common.SyncopeConstants).ANONYMOUS_ENTITLEMENT))\")\n-    public UserRequestTO delete(final Long userId) {\n-        LOG.debug(\"Request user delete called with {}\", userId);\n-\n-        try {\n-            binder.testDelete(userId);\n-        } catch (RollbackException e) {\n-            LOG.debug(\"Testing delete - ignore exception\");\n-        }\n-\n-        UserRequest request = new UserRequest();\n-        request.setUsername(binder.getUserFromId(userId).getUsername());\n-        request.deleteUser(userId);\n-        request.setCreationDate(new Date());\n-        request = userRequestDAO.save(request);\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n-                \"Successfully deleted user request for user\" + request.getUsername());\n-\n-        return binder.getUserRequestTO(request);\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_REQUEST_LIST')\")\n-    @Transactional(readOnly = true)\n-    public List<UserRequestTO> list() {\n-        List<UserRequestTO> result = new ArrayList<UserRequestTO>();\n-\n-        for (UserRequest request : userRequestDAO.findAll()) {\n-            result.add(binder.getUserRequestTO(request));\n-        }\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.list, Result.success,\n-                \"Successfully listed all user requests: \" + result.size());\n-\n-        return result;\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_REQUEST_LIST')\")\n-    @Transactional(readOnly = true)\n-    public List<UserRequestTO> list(final boolean executed) {\n-        List<UserRequestTO> result = new ArrayList<UserRequestTO>();\n-\n-        for (UserRequest request : userRequestDAO.findAll(executed)) {\n-            result.add(binder.getUserRequestTO(request));\n-        }\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.list, Result.success,\n-                String.format(\"Successfully listed all %s executed user requests: %d\",\n-                (executed ? \"\" : \"not\"), result.size()));\n-\n-        return result;\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_REQUEST_LIST')\")\n-    @Transactional(readOnly = true)\n-    public List<UserRequestTO> listByUsername(final String username) {\n-        List<UserRequestTO> result = new ArrayList<UserRequestTO>();\n-\n-        for (UserRequest request : userRequestDAO.findAll(username)) {\n-            result.add(binder.getUserRequestTO(request));\n-        }\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.list, Result.success,\n-                String.format(\"Successfully listed all %s's requests: %d\", username, result.size()));\n-\n-        return result;\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_REQUEST_READ')\")\n-    @Transactional(readOnly = true)\n-    public UserRequestTO read(final Long requestId) {\n-        UserRequest request = userRequestDAO.find(requestId);\n-        if (request == null) {\n-            throw new NotFoundException(\"User request \" + requestId);\n-        }\n-\n-        final UserRequestTO userRequestTO = binder.getUserRequestTO(request);\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.read, Result.success,\n-                \"Successfully read user request for \" + request.getUsername());\n-\n-        return userRequestTO;\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_REQUEST_DELETE')\")\n-    public UserRequestTO deleteRequest(final Long requestId) {\n-        UserRequest request = userRequestDAO.find(requestId);\n-        if (request == null) {\n-            throw new NotFoundException(\"User request \" + requestId);\n-        }\n-\n-        UserRequestTO requestToDelete = binder.getUserRequestTO(request);\n-        userRequestDAO.delete(requestId);\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n-                \"Successfully deleted user request for user\" + request.getUsername());\n-\n-        return requestToDelete;\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_REQUEST_CLAIM')\")\n-    public UserRequestTO claim(final Long requestId) {\n-        UserRequest request = userRequestDAO.find(requestId);\n-        if (request == null) {\n-            throw new NotFoundException(\"User request \" + requestId);\n-        }\n-\n-        request.setOwner(EntitlementUtil.getAuthenticatedUsername());\n-        request.setClaimDate(new Date());\n-\n-        final UserRequestTO userRequestTO = binder.getUserRequestTO(userRequestDAO.save(request));\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.claim, Result.success,\n-                String.format(\"Successfully claimed user request %s by %s\",\n-                userRequestTO.getId(), userRequestTO.getOwner()));\n-\n-        return userRequestTO;\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_REQUEST_EXECUTE') and (\"\n-            + \"(hasRole('USER_CREATE') and #request.type == #request.type.CREATE) or \"\n-            + \"(hasRole('USER_UPDATE') and #request.type == #request.type.UPDATE) or \"\n-            + \"(hasRole('USER_DELETE') and #request.type == #request.type.DELETE))\")\n-    public UserTO execute(final UserRequestTO request, final UserTO reviewed, final UserMod changes) {\n-        UserRequest userRequest = userRequestDAO.find(request.getId());\n-        if (request.isExecuted()) {\n-            throw new NotFoundException(\"Executable user request \" + request.getId());\n-        }\n-\n-        if (StringUtils.isBlank(request.getOwner())\n-                || !request.getOwner().equalsIgnoreCase(EntitlementUtil.getAuthenticatedUsername())) {\n-\n-            throw SyncopeClientException.build(ClientExceptionType.Unauthorized);\n-        }\n-\n-        final UserTO res;\n-\n-        switch (request.getType()) {\n-            case CREATE:\n-                res = userController.create(reviewed == null ? request.getUserTO() : reviewed);\n-                break;\n-            case UPDATE:\n-                res = userController.update(changes == null ? request.getUserMod() : changes);\n-                break;\n-            case DELETE:\n-                res = userController.delete(request.getUserId());\n-                break;\n-            default:\n-                throw new NotFoundException(\"User request \" + request.getType());\n-        }\n-\n-        userRequest.setExecuted(true);\n-        userRequest.setExecutionDate(new Date());\n-        userRequestDAO.save(userRequest);\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.execute, Result.success,\n-                String.format(\"Successfully executed %s request for user %d\", request.getType(), res.getId()));\n-\n-        return res;\n-    }\n-}"},{"sha":"08bd164e4512eb66046ee82ed251bd127fb92cdc","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserWorkflowController.java","status":"modified","additions":26,"deletions":22,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -21,6 +21,8 @@\n import java.util.AbstractMap;\n import java.util.List;\n import java.util.Map;\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\n+import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n import org.apache.syncope.common.types.AuditElements;\n@@ -61,7 +63,7 @@ public class UserWorkflowController extends AbstractController {\n     protected UserDataBinder binder;\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_CLAIM')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public WorkflowFormTO claimForm(final String taskId) {\n         WorkflowFormTO result = uwfAdapter.claimForm(taskId,\n                 SecurityContextHolder.getContext().getAuthentication().getName());\n@@ -79,10 +81,13 @@ public UserTO executeWorkflow(final UserTO userTO, final String taskId) {\n \n         WorkflowResult<Long> updated = uwfAdapter.execute(userTO, taskId);\n \n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                new AbstractMap.SimpleEntry<Long, Boolean>(updated.getResult(), null),\n-                updated.getPropByRes(), updated.getPerformedTasks()));\n+                new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                        new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, null),\n+                        updated.getPropByRes(), updated.getPerformedTasks()));\n \n         taskExecutor.execute(tasks);\n \n@@ -100,7 +105,7 @@ public UserTO executeWorkflow(final UserTO userTO, final String taskId) {\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public WorkflowFormTO getFormForUser(final Long userId) {\n         SyncopeUser user = binder.getUserFromId(userId);\n         WorkflowFormTO result = uwfAdapter.getForm(user.getWorkflowId());\n@@ -113,7 +118,7 @@ public WorkflowFormTO getFormForUser(final Long userId) {\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_LIST')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public List<WorkflowFormTO> getForms() {\n         List<WorkflowFormTO> forms = uwfAdapter.getForms();\n \n@@ -125,7 +130,7 @@ public List<WorkflowFormTO> getForms() {\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public List<WorkflowFormTO> getForms(final Long userId, final String formName) {\n         SyncopeUser user = binder.getUserFromId(userId);\n         final List<WorkflowFormTO> result = uwfAdapter.getForms(user.getWorkflowId(), formName);\n@@ -138,33 +143,32 @@ public List<WorkflowFormTO> getForms(final Long userId, final String formName) {\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_SUBMIT')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO submitForm(final WorkflowFormTO form) {\n         LOG.debug(\"About to process form {}\", form);\n \n-        WorkflowResult<Map.Entry<Long, String>> updated = uwfAdapter.submitForm(form,\n-                SecurityContextHolder.getContext().getAuthentication().getName());\n+        WorkflowResult<? extends AbstractAttributableMod> updated =\n+                uwfAdapter.submitForm(form, SecurityContextHolder.getContext().getAuthentication().getName());\n \n-        // propByRes can be made empty by the workflow definition is no propagation should occur \n+        // propByRes can be made empty by the workflow definition if no propagation should occur \n         // (for example, with rejected users)\n-        if (updated.getPropByRes() != null && !updated.getPropByRes().isEmpty()) {\n+        if (updated.getResult() instanceof UserMod\n+                && updated.getPropByRes() != null && !updated.getPropByRes().isEmpty()) {\n+\n             List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                    new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                    new AbstractMap.SimpleEntry<Long, Boolean>(updated.getResult().getKey(), Boolean.TRUE),\n-                    updated.getPropByRes(),\n-                    updated.getPerformedTasks()),\n-                    updated.getResult().getValue(),\n-                    null,\n-                    null,\n-                    null);\n+                    new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                            new AbstractMap.SimpleEntry<UserMod, Boolean>((UserMod) updated.getResult(), Boolean.TRUE),\n+                            updated.getPropByRes(),\n+                            updated.getPerformedTasks()));\n+\n             taskExecutor.execute(tasks);\n         }\n \n-        final UserTO savedTO = binder.getUserTO(updated.getResult().getKey());\n+        UserTO savedTO = binder.getUserTO(updated.getResult().getId());\n \n         auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.submitForm,\n                 AuditElements.Result.success,\n-                \"Successfully submitted workflow form for user: \" + savedTO.getUsername());\n+                \"Successfully submitted workflow form for : \" + savedTO.getUsername());\n \n         LOG.debug(\"About to return user after form processing\\n{}\", savedTO);\n "},{"sha":"0c011b053095c846903da7ae6d9fabb3f08caa2f","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -88,7 +88,11 @@ public SyncopeUser getUserFromId(final Long userId) {\n             throw new NotFoundException(\"User \" + userId);\n         }\n \n-        if (!user.getUsername().equals(EntitlementUtil.getAuthenticatedUsername())) {\n+        // Allows anonymous (during self-registration) and self (during self-update) to read own SyncopeUser,\n+        // otherwise goes thorugh security checks to see if needed role entitlements are owned\n+        if (!EntitlementUtil.getAuthenticatedUsername().equals(anonymousUser)\n+                && !EntitlementUtil.getAuthenticatedUsername().equals(user.getUsername())) {\n+\n             Set<Long> roleIds = user.getRoleIds();\n             Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n             roleIds.removeAll(adminRoleIds);\n@@ -100,6 +104,11 @@ public SyncopeUser getUserFromId(final Long userId) {\n         return user;\n     }\n \n+    @Transactional(readOnly = true)\n+    public Set<String> getResourceNamesForUserId(final Long userId) {\n+        return getUserFromId(userId).getResourceNames();\n+    }\n+\n     @Transactional(readOnly = true)\n     public UserTO getAuthenticatedUserTO() {\n         final UserTO authUserTO;\n@@ -180,8 +189,8 @@ private void setPassword(final SyncopeUser user, final String password,\n         try {\n             user.setPassword(password, getPredefinedCipherAlgoritm(), passwordHistorySize);\n         } catch (NotFoundException e) {\n-            final SyncopeClientException invalidCiperAlgorithm = SyncopeClientException.build(\n-                    ClientExceptionType.NotFound);\n+            final SyncopeClientException invalidCiperAlgorithm =\n+                    SyncopeClientException.build(ClientExceptionType.NotFound);\n             invalidCiperAlgorithm.getElements().add(e.getMessage());\n             scce.addException(invalidCiperAlgorithm);\n \n@@ -237,12 +246,15 @@ public void create(final SyncopeUser user, final UserTO userTO) {\n     /**\n      * Update user, given UserMod.\n      *\n-     * @param user to be updated\n+     * @param toBeUpdated user to be updated\n      * @param userMod bean containing update request\n      * @return updated user + propagation by resource\n      * @see PropagationByResource\n      */\n-    public PropagationByResource update(final SyncopeUser user, final UserMod userMod) {\n+    public PropagationByResource update(final SyncopeUser toBeUpdated, final UserMod userMod) {\n+        // Re-merge any pending change from workflow tasks\n+        SyncopeUser user = userDAO.save(toBeUpdated);\n+\n         PropagationByResource propByRes = new PropagationByResource();\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();"},{"sha":"1492d2fe500e4f1c3699423e52310a6640506df6","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserRequestDataBinder.java","status":"removed","additions":0,"deletions":107,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,107 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.data;\n-\n-import javax.persistence.RollbackException;\n-import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.to.UserRequestTO;\n-import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.core.persistence.beans.UserRequest;\n-import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Component\n-public class UserRequestDataBinder {\n-\n-    @Autowired\n-    private UserDataBinder userDataBinder;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public SyncopeUser getUserFromId(final Long userId) throws NotFoundException, UnauthorizedRoleException {\n-        if (userId == null) {\n-            throw new NotFoundException(\"Null user id\");\n-        }\n-\n-        SyncopeUser user = userDAO.find(userId);\n-        if (user == null) {\n-            throw new NotFoundException(\"User \" + userId);\n-        }\n-\n-        SyncopeUser authUser = userDAO.find(SecurityContextHolder.getContext().getAuthentication().getName());\n-\n-        if (authUser == null || !authUser.equals(user)) {\n-            throw new UnauthorizedRoleException(-1L);\n-        }\n-\n-        return user;\n-    }\n-\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public UserTO getAuthUserTO() throws NotFoundException {\n-        SyncopeUser authUser = userDAO.find(SecurityContextHolder.getContext().getAuthentication().getName());\n-        return userDataBinder.getUserTO(authUser);\n-    }\n-\n-    public UserRequestTO getUserRequestTO(final UserRequest request) {\n-        UserRequestTO result = new UserRequestTO();\n-        BeanUtils.copyProperties(request, result, new String[] {\"executed\"});\n-        result.setExecuted(request.isExecuted());\n-\n-        return result;\n-    }\n-\n-    @Transactional(rollbackFor = {Throwable.class})\n-    public void testCreate(final UserTO userTO) {\n-        SyncopeUser user = new SyncopeUser();\n-        userDataBinder.create(user, userTO);\n-        userDAO.save(user);\n-        userDAO.flush();\n-\n-        throw new RollbackException();\n-    }\n-\n-    @Transactional(rollbackFor = {Throwable.class})\n-    public void testUpdate(final UserMod userMod) throws NotFoundException, UnauthorizedRoleException {\n-        SyncopeUser user = getUserFromId(userMod.getId());\n-        userDataBinder.update(user, userMod);\n-        userDAO.save(user);\n-        userDAO.flush();\n-\n-        throw new RollbackException();\n-    }\n-\n-    @Transactional(rollbackFor = {Throwable.class})\n-    public void testDelete(final Long userId) throws NotFoundException, UnauthorizedRoleException {\n-        SyncopeUser user = getUserFromId(userId);\n-        userDAO.delete(user);\n-        userDAO.flush();\n-\n-        throw new RollbackException();\n-    }\n-}"},{"sha":"a26937e93021428b83d2eafeb668133739c33fa4","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -94,7 +94,7 @@ public void setSyncopeUserDetailsService(final SyncopeUserDetailsService syncope\n     }\n \n     @Override\n-    @Transactional(noRollbackFor = {BadCredentialsException.class, DisabledException.class})\n+    @Transactional(noRollbackFor = { BadCredentialsException.class, DisabledException.class })\n     public Authentication authenticate(final Authentication authentication)\n             throws AuthenticationException {\n "},{"sha":"f1a52c80ef4be6b26e8773f5ef0a3cbe6c48c5ed","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeUserDetailsService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -84,7 +84,7 @@ public UserDetails loadUserByUsername(final String username) throws UsernameNotF\n                 }\n             }\n             // Give role operational entitlements for owned roles\n-            List<SyncopeRole> ownedRoles = roleDAO.findOwned(user);\n+            List<SyncopeRole> ownedRoles = roleDAO.findOwnedByUser(user.getId());\n             if (!ownedRoles.isEmpty()) {\n                 authorities.add(new SimpleGrantedAuthority(\"ROLE_CREATE\"));\n                 authorities.add(new SimpleGrantedAuthority(\"ROLE_READ\"));"},{"sha":"104b7f931f9c58e479e1cd248428f9714172d92b","filename":"core/src/main/java/org/apache/syncope/core/services/UserRequestServiceImpl.java","status":"removed","additions":0,"deletions":111,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,111 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.services;\n-\n-import java.net.URI;\n-import java.util.List;\n-\n-import javax.ws.rs.core.Response;\n-\n-import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.services.UserRequestService;\n-import org.apache.syncope.common.to.UserRequestTO;\n-import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.types.RESTHeaders;\n-import org.apache.syncope.core.rest.controller.UserRequestController;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-@Service\n-public class UserRequestServiceImpl extends AbstractServiceImpl implements UserRequestService, ContextAware {\n-\n-    @Autowired\n-    private UserRequestController controller;\n-\n-    @Override\n-    public Response getOptions() {\n-        return Response.ok().header(\"Allow\", \"GET,POST,OPTIONS,HEAD\").\n-                header(RESTHeaders.USERREQUEST_CREATE_ALLOWED.toString(), controller.isCreateAllowed()).\n-                build();\n-    }\n-\n-    @Override\n-    public Response create(final UserRequestTO userRequestTO) {\n-        UserRequestTO outUserRequestTO;\n-        switch (userRequestTO.getType()) {\n-            case CREATE:\n-                outUserRequestTO = controller.create(userRequestTO.getUserTO());\n-                break;\n-\n-            case UPDATE:\n-                outUserRequestTO = controller.update(userRequestTO.getUserMod());\n-                break;\n-\n-            case DELETE:\n-            default:\n-                outUserRequestTO = controller.delete(userRequestTO.getUserId());\n-                break;\n-        }\n-\n-        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(outUserRequestTO.getId())).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_ID.toString(), outUserRequestTO.getId()).\n-                build();\n-    }\n-\n-    @Override\n-    public List<UserRequestTO> list() {\n-        return controller.list(false);\n-    }\n-\n-    @Override\n-    public UserRequestTO read(final Long requestId) {\n-        return controller.read(requestId);\n-    }\n-\n-    @Override\n-    public void delete(final Long requestId) {\n-        controller.deleteRequest(requestId);\n-    }\n-\n-    @Override\n-    public UserRequestTO claim(final Long requestId) {\n-        return controller.claim(requestId);\n-    }\n-\n-    @Override\n-    public UserTO executeCreate(final Long requestId, final UserTO reviewed) {\n-        return controller.execute(controller.read(requestId), reviewed, null);\n-    }\n-\n-    @Override\n-    public UserTO executeUpdate(final Long requestId, final UserMod changes) {\n-        return controller.execute(controller.read(requestId), null, changes);\n-    }\n-\n-    @Override\n-    public UserTO executeDelete(final Long requestId) {\n-        return controller.execute(controller.read(requestId), null, null);\n-    }\n-\n-    @Override\n-    public List<UserRequestTO> listByUsername(final String username) {\n-        return controller.listByUsername(username);\n-    }\n-}"},{"sha":"915ac3a001197199c8a3539aa5ef6cdad287d17d","filename":"core/src/main/java/org/apache/syncope/core/services/UserSelfServiceImpl.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserSelfServiceImpl.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.services;\n+\n+import java.net.URI;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.services.UserSelfService;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.RESTHeaders;\n+import org.apache.syncope.core.rest.controller.UserController;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelfService, ContextAware {\n+\n+    @Autowired\n+    private UserController controller;\n+\n+    @Override\n+    public Response getOptions() {\n+        return Response.ok().header(\"Allow\", \"GET,POST,OPTIONS,HEAD\").\n+                header(RESTHeaders.SELFREGISTRATION_ALLOWED.toString(), controller.isSelfRegistrationAllowed()).\n+                build();\n+    }\n+\n+    @Override\n+    public Response create(final UserTO userTO) {\n+        UserTO created = controller.createSelf(userTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getId())).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID.toString(), created.getId()).\n+                entity(created).\n+                build();\n+    }\n+\n+    @Override\n+    public UserTO read() {\n+        return controller.readSelf();\n+    }\n+\n+    @Override\n+    public Response update(final Long userId, final UserMod userMod) {\n+        userMod.setId(userId);\n+        UserTO updated = controller.updateSelf(userMod);\n+        return Response.ok(updated).\n+                build();\n+\n+    }\n+\n+    @Override\n+    public Response delete() {\n+        UserTO deleted = controller.deleteSelf();\n+        return Response.ok(deleted).\n+                build();\n+    }\n+\n+}"},{"sha":"19c2f9b2d782bdfc27cca33f093351c0983f4470","filename":"core/src/main/java/org/apache/syncope/core/services/UserServiceImpl.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -93,12 +93,7 @@ public List<UserTO> list(final int page, final int size) {\n     public UserTO read(final Long userId) {\n         return controller.read(userId);\n     }\n-\n-    @Override\n-    public UserTO readSelf() {\n-        return controller.readSelf();\n-    }\n-\n+    \n     @Override\n     public List<UserTO> search(final NodeCond searchCondition) throws InvalidSearchConditionException {\n         return controller.search(searchCondition);"},{"sha":"790f0779d18f9fb6a35c196b1f4a3846751aeaa5","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/LDAPMembershipSyncActions.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -198,16 +198,14 @@ protected void userUpdate(final UserMod userMod, final String resourceName) {\n         }\n \n         try {\n-            WorkflowResult<Map.Entry<Long, Boolean>> updated = uwfAdapter.update(userMod);\n+            WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(userMod);\n \n-            List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated,\n-                    userMod.getPassword(), userMod.getVirAttrsToRemove(),\n-                    userMod.getVirAttrsToUpdate(),\n-                    Collections.singleton(resourceName));\n+            List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                    updated, Collections.singleton(resourceName));\n \n             taskExecutor.execute(tasks);\n \n-            notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n+            notificationManager.createTasks(updated.getResult().getKey().getId(), updated.getPerformedTasks());\n         } catch (PropagationException e) {\n             LOG.error(\"Could not propagate {}\", userMod, e);\n         } catch (Exception e) {"},{"sha":"be4b3bcc94b9fba7ec668e690b439f71edd0722e","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":8,"deletions":12,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -368,7 +368,6 @@ protected List<Long> findByAttributableSearch(\n             final ConnectorObject connObj, final List<String> altSearchSchemas, final AttributableUtil attrUtil) {\n \n         // search for external attribute's name/value of each specified name\n-\n         final Map<String, Attribute> extValues = new HashMap<String, Attribute>();\n \n         for (AbstractMappingItem item\n@@ -467,7 +466,7 @@ public Long findMatchingAttributableId(final ObjectClass objectClass, final Stri\n \n         final List<ConnectorObject> found = connector.search(objectClass,\n                 new EqualsFilter(new Name(name)), connector.getOperationOptions(\n-                attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n+                        attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", objectClass, syncTask.getResource(), name);\n@@ -605,7 +604,7 @@ protected UserTO updateUser(final Long id, SyncDelta delta, final boolean dryRun\n         UserMod actual = attrTransformer.transform(userMod);\n         LOG.debug(\"Transformed: {}\", actual);\n \n-        WorkflowResult<Map.Entry<Long, Boolean>> updated;\n+        WorkflowResult<Map.Entry<UserMod, Boolean>> updated;\n         try {\n             updated = uwfAdapter.update(actual);\n         } catch (Exception e) {\n@@ -614,8 +613,8 @@ protected UserTO updateUser(final Long id, SyncDelta delta, final boolean dryRun\n             result.setStatus(SyncResult.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n \n-            updated = new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                    new AbstractMap.SimpleEntry<Long, Boolean>(id, false), new PropagationByResource(),\n+            updated = new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                    new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, false), new PropagationByResource(),\n                     new HashSet<String>());\n         }\n \n@@ -641,17 +640,14 @@ protected UserTO updateUser(final Long id, SyncDelta delta, final boolean dryRun\n             }\n         }\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated,\n-                actual.getPassword(),\n-                actual.getVirAttrsToRemove(),\n-                actual.getVirAttrsToUpdate(),\n-                Collections.singleton(syncTask.getResource().getName()));\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                updated, Collections.singleton(syncTask.getResource().getName()));\n \n         taskExecutor.execute(tasks);\n \n-        notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n+        notificationManager.createTasks(updated.getResult().getKey().getId(), updated.getPerformedTasks());\n \n-        userTO = userDataBinder.getUserTO(updated.getResult().getKey());\n+        userTO = userDataBinder.getUserTO(updated.getResult().getKey().getId());\n \n         actions.after(this, delta, userTO, result);\n "},{"sha":"92f434e034c3eaa0a8c1b33a2785da8abefdf97d","filename":"core/src/main/java/org/apache/syncope/core/util/ContentExporter.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FContentExporter.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -52,8 +52,6 @@\n import org.apache.syncope.core.persistence.dao.impl.AbstractContentDealer;\n import org.apache.syncope.core.util.multiparent.MultiParentNode;\n import org.apache.syncope.core.util.multiparent.MultiParentNodeOp;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.security.crypto.codec.Hex;\n import org.springframework.stereotype.Component;\n@@ -67,9 +65,11 @@\n public class ContentExporter extends AbstractContentDealer {\n \n     protected final static Set<String> TABLE_PREFIXES_TO_BE_EXCLUDED =\n-            new HashSet<String>(Arrays.asList(new String[] {\"QRTZ_\", \"LOGGING\", \"REPORTEXEC\", \"TASKEXEC\",\n-        \"SYNCOPEUSER\", \"UATTR\", \"UATTRVALUE\", \"UATTRUNIQUEVALUE\", \"UDERATTR\", \"UVIRATTR\",\n-        \"MEMBERSHIP\", \"MATTR\", \"MATTRVALUE\", \"MATTRUNIQUEVALUE\", \"MDERATTR\", \"MVIRATTR\", \"USERREQUEST\"}));\n+            new HashSet<String>(Arrays.asList(new String[] {\n+                \"QRTZ_\", \"LOGGING\", \"REPORTEXEC\", \"TASKEXEC\",\n+                \"SYNCOPEUSER\", \"UATTR\", \"UATTRVALUE\", \"UATTRUNIQUEVALUE\", \"UDERATTR\", \"UVIRATTR\",\n+                \"MEMBERSHIP\", \"MATTR\", \"MATTRVALUE\", \"MATTRUNIQUEVALUE\", \"MDERATTR\", \"MVIRATTR\"\n+            }));\n \n     protected static final Map<String, String> TABLES_TO_BE_FILTERED =\n             Collections.singletonMap(\"TASK\", \"DTYPE <> 'PropagationTask'\");\n@@ -325,7 +325,7 @@ public void export(final OutputStream os, final String wfTablePrefix)\n \n             final String schema = dbSchema;\n \n-            rs = meta.getTables(null, schema, null, new String[] {\"TABLE\"});\n+            rs = meta.getTables(null, schema, null, new String[] { \"TABLE\" });\n \n             final Set<String> tableNames = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);\n "},{"sha":"731d304437ee1bbff164aea8577374a3810b0fed","filename":"core/src/main/java/org/apache/syncope/core/util/ExceptionUtil.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FExceptionUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FExceptionUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FExceptionUtil.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+\n+public final class ExceptionUtil {\n+\n+    /**\n+     * Uses commons lang's ExceptionUtils to provide a representation of the full stack trace of the given throwable.\n+     *\n+     * @param t throwable to build stack trace from\n+     * @return a string representation of full stack trace of the given throwable\n+     */\n+    public static String getFullStackTrace(final Throwable t) {\n+        StringBuilder result = new StringBuilder();\n+\n+        for (Throwable throwable : ExceptionUtils.getThrowableList(t)) {\n+            result.append(ExceptionUtils.getMessage(throwable)).append('\\n').\n+                    append(ExceptionUtils.getStackTrace(throwable)).append(\"\\n\\n\");\n+        }\n+\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Private default constructor, for static-only classes.\n+     */\n+    private ExceptionUtil() {\n+    }\n+}"},{"sha":"d6cc3f5a8469fc6e714181e774f6b139419e0d80","filename":"core/src/main/java/org/apache/syncope/core/workflow/WorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.workflow;\n \n import java.util.List;\n-import java.util.Map;\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\n import org.apache.syncope.common.to.WorkflowDefinitionTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n@@ -108,6 +108,6 @@ public interface WorkflowAdapter {\n      * @throws NotFoundException not found exception\n      * @throws WorkflowException workflow exception\n      */\n-    WorkflowResult<Map.Entry<Long, String>> submitForm(WorkflowFormTO form, String username)\n+    WorkflowResult<? extends AbstractAttributableMod> submitForm(WorkflowFormTO form, String username)\n             throws NotFoundException, WorkflowException;\n }"},{"sha":"7b1ee15cd0245fe51f26ed7e695b749ca7e0be07","filename":"core/src/main/java/org/apache/syncope/core/workflow/WorkflowUserSuspender.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowUserSuspender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowUserSuspender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowUserSuspender.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -21,13 +21,12 @@\n import java.util.AbstractMap.SimpleEntry;\n import java.util.List;\n import java.util.Map;\n-import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.policy.UserSuspender;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n-import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -48,9 +47,6 @@ public class WorkflowUserSuspender implements UserSuspender {\n     @Autowired\n     private PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    private UserDataBinder userDataBinder;\n-\n     @Override\n     public void suspend(final SyncopeUser user, final boolean suspend) {\n         try {\n@@ -64,10 +60,13 @@ public void suspend(final SyncopeUser user, final boolean suspend) {\n \n             // propagate suspension if and only if it is required by policy\n             if (suspend) {\n+                UserMod userMod = new UserMod();\n+                userMod.setId(updated.getResult());\n+\n                 final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                        new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                        new SimpleEntry<Long, Boolean>(updated.getResult(), Boolean.FALSE),\n-                        updated.getPropByRes(), updated.getPerformedTasks()));\n+                        new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                                new SimpleEntry<UserMod, Boolean>(userMod, Boolean.FALSE),\n+                                updated.getPropByRes(), updated.getPerformedTasks()));\n \n                 taskExecutor.execute(tasks);\n             }"},{"sha":"0f8fbfc9faefb1528c21a16258eb7a68cb1d897e","filename":"core/src/main/java/org/apache/syncope/core/workflow/role/NoOpRoleWorkflowAdapter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FNoOpRoleWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FNoOpRoleWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FNoOpRoleWorkflowAdapter.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -21,7 +21,6 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n \n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.to.RoleTO;\n@@ -39,10 +38,10 @@\n /**\n  * Simple implementation basically not involving any workflow engine.\n  */\n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = { Throwable.class })\n public class NoOpRoleWorkflowAdapter extends AbstractRoleWorkflowAdapter {\n \n-    private static final List<String> TASKS = Arrays.asList(new String[] {\"create\", \"update\", \"delete\"});\n+    private static final List<String> TASKS = Arrays.asList(new String[] { \"create\", \"update\", \"delete\" });\n \n     @Override\n     public WorkflowResult<Long> create(final RoleTO roleTO)\n@@ -129,9 +128,10 @@ public WorkflowFormTO claimForm(final String taskId, final String username)\n     }\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, String>> submitForm(final WorkflowFormTO form, final String username)\n+    public WorkflowResult<RoleMod> submitForm(final WorkflowFormTO form, final String username)\n             throws NotFoundException, WorkflowException {\n \n         throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n     }\n+\n }"},{"sha":"d869eeb21b439d72dedb8fa26b133e74096d5dc2","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/AbstractUserWorkflowAdapter.java","status":"modified","additions":18,"deletions":3,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -29,10 +29,12 @@\n import org.apache.syncope.core.workflow.WorkflowException;\n import org.apache.syncope.core.workflow.WorkflowInstanceLoader;\n import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.identityconnectors.common.security.EncryptorFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.crypto.codec.Base64;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = { Throwable.class })\n public abstract class AbstractUserWorkflowAdapter implements UserWorkflowAdapter {\n \n     @Autowired\n@@ -41,6 +43,19 @@ public abstract class AbstractUserWorkflowAdapter implements UserWorkflowAdapter\n     @Autowired\n     protected UserDAO userDAO;\n \n+    public static String encrypt(final String clear) {\n+        byte[] encryptedBytes = EncryptorFactory.getInstance().getDefaultEncryptor().encrypt(clear.getBytes());\n+\n+        return new String(Base64.encode(encryptedBytes));\n+    }\n+\n+    public static String decrypt(final String crypted) {\n+        byte[] decryptedBytes =\n+                EncryptorFactory.getInstance().getDefaultEncryptor().decrypt(Base64.decode(crypted.getBytes()));\n+\n+        return new String(decryptedBytes);\n+    }\n+\n     @Override\n     public Class<? extends WorkflowInstanceLoader> getLoaderClass() {\n         return null;\n@@ -62,11 +77,11 @@ public WorkflowResult<Long> activate(final Long userId, final String token)\n         return doActivate(dataBinder.getUserFromId(userId), token);\n     }\n \n-    protected abstract WorkflowResult<Map.Entry<Long, Boolean>> doUpdate(SyncopeUser user, UserMod userMod)\n+    protected abstract WorkflowResult<Map.Entry<UserMod, Boolean>> doUpdate(SyncopeUser user, UserMod userMod)\n             throws WorkflowException;\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, Boolean>> update(final UserMod userMod)\n+    public WorkflowResult<Map.Entry<UserMod, Boolean>> update(final UserMod userMod)\n             throws UnauthorizedRoleException, WorkflowException {\n \n         return doUpdate(dataBinder.getUserFromId(userMod.getId()), userMod);"},{"sha":"af3ceca0c7c240cecbec124d7bf0566a79a761d1","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/NoOpUserWorkflowAdapter.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -40,11 +40,11 @@\n /**\n  * Simple implementation basically not involving any workflow engine.\n  */\n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = { Throwable.class })\n public class NoOpUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n     private static final List<String> TASKS =\n-            Arrays.asList(new String[] {\"create\", \"activate\", \"update\", \"suspend\", \"reactivate\", \"delete\"});\n+            Arrays.asList(new String[] { \"create\", \"activate\", \"update\", \"suspend\", \"reactivate\", \"delete\" });\n \n     public static final String ENABLED = \"enabled\";\n \n@@ -107,15 +107,16 @@ protected WorkflowResult<Long> doActivate(final SyncopeUser user, final String t\n     }\n \n     @Override\n-    protected WorkflowResult<Map.Entry<Long, Boolean>> doUpdate(final SyncopeUser user, final UserMod userMod)\n+    protected WorkflowResult<Map.Entry<UserMod, Boolean>> doUpdate(final SyncopeUser user, final UserMod userMod)\n             throws WorkflowException {\n \n         PropagationByResource propByRes = dataBinder.update(user, userMod);\n \n         SyncopeUser updated = userDAO.save(user);\n \n-        return new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                new AbstractMap.SimpleEntry<Long, Boolean>(updated.getId(), !user.isSuspended()), propByRes, \"update\");\n+        userMod.setId(updated.getId());\n+        return new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, !user.isSuspended()), propByRes, \"update\");\n     }\n \n     @Override\n@@ -198,7 +199,7 @@ public WorkflowFormTO claimForm(final String taskId, final String username)\n     }\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, String>> submitForm(final WorkflowFormTO form, final String username)\n+    public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form, final String username)\n             throws NotFoundException, WorkflowException {\n \n         throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));"},{"sha":"7df943e92c0b14630a4429cf685555c1f3146502","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/UserWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FUserWorkflowAdapter.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -97,7 +97,7 @@ WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean disablePw\n      * @throws UnauthorizedRoleException authorization exception\n      * @throws WorkflowException workflow exception\n      */\n-    WorkflowResult<Map.Entry<Long, Boolean>> update(UserMod userMod)\n+    WorkflowResult<Map.Entry<UserMod, Boolean>> update(UserMod userMod)\n             throws UnauthorizedRoleException, WorkflowException;\n \n     /**"},{"sha":"3937cfcc18c78df6c43fd5106a56f134d004e050","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":94,"deletions":64,"changes":158,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -67,19 +67,20 @@\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.WorkflowFormPropertyType;\n import org.apache.syncope.common.util.BeanUtils;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;\n import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n+import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowException;\n import org.apache.syncope.core.workflow.WorkflowInstanceLoader;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.core.workflow.user.AbstractUserWorkflowAdapter;\n-import org.identityconnectors.common.security.EncryptorFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.crypto.codec.Base64;\n import org.springframework.transaction.annotation.Transactional;\n import org.w3c.dom.Document;\n import org.w3c.dom.NodeList;\n@@ -94,14 +95,16 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(ActivitiUserWorkflowAdapter.class);\n \n-    private static final String[] PROPERTY_IGNORE_PROPS = {\"type\"};\n+    private static final String[] PROPERTY_IGNORE_PROPS = { \"type\" };\n \n     public static final String WF_PROCESS_ID = \"userWorkflow\";\n \n     public static final String WF_PROCESS_RESOURCE = \"userWorkflow.bpmn20.xml\";\n \n     public static final String SYNCOPE_USER = \"syncopeUser\";\n \n+    public static final String WF_EXECUTOR = \"wfExecutor\";\n+\n     public static final String USER_TO = \"userTO\";\n \n     public static final String ENABLED = \"enabled\";\n@@ -145,6 +148,18 @@ public Class<? extends WorkflowInstanceLoader> getLoaderClass() {\n         return ActivitiWorkflowLoader.class;\n     }\n \n+    private void throwException(final ActivitiException e, final String defaultMessage) {\n+        if (e.getCause() != null) {\n+            if (e.getCause().getCause() instanceof SyncopeClientException) {\n+                throw (SyncopeClientException) e.getCause().getCause();\n+            } else if (e.getCause().getCause() instanceof ParsingValidationException) {\n+                throw (ParsingValidationException) e.getCause().getCause();\n+            }\n+        }\n+\n+        throw new WorkflowException(defaultMessage, e);\n+    }\n+\n     private void updateStatus(final SyncopeUser user) {\n         List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {\n@@ -185,17 +200,25 @@ private Set<String> getPerformedTasks(final SyncopeUser user) {\n         return result;\n     }\n \n-    private String encrypt(final String clear) {\n-        byte[] encryptedBytes = EncryptorFactory.getInstance().getDefaultEncryptor().encrypt(clear.getBytes());\n-\n-        return new String(Base64.encode(encryptedBytes));\n-    }\n+    /**\n+     * Saves resources to be propagated and password for later - after form submission - propagation.\n+     */\n+    private void saveForFormSubmit(final SyncopeUser user, final String password,\n+            final PropagationByResource propByRes) {\n \n-    private String decrypt(final String crypted) {\n-        byte[] decryptedBytes =\n-                EncryptorFactory.getInstance().getDefaultEncryptor().decrypt(Base64.decode(crypted.getBytes()));\n+        String formTaskId = getFormTask(user);\n+        if (formTaskId != null) {\n+            // SYNCOPE-238: This is needed to simplify the task query in this.getForms()\n+            taskService.setVariableLocal(formTaskId, TASK_IS_FORM, Boolean.TRUE);\n+            runtimeService.setVariable(user.getWorkflowId(), PROP_BY_RESOURCE, propByRes);\n+            if (propByRes != null) {\n+                propByRes.clear();\n+            }\n \n-        return new String(decryptedBytes);\n+            if (StringUtils.isNotBlank(password)) {\n+                runtimeService.setVariable(user.getWorkflowId(), ENCRYPTED_PWD, encrypt(password));\n+            }\n+        }\n     }\n \n     @Override\n@@ -211,20 +234,22 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n             throws WorkflowException {\n \n         final Map<String, Object> variables = new HashMap<String, Object>();\n+        variables.put(WF_EXECUTOR, EntitlementUtil.getAuthenticatedUsername());\n         variables.put(USER_TO, userTO);\n         variables.put(ENABLED, enabled);\n \n-        final ProcessInstance processInstance;\n+        ProcessInstance processInstance = null;\n         try {\n             processInstance = runtimeService.startProcessInstanceByKey(WF_PROCESS_ID, variables);\n         } catch (ActivitiException e) {\n-            throw new WorkflowException(\"While starting \" + WF_PROCESS_ID + \" instance\", e);\n+            throwException(e, \"While starting \" + WF_PROCESS_ID + \" instance\");\n         }\n \n-        SyncopeUser user = (SyncopeUser) runtimeService.getVariable(processInstance.getProcessInstanceId(),\n-                SYNCOPE_USER);\n+        SyncopeUser user = (SyncopeUser) runtimeService.getVariable(\n+                processInstance.getProcessInstanceId(), SYNCOPE_USER);\n \n-        Boolean updatedEnabled = (Boolean) runtimeService.getVariable(processInstance.getProcessInstanceId(), ENABLED);\n+        Boolean updatedEnabled = (Boolean) runtimeService.getVariable(\n+                processInstance.getProcessInstanceId(), ENABLED);\n         if (updatedEnabled != null) {\n             user.setSuspended(!updatedEnabled);\n         }\n@@ -237,28 +262,16 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n         updateStatus(user);\n         user = userDAO.save(user);\n \n-        Boolean propagateEnable = (Boolean) runtimeService.getVariable(processInstance.getProcessInstanceId(),\n-                PROPAGATE_ENABLE);\n+        Boolean propagateEnable = (Boolean) runtimeService.getVariable(\n+                processInstance.getProcessInstanceId(), PROPAGATE_ENABLE);\n         if (propagateEnable == null) {\n             propagateEnable = enabled;\n         }\n \n-        // save resources to be propagated and password for later - after form submission - propagation\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.CREATE, user.getResourceNames());\n \n-        String formTaskId = getFormTask(user);\n-        if (formTaskId != null) {\n-            // SYNCOPE-238: This is needed to simplify the task query in this.getForms()\n-            taskService.setVariableLocal(formTaskId, TASK_IS_FORM, Boolean.TRUE);\n-            runtimeService.setVariable(processInstance.getProcessInstanceId(), PROP_BY_RESOURCE, propByRes);\n-            propByRes = null;\n-\n-            if (StringUtils.isNotBlank(userTO.getPassword())) {\n-                runtimeService.setVariable(\n-                        processInstance.getProcessInstanceId(), ENCRYPTED_PWD, encrypt(userTO.getPassword()));\n-            }\n-        }\n+        saveForFormSubmit(user, userTO.getPassword(), propByRes);\n \n         return new WorkflowResult<Map.Entry<Long, Boolean>>(\n                 new SimpleEntry<Long, Boolean>(user.getId(), propagateEnable), propByRes, getPerformedTasks(user));\n@@ -270,9 +283,14 @@ private Set<String> doExecuteTask(final SyncopeUser user, final String task,\n         Set<String> preTasks = getPerformedTasks(user);\n \n         final Map<String, Object> variables = new HashMap<String, Object>();\n-        variables.put(SYNCOPE_USER, user);\n+        variables.put(WF_EXECUTOR, EntitlementUtil.getAuthenticatedUsername());\n         variables.put(TASK, task);\n \n+        // using BeanUtils to access all user's properties and trigger lazy loading - we are about to\n+        // serialize a SyncopeUser instance for availability within workflow tasks, and this breaks transactions\n+        BeanUtils.copyProperties(user, new SyncopeUser());\n+        variables.put(SYNCOPE_USER, user);\n+\n         if (moreVariables != null && !moreVariables.isEmpty()) {\n             variables.putAll(moreVariables);\n         }\n@@ -286,7 +304,7 @@ private Set<String> doExecuteTask(final SyncopeUser user, final String task,\n             try {\n                 taskService.complete(tasks.get(0).getId(), variables);\n             } catch (ActivitiException e) {\n-                throw new WorkflowException(\"While completing task '\" + tasks.get(0).getName() + \"' for \" + user, e);\n+                throwException(e, \"While completing task '\" + tasks.get(0).getName() + \"' for \" + user);\n             }\n         } else {\n             LOG.warn(\"Expected a single task, found {}\", tasks.size());\n@@ -302,43 +320,36 @@ private Set<String> doExecuteTask(final SyncopeUser user, final String task,\n     protected WorkflowResult<Long> doActivate(final SyncopeUser user, final String token)\n             throws WorkflowException {\n \n-        Set<String> performedTasks = doExecuteTask(user, \"activate\", Collections.singletonMap(TOKEN, (Object) token));\n+        Set<String> tasks = doExecuteTask(user, \"activate\", Collections.singletonMap(TOKEN, (Object) token));\n+\n         updateStatus(user);\n         SyncopeUser updated = userDAO.save(user);\n \n-        return new WorkflowResult<Long>(updated.getId(), null, performedTasks);\n+        return new WorkflowResult<Long>(updated.getId(), null, tasks);\n     }\n \n     @Override\n-    protected WorkflowResult<Map.Entry<Long, Boolean>> doUpdate(final SyncopeUser user, final UserMod userMod)\n+    protected WorkflowResult<Map.Entry<UserMod, Boolean>> doUpdate(final SyncopeUser user, final UserMod userMod)\n             throws WorkflowException {\n \n-        Set<String> task = doExecuteTask(user, \"update\", Collections.singletonMap(USER_MOD, (Object) userMod));\n+        Set<String> tasks = doExecuteTask(user, \"update\", Collections.singletonMap(USER_MOD, (Object) userMod));\n \n         updateStatus(user);\n         SyncopeUser updated = userDAO.save(user);\n \n-        PropagationByResource propByRes = (PropagationByResource) runtimeService.getVariable(user.getWorkflowId(),\n-                PROP_BY_RESOURCE);\n+        PropagationByResource propByRes = (PropagationByResource) runtimeService.getVariable(\n+                user.getWorkflowId(), PROP_BY_RESOURCE);\n \n-        // save resources to be propagated and password for later - after form submission - propagation\n-        String formTaskId = getFormTask(user);\n-        if (formTaskId != null) {\n-            // SYNCOPE-238: This is needed to simplify the task query in this.getForms()\n-            taskService.setVariableLocal(formTaskId, TASK_IS_FORM, Boolean.TRUE);\n-            if (StringUtils.isNotBlank(userMod.getPassword())) {\n-                runtimeService.setVariable(user.getWorkflowId(), ENCRYPTED_PWD, encrypt(userMod.getPassword()));\n-            }\n-        }\n+        saveForFormSubmit(updated, userMod.getPassword(), propByRes);\n \n         Boolean propagateEnable = (Boolean) runtimeService.getVariable(user.getWorkflowId(), PROPAGATE_ENABLE);\n \n-        return new WorkflowResult<Map.Entry<Long, Boolean>>(new SimpleEntry<Long, Boolean>(\n-                updated.getId(), propagateEnable), propByRes, task);\n+        return new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                new SimpleEntry<UserMod, Boolean>(userMod, propagateEnable), propByRes, tasks);\n     }\n \n     @Override\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     protected WorkflowResult<Long> doSuspend(final SyncopeUser user)\n             throws WorkflowException {\n \n@@ -366,12 +377,25 @@ protected void doDelete(final SyncopeUser user)\n             throws WorkflowException {\n \n         doExecuteTask(user, \"delete\", null);\n-        userDAO.delete(user);\n \n-        if (!historyService.createHistoricProcessInstanceQuery().\n-                processInstanceId(user.getWorkflowId()).list().isEmpty()) {\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(ResourceOperation.DELETE, user.getResourceNames());\n+\n+        saveForFormSubmit(user, null, propByRes);\n+\n+        if (runtimeService.createProcessInstanceQuery().\n+                processInstanceId(user.getWorkflowId()).active().list().isEmpty()) {\n+\n+            userDAO.delete(user.getId());\n+\n+            if (!historyService.createHistoricProcessInstanceQuery().\n+                    processInstanceId(user.getWorkflowId()).list().isEmpty()) {\n \n-            historyService.deleteHistoricProcessInstance(user.getWorkflowId());\n+                historyService.deleteHistoricProcessInstance(user.getWorkflowId());\n+            }\n+        } else {\n+            updateStatus(user);\n+            userDAO.save(user);\n         }\n     }\n \n@@ -522,7 +546,8 @@ private WorkflowFormTO getFormTO(final HistoricTaskInstance task) {\n             }\n         }\n \n-        final WorkflowFormTO formTO = getHFormTO(task.getProcessInstanceId(), task.getId(), task.getFormKey(), props);\n+        final WorkflowFormTO formTO = getHistoricFormTO(\n+                task.getProcessInstanceId(), task.getId(), task.getFormKey(), props);\n         BeanUtils.copyProperties(task, formTO);\n \n         final HistoricActivityInstance historicActivityInstance = historyService.createHistoricActivityInstanceQuery().\n@@ -536,8 +561,7 @@ private WorkflowFormTO getFormTO(final HistoricTaskInstance task) {\n         return formTO;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private WorkflowFormTO getHFormTO(\n+    private WorkflowFormTO getHistoricFormTO(\n             final String processInstanceId,\n             final String taskId,\n             final String formKey,\n@@ -717,7 +741,7 @@ public WorkflowFormTO claimForm(final String taskId, final String username)\n     }\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, String>> submitForm(final WorkflowFormTO form, final String username)\n+    public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form, final String username)\n             throws WorkflowException {\n \n         Map.Entry<Task, TaskFormData> checked = checkTask(form.getTaskId(), username);\n@@ -736,7 +760,7 @@ public WorkflowResult<Map.Entry<Long, String>> submitForm(final WorkflowFormTO f\n         try {\n             formService.submitTaskFormData(form.getTaskId(), form.getPropertiesForSubmit());\n         } catch (ActivitiException e) {\n-            throw new WorkflowException(\"While submitting form for task \" + form.getTaskId(), e);\n+            throwException(e, \"While submitting form for task \" + form.getTaskId());\n         }\n \n         Set<String> postTasks = getPerformedTasks(user);\n@@ -750,14 +774,20 @@ public WorkflowResult<Map.Entry<Long, String>> submitForm(final WorkflowFormTO f\n         PropagationByResource propByRes =\n                 (PropagationByResource) runtimeService.getVariable(user.getWorkflowId(), PROP_BY_RESOURCE);\n \n-        // fetch - if available - the encrpted password\n+        // fetch - if available - the encrypted password\n         String clearPassword = null;\n         String encryptedPwd = (String) runtimeService.getVariable(user.getWorkflowId(), ENCRYPTED_PWD);\n         if (StringUtils.isNotBlank(encryptedPwd)) {\n             clearPassword = decrypt(encryptedPwd);\n         }\n \n-        return new WorkflowResult<Map.Entry<Long, String>>(new SimpleEntry<Long, String>(updated.getId(),\n-                clearPassword), propByRes, postTasks);\n+        UserMod userMod = (UserMod) runtimeService.getVariable(user.getWorkflowId(), USER_MOD);\n+        if (userMod == null) {\n+            userMod = new UserMod();\n+            userMod.setId(updated.getId());\n+            userMod.setPassword(clearPassword);\n+        }\n+\n+        return new WorkflowResult<UserMod>(userMod, propByRes, postTasks);\n     }\n }"},{"sha":"4b28f3c6337daa8aeccbda2a9ec6c9ac6cdd4b6d","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/AbstractActivitiDelegate.java","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FAbstractActivitiDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FAbstractActivitiDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FAbstractActivitiDelegate.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,61 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.workflow.user.activiti.task;\n-\n-import org.activiti.engine.TaskService;\n-import org.activiti.engine.delegate.DelegateExecution;\n-import org.activiti.engine.delegate.JavaDelegate;\n-import org.apache.syncope.core.persistence.dao.ConfDAO;\n-import org.apache.syncope.core.rest.data.UserDataBinder;\n-import org.apache.syncope.core.util.ApplicationContextProvider;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.ConfigurableApplicationContext;\n-\n-/**\n- * Abstract base class for Activiti's JavaDelegate implementations in Syncope.\n- */\n-public abstract class AbstractActivitiDelegate implements JavaDelegate {\n-\n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(AbstractActivitiDelegate.class);\n-\n-    protected static final ConfigurableApplicationContext CONTEXT = ApplicationContextProvider.getApplicationContext();\n-\n-    protected TaskService taskService;\n-\n-    protected UserDataBinder dataBinder;\n-\n-    protected ConfDAO confDAO;\n-\n-    @Override\n-    public final void execute(final DelegateExecution execution) throws Exception {\n-\n-        taskService = CONTEXT.getBean(TaskService.class);\n-\n-        dataBinder = CONTEXT.getBean(UserDataBinder.class);\n-        confDAO = CONTEXT.getBean(ConfDAO.class);\n-\n-        doExecute(execution);\n-    }\n-\n-    protected abstract void doExecute(DelegateExecution execution) throws Exception;\n-}"},{"sha":"1994dba3d9234e569a3e33ab09cf7284d1ccfc17","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/AbstractActivitiServiceTask.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FAbstractActivitiServiceTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FAbstractActivitiServiceTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FAbstractActivitiServiceTask.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.user.activiti.task;\n+\n+import org.activiti.engine.RuntimeService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Abstract base class for Activiti's service tasks in Syncope, with Spring support.\n+ */\n+@Component\n+public abstract class AbstractActivitiServiceTask {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractActivitiServiceTask.class);\n+\n+    @Autowired\n+    protected RuntimeService runtimeService;\n+\n+    @Transactional(rollbackFor = { Throwable.class })\n+    public void execute(final String executionId) {\n+        doExecute(executionId);\n+    }\n+\n+    protected abstract void doExecute(final String executionId);\n+}"},{"sha":"9d91167e12c93f6aa3ed464981163c95a45f6b9b","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/AutoActivate.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FAutoActivate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FAutoActivate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FAutoActivate.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,13 +18,14 @@\n  */\n package org.apache.syncope.core.workflow.user.activiti.task;\n \n-import org.activiti.engine.delegate.DelegateExecution;\n import org.apache.syncope.core.workflow.user.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.stereotype.Component;\n \n-public class AutoActivate extends AbstractActivitiDelegate {\n+@Component\n+public class AutoActivate extends AbstractActivitiServiceTask {\n \n     @Override\n-    protected void doExecute(final DelegateExecution execution) throws Exception {\n-        execution.setVariable(ActivitiUserWorkflowAdapter.PROPAGATE_ENABLE, Boolean.TRUE);\n+    protected void doExecute(final String executionId) {\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.PROPAGATE_ENABLE, Boolean.TRUE);\n     }\n }"},{"sha":"233f34efa4e620118951efe6694972b33daa3883","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/Create.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FCreate.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,24 +18,29 @@\n  */\n package org.apache.syncope.core.workflow.user.activiti.task;\n \n-import org.activiti.engine.delegate.DelegateExecution;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.workflow.user.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n \n-public class Create extends AbstractActivitiDelegate {\n+@Component\n+public class Create extends AbstractActivitiServiceTask {\n \n-    @Override\n-    protected void doExecute(final DelegateExecution execution) throws Exception {\n+    @Autowired\n+    private UserDataBinder dataBinder;\n \n-        UserTO userTO = (UserTO) execution.getVariable(ActivitiUserWorkflowAdapter.USER_TO);\n+    @Override\n+    protected void doExecute(final String executionId) {\n+        UserTO userTO = (UserTO) runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_TO);\n \n         // create and set workflow id\n         SyncopeUser user = new SyncopeUser();\n         dataBinder.create(user, userTO);\n-        user.setWorkflowId(execution.getProcessInstanceId());\n+        user.setWorkflowId(executionId);\n \n         // report SyncopeUser as result\n-        execution.setVariable(ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n     }\n }"},{"sha":"e635c4edfe00b574852cf2ade6013271b8ca4b87","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/Delete.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FDelete.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,23 +18,24 @@\n  */\n package org.apache.syncope.core.workflow.user.activiti.task;\n \n-import org.activiti.engine.delegate.DelegateExecution;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.workflow.user.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.stereotype.Component;\n \n-public class Delete extends AbstractActivitiDelegate {\n+@Component\n+public class Delete extends AbstractActivitiServiceTask {\n \n     @Override\n-    protected void doExecute(final DelegateExecution execution) throws Exception {\n+    protected void doExecute(final String executionId) {\n+        SyncopeUser user =\n+                (SyncopeUser) runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER);\n \n-        SyncopeUser user = (SyncopeUser) execution.getVariable(ActivitiUserWorkflowAdapter.SYNCOPE_USER);\n-\n-        // TODO: do something with SyncopeUser...\n+        // Do something with SyncopeUser...\n         if (user != null) {\n             user.checkToken(\"\");\n         }\n \n         // remove SyncopeUser variable\n-        execution.removeVariable(ActivitiUserWorkflowAdapter.SYNCOPE_USER);\n+        runtimeService.removeVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER);\n     }\n }"},{"sha":"7b6f8d46c98652fbfa4a733059d1cd8fdd2d8c31","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/GenerateToken.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FGenerateToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FGenerateToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FGenerateToken.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,20 +18,27 @@\n  */\n package org.apache.syncope.core.workflow.user.activiti.task;\n \n-import org.activiti.engine.delegate.DelegateExecution;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.workflow.user.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n \n-public class GenerateToken extends AbstractActivitiDelegate {\n+@Component\n+public class GenerateToken extends AbstractActivitiServiceTask {\n+\n+    @Autowired\n+    private ConfDAO confDAO;\n \n     @Override\n-    protected void doExecute(final DelegateExecution execution) throws Exception {\n-        SyncopeUser user = (SyncopeUser) execution.getVariable(ActivitiUserWorkflowAdapter.SYNCOPE_USER);\n+    protected void doExecute(final String executionId) {\n+        SyncopeUser user =\n+                (SyncopeUser) runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER);\n \n         user.generateToken(\n                 Integer.parseInt(confDAO.find(\"token.length\", \"256\").getValue()),\n                 Integer.parseInt(confDAO.find(\"token.expireTime\", \"60\").getValue()));\n \n-        execution.setVariable(ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n     }\n }"},{"sha":"3e28fad0689290e09d756d5220938b9e5377f5e2","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/Reactivate.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FReactivate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FReactivate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FReactivate.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,11 +18,12 @@\n  */\n package org.apache.syncope.core.workflow.user.activiti.task;\n \n-import org.activiti.engine.delegate.DelegateExecution;\n+import org.springframework.stereotype.Component;\n \n-public class Reactivate extends AbstractActivitiDelegate {\n+@Component\n+public class Reactivate extends AbstractActivitiServiceTask {\n \n     @Override\n-    protected void doExecute(final DelegateExecution execution) throws Exception {\n+    protected void doExecute(final String executionId) {\n     }\n }"},{"sha":"9e78f84e93945cb5180eccb741e145319a491456","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/Suspend.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FSuspend.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FSuspend.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FSuspend.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,11 +18,12 @@\n  */\n package org.apache.syncope.core.workflow.user.activiti.task;\n \n-import org.activiti.engine.delegate.DelegateExecution;\n+import org.springframework.stereotype.Component;\n \n-public class Suspend extends AbstractActivitiDelegate {\n+@Component\n+public class Suspend extends AbstractActivitiServiceTask {\n \n     @Override\n-    protected void doExecute(final DelegateExecution execution) throws Exception {\n+    protected void doExecute(final String executionId) {\n     }\n }"},{"sha":"fe53068efa0d2c5475df5c7e6da9599003fb45c6","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/Update.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FUpdate.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -18,24 +18,38 @@\n  */\n package org.apache.syncope.core.workflow.user.activiti.task;\n \n-import org.activiti.engine.delegate.DelegateExecution;\n+import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.propagation.PropagationByResource;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.workflow.user.activiti.ActivitiUserWorkflowAdapter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n \n-public class Update extends AbstractActivitiDelegate {\n+@Component\n+public class Update extends AbstractActivitiServiceTask {\n+\n+    @Autowired\n+    private UserDataBinder dataBinder;\n \n     @Override\n-    protected void doExecute(final DelegateExecution execution) throws Exception {\n-        SyncopeUser user = (SyncopeUser) execution.getVariable(ActivitiUserWorkflowAdapter.SYNCOPE_USER);\n-        UserMod userMod = (UserMod) execution.getVariable(ActivitiUserWorkflowAdapter.USER_MOD);\n+    protected void doExecute(final String executionId) {\n+        SyncopeUser user =\n+                (SyncopeUser) runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER);\n+        UserMod userMod =\n+                (UserMod) runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD);\n \n+        // update password internally only if required\n+        UserMod actualMod = SerializationUtils.clone(userMod);\n+        if (actualMod.getPwdPropRequest() != null && !actualMod.getPwdPropRequest().isOnSyncope()) {\n+            actualMod.setPassword(null);\n+        }\n         // update SyncopeUser\n-        PropagationByResource propByRes = dataBinder.update(user, userMod);\n+        PropagationByResource propByRes = dataBinder.update(user, actualMod);\n \n         // report updated user and propagation by resource as result\n-        execution.setVariable(ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n-        execution.setVariable(ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE, propByRes);\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE, propByRes);\n     }\n }"},{"sha":"79999272a41ebc793fe4920a5ea8a42d1e5eedbc","filename":"core/src/main/resources/content.xml","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -28,7 +28,7 @@ under the License.\n   <SyncopeConf confKey=\"notificationjob.cronExpression\" confValue=\"\"/>\n   <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n   <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n-  <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"true\"/>\n+  <SyncopeConf confKey=\"selfRegistration.allowed\" confValue=\"true\"/>\n   <SyncopeConf confKey=\"notification.maxRetries\" confValue=\"0\"/>\n     \n   <!-- Authentication and authorization -->\n@@ -88,11 +88,6 @@ under the License.\n   <Entitlement name=\"NOTIFICATION_READ\"/>\n   <Entitlement name=\"NOTIFICATION_UPDATE\"/>\n   <Entitlement name=\"NOTIFICATION_DELETE\"/>\n-  <Entitlement name=\"USER_REQUEST_LIST\"/>\n-  <Entitlement name=\"USER_REQUEST_READ\"/>\n-  <Entitlement name=\"USER_REQUEST_DELETE\"/>\n-  <Entitlement name=\"USER_REQUEST_EXECUTE\"/>\n-  <Entitlement name=\"USER_REQUEST_CLAIM\"/>\n   <Entitlement name=\"REPORT_LIST\"/>\n   <Entitlement name=\"REPORT_READ\"/>\n   <Entitlement name=\"REPORT_CREATE\"/>"},{"sha":"3681826380597790d1cf1f46dfe5c5a2375e219f","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -97,8 +97,8 @@ under the License.\n       <ref bean=\"roleServiceImpl\"/>\n       <ref bean=\"schemaServiceImpl\"/>\n       <ref bean=\"taskServiceImpl\"/>\n-      <ref bean=\"userRequestServiceImpl\"/>\n       <ref bean=\"userServiceImpl\"/>\n+      <ref bean=\"userSelfServiceImpl\"/>\n       <ref bean=\"workflowServiceImpl\"/>\n       <ref bean=\"userWorkflowServiceImpl\"/>\n     </jaxrs:serviceBeans>"},{"sha":"7a751fcb68da63a045c60d950c240430369f009f","filename":"core/src/main/resources/securityContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -42,6 +42,7 @@ under the License.\n \n   <security:http security-context-repository-ref=\"securityContextRepository\" realm=\"Apache Syncope authentication\">\n     <security:http-basic/>\n+    <security:anonymous username=\"${anonymousUser}\"/>\n     <security:intercept-url pattern=\"/**\"/>\n   </security:http>\n "},{"sha":"f52189504e4ea4e7681d5d0e68f2738221fe25f1","filename":"core/src/main/resources/userWorkflow.bpmn20.xml","status":"modified","additions":72,"deletions":15,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -35,18 +35,17 @@ under the License.\n     <!-- Create an user -->\n     <sequenceFlow id=\"flow1\" sourceRef=\"theStart\" targetRef=\"create\"/>\n       \n-    <serviceTask id=\"create\" name=\"Create\" \n-                 activiti:class=\"org.apache.syncope.core.workflow.user.activiti.task.Create\"/>\n+    <serviceTask id=\"create\" name=\"Create\" activiti:expression=\"#{create.execute(execution.processInstanceId)}\"/>\n \n     <sequenceFlow id=\"flow2\" sourceRef=\"create\" targetRef=\"createGW\"/>\n         \n     <exclusiveGateway id=\"createGW\"/>\n+    <sequenceFlow id=\"createAsAnonymous2Approval\" sourceRef=\"createGW\" targetRef=\"createApproval\">\n+      <conditionExpression xsi:type=\"tFormalExpression\">${wfExecutor == 'anonymous' || syncopeUser.getRoleIds().contains(9)}</conditionExpression>\n+    </sequenceFlow>\n     <sequenceFlow id=\"create2Activate\" sourceRef=\"createGW\" targetRef=\"enableGW\">\n       <conditionExpression xsi:type=\"tFormalExpression\">${!syncopeUser.getRoleIds().contains(9)}</conditionExpression>\n     </sequenceFlow>\n-    <sequenceFlow id=\"create2CreateApproval\" sourceRef=\"createGW\" targetRef=\"createApproval\">\n-      <conditionExpression xsi:type=\"tFormalExpression\">${syncopeUser.getRoleIds().contains(9)}</conditionExpression>\n-    </sequenceFlow>\n         \n     <userTask id=\"createApproval\" activiti:formKey=\"createApproval\" name=\"Create approval\" activiti:candidateGroups=\"7\">\n       <extensionElements>\n@@ -73,7 +72,7 @@ under the License.\n     </sequenceFlow>\n     <!-- activate user if suspension is not required -->\n     <sequenceFlow id=\"createApprovalGW2Activate\" sourceRef=\"enableGW\" targetRef=\"activate\">\n-      <conditionExpression xsi:type=\"tFormalExpression\">${enabled==null}</conditionExpression>\n+      <conditionExpression xsi:type=\"tFormalExpression\">${enabled == null}</conditionExpression>\n     </sequenceFlow>\n     <sequenceFlow id=\"createApprovalGW2Active\" sourceRef=\"enableGW\" targetRef=\"active\">\n       <conditionExpression xsi:type=\"tFormalExpression\">${enabled}</conditionExpression>\n@@ -83,12 +82,12 @@ under the License.\n     </sequenceFlow>\n     \n     <serviceTask id=\"activate\" name=\"Activate\" \n-                 activiti:class=\"org.apache.syncope.core.workflow.user.activiti.task.AutoActivate\"/>\n+                 activiti:expression=\"#{autoActivate.execute(execution.processInstanceId)}\"/>\n     <sequenceFlow id=\"flow4\" sourceRef=\"activate\" targetRef=\"active\"/>\n \n     <!-- Double opt-in required -->\n     <serviceTask id=\"generateToken\" name=\"Generate token\" \n-                 activiti:class=\"org.apache.syncope.core.workflow.user.activiti.task.GenerateToken\"/>\n+                 activiti:expression=\"#{generateToken.execute(execution.processInstanceId)}\"/>\n         \n     <sequenceFlow id=\"flow5\" sourceRef=\"generateToken\" targetRef=\"created\"/>\n \n@@ -117,6 +116,15 @@ under the License.\n     <sequenceFlow id=\"flow8\" sourceRef=\"active\" targetRef=\"activeGw\"/>\n \n     <exclusiveGateway id=\"activeGw\"/>\n+    <sequenceFlow id=\"active2UpdateApproval\" sourceRef=\"activeGw\" targetRef=\"updateApproval\">\n+      <conditionExpression xsi:type=\"tFormalExpression\">\n+        ${wfExecutor == syncopeUser.getUsername() and task == 'update' \n+        and (!userMod.getMembershipsToAdd().isEmpty() or !userMod.getMembershipsToRemove().isEmpty())}\n+      </conditionExpression>\n+    </sequenceFlow>  \n+    <sequenceFlow id=\"active2DeleteApproval\" sourceRef=\"activeGw\" targetRef=\"deleteApproval\">\n+      <conditionExpression xsi:type=\"tFormalExpression\">${wfExecutor == syncopeUser.getUsername() and task == 'delete'}</conditionExpression>\n+    </sequenceFlow>  \n     <sequenceFlow id=\"active2Update\" sourceRef=\"activeGw\" targetRef=\"update\">\n       <conditionExpression xsi:type=\"tFormalExpression\">${task == 'update'}</conditionExpression>\n     </sequenceFlow>  \n@@ -127,15 +135,39 @@ under the License.\n       <conditionExpression xsi:type=\"tFormalExpression\">${task == 'delete'}</conditionExpression>\n     </sequenceFlow>\n \n+    <userTask id=\"updateApproval\" activiti:formKey=\"updateApproval\" name=\"Update approval\" activiti:candidateGroups=\"7\">\n+      <extensionElements>\n+        <activiti:formProperty id=\"username\" name=\"Username\" type=\"string\" writable=\"false\" expression=\"${syncopeUser.username}\"/>\n+        <activiti:formProperty id=\"approve\" variable=\"approve\" name=\"Approve?\" type=\"boolean\" required=\"true\"/>\n+        <activiti:formProperty id=\"rejectReason\" variable=\"rejectReason\" name=\"Reason for rejecting\" type=\"string\"/>\n+      </extensionElements>\n+    </userTask>\n+\n+    <sequenceFlow id=\"flow8bis\" sourceRef=\"updateApproval\" targetRef=\"updateApprovalGW\"/>\n+        \n+    <exclusiveGateway id=\"updateApprovalGW\"/>\n+    <sequenceFlow id=\"updateApprovalGW2Update\" sourceRef=\"updateApprovalGW\" targetRef=\"update\">\n+      <conditionExpression xsi:type=\"tFormalExpression\">${approve}</conditionExpression>\n+    </sequenceFlow>\n+    <sequenceFlow id=\"updateApprovalGW2Reject\" sourceRef=\"updateApprovalGW\" targetRef=\"rejectUpdate\">\n+      <conditionExpression xsi:type=\"tFormalExpression\">${!approve}</conditionExpression>\n+    </sequenceFlow>\n+\n+    <scriptTask id=\"rejectUpdate\" name=\"Reject update\" scriptFormat=\"groovy\">\n+      <script>\n+        execution.setVariable(\"propByResource\", null);\n+      </script>\n+    </scriptTask>\n+        \n+    <sequenceFlow id=\"flow8ter\" sourceRef=\"rejectUpdate\" targetRef=\"active\"/>\n+\n     <!-- Update an active user -->\n-    <serviceTask id=\"update\" name=\"Update\" \n-                 activiti:class=\"org.apache.syncope.core.workflow.user.activiti.task.Update\"/>\n+    <serviceTask id=\"update\" name=\"Update\" activiti:expression=\"#{update.execute(execution.processInstanceId)}\"/>\n \n     <sequenceFlow id=\"flow9\" sourceRef=\"update\" targetRef=\"active\"/>\n \n     <!-- Suspend an active user -->\n-    <serviceTask id=\"suspend\" name=\"Suspend\" \n-                 activiti:class=\"org.apache.syncope.core.workflow.user.activiti.task.Suspend\"/>\n+    <serviceTask id=\"suspend\" name=\"Suspend\" activiti:expression=\"#{suspend.execute(execution.processInstanceId)}\"/>\n \n     <sequenceFlow id=\"flow10\" sourceRef=\"suspend\" targetRef=\"suspended\"/>\n \n@@ -153,7 +185,7 @@ under the License.\n \n     <!-- Reactivate a suspended user -->\n     <serviceTask id=\"reactivate\" name =\"Reactivate\" \n-                 activiti:class=\"org.apache.syncope.core.workflow.user.activiti.task.Reactivate\"/>\n+                 activiti:expression=\"#{reactivate.execute(execution.processInstanceId)}\"/>\n \n     <sequenceFlow id=\"flow12\" sourceRef=\"reactivate\" targetRef=\"active\"/>\n         \n@@ -180,9 +212,34 @@ under the License.\n       <conditionExpression xsi:type=\"tFormalExpression\">${empty task}</conditionExpression>\n     </sequenceFlow>\n     \n+    <userTask id=\"deleteApproval\" activiti:formKey=\"deleteApproval\" name=\"Delete approval\" activiti:candidateGroups=\"7\">\n+      <extensionElements>\n+        <activiti:formProperty id=\"username\" name=\"Username\" type=\"string\" writable=\"false\" expression=\"${syncopeUser.username}\"/>\n+        <activiti:formProperty id=\"approve\" variable=\"approve\" name=\"Approve?\" type=\"boolean\" required=\"true\"/>\n+        <activiti:formProperty id=\"rejectReason\" variable=\"rejectReason\" name=\"Reason for rejecting\" type=\"string\"/>\n+      </extensionElements>\n+    </userTask>\n+\n+    <sequenceFlow id=\"flow14bis\" sourceRef=\"deleteApproval\" targetRef=\"deleteApprovalGW\"/>\n+        \n+    <exclusiveGateway id=\"deleteApprovalGW\"/>\n+    <sequenceFlow id=\"deleteApprovalGW2Delete\" sourceRef=\"deleteApprovalGW\" targetRef=\"delete\">\n+      <conditionExpression xsi:type=\"tFormalExpression\">${approve}</conditionExpression>\n+    </sequenceFlow>\n+    <sequenceFlow id=\"deleteApprovalGW2Reject\" sourceRef=\"deleteApprovalGW\" targetRef=\"rejectDelete\">\n+      <conditionExpression xsi:type=\"tFormalExpression\">${!approve}</conditionExpression>\n+    </sequenceFlow>\n+    \n+    <scriptTask id=\"rejectDelete\" name=\"Reject delete\" scriptFormat=\"groovy\">\n+      <script>\n+        execution.setVariable(\"propByResource\", null);\n+      </script>\n+    </scriptTask>\n+        \n+    <sequenceFlow id=\"flow14ter\" sourceRef=\"rejectDelete\" targetRef=\"active\"/>\n+    \n     <!-- Delete an user (created, active or suspended) -->\n-    <serviceTask id=\"delete\" name=\"Delete\" \n-                 activiti:class=\"org.apache.syncope.core.workflow.user.activiti.task.Delete\"/>\n+    <serviceTask id=\"delete\" name=\"Delete\" activiti:expression=\"#{delete.execute(execution.processInstanceId)}\"/>\n \n     <sequenceFlow id=\"flow99\" sourceRef=\"delete\" targetRef=\"theEnd\"/>\n "},{"sha":"991294093af9f32cf4a51349d1c30e8267d65df7","filename":"core/src/main/resources/workflowContext.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -19,8 +19,11 @@ under the License.\n -->\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n-                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\n+                           http://www.springframework.org/schema/context\n+                           http://www.springframework.org/schema/context/spring-context.xsd\">\n \n   <bean id=\"uwfAdapter\" class=\"${uwfAdapter}\"/>\n   <bean id=\"rwfAdapter\" class=\"${rwfAdapter}\"/>\n@@ -69,6 +72,8 @@ under the License.\n   <bean id=\"identityService\" factory-bean=\"processEngine\" factory-method=\"getIdentityService\"/>\n   <bean id=\"formService\" factory-bean=\"processEngine\" factory-method=\"getFormService\"/>\n \n+  <context:component-scan base-package=\"org.apache.syncope.core.workflow.user.activiti.task\"/>\n+  \n   <bean id=\"velocityEngine\" class=\"org.springframework.ui.velocity.VelocityEngineFactoryBean\">\n     <property name=\"velocityProperties\">\n       <value>"},{"sha":"3042b939947b75f82dfde4165840167377c35950","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -41,7 +41,7 @@ public class EntitlementTest extends AbstractDAOTest {\n     @Test\n     public void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n-        assertEquals(\"did not get expected number of entitlements \", 89, list.size());\n+        assertEquals(\"did not get expected number of entitlements \", 84, list.size());\n     }\n \n     @Test"},{"sha":"fb6772b4da2bf1a87e1585fb60dd68b044131a61","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/RoleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -103,7 +103,7 @@ public void findByOwner() {\n         assertNotNull(child2);\n         assertEquals(role, child2.getParent());\n \n-        List<SyncopeRole> ownedRoles = roleDAO.findOwned(user);\n+        List<SyncopeRole> ownedRoles = roleDAO.findOwnedByUser(user.getId());\n         assertFalse(ownedRoles.isEmpty());\n         assertEquals(2, ownedRoles.size());\n         assertTrue(ownedRoles.contains(role));"},{"sha":"c8012d2d8122ca68fd106d81889ceec5dd4d3488","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -46,7 +46,7 @@\n import org.apache.syncope.common.services.RoleService;\n import org.apache.syncope.common.services.SchemaService;\n import org.apache.syncope.common.services.TaskService;\n-import org.apache.syncope.common.services.UserRequestService;\n+import org.apache.syncope.common.services.UserSelfService;\n import org.apache.syncope.common.services.UserService;\n import org.apache.syncope.common.services.UserWorkflowService;\n import org.apache.syncope.common.services.WorkflowService;\n@@ -87,6 +87,12 @@ public abstract class AbstractTest {\n \n     protected static final SyncopeClientFactoryBean clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS);\n \n+    protected static final String RESOURCE_NAME_LDAP = \"resource-ldap\";\n+\n+    protected static final String RESOURCE_NAME_TESTDB = \"resource-testdb\";\n+\n+    protected static final String RESOURCE_NAME_CSV = \"resource-csv\";\n+\n     protected static String ANONYMOUS_UNAME;\n \n     protected static String ANONYMOUS_KEY;\n@@ -95,6 +101,8 @@ public abstract class AbstractTest {\n \n     protected static UserService userService;\n \n+    protected static UserSelfService userSelfService;\n+\n     protected static UserWorkflowService userWorkflowService;\n \n     protected static RoleService roleService;\n@@ -119,8 +127,6 @@ public abstract class AbstractTest {\n \n     protected static SchemaService schemaService;\n \n-    protected static UserRequestService userRequestService;\n-\n     protected static PolicyService policyService;\n \n     @Autowired\n@@ -157,6 +163,7 @@ public static void restSetup() {\n         adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n \n         userService = adminClient.getService(UserService.class);\n+        userSelfService = adminClient.getService(UserSelfService.class);\n         userWorkflowService = adminClient.getService(UserWorkflowService.class);\n         roleService = adminClient.getService(RoleService.class);\n         resourceService = adminClient.getService(ResourceService.class);\n@@ -170,7 +177,6 @@ public static void restSetup() {\n         workflowService = adminClient.getService(WorkflowService.class);\n         notificationService = adminClient.getService(NotificationService.class);\n         schemaService = adminClient.getService(SchemaService.class);\n-        userRequestService = adminClient.getService(UserRequestService.class);\n     }\n \n     protected static String getUUIDString() {"},{"sha":"d86c7ed2ebb132c01c2ed11b8876f6d02b605e5e","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":18,"deletions":20,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -57,6 +57,22 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class AuthenticationTestITCase extends AbstractTest {\n \n+    private int getFailedLogins(UserService testUserService, long userId) {\n+        UserTO readUserTO = testUserService.read(userId);\n+        assertNotNull(readUserTO);\n+        assertNotNull(readUserTO.getFailedLogins());\n+        return readUserTO.getFailedLogins();\n+    }\n+\n+    private void assertReadFails(UserService userService, long id) {\n+        try {\n+            userService.read(id);\n+            fail(\"access should not work\");\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n     @Test\n     public void testAdminEntitlements() {\n         // 1. as anonymous, read all available entitlements\n@@ -260,8 +276,8 @@ public void checkUserSuspension() {\n         long userId = userTO.getId();\n         assertNotNull(userTO);\n \n-        UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").getService(\n-                UserService.class);\n+        UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n+                getService(UserService.class);\n         assertEquals(0, getFailedLogins(userService2, userId));\n \n         // authentications failed ...\n@@ -274,11 +290,9 @@ public void checkUserSuspension() {\n         assertEquals(3, getFailedLogins(userService, userId));\n \n         // last authentication before suspension\n-        userService3 = clientFactory.create(userTO.getUsername(), \"wrongpwd1\").getService(UserService.class);\n         assertReadFails(userService3, userId);\n \n         userTO = userService.read(userTO.getId());\n-\n         assertNotNull(userTO);\n         assertNotNull(userTO.getFailedLogins());\n         assertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n@@ -342,20 +356,4 @@ public void issueSYNCOPE48() {\n         role1User = response.readEntity(UserTO.class);\n         assertNotNull(role1User);\n     }\n-\n-    private int getFailedLogins(UserService testUserService, long userId) {\n-        UserTO readUserTO = testUserService.read(userId);\n-        assertNotNull(readUserTO);\n-        assertNotNull(readUserTO.getFailedLogins());\n-        return readUserTO.getFailedLogins();\n-    }\n-\n-    private void assertReadFails(UserService userService, long id) {\n-        try {\n-            userService.read(id);\n-            fail(\"access should not work\");\n-        } catch (Exception e) {\n-            assertNotNull(e);\n-        }\n-    }\n }"},{"sha":"65f3e01fddfe4e5330ff5d10e5925a5dd736ebdf","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -532,7 +532,7 @@ public void issueSYNCOPE418() {\n \n     @Test\n     public void anonymous() {\n-        ResourceService unauthenticated = clientFactory.create(null, null).getService(ResourceService.class);\n+        ResourceService unauthenticated = clientFactory.createAnonymous().getService(ResourceService.class);\n         try {\n             unauthenticated.list();\n             fail();"},{"sha":"ecd926a0b817c919c426f22baf63ab7507115e3d","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -503,7 +503,7 @@ public void createWithMandatorySchemaNotTemplate() {\n \n     @Test\n     public void anonymous() {\n-        RoleService unauthenticated = clientFactory.create(null, null).getService(RoleService.class);\n+        RoleService unauthenticated = clientFactory.createAnonymous().getService(RoleService.class);\n         try {\n             unauthenticated.list();\n             fail();"},{"sha":"ccf384d2fc9488aec5dbec93d534a949a0665ec4","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -284,7 +284,7 @@ public void issueSYNCOPE418() {\n \n     @Test\n     public void anonymous() {\n-        SchemaService unauthenticated = clientFactory.create(null, null).getService(SchemaService.class);\n+        SchemaService unauthenticated = clientFactory.createAnonymous().getService(SchemaService.class);\n         try {\n             unauthenticated.list(AttributableType.USER, SchemaType.VIRTUAL);\n             fail();"},{"sha":"76892b94aabd8dd645d172d43b37188221b605e1","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"removed","additions":0,"deletions":350,"changes":350,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dde8bf764b4a82bf07c01afdeb79e4829000194/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=1dde8bf764b4a82bf07c01afdeb79e4829000194","patch":"@@ -1,350 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.fail;\n-\n-import java.security.AccessControlException;\n-import java.util.List;\n-\n-import javax.ws.rs.core.Response;\n-import org.apache.http.HttpStatus;\n-\n-import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.search.AttributeCond;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.services.ConfigurationService;\n-import org.apache.syncope.common.services.InvalidSearchConditionException;\n-import org.apache.syncope.common.services.UserRequestService;\n-import org.apache.syncope.common.services.UserService;\n-import org.apache.syncope.common.to.ConfigurationTO;\n-import org.apache.syncope.common.to.UserRequestTO;\n-import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.types.ClientExceptionType;\n-import org.apache.syncope.common.types.UserRequestType;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.junit.FixMethodOrder;\n-import org.junit.Test;\n-import org.junit.runners.MethodSorters;\n-\n-@FixMethodOrder(MethodSorters.JVM)\n-public class UserRequestTestITCase extends AbstractTest {\n-\n-    private Response createUserRequest(final UserRequestService service, final UserRequestTO userRequestTO) {\n-        Response response = service.create(userRequestTO);\n-        if (response.getStatus() != HttpStatus.SC_CREATED) {\n-            throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n-        }\n-        return response;\n-    }\n-\n-    @Test\n-    public void create() throws InvalidSearchConditionException {\n-        // 1. set create request not allowed\n-        ConfigurationTO configurationTO = new ConfigurationTO();\n-        configurationTO.setKey(\"createRequest.allowed\");\n-        configurationTO.setValue(\"false\");\n-\n-        Response response = configurationService.create(configurationTO);\n-        assertNotNull(response);\n-        assertEquals(HttpStatus.SC_CREATED, response.getStatus());\n-        configurationTO = adminClient.getObject(response.getLocation(), ConfigurationService.class,\n-                ConfigurationTO.class);\n-        assertNotNull(configurationTO);\n-\n-        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"selfcreate@syncope.apache.org\");\n-\n-        // 2. get unauthorized when trying to request user create\n-        UserRequestService anonymousUserRequestService = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).\n-                getService(UserRequestService.class);\n-        try {\n-            createUserRequest(anonymousUserRequestService, new UserRequestTO(userTO));\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.UnauthorizedRole, e.getType());\n-        }\n-\n-        // 3. set create request allowed\n-        configurationTO.setValue(\"true\");\n-\n-        response = configurationService.create(configurationTO);\n-        assertNotNull(response);\n-        assertEquals(HttpStatus.SC_CREATED, response.getStatus());\n-        configurationTO = adminClient.getObject(response.getLocation(), ConfigurationService.class,\n-                ConfigurationTO.class);\n-        assertNotNull(configurationTO);\n-\n-        // 4. as anonymous, request user create works\n-        createUserRequest(anonymousUserRequestService, new UserRequestTO(userTO));\n-\n-        // 5. try to find user\n-        AttributeCond attrCond = new AttributeCond(AttributeCond.Type.EQ);\n-        attrCond.setSchema(\"userId\");\n-        attrCond.setExpression(userTO.getUsername());\n-\n-        final List<UserTO> matchingUsers = userService.search(NodeCond.getLeafCond(attrCond));\n-        assertTrue(matchingUsers.isEmpty());\n-\n-        // 6. actually create user\n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-    }\n-\n-    @Test\n-    public void update() {\n-        // 1. create an user (as admin)\n-        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"selfupdate@syncope.apache.org\");\n-        String initialPassword = userTO.getPassword();\n-\n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-\n-        UserMod userMod = new UserMod();\n-        userMod.setId(userTO.getId());\n-        userMod.setPassword(initialPassword);\n-\n-        // 2. try to request user update as admin: failure\n-        try {\n-            createUserRequest(userRequestService, new UserRequestTO(userMod));\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.UnauthorizedRole, e.getType());\n-        }\n-\n-        // 3. auth as user just created\n-        UserRequestService userRequestService2 = clientFactory.create(userTO.getUsername(), initialPassword).getService(\n-                UserRequestService.class);\n-\n-        // 4. update with same password: not matching password policy\n-        try {\n-            createUserRequest(userRequestService2, new UserRequestTO(userMod));\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidSyncopeUser, e.getType());\n-        }\n-\n-        // 5. now request user update works\n-        userMod.setPassword(\"new\" + initialPassword);\n-        createUserRequest(userRequestService2, new UserRequestTO(userMod));\n-\n-        // 6. user password has not changed yet\n-        UserService userService1 = clientFactory.create(userTO.getUsername(), userMod.getPassword()).getService(\n-                UserService.class);\n-        try {\n-            userService1.readSelf();\n-            fail(\"Credentials are not updated yet, thus request should raise AccessControlException\");\n-        } catch (AccessControlException e) {\n-            assertNotNull(e);\n-        }\n-\n-        // 7. actually update user\n-        userTO = userService.update(userMod.getId(), userMod).readEntity(UserTO.class);\n-        assertNotNull(userTO);\n-\n-        // 8. user password has now changed\n-        UserService userService2 = clientFactory.create(userTO.getUsername(), userMod.getPassword()).getService(\n-                UserService.class);\n-        try {\n-            UserTO user = userService2.readSelf();\n-            assertNotNull(user);\n-        } catch (AccessControlException e) {\n-            fail(\"Credentials should be valid and not cause AccessControlException\");\n-        }\n-    }\n-\n-    @Test\n-    public void delete() {\n-        // 1. create an user (as admin)\n-        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"selfdelete@syncope.apache.org\");\n-        String initialPassword = userTO.getPassword();\n-\n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-\n-        // 2. try to request user delete as admin: failure\n-        try {\n-            createUserRequest(userRequestService, new UserRequestTO(userTO.getId()));\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.UnauthorizedRole, e.getType());\n-        }\n-\n-        // 3. auth as user just created\n-        UserRequestService userRequestService2 = clientFactory.create(userTO.getUsername(), initialPassword).getService(\n-                UserRequestService.class);\n-\n-        // 4. now request user delete works\n-        createUserRequest(userRequestService2, new UserRequestTO(userTO.getId()));\n-\n-        // 5. user still exists\n-        UserTO actual = userService.read(userTO.getId());\n-        assertNotNull(actual);\n-\n-        // 6. actually delete user\n-        userService.delete(userTO.getId());\n-\n-        // 7. user does not exist any more\n-        try {\n-            userService.read(userTO.getId());\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(HttpStatus.SC_NOT_FOUND, e.getType().getResponseStatus().getStatusCode());\n-        }\n-    }\n-\n-    @Test\n-    public void execute() {\n-        final String USERNAME = \"ex.create@syncope.apache.org\";\n-        UserTO userTO = UserTestITCase.getUniqueSampleTO(USERNAME);\n-        final String initialPassword = userTO.getPassword();\n-\n-        UserRequestService selfservice = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(\n-                UserRequestService.class);\n-        Response response = createUserRequest(selfservice, new UserRequestTO(userTO));\n-\n-        UserRequestTO userRequest = adminClient.getObject(response.getLocation(), UserRequestService.class,\n-                UserRequestTO.class);\n-        assertNotNull(userRequest);\n-        assertEquals(UserRequestType.CREATE, userRequest.getType());\n-        assertTrue(userRequest.getUsername().endsWith(USERNAME));\n-        assertNotNull(userRequest.getCreationDate());\n-        assertNull(userRequest.getClaimDate());\n-        assertNull(userRequest.getExecutionDate());\n-\n-        try {\n-            userService.read(userTO.getId());\n-            fail();\n-        } catch (Exception ignore) {\n-            assertNotNull(ignore);\n-        }\n-\n-        assertFalse(userRequestService.read(userRequest.getId()).isExecuted());\n-        userRequest = userRequestService.claim(userRequest.getId());\n-        assertEquals(ADMIN_UNAME, userRequest.getOwner());\n-        assertTrue(userRequest.getUsername().endsWith(USERNAME));\n-        assertNotNull(userRequest.getCreationDate());\n-        assertNotNull(userRequest.getClaimDate());\n-        assertNull(userRequest.getExecutionDate());\n-\n-        userTO = userRequestService.executeCreate(userRequest.getId(), userTO);\n-        assertNotNull(userTO);\n-\n-        userRequest = userRequestService.read(userRequest.getId());\n-        assertTrue(userRequest.isExecuted());\n-        assertTrue(userRequest.getUsername().endsWith(USERNAME));\n-        assertNotNull(userRequest.getCreationDate());\n-        assertNotNull(userRequest.getClaimDate());\n-        assertNotNull(userRequest.getExecutionDate());\n-\n-        for (UserRequestTO userRequestTO : userRequestService.list()) {\n-            assertFalse(userRequestTO.isExecuted());\n-        }\n-\n-        userTO = userService.read(userTO.getId());\n-        assertNotNull(userTO);\n-\n-        UserMod userMod = new UserMod();\n-        userMod.setId(userTO.getId());\n-\n-        selfservice = clientFactory.create(userTO.getUsername(), initialPassword).getService(UserRequestService.class);\n-\n-        userMod.setPassword(\"new\" + initialPassword);\n-        response = createUserRequest(selfservice, new UserRequestTO(userMod));\n-\n-        userRequest = adminClient.getObject(response.getLocation(), UserRequestService.class, UserRequestTO.class);\n-        assertNotNull(userRequest);\n-        assertEquals(UserRequestType.UPDATE, userRequest.getType());\n-        assertTrue(userRequest.getUsername().endsWith(USERNAME));\n-\n-        final String newpwd = \"new\" + initialPassword + \"!\";\n-\n-        UserMod furtherChanges = new UserMod();\n-        furtherChanges.setId(userMod.getId());\n-        furtherChanges.setPassword(newpwd);\n-\n-        assertFalse(userRequestService.read(userRequest.getId()).isExecuted());\n-        userRequest = userRequestService.claim(userRequest.getId());\n-        assertEquals(\"admin\", userRequest.getOwner());\n-        assertNotNull(userRequestService.executeUpdate(userRequest.getId(), furtherChanges));\n-        assertTrue(userRequestService.read(userRequest.getId()).isExecuted());\n-\n-        for (UserRequestTO userRequestTO : userRequestService.list()) {\n-            assertFalse(userRequestTO.isExecuted());\n-        }\n-\n-        assertNotNull(userService.read(userTO.getId()));\n-\n-        try {\n-            clientFactory.create(userTO.getUsername(), \"new\" + initialPassword).\n-                    getService(UserService.class).readSelf();\n-            fail(\"Credentials are not updated yet, thus request should raise AccessControlException\");\n-        } catch (AccessControlException e) {\n-            assertNotNull(e);\n-        }\n-\n-        assertNotNull(clientFactory.create(userTO.getUsername(), newpwd).getService(UserService.class).readSelf());\n-\n-        selfservice = clientFactory.create(userTO.getUsername(), newpwd).getService(UserRequestService.class);\n-        response = createUserRequest(selfservice, new UserRequestTO(userTO.getId()));\n-\n-        userRequest = adminClient.getObject(response.getLocation(), UserRequestService.class, UserRequestTO.class);\n-        assertNotNull(userRequest);\n-        assertEquals(UserRequestType.DELETE, userRequest.getType());\n-        assertTrue(userRequest.getUsername().endsWith(USERNAME));\n-\n-        assertFalse(userRequestService.read(userRequest.getId()).isExecuted());\n-        userRequest = userRequestService.claim(userRequest.getId());\n-        assertEquals(\"admin\", userRequest.getOwner());\n-        userRequestService.executeDelete(userRequest.getId());\n-        assertTrue(userRequestService.read(userRequest.getId()).isExecuted());\n-\n-        for (UserRequestTO userRequestTO : userRequestService.list()) {\n-            assertFalse(userRequestTO.isExecuted());\n-        }\n-\n-        try {\n-            userService.read(userTO.getId());\n-            fail();\n-        } catch (Exception ignore) {\n-            assertNotNull(ignore);\n-        }\n-\n-        assertEquals(3, userRequestService.listByUsername(userTO.getUsername()).size());\n-    }\n-\n-    @Test(expected = SyncopeClientException.class)\n-    public void executeNoClaim() {\n-        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"reqnoclaim@syncope.apache.org\");\n-\n-        final UserRequestService selfservice = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(\n-                UserRequestService.class);\n-\n-        final UserRequestTO userRequest = adminClient.getObject(\n-                createUserRequest(selfservice, new UserRequestTO(userTO)).getLocation(),\n-                UserRequestService.class, UserRequestTO.class);\n-        assertNotNull(userRequest);\n-\n-        userRequestService.executeCreate(userRequest.getId(), userTO);\n-    }\n-}"},{"sha":"ca3ab38dd0fdc932a854015f77e6d294adfed2e0","filename":"core/src/test/java/org/apache/syncope/core/rest/UserSelfTestITCase.java","status":"added","additions":222,"deletions":0,"changes":222,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserSelfTestITCase.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -0,0 +1,222 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.security.AccessControlException;\n+import java.util.Map;\n+import org.apache.syncope.client.SyncopeClient;\n+import org.apache.syncope.common.mod.AttributeMod;\n+import org.apache.syncope.common.mod.MembershipMod;\n+import org.apache.syncope.common.mod.StatusMod;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.services.UserSelfService;\n+import org.apache.syncope.common.services.UserService;\n+import org.apache.syncope.common.to.MembershipTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n+import org.apache.syncope.common.to.WorkflowFormTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.ClientExceptionType;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class UserSelfTestITCase extends AbstractTest {\n+\n+    @Test\n+    public void selfRegistrationAllowed() {\n+        assertTrue(clientFactory.createAnonymous().isSelfRegistrationAllowed());\n+    }\n+\n+    @Test\n+    public void create() {\n+        // 1. self-registration as admin: failure\n+        try {\n+            userSelfService.create(UserTestITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"));\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        // 2. self-registration as anonymous: works\n+        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        UserTO self = anonClient.getService(UserSelfService.class).\n+                create(UserTestITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\")).\n+                readEntity(UserTO.class);\n+        assertNotNull(self);\n+        assertEquals(\"createApproval\", self.getStatus());\n+    }\n+\n+    @Test\n+    public void createAndApprove() {\n+        // self-create user with membership: goes 'createApproval' with resources and membership but no propagation\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\");\n+        MembershipTO membership = new MembershipTO();\n+        membership.setRoleId(3L);\n+        userTO.getMemberships().add(membership);\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+\n+        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        userTO = anonClient.getService(UserSelfService.class).\n+                create(userTO).\n+                readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+        assertEquals(\"createApproval\", userTO.getStatus());\n+        assertFalse(userTO.getMemberships().isEmpty());\n+        assertFalse(userTO.getResources().isEmpty());\n+\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, AttributableType.USER, userTO.getId());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+\n+        // now approve and verify that propagation has happened\n+        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getId());\n+        form = userWorkflowService.claimForm(form.getTaskId());\n+        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n+        form.setProperties(props.values());\n+        userTO = userWorkflowService.submitForm(form);\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, AttributableType.USER, userTO.getId()));\n+    }\n+\n+    @Test\n+    public void read() {\n+        UserService userService2 = clientFactory.create(\"rossini\", ADMIN_PWD).getService(UserService.class);\n+\n+        try {\n+            userService2.read(1L);\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+\n+        UserSelfService userSelfService2 = clientFactory.create(\"rossini\", ADMIN_PWD).getService(UserSelfService.class);\n+        UserTO userTO = userSelfService2.read();\n+        assertEquals(\"rossini\", userTO.getUsername());\n+    }\n+\n+    @Test\n+    public void updateWithoutApproval() {\n+        // 1. create user as admin\n+        UserTO created = createUser(UserTestITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"));\n+        assertNotNull(created);\n+        assertFalse(created.getUsername().endsWith(\"XX\"));\n+\n+        // 2. self-update (username) - works\n+        UserMod userMod = new UserMod();\n+        userMod.setUsername(created.getUsername() + \"XX\");\n+\n+        SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n+        UserTO updated = authClient.getService(UserSelfService.class).update(created.getId(), userMod).\n+                readEntity(UserTO.class);\n+        assertNotNull(updated);\n+        assertEquals(\"active\", updated.getStatus());\n+        assertTrue(updated.getUsername().endsWith(\"XX\"));\n+    }\n+\n+    @Test\n+    public void updateWitApproval() {\n+        // 1. create user as admin\n+        UserTO created = createUser(UserTestITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"));\n+        assertNotNull(created);\n+        assertFalse(created.getUsername().endsWith(\"XX\"));\n+\n+        // 2. self-update (username + memberships + resource) - works but needs approval\n+        MembershipMod membershipMod = new MembershipMod();\n+        membershipMod.setRole(7L);\n+        AttributeMod testAttributeMod = new AttributeMod();\n+        testAttributeMod.setSchema(\"testAttribute\");\n+        testAttributeMod.getValuesToBeAdded().add(\"a value\");\n+        membershipMod.getAttrsToUpdate().add(testAttributeMod);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setUsername(created.getUsername() + \"XX\");\n+        userMod.getMembershipsToAdd().add(membershipMod);\n+        userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n+        userMod.setPassword(\"newPassword123\");\n+        StatusMod statusMod = new StatusMod();\n+        statusMod.setOnSyncope(false);\n+        statusMod.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+        userMod.setPwdPropRequest(statusMod);\n+\n+        SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n+        UserTO updated = authClient.getService(UserSelfService.class).update(created.getId(), userMod).\n+                readEntity(UserTO.class);\n+        assertNotNull(updated);\n+        assertEquals(\"updateApproval\", updated.getStatus());\n+        assertFalse(updated.getUsername().endsWith(\"XX\"));\n+        assertTrue(updated.getMemberships().isEmpty());\n+\n+        // no propagation happened\n+        assertTrue(updated.getResources().isEmpty());\n+        try {\n+            resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, AttributableType.USER, updated.getId());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+\n+        // 3. approve self-update as admin\n+        WorkflowFormTO form = userWorkflowService.getFormForUser(updated.getId());\n+        form = userWorkflowService.claimForm(form.getTaskId());\n+        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n+        form.setProperties(props.values());\n+        updated = userWorkflowService.submitForm(form);\n+        assertNotNull(updated);\n+        assertEquals(\"active\", updated.getStatus());\n+        assertTrue(updated.getUsername().endsWith(\"XX\"));\n+        assertEquals(1, updated.getMemberships().size());\n+\n+        // check that propagation also happened\n+        assertTrue(updated.getResources().contains(RESOURCE_NAME_TESTDB));\n+        assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, AttributableType.USER, updated.getId()));\n+    }\n+\n+    @Test\n+    public void delete() {\n+        UserTO created = createUser(UserTestITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"));\n+        assertNotNull(created);\n+\n+        SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n+        UserTO deleted = authClient.getService(UserSelfService.class).delete().readEntity(UserTO.class);\n+        assertNotNull(deleted);\n+        assertEquals(\"deleteApproval\", deleted.getStatus());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE373() {\n+        UserTO userTO = userSelfService.read();\n+        assertEquals(ADMIN_UNAME, userTO.getUsername());\n+    }\n+\n+}"},{"sha":"66c0130270dc3a13444dbdc0dccc2585186ddc43","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":54,"deletions":311,"changes":365,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -32,7 +32,6 @@\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n-import java.util.Map;\n \n import javax.ws.rs.core.Response;\n import org.apache.http.HttpStatus;\n@@ -43,16 +42,14 @@\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.services.PolicyService;\n import org.apache.syncope.common.services.ResourceService;\n-import org.apache.syncope.common.services.UserService;\n-import org.apache.syncope.common.services.UserWorkflowService;\n+import org.apache.syncope.common.services.UserSelfService;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n import org.apache.syncope.common.to.BulkActionRes.Status;\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.MappingItemTO;\n-import org.apache.syncope.common.to.MappingTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PropagationStatusTO;\n@@ -61,8 +58,6 @@\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n-import org.apache.syncope.common.to.WorkflowFormTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.CipherAlgorithm;\n import org.apache.syncope.common.types.IntMappingType;\n@@ -90,16 +85,6 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class UserTestITCase extends AbstractTest {\n \n-    private static final String RESOURCE_NAME_LDAP = \"resource-ldap\";\n-\n-    private static final String RESOURCE_NAME_TESTDB = \"resource-testdb\";\n-\n-    private static final String RESOURCE_NAME_CSV = \"resource-csv\";\n-\n-    private ConnObjectTO readConnectorObject(final String resourceName, final Long userId) {\n-        return resourceService.getConnectorObject(resourceName, AttributableType.USER, userId);\n-    }\n-\n     private String getStringAttribute(final ConnObjectTO connObjectTO, final String attrName) {\n         return connObjectTO.getAttrMap().get(attrName).getValues().get(0);\n     }\n@@ -141,24 +126,6 @@ public static UserTO getSampleTO(final String email) {\n         return userTO;\n     }\n \n-    @Test\n-    public void selfRead() {\n-        UserService userService2 = clientFactory.create(\"rossini\", ADMIN_PWD).getService(UserService.class);\n-\n-        try {\n-            userService2.read(1L);\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(HttpStatus.SC_UNAUTHORIZED, e.getType().getResponseStatus().getStatusCode());\n-        } catch (AccessControlException e) {\n-            // Will be thrown by cxf service\n-            assertNotNull(e);\n-        }\n-\n-        UserTO userTO = userService2.readSelf();\n-        assertEquals(\"rossini\", userTO.getUsername());\n-    }\n-\n     @Test\n     @SuppressWarnings(\"unchecked\")\n     public void createUserWithNoPropagation() {\n@@ -466,19 +433,19 @@ public void create() {\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n \n         // 3. verify password\n-        UserService userService1 = clientFactory.create(\n-                newUserTO.getUsername(), \"password123\").getService(UserService.class);\n+        UserSelfService userSelfService1 = clientFactory.create(\n+                newUserTO.getUsername(), \"password123\").getService(UserSelfService.class);\n         try {\n-            UserTO user = userService1.readSelf();\n+            UserTO user = userSelfService1.read();\n             assertNotNull(user);\n         } catch (AccessControlException e) {\n             fail(\"Credentials should be valid and not cause AccessControlException\");\n         }\n \n-        UserService userService2 = clientFactory.create(\n-                newUserTO.getUsername(), \"passwordXX\").getService(UserService.class);\n+        UserSelfService userSelfService2 = clientFactory.create(\n+                newUserTO.getUsername(), \"passwordXX\").getService(UserSelfService.class);\n         try {\n-            userService2.readSelf();\n+            userSelfService2.read();\n             fail(\"Credentials are invalid, thus request should raise AccessControlException\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n@@ -540,151 +507,6 @@ public void createWithRequiredValueMissing() {\n         }\n     }\n \n-    @Test\n-    public void createWithReject() {\n-        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n-\n-        UserTO userTO = getUniqueSampleTO(\"createWithReject@syncope.apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n-\n-        // User with role 9 are defined in workflow as subject to approval\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRoleId(9L);\n-        userTO.getMemberships().add(membershipTO);\n-\n-        // 1. create user with role 9\n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-        assertEquals(1, userTO.getMemberships().size());\n-        assertEquals(9, userTO.getMemberships().get(0).getRoleId());\n-        assertEquals(\"createApproval\", userTO.getStatus());\n-\n-        // 2. request if there is any pending task for user just created\n-        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getId());\n-        assertNotNull(form);\n-        assertNotNull(form.getUserId());\n-        assertEquals(userTO.getId(), form.getUserId());\n-        assertNotNull(form.getTaskId());\n-        assertNull(form.getOwner());\n-\n-        // 3. claim task from rossini, not in role 7 (designated for approval in workflow definition): fail\n-        UserWorkflowService userService2 = clientFactory.create(\n-                \"rossini\", ADMIN_PWD).getService(UserWorkflowService.class);\n-\n-        try {\n-            userService2.claimForm(form.getTaskId());\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.Workflow, e.getType());\n-        }\n-\n-        // 4. claim task from bellini, in role 7\n-        UserWorkflowService userService3 = clientFactory.create(\n-                \"bellini\", ADMIN_PWD).getService(UserWorkflowService.class);\n-\n-        form = userService3.claimForm(form.getTaskId());\n-        assertNotNull(form);\n-        assertNotNull(form.getTaskId());\n-        assertNotNull(form.getOwner());\n-\n-        // 5. reject user\n-        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n-        props.get(\"approve\").setValue(Boolean.FALSE.toString());\n-        props.get(\"rejectReason\").setValue(\"I don't like him.\");\n-        form.setProperties(props.values());\n-        userTO = userService3.submitForm(form);\n-        assertNotNull(userTO);\n-        assertEquals(\"rejected\", userTO.getStatus());\n-\n-        // 6. check that rejected user was not propagated to external resource (SYNCOPE-364)\n-        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n-        Exception exception = null;\n-        try {\n-            jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\",\n-                    new String[] { userTO.getUsername() }, Integer.class);\n-        } catch (EmptyResultDataAccessException e) {\n-            exception = e;\n-        }\n-        assertNotNull(exception);\n-    }\n-\n-    @Test\n-    public void createWithApproval() {\n-        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n-\n-        UserTO userTO = getUniqueSampleTO(\"createWithApproval@syncope.apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n-\n-        // User with role 9 are defined in workflow as subject to approval\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRoleId(9L);\n-        userTO.getMemberships().add(membershipTO);\n-\n-        // 1. create user with role 9 (and verify that no propagation occurred)\n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-        assertEquals(1, userTO.getMemberships().size());\n-        assertEquals(9, userTO.getMemberships().get(0).getRoleId());\n-        assertEquals(\"createApproval\", userTO.getStatus());\n-        assertEquals(Collections.singleton(RESOURCE_NAME_TESTDB), userTO.getResources());\n-\n-        assertTrue(userTO.getPropagationStatusTOs().isEmpty());\n-\n-        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n-\n-        Exception exception = null;\n-        try {\n-            jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\",\n-                    new String[] { userTO.getUsername() }, Integer.class);\n-        } catch (EmptyResultDataAccessException e) {\n-            exception = e;\n-        }\n-        assertNotNull(exception);\n-\n-        // 2. request if there is any pending form for user just created\n-        List<WorkflowFormTO> forms = userWorkflowService.getForms();\n-        assertNotNull(forms);\n-        assertEquals(1, forms.size());\n-\n-        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getId());\n-        assertNotNull(form);\n-        assertNotNull(form.getTaskId());\n-        assertNull(form.getOwner());\n-\n-        // 4. claim task (from admin)\n-        form = userWorkflowService.claimForm(form.getTaskId());\n-        assertNotNull(form);\n-        assertNotNull(form.getTaskId());\n-        assertNotNull(form.getOwner());\n-\n-        // 5. approve user (and verify that propagation occurred)\n-        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n-        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n-        form.setProperties(props.values());\n-        userTO = userWorkflowService.submitForm(form);\n-        assertNotNull(userTO);\n-        assertEquals(\"active\", userTO.getStatus());\n-        assertEquals(Collections.singleton(RESOURCE_NAME_TESTDB), userTO.getResources());\n-\n-        exception = null;\n-        try {\n-            final String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class,\n-                    userTO.getUsername());\n-            assertEquals(userTO.getUsername(), username);\n-        } catch (EmptyResultDataAccessException e) {\n-            exception = e;\n-        }\n-        assertNull(exception);\n-\n-        // 6. update user\n-        UserMod userMod = new UserMod();\n-        userMod.setId(userTO.getId());\n-        userMod.setPassword(\"anotherPassword123\");\n-\n-        userTO = updateUser(userMod);\n-        assertNotNull(userTO);\n-    }\n-\n     @Test\n     public void delete() {\n         try {\n@@ -1114,10 +936,11 @@ public void suspendReactivateOnResource() {\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        ConnObjectTO connObjectTO = readConnectorObject(RESOURCE_NAME_TESTDB, userId);\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, AttributableType.USER, userId);\n         assertFalse(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n \n-        connObjectTO = readConnectorObject(RESOURCE_NAME_LDAP, userId);\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.USER, userId);\n         assertNotNull(connObjectTO);\n \n         // Suspend and reactivate only on ldap => db and syncope should still show suspended\n@@ -1131,7 +954,7 @@ public void suspendReactivateOnResource() {\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        connObjectTO = readConnectorObject(RESOURCE_NAME_TESTDB, userId);\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, AttributableType.USER, userId);\n         assertFalse(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n \n         // Reactivate on syncope and db => syncope and db should show the user as active\n@@ -1144,7 +967,7 @@ public void suspendReactivateOnResource() {\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        connObjectTO = readConnectorObject(RESOURCE_NAME_TESTDB, userId);\n+        connObjectTO = resourceService.getConnectorObject(RESOURCE_NAME_TESTDB, AttributableType.USER, userId);\n         assertTrue(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n     }\n \n@@ -1343,7 +1166,8 @@ public void roleAttrPropagation() {\n         assertNotNull(actual);\n         assertNotNull(actual.getDerAttrMap().get(\"csvuserid\"));\n \n-        ConnObjectTO connObjectTO = readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n         assertEquals(\"sx-dx\", connObjectTO.getAttrMap().get(\"ROLE\").getValues().get(0));\n     }\n@@ -1370,7 +1194,8 @@ public void membershipAttrPropagation() {\n         assertNotNull(actual);\n         assertNotNull(actual.getDerAttrMap().get(\"csvuserid\"));\n \n-        ConnObjectTO connObjectTO = readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n         assertEquals(\"sx-dx\", connObjectTO.getAttrMap().get(\"MEMBERSHIP\").getValues().get(0));\n     }\n@@ -1433,7 +1258,8 @@ public void issueSYNCOPE108() {\n         assertEquals(2, actual.getMemberships().size());\n         assertEquals(1, actual.getResources().size());\n \n-        ConnObjectTO connObjectTO = readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n \n         // -----------------------------------\n@@ -1448,7 +1274,8 @@ public void issueSYNCOPE108() {\n         assertNotNull(actual);\n         assertEquals(1, actual.getMemberships().size());\n \n-        connObjectTO = readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+        connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n         // -----------------------------------\n \n@@ -1465,7 +1292,8 @@ public void issueSYNCOPE108() {\n         assertEquals(1, actual.getMemberships().size());\n         assertFalse(actual.getResources().isEmpty());\n \n-        connObjectTO = readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+        connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n         // -----------------------------------\n \n@@ -1483,7 +1311,7 @@ public void issueSYNCOPE108() {\n         assertTrue(actual.getResources().isEmpty());\n \n         try {\n-            readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+            resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n             fail(\"Read should not succeeed\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n@@ -1514,7 +1342,8 @@ public void issueSYNCOPE111() {\n         assertNotNull(actual);\n         assertEquals(2, actual.getMemberships().size());\n \n-        ConnObjectTO connObjectTO = readConnectorObject(RESOURCE_NAME_LDAP, actual.getId());\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n \n         AttributeTO postalAddress = connObjectTO.getAttrMap().get(\"postalAddress\");\n@@ -1543,7 +1372,8 @@ public void issueSYNCOPE111() {\n         assertNotNull(actual);\n         assertEquals(1, actual.getMemberships().size());\n \n-        connObjectTO = readConnectorObject(RESOURCE_NAME_LDAP, actual.getId());\n+        connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n \n         postalAddress = connObjectTO.getAttrMap().get(\"postalAddress\");\n@@ -1575,7 +1405,7 @@ public void issueSYNCOPE185() {\n \n         // 3. try (and fail) to find this user on the external LDAP resource\n         try {\n-            readConnectorObject(RESOURCE_NAME_LDAP, userTO.getId());\n+            resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.USER, userTO.getId());\n             fail(\"This entry should not be present on this resource\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n@@ -1626,7 +1456,8 @@ public void issueSYNCOPE260() {\n         assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n-        ConnObjectTO connObjectTO = readConnectorObject(\"ws-target-resource-2\", userTO.getId());\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(\"ws-target-resource-2\", AttributableType.USER, userTO.getId());\n         assertNotNull(connObjectTO);\n         assertEquals(\"virtualvalue\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n         // ----------------------------------\n@@ -1650,7 +1481,8 @@ public void issueSYNCOPE260() {\n         assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n-        connObjectTO = readConnectorObject(\"ws-target-resource-2\", userTO.getId());\n+        connObjectTO =\n+                resourceService.getConnectorObject(\"ws-target-resource-2\", AttributableType.USER, userTO.getId());\n         assertNotNull(connObjectTO);\n         assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n         // ----------------------------------\n@@ -1663,7 +1495,8 @@ public void issueSYNCOPE260() {\n         userTO = userService.status(userTO.getId(), statusMod).readEntity(UserTO.class);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        connObjectTO = readConnectorObject(\"ws-target-resource-2\", userTO.getId());\n+        connObjectTO =\n+                resourceService.getConnectorObject(\"ws-target-resource-2\", AttributableType.USER, userTO.getId());\n         assertNotNull(connObjectTO);\n         assertFalse(connObjectTO.getAttrMap().get(\"NAME\").getValues().isEmpty());\n         assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n@@ -1673,7 +1506,8 @@ public void issueSYNCOPE260() {\n         userTO = userService.status(userTO.getId(), statusMod).readEntity(UserTO.class);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        connObjectTO = readConnectorObject(\"ws-target-resource-2\", userTO.getId());\n+        connObjectTO =\n+                resourceService.getConnectorObject(\"ws-target-resource-2\", AttributableType.USER, userTO.getId());\n         assertNotNull(connObjectTO);\n         assertFalse(connObjectTO.getAttrMap().get(\"NAME\").getValues().isEmpty());\n         assertEquals(\"virtualvalue2\", connObjectTO.getAttrMap().get(\"NAME\").getValues().get(0));\n@@ -1698,7 +1532,8 @@ public void issueSYNCOPE260() {\n         assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n-        connObjectTO = readConnectorObject(\"ws-target-resource-2\", userTO.getId());\n+        connObjectTO =\n+                resourceService.getConnectorObject(\"ws-target-resource-2\", AttributableType.USER, userTO.getId());\n         assertNotNull(connObjectTO);\n         assertEquals(\"Surname2\", connObjectTO.getAttrMap().get(\"SURNAME\").getValues().get(0));\n \n@@ -1721,7 +1556,8 @@ public void issueSYNCOPE260() {\n         assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n-        connObjectTO = readConnectorObject(\"ws-target-resource-2\", userTO.getId());\n+        connObjectTO =\n+                resourceService.getConnectorObject(\"ws-target-resource-2\", AttributableType.USER, userTO.getId());\n         assertNotNull(connObjectTO);\n \n         // attribute \"name\" mapped on virtual attribute \"virtualdata\" should be reset\n@@ -1745,7 +1581,8 @@ public void issueSYNCOPE267() {\n         assertEquals(\"resource-db-virattr\", userTO.getPropagationStatusTOs().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUBMITTED, userTO.getPropagationStatusTOs().get(0).getStatus());\n \n-        ConnObjectTO connObjectTO = readConnectorObject(\"resource-db-virattr\", userTO.getId());\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(\"resource-db-virattr\", AttributableType.USER, userTO.getId());\n         assertNotNull(connObjectTO);\n         assertEquals(\"virtualvalue\", connObjectTO.getAttrMap().get(\"USERNAME\").getValues().get(0));\n         // ----------------------------------\n@@ -1998,7 +1835,8 @@ public void mappingPurpose() {\n         UserTO actual = createUser(userTO);\n         assertNotNull(actual);\n \n-        final ConnObjectTO connObjectTO = readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+        final ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNull(connObjectTO.getAttrMap().get(\"email\"));\n     }\n \n@@ -2151,12 +1989,6 @@ public void issueSYNCOPE357() {\n         }\n     }\n \n-    @Test\n-    public void issueSYNCOPE373() {\n-        UserTO userTO = userService.readSelf();\n-        assertEquals(ADMIN_UNAME, userTO.getUsername());\n-    }\n-\n     @Test\n     public void issueSYNCOPE383() {\n         // 1. create user on testdb and testdb2\n@@ -2191,8 +2023,6 @@ public void issueSYNCOPE383() {\n     public void issueSYNCOPE397() {\n         ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n         // change mapping of resource-csv\n-        MappingTO mappingTO = csv.getUmapping();\n-\n         for (MappingItemTO item : csv.getUmapping().getItems()) {\n             if (\"email\".equals(item.getIntAttrName())) {\n                 // unset internal attribute mail and set virtual attribute virtualdata as mapped to external email\n@@ -2288,97 +2118,6 @@ public void issueSYNCOPE402() {\n         assertEquals(PropagationTaskExecStatus.UNSUBMITTED, userTO.getPropagationStatusTOs().get(1).getStatus());\n     }\n \n-    @Test\n-    public void issueSYNCOPE15() {\n-        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n-\n-        UserTO userTO = getUniqueSampleTO(\"issueSYNCOPE15@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getDerAttrs().clear();\n-        userTO.getMemberships().clear();\n-\n-        // User with role 9 are defined in workflow as subject to approval\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRoleId(9L);\n-        userTO.getMemberships().add(membershipTO);\n-\n-        // 1. create user with role 9 (and verify that no propagation occurred)\n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-        assertNotEquals(0L, userTO.getId());\n-        assertNotNull(userTO.getCreationDate());\n-        assertNotNull(userTO.getCreator());\n-        assertNotNull(userTO.getLastChangeDate());\n-        assertNotNull(userTO.getLastModifier());\n-        assertEquals(userTO.getCreationDate(), userTO.getLastChangeDate());\n-\n-        // 2. request if there is any pending form for user just created\n-        List<WorkflowFormTO> forms = userWorkflowService.getForms();\n-        assertEquals(1, forms.size());\n-\n-        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getId());\n-        assertNotNull(form);\n-\n-        // 3. first claim ny bellini ....\n-        UserWorkflowService userService3 = clientFactory.create(\n-                \"bellini\", ADMIN_PWD).getService(UserWorkflowService.class);\n-\n-        form = userService3.claimForm(form.getTaskId());\n-        assertNotNull(form);\n-        assertNotNull(form.getTaskId());\n-        assertNotNull(form.getOwner());\n-\n-        // 4. second claim task by admin\n-        form = userWorkflowService.claimForm(form.getTaskId());\n-        assertNotNull(form);\n-\n-        // 5. approve user\n-        final Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n-        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n-        form.setProperties(props.values());\n-\n-        // 6. submit approve\n-        userTO = userWorkflowService.submitForm(form);\n-        assertNotNull(userTO);\n-        assertEquals(0, userWorkflowService.getForms().size());\n-        assertNull(userWorkflowService.getFormForUser(userTO.getId()));\n-\n-        // 7. search approval into the history as well\n-        forms = userWorkflowService.getFormsByName(userTO.getId(), \"Create approval\");\n-        assertFalse(forms.isEmpty());\n-\n-        int count = 0;\n-        for (WorkflowFormTO hform : forms) {\n-            if (form.getTaskId().equals(hform.getTaskId())) {\n-                count++;\n-\n-                assertEquals(\"createApproval\", hform.getKey());\n-                assertNotNull(hform.getCreateTime());\n-                assertNotNull(hform.getDueDate());\n-                assertTrue(Boolean.parseBoolean(hform.getPropertyMap().get(\"approve\").getValue()));\n-                assertNull(hform.getPropertyMap().get(\"rejectReason\").getValue());\n-            }\n-        }\n-        assertEquals(1, count);\n-\n-        userService.delete(userTO.getId());\n-\n-        try {\n-            userService.read(userTO.getId());\n-            fail();\n-        } catch (Exception ignore) {\n-            assertNotNull(ignore);\n-        }\n-\n-        try {\n-            userWorkflowService.getFormsByName(userTO.getId(), \"Create approval\");\n-            fail();\n-        } catch (Exception ignore) {\n-            assertNotNull(ignore);\n-        }\n-    }\n-\n     @Test\n     public void unlink() {\n         UserTO userTO = getUniqueSampleTO(\"unlink@syncope.apache.org\");\n@@ -2392,7 +2131,8 @@ public void unlink() {\n         UserTO actual = createUser(userTO);\n         assertNotNull(actual);\n \n-        ConnObjectTO connObjectTO = readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n \n         actual = userService.associate(actual.getId(),\n@@ -2407,7 +2147,8 @@ public void unlink() {\n \n         assertTrue(actual.getResources().isEmpty());\n \n-        connObjectTO = readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+        connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n     }\n \n@@ -2424,7 +2165,8 @@ public void unassign() {\n         UserTO actual = createUser(userTO);\n         assertNotNull(actual);\n \n-        ConnObjectTO connObjectTO = readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n \n         actual = userService.associate(actual.getId(),\n@@ -2439,7 +2181,7 @@ public void unassign() {\n         assertTrue(actual.getResources().isEmpty());\n \n         try {\n-            readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+            resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n             fail();\n         } catch (Exception e) {\n             assertNotNull(e);\n@@ -2459,7 +2201,8 @@ public void deprovision() {\n         UserTO actual = createUser(userTO);\n         assertNotNull(actual);\n \n-        ConnObjectTO connObjectTO = readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+        ConnObjectTO connObjectTO =\n+                resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n         assertNotNull(connObjectTO);\n \n         actual = userService.associate(actual.getId(),\n@@ -2474,7 +2217,7 @@ public void deprovision() {\n         assertFalse(actual.getResources().isEmpty());\n \n         try {\n-            readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n+            resourceService.getConnectorObject(RESOURCE_NAME_CSV, AttributableType.USER, actual.getId());\n             fail();\n         } catch (Exception e) {\n             assertNotNull(e);"},{"sha":"1e33a1c446235e369a19c653c0400d5f4dd83c23","filename":"core/src/test/java/org/apache/syncope/core/rest/UserWorkflowTestITCase.java","status":"added","additions":297,"deletions":0,"changes":297,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserWorkflowTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserWorkflowTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserWorkflowTestITCase.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -0,0 +1,297 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.services.UserWorkflowService;\n+import org.apache.syncope.common.to.MembershipTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n+import org.apache.syncope.common.to.WorkflowFormTO;\n+import org.apache.syncope.common.types.ClientExceptionType;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n+import org.apache.syncope.core.workflow.ActivitiDetector;\n+import org.junit.Assume;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class UserWorkflowTestITCase extends AbstractTest {\n+\n+    @Test\n+    public void createWithReject() {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"createWithReject@syncope.apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+\n+        // User with role 9 are defined in workflow as subject to approval\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(9L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        // 1. create user with role 9\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getMemberships().size());\n+        assertEquals(9, userTO.getMemberships().get(0).getRoleId());\n+        assertEquals(\"createApproval\", userTO.getStatus());\n+\n+        // 2. request if there is any pending task for user just created\n+        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getId());\n+        assertNotNull(form);\n+        assertNotNull(form.getUserId());\n+        assertEquals(userTO.getId(), form.getUserId());\n+        assertNotNull(form.getTaskId());\n+        assertNull(form.getOwner());\n+\n+        // 3. claim task from rossini, not in role 7 (designated for approval in workflow definition): fail\n+        UserWorkflowService userService2 = clientFactory.create(\n+                \"rossini\", ADMIN_PWD).getService(UserWorkflowService.class);\n+\n+        try {\n+            userService2.claimForm(form.getTaskId());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.Workflow, e.getType());\n+        }\n+\n+        // 4. claim task from bellini, in role 7\n+        UserWorkflowService userService3 = clientFactory.create(\n+                \"bellini\", ADMIN_PWD).getService(UserWorkflowService.class);\n+\n+        form = userService3.claimForm(form.getTaskId());\n+        assertNotNull(form);\n+        assertNotNull(form.getTaskId());\n+        assertNotNull(form.getOwner());\n+\n+        // 5. reject user\n+        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        props.get(\"approve\").setValue(Boolean.FALSE.toString());\n+        props.get(\"rejectReason\").setValue(\"I don't like him.\");\n+        form.setProperties(props.values());\n+        userTO = userService3.submitForm(form);\n+        assertNotNull(userTO);\n+        assertEquals(\"rejected\", userTO.getStatus());\n+\n+        // 6. check that rejected user was not propagated to external resource (SYNCOPE-364)\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        Exception exception = null;\n+        try {\n+            jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\",\n+                    new String[] { userTO.getUsername() }, Integer.class);\n+        } catch (EmptyResultDataAccessException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+    }\n+\n+    @Test\n+    public void createWithApproval() {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        // read forms *before* any operation\n+        List<WorkflowFormTO> forms = userWorkflowService.getForms();\n+        assertNotNull(forms);\n+        int preForms = forms.size();\n+\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"createWithApproval@syncope.apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+\n+        // User with role 9 are defined in workflow as subject to approval\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(9L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        // 1. create user with role 9 (and verify that no propagation occurred)\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getMemberships().size());\n+        assertEquals(9, userTO.getMemberships().get(0).getRoleId());\n+        assertEquals(\"createApproval\", userTO.getStatus());\n+        assertEquals(Collections.singleton(RESOURCE_NAME_TESTDB), userTO.getResources());\n+\n+        assertTrue(userTO.getPropagationStatusTOs().isEmpty());\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        Exception exception = null;\n+        try {\n+            jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\",\n+                    new String[] { userTO.getUsername() }, Integer.class);\n+        } catch (EmptyResultDataAccessException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+\n+        // 2. request if there is any pending form for user just created\n+        forms = userWorkflowService.getForms();\n+        assertNotNull(forms);\n+        assertEquals(preForms + 1, forms.size());\n+\n+        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getId());\n+        assertNotNull(form);\n+        assertNotNull(form.getTaskId());\n+        assertNull(form.getOwner());\n+\n+        // 4. claim task (from admin)\n+        form = userWorkflowService.claimForm(form.getTaskId());\n+        assertNotNull(form);\n+        assertNotNull(form.getTaskId());\n+        assertNotNull(form.getOwner());\n+\n+        // 5. approve user (and verify that propagation occurred)\n+        Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n+        form.setProperties(props.values());\n+        userTO = userWorkflowService.submitForm(form);\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+        assertEquals(Collections.singleton(RESOURCE_NAME_TESTDB), userTO.getResources());\n+\n+        exception = null;\n+        try {\n+            final String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class,\n+                    userTO.getUsername());\n+            assertEquals(userTO.getUsername(), username);\n+        } catch (EmptyResultDataAccessException e) {\n+            exception = e;\n+        }\n+        assertNull(exception);\n+\n+        // 6. update user\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.setPassword(\"anotherPassword123\");\n+\n+        userTO = updateUser(userMod);\n+        assertNotNull(userTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE15() {\n+        Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n+\n+        // read forms *before* any operation\n+        List<WorkflowFormTO> forms = userWorkflowService.getForms();\n+        assertNotNull(forms);\n+        int preForms = forms.size();\n+\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issueSYNCOPE15@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getMemberships().clear();\n+\n+        // User with role 9 are defined in workflow as subject to approval\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(9L);\n+        userTO.getMemberships().add(membershipTO);\n+\n+        // 1. create user with role 9 (and verify that no propagation occurred)\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertNotEquals(0L, userTO.getId());\n+        assertNotNull(userTO.getCreationDate());\n+        assertNotNull(userTO.getCreator());\n+        assertNotNull(userTO.getLastChangeDate());\n+        assertNotNull(userTO.getLastModifier());\n+        assertEquals(userTO.getCreationDate(), userTO.getLastChangeDate());\n+\n+        // 2. request if there is any pending form for user just created\n+        forms = userWorkflowService.getForms();\n+        assertEquals(preForms + 1, forms.size());\n+\n+        WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getId());\n+        assertNotNull(form);\n+\n+        // 3. first claim ny bellini ....\n+        UserWorkflowService userService3 = clientFactory.create(\n+                \"bellini\", ADMIN_PWD).getService(UserWorkflowService.class);\n+\n+        form = userService3.claimForm(form.getTaskId());\n+        assertNotNull(form);\n+        assertNotNull(form.getTaskId());\n+        assertNotNull(form.getOwner());\n+\n+        // 4. second claim task by admin\n+        form = userWorkflowService.claimForm(form.getTaskId());\n+        assertNotNull(form);\n+\n+        // 5. approve user\n+        final Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n+        props.get(\"approve\").setValue(Boolean.TRUE.toString());\n+        form.setProperties(props.values());\n+\n+        // 6. submit approve\n+        userTO = userWorkflowService.submitForm(form);\n+        assertNotNull(userTO);\n+        assertEquals(preForms, userWorkflowService.getForms().size());\n+        assertNull(userWorkflowService.getFormForUser(userTO.getId()));\n+\n+        // 7. search approval into the history as well\n+        forms = userWorkflowService.getFormsByName(userTO.getId(), \"Create approval\");\n+        assertFalse(forms.isEmpty());\n+\n+        int count = 0;\n+        for (WorkflowFormTO hform : forms) {\n+            if (form.getTaskId().equals(hform.getTaskId())) {\n+                count++;\n+\n+                assertEquals(\"createApproval\", hform.getKey());\n+                assertNotNull(hform.getCreateTime());\n+                assertNotNull(hform.getDueDate());\n+                assertTrue(Boolean.parseBoolean(hform.getPropertyMap().get(\"approve\").getValue()));\n+                assertNull(hform.getPropertyMap().get(\"rejectReason\").getValue());\n+            }\n+        }\n+        assertEquals(1, count);\n+\n+        userService.delete(userTO.getId());\n+\n+        try {\n+            userService.read(userTO.getId());\n+            fail();\n+        } catch (Exception ignore) {\n+            assertNotNull(ignore);\n+        }\n+\n+        try {\n+            userWorkflowService.getFormsByName(userTO.getId(), \"Create approval\");\n+            fail();\n+        } catch (Exception ignore) {\n+            assertNotNull(ignore);\n+        }\n+    }\n+\n+}"},{"sha":"211c834adadbd813c0cf849a75972c0221df428f","filename":"core/src/test/java/org/apache/syncope/core/rest/WorkflowTestITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FWorkflowTestITCase.java?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -30,20 +30,20 @@\n \r\n public class WorkflowTestITCase extends AbstractTest {\r\n \r\n-    @Test //TODO TestCase needs to be extended\r\n-    public void testGetUserDefinition() {\r\n+    @Test\r\n+    public void getUserDefinition() {\r\n         WorkflowDefinitionTO definition = workflowService.getDefinition(AttributableType.USER);\r\n         assertNotNull(definition);\r\n     }\r\n \r\n-    @Test //TODO TestCase needs to be extended\r\n-    public void testGetRoleDefinition() {\r\n+    @Test\r\n+    public void getRoleDefinition() {\r\n         WorkflowDefinitionTO definition = workflowService.getDefinition(AttributableType.ROLE);\r\n         assertNotNull(definition);\r\n     }\r\n \r\n-    @Test//TODO TestCase needs to be extended\r\n-    public void testUpdateUserDefinition() {\r\n+    @Test\r\n+    public void updateUserDefinition() {\r\n         Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\r\n \r\n         WorkflowDefinitionTO definition = workflowService.getDefinition(AttributableType.USER);\r\n@@ -54,8 +54,8 @@ public void testUpdateUserDefinition() {\n         assertNotNull(newDefinition);\r\n     }\r\n \r\n-    @Test//TODO TestCase needs to be extended\r\n-    public void testUpdateRoleDefinition() {\r\n+    @Test\r\n+    public void updateRoleDefinition() {\r\n         Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForRoles());\r\n \r\n         WorkflowDefinitionTO definition = workflowService.getDefinition(AttributableType.ROLE);\r\n@@ -67,14 +67,14 @@ public void testUpdateRoleDefinition() {\n     }\r\n \r\n     @Test\r\n-    public void testGetUserTasks() {\r\n+    public void getUserTasks() {\r\n         WorkflowTasks tasks = workflowService.getDefinedTasks(AttributableType.USER);\r\n         assertNotNull(tasks.getTasks());\r\n         assertFalse(tasks.getTasks().isEmpty());\r\n     }\r\n \r\n     @Test\r\n-    public void testGetRoleTasks() {\r\n+    public void getRoleTasks() {\r\n         WorkflowTasks tasks = workflowService.getDefinedTasks(AttributableType.ROLE);\r\n         assertNotNull(tasks.getTasks());\r\n         assertFalse(tasks.getTasks().isEmpty());\r"},{"sha":"0819caa1fffd183f147fd03f8e9c2e7d77d4f607","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/379f700f4ea2235ac9081fd9fd0d6e37fe1f8637/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=379f700f4ea2235ac9081fd9fd0d6e37fe1f8637","patch":"@@ -28,7 +28,7 @@ under the License.\n   <SyncopeConf confKey=\"notificationjob.cronExpression\" confValue=\"\"/>\n   <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n   <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n-  <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"true\"/>\n+  <SyncopeConf confKey=\"selfRegistration.allowed\" confValue=\"true\"/>\n   <SyncopeConf confKey=\"notification.maxRetries\" confValue=\"3\"/>\n \n   <!-- sample policies -->\n@@ -924,11 +924,6 @@ under the License.\n   <Entitlement name=\"NOTIFICATION_READ\"/>\n   <Entitlement name=\"NOTIFICATION_UPDATE\"/>\n   <Entitlement name=\"NOTIFICATION_DELETE\"/>\n-  <Entitlement name=\"USER_REQUEST_LIST\"/>\n-  <Entitlement name=\"USER_REQUEST_READ\"/>\n-  <Entitlement name=\"USER_REQUEST_DELETE\"/>\n-  <Entitlement name=\"USER_REQUEST_EXECUTE\"/>\n-  <Entitlement name=\"USER_REQUEST_CLAIM\"/>\n   <Entitlement name=\"REPORT_LIST\"/>\n   <Entitlement name=\"REPORT_READ\"/>\n   <Entitlement name=\"REPORT_CREATE\"/>"}]}