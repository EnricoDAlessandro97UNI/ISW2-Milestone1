{"sha":"938edd5c45830bf307176291bcc1f03ce4e406d8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkzOGVkZDVjNDU4MzBiZjMwNzE3NjI5MWJjYzFmMDNjZTRlNDA2ZDg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-07T16:12:16Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-07T16:12:16Z"},"message":"Solving issue #42 on PostgreSQL as well...\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246469 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ccd914fbd824642343e3b0ffc26889da1bde983b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ccd914fbd824642343e3b0ffc26889da1bde983b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/938edd5c45830bf307176291bcc1f03ce4e406d8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/938edd5c45830bf307176291bcc1f03ce4e406d8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/938edd5c45830bf307176291bcc1f03ce4e406d8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/938edd5c45830bf307176291bcc1f03ce4e406d8/comments","author":null,"committer":null,"parents":[{"sha":"a68490d8ca613a37408ef5f2df3335af7316a528","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a68490d8ca613a37408ef5f2df3335af7316a528","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a68490d8ca613a37408ef5f2df3335af7316a528"}],"stats":{"total":139,"additions":54,"deletions":85},"files":[{"sha":"adc1579f4fbe16ce90337102120e818de9e734dc","filename":"core/src/main/java/org/syncope/core/persistence/beans/SchemaMapping.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -17,22 +17,23 @@\n import static javax.persistence.EnumType.STRING;\n \n import javax.persistence.Basic;\n-import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Enumerated;\n-import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n+import javax.persistence.TableGenerator;\n import org.syncope.types.SchemaType;\n \n @Entity\n public class SchemaMapping extends AbstractBaseBean {\n \n     @Id\n-    @GeneratedValue(strategy = GenerationType.AUTO)\n+    @GeneratedValue(strategy = GenerationType.TABLE,\n+    generator = \"SEQ_SchemaMapping\")\n+    @TableGenerator(name = \"SEQ_SchemaMapping\", allocationSize = 20)\n     private Long id;\n     @Column(nullable = false)\n     private String schemaName;\n@@ -42,8 +43,7 @@ public class SchemaMapping extends AbstractBaseBean {\n     /**\n      * Target resource that has fields to be mapped over user attribute schemas.\n      */\n-    @ManyToOne(fetch = FetchType.EAGER,\n-    cascade = {CascadeType.MERGE, CascadeType.REFRESH})\n+    @ManyToOne\n     private TargetResource resource;\n     /**\n      * Target resource's field to be mapped."},{"sha":"9af6257f655eab8a84ee3c6535c9daf00bf6179f","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -56,7 +56,7 @@ public class TargetResource extends AbstractBaseBean {\n     /**\n      * Attribute mappings.\n      */\n-    @OneToMany(mappedBy = \"resource\")\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"resource\")\n     private List<SchemaMapping> mappings;\n     @Column(nullable = false)\n     @Basic"},{"sha":"e69fcd9d0707959afe31be406540f0db643ddf50","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -59,7 +59,9 @@ public TargetResource save(TargetResource resource) {\n     public void delete(String name) {\n \n         TargetResource resource = find(name);\n-        if (resource == null) return;\n+        if (resource == null) {\n+            return;\n+        }\n \n         // --------------------------------------\n         // Remove all mappings"},{"sha":"9ac636f97accd931fe4417bbb2dfa42e9a5e67cd","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":3,"deletions":13,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -32,6 +32,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n+import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n@@ -430,8 +431,8 @@ private void propagate(TargetResource resource, Type type,\n \n         ConnectorInstance connectorInstance = resource.getConnector();\n \n-        ConnectorFacade connector =\n-                getConnectorFacade(connectorInstance.getId().toString());\n+        ConnectorFacade connector = ConnectorInstanceLoader.getConnectorFacade(\n+                connectorInstance.getId().toString());\n \n         if (connector == null) {\n             LOG.error(\"Connector instance bean \"\n@@ -478,15 +479,4 @@ private void propagate(TargetResource resource, Type type,\n             throw new IllegalStateException(\"Error creating user\");\n         }\n     }\n-\n-    private ConnectorFacade getConnectorFacade(String id) {\n-\n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n-\n-        DefaultListableBeanFactory beanFactory =\n-                (DefaultListableBeanFactory) context.getBeanFactory();\n-\n-        return (ConnectorFacade) beanFactory.getBean(id);\n-    }\n }"},{"sha":"0eecdd97d61aaf564739858c8d9ecbe78fa628d0","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -123,6 +123,8 @@ public ResourceTO create(HttpServletResponse response,\n             throw compositeErrorException;\n         }\n \n+        resource = resourceDAO.save(resource);\n+\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getResourceTO(resource);\n     }\n@@ -193,7 +195,7 @@ public ResourceTO update(HttpServletResponse response,\n             throw compositeErrorException;\n         }\n \n-        response.setStatus(HttpServletResponse.SC_CREATED);\n+        resource = resourceDAO.save(resource);\n         return binder.getResourceTO(resource);\n     }\n "},{"sha":"4a44dff9960e5c2b3c643bc712774a1d579cc420","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -35,8 +35,8 @@\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.validation.MultiUniqueValueException;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -51,6 +51,8 @@ public class ResourceDataBinder {\n     private SchemaDAO schemaDAO;\n     @Autowired\n     private ConnectorInstanceDAO connectorInstanceDAO;\n+    @Autowired\n+    private ResourceDAO resourceDAO;\n \n     public TargetResource getResource(ResourceTO resourceTO)\n             throws SyncopeClientCompositeErrorException {\n@@ -106,13 +108,12 @@ public TargetResource getResource(TargetResource resource,\n         resource.setForceMandatoryConstraint(\n                 resourceTO.isForceMandatoryConstraint());\n \n-        List<SchemaMapping> mappings =\n-                getSchemaMappings(resource, resourceTO.getMappings());\n+        resource.setMappings(\n+                getSchemaMappings(resource, resourceTO.getMappings()));\n \n-        for (SchemaMapping mapping : mappings) {\n-            mapping = schemaDAO.saveMapping(mapping);\n-            resource.addMapping(mapping);\n+        resource = resourceDAO.save(resource);\n \n+        for (SchemaMapping mapping : resource.getMappings()) {\n             try {\n                 mapping.getSchemaType().getSchemaClass().asSubclass(\n                         AbstractSchema.class);\n@@ -123,16 +124,13 @@ public TargetResource getResource(TargetResource resource,\n                         mapping.getSchemaType().getSchemaClass());\n                 if (schema != null) {\n                     schema.addMapping(mapping);\n-                    schemaDAO.save(schema);\n                 }\n             } catch (ClassCastException e) {\n                 // no real schema provided\n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Wrong schema type \"\n                             + mapping.getSchemaType().getClassName());\n                 }\n-            } catch (MultiUniqueValueException mve) {\n-                LOG.error(\"Error during schema persistence\", mve);\n             }\n         }\n "},{"sha":"56e79b1c3c93a1e34b7a46c045d624a6cc69420f","filename":"core/src/main/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -18,6 +18,7 @@\n     so since SyncopeUser.id@TableGenerator.allocationSize == 100, actual\n     starting value for SyncopeUser.id is 1000 -->\n     <hibernate_sequences sequence_name=\"SyncopeUser\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SchemaMapping\" sequence_next_hi_value=\"10\"/>\n \n     <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>"},{"sha":"8107ae362a8a5dfce01156ffb3adb2747d083ba8","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/ResourceTest.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -60,6 +60,9 @@ public class ResourceTest extends AbstractTest {\n      */\n     @Test\n     public final void issue42() {\n+        UserSchema userId = schemaDAO.find(\"userId\", UserSchema.class);\n+        int beforeUserIdMappings = userId.getMappings().size();\n+\n         SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n         schemaMappingTO.setSchemaName(\"userId\");\n         schemaMappingTO.setSchemaType(SchemaType.UserSchema);\n@@ -79,11 +82,17 @@ public final void issue42() {\n \n         TargetResource resource = resourceDataBinder.getResource(resourceTO);\n \n+        resource = resourceDAO.save(resource);\n+\n         resourceDAO.flush();\n \n         TargetResource actual = resourceDAO.find(\"resource-issue42\");\n-\n         assertEquals(resource, actual);\n+\n+        userId = schemaDAO.find(\"userId\", UserSchema.class);\n+        int afterUserIdMappings = userId.getMappings().size();\n+\n+        assertEquals(beforeUserIdMappings, afterUserIdMappings - 1);\n     }\n \n     @Test\n@@ -99,9 +108,6 @@ public final void save() throws ClassNotFoundException {\n         resource.setConnector(connector);\n         connector.addResource(resource);\n \n-        // specify a mapping\n-        List<SchemaMapping> mappings = new ArrayList<SchemaMapping>();\n-\n         // search for the user schema\n         UserSchema userSchema =\n                 schemaDAO.find(\"username\", UserSchema.class);\n@@ -115,20 +121,15 @@ public final void save() throws ClassNotFoundException {\n             mapping.setSchemaName(userSchema.getName());\n             mapping.setSchemaType(SchemaType.UserSchema);\n \n-            mapping.setResource(resource);\n-            \n-            mapping = schemaDAO.saveMapping(mapping);\n             resource.addMapping(mapping);\n-\n-            mappings.add(mapping);\n         }\n \n         // specify an user schema\n         SyncopeUser user = syncopeUserDAO.find(1L);\n \n         assertNotNull(\"user not found\", user);\n \n-        resource.setUsers(Collections.singleton(user));\n+        resource.addUser(user);\n         user.addTargetResource(resource);\n \n         // save the resource\n@@ -162,7 +163,7 @@ public final void save() throws ClassNotFoundException {\n         List<SchemaMapping> schemaMappings = resource.getMappings();\n \n         assertNotNull(schemaMappings);\n-        assertEquals(3,schemaMappings.size());\n+        assertEquals(3, schemaMappings.size());\n     }\n \n     @Test"},{"sha":"3b4e5aaa84ea5e2fee554c87c58a262261dfbf45","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/SchemaMappingTest.java","status":"modified","additions":18,"deletions":44,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -14,11 +14,6 @@\n  */\n package org.syncope.core.test.persistence.relationships;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import org.syncope.core.persistence.validation.MultiUniqueValueException;\n-import org.syncope.core.test.persistence.*;\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n@@ -29,74 +24,53 @@\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.validation.MultiUniqueValueException;\n+import org.syncope.core.test.persistence.AbstractTest;\n import org.syncope.types.SchemaType;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n \n @Transactional\n public class SchemaMappingTest extends AbstractTest {\n \n     @Autowired\n     private SchemaDAO schemaDAO;\n-\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n     @Test\n-    public final void create() throws ClassNotFoundException, MultiUniqueValueException {\n-        SchemaMapping mapping = new SchemaMapping();\n+    public final void create() throws\n+            ClassNotFoundException, MultiUniqueValueException {\n \n+        SchemaMapping mapping = new SchemaMapping();\n         mapping.setSchemaType(SchemaType.UserSchema);\n+        mapping.setSchemaName(\"firstname\");\n+        mapping.setField(\"name\");\n \n-        UserSchema schema = schemaDAO.find(\"firstname\", UserSchema.class);\n-\n-        assertNotNull(schema);\n-\n-        mapping.setSchemaName(schema.getName());\n-\n-        TargetResource resource = resourceDAO.find(\"ws-target-resource-1\");\n-\n+        TargetResource resource = resourceDAO.find(\"ws-target-resource-delete\");\n         assertNotNull(resource);\n \n-        mapping.setResource(resource);\n+        // update resource\n+        resource.addMapping(mapping);\n+        TargetResource actualResource = resourceDAO.save(resource);\n \n-        mapping.setField(\"name\");\n+        assertNotNull(actualResource);\n \n-        // update schema mapping\n-        SchemaMapping actualMapping = schemaDAO.saveMapping(mapping);\n+        SchemaMapping actualMapping =\n+                actualResource.getMappings().iterator().next();\n \n         assertNotNull(actualMapping);\n-\n         assertTrue(actualMapping.isNullable());\n-\n         assertFalse(actualMapping.isAccountid());\n-\n         assertFalse(actualMapping.isPassword());\n-\n         assertEquals(\"firstname\", actualMapping.getSchemaName());\n-\n         assertEquals(\"name\", actualMapping.getField());\n \n-        // update schema\n-        schema.addMapping(actualMapping);\n-        UserSchema actualSchema = schemaDAO.save(schema);\n-\n-        assertNotNull(actualSchema);\n-\n-        // update resource\n-        resource.addMapping(actualMapping);\n-        TargetResource actualResource = resourceDAO.save(resource);\n-\n-        assertNotNull(actualResource);\n-\n         // close the transaction\n         schemaDAO.flush();\n \n-        actualSchema = schemaDAO.find(\"firstname\", UserSchema.class);\n-\n-        assertNotNull(actualSchema.getMappings());\n-        assertFalse(actualSchema.getMappings().isEmpty());\n-        assertTrue(actualSchema.getMappings().contains(actualMapping));\n-\n-        actualResource = resourceDAO.find(\"ws-target-resource-1\");\n+        actualResource = resourceDAO.find(\"ws-target-resource-delete\");\n \n         assertNotNull(actualResource.getMappings());\n         assertFalse(actualResource.getMappings().isEmpty());"},{"sha":"cf8bedbb69188b9de03c7844cfa4597077711c04","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -18,6 +18,7 @@\n     so since SyncopeUser.id@TableGenerator.allocationSize == 100, actual\n     starting value for SyncopeUser.id is 1000 -->\n     <hibernate_sequences sequence_name=\"SyncopeUser\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SchemaMapping\" sequence_next_hi_value=\"10\"/>\n \n     <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>"}]}