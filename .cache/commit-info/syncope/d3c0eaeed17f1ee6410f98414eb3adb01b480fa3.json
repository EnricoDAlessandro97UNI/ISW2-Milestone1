{"sha":"d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQzYzBlYWVlZDE3ZjFlZTY0MTBmOTg0MTRlYjNhZGIwMWI0ODBmYTM=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2014-06-06T12:15:34Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2014-06-06T12:15:34Z"},"message":"Fix for SYNCOPE-472\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1600864 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4638f0cae99d48e00ca95c28ab4008b28c304132","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4638f0cae99d48e00ca95c28ab4008b28c304132"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"a01f0bae81494750cc3f9914abc58301d7effffe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a01f0bae81494750cc3f9914abc58301d7effffe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a01f0bae81494750cc3f9914abc58301d7effffe"}],"stats":{"total":877,"additions":548,"deletions":329},"files":[{"sha":"46fada2c24c7908026a9b584992bd4d7999311bc","filename":"common/src/main/java/org/apache/syncope/common/to/PushTaskTO.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPushTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPushTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPushTaskTO.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -27,4 +27,23 @@ public class PushTaskTO extends AbstractSyncTaskTO {\n \r\n     private static final long serialVersionUID = -2143537546915809018L;\r\n \r\n+    private String userFilter;\r\n+\r\n+    private String roleFilter;\r\n+\r\n+    public String getUserFilter() {\r\n+        return userFilter;\r\n+    }\r\n+\r\n+    public void setUserFilter(String filter) {\r\n+        this.userFilter = filter;\r\n+    }\r\n+\r\n+    public String getRoleFilter() {\r\n+        return roleFilter;\r\n+    }\r\n+\r\n+    public void setRoleFilter(String roleFilter) {\r\n+        this.roleFilter = roleFilter;\r\n+    }\r\n }\r"},{"sha":"14dc7abdf7ba33833327f961afcf596540bb2402","filename":"common/src/main/java/org/apache/syncope/common/types/PolicyType.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -29,18 +29,21 @@ public enum PolicyType {\n      */\r\n     ACCOUNT(\"Account Policy\"),\r\n     GLOBAL_ACCOUNT(\"Account Global Policy\"),\r\n-\r\n     /**\r\n      * Password policy regarding password syntax.\r\n      */\r\n     PASSWORD(\"Password Policy\"),\r\n     GLOBAL_PASSWORD(\"Password Global Policy\"),\r\n-\r\n     /**\r\n      * SYNC policy regarding account conflicts resolution.\r\n      */\r\n     SYNC(\"Synchronization Policy\"),\r\n-    GLOBAL_SYNC(\"Synchronization Global Policy\");\r\n+    GLOBAL_SYNC(\"Synchronization Global Policy\"),\r\n+    /**\r\n+     * PUSH policy regarding account conflicts resolution.\r\n+     */\r\n+    PUSH(\"Push Policy\"),\r\n+    GLOBAL_PUSH(\"Push Global Policy\");\r\n \r\n     private String description;\r\n \r"},{"sha":"efddf524fc42dd8eb0a92610a85e4c9012b3352a","filename":"core/src/main/java/org/apache/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":34,"deletions":32,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -25,6 +25,7 @@\n import java.util.regex.Pattern;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.notification.NotificationJob;\n+import org.apache.syncope.core.persistence.beans.AbstractSyncTask;\n import org.apache.syncope.core.persistence.beans.PushTask;\n import org.apache.syncope.core.persistence.beans.Report;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n@@ -36,12 +37,10 @@\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.quartz.TaskJob;\n import org.apache.syncope.core.report.ReportJob;\n+import org.apache.syncope.core.sync.AbstractSyncActions;\n import org.apache.syncope.core.sync.DefaultPushActions;\n import org.apache.syncope.core.sync.DefaultSyncActions;\n-import org.apache.syncope.core.sync.PushActions;\n-import org.apache.syncope.core.sync.SyncActions;\n-import org.apache.syncope.core.sync.impl.PushJob;\n-import org.apache.syncope.core.sync.impl.SyncJob;\n+import org.apache.syncope.core.sync.impl.AbstractSyncJob;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.quartz.Job;\n import org.quartz.JobExecutionContext;\n@@ -159,45 +158,48 @@ private void registerJob(final String jobName, final Job jobInstance, final Stri\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void registerJob(final Task task, final String jobClassName, final String cronExpression)\n             throws ClassNotFoundException, SchedulerException, ParseException {\n \n-        Class<?> jobClass = Class.forName(jobClassName);\n+        final Class<?> jobClass = Class.forName(jobClassName);\n         Job jobInstance = (Job) ApplicationContextProvider.getBeanFactory().\n                 createBean(jobClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n         if (jobInstance instanceof TaskJob) {\n             ((TaskJob) jobInstance).setTaskId(task.getId());\n         }\n-        if (jobInstance instanceof SyncJob && task instanceof SyncTask) {\n-            String jobActionsClassName = ((SyncTask) task).getActionsClassName();\n-            Class<?> syncActionsClass = DefaultSyncActions.class;\n-            if (StringUtils.isNotBlank(jobActionsClassName)) {\n-                try {\n-                    syncActionsClass = Class.forName(jobActionsClassName);\n-                } catch (Exception e) {\n-                    LOG.error(\"Class {} not found, reverting to {}\", jobActionsClassName,\n-                            syncActionsClass.getName(), e);\n-                }\n-            }\n-            SyncActions syncActions = (SyncActions) ApplicationContextProvider.getBeanFactory().\n-                    createBean(syncActionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-\n-            ((SyncJob) jobInstance).setActions(syncActions);\n-        } else if (jobInstance instanceof PushJob && task instanceof PushTask) {\n-            String jobActionsClassName = ((PushTask) task).getActionsClassName();\n-            Class<?> syncActionsClass = DefaultPushActions.class;\n-            if (StringUtils.isNotBlank(jobActionsClassName)) {\n+\n+        // In case of synchronization job/task retrieve and set synchronization actions:\n+        // actions cannot be changed at runtime but connector and synchronization policies (reloaded at execution time).\n+        if (jobInstance instanceof AbstractSyncJob && task instanceof AbstractSyncTask) {\n+            final String jobActionsClassName = ((AbstractSyncTask) task).getActionsClassName();\n+\n+            try {\n+\n+                Class<?> syncActionsClass = Class.forName(jobActionsClassName);\n+\n+                final AbstractSyncActions<?> syncActions =\n+                        (AbstractSyncActions<?>) ApplicationContextProvider.getBeanFactory().\n+                        createBean(syncActionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+\n+                // Assume that syncActions object implements the right interface: \n+                // * SyncActions for a SyncJob; \n+                // * PushActions for a PushJob.\n+                ((AbstractSyncJob) jobInstance).setActions(syncActions);\n+\n+            } catch (Exception e) {\n+                final Class<? extends AbstractSyncActions<?>> defaultSyncActions =\n+                        task instanceof SyncTask ? DefaultSyncActions.class : DefaultPushActions.class;\n+\n+                LOG.info(\"Class '{}' not found, reverting to {}\", jobActionsClassName, defaultSyncActions.getName());\n+\n                 try {\n-                    syncActionsClass = Class.forName(jobActionsClassName);\n-                } catch (Exception e) {\n-                    LOG.error(\"Class {} not found, reverting to {}\", jobActionsClassName,\n-                            syncActionsClass.getName(), e);\n+                    ((AbstractSyncJob) jobInstance).setActions(defaultSyncActions.newInstance());\n+                } catch (Exception ie) {\n+                    // Shouldn't happen, BTW ...\n+                    LOG.error(\"Default action class {} instantiation failed\", defaultSyncActions.getName(), ie);\n                 }\n             }\n-            PushActions pushActions = (PushActions) ApplicationContextProvider.getBeanFactory().\n-                    createBean(syncActionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-\n-            ((PushJob) jobInstance).setActions(pushActions);\n         }\n \n         registerJob(getJobName(task), jobInstance, cronExpression);"},{"sha":"f476d46ae1865c1cdc77f8ce4a14f2b88900a96a","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -141,6 +141,9 @@ public class ExternalResource extends AbstractSysInfo {\n     @ManyToOne(fetch = FetchType.EAGER, optional = true)\n     private SyncPolicy syncPolicy;\n \n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private PushPolicy pushPolicy;\n+\n     /**\n      * Configuration properties that are overridden from the connector instance.\n      */\n@@ -312,6 +315,14 @@ public void setSyncPolicy(final SyncPolicy syncPolicy) {\n         this.syncPolicy = syncPolicy;\n     }\n \n+    public PushPolicy getPushPolicy() {\n+        return pushPolicy;\n+    }\n+\n+    public void setPushPolicy(PushPolicy pushPolicy) {\n+        this.pushPolicy = pushPolicy;\n+    }\n+\n     public Set<ConnConfProperty> getConnInstanceConfiguration() {\n         Set<ConnConfProperty> result = null;\n         if (StringUtils.isNotBlank(xmlConfiguration)) {"},{"sha":"212fd8ca441b40502f5b63b47f849eebc994e5db","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/PushPolicy.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushPolicy.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.beans;\n+\n+import javax.persistence.Entity;\n+import org.apache.syncope.common.types.PolicyType;\n+\n+@Entity\n+public class PushPolicy extends Policy {\n+\n+    private static final long serialVersionUID = -6090413855809521279L;\n+\n+    public PushPolicy() {\n+        this(false);\n+    }\n+\n+    public PushPolicy(boolean global) {\n+        super();\n+\n+        this.type = global\n+                ? PolicyType.GLOBAL_SYNC\n+                : PolicyType.SYNC;\n+    }\n+}"},{"sha":"e2cd8e80ab58136d45b6ae79aff08486a6307a77","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/PushTask.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushTask.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -25,10 +25,30 @@ public class PushTask extends AbstractSyncTask {\n \n     private static final long serialVersionUID = -4141057723006682564L;\n \n+    private String userFilter;\n+\n+    private String roleFilter;\n+\n     /**\n      * Default constructor.\n      */\n     public PushTask() {\n         super(\"org.apache.syncope.core.sync.impl.PushJob\");\n     }\n+\n+    public String getUserFilter() {\n+        return userFilter;\n+    }\n+\n+    public void setUserFilter(final String filter) {\n+        this.userFilter = filter;\n+    }\n+\n+    public String getRoleFilter() {\n+        return roleFilter;\n+    }\n+\n+    public void setRoleFilter(String roleFilter) {\n+        this.roleFilter = roleFilter;\n+    }\n }"},{"sha":"88f5007f2d74dc1f950941065bcce5b2311e9a14","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/PolicyDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.Policy;\n+import org.apache.syncope.core.persistence.beans.PushPolicy;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n \n public interface PolicyDAO extends DAO {\n@@ -38,6 +39,8 @@ public interface PolicyDAO extends DAO {\n \n     SyncPolicy getGlobalSyncPolicy();\n \n+    PushPolicy getGlobalPushPolicy();\n+\n     List<Policy> findAll();\n \n     <T extends Policy> T save(T policy);"},{"sha":"32624b4614630213e766f98aa9f79c837bbfab92","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/PolicyDAOImpl.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.Policy;\n+import org.apache.syncope.core.persistence.beans.PushPolicy;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n@@ -71,6 +72,14 @@ public SyncPolicy getGlobalSyncPolicy() {\n                 : (SyncPolicy) policies.get(0);\n     }\n \n+    @Override\n+    public PushPolicy getGlobalPushPolicy() {\n+        List<? extends Policy> policies = find(PolicyType.GLOBAL_PUSH);\n+        return policies == null || policies.isEmpty()\n+                ? null\n+                : (PushPolicy) policies.get(0);\n+    }\n+\n     @Override\n     public List<Policy> findAll() {\n         TypedQuery<Policy> query = entityManager.createQuery(\"SELECT e FROM Policy e\", Policy.class);"},{"sha":"76284020fa59099a416f072429e9fbef1f589ddb","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -34,11 +34,13 @@\n import org.apache.syncope.common.util.BeanUtils;\n import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.common.to.AbstractSyncTaskTO;\n+import org.apache.syncope.common.to.PushTaskTO;\n import org.apache.syncope.core.init.JobInstanceLoader;\n import org.apache.syncope.core.persistence.beans.AbstractSyncTask;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.PushTask;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.Task;\n@@ -96,7 +98,13 @@ private void checkJexl(final AbstractAttributableTO attributableTO, final Syncop\n     private void fill(final AbstractSyncTask task, final AbstractSyncTaskTO taskTO) {\n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSyncTask);\n \n-        if (task instanceof SyncTask && taskTO instanceof SyncTaskTO) {\n+        if (task instanceof PushTask && taskTO instanceof PushTaskTO) {\n+            final PushTask pushTask = (PushTask) task;\n+            final PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n+\n+            pushTask.setUserFilter(pushTaskTO.getUserFilter());\n+\n+        } else if (task instanceof SyncTask && taskTO instanceof SyncTaskTO) {\n             final SyncTask syncTask = (SyncTask) task;\n             final SyncTaskTO syncTaskTO = (SyncTaskTO) taskTO;\n \n@@ -170,7 +178,7 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUt\n             if (resource == null) {\n                 throw new NotFoundException(\"Resource \" + syncTaskTO.getResource());\n             }\n-            ((SyncTask) task).setResource(resource);\n+            ((AbstractSyncTask) task).setResource(resource);\n \n             fill((AbstractSyncTask) task, syncTaskTO);\n         }\n@@ -287,6 +295,16 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtil ta\n                 ((SyncTaskTO) taskTO).setDescription(((SyncTask) task).getDescription());\n                 ((SyncTaskTO) taskTO).setResource(((SyncTask) task).getResource().getName());\n                 break;\n+            case PUSH:\n+                if (!(task instanceof PushTask)) {\n+                    throw new ClassCastException(\"taskUtil is type Push but task is not PushTask: \"\n+                            + task.getClass().getName());\n+                }\n+                setExecTime((SchedTaskTO) taskTO, task);\n+                ((PushTaskTO) taskTO).setName(((PushTask) task).getName());\n+                ((PushTaskTO) taskTO).setDescription(((PushTask) task).getDescription());\n+                ((PushTaskTO) taskTO).setResource(((PushTask) task).getResource().getName());\n+                break;\n \n             case NOTIFICATION:\n                 if (((NotificationTask) task).isExecuted() && StringUtils.isBlank(taskTO.getLatestExecStatus())) {"},{"sha":"90fb49b9ab0625c34f51dadeafee8b886d939e71","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.to.TaskExecTO;\r\n import org.apache.syncope.common.to.AbstractTaskTO;\r\n import org.apache.syncope.common.reqres.PagedResult;\r\n+import org.apache.syncope.common.to.PushTaskTO;\r\n import org.apache.syncope.common.types.RESTHeaders;\r\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\r\n import org.apache.syncope.common.types.TaskType;\r\n@@ -52,7 +53,7 @@ public class TaskServiceImpl extends AbstractServiceImpl implements TaskService\n     @Override\r\n     public <T extends SchedTaskTO> Response create(final T taskTO) {\r\n         T createdTask;\r\n-        if (taskTO instanceof SyncTaskTO || taskTO instanceof SchedTaskTO) {\r\n+        if (taskTO instanceof SyncTaskTO || taskTO instanceof PushTaskTO || taskTO instanceof SchedTaskTO) {\r\n             createdTask = controller.createSchedTask(taskTO);\r\n         } else {\r\n             throw new BadRequestException();\r"},{"sha":"c5a8b5844a985f76341089e52372213e0d0f4a8c","filename":"core/src/main/java/org/apache/syncope/core/sync/DefaultPushActions.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultPushActions.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -33,36 +33,37 @@\n public class DefaultPushActions implements PushActions {\n \n     @Override\n-    public void beforeAll(final AbstractSyncopeResultHandler handler) throws JobExecutionException {\n+    public void beforeAll(final AbstractSyncopeResultHandler<?, ?> handler) throws JobExecutionException {\n     }\n \n     @Override\n     public <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeCreate(\n-            final AbstractSyncopeResultHandler handler,\n-            final T subject,\n-            final Map.Entry<String, Set<Attribute>> delta) throws JobExecutionException {\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException {\n         return delta;\n     }\n \n     @Override\n     public <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeUpdate(\n-            final AbstractSyncopeResultHandler handler,\n-            final T subject,\n-            final Map.Entry<String, Set<Attribute>> delta) throws JobExecutionException {\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n     public <T extends AbstractAttributable> void after(\n-            final AbstractSyncopeResultHandler handler,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n             final T subject,\n-            final Map.Entry<String, Set<Attribute>> delta, SyncResult result) throws JobExecutionException {\n+            SyncResult result) throws JobExecutionException {\n     }\n \n     @Override\n     public void afterAll(\n-            final AbstractSyncopeResultHandler handler,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n             final List<SyncResult> results)\n             throws JobExecutionException {\n     }"},{"sha":"74f7954b1ca5ef7484bcc28d88d93a945a0b8cc0","filename":"core/src/main/java/org/apache/syncope/core/sync/DefaultSyncActions.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -22,7 +22,7 @@\n \n import org.apache.syncope.common.mod.AbstractAttributableMod;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n-import org.apache.syncope.core.sync.impl.AbstractSyncopeSyncResultHandler;\n+import org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n \n@@ -32,12 +32,12 @@\n public class DefaultSyncActions implements SyncActions {\n \n     @Override\n-    public void beforeAll(final AbstractSyncopeSyncResultHandler handler) throws JobExecutionException {\n+    public void beforeAll(final AbstractSyncopeResultHandler<?, ?> handler) throws JobExecutionException {\n     }\n \n     @Override\n     public <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n-            final AbstractSyncopeSyncResultHandler handler,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n             final SyncDelta delta,\n             final T subject) throws JobExecutionException {\n \n@@ -46,7 +46,7 @@ public <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n \n     @Override\n     public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final AbstractSyncopeSyncResultHandler handler,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n             final SyncDelta delta,\n             final T subject,\n             final K subjectMod)\n@@ -57,7 +57,7 @@ public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> Syn\n \n     @Override\n     public <T extends AbstractAttributableTO> SyncDelta beforeDelete(\n-            final AbstractSyncopeSyncResultHandler handler,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n             final SyncDelta delta,\n             final T subject) throws JobExecutionException {\n \n@@ -66,15 +66,15 @@ public <T extends AbstractAttributableTO> SyncDelta beforeDelete(\n \n     @Override\n     public <T extends AbstractAttributableTO> void after(\n-            final AbstractSyncopeSyncResultHandler handler,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n             final SyncDelta delta,\n             final T subject,\n             final SyncResult result) throws JobExecutionException {\n     }\n \n     @Override\n     public void afterAll(\n-            final AbstractSyncopeSyncResultHandler handler,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n             final List<SyncResult> results)\n             throws JobExecutionException {\n     }"},{"sha":"68d0a26d96d748cf2ad6894fb7a2feed771d813a","filename":"core/src/main/java/org/apache/syncope/core/sync/PushActions.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FPushActions.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -28,48 +28,48 @@\n /**\n  * Interface for actions to be performed during PushJob execution.\n  */\n-public interface PushActions extends AbstractSyncActions<AbstractSyncopeResultHandler> {\n+public interface PushActions extends AbstractSyncActions<AbstractSyncopeResultHandler<?, ?>> {\n \n     /**\n      * Action to be executed before to create a synchronized user locally.\n      *\n      * @param handler synchronization handler being executed.\n-     * @param subject user / role to be created\n-     * @param delta info to be pushed out (accountId, attributes)\n+     * @param delta info to be pushed out (accountId, attributes).\n+     * @param subject user / role to be created.\n      * @return info to be pushed out (accountId, attributes).\n      * @throws JobExecutionException in case of generic failure\n      */\n     <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeCreate(\n-            final AbstractSyncopeResultHandler handler,\n-            final T subject,\n-            final Map.Entry<String, Set<Attribute>> delta) throws JobExecutionException;\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to update a synchronized user locally.\n      *\n      * @param handler synchronization handler being executed.\n-     * @param subject user / role to be created\n-     * @param delta info to be pushed out (accountId, attributes)\n+     * @param delta info to be pushed out (accountId, attributes).\n+     * @param subject user / role to be updated.\n      * @return info to be pushed out (accountId, attributes).\n      * @throws JobExecutionException in case of generic failure\n      */\n     <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeUpdate(\n-            final AbstractSyncopeResultHandler handler,\n-            final T subject,\n-            final Map.Entry<String, Set<Attribute>> delta) throws JobExecutionException;\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException;\n \n     /**\n      * Action to be executed after each local user synchronization.\n      *\n      * @param handler synchronization handler being executed.\n-     * @param subject user / role to be created\n      * @param delta info pushed out (accountId, attributes)\n+     * @param subject synchronized user / role.\n      * @param result operation result.\n      * @throws JobExecutionException in case of generic failure\n      */\n     <T extends AbstractAttributable> void after(\n-            final AbstractSyncopeResultHandler handler,\n-            final T subject,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n             final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject,\n             final SyncResult result) throws JobExecutionException;\n }"},{"sha":"6acc19b6960152911172a11c4216e5134f20fc8c","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncActions.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -20,14 +20,14 @@\n \n import org.apache.syncope.common.mod.AbstractAttributableMod;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n-import org.apache.syncope.core.sync.impl.AbstractSyncopeSyncResultHandler;\n+import org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n \n /**\n  * Interface for actions to be performed during SyncJob execution.\n  */\n-public interface SyncActions extends AbstractSyncActions<AbstractSyncopeSyncResultHandler> {\n+public interface SyncActions extends AbstractSyncActions<AbstractSyncopeResultHandler<?, ?>> {\n \n     /**\n      * Action to be executed before to create a synchronized user locally.\n@@ -39,7 +39,7 @@ public interface SyncActions extends AbstractSyncActions<AbstractSyncopeSyncResu\n      * @throws JobExecutionException in case of generic failure\n      */\n     <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n-            final AbstractSyncopeSyncResultHandler handler,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n             final SyncDelta delta,\n             final T subject) throws JobExecutionException;\n \n@@ -54,7 +54,7 @@ <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n      * @throws JobExecutionException in case of generic failure.\n      */\n     <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final AbstractSyncopeSyncResultHandler handler,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n             final SyncDelta delta,\n             final T subject,\n             final K subjectMod)\n@@ -65,12 +65,12 @@ <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information\n-     * @param subject lcao user / role to be deleted\n+     * @param subject local user / role to be deleted\n      * @return synchronization information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n     <T extends AbstractAttributableTO> SyncDelta beforeDelete(\n-            final AbstractSyncopeSyncResultHandler handler,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n             final SyncDelta delta,\n             final T subject) throws JobExecutionException;\n \n@@ -84,7 +84,8 @@ <T extends AbstractAttributableTO> SyncDelta beforeDelete(\n      * @throws JobExecutionException in case of generic failure\n      */\n     <T extends AbstractAttributableTO> void after(\n-            final AbstractSyncopeSyncResultHandler handler,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n             final SyncDelta delta,\n-            final T subject, final SyncResult result) throws JobExecutionException;\n+            final T subject,\n+            final SyncResult result) throws JobExecutionException;\n }"},{"sha":"19f72807f80d63e283ea4e5d26903f9bc98ea9ab","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSyncJob.java","status":"modified","additions":88,"deletions":3,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncJob.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -18,16 +18,24 @@\n  */\n package org.apache.syncope.core.sync.impl;\n \n+import java.lang.reflect.ParameterizedType;\n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.syncope.common.types.SyncPolicySpec;\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.core.persistence.beans.AbstractSyncTask;\n import org.apache.syncope.core.persistence.beans.Entitlement;\n+import org.apache.syncope.core.persistence.beans.PushPolicy;\n import org.apache.syncope.core.persistence.beans.PushTask;\n+import org.apache.syncope.core.persistence.beans.SyncPolicy;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n+import org.apache.syncope.core.persistence.beans.role.RMapping;\n+import org.apache.syncope.core.persistence.beans.user.UMapping;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n+import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n+import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.ConnectorFactory;\n import org.apache.syncope.core.quartz.AbstractTaskJob;\n import org.apache.syncope.core.sync.AbstractSyncActions;\n@@ -48,7 +56,7 @@\n  * @see SyncTask\n  * @see PushTask\n  */\n-public abstract class AbstractSyncJob<H extends AbstractSyncopeResultHandler, A extends AbstractSyncActions<?>>\n+public abstract class AbstractSyncJob<T extends AbstractSyncTask, A extends AbstractSyncActions<?>>\n         extends AbstractTaskJob {\n \n     /**\n@@ -69,6 +77,12 @@\n     @Autowired\n     protected EntitlementDAO entitlementDAO;\n \n+    /**\n+     * Policy DAO.\n+     */\n+    @Autowired\n+    protected PolicyDAO policyDAO;\n+\n     /**\n      * SyncJob actions.\n      */\n@@ -292,14 +306,57 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                 new UsernamePasswordAuthenticationToken(userDetails, \"FAKE_PASSWORD\", authorities));\n \n         try {\n-            return executeWithSecurityContext(dryRun);\n+            final Class<T> clazz = getTaskClassReference();\n+            if (!clazz.isAssignableFrom(task.getClass())) {\n+                throw new JobExecutionException(\"Task \" + taskId + \" isn't a SyncTask\");\n+            }\n+\n+            final T syncTask = clazz.cast(this.task);\n+\n+            final Connector connector;\n+            try {\n+                connector = connFactory.getConnector(syncTask.getResource());\n+            } catch (Exception e) {\n+                final String msg = String.\n+                        format(\"Connector instance bean for resource %s and connInstance %s not found\",\n+                        syncTask.getResource(), syncTask.getResource().getConnector());\n+\n+                throw new JobExecutionException(msg, e);\n+            }\n+\n+            final UMapping uMapping = syncTask.getResource().getUmapping();\n+            if (uMapping != null && uMapping.getAccountIdItem() == null) {\n+                throw new JobExecutionException(\"Invalid user account id mapping for resource \" + syncTask.getResource());\n+            }\n+            final RMapping rMapping = syncTask.getResource().getRmapping();\n+            if (rMapping != null && rMapping.getAccountIdItem() == null) {\n+                throw new JobExecutionException(\"Invalid role account id mapping for resource \" + syncTask.getResource());\n+            }\n+            if (uMapping == null && rMapping == null) {\n+                return \"No mapping configured for both users and roles: aborting...\";\n+            }\n+\n+            return executeWithSecurityContext(\n+                    syncTask,\n+                    getSyncPolicySpec(syncTask),\n+                    connector,\n+                    uMapping,\n+                    rMapping,\n+                    dryRun);\n+\n         } finally {\n             // POST: clean up the SecurityContextHolder\n             SecurityContextHolder.clearContext();\n         }\n     }\n \n-    protected abstract String executeWithSecurityContext(final boolean dryRun) throws JobExecutionException;\n+    protected abstract String executeWithSecurityContext(\n+            final T task,\n+            final SyncPolicySpec syncPolicySpec,\n+            final Connector connector,\n+            final UMapping uMapping,\n+            final RMapping rMapping,\n+            final boolean dryRun) throws JobExecutionException;\n \n     @Override\n     protected boolean hasToBeRegistered(final TaskExec execution) {\n@@ -310,4 +367,32 @@ protected boolean hasToBeRegistered(final TaskExec execution) {\n                 && syncTask.getResource().getSyncTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n                 || syncTask.getResource().getSyncTraceLevel().ordinal() >= TraceLevel.SUMMARY.ordinal();\n     }\n+\n+    private SyncPolicySpec getSyncPolicySpec(final AbstractSyncTask syncTask) {\n+        SyncPolicySpec syncPolicySpec;\n+\n+        if (syncTask instanceof SyncTask) {\n+            final SyncPolicy syncPolicy = syncTask.getResource().getSyncPolicy() == null\n+                    ? policyDAO.getGlobalSyncPolicy()\n+                    : syncTask.getResource().getSyncPolicy();\n+\n+            syncPolicySpec = syncPolicy == null ? null : (SyncPolicySpec) syncPolicy.getSpecification();\n+        } else if (syncTask instanceof PushTask) {\n+            final PushPolicy pushPolicy = syncTask.getResource().getPushPolicy() == null\n+                    ? policyDAO.getGlobalPushPolicy()\n+                    : syncTask.getResource().getPushPolicy();\n+\n+            syncPolicySpec = pushPolicy == null ? null : (SyncPolicySpec) pushPolicy.getSpecification();\n+        } else {\n+            syncPolicySpec = null;\n+        }\n+\n+        // step required because the call <policy>.getSpecification() could return a null value\n+        return syncPolicySpec == null ? new SyncPolicySpec() : syncPolicySpec;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Class<T> getTaskClassReference() {\n+        return (Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];\n+    }\n }"},{"sha":"619b49184f168845557c782d861678d55751c222","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSyncopeResultHandler.java","status":"modified","additions":59,"deletions":1,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -20,18 +20,56 @@\n \n import java.util.Collection;\n import org.apache.syncope.common.types.ConflictResolutionAction;\n+import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.core.connid.ConnObjectUtil;\n+import org.apache.syncope.core.notification.NotificationManager;\n+import org.apache.syncope.core.persistence.beans.AbstractSyncTask;\n import org.apache.syncope.core.propagation.Connector;\n+import org.apache.syncope.core.rest.data.RoleDataBinder;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.sync.AbstractSyncActions;\n import org.apache.syncope.core.sync.SyncResult;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n-public abstract class AbstractSyncopeResultHandler {\n+public abstract class AbstractSyncopeResultHandler<T extends AbstractSyncTask, A extends AbstractSyncActions<?>> {\n \n     /**\n      * Logger.\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractSyncopeResultHandler.class);\n \n+    /**\n+     * User data binder.\n+     */\n+    @Autowired\n+    protected UserDataBinder userDataBinder;\n+\n+    /**\n+     * Role data binder.\n+     */\n+    @Autowired\n+    protected RoleDataBinder roleDataBinder;\n+\n+    /**\n+     * ConnectorObject util.\n+     */\n+    @Autowired\n+    protected ConnObjectUtil connObjectUtil;\n+\n+    /**\n+     * Notification Manager.\n+     */\n+    @Autowired\n+    protected NotificationManager notificationManager;\n+\n+    /**\n+     * Audit Manager.\n+     */\n+    @Autowired\n+    protected AuditManager auditManager;\n+\n     /**\n      * Syncing connector.\n      */\n@@ -43,6 +81,26 @@ public abstract class AbstractSyncopeResultHandler {\n \n     protected ConflictResolutionAction resAct;\n \n+    protected A actions;\n+\n+    protected T syncTask;\n+\n+    public A getActions() {\n+        return actions;\n+    }\n+\n+    public void setActions(A actions) {\n+        this.actions = actions;\n+    }\n+\n+    public T getSyncTask() {\n+        return syncTask;\n+    }\n+\n+    public void setSyncTask(T syncTask) {\n+        this.syncTask = syncTask;\n+    }\n+\n     public Connector getConnector() {\n         return connector;\n     }"},{"sha":"f71e8d984a534c6a87e58dca63d3016244a480f4","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSyncopeSyncResultHandler.java","status":"removed","additions":0,"deletions":53,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a01f0bae81494750cc3f9914abc58301d7effffe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a01f0bae81494750cc3f9914abc58301d7effffe/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeSyncResultHandler.java?ref=a01f0bae81494750cc3f9914abc58301d7effffe","patch":"@@ -1,53 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.sync.impl;\n-\n-import org.apache.syncope.core.persistence.beans.SyncTask;\n-import org.apache.syncope.core.sync.SyncActions;\n-import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n-\n-/**\n- * Abstract class introduced to facilitate sync handler extension/override.\n- */\n-public abstract class AbstractSyncopeSyncResultHandler extends AbstractSyncopeResultHandler\n-        implements SyncResultsHandler {\n-\n-    /**\n-     * SyncJob actions.\n-     */\n-    protected SyncActions actions;\n-\n-    protected SyncTask syncTask;\n-\n-    public SyncActions getActions() {\n-        return actions;\n-    }\n-\n-    public void setActions(final SyncActions actions) {\n-        this.actions = actions;\n-    }\n-\n-    public SyncTask getSyncTask() {\n-        return syncTask;\n-    }\n-\n-    public void setSyncTask(final SyncTask syncTask) {\n-        this.syncTask = syncTask;\n-    }\n-}"},{"sha":"7350a3dd83ca1aaa1ae0d5ff4387b9bea55d0c25","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/LDAPMembershipSyncActions.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -121,8 +121,10 @@ protected String getGroupMembershipAttrName(final Connector connector) {\n     @Transactional(readOnly = true)\n     @Override\n     public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final AbstractSyncopeSyncResultHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n-            throws JobExecutionException {\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject,\n+            final K subjectMod) throws JobExecutionException {\n \n         if (subject instanceof RoleTO) {\n             // search for all users assigned to given role\n@@ -283,7 +285,7 @@ protected void synchronizeMemberships(final SyncopeSyncResultHandler handler, fi\n      */\n     @Override\n     public <T extends AbstractAttributableTO> void after(\n-            final AbstractSyncopeSyncResultHandler handler,\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n             final SyncDelta delta,\n             final T subject,\n             final SyncResult result) throws JobExecutionException {"},{"sha":"e0b3c5c1937fecf1511a51d602e2e95247f2e87a","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/PushJob.java","status":"modified","additions":46,"deletions":33,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FPushJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FPushJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FPushJob.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -19,19 +19,27 @@\n package org.apache.syncope.core.sync.impl;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.SyncPolicySpec;\n import org.apache.syncope.core.persistence.beans.PushTask;\n import org.apache.syncope.core.persistence.beans.role.RMapping;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.beans.user.UMapping;\n+import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.propagation.Connector;\n+import org.apache.syncope.core.rest.data.SearchCondConverter;\n import org.apache.syncope.core.sync.PushActions;\n import org.apache.syncope.core.sync.SyncResult;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -44,14 +52,20 @@\n  * @see AbstractSyncJob\n  * @see PushTask\n  */\n-public class PushJob extends AbstractSyncJob<AbstractSyncopeResultHandler, PushActions> {\n+public class PushJob extends AbstractSyncJob<PushTask, PushActions> {\n \n     /**\n      * User DAO.\n      */\n     @Autowired\n     private UserDAO userDAO;\n \n+    /**\n+     * Search DAO.\n+     */\n+    @Autowired\n+    private AttributableSearchDAO searchDAO;\n+\n     /**\n      * Role DAO.\n      */\n@@ -61,42 +75,19 @@ public class PushJob extends AbstractSyncJob<AbstractSyncopeResultHandler, PushA\n     private final int PAGE_SIZE = 1000;\n \n     @Override\n-    protected String executeWithSecurityContext(final boolean dryRun) throws JobExecutionException {\n-        if (!(task instanceof PushTask)) {\n-            throw new JobExecutionException(\"Task \" + taskId + \" isn't a PushTask\");\n-        }\n-\n-        final PushTask pushTask = (PushTask) this.task;\n-\n-        Connector connector;\n-        try {\n-            connector = connFactory.getConnector(pushTask.getResource());\n-        } catch (Exception e) {\n-            final String msg = String.format(\"Connector instance bean for resource %s and connInstance %s not found\",\n-                    pushTask.getResource(), pushTask.getResource().getConnector());\n-\n-            throw new JobExecutionException(msg, e);\n-        }\n-\n-        UMapping uMapping = pushTask.getResource().getUmapping();\n-        if (uMapping != null && uMapping.getAccountIdItem() == null) {\n-            throw new JobExecutionException(\"Invalid user account id mapping for resource \" + pushTask.getResource());\n-        }\n-        RMapping rMapping = pushTask.getResource().getRmapping();\n-        if (rMapping != null && rMapping.getAccountIdItem() == null) {\n-            throw new JobExecutionException(\"Invalid role account id mapping for resource \" + pushTask.getResource());\n-        }\n-        if (uMapping == null && rMapping == null) {\n-            return \"No mapping configured for both users and roles: aborting...\";\n-        }\n-\n+    protected String executeWithSecurityContext(\n+            final PushTask pushTask,\n+            final SyncPolicySpec syncPolicySpec,\n+            final Connector connector,\n+            final UMapping uMapping,\n+            final RMapping rMapping,\n+            final boolean dryRun) throws JobExecutionException {\n         LOG.debug(\"Execute synchronization (push) with resource {}\", pushTask.getResource());\n \n         final List<SyncResult> results = new ArrayList<SyncResult>();\n \n         final Set<Long> authorizations = EntitlementUtil.getRoleIds(entitlementDAO.findAll());\n \n-        // Prepare handler for SyncDelta objects\n         final SyncopePushResultHandler handler =\n                 (SyncopePushResultHandler) ((DefaultListableBeanFactory) ApplicationContextProvider.\n                 getApplicationContext().getBeanFactory()).createBean(\n@@ -112,7 +103,7 @@ protected String executeWithSecurityContext(final boolean dryRun) throws JobExec\n         if (uMapping != null) {\n             final int count = userDAO.count(authorizations);\n             for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n-                final List<SyncopeUser> localUsers = userDAO.findAll(authorizations, page, PAGE_SIZE);\n+                final List<SyncopeUser> localUsers = getUsers(authorizations, pushTask, page);\n \n                 for (SyncopeUser localUser : localUsers) {\n                     try {\n@@ -129,7 +120,7 @@ protected String executeWithSecurityContext(final boolean dryRun) throws JobExec\n         }\n \n         if (rMapping != null) {\n-            final List<SyncopeRole> localRoles = roleDAO.findAll();\n+            final List<SyncopeRole> localRoles = getRoles(authorizations, pushTask, PAGE_SIZE);\n \n             for (SyncopeRole localRole : localRoles) {\n                 try {\n@@ -156,4 +147,26 @@ protected String executeWithSecurityContext(final boolean dryRun) throws JobExec\n     protected boolean continueOnError() {\n         return true;\n     }\n+\n+    private List<SyncopeUser> getUsers(final Set<Long> authorizations, final PushTask pushTask, final int page) {\n+        final String filter = pushTask.getUserFilter();\n+        if (StringUtils.isBlank(filter)) {\n+            return userDAO.findAll(authorizations, page, PAGE_SIZE);\n+        } else {\n+            return searchDAO.<SyncopeUser>search(\n+                    authorizations, SearchCondConverter.convert(filter),\n+                    Collections.<OrderByClause>emptyList(), AttributableUtil.getInstance(AttributableType.USER));\n+        }\n+    }\n+\n+    private List<SyncopeRole> getRoles(final Set<Long> authorizations, final PushTask pushTask, final int page) {\n+        final String filter = pushTask.getRoleFilter();\n+        if (StringUtils.isBlank(filter)) {\n+            return roleDAO.findAll();\n+        } else {\n+            return searchDAO.<SyncopeRole>search(\n+                    authorizations, SearchCondConverter.convert(filter),\n+                    Collections.<OrderByClause>emptyList(), AttributableUtil.getInstance(AttributableType.ROLE));\n+        }\n+    }\n }"},{"sha":"709336d2b45827b7e352a7f8800b95387a4aff46","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncJob.java","status":"modified","additions":9,"deletions":37,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncJob.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -24,10 +24,8 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.mod.ReferenceMod;\n import org.apache.syncope.common.mod.RoleMod;\n-import org.apache.syncope.common.types.ConflictResolutionAction;\n import org.apache.syncope.common.types.SyncPolicySpec;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.SyncPolicy;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.role.RMapping;\n import org.apache.syncope.core.persistence.beans.user.UMapping;\n@@ -51,7 +49,7 @@\n  * @see AbstractSyncJob\n  * @see SyncTask\n  */\n-public class SyncJob extends AbstractSyncJob<AbstractSyncopeSyncResultHandler, SyncActions> {\n+public class SyncJob extends AbstractSyncJob<SyncTask, SyncActions> {\n \n     /**\n      * Role workflow adapter.\n@@ -86,43 +84,17 @@ protected void setRoleOwners(final SyncopeSyncResultHandler handler)\n     }\n \n     @Override\n-    protected String executeWithSecurityContext(final boolean dryRun) throws JobExecutionException {\n-        if (!(task instanceof SyncTask)) {\n-            throw new JobExecutionException(\"Task \" + taskId + \" isn't a SyncTask\");\n-        }\n-        final SyncTask syncTask = (SyncTask) this.task;\n-\n-        Connector connector;\n-        try {\n-            connector = connFactory.getConnector(syncTask.getResource());\n-        } catch (Exception e) {\n-            final String msg = String.format(\"Connector instance bean for resource %s and connInstance %s not found\",\n-                    syncTask.getResource(), syncTask.getResource().getConnector());\n-\n-            throw new JobExecutionException(msg, e);\n-        }\n-\n-        UMapping uMapping = syncTask.getResource().getUmapping();\n-        if (uMapping != null && uMapping.getAccountIdItem() == null) {\n-            throw new JobExecutionException(\"Invalid user account id mapping for resource \" + syncTask.getResource());\n-        }\n-        RMapping rMapping = syncTask.getResource().getRmapping();\n-        if (rMapping != null && rMapping.getAccountIdItem() == null) {\n-            throw new JobExecutionException(\"Invalid role account id mapping for resource \" + syncTask.getResource());\n-        }\n-        if (uMapping == null && rMapping == null) {\n-            return \"No mapping configured for both users and roles: aborting...\";\n-        }\n-\n+    protected String executeWithSecurityContext(\n+            final SyncTask syncTask,\n+            final SyncPolicySpec syncPolicySpec,\n+            final Connector connector,\n+            final UMapping uMapping,\n+            final RMapping rMapping,\n+            final boolean dryRun) throws JobExecutionException {\n         LOG.debug(\"Execute synchronization with token {}\", syncTask.getResource().getUsyncToken());\n \n         final List<SyncResult> results = new ArrayList<SyncResult>();\n \n-        final SyncPolicy syncPolicy = syncTask.getResource().getSyncPolicy();\n-        final ConflictResolutionAction resAct = syncPolicy == null || syncPolicy.getSpecification() == null\n-                ? ConflictResolutionAction.IGNORE\n-                : ((SyncPolicySpec) syncPolicy.getSpecification()).getConflictResolutionAction();\n-\n         // Prepare handler for SyncDelta objects\n         final SyncopeSyncResultHandler handler =\n                 (SyncopeSyncResultHandler) ((DefaultListableBeanFactory) ApplicationContextProvider.\n@@ -131,7 +103,7 @@ protected String executeWithSecurityContext(final boolean dryRun) throws JobExec\n         handler.setConnector(connector);\n         handler.setActions(actions);\n         handler.setDryRun(dryRun);\n-        handler.setResAct(resAct);\n+        handler.setResAct(syncPolicySpec.getConflictResolutionAction());\n         handler.setResults(results);\n         handler.setSyncTask(syncTask);\n "},{"sha":"91843fe593807233f2281ef596d838fc9a849a0d","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopePushResultHandler.java","status":"modified","additions":4,"deletions":63,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopePushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopePushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopePushResultHandler.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -28,18 +28,13 @@\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.ResourceOperation;\n-import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.connid.ConnObjectUtil;\n-import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.PushTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.propagation.TimeoutException;\n import org.apache.syncope.core.propagation.impl.AbstractPropagationTaskExecutor;\n-import org.apache.syncope.core.rest.data.RoleDataBinder;\n-import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.sync.PushActions;\n import org.apache.syncope.core.sync.SyncResult;\n import org.apache.syncope.core.util.AttributableUtil;\n@@ -49,66 +44,12 @@\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.quartz.JobExecutionException;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-public class SyncopePushResultHandler extends AbstractSyncopeResultHandler {\n-\n-    /**\n-     * User data binder.\n-     */\n-    @Autowired\n-    protected UserDataBinder userDataBinder;\n-\n-    /**\n-     * Role data binder.\n-     */\n-    @Autowired\n-    protected RoleDataBinder roleDataBinder;\n-\n-    /**\n-     * ConnectorObject util.\n-     */\n-    @Autowired\n-    protected ConnObjectUtil connObjectUtil;\n-\n-    /**\n-     * Notification Manager.\n-     */\n-    @Autowired\n-    protected NotificationManager notificationManager;\n-\n-    /**\n-     * Audit Manager.\n-     */\n-    @Autowired\n-    protected AuditManager auditManager;\n+public class SyncopePushResultHandler extends AbstractSyncopeResultHandler<PushTask, PushActions> {\n \n     protected Map<Long, String> roleOwnerMap = new HashMap<Long, String>();\n \n-    /**\n-     * SyncJob actions.\n-     */\n-    protected PushActions actions;\n-\n-    protected PushTask syncTask;\n-\n-    public PushActions getActions() {\n-        return actions;\n-    }\n-\n-    public void setActions(final PushActions actions) {\n-        this.actions = actions;\n-    }\n-\n-    public PushTask getSyncTask() {\n-        return syncTask;\n-    }\n-\n-    public void setSyncTask(final PushTask syncTask) {\n-        this.syncTask = syncTask;\n-    }\n-\n     public Map<Long, String> getRoleOwnerMap() {\n         return roleOwnerMap;\n     }\n@@ -187,10 +128,10 @@ protected final void doHandle(final AbstractAttributable attributable)\n \n             if (beforeObj == null) {\n                 result.setOperation(ResourceOperation.CREATE);\n-                actions.beforeCreate(this, toBeHandled, values);\n+                actions.beforeCreate(this, values, toBeHandled);\n             } else {\n                 result.setOperation(ResourceOperation.UPDATE);\n-                actions.beforeUpdate(this, toBeHandled, values);\n+                actions.beforeUpdate(this, values, toBeHandled);\n             }\n \n             AbstractPropagationTaskExecutor.createOrUpdate(\n@@ -216,7 +157,7 @@ protected final void doHandle(final AbstractAttributable attributable)\n             throw new JobExecutionException(e);\n         } finally {\n \n-            actions.after(this, toBeHandled, values, result);\n+            actions.after(this, values, toBeHandled, result);\n \n             notificationManager.createTasks(\n                     AuditElements.EventCategoryType.PUSH,"},{"sha":"f6b247bd6edffad08a7abe799226853fc4cd73b0","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":5,"deletions":36,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -42,15 +42,13 @@\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.SyncPolicySpec;\n-import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.connid.ConnObjectUtil;\n-import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractNormalSchema;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n+import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n@@ -68,8 +66,7 @@\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.AttributableTransformer;\n-import org.apache.syncope.core.rest.data.RoleDataBinder;\n-import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.sync.SyncActions;\n import org.apache.syncope.core.sync.SyncResult;\n import org.apache.syncope.core.sync.SyncCorrelationRule;\n import org.apache.syncope.core.util.AttributableUtil;\n@@ -85,11 +82,13 @@\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n+import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.identityconnectors.framework.common.objects.filter.EqualsFilter;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public class SyncopeSyncResultHandler extends AbstractSyncopeSyncResultHandler {\n+public class SyncopeSyncResultHandler extends AbstractSyncopeResultHandler<SyncTask, SyncActions>\n+        implements SyncResultsHandler {\n \n     /**\n      * Policy DAO.\n@@ -127,12 +126,6 @@ public class SyncopeSyncResultHandler extends AbstractSyncopeSyncResultHandler {\n     @Autowired\n     protected AttributableSearchDAO searchDAO;\n \n-    /**\n-     * ConnectorObject util.\n-     */\n-    @Autowired\n-    protected ConnObjectUtil connObjectUtil;\n-\n     /**\n      * User workflow adapter.\n      */\n@@ -157,30 +150,6 @@ public class SyncopeSyncResultHandler extends AbstractSyncopeSyncResultHandler {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    /**\n-     * User data binder.\n-     */\n-    @Autowired\n-    protected UserDataBinder userDataBinder;\n-\n-    /**\n-     * Role data binder.\n-     */\n-    @Autowired\n-    protected RoleDataBinder roleDataBinder;\n-\n-    /**\n-     * Notification Manager.\n-     */\n-    @Autowired\n-    protected NotificationManager notificationManager;\n-\n-    /**\n-     * Audit Manager.\n-     */\n-    @Autowired\n-    protected AuditManager auditManager;\n-\n     @Autowired\n     protected AttributableTransformer attrTransformer;\n "},{"sha":"67cddb1093f964a5ea7febfa3e0ec7689625bb98","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/TaskTest.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -31,7 +31,9 @@\n import org.apache.syncope.common.types.PropagationMode;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.PushTask;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -62,14 +64,11 @@ public void findWithoutExecs() {\n \n     @Test\n     public void findAll() {\n-        List<PropagationTask> plist = taskDAO.findAll(PropagationTask.class);\n-        assertEquals(4, plist.size());\n-\n-        List<SchedTask> sclist = taskDAO.findAll(SchedTask.class);\n-        assertEquals(1, sclist.size());\n-\n-        List<SyncTask> sylist = taskDAO.findAll(SyncTask.class);\n-        assertEquals(6, sylist.size());\n+        assertEquals(4, taskDAO.findAll(PropagationTask.class).size());\n+        assertEquals(1, taskDAO.findAll(NotificationTask.class).size());\n+        assertEquals(1, taskDAO.findAll(SchedTask.class).size());\n+        assertEquals(6, taskDAO.findAll(SyncTask.class).size());\n+        assertEquals(1, taskDAO.findAll(PushTask.class).size());\n     }\n \n     @Test"},{"sha":"68862cf271aa44102177ddbb57f75788af41aa73","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/TaskTest.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.PushTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -151,6 +152,29 @@ public void addSyncTaskExecution() {\n         assertEquals(executionNumber + 1, task.getExecs().size());\n     }\n \n+    @Test\n+    public void addPushTaskExecution() {\n+        PushTask task = taskDAO.find(13L);\n+        assertNotNull(task);\n+\n+        int executionNumber = task.getExecs().size();\n+\n+        TaskExec execution = new TaskExec();\n+        execution.setStatus(\"Text-free status\");\n+        execution.setTask(task);\n+        task.addExec(execution);\n+        execution.setMessage(\"A message\");\n+\n+        task = taskDAO.save(task);\n+\n+        taskDAO.flush();\n+\n+        task = taskDAO.find(13L);\n+        assertNotNull(task);\n+\n+        assertEquals(executionNumber + 1, task.getExecs().size());\n+    }\n+\n     @Test\n     public void deleteTask() {\n         taskDAO.delete(1L);"},{"sha":"55bd236e4c948155c47a8a5566fcb93ca2a68b58","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":87,"deletions":10,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -55,6 +55,7 @@\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.common.to.PushTaskTO;\n+import org.apache.syncope.common.wrap.PushActionClass;\n import org.apache.syncope.core.sync.TestSyncActions;\n import org.apache.syncope.core.sync.TestSyncRule;\n import org.apache.syncope.core.sync.impl.SyncJob;\n@@ -102,7 +103,14 @@ public void getSyncActionsClasses() {\n     }\n \n     @Test\n-    public void create() {\n+    public void getPushActionsClasses() {\n+        List<PushActionClass> actions = taskService.getPushActionsClasses();\n+        assertNotNull(actions);\n+        assertFalse(actions.isEmpty());\n+    }\n+\n+    @Test\n+    public void createSyncTask() {\n         SyncTaskTO task = new SyncTaskTO();\n         task.setName(\"Test create Sync\");\n         task.setResource(RESOURCE_NAME_WS2);\n@@ -131,12 +139,34 @@ public void create() {\n         assertEquals(roleTemplate, task.getRoleTemplate());\n     }\n \n+    @Test\n+    public void createPushTask() {\n+        PushTaskTO task = new PushTaskTO();\n+        task.setName(\"Test create Push\");\n+        task.setResource(RESOURCE_NAME_WS2);\n+        task.setUserFilter(\n+                SyncopeClient.getUserSearchConditionBuilder().hasNotResources(RESOURCE_NAME_TESTDB2).query());\n+        task.setRoleFilter(\n+                SyncopeClient.getRoleSearchConditionBuilder().isNotNull(\"cool\").query());\n+\n+        final Response response = taskService.create(task);\n+        final PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n+        assertNotNull(actual);\n+\n+        task = taskService.read(actual.getId());\n+        assertNotNull(task);\n+        assertEquals(task.getId(), actual.getId());\n+        assertEquals(task.getJobClassName(), actual.getJobClassName());\n+        assertEquals(task.getUserFilter(), actual.getUserFilter());\n+        assertEquals(task.getRoleFilter(), actual.getRoleFilter());\n+    }\n+\n     @Test\n     public void update() {\n         SchedTaskTO task = taskService.read(SCHED_TASK_ID);\n         assertNotNull(task);\n \n-        SchedTaskTO taskMod = new SchedTaskTO();\n+        final SchedTaskTO taskMod = new SchedTaskTO();\n         taskMod.setId(5);\n         taskMod.setCronExpression(null);\n \n@@ -148,13 +178,35 @@ public void update() {\n     }\n \n     @Test\n-    public void list() {\n-        PagedResult<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n+    public void listSchedTask() {\n+        final PagedResult<SchedTaskTO> tasks = taskService.list(TaskType.SCHEDULED);\n+        assertFalse(tasks.getResult().isEmpty());\n+        for (AbstractTaskTO task : tasks.getResult()) {\n+            if (!(task instanceof SchedTaskTO) || task instanceof SyncTaskTO || task instanceof PushTaskTO) {\n+                fail();\n+            }\n+        }\n+    }\n \n-        assertNotNull(tasks);\n+    @Test\n+    public void listSyncTask() {\n+        final PagedResult<SyncTaskTO> tasks = taskService.list(TaskType.SYNCHRONIZATION);\n         assertFalse(tasks.getResult().isEmpty());\n         for (AbstractTaskTO task : tasks.getResult()) {\n-            assertNotNull(task);\n+            if (!(task instanceof SyncTaskTO)) {\n+                fail();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void list() {\n+        final PagedResult<PushTaskTO> tasks = taskService.list(TaskType.PUSH);\n+        assertFalse(tasks.getResult().isEmpty());\n+        for (AbstractTaskTO task : tasks.getResult()) {\n+            if (!(task instanceof PushTaskTO)) {\n+                fail();\n+            }\n         }\n     }\n \n@@ -917,14 +969,39 @@ public void pushUsers() {\n         // Read sync task\n         PushTaskTO task = taskService.<PushTaskTO>read(13L);\n         assertNotNull(task);\n+        \n+        assertEquals(\"Vivaldi\", userService.read(3L).getAttrMap().get(\"surname\").getValues().get(0));\n+        \n+        task.setUserFilter(SyncopeClient.getUserSearchConditionBuilder().is(\"surname\").equalTo(\"Vivaldi\").query());\n+        taskService.update(13L, task);\n+        assertEquals(task.getUserFilter(), taskService.<PushTaskTO>read(13L).getUserFilter());\n \n         execSyncTask(task.getId(), 50, false);\n \n         final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID<>'vivaldi'\").size());\n+        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='bellini'\").size());\n+        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='rossini'\").size());\n+        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='puccini'\").size());\n+        \n+        assertEquals(\"vivaldi\",\n+                jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"vivaldi\"));\n+        \n+        jdbcTemplate.execute(\"DELETE FROM test2 WHERE ID='vivaldi'\");\n+\n+        task.setUserFilter(null);\n+        taskService.update(13L, task);\n+        assertNull(taskService.<PushTaskTO>read(13L).getUserFilter());\n+\n+        execSyncTask(task.getId(), 50, false);\n \n-        assertEquals(\"vivaldi\", jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"vivaldi\"));\n-        assertEquals(\"bellini\", jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"bellini\"));\n-        assertEquals(\"rossini\", jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"rossini\"));\n-        assertEquals(\"puccini\", jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"puccini\"));\n+        assertEquals(\"vivaldi\",\n+                jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"vivaldi\"));\n+        assertEquals(\"bellini\",\n+                jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"bellini\"));\n+        assertEquals(\"rossini\",\n+                jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"rossini\"));\n+        assertEquals(\"puccini\",\n+                jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"puccini\"));\n     }\n }"},{"sha":"2d0d2854416dab747e5551d72f2253733f75edce","filename":"core/src/test/java/org/apache/syncope/core/sync/TestSyncActions.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d3c0eaeed17f1ee6410f98414eb3adb01b480fa3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncActions.java?ref=d3c0eaeed17f1ee6410f98414eb3adb01b480fa3","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.AttributeTO;\n-import org.apache.syncope.core.sync.impl.AbstractSyncopeSyncResultHandler;\n+import org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n \n@@ -31,8 +31,10 @@ public class TestSyncActions extends DefaultSyncActions {\n     private int counter = 0;\n \n     @Override\n-    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final AbstractSyncopeSyncResultHandler handler,\n-            final SyncDelta delta, final T subject) throws JobExecutionException {\n+    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException {\n \n         AttributeTO attrTO = null;\n         for (int i = 0; i < subject.getAttrs().size(); i++) {\n@@ -53,8 +55,10 @@ public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final AbstractS\n \n     @Override\n     public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final AbstractSyncopeSyncResultHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n-            throws JobExecutionException {\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject,\n+            final K subjectMod) throws JobExecutionException {\n \n         subjectMod.getAttrsToRemove().add(\"fullname\");\n "}]}