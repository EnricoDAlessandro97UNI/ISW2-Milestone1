{"sha":"a8a1a9f6d6ccbb7b7d88eb5a6fce71b26b0cef3f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE4YTFhOWY2ZDZjY2JiN2I3ZDg4ZWI1YTZmY2U3MWIyNmIwY2VmM2Y=","commit":{"author":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-16T12:59:18Z"},"committer":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-16T12:59:18Z"},"message":"[SYNCOPE-268] Make rest integration tests re-runnable\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1433920 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ef491e7405aa2fe2458d478c7309c872acd2e9a0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ef491e7405aa2fe2458d478c7309c872acd2e9a0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a8a1a9f6d6ccbb7b7d88eb5a6fce71b26b0cef3f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a8a1a9f6d6ccbb7b7d88eb5a6fce71b26b0cef3f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a8a1a9f6d6ccbb7b7d88eb5a6fce71b26b0cef3f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a8a1a9f6d6ccbb7b7d88eb5a6fce71b26b0cef3f/comments","author":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"committer":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"parents":[{"sha":"d1225723406d128353a42fd9464eee8d29122f1f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d1225723406d128353a42fd9464eee8d29122f1f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d1225723406d128353a42fd9464eee8d29122f1f"}],"stats":{"total":348,"additions":188,"deletions":160},"files":[{"sha":"1bb85f909b30a5953fd4e6d5fa9916b428b9bb85","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":188,"deletions":160,"changes":348,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8a1a9f6d6ccbb7b7d88eb5a6fce71b26b0cef3f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8a1a9f6d6ccbb7b7d88eb5a6fce71b26b0cef3f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=a8a1a9f6d6ccbb7b7d88eb5a6fce71b26b0cef3f","patch":"@@ -18,13 +18,13 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import java.util.Collections;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n+import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n \n@@ -159,7 +159,7 @@ public void paginatedList() {\n             assertNotNull(task);\n         }\n \n-        tasks = taskService.list(TaskType.PROPAGATION, 100, 2);\n+        tasks = taskService.list(TaskType.PROPAGATION, 1000, 2);\n \n         assertNotNull(tasks);\n         assertTrue(tasks.isEmpty());\n@@ -212,59 +212,64 @@ public void deal() {\n         }\n     }\n \n-    @Test\n-    public void sync() {\n-        //-----------------------------\n-        // Create a new user ... it should be updated applying sync policy\n-        //-----------------------------\n-        UserTO inUserTO = new UserTO();\n-        inUserTO.setPassword(\"password123\");\n-        String userName = \"test9\";\n-        inUserTO.setUsername(userName);\n-        inUserTO.addAttribute(attributeTO(\"firstname\", \"nome9\"));\n-        inUserTO.addAttribute(attributeTO(\"surname\", \"cognome\"));\n-        inUserTO.addAttribute(attributeTO(\"type\", \"a type\"));\n-        inUserTO.addAttribute(attributeTO(\"fullname\", \"nome cognome\"));\n-        inUserTO.addAttribute(attributeTO(\"userId\", \"user5@syncope.apache.org\"));\n-        inUserTO.addAttribute(attributeTO(\"email\", \"user5@syncope.apache.org\"));\n-        inUserTO.addDerivedAttribute(attributeTO(\"csvuserid\", null));\n-\n-        try {\n-        \tinUserTO = userService.create(inUserTO);\n-            assertNotNull(inUserTO);\n-            //-----------------------------\n-\n-            int usersPre = userService.count();\n-            assertNotNull(usersPre);\n-\n-            // Update sync task\n-            SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, SYNC_TASK_ID);\n-            assertNotNull(task);\n-\n-            //  add custom SyncJob actions\n-            task.setActionsClassName(TestSyncActions.class.getName());\n+\t@Test\n+\tpublic void sync() {\n+\t\ttry {\n+\t\t\t// -----------------------------\n+\t\t\t// Create a new user ... it should be updated applying sync policy\n+\t\t\t// -----------------------------\n+\t\t\tUserTO inUserTO = new UserTO();\n+\t\t\tinUserTO.setPassword(\"password123\");\n+\t\t\tString userName = \"test9\";\n+\t\t\tinUserTO.setUsername(userName);\n+\t\t\tinUserTO.addAttribute(attributeTO(\"firstname\", \"nome9\"));\n+\t\t\tinUserTO.addAttribute(attributeTO(\"surname\", \"cognome\"));\n+\t\t\tinUserTO.addAttribute(attributeTO(\"type\", \"a type\"));\n+\t\t\tinUserTO.addAttribute(attributeTO(\"fullname\", \"nome cognome\"));\n+\t\t\tinUserTO.addAttribute(attributeTO(\"userId\",\n+\t\t\t\t\t\"user5@syncope.apache.org\"));\n+\t\t\tinUserTO.addAttribute(attributeTO(\"email\",\n+\t\t\t\t\t\"user5@syncope.apache.org\"));\n+\t\t\tinUserTO.addDerivedAttribute(attributeTO(\"csvuserid\", null));\n+\n+\t\t\tinUserTO = userService.create(inUserTO);\n+\t\t\tassertNotNull(inUserTO);\n+\t\t\t// -----------------------------\n+\n+\t\t\tint usersPre = userService.count();\n+\t\t\tassertNotNull(usersPre);\n+\n+\t\t\t// Update sync task\n+\t\t\tSyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION,\n+\t\t\t\t\tSYNC_TASK_ID);\n+\t\t\tassertNotNull(task);\n+\n+\t\t\t// add custom SyncJob actions\n+\t\t\ttask.setActionsClassName(TestSyncActions.class.getName());\n+\n+\t\t\t// add user template\n+\t\t\tUserTO template = new UserTO();\n+\t\t\ttemplate.addAttribute(attributeTO(\"type\",\n+\t\t\t\t\t\"email == 'test8@syncope.apache.org'? 'TYPE_8': 'TYPE_OTHER'\"));\n+\t\t\ttemplate.addDerivedAttribute(attributeTO(\"cn\", null));\n+\t\t\ttemplate.addResource(\"resource-testdb\");\n+\n+\t\t\tMembershipTO membershipTO = new MembershipTO();\n+\t\t\tmembershipTO.setRoleId(8L);\n+\t\t\tmembershipTO.addAttribute(attributeTO(\"subscriptionDate\",\n+\t\t\t\t\t\"'2009-08-18T16:33:12.203+0200'\"));\n+\t\t\ttemplate.addMembership(membershipTO);\n+\n+\t\t\ttask.setUserTemplate(template);\n+\n+\t\t\tSyncTaskTO actual = taskService.update(task.getId(), task);\n+\t\t\tassertNotNull(actual);\n+\t\t\tassertEquals(task.getId(), actual.getId());\n+\t\t\tassertEquals(TestSyncActions.class.getName(),\n+\t\t\t\t\tactual.getActionsClassName());\n+\n+\t\t\texecSyncTask(SYNC_TASK_ID, 50, false);\n \n-            //  add user template\n-            UserTO template = new UserTO();\n-            template.addAttribute(attributeTO(\"type\",\n-                    \"email == 'test8@syncope.apache.org'? 'TYPE_8': 'TYPE_OTHER'\"));\n-            template.addDerivedAttribute(attributeTO(\"cn\", null));\n-            template.addResource(\"resource-testdb\");\n-\n-            MembershipTO membershipTO = new MembershipTO();\n-            membershipTO.setRoleId(8L);\n-            membershipTO.addAttribute(attributeTO(\"subscriptionDate\", \"'2009-08-18T16:33:12.203+0200'\"));\n-            template.addMembership(membershipTO);\n-\n-            task.setUserTemplate(template);\n-\n-            SyncTaskTO actual = taskService.update(task.getId(), task);\n-            assertNotNull(actual);\n-            assertEquals(task.getId(), actual.getId());\n-            assertEquals(TestSyncActions.class.getName(), actual.getActionsClassName());\n-\n-            execSyncTask(SYNC_TASK_ID, 50, false);\n-            \n \t\t\t// after execution of the sync task the user data should be synced\n \t\t\t// from\n \t\t\t// csv datasource and processed by user template\n@@ -281,40 +286,49 @@ public void sync() {\n \t\t\tassertTrue(Integer.valueOf(userTO.getAttributeMap().get(\"fullname\")\n \t\t\t\t\t.getValues().get(0)) <= 10);\n \n-            // check for user template\n-            userTO = userService.read(\"test7\");\n-            assertNotNull(userTO);\n-            assertEquals(\"TYPE_OTHER\", userTO.getAttributeMap().get(\"type\").getValues().get(0));\n-            assertEquals(2, userTO.getResources().size());\n-            assertTrue(userTO.getResources().contains(\"resource-testdb\"));\n-            assertTrue(userTO.getResources().contains(\"ws-target-resource-2\"));\n-            assertEquals(1, userTO.getMemberships().size());\n-            assertTrue(userTO.getMemberships().get(0).getAttributeMap().containsKey(\"subscriptionDate\"));\n-\n-            userTO = userService.read(\"test8\");\n-            assertNotNull(userTO);\n-            assertEquals(\"TYPE_8\", userTO.getAttributeMap().get(\"type\").getValues().get(0));\n+\t\t\t// check for user template\n+\t\t\tuserTO = userService.read(\"test7\");\n+\t\t\tassertNotNull(userTO);\n+\t\t\tassertEquals(\"TYPE_OTHER\", userTO.getAttributeMap().get(\"type\")\n+\t\t\t\t\t.getValues().get(0));\n+\t\t\tassertEquals(2, userTO.getResources().size());\n+\t\t\tassertTrue(userTO.getResources().contains(\"resource-testdb\"));\n+\t\t\tassertTrue(userTO.getResources().contains(\"ws-target-resource-2\"));\n+\t\t\tassertEquals(1, userTO.getMemberships().size());\n+\t\t\tassertTrue(userTO.getMemberships().get(0).getAttributeMap()\n+\t\t\t\t\t.containsKey(\"subscriptionDate\"));\n+\n+\t\t\tuserTO = userService.read(\"test8\");\n+\t\t\tassertNotNull(userTO);\n+\t\t\tassertEquals(\"TYPE_8\", userTO.getAttributeMap().get(\"type\")\n+\t\t\t\t\t.getValues().get(0));\n \n-            // check for sync results\n-            int usersPost = userService.count();\n-            assertNotNull(usersPost);\n-            assertEquals(usersPre + 9, usersPost);\n+\t\t\t// check for sync results\n+\t\t\tint usersPost = userService.count();\n+\t\t\tassertNotNull(usersPost);\n+\t\t\tassertEquals(usersPre + 9, usersPost);\n \n-            // Check for issue 215:\n-            // * expected disabled user test1\n-            // * expected enabled user test2\n+\t\t\t// Check for issue 215:\n+\t\t\t// * expected disabled user test1\n+\t\t\t// * expected enabled user test2\n \n-            userTO = userService.read(\"test1\");\n-            assertNotNull(userTO);\n-            assertEquals(\"suspended\", userTO.getStatus());\n+\t\t\tuserTO = userService.read(\"test1\");\n+\t\t\tassertNotNull(userTO);\n+\t\t\tassertEquals(\"suspended\", userTO.getStatus());\n \n-            userTO = userService.read(\"test3\");\n-            assertNotNull(userTO);\n-            assertEquals(\"active\", userTO.getStatus());\n-        } finally {\n-        \tuserService.delete(inUserTO.getId());\n-        }\n-    }\n+\t\t\tuserTO = userService.read(\"test3\");\n+\t\t\tassertNotNull(userTO);\n+\t\t\tassertEquals(\"active\", userTO.getStatus());\n+\n+\t\t} finally {\n+\t\t\t// remove initial and synchronized users to make test re-runnable\n+\t\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t\tString cUserName = \"test\" + i;\n+\t\t\t\tUserTO cUserTO = userService.read(cUserName);\n+\t\t\t\tuserService.delete(cUserTO.getId());\n+\t\t\t}\n+\t\t}\n+\t}\n \n     @Test\n     public void reconcileUsers() {\n@@ -413,7 +427,7 @@ public void dryRun() {\n \n     @Test\n     public void issueSYNCOPE81() {\n-        NotificationTaskTO taskTO = taskService.read(TaskType.NOTIFICATION, 8L);\n+    \tNotificationTaskTO taskTO = taskService.read(TaskType.NOTIFICATION, 8L);\n         assertNotNull(taskTO);\n \n         int executions = taskTO.getExecutions().size();\n@@ -478,7 +492,7 @@ public void issueSYNCOPE86() {\n         assertNotNull(notification);\n \n         // 2. create user\n-        UserTO userTO = UserTestITCase.getSampleTO(\"syncope86@syncope.apache.org\");\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope86@syncope.apache.org\");\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7);\n         userTO.addMembership(membershipTO);\n@@ -500,14 +514,20 @@ public void issueSYNCOPE86() {\n         assertNotNull(taskTO);\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n-        // 4. execute the generated NotificationTask\n-        TaskExecTO execution = taskService.execute(taskTO.getId(), false);\n-        assertNotNull(execution);\n+        try {\n+            // 4. execute the generated NotificationTask\n+            TaskExecTO execution = taskService.execute(taskTO.getId(), false);\n+            assertNotNull(execution);\n \n-        // 5. verify\n-        taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getId());\n-        assertNotNull(taskTO);\n-        assertEquals(1, taskTO.getExecutions().size());\n+            // 5. verify\n+            taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getId());\n+            assertNotNull(taskTO);\n+            assertEquals(1, taskTO.getExecutions().size());\n+        } finally {\n+        \t// Remove execution to make test re-runnable\n+        \tTaskExecTO taskExecTO = taskService.deleteExecution(taskTO.getExecutions().get(0).getId());\n+        \tassertNotNull(taskExecTO);\n+        }\n     }\n \n     @Test\n@@ -526,8 +546,8 @@ public void issueSYNCOPE68() {\n         userTO.addAttribute(attributeTO(\"userId\", \"testuser2@syncope.apache.org\"));\n         userTO.addAttribute(attributeTO(\"email\", \"testuser2@syncope.apache.org\"));\n \n-        userTO.addResource(\"ws-target-resource-nopropagation2\");\n-        userTO.addResource(\"ws-target-resource-nopropagation4\");\n+    \tuserTO.addResource(\"ws-target-resource-nopropagation2\");\n+    \tuserTO.addResource(\"ws-target-resource-nopropagation4\");\n \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n@@ -541,41 +561,46 @@ public void issueSYNCOPE68() {\n         assertEquals(3, userTO.getResources().size());\n         //-----------------------------\n \n-        //-----------------------------\n-        //  add user template\n-        //-----------------------------\n-        UserTO template = new UserTO();\n+        try {\n+            //-----------------------------\n+            //  add user template\n+            //-----------------------------\n+            UserTO template = new UserTO();\n \n-        membershipTO = new MembershipTO();\n-        membershipTO.setRoleId(10L);\n+            membershipTO = new MembershipTO();\n+            membershipTO.setRoleId(10L);\n \n-        template.addMembership(membershipTO);\n+            template.addMembership(membershipTO);\n \n-        template.addResource(\"ws-target-resource-nopropagation4\");\n-        //-----------------------------\n+            template.addResource(\"ws-target-resource-nopropagation4\");\n+            //-----------------------------\n \n-        // Update sync task\n-        SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, 9L);\n-        assertNotNull(task);\n+            // Update sync task\n+            SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, 9L);\n+            assertNotNull(task);\n \n-        task.setUserTemplate(template);\n+            task.setUserTemplate(template);\n \n-        SyncTaskTO actual = taskService.update(task.getId(), task);\n-        assertNotNull(actual);\n-        assertEquals(task.getId(), actual.getId());\n-        assertFalse(actual.getUserTemplate().getResources().isEmpty());\n-        assertFalse(actual.getUserTemplate().getMemberships().isEmpty());\n+            SyncTaskTO actual = taskService.update(task.getId(), task);\n+            assertNotNull(actual);\n+            assertEquals(task.getId(), actual.getId());\n+            assertFalse(actual.getUserTemplate().getResources().isEmpty());\n+            assertFalse(actual.getUserTemplate().getMemberships().isEmpty());\n \n-        TaskExecTO execution = execSyncTask(actual.getId(), 50, false);\n-        final String status = execution.getStatus();\n-        assertNotNull(status);\n-        assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n+            TaskExecTO execution = execSyncTask(actual.getId(), 50, false);\n+            final String status = execution.getStatus();\n+            assertNotNull(status);\n+            assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n-        userTO = userService.read(\"testuser2\");\n-        assertNotNull(userTO);\n-        assertEquals(\"testuser2@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n-        assertEquals(2, userTO.getMemberships().size());\n-        assertEquals(4, userTO.getResources().size());\n+            userTO = userService.read(\"testuser2\");\n+            assertNotNull(userTO);\n+            assertEquals(\"testuser2@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n+            assertEquals(2, userTO.getMemberships().size());\n+            assertEquals(4, userTO.getResources().size());\n+        } finally {\n+        \tUserTO dUserTO = userService.delete(userTO.getId());\n+        \tassertNotNull(dUserTO);\n+        }\n     }\n \n     @Test\n@@ -667,54 +692,57 @@ private TaskExecTO execSyncTask(final Long taskId, final int maxWaitSeconds,\n     @Test\n     public void issueSYNCOPE272() {\n \n-        //Create user with testdb resource\n-        UserTO userTO = new UserTO();\n-        userTO.setUsername(\"syncope272@syncope.apache.org\");\n-        userTO.setPassword(\"password\");\n-        userTO.addAttribute(attributeTO(\"firstname\", \"syncope272\"));\n-        userTO.addAttribute(attributeTO(\"surname\", \"syncope272\"));\n-        userTO.addAttribute(attributeTO(\"userId\", \"syncope272@syncope.apache.org\"));\n-        userTO.addAttribute(attributeTO(\"fullname\", \"syncope272\"));\n-        userTO.addResource(\"resource-testdb\");\n+    \ttry {\n+        \t//Create user with testdb resource\n+        \tUserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope272@syncope.apache.org\");\n+            userTO.addResource(\"resource-testdb\");\n \n-        userTO = userService.create(userTO);\n+            userTO = userService.create(userTO);\n \n-        assertNotNull(userTO);\n-        assertEquals(1, userTO.getPropagationTOs().size());\n-        assertTrue(userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n+            assertNotNull(userTO);\n+            assertEquals(1, userTO.getPropagationTOs().size());\n+            assertTrue(userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n \n-        // Update sync task\n-        SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, SYNC_TASK_ID);\n-        assertNotNull(task);\n+            // Update sync task\n+            SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, SYNC_TASK_ID);\n+            assertNotNull(task);\n \n-        // add user template\n+            // add user template\n \n-        AttributeTO newAttrTO = new AttributeTO();\n-        newAttrTO.setSchema(\"firstname\");\n-        newAttrTO.setValues(Collections.singletonList(\"\"));\n+            AttributeTO newAttrTO = new AttributeTO();\n+            newAttrTO.setSchema(\"firstname\");\n+            newAttrTO.setValues(Collections.singletonList(\"\"));\n \n-        UserTO template = new UserTO();\n-        template.addAttribute(newAttrTO);\n-        template.addAttribute(attributeTO(\"userId\", \"'test'\"));\n-        template.addAttribute(attributeTO(\"fullname\", \"'test'\"));\n-        template.addAttribute(attributeTO(\"surname\", \"'test'\"));\n-        template.addResource(\"resource-testdb\");\n+            UserTO template = new UserTO();\n+            template.addAttribute(newAttrTO);\n+            template.addAttribute(attributeTO(\"userId\", \"'test'\"));\n+            template.addAttribute(attributeTO(\"fullname\", \"'test'\"));\n+            template.addAttribute(attributeTO(\"surname\", \"'test'\"));\n+            template.addResource(\"resource-testdb\");\n \n-        task.setUserTemplate(template);\n+            task.setUserTemplate(template);\n \n-        SyncTaskTO actual = taskService.update(task.getId(), task);\n-        assertNotNull(actual);\n-        assertEquals(task.getId(), actual.getId());\n+            SyncTaskTO actual = taskService.update(task.getId(), task);\n+            assertNotNull(actual);\n+            assertEquals(task.getId(), actual.getId());\n \n-        TaskExecTO taskExecTO = execSyncTask(SYNC_TASK_ID, 50, false);\n-        assertNotNull(actual);\n-        assertEquals(task.getId(), actual.getId());\n+            TaskExecTO taskExecTO = execSyncTask(SYNC_TASK_ID, 50, false);\n+            assertNotNull(actual);\n+            assertEquals(task.getId(), actual.getId());\n \n-        assertNotNull(taskExecTO.getStatus());\n-        assertTrue(PropagationTaskExecStatus.valueOf(taskExecTO.getStatus()).isSuccessful());\n+            assertNotNull(taskExecTO.getStatus());\n+            assertTrue(PropagationTaskExecStatus.valueOf(taskExecTO.getStatus()).isSuccessful());\n \n-        userTO = userService.read(\"syncope272@syncope.apache.org\");\n-        assertNotNull(userTO);\n-        assertNotNull(userTO.getAttributeMap().get(\"firstname\").getValues().get(0));\n+            userTO = userService.read(userTO.getUsername());\n+            assertNotNull(userTO);\n+            assertNotNull(userTO.getAttributeMap().get(\"firstname\").getValues().get(0));\n+    \t} finally {\n+\t\t\t// remove initial and synchronized users to make test re-runnable\n+\t\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t\tString cUserName = \"test\" + i;\n+\t\t\t\tUserTO cUserTO = userService.read(cUserName);\n+\t\t\t\tuserService.delete(cUserTO.getId());\n+\t\t\t}\n+    \t}\n     }\n }\n\\ No newline at end of file"}]}