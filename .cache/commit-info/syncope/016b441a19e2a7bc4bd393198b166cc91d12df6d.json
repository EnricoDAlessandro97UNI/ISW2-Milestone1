{"sha":"016b441a19e2a7bc4bd393198b166cc91d12df6d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAxNmI0NDFhMTllMmE3YmM0YmQzOTMxOThiMTY2Y2M5MWQxMmRmNmQ=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-06-18T21:35:53Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-06-18T21:35:53Z"},"message":"[SYNCOPE-156] fix for build #263","tree":{"sha":"2e6d8cda5246afcc1321dff3b0449876fe0ee0d6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2e6d8cda5246afcc1321dff3b0449876fe0ee0d6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/016b441a19e2a7bc4bd393198b166cc91d12df6d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/016b441a19e2a7bc4bd393198b166cc91d12df6d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/016b441a19e2a7bc4bd393198b166cc91d12df6d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/016b441a19e2a7bc4bd393198b166cc91d12df6d/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"63b9416bca6f4190f2b87791bb488ebc5c2dd4cd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/63b9416bca6f4190f2b87791bb488ebc5c2dd4cd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/63b9416bca6f4190f2b87791bb488ebc5c2dd4cd"}],"stats":{"total":251,"additions":123,"deletions":128},"files":[{"sha":"40aefce762cbfa193e0fca033f579069cfa0183f","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnectorModal.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/016b441a19e2a7bc4bd393198b166cc91d12df6d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/016b441a19e2a7bc4bd393198b166cc91d12df6d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java?ref=016b441a19e2a7bc4bd393198b166cc91d12df6d","patch":"@@ -30,7 +30,6 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.BasePage;\n-import org.apache.syncope.client.console.panels.ModalContent;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.SpinnerFieldPanel;\n@@ -177,7 +176,7 @@ public ConnectorModal(\n         version.setChoices(bundleTO == null\n                 ? new ArrayList<String>()\n                 : new ArrayList<>(mapConnBundleTOs.get(connInstanceTO.getLocation()).\n-                        get(connInstanceTO.getBundleName()).keySet()));\n+                get(connInstanceTO.getBundleName()).keySet()));\n         version.setRequired(true);\n         version.addRequiredLabel();\n         version.setEnabled(connInstanceTO.getBundleName() != null);\n@@ -314,16 +313,16 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         connectorPropForm.add(check);\n \n         // form - third tab (capabilities)\n-        final IModel<List<ConnectorCapability>> capabilities\n-                = new LoadableDetachableModel<List<ConnectorCapability>>() {\n+        final IModel<List<ConnectorCapability>> capabilities =\n+                new LoadableDetachableModel<List<ConnectorCapability>>() {\n \n-                    private static final long serialVersionUID = 5275935387613157437L;\n+            private static final long serialVersionUID = 5275935387613157437L;\n \n-                    @Override\n-                    protected List<ConnectorCapability> load() {\n-                        return Arrays.asList(ConnectorCapability.values());\n-                    }\n-                };\n+            @Override\n+            protected List<ConnectorCapability> load() {\n+                return Arrays.asList(ConnectorCapability.values());\n+            }\n+        };\n         CheckBoxMultipleChoice<ConnectorCapability> capabilitiesPalette = new CheckBoxMultipleChoice<>(\n                 \"capabilitiesPalette\",\n                 new PropertyModel<List<ConnectorCapability>>(this, \"selectedCapabilities\"), capabilities);"},{"sha":"5ec882c3a4480e04f35c217a7b282db00915013e","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":113,"deletions":117,"changes":230,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/016b441a19e2a7bc4bd393198b166cc91d12df6d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/016b441a19e2a7bc4bd393198b166cc91d12df6d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=016b441a19e2a7bc4bd393198b166cc91d12df6d","patch":"@@ -79,41 +79,40 @@ public class Topology extends BasePage {\n \n     private static final int RESOURCE_MODAL_WIN_WIDTH = 1000;\n \n-    final ModalWindow modal;\n+    private final ModalWindow modal;\n \n-    private final LoadableDetachableModel<List<ResourceTO>> resModel\n-            = new LoadableDetachableModel<List<ResourceTO>>() {\n+    private final LoadableDetachableModel<List<ResourceTO>> resModel = new LoadableDetachableModel<List<ResourceTO>>() {\n \n-                private static final long serialVersionUID = 5275935387613157431L;\n+        private static final long serialVersionUID = 5275935387613157431L;\n \n-                @Override\n-                protected List<ResourceTO> load() {\n-                    final List<ResourceTO> result = resourceRestClient.getAll();\n-                    return result;\n-                }\n-            };\n-\n-    private final LoadableDetachableModel<Pair<List<ConnInstanceTO>, List<ConnInstanceTO>>> connModel\n-            = new LoadableDetachableModel<Pair<List<ConnInstanceTO>, List<ConnInstanceTO>>>() {\n-\n-                private static final long serialVersionUID = 5275935387613157432L;\n+        @Override\n+        protected List<ResourceTO> load() {\n+            final List<ResourceTO> result = resourceRestClient.getAll();\n+            return result;\n+        }\n+    };\n \n-                @Override\n-                protected Pair<List<ConnInstanceTO>, List<ConnInstanceTO>> load() {\n-                    final List<ConnInstanceTO> level1 = new ArrayList<>();\n-                    final List<ConnInstanceTO> level2 = new ArrayList<>();\n+    private final LoadableDetachableModel<Pair<List<ConnInstanceTO>, List<ConnInstanceTO>>> connModel =\n+            new LoadableDetachableModel<Pair<List<ConnInstanceTO>, List<ConnInstanceTO>>>() {\n \n-                    for (ConnInstanceTO conn : connectorRestClient.getAllConnectors()) {\n-                        if (conn.getLocation().startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n-                            level2.add(conn);\n-                        } else {\n-                            level1.add(conn);\n-                        }\n-                    }\n+        private static final long serialVersionUID = 5275935387613157432L;\n \n-                    return Pair.of(level1, level2);\n+        @Override\n+        protected Pair<List<ConnInstanceTO>, List<ConnInstanceTO>> load() {\n+            final List<ConnInstanceTO> level1 = new ArrayList<>();\n+            final List<ConnInstanceTO> level2 = new ArrayList<>();\n+\n+            for (ConnInstanceTO conn : connectorRestClient.getAllConnectors()) {\n+                if (conn.getLocation().startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n+                    level2.add(conn);\n+                } else {\n+                    level1.add(conn);\n                 }\n-            };\n+            }\n+\n+            return Pair.of(level1, level2);\n+        }\n+    };\n \n     private final LoadableDetachableModel<List<URI>> csModel = new LoadableDetachableModel<List<URI>>() {\n \n@@ -215,7 +214,6 @@ protected void onMessage(final WebSocketRequestHandler handler, final TextMessag\n             public void onClick(final AjaxRequestTarget target) {\n                 target.appendJavaScript(\"zoomIn($('#drawing')[0]);\");\n             }\n-\n         }, ActionLink.ActionType.ZOOM_IN, Entitlement.RESOURCE_LIST).add(new ActionLink() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -291,103 +289,101 @@ protected void populateItem(final ListItem<URI> item) {\n         // -----------------------------------------\n         // Add Connector Intances (first level)\n         // -----------------------------------------\n-        final ListView<ConnInstanceTO> conn1\n-                = new ListView<ConnInstanceTO>(\"conn1\", connModel.getObject().getLeft()) {\n+        final ListView<ConnInstanceTO> conn1 = new ListView<ConnInstanceTO>(\"conn1\", connModel.getObject().getLeft()) {\n \n-                    private static final long serialVersionUID = 6978621871488360381L;\n+            private static final long serialVersionUID = 6978621871488360381L;\n \n-                    private final int size = connModel.getObject().getLeft().size() + 1;\n+            private final int size = connModel.getObject().getLeft().size() + 1;\n \n-                    @Override\n-                    protected void populateItem(final ListItem<ConnInstanceTO> item) {\n-                        int kx = size >= 6 ? 800 : (130 * size);\n+            @Override\n+            protected void populateItem(final ListItem<ConnInstanceTO> item) {\n+                int kx = size >= 6 ? 800 : (130 * size);\n \n-                        int x = (int) Math.round(origX + kx * Math.cos(Math.PI * (item.getIndex() + 1) / size));\n-                        int y = (int) Math.round(origY + 100 * Math.sin(Math.PI * (item.getIndex() + 1) / size));\n+                int x = (int) Math.round(origX + kx * Math.cos(Math.PI * (item.getIndex() + 1) / size));\n+                int y = (int) Math.round(origY + 100 * Math.sin(Math.PI * (item.getIndex() + 1) / size));\n \n-                        final ConnInstanceTO conn = item.getModelObject();\n-                        final TopologyNode topologynode = new TopologyNode(\n-                                Long.valueOf(conn.getKey()), conn.getDisplayName(), TopologyNode.Kind.CONNECTOR);\n-                        topologynode.setConnectinDisplayName(conn.getBundleName());\n-                        topologynode.setX(x);\n-                        topologynode.setY(y);\n+                final ConnInstanceTO conn = item.getModelObject();\n+                final TopologyNode topologynode = new TopologyNode(\n+                        Long.valueOf(conn.getKey()), conn.getDisplayName(), TopologyNode.Kind.CONNECTOR);\n+                topologynode.setConnectinDisplayName(conn.getBundleName());\n+                topologynode.setX(x);\n+                topologynode.setY(y);\n \n-                        connectors.put(Long.class.cast(topologynode.getKey()), topologynode);\n+                connectors.put(Long.class.cast(topologynode.getKey()), topologynode);\n \n-                        item.add(topologyNodePanel(\"conn\", topologynode));\n+                item.add(topologyNodePanel(\"conn\", topologynode));\n \n-                        if (conn.getLocation().startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n-                            final Map<Serializable, TopologyNode> remoteConnections;\n+                if (conn.getLocation().startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n+                    final Map<Serializable, TopologyNode> remoteConnections;\n \n-                            if (connections.containsKey(conn.getLocation())) {\n-                                remoteConnections = connections.get(conn.getLocation());\n-                            } else {\n-                                remoteConnections = new HashMap<>();\n-                                connections.put(conn.getLocation(), remoteConnections);\n-                            }\n-                            remoteConnections.put(conn.getKey(), topologynode);\n-                        } else {\n-                            syncopeConnections.put(conn.getKey(), topologynode);\n-                        }\n+                    if (connections.containsKey(conn.getLocation())) {\n+                        remoteConnections = connections.get(conn.getLocation());\n+                    } else {\n+                        remoteConnections = new HashMap<>();\n+                        connections.put(conn.getLocation(), remoteConnections);\n                     }\n-                };\n+                    remoteConnections.put(conn.getKey(), topologynode);\n+                } else {\n+                    syncopeConnections.put(conn.getKey(), topologynode);\n+                }\n+            }\n+        };\n \n         conn1.setOutputMarkupId(true);\n         add(conn1);\n-            // -----------------------------------------\n+        // -----------------------------------------\n \n         // -----------------------------------------\n         // Add Connector Intances (second level)\n         // -----------------------------------------\n-        final ListView<ConnInstanceTO> conn2\n-                = new ListView<ConnInstanceTO>(\"conn2\", connModel.getObject().getRight()) {\n+        final ListView<ConnInstanceTO> conn2 = new ListView<ConnInstanceTO>(\"conn2\", connModel.getObject().getRight()) {\n \n-                    private static final long serialVersionUID = 6978621871488360381L;\n+            private static final long serialVersionUID = 6978621871488360381L;\n \n-                    private final int size = connModel.getObject().getRight().size() + 1;\n+            private final int size = connModel.getObject().getRight().size() + 1;\n \n-                    @Override\n-                    protected void populateItem(final ListItem<ConnInstanceTO> item) {\n-                        final ConnInstanceTO conn = item.getModelObject();\n+            @Override\n+            protected void populateItem(final ListItem<ConnInstanceTO> item) {\n+                final ConnInstanceTO conn = item.getModelObject();\n \n-                        final TopologyNode parent = servers.get(conn.getLocation());\n+                final TopologyNode parent = servers.get(conn.getLocation());\n \n-                        int kx = size >= 6 ? 800 : (130 * size);\n+                int kx = size >= 6 ? 800 : (130 * size);\n \n-                        int x = (int) Math.round((parent == null ? origX : parent.getX())\n-                                + kx * Math.cos(Math.PI + Math.PI * (item.getIndex() + 1) / size));\n-                        int y = (int) Math.round((parent == null ? origY : parent.getY())\n-                                + 100 * Math.sin(Math.PI + Math.PI * (item.getIndex() + 1) / size));\n+                int x = (int) Math.round((parent == null ? origX : parent.getX())\n+                        + kx * Math.cos(Math.PI + Math.PI * (item.getIndex() + 1) / size));\n+                int y = (int) Math.round((parent == null ? origY : parent.getY())\n+                        + 100 * Math.sin(Math.PI + Math.PI * (item.getIndex() + 1) / size));\n \n-                        final TopologyNode topologynode = new TopologyNode(\n-                                Long.valueOf(conn.getKey()), conn.getDisplayName(), TopologyNode.Kind.CONNECTOR);\n-                        topologynode.setConnectinDisplayName(conn.getBundleName());\n-                        topologynode.setX(x);\n-                        topologynode.setY(y);\n+                final TopologyNode topologynode = new TopologyNode(\n+                        Long.valueOf(conn.getKey()), conn.getDisplayName(), TopologyNode.Kind.CONNECTOR);\n+                topologynode.setConnectinDisplayName(conn.getBundleName());\n+                topologynode.setX(x);\n+                topologynode.setY(y);\n \n-                        connectors.put(Long.class.cast(topologynode.getKey()), topologynode);\n+                connectors.put(Long.class.cast(topologynode.getKey()), topologynode);\n \n-                        item.add(topologyNodePanel(\"conn\", topologynode));\n+                item.add(topologyNodePanel(\"conn\", topologynode));\n \n-                        if (conn.getLocation().startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n-                            final Map<Serializable, TopologyNode> remoteConnections;\n+                if (conn.getLocation().startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n+                    final Map<Serializable, TopologyNode> remoteConnections;\n \n-                            if (connections.containsKey(conn.getLocation())) {\n-                                remoteConnections = connections.get(conn.getLocation());\n-                            } else {\n-                                remoteConnections = new HashMap<>();\n-                                connections.put(conn.getLocation(), remoteConnections);\n-                            }\n-                            remoteConnections.put(conn.getKey(), topologynode);\n-                        } else {\n-                            syncopeConnections.put(conn.getKey(), topologynode);\n-                        }\n+                    if (connections.containsKey(conn.getLocation())) {\n+                        remoteConnections = connections.get(conn.getLocation());\n+                    } else {\n+                        remoteConnections = new HashMap<>();\n+                        connections.put(conn.getLocation(), remoteConnections);\n                     }\n-                };\n+                    remoteConnections.put(conn.getKey(), topologynode);\n+                } else {\n+                    syncopeConnections.put(conn.getKey(), topologynode);\n+                }\n+            }\n+        };\n \n         conn2.setOutputMarkupId(true);\n         add(conn2);\n-            // -----------------------------------------\n+        // -----------------------------------------\n \n         // -----------------------------------------\n         // Add Resources\n@@ -426,37 +422,37 @@ protected void populateItem(final ListItem<Long> item) {\n                 final ListView<TopologyNode> innerListView = new ListView<TopologyNode>(\"resources\",\n                         new ArrayList<>(connections.get(connectorId).values())) {\n \n-                            private static final long serialVersionUID = 1L;\n+                    private static final long serialVersionUID = 1L;\n \n-                            private final int size = getModelObject().size() + 1;\n+                    private final int size = getModelObject().size() + 1;\n \n-                            @Override\n-                            protected void populateItem(final ListItem<TopologyNode> item) {\n-                                final TopologyNode topologynode = item.getModelObject();\n-                                final TopologyNode parent = connectors.get(connectorId);\n+                    @Override\n+                    protected void populateItem(final ListItem<TopologyNode> item) {\n+                        final TopologyNode topologynode = item.getModelObject();\n+                        final TopologyNode parent = connectors.get(connectorId);\n \n-                                final double k;\n+                        final double k;\n \n-                                if (parent == null || parent.getY() < syncopeTopologyNode.getY()) {\n-                                    k = Math.PI;\n-                                } else {\n-                                    k = 0.0;\n-                                }\n+                        if (parent == null || parent.getY() < syncopeTopologyNode.getY()) {\n+                            k = Math.PI;\n+                        } else {\n+                            k = 0.0;\n+                        }\n \n-                                int kx = size >= 16 ? 800 : (48 * size);\n-                                int ky = size < 4 ? 100 : size < 6 ? 350 : 750;\n+                        int kx = size >= 16 ? 800 : (48 * size);\n+                        int ky = size < 4 ? 100 : size < 6 ? 350 : 750;\n \n-                                int x = (int) Math.round((parent == null ? origX : parent.getX())\n-                                        + kx * Math.cos(k + Math.PI * (item.getIndex() + 1) / size));\n-                                int y = (int) Math.round((parent == null ? origY : parent.getY())\n-                                        + ky * Math.sin(k + Math.PI * (item.getIndex() + 1) / size));\n+                        int x = (int) Math.round((parent == null ? origX : parent.getX())\n+                                + kx * Math.cos(k + Math.PI * (item.getIndex() + 1) / size));\n+                        int y = (int) Math.round((parent == null ? origY : parent.getY())\n+                                + ky * Math.sin(k + Math.PI * (item.getIndex() + 1) / size));\n \n-                                topologynode.setX(x);\n-                                topologynode.setY(y);\n+                        topologynode.setX(x);\n+                        topologynode.setY(y);\n \n-                                item.add(topologyNodePanel(\"res\", topologynode));\n-                            }\n-                        };\n+                        item.add(topologyNodePanel(\"res\", topologynode));\n+                    }\n+                };\n \n                 innerListView.setOutputMarkupId(true);\n                 item.add(innerListView);"},{"sha":"478260e999c24d326b19bca2343b2eaa6bac9774","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/016b441a19e2a7bc4bd393198b166cc91d12df6d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/016b441a19e2a7bc4bd393198b166cc91d12df6d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java?ref=016b441a19e2a7bc4bd393198b166cc91d12df6d","patch":"@@ -46,7 +46,7 @@ public class TopologyNodePanel extends Panel {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(TopologyNodePanel.class);\n \n-    final ModalWindow modal;\n+    private final ModalWindow modal;\n \n     @SpringBean\n     private ResourceRestClient resourceRestClient;"}]}