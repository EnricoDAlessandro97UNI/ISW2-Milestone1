{"sha":"1d3ab4df1164443d46b2fed84864ec20b27c9c41","node_id":"C_kwDOJfYA1toAKDFkM2FiNGRmMTE2NDQ0M2Q0NmIyZmVkODQ4NjRlYzIwYjI3YzljNDE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-03-10T13:26:37Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-03-11T07:02:46Z"},"message":"WA: better scope management for OIDC RP client application (#423)","tree":{"sha":"7de679a50602ecfa1fbb433ccf6b997850c12a90","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7de679a50602ecfa1fbb433ccf6b997850c12a90"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1d3ab4df1164443d46b2fed84864ec20b27c9c41","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1d3ab4df1164443d46b2fed84864ec20b27c9c41","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1d3ab4df1164443d46b2fed84864ec20b27c9c41","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1d3ab4df1164443d46b2fed84864ec20b27c9c41/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0e10b62248dedc304952c605fee50b942527879d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0e10b62248dedc304952c605fee50b942527879d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0e10b62248dedc304952c605fee50b942527879d"}],"stats":{"total":114,"additions":77,"deletions":37},"files":[{"sha":"d4515ae480af52d31062b50a80168ce984686db1","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientAppModalPanelBuilder.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ab4df1164443d46b2fed84864ec20b27c9c41/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ab4df1164443d46b2fed84864ec20b27c9c41/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java?ref=1d3ab4df1164443d46b2fed84864ec20b27c9c41","patch":"@@ -180,7 +180,7 @@ protected Iterator<String> getChoices(final String input) {\n             fields.add(new AjaxTextFieldPanel(\n                     \"field\", Constants.DESCRIPTION_FIELD_NAME,\n                     new PropertyModel<>(clientAppTO, Constants.DESCRIPTION_FIELD_NAME), false));\n-            \n+\n             fields.add(new AjaxTextFieldPanel(\n                     \"field\", \"logo\",\n                     new PropertyModel<>(clientAppTO, \"logo\"), false));\n@@ -252,7 +252,6 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                     fields.add(subjectType);\n \n                     AjaxTextFieldPanel redirectUri = new AjaxTextFieldPanel(\"panel\", \"redirectUris\", new Model<>());\n-                    redirectUri.addValidator(new UrlValidator());\n                     fields.add(new MultiFieldPanel.Builder<String>(\n                             new PropertyModel<>(clientAppTO, \"redirectUris\")).build(\n                             \"field\",\n@@ -278,7 +277,6 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 case SAML2SP:\n                     AjaxTextFieldPanel entityId = new AjaxTextFieldPanel(\n                             \"field\", \"entityId\", new PropertyModel<>(clientAppTO, \"entityId\"), false);\n-                    entityId.addValidator(new UrlValidator());\n                     fields.add(entityId.setRequired(true));\n \n                     fields.add(new AjaxTextFieldPanel(\"field\", \"metadataLocation\","},{"sha":"480ff8edc43e0fbf26abba77a0686aeb3b291867","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/OIDCRPClientAppTO.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ab4df1164443d46b2fed84864ec20b27c9c41/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ab4df1164443d46b2fed84864ec20b27c9c41/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPClientAppTO.java?ref=1d3ab4df1164443d46b2fed84864ec20b27c9c41","patch":"@@ -35,6 +35,15 @@ public class OIDCRPClientAppTO extends ClientAppTO {\n \n     private static final long serialVersionUID = -6370888503924521351L;\n \n+    public enum SCOPE {\n+        OPENID,\n+        PROFILE,\n+        EMAIL,\n+        ADDRESS,\n+        PHONE\n+\n+    }\n+\n     private String clientId;\n \n     private String clientSecret;\n@@ -53,6 +62,8 @@ public class OIDCRPClientAppTO extends ClientAppTO {\n \n     private String logoutUri;\n \n+    private final List<SCOPE> scopes = new ArrayList<>();\n+\n     private boolean bypassApprovalPrompt = true;\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n@@ -130,6 +141,12 @@ public void setJwtAccessToken(final boolean jwtAccessToken) {\n         this.jwtAccessToken = jwtAccessToken;\n     }\n \n+    @JacksonXmlElementWrapper(localName = \"scopes\")\n+    @JacksonXmlProperty(localName = \"scope\")\n+    public List<SCOPE> getScopes() {\n+        return scopes;\n+    }\n+\n     public boolean isBypassApprovalPrompt() {\n         return bypassApprovalPrompt;\n     }\n@@ -161,6 +178,7 @@ public boolean equals(final Object obj) {\n                 .append(this.supportedResponseTypes, rhs.supportedResponseTypes)\n                 .append(this.logoutUri, rhs.logoutUri)\n                 .append(this.jwtAccessToken, rhs.jwtAccessToken)\n+                .append(this.scopes, rhs.scopes)\n                 .append(this.bypassApprovalPrompt, rhs.bypassApprovalPrompt)\n                 .isEquals();\n     }\n@@ -178,6 +196,7 @@ public int hashCode() {\n                 .append(supportedResponseTypes)\n                 .append(logoutUri)\n                 .append(jwtAccessToken)\n+                .append(scopes)\n                 .append(bypassApprovalPrompt)\n                 .toHashCode();\n     }"},{"sha":"837f80ec3ddbe22722c729925de2fd4c0a648d76","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/OIDCGrantType.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ab4df1164443d46b2fed84864ec20b27c9c41/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCGrantType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ab4df1164443d46b2fed84864ec20b27c9c41/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCGrantType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCGrantType.java?ref=1d3ab4df1164443d46b2fed84864ec20b27c9c41","patch":"@@ -22,6 +22,7 @@ public enum OIDCGrantType {\n     authorization_code,\n     password,\n     client_credentials,\n-    refresh_token;\n+    refresh_token,\n+    device_code;\n \n }"},{"sha":"7e2b8cb90f15af6f91ead07a21dbe9b03f22b2c6","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/OIDCResponseType.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ab4df1164443d46b2fed84864ec20b27c9c41/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCResponseType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ab4df1164443d46b2fed84864ec20b27c9c41/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCResponseType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCResponseType.java?ref=1d3ab4df1164443d46b2fed84864ec20b27c9c41","patch":"@@ -21,7 +21,9 @@\n public enum OIDCResponseType {\n     CODE(\"code\"),\n     TOKEN(\"token\"),\n-    ID_TOKEN_TOKEN(\"id_token token\");\n+    ID_TOKEN(\"id_token\"),\n+    ID_TOKEN_TOKEN(\"id_token token\"),\n+    DEVICE_CODE(\"device_code\");\n \n     private final String externalForm;\n "},{"sha":"4f26cba3d093a0005efea326e8b3db13a07fe6d3","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ab4df1164443d46b2fed84864ec20b27c9c41/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ab4df1164443d46b2fed84864ec20b27c9c41/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=1d3ab4df1164443d46b2fed84864ec20b27c9c41","patch":"@@ -1668,7 +1668,7 @@ under the License.\n             <dependency>\n               <groupId>com.puppycrawl.tools</groupId>\n               <artifactId>checkstyle</artifactId>\n-              <version>10.8.0</version>\n+              <version>10.8.1</version>\n             </dependency>\n           </dependencies>\n           <configuration>"},{"sha":"9b667a1a9f8bb549feeda2d274bbf33f35949a83","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPClientAppTOMapper.java","status":"modified","additions":51,"deletions":31,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d3ab4df1164443d46b2fed84864ec20b27c9c41/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d3ab4df1164443d46b2fed84864ec20b27c9c41/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java?ref=1d3ab4df1164443d46b2fed84864ec20b27c9c41","patch":"@@ -32,6 +32,7 @@\n import org.apereo.cas.oidc.claims.OidcAddressScopeAttributeReleasePolicy;\n import org.apereo.cas.oidc.claims.OidcCustomScopeAttributeReleasePolicy;\n import org.apereo.cas.oidc.claims.OidcEmailScopeAttributeReleasePolicy;\n+import org.apereo.cas.oidc.claims.OidcOpenIdScopeAttributeReleasePolicy;\n import org.apereo.cas.oidc.claims.OidcPhoneScopeAttributeReleasePolicy;\n import org.apereo.cas.oidc.claims.OidcProfileScopeAttributeReleasePolicy;\n import org.apereo.cas.services.BaseMappedAttributeReleasePolicy;\n@@ -91,43 +92,62 @@ public RegisteredService map(\n             if (attributeReleasePolicy != null) {\n                 chain.addPolicies(attributeReleasePolicy);\n             }\n+        }\n \n-            chain.addPolicies(new OidcProfileScopeAttributeReleasePolicy(),\n-                    new OidcEmailScopeAttributeReleasePolicy(),\n-                    new OidcAddressScopeAttributeReleasePolicy(),\n-                    new OidcPhoneScopeAttributeReleasePolicy());\n+        if (rp.getScopes().contains(OIDCRPClientAppTO.SCOPE.OPENID)) {\n+            chain.addPolicies(new OidcOpenIdScopeAttributeReleasePolicy());\n+        }\n+        if (rp.getScopes().contains(OIDCRPClientAppTO.SCOPE.PROFILE)) {\n+            chain.addPolicies(new OidcProfileScopeAttributeReleasePolicy());\n+        }\n+        if (rp.getScopes().contains(OIDCRPClientAppTO.SCOPE.ADDRESS)) {\n+            chain.addPolicies(new OidcAddressScopeAttributeReleasePolicy());\n+        }\n+        if (rp.getScopes().contains(OIDCRPClientAppTO.SCOPE.EMAIL)) {\n+            chain.addPolicies(new OidcEmailScopeAttributeReleasePolicy());\n+        }\n+        if (rp.getScopes().contains(OIDCRPClientAppTO.SCOPE.PHONE)) {\n+            chain.addPolicies(new OidcPhoneScopeAttributeReleasePolicy());\n+        }\n \n-            Set<String> customClaims = new HashSet<>();\n-            if (attributeReleasePolicy instanceof BaseMappedAttributeReleasePolicy) {\n-                customClaims.addAll(((BaseMappedAttributeReleasePolicy) attributeReleasePolicy).\n-                        getAllowedAttributes().values().stream().\n-                        map(Objects::toString).collect(Collectors.toSet()));\n-            } else if (attributeReleasePolicy instanceof ReturnAllowedAttributeReleasePolicy) {\n-                customClaims.addAll(((ReturnAllowedAttributeReleasePolicy) attributeReleasePolicy).\n-                        getAllowedAttributes().stream().collect(Collectors.toSet()));\n-            } else if (attributeReleasePolicy instanceof ChainingAttributeReleasePolicy) {\n-                ((ChainingAttributeReleasePolicy) attributeReleasePolicy).getPolicies().stream().\n-                        filter(ReturnAllowedAttributeReleasePolicy.class::isInstance).\n-                        findFirst().map(ReturnAllowedAttributeReleasePolicy.class::cast).\n-                        map(p -> p.getAllowedAttributes().stream().collect(Collectors.toSet())).\n-                        ifPresent(customClaims::addAll);\n-            }\n+        Set<String> customClaims = new HashSet<>();\n+        if (attributeReleasePolicy instanceof BaseMappedAttributeReleasePolicy) {\n+            customClaims.addAll(((BaseMappedAttributeReleasePolicy) attributeReleasePolicy).\n+                    getAllowedAttributes().values().stream().\n+                    map(Objects::toString).collect(Collectors.toSet()));\n+        } else if (attributeReleasePolicy instanceof ReturnAllowedAttributeReleasePolicy) {\n+            customClaims.addAll(((ReturnAllowedAttributeReleasePolicy) attributeReleasePolicy).\n+                    getAllowedAttributes().stream().collect(Collectors.toSet()));\n+        } else if (attributeReleasePolicy instanceof ChainingAttributeReleasePolicy) {\n+            ((ChainingAttributeReleasePolicy) attributeReleasePolicy).getPolicies().stream().\n+                    filter(ReturnAllowedAttributeReleasePolicy.class::isInstance).\n+                    findFirst().map(ReturnAllowedAttributeReleasePolicy.class::cast).\n+                    map(p -> p.getAllowedAttributes().stream().collect(Collectors.toSet())).\n+                    ifPresent(customClaims::addAll);\n+        }\n+        if (rp.getScopes().contains(OIDCRPClientAppTO.SCOPE.PROFILE)) {\n             customClaims.removeAll(OidcProfileScopeAttributeReleasePolicy.ALLOWED_CLAIMS);\n-            customClaims.removeAll(OidcEmailScopeAttributeReleasePolicy.ALLOWED_CLAIMS);\n+        }\n+        if (rp.getScopes().contains(OIDCRPClientAppTO.SCOPE.ADDRESS)) {\n             customClaims.removeAll(OidcAddressScopeAttributeReleasePolicy.ALLOWED_CLAIMS);\n+        }\n+        if (rp.getScopes().contains(OIDCRPClientAppTO.SCOPE.EMAIL)) {\n+            customClaims.removeAll(OidcEmailScopeAttributeReleasePolicy.ALLOWED_CLAIMS);\n+        }\n+        if (rp.getScopes().contains(OIDCRPClientAppTO.SCOPE.PHONE)) {\n             customClaims.removeAll(OidcPhoneScopeAttributeReleasePolicy.ALLOWED_CLAIMS);\n-            if (!customClaims.isEmpty()) {\n-                CasConfigurationProperties properties = ctx.getBean(CasConfigurationProperties.class);\n-                List<String> supportedClaims = properties.getAuthn().getOidc().getDiscovery().getClaims();\n-                if (!supportedClaims.containsAll(customClaims)) {\n-                    properties.getAuthn().getOidc().getDiscovery().setClaims(\n-                            Stream.concat(supportedClaims.stream(), customClaims.stream()).\n-                                    distinct().collect(Collectors.toList()));\n-                }\n-\n-                chain.addPolicies(new OidcCustomScopeAttributeReleasePolicy(\n-                        CUSTOM_SCOPE, customClaims.stream().collect(Collectors.toList())));\n+        }\n+        if (!customClaims.isEmpty()) {\n+            CasConfigurationProperties properties = ctx.getBean(CasConfigurationProperties.class);\n+            List<String> supportedClaims = properties.getAuthn().getOidc().getDiscovery().getClaims();\n+            if (!supportedClaims.containsAll(customClaims)) {\n+                properties.getAuthn().getOidc().getDiscovery().setClaims(\n+                        Stream.concat(supportedClaims.stream(), customClaims.stream()).\n+                                distinct().collect(Collectors.toList()));\n             }\n+\n+            chain.addPolicies(new OidcCustomScopeAttributeReleasePolicy(\n+                    CUSTOM_SCOPE, customClaims.stream().collect(Collectors.toList())));\n         }\n \n         setPolicies(service, authPolicy, mfaPolicy, accessStrategy, chain);"}]}