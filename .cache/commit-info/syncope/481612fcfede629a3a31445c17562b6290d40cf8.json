{"sha":"481612fcfede629a3a31445c17562b6290d40cf8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ4MTYxMmZjZmVkZTYyOWEzYTMxNDQ1YzE3NTYyYjYyOTBkNDBjZjg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-07-19T14:56:36Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-07-19T14:56:36Z"},"message":"Basic scheduling features\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247045 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8258ba476fa27add6dbc5cec934c8e9a1f44c00c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8258ba476fa27add6dbc5cec934c8e9a1f44c00c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/481612fcfede629a3a31445c17562b6290d40cf8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/481612fcfede629a3a31445c17562b6290d40cf8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/481612fcfede629a3a31445c17562b6290d40cf8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/481612fcfede629a3a31445c17562b6290d40cf8/comments","author":null,"committer":null,"parents":[{"sha":"339c739744c7c0db63639b5cda9f56c0bc6b6b7f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/339c739744c7c0db63639b5cda9f56c0bc6b6b7f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/339c739744c7c0db63639b5cda9f56c0bc6b6b7f"}],"stats":{"total":1246,"additions":1239,"deletions":7},"files":[{"sha":"acda660609a2ae633725b795afe96fb6ce409237","filename":"core/src/main/java/org/syncope/core/init/ContentLoader.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FContentLoader.java?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -13,16 +13,13 @@\n  */\n package org.syncope.core.init;\n \n+import java.io.IOException;\n import java.io.InputStream;\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.Properties;\n-import javax.naming.Context;\n-import javax.naming.InitialContext;\n-import javax.naming.NameClassPair;\n-import javax.naming.NamingEnumeration;\n import javax.sql.DataSource;\n import org.dbunit.database.DatabaseConfig;\n import org.dbunit.database.DatabaseConnection;\n@@ -65,19 +62,30 @@ public void load() {\n         Connection conn = DataSourceUtils.getConnection(dataSource);\n \n         // 1. read persistence.properties\n+        InputStream dbPropsStream = null;\n         String dbSchema = null;\n+        String quartzSQL = null;\n         try {\n-            InputStream dbPropsStream = getClass().getResourceAsStream(\n+            dbPropsStream = getClass().getResourceAsStream(\n                     \"/persistence.properties\");\n             Properties dbProps = new Properties();\n             dbProps.load(dbPropsStream);\n             dbSchema = dbProps.getProperty(\"database.schema\");\n+            quartzSQL = dbProps.getProperty(\"quartz.sql\");\n         } catch (Throwable t) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Could not find persistence.properties\", t);\n             } else {\n                 LOG.error(\"Could not find persistence.properties\");\n             }\n+        } finally {\n+            if (dbPropsStream != null) {\n+                try {\n+                    dbPropsStream.close();\n+                } catch (IOException e) {\n+                    LOG.error(\"While trying to read persistence.properties\", e);\n+                }\n+            }\n         }\n \n         // 2. Check wether we are allowed to load default content into the DB"},{"sha":"04e3e494d49e57e80247f08a3a0836877b4807ed","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -23,6 +23,7 @@\n import javax.validation.constraints.Min;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.validation.entity.SchedTaskCheck;\n+import org.syncope.core.scheduling.SyncJob;\n \n @Entity\n @SchedTaskCheck\n@@ -55,8 +56,7 @@ public SyncTask() {\n \n         defaultResources = new ArrayList<TargetResource>();\n         defaultRoles = new ArrayList<SyncopeRole>();\n-        // TODO\n-        super.setJobClassName(\"java.lang.String\");\n+        super.setJobClassName(SyncJob.class.getName());\n     }\n \n     @Override"},{"sha":"bbbb1262f23d5d93014e1ef70166cee1f9de84a6","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -15,14 +15,18 @@\n package org.syncope.core.rest.controller;\n \n import com.opensymphony.workflow.WorkflowException;\n+import java.lang.reflect.Modifier;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javassist.NotFoundException;\n+import org.reflections.Reflections;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.web.bind.annotation.RequestParam;\n@@ -38,6 +42,8 @@\n import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.core.persistence.propagation.PropagationManager;\n import org.syncope.core.rest.data.TaskDataBinder;\n+import org.syncope.core.scheduling.Job;\n+import org.syncope.core.scheduling.SyncJob;\n import org.syncope.core.util.TaskUtil;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.PropagationTaskExecStatus;\n@@ -119,6 +125,30 @@ public List<TaskExecTO> listExecutions(\n         return executionTOs;\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/jobClasses\")\n+    public ModelAndView getJobClasses() {\n+        Reflections reflections = new Reflections(\n+                \"org.syncope.core.scheduling\");\n+\n+        Set<Class<? extends Job>> subTypes =\n+                reflections.getSubTypesOf(Job.class);\n+\n+        Set<String> jobClasses = new HashSet<String>();\n+        for (Class jobClass : subTypes) {\n+            if (!Modifier.isAbstract(jobClass.getModifiers())\n+                    && !jobClass.equals(SyncJob.class)) {\n+\n+                jobClasses.add(jobClass.getName());\n+            }\n+        }\n+\n+        ModelAndView result = new ModelAndView();\n+        result.addObject(jobClasses);\n+        return result;\n+    }\n+\n     @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{taskId}\")"},{"sha":"0f0ff93c7de8d4b7e88a163376e603d19016d5f4","filename":"core/src/main/java/org/syncope/core/scheduling/AppContextMethodInvokingJobDetailFactoryBean.java","status":"added","additions":198,"deletions":0,"changes":198,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAppContextMethodInvokingJobDetailFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAppContextMethodInvokingJobDetailFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAppContextMethodInvokingJobDetailFactoryBean.java?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -0,0 +1,198 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.scheduling;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Calendar;\n+import org.apache.commons.lang.StringUtils;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.quartz.Scheduler;\n+import org.springframework.beans.factory.BeanClassLoaderAware;\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.BeanFactoryAware;\n+import org.springframework.beans.factory.BeanNameAware;\n+import org.springframework.beans.factory.FactoryBean;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.scheduling.quartz.JobMethodInvocationFailedException;\n+import org.springframework.scheduling.quartz.QuartzJobBean;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n+import org.springframework.util.MethodInvoker;\n+import org.syncope.core.util.ApplicationContextManager;\n+\n+/**\n+ * Inspired by Spring's MethodInvokingJobDetailFactoryBean: the main difference\n+ * is about the MethodInvoker instance that is created at each execution of the\n+ * JobDetail.\n+ *\n+ * @see org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean\n+ */\n+public class AppContextMethodInvokingJobDetailFactoryBean\n+        implements FactoryBean<JobDetail>, BeanNameAware, BeanClassLoaderAware,\n+        BeanFactoryAware, InitializingBean, Serializable {\n+\n+    private static final long serialVersionUID = -9164669094205867738L;\n+\n+    private String group = Scheduler.DEFAULT_GROUP;\n+\n+    private String beanName;\n+\n+    private String[] jobListenerNames;\n+\n+    private JobDetail jobDetail;\n+\n+    private String targetBeanName;\n+\n+    private String targetMethod;\n+\n+    /**\n+     * Set the group of the job.\n+     * <p>Default is the default group of the Scheduler.\n+     * @see org.quartz.JobDetail#setGroup\n+     * @see org.quartz.Scheduler#DEFAULT_GROUP\n+     */\n+    public void setGroup(String group) {\n+        this.group = group;\n+    }\n+\n+    @Override\n+    public JobDetail getObject()\n+            throws Exception {\n+\n+        return jobDetail;\n+    }\n+\n+    @Override\n+    public Class<?> getObjectType() {\n+        return JobDetail.class;\n+    }\n+\n+    @Override\n+    public boolean isSingleton() {\n+        return true;\n+    }\n+\n+    /**\n+     * Set a list of JobListener names for this job, referring to\n+     * non-global JobListeners registered with the Scheduler.\n+     * <p>A JobListener name always refers to the name returned\n+     * by the JobListener implementation.\n+     * @see SchedulerFactoryBean#setJobListeners\n+     * @see org.quartz.JobListener#getName\n+     */\n+    public void setJobListenerNames(String[] names) {\n+        if (names != null) {\n+            this.jobListenerNames = names.clone();\n+        }\n+    }\n+\n+    @Override\n+    public void setBeanName(String beanName) {\n+        this.beanName = beanName;\n+    }\n+\n+    @Override\n+    public void setBeanClassLoader(ClassLoader classLoader) {\n+    }\n+\n+    @Override\n+    public void setBeanFactory(BeanFactory beanFactory) {\n+    }\n+\n+    public void setTargetBeanName(String targetBeanName) {\n+        this.targetBeanName = targetBeanName;\n+    }\n+\n+    public void setTargetMethod(String targetMethod) {\n+        this.targetMethod = targetMethod;\n+    }\n+\n+    @Override\n+    public void afterPropertiesSet()\n+            throws Exception {\n+\n+        if (StringUtils.isBlank(targetBeanName)\n+                || StringUtils.isBlank(targetMethod)) {\n+\n+            throw new IllegalArgumentException(\n+                    \"Blank targetBeanName and / or targetMethod\");\n+        }\n+\n+        String name = this.beanName + \"_\"\n+                + Calendar.getInstance().getTimeInMillis();\n+\n+        // Build JobDetail instance.\n+        this.jobDetail = new JobDetail(name, this.group,\n+                MethodInvokingJob.class);\n+        this.jobDetail.getJobDataMap().put(\"targetBeanName\", targetBeanName);\n+        this.jobDetail.getJobDataMap().put(\"targetMethod\", targetMethod);\n+        this.jobDetail.setVolatility(false);\n+        this.jobDetail.setDurability(true);\n+\n+        // Register job listener names.\n+        if (this.jobListenerNames != null) {\n+            for (String jobListenerName : this.jobListenerNames) {\n+                this.jobDetail.addJobListener(jobListenerName);\n+            }\n+        }\n+    }\n+\n+    public static class MethodInvokingJob extends QuartzJobBean {\n+\n+        private String targetBeanName;\n+\n+        private String targetMethod;\n+\n+        public void setTargetBeanName(String targetBeanName) {\n+            this.targetBeanName = targetBeanName;\n+        }\n+\n+        public void setTargetMethod(String targetMethod) {\n+            this.targetMethod = targetMethod;\n+        }\n+\n+        @Override\n+        protected void executeInternal(JobExecutionContext context)\n+                throws JobExecutionException {\n+\n+            ConfigurableApplicationContext appContext =\n+                    ApplicationContextManager.getApplicationContext();\n+            Object instance = appContext.getBean(targetBeanName);\n+\n+            MethodInvoker methodInvoker = new MethodInvoker();\n+            methodInvoker.setTargetObject(instance);\n+            methodInvoker.setTargetMethod(targetMethod);\n+\n+            try {\n+                methodInvoker.prepare();\n+                context.setResult(methodInvoker.invoke());\n+            } catch (InvocationTargetException e) {\n+                if (e.getTargetException() instanceof JobExecutionException) {\n+                    // JobExecutionException, to be logged by Quartz\n+                    throw (JobExecutionException) e.getTargetException();\n+                } else {\n+                    // \"unhandled exception\", to be logged by Quartz\n+                    throw new JobMethodInvocationFailedException(methodInvoker,\n+                            e.getTargetException());\n+                }\n+            } catch (Exception e) {\n+                // \"unhandled exception\", to be logged at error level by Quartz\n+                throw new JobMethodInvocationFailedException(methodInvoker, e);\n+            }\n+        }\n+    }\n+}"},{"sha":"5390b839e81e8970ccda0fab182e1da2738b8c54","filename":"core/src/main/java/org/syncope/core/scheduling/Job.java","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FJob.java?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.scheduling;\n+\n+import org.quartz.JobExecutionException;\n+\n+public interface Job {\n+\n+    void execute() throws JobExecutionException;\n+}"},{"sha":"6dc93dc1b46685ef07c8c1c213fb753d5e84630e","filename":"core/src/main/java/org/syncope/core/scheduling/SampleJob.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSampleJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSampleJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSampleJob.java?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.scheduling;\n+\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SampleJob implements Job {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(SampleJob.class);\n+\n+    @Override\n+    public void execute()\n+            throws JobExecutionException {\n+\n+        LOG.info(\"SampleJob running\");\n+    }\n+}"},{"sha":"b3abbe5994d7eb981a768516b0e0c1d3c733deef","filename":"core/src/main/java/org/syncope/core/scheduling/SpringBeanContextAwareJobFactory.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSpringBeanContextAwareJobFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSpringBeanContextAwareJobFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSpringBeanContextAwareJobFactory.java?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.scheduling;\n+\n+import org.quartz.SchedulerContext;\n+import org.quartz.spi.TriggerFiredBundle;\n+import org.springframework.beans.BeanWrapper;\n+import org.springframework.beans.MutablePropertyValues;\n+import org.springframework.beans.PropertyAccessorFactory;\n+import org.springframework.scheduling.quartz.SpringBeanJobFactory;\n+import org.springframework.web.context.support.XmlWebApplicationContext;\n+\n+/**\n+ * From blog post at http://sloanseaman.com/wordpress/?p=120.\n+ */\n+public class SpringBeanContextAwareJobFactory extends SpringBeanJobFactory {\n+\n+    private String[] ignoredUnknownProperties;\n+\n+    private SchedulerContext schedulerContext;\n+\n+    @Override\n+    public void setIgnoredUnknownProperties(String[] ignoredUnknownProperties) {\n+        super.setIgnoredUnknownProperties(ignoredUnknownProperties);\n+        if (ignoredUnknownProperties != null) {\n+            this.ignoredUnknownProperties = ignoredUnknownProperties.clone();\n+        }\n+    }\n+\n+    @Override\n+    public void setSchedulerContext(SchedulerContext schedulerContext) {\n+        super.setSchedulerContext(schedulerContext);\n+        this.schedulerContext = schedulerContext;\n+    }\n+\n+    /**\n+     * An implementation of SpringBeanJobFactory that retrieves the bean from\n+     * the Spring context so that autowiring and transactions work\n+     *\n+     * This method is overriden.\n+     * @see org.springframework.scheduling.quartz.SpringBeanJobFactory\n+     * #createJobInstance(org.quartz.spi.TriggerFiredBundle)\n+     */\n+    @Override\n+    protected Object createJobInstance(TriggerFiredBundle bundle)\n+            throws Exception {\n+\n+        XmlWebApplicationContext ctx =\n+                (XmlWebApplicationContext) schedulerContext.get(\n+                \"applicationContext\");\n+        Object job = ctx.getBean(bundle.getJobDetail().getName());\n+        BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(job);\n+        if (isEligibleForPropertyPopulation(bw.getWrappedInstance())) {\n+            MutablePropertyValues pvs = new MutablePropertyValues();\n+            if (this.schedulerContext != null) {\n+                pvs.addPropertyValues(this.schedulerContext);\n+            }\n+            pvs.addPropertyValues(bundle.getJobDetail().getJobDataMap());\n+            pvs.addPropertyValues(bundle.getTrigger().getJobDataMap());\n+            if (this.ignoredUnknownProperties != null) {\n+                for (String propName : this.ignoredUnknownProperties) {\n+                    if (pvs.contains(propName)\n+                            && !bw.isWritableProperty(propName)) {\n+\n+                        pvs.removePropertyValue(propName);\n+                    }\n+                }\n+                bw.setPropertyValues(pvs);\n+            } else {\n+                bw.setPropertyValues(pvs, true);\n+            }\n+        }\n+        return job;\n+    }\n+}"},{"sha":"5502aa8012a7edb1f81cac51ad17418c28e04c4e","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.scheduling;\n+\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SyncJob implements Job {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG =\n+            LoggerFactory.getLogger(SyncJob.class);\n+\n+    @Override\n+    public void execute()\n+            throws JobExecutionException {\n+\n+        LOG.info(\"SyncJob running\");\n+    }\n+}"},{"sha":"0028bb9d62b2d824e4ca23c7cbb9a58ea2d79623","filename":"core/src/main/resources/logback.xml","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -210,6 +210,27 @@\n         <appender-ref ref=\"test\"/>\n     </logger>\n \n+    <logger name=\"jdbc.sqlonly\" additivity=\"false\">\n+        <level value=\"INFO\"/>\n+        <appender-ref ref=\"test\"/>\n+    </logger>\n+    <logger name=\"jdbc.sqltiming\" additivity=\"false\">\n+        <level value=\"OFF\"/>\n+        <appender-ref ref=\"test\"/>\n+    </logger>\n+    <logger name=\"jdbc.audit\" additivity=\"false\">\n+        <level value=\"OFF\"/>\n+        <appender-ref ref=\"test\"/>\n+    </logger>\n+    <logger name=\"jdbc.resultset\" additivity=\"false\">\n+        <level value=\"OFF\"/>\n+        <appender-ref ref=\"test\"/>\n+    </logger>\n+    <logger name=\"jdbc.connection\" additivity=\"false\">\n+        <level value=\"OFF\"/>\n+        <appender-ref ref=\"test\"/>\n+    </logger>\n+    \n     <root>\n         <level value=\"INFO\"/>\n         <appender-ref ref=\"main\"/>"},{"sha":"a688c7f2f91d6b303ae2db2f415ac304f491650a","filename":"core/src/main/resources/persistence.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -19,4 +19,8 @@ hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n #hibernate.dialect=org.hibernate.dialect.Oracle10gDialect\n dbUnitDataTypeFactory=org.dbunit.ext.postgresql.PostgresqlDataTypeFactory\n #dbUnitDataTypeFactory=org.dbunit.ext.oracle.Oracle10DataTypeFactory\n+quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n+#quartz.jobstore=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n+quartz.sql=tables_postgres.sql\n+#quartz.sql=tables_oracle.sql\n #database.schema=SYNCOPE"},{"sha":"d3b4f978f4498ac0176ec68fb43f33368d694ad5","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -42,6 +42,9 @@\n \n     <!-- Use JNDI datasource as default but, when not available, revert to\n          local datasource, using different properties for execution and testing -->\n+<!--    <bean id=\"dataSource\" class=\"net.sf.log4jdbc.Log4jdbcProxyDataSource\">\n+        <constructor-arg ref=\"dataSourceSpied\" />\n+    </bean>-->\n     <bean id=\"dataSource\"\n           class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n         <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeDataSource\"/>"},{"sha":"0ca14a648634584969aea3c2a67e35fec03693f8","filename":"core/src/main/resources/quartz/tables_hsqldb.sql","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_hsqldb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_hsqldb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_hsqldb.sql?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -0,0 +1,139 @@\n+CREATE TABLE qrtz_job_details\n+(\n+JOB_NAME VARCHAR(200) NOT NULL,\n+JOB_GROUP VARCHAR(200) NOT NULL,\n+DESCRIPTION VARCHAR(250) NULL,\n+JOB_CLASS_NAME VARCHAR(250) NOT NULL,\n+IS_DURABLE BOOLEAN NOT NULL,\n+IS_VOLATILE BOOLEAN NOT NULL,\n+IS_STATEFUL BOOLEAN NOT NULL,\n+REQUESTS_RECOVERY BOOLEAN NOT NULL,\n+JOB_DATA LONGVARBINARY NULL,\n+PRIMARY KEY (JOB_NAME,JOB_GROUP)\n+);\n+\n+CREATE TABLE qrtz_job_listeners\n+(\n+JOB_NAME VARCHAR(200) NOT NULL,\n+JOB_GROUP VARCHAR(200) NOT NULL,\n+JOB_LISTENER VARCHAR(200) NOT NULL,\n+PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),\n+FOREIGN KEY (JOB_NAME,JOB_GROUP)\n+REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)\n+);\n+\n+CREATE TABLE qrtz_triggers\n+(\n+TRIGGER_NAME VARCHAR(200) NOT NULL,\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+JOB_NAME VARCHAR(200) NOT NULL,\n+JOB_GROUP VARCHAR(200) NOT NULL,\n+IS_VOLATILE BOOLEAN NOT NULL,\n+DESCRIPTION VARCHAR(250) NULL,\n+NEXT_FIRE_TIME NUMERIC(13) NULL,\n+PREV_FIRE_TIME NUMERIC(13) NULL,\n+PRIORITY INTEGER NULL,\n+TRIGGER_STATE VARCHAR(16) NOT NULL,\n+TRIGGER_TYPE VARCHAR(8) NOT NULL,\n+START_TIME NUMERIC(13) NOT NULL,\n+END_TIME NUMERIC(13) NULL,\n+CALENDAR_NAME VARCHAR(200) NULL,\n+MISFIRE_INSTR NUMERIC(2) NULL,\n+JOB_DATA LONGVARBINARY NULL,\n+PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+FOREIGN KEY (JOB_NAME,JOB_GROUP)\n+REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)\n+);\n+\n+CREATE TABLE qrtz_simple_triggers\n+(\n+TRIGGER_NAME VARCHAR(200) NOT NULL,\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+REPEAT_COUNT NUMERIC(7) NOT NULL,\n+REPEAT_INTERVAL NUMERIC(12) NOT NULL,\n+TIMES_TRIGGERED NUMERIC(10) NOT NULL,\n+PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)\n+REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE qrtz_cron_triggers\n+(\n+TRIGGER_NAME VARCHAR(200) NOT NULL,\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+CRON_EXPRESSION VARCHAR(120) NOT NULL,\n+TIME_ZONE_ID VARCHAR(80),\n+PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)\n+REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE qrtz_blob_triggers\n+(\n+TRIGGER_NAME VARCHAR(200) NOT NULL,\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+LONGVARBINARY_DATA LONGVARBINARY NULL,\n+PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)\n+REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE qrtz_trigger_listeners\n+(\n+TRIGGER_NAME VARCHAR(200) NOT NULL,\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+TRIGGER_LISTENER VARCHAR(200) NOT NULL,\n+PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),\n+FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)\n+REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE qrtz_calendars\n+(\n+CALENDAR_NAME VARCHAR(200) NOT NULL,\n+CALENDAR LONGVARBINARY NOT NULL,\n+PRIMARY KEY (CALENDAR_NAME)\n+);\n+\n+CREATE TABLE qrtz_paused_trigger_grps\n+(\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+PRIMARY KEY (TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE qrtz_fired_triggers\n+(\n+ENTRY_ID VARCHAR(95) NOT NULL,\n+TRIGGER_NAME VARCHAR(200) NOT NULL,\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+IS_VOLATILE BOOLEAN NOT NULL,\n+INSTANCE_NAME VARCHAR(200) NOT NULL,\n+FIRED_TIME NUMERIC(13) NOT NULL,\n+PRIORITY INTEGER NOT NULL,\n+STATE VARCHAR(16) NOT NULL,\n+JOB_NAME VARCHAR(200) NULL,\n+JOB_GROUP VARCHAR(200) NULL,\n+IS_STATEFUL BOOLEAN NULL,\n+REQUESTS_RECOVERY BOOLEAN NULL,\n+PRIMARY KEY (ENTRY_ID)\n+);\n+\n+CREATE TABLE qrtz_scheduler_state\n+(\n+INSTANCE_NAME VARCHAR(200) NOT NULL,\n+LAST_CHECKIN_TIME NUMERIC(13) NOT NULL,\n+CHECKIN_INTERVAL NUMERIC(13) NOT NULL,\n+PRIMARY KEY (INSTANCE_NAME)\n+);\n+\n+CREATE TABLE qrtz_locks\n+(\n+LOCK_NAME VARCHAR(40) NOT NULL,\n+PRIMARY KEY (LOCK_NAME)\n+);\n+\n+INSERT INTO qrtz_locks values('TRIGGER_ACCESS');\n+INSERT INTO qrtz_locks values('JOB_ACCESS');\n+INSERT INTO qrtz_locks values('CALENDAR_ACCESS');\n+INSERT INTO qrtz_locks values('STATE_ACCESS');\n+INSERT INTO qrtz_locks values('MISFIRE_ACCESS');"},{"sha":"a05f15b20733445e1d2f6504878f3864896c9d8e","filename":"core/src/main/resources/quartz/tables_mysql.sql","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql.sql?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -0,0 +1,146 @@\n+CREATE TABLE QRTZ_JOB_DETAILS\n+  (\n+    JOB_NAME  VARCHAR(200) NOT NULL,\n+    JOB_GROUP VARCHAR(200) NOT NULL,\n+    DESCRIPTION VARCHAR(250) NULL,\n+    JOB_CLASS_NAME   VARCHAR(250) NOT NULL,\n+    IS_DURABLE VARCHAR(1) NOT NULL,\n+    IS_VOLATILE VARCHAR(1) NOT NULL,\n+    IS_STATEFUL VARCHAR(1) NOT NULL,\n+    REQUESTS_RECOVERY VARCHAR(1) NOT NULL,\n+    JOB_DATA BLOB NULL,\n+    PRIMARY KEY (JOB_NAME,JOB_GROUP)\n+);\n+\n+CREATE TABLE QRTZ_JOB_LISTENERS\n+  (\n+    JOB_NAME  VARCHAR(200) NOT NULL,\n+    JOB_GROUP VARCHAR(200) NOT NULL,\n+    JOB_LISTENER VARCHAR(200) NOT NULL,\n+    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),\n+    FOREIGN KEY (JOB_NAME,JOB_GROUP)\n+        REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)\n+);\n+\n+CREATE TABLE QRTZ_TRIGGERS\n+  (\n+    TRIGGER_NAME VARCHAR(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+    JOB_NAME  VARCHAR(200) NOT NULL,\n+    JOB_GROUP VARCHAR(200) NOT NULL,\n+    IS_VOLATILE VARCHAR(1) NOT NULL,\n+    DESCRIPTION VARCHAR(250) NULL,\n+    NEXT_FIRE_TIME BIGINT(13) NULL,\n+    PREV_FIRE_TIME BIGINT(13) NULL,\n+    PRIORITY INTEGER NULL,\n+    TRIGGER_STATE VARCHAR(16) NOT NULL,\n+    TRIGGER_TYPE VARCHAR(8) NOT NULL,\n+    START_TIME BIGINT(13) NOT NULL,\n+    END_TIME BIGINT(13) NULL,\n+    CALENDAR_NAME VARCHAR(200) NULL,\n+    MISFIRE_INSTR SMALLINT(2) NULL,\n+    JOB_DATA BLOB NULL,\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+    FOREIGN KEY (JOB_NAME,JOB_GROUP)\n+        REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)\n+);\n+\n+CREATE TABLE QRTZ_SIMPLE_TRIGGERS\n+  (\n+    TRIGGER_NAME VARCHAR(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+    REPEAT_COUNT BIGINT(7) NOT NULL,\n+    REPEAT_INTERVAL BIGINT(12) NOT NULL,\n+    TIMES_TRIGGERED BIGINT(10) NOT NULL,\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)\n+        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE QRTZ_CRON_TRIGGERS\n+  (\n+    TRIGGER_NAME VARCHAR(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+    CRON_EXPRESSION VARCHAR(200) NOT NULL,\n+    TIME_ZONE_ID VARCHAR(80),\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)\n+        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE QRTZ_BLOB_TRIGGERS\n+  (\n+    TRIGGER_NAME VARCHAR(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+    BLOB_DATA BLOB NULL,\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)\n+        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE QRTZ_TRIGGER_LISTENERS\n+  (\n+    TRIGGER_NAME  VARCHAR(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+    TRIGGER_LISTENER VARCHAR(200) NOT NULL,\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),\n+    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)\n+        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+\n+\n+CREATE TABLE QRTZ_CALENDARS\n+  (\n+    CALENDAR_NAME  VARCHAR(200) NOT NULL,\n+    CALENDAR BLOB NOT NULL,\n+    PRIMARY KEY (CALENDAR_NAME)\n+);\n+\n+\n+\n+CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS\n+  (\n+    TRIGGER_GROUP  VARCHAR(200) NOT NULL, \n+    PRIMARY KEY (TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE QRTZ_FIRED_TRIGGERS\n+  (\n+    ENTRY_ID VARCHAR(95) NOT NULL,\n+    TRIGGER_NAME VARCHAR(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+    IS_VOLATILE VARCHAR(1) NOT NULL,\n+    INSTANCE_NAME VARCHAR(200) NOT NULL,\n+    FIRED_TIME BIGINT(13) NOT NULL,\n+    PRIORITY INTEGER NOT NULL,\n+    STATE VARCHAR(16) NOT NULL,\n+    JOB_NAME VARCHAR(200) NULL,\n+    JOB_GROUP VARCHAR(200) NULL,\n+    IS_STATEFUL VARCHAR(1) NULL,\n+    REQUESTS_RECOVERY VARCHAR(1) NULL,\n+    PRIMARY KEY (ENTRY_ID)\n+);\n+\n+CREATE TABLE QRTZ_SCHEDULER_STATE\n+  (\n+    INSTANCE_NAME VARCHAR(200) NOT NULL,\n+    LAST_CHECKIN_TIME BIGINT(13) NOT NULL,\n+    CHECKIN_INTERVAL BIGINT(13) NOT NULL,\n+    PRIMARY KEY (INSTANCE_NAME)\n+);\n+\n+CREATE TABLE QRTZ_LOCKS\n+  (\n+    LOCK_NAME  VARCHAR(40) NOT NULL, \n+    PRIMARY KEY (LOCK_NAME)\n+);\n+\n+\n+INSERT INTO QRTZ_LOCKS values('TRIGGER_ACCESS');\n+INSERT INTO QRTZ_LOCKS values('JOB_ACCESS');\n+INSERT INTO QRTZ_LOCKS values('CALENDAR_ACCESS');\n+INSERT INTO QRTZ_LOCKS values('STATE_ACCESS');\n+INSERT INTO QRTZ_LOCKS values('MISFIRE_ACCESS');\n+\n+\n+commit;"},{"sha":"cb1a516a5d572dd7115cdce3b23f75277eeebb08","filename":"core/src/main/resources/quartz/tables_mysql_innodb.sql","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql_innodb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql_innodb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql_innodb.sql?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -0,0 +1,134 @@\n+CREATE TABLE QRTZ_JOB_DETAILS(\n+JOB_NAME VARCHAR(200) NOT NULL,\n+JOB_GROUP VARCHAR(200) NOT NULL,\n+DESCRIPTION VARCHAR(250) NULL,\n+JOB_CLASS_NAME VARCHAR(250) NOT NULL,\n+IS_DURABLE VARCHAR(1) NOT NULL,\n+IS_VOLATILE VARCHAR(1) NOT NULL,\n+IS_STATEFUL VARCHAR(1) NOT NULL,\n+REQUESTS_RECOVERY VARCHAR(1) NOT NULL,\n+JOB_DATA BLOB NULL,\n+PRIMARY KEY (JOB_NAME,JOB_GROUP))\n+TYPE=InnoDB;\n+\n+CREATE TABLE QRTZ_JOB_LISTENERS (\n+JOB_NAME VARCHAR(200) NOT NULL,\n+JOB_GROUP VARCHAR(200) NOT NULL,\n+JOB_LISTENER VARCHAR(200) NOT NULL,\n+PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),\n+INDEX (JOB_NAME, JOB_GROUP),\n+FOREIGN KEY (JOB_NAME,JOB_GROUP)\n+REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP))\n+TYPE=InnoDB;\n+\n+CREATE TABLE QRTZ_TRIGGERS (\n+TRIGGER_NAME VARCHAR(200) NOT NULL,\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+JOB_NAME VARCHAR(200) NOT NULL,\n+JOB_GROUP VARCHAR(200) NOT NULL,\n+IS_VOLATILE VARCHAR(1) NOT NULL,\n+DESCRIPTION VARCHAR(250) NULL,\n+NEXT_FIRE_TIME BIGINT(13) NULL,\n+PREV_FIRE_TIME BIGINT(13) NULL,\n+PRIORITY INTEGER NULL,\n+TRIGGER_STATE VARCHAR(16) NOT NULL,\n+TRIGGER_TYPE VARCHAR(8) NOT NULL,\n+START_TIME BIGINT(13) NOT NULL,\n+END_TIME BIGINT(13) NULL,\n+CALENDAR_NAME VARCHAR(200) NULL,\n+MISFIRE_INSTR SMALLINT(2) NULL,\n+JOB_DATA BLOB NULL,\n+PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+INDEX (JOB_NAME, JOB_GROUP),\n+FOREIGN KEY (JOB_NAME,JOB_GROUP)\n+REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP))\n+TYPE=InnoDB;\n+\n+CREATE TABLE QRTZ_SIMPLE_TRIGGERS (\n+TRIGGER_NAME VARCHAR(200) NOT NULL,\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+REPEAT_COUNT BIGINT(7) NOT NULL,\n+REPEAT_INTERVAL BIGINT(12) NOT NULL,\n+TIMES_TRIGGERED BIGINT(10) NOT NULL,\n+PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+INDEX (TRIGGER_NAME, TRIGGER_GROUP),\n+FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)\n+REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP))\n+TYPE=InnoDB;\n+\n+CREATE TABLE QRTZ_CRON_TRIGGERS (\n+TRIGGER_NAME VARCHAR(200) NOT NULL,\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+CRON_EXPRESSION VARCHAR(120) NOT NULL,\n+TIME_ZONE_ID VARCHAR(80),\n+PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+INDEX (TRIGGER_NAME, TRIGGER_GROUP),\n+FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)\n+REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP))\n+TYPE=InnoDB;\n+\n+CREATE TABLE QRTZ_BLOB_TRIGGERS (\n+TRIGGER_NAME VARCHAR(200) NOT NULL,\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+BLOB_DATA BLOB NULL,\n+PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+INDEX (TRIGGER_NAME, TRIGGER_GROUP),\n+FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)\n+REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP))\n+TYPE=InnoDB;\n+\n+CREATE TABLE QRTZ_TRIGGER_LISTENERS (\n+TRIGGER_NAME VARCHAR(200) NOT NULL,\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+TRIGGER_LISTENER VARCHAR(200) NOT NULL,\n+PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),\n+INDEX (TRIGGER_NAME, TRIGGER_GROUP),\n+FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)\n+REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP))\n+TYPE=InnoDB;\n+\n+CREATE TABLE QRTZ_CALENDARS (\n+CALENDAR_NAME VARCHAR(200) NOT NULL,\n+CALENDAR BLOB NOT NULL,\n+PRIMARY KEY (CALENDAR_NAME))\n+TYPE=InnoDB;\n+\n+CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+PRIMARY KEY (TRIGGER_GROUP))\n+TYPE=InnoDB;\n+\n+CREATE TABLE QRTZ_FIRED_TRIGGERS (\n+ENTRY_ID VARCHAR(95) NOT NULL,\n+TRIGGER_NAME VARCHAR(200) NOT NULL,\n+TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+IS_VOLATILE VARCHAR(1) NOT NULL,\n+INSTANCE_NAME VARCHAR(200) NOT NULL,\n+FIRED_TIME BIGINT(13) NOT NULL,\n+PRIORITY INTEGER NOT NULL,\n+STATE VARCHAR(16) NOT NULL,\n+JOB_NAME VARCHAR(200) NULL,\n+JOB_GROUP VARCHAR(200) NULL,\n+IS_STATEFUL VARCHAR(1) NULL,\n+REQUESTS_RECOVERY VARCHAR(1) NULL,\n+PRIMARY KEY (ENTRY_ID))\n+TYPE=InnoDB;\n+\n+CREATE TABLE QRTZ_SCHEDULER_STATE (\n+INSTANCE_NAME VARCHAR(200) NOT NULL,\n+LAST_CHECKIN_TIME BIGINT(13) NOT NULL,\n+CHECKIN_INTERVAL BIGINT(13) NOT NULL,\n+PRIMARY KEY (INSTANCE_NAME))\n+TYPE=InnoDB;\n+\n+CREATE TABLE QRTZ_LOCKS (\n+LOCK_NAME VARCHAR(40) NOT NULL,\n+PRIMARY KEY (LOCK_NAME))\n+TYPE=InnoDB;\n+\n+INSERT INTO QRTZ_LOCKS values('TRIGGER_ACCESS');\n+INSERT INTO QRTZ_LOCKS values('JOB_ACCESS');\n+INSERT INTO QRTZ_LOCKS values('CALENDAR_ACCESS');\n+INSERT INTO QRTZ_LOCKS values('STATE_ACCESS');\n+INSERT INTO QRTZ_LOCKS values('MISFIRE_ACCESS');\n+commit; "},{"sha":"605ce20a83b6620a39ea2559bcbc8cbed3119b00","filename":"core/src/main/resources/quartz/tables_oracle.sql","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -0,0 +1,145 @@\n+CREATE TABLE qrtz_job_details\n+  (\n+    JOB_NAME  VARCHAR2(200) NOT NULL,\n+    JOB_GROUP VARCHAR2(200) NOT NULL,\n+    DESCRIPTION VARCHAR2(250) NULL,\n+    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL, \n+    IS_DURABLE VARCHAR2(1) NOT NULL,\n+    IS_VOLATILE VARCHAR2(1) NOT NULL,\n+    IS_STATEFUL VARCHAR2(1) NOT NULL,\n+    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,\n+    JOB_DATA BLOB NULL,\n+    PRIMARY KEY (JOB_NAME,JOB_GROUP)\n+);\n+CREATE TABLE qrtz_job_listeners\n+  (\n+    JOB_NAME  VARCHAR2(200) NOT NULL, \n+    JOB_GROUP VARCHAR2(200) NOT NULL,\n+    JOB_LISTENER VARCHAR2(200) NOT NULL,\n+    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),\n+    FOREIGN KEY (JOB_NAME,JOB_GROUP) \n+\tREFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)\n+);\n+CREATE TABLE qrtz_triggers\n+  (\n+    TRIGGER_NAME VARCHAR2(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR2(200) NOT NULL,\n+    JOB_NAME  VARCHAR2(200) NOT NULL, \n+    JOB_GROUP VARCHAR2(200) NOT NULL,\n+    IS_VOLATILE VARCHAR2(1) NOT NULL,\n+    DESCRIPTION VARCHAR2(250) NULL,\n+    NEXT_FIRE_TIME NUMBER(13) NULL,\n+    PREV_FIRE_TIME NUMBER(13) NULL,\n+    PRIORITY NUMBER(13) NULL,\n+    TRIGGER_STATE VARCHAR2(16) NOT NULL,\n+    TRIGGER_TYPE VARCHAR2(8) NOT NULL,\n+    START_TIME NUMBER(13) NOT NULL,\n+    END_TIME NUMBER(13) NULL,\n+    CALENDAR_NAME VARCHAR2(200) NULL,\n+    MISFIRE_INSTR NUMBER(2) NULL,\n+    JOB_DATA BLOB NULL,\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+    FOREIGN KEY (JOB_NAME,JOB_GROUP) \n+\tREFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP) \n+);\n+CREATE TABLE qrtz_simple_triggers\n+  (\n+    TRIGGER_NAME VARCHAR2(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR2(200) NOT NULL,\n+    REPEAT_COUNT NUMBER(7) NOT NULL,\n+    REPEAT_INTERVAL NUMBER(12) NOT NULL,\n+    TIMES_TRIGGERED NUMBER(10) NOT NULL,\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) \n+\tREFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+CREATE TABLE qrtz_cron_triggers\n+  (\n+    TRIGGER_NAME VARCHAR2(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR2(200) NOT NULL,\n+    CRON_EXPRESSION VARCHAR2(120) NOT NULL,\n+    TIME_ZONE_ID VARCHAR2(80),\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) \n+\tREFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+CREATE TABLE qrtz_blob_triggers\n+  (\n+    TRIGGER_NAME VARCHAR2(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR2(200) NOT NULL,\n+    BLOB_DATA BLOB NULL,\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) \n+        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+CREATE TABLE qrtz_trigger_listeners\n+  (\n+    TRIGGER_NAME  VARCHAR2(200) NOT NULL, \n+    TRIGGER_GROUP VARCHAR2(200) NOT NULL,\n+    TRIGGER_LISTENER VARCHAR2(200) NOT NULL,\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),\n+    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) \n+\tREFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+CREATE TABLE qrtz_calendars\n+  (\n+    CALENDAR_NAME  VARCHAR2(200) NOT NULL, \n+    CALENDAR BLOB NOT NULL,\n+    PRIMARY KEY (CALENDAR_NAME)\n+);\n+CREATE TABLE qrtz_paused_trigger_grps\n+  (\n+    TRIGGER_GROUP  VARCHAR2(200) NOT NULL, \n+    PRIMARY KEY (TRIGGER_GROUP)\n+);\n+CREATE TABLE qrtz_fired_triggers \n+  (\n+    ENTRY_ID VARCHAR2(95) NOT NULL,\n+    TRIGGER_NAME VARCHAR2(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR2(200) NOT NULL,\n+    IS_VOLATILE VARCHAR2(1) NOT NULL,\n+    INSTANCE_NAME VARCHAR2(200) NOT NULL,\n+    FIRED_TIME NUMBER(13) NOT NULL,\n+    PRIORITY NUMBER(13) NOT NULL,\n+    STATE VARCHAR2(16) NOT NULL,\n+    JOB_NAME VARCHAR2(200) NULL,\n+    JOB_GROUP VARCHAR2(200) NULL,\n+    IS_STATEFUL VARCHAR2(1) NULL,\n+    REQUESTS_RECOVERY VARCHAR2(1) NULL,\n+    PRIMARY KEY (ENTRY_ID)\n+);\n+CREATE TABLE qrtz_scheduler_state \n+  (\n+    INSTANCE_NAME VARCHAR2(200) NOT NULL,\n+    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,\n+    CHECKIN_INTERVAL NUMBER(13) NOT NULL,\n+    PRIMARY KEY (INSTANCE_NAME)\n+);\n+CREATE TABLE qrtz_locks\n+  (\n+    LOCK_NAME  VARCHAR2(40) NOT NULL, \n+    PRIMARY KEY (LOCK_NAME)\n+);\n+INSERT INTO qrtz_locks values('TRIGGER_ACCESS');\n+INSERT INTO qrtz_locks values('JOB_ACCESS');\n+INSERT INTO qrtz_locks values('CALENDAR_ACCESS');\n+INSERT INTO qrtz_locks values('STATE_ACCESS');\n+INSERT INTO qrtz_locks values('MISFIRE_ACCESS');\n+create index idx_qrtz_j_req_recovery on qrtz_job_details(REQUESTS_RECOVERY);\n+create index idx_qrtz_t_next_fire_time on qrtz_triggers(NEXT_FIRE_TIME);\n+create index idx_qrtz_t_state on qrtz_triggers(TRIGGER_STATE);\n+create index idx_qrtz_t_nft_st on qrtz_triggers(NEXT_FIRE_TIME,TRIGGER_STATE);\n+create index idx_qrtz_t_volatile on qrtz_triggers(IS_VOLATILE);\n+create index idx_qrtz_ft_trig_name on qrtz_fired_triggers(TRIGGER_NAME);\n+create index idx_qrtz_ft_trig_group on qrtz_fired_triggers(TRIGGER_GROUP);\n+create index idx_qrtz_ft_trig_nm_gp on qrtz_fired_triggers(TRIGGER_NAME,TRIGGER_GROUP);\n+create index idx_qrtz_ft_trig_volatile on qrtz_fired_triggers(IS_VOLATILE);\n+create index idx_qrtz_ft_trig_inst_name on qrtz_fired_triggers(INSTANCE_NAME);\n+create index idx_qrtz_ft_job_name on qrtz_fired_triggers(JOB_NAME);\n+create index idx_qrtz_ft_job_group on qrtz_fired_triggers(JOB_GROUP);\n+create index idx_qrtz_ft_job_stateful on qrtz_fired_triggers(IS_STATEFUL);\n+create index idx_qrtz_ft_job_req_recovery on qrtz_fired_triggers(REQUESTS_RECOVERY);\n+\n+\n+\n+commit;"},{"sha":"5850796daed42646a95dfef6a050fe0a58b37fcd","filename":"core/src/main/resources/quartz/tables_postgres.sql","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_postgres.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_postgres.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_postgres.sql?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -0,0 +1,159 @@\n+CREATE TABLE qrtz_job_details\n+  (\n+    JOB_NAME  VARCHAR(200) NOT NULL,\n+    JOB_GROUP VARCHAR(200) NOT NULL,\n+    DESCRIPTION VARCHAR(250) NULL,\n+    JOB_CLASS_NAME   VARCHAR(250) NOT NULL, \n+    IS_DURABLE BOOL NOT NULL,\n+    IS_VOLATILE BOOL NOT NULL,\n+    IS_STATEFUL BOOL NOT NULL,\n+    REQUESTS_RECOVERY BOOL NOT NULL,\n+    JOB_DATA BYTEA NULL,\n+    PRIMARY KEY (JOB_NAME,JOB_GROUP)\n+);\n+\n+CREATE TABLE qrtz_job_listeners\n+  (\n+    JOB_NAME  VARCHAR(200) NOT NULL, \n+    JOB_GROUP VARCHAR(200) NOT NULL,\n+    JOB_LISTENER VARCHAR(200) NOT NULL,\n+    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),\n+    FOREIGN KEY (JOB_NAME,JOB_GROUP) \n+\tREFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP) \n+);\n+\n+CREATE TABLE qrtz_triggers\n+  (\n+    TRIGGER_NAME VARCHAR(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+    JOB_NAME  VARCHAR(200) NOT NULL, \n+    JOB_GROUP VARCHAR(200) NOT NULL,\n+    IS_VOLATILE BOOL NOT NULL,\n+    DESCRIPTION VARCHAR(250) NULL,\n+    NEXT_FIRE_TIME BIGINT NULL,\n+    PREV_FIRE_TIME BIGINT NULL,\n+    PRIORITY INTEGER NULL,\n+    TRIGGER_STATE VARCHAR(16) NOT NULL,\n+    TRIGGER_TYPE VARCHAR(8) NOT NULL,\n+    START_TIME BIGINT NOT NULL,\n+    END_TIME BIGINT NULL,\n+    CALENDAR_NAME VARCHAR(200) NULL,\n+    MISFIRE_INSTR SMALLINT NULL,\n+    JOB_DATA BYTEA NULL,\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+    FOREIGN KEY (JOB_NAME,JOB_GROUP) \n+\tREFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP) \n+);\n+\n+CREATE TABLE qrtz_simple_triggers\n+  (\n+    TRIGGER_NAME VARCHAR(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+    REPEAT_COUNT BIGINT NOT NULL,\n+    REPEAT_INTERVAL BIGINT NOT NULL,\n+    TIMES_TRIGGERED BIGINT NOT NULL,\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) \n+\tREFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE qrtz_cron_triggers\n+  (\n+    TRIGGER_NAME VARCHAR(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+    CRON_EXPRESSION VARCHAR(120) NOT NULL,\n+    TIME_ZONE_ID VARCHAR(80),\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) \n+\tREFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE qrtz_blob_triggers\n+  (\n+    TRIGGER_NAME VARCHAR(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+    BLOB_DATA BYTEA NULL,\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),\n+    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) \n+        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE qrtz_trigger_listeners\n+  (\n+    TRIGGER_NAME  VARCHAR(200) NOT NULL, \n+    TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+    TRIGGER_LISTENER VARCHAR(200) NOT NULL,\n+    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),\n+    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) \n+\tREFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)\n+);\n+\n+\n+CREATE TABLE qrtz_calendars\n+  (\n+    CALENDAR_NAME  VARCHAR(200) NOT NULL, \n+    CALENDAR BYTEA NOT NULL,\n+    PRIMARY KEY (CALENDAR_NAME)\n+);\n+\n+\n+CREATE TABLE qrtz_paused_trigger_grps\n+  (\n+    TRIGGER_GROUP  VARCHAR(200) NOT NULL, \n+    PRIMARY KEY (TRIGGER_GROUP)\n+);\n+\n+CREATE TABLE qrtz_fired_triggers \n+  (\n+    ENTRY_ID VARCHAR(95) NOT NULL,\n+    TRIGGER_NAME VARCHAR(200) NOT NULL,\n+    TRIGGER_GROUP VARCHAR(200) NOT NULL,\n+    IS_VOLATILE BOOL NOT NULL,\n+    INSTANCE_NAME VARCHAR(200) NOT NULL,\n+    FIRED_TIME BIGINT NOT NULL,\n+    PRIORITY INTEGER NOT NULL,\n+    STATE VARCHAR(16) NOT NULL,\n+    JOB_NAME VARCHAR(200) NULL,\n+    JOB_GROUP VARCHAR(200) NULL,\n+    IS_STATEFUL BOOL NULL,\n+    REQUESTS_RECOVERY BOOL NULL,\n+    PRIMARY KEY (ENTRY_ID)\n+);\n+\n+CREATE TABLE qrtz_scheduler_state \n+  (\n+    INSTANCE_NAME VARCHAR(200) NOT NULL,\n+    LAST_CHECKIN_TIME BIGINT NOT NULL,\n+    CHECKIN_INTERVAL BIGINT NOT NULL,\n+    PRIMARY KEY (INSTANCE_NAME)\n+);\n+\n+CREATE TABLE qrtz_locks\n+  (\n+    LOCK_NAME  VARCHAR(40) NOT NULL, \n+    PRIMARY KEY (LOCK_NAME)\n+);\n+\n+\n+INSERT INTO qrtz_locks values('TRIGGER_ACCESS');\n+INSERT INTO qrtz_locks values('JOB_ACCESS');\n+INSERT INTO qrtz_locks values('CALENDAR_ACCESS');\n+INSERT INTO qrtz_locks values('STATE_ACCESS');\n+INSERT INTO qrtz_locks values('MISFIRE_ACCESS');\n+\n+create index idx_qrtz_j_req_recovery on qrtz_job_details(REQUESTS_RECOVERY);\n+create index idx_qrtz_t_next_fire_time on qrtz_triggers(NEXT_FIRE_TIME);\n+create index idx_qrtz_t_state on qrtz_triggers(TRIGGER_STATE);\n+create index idx_qrtz_t_nft_st on qrtz_triggers(NEXT_FIRE_TIME,TRIGGER_STATE);\n+create index idx_qrtz_t_volatile on qrtz_triggers(IS_VOLATILE);\n+create index idx_qrtz_ft_trig_name on qrtz_fired_triggers(TRIGGER_NAME);\n+create index idx_qrtz_ft_trig_group on qrtz_fired_triggers(TRIGGER_GROUP);\n+create index idx_qrtz_ft_trig_nm_gp on qrtz_fired_triggers(TRIGGER_NAME,TRIGGER_GROUP);\n+create index idx_qrtz_ft_trig_volatile on qrtz_fired_triggers(IS_VOLATILE);\n+create index idx_qrtz_ft_trig_inst_name on qrtz_fired_triggers(INSTANCE_NAME);\n+create index idx_qrtz_ft_job_name on qrtz_fired_triggers(JOB_NAME);\n+create index idx_qrtz_ft_job_group on qrtz_fired_triggers(JOB_GROUP);\n+create index idx_qrtz_ft_job_stateful on qrtz_fired_triggers(IS_STATEFUL);\n+create index idx_qrtz_ft_job_req_recovery on qrtz_fired_triggers(REQUESTS_RECOVERY);\n+\n+commit;"},{"sha":"bc0d53bf73846094aca70467d8b6d78f78208515","filename":"core/src/main/resources/schedulingContext.xml","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -0,0 +1,68 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+       http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+\n+    <bean id=\"quartzDbInitializer\" class=\"org.springframework.jdbc.datasource.init.DataSourceInitializer\">\n+        <property name=\"dataSource\" ref=\"dataSource\"/>\n+        <property name=\"enabled\" value=\"true\"/>\n+        <property name=\"databasePopulator\">\n+            <bean class=\"org.springframework.jdbc.datasource.init.ResourceDatabasePopulator\">\n+                <property name=\"continueOnError\" value=\"true\"/>\n+                <property name=\"ignoreFailedDrops\" value=\"true\"/>\n+                <property name=\"sqlScriptEncoding\" value=\"UTF-8\"/>\n+                <property name=\"scripts\">\n+                    <array>\n+                        <value type=\"org.springframework.core.io.Resource\">\n+                            classpath:/quartz/${quartz.sql}\n+                        </value>\n+                    </array>\n+                </property>\n+            </bean>\n+        </property>\n+    </bean>\n+\n+    <bean id=\"scheduler\"\n+\t  class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\"\n+          lazy-init=\"false\" depends-on=\"quartzDbInitializer\">\n+        <property name=\"autoStartup\" value=\"true\"/>\n+        <property name=\"applicationContextSchedulerContextKey\" value=\"applicationContext\"/>\n+        <property name=\"waitForJobsToCompleteOnShutdown\" value=\"true\"/>\n+        <property name=\"overwriteExistingJobs\" value=\"true\"/>\n+        <property name=\"dataSource\" ref=\"dataSource\"/>\n+        <property name=\"transactionManager\" ref=\"transactionManager\"/>\n+        <property name=\"quartzProperties\">\n+            <props>\n+\t\t<!-- Job store -->\n+                <prop key=\"org.quartz.jobStore.misfireThreshold\">6000000</prop>\n+                <prop key=\"org.quartz.jobStore.driverDelegateClass\">${quartz.jobstore}</prop>\n+\n+                <prop key=\"org.quartz.jobStore.isClustered\">true</prop>\n+                <prop key=\"org.quartz.jobStore.clusterCheckinInterval\">20000</prop>\n+\n+                <prop key=\"org.quartz.scheduler.instanceName\">ClusteredScheduler</prop>\n+                <prop key=\"org.quartz.scheduler.instanceId\">AUTO</prop>\n+                <prop key=\"org.quartz.scheduler.jmx.export\">true</prop>\n+            </props>\n+        </property>\n+    </bean>\n+\n+    <bean id=\"jpaInterceptor\" class=\"org.springframework.orm.jpa.JpaInterceptor\">\n+        <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n+    </bean>\n+\n+</beans>"},{"sha":"3939e5a0d3fa623d784600e8f2cd5816bb0dbae8","filename":"core/src/test/resources/persistence.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/481612fcfede629a3a31445c17562b6290d40cf8/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties?ref=481612fcfede629a3a31445c17562b6290d40cf8","patch":"@@ -15,3 +15,5 @@ hibernate.connection.username=sa\n hibernate.connection.password=\n hibernate.dialect=org.hibernate.dialect.HSQLDialect\n dbUnitDataTypeFactory=org.dbunit.ext.hsqldb.HsqldbDataTypeFactory\n+quartz.jobstore=org.quartz.impl.jdbcjobstore.HSQLDBDelegate\n+quartz.sql=tables_hsqldb.sql"}]}