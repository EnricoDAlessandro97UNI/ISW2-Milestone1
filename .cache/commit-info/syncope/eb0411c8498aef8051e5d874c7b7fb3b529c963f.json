{"sha":"eb0411c8498aef8051e5d874c7b7fb3b529c963f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmViMDQxMWM4NDk4YWVmODA1MWU1ZDg3NGM3YjdmYjNiNTI5Yzk2M2Y=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2016-01-25T16:36:28Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2016-01-25T16:36:28Z"},"message":"[SYNCOPE-752] Added console tests for Types","tree":{"sha":"2ab23131ba07c8c173d3cea0f1cccd57cbce467d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2ab23131ba07c8c173d3cea0f1cccd57cbce467d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/eb0411c8498aef8051e5d874c7b7fb3b529c963f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eb0411c8498aef8051e5d874c7b7fb3b529c963f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eb0411c8498aef8051e5d874c7b7fb3b529c963f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eb0411c8498aef8051e5d874c7b7fb3b529c963f/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"d30415675e5b062ba25bd98a3a2711ea01351ab2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d30415675e5b062ba25bd98a3a2711ea01351ab2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d30415675e5b062ba25bd98a3a2711ea01351ab2"}],"stats":{"total":982,"additions":981,"deletions":1},"files":[{"sha":"834adaca8cb292041e95c10510d4112e83129cb5","filename":"fit/console-reference/src/test/java/org/apache/syncope/fit/console/reference/AbstractITCase.java","status":"modified","additions":32,"deletions":1,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2FAbstractITCase.java?ref=eb0411c8498aef8051e5d874c7b7fb3b529c963f","patch":"@@ -18,14 +18,20 @@\n  */\n package org.apache.syncope.fit.console.reference;\n \n+import java.lang.reflect.InvocationTargetException;\n import javax.servlet.ServletContext;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.console.init.ConsoleInitializer;\n import org.apache.syncope.client.console.init.MIMETypesLoader;\n import org.apache.syncope.client.console.pages.Login;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.core.util.lang.PropertyResolver;\n+import org.apache.wicket.markup.repeater.OddEvenItem;\n import org.apache.wicket.util.tester.FormTester;\n import org.apache.wicket.util.tester.WicketTester;\n+import org.apache.wicket.util.visit.IVisit;\n+import org.apache.wicket.util.visit.IVisitor;\n import org.junit.Before;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -37,6 +43,8 @@ public abstract class AbstractITCase {\n     public static final String ADMIN = \"admin\";\n \n     public static final String PASSWORD = \"password\";\n+    \n+    public static final String KEY = \"key\";\n \n     protected WicketTester wicketTester;\n \n@@ -69,9 +77,32 @@ protected void doLogin(final String user, final String passwd) {\n         wicketTester.startPage(Login.class);\n         wicketTester.assertRenderedPage(Login.class);\n \n-        final FormTester formTester = wicketTester.newFormTester(\"login\");\n+        FormTester formTester = wicketTester.newFormTester(\"login\");\n         formTester.setValue(\"username\", user);\n         formTester.setValue(\"password\", passwd);\n         formTester.submit(\"submit\");\n     }\n+\n+    protected Component findComponentByProp(final String property, final String searchPath, final String key) {\n+        Component component =\n+                wicketTester.getComponentFromLastRenderedPage(searchPath);\n+\n+        Component result = component.getPage().\n+                visitChildren(OddEvenItem.class, new IVisitor<OddEvenItem<?>, Component>() {\n+\n+                    @Override\n+                    public void component(final OddEvenItem<?> object, final IVisit<Component> visit) {\n+                        \n+                        try {\n+                            if (PropertyResolver.getPropertyGetter(\n+                                    property, object.getModelObject()).invoke(object.getModelObject()).equals(key)) {\n+                                visit.stop(object);\n+                            }\n+                        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {\n+                            LOG.error(\"Error invoke method\", ex);\n+                        }\n+                    }\n+                });\n+        return result;\n+    }\n }"},{"sha":"cb1bba23cb2da7461abc3d25f46650af08db5d3d","filename":"fit/console-reference/src/test/java/org/apache/syncope/fit/console/reference/commons/TestPage.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fcommons%2FTestPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fcommons%2FTestPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fcommons%2FTestPage.java?ref=eb0411c8498aef8051e5d874c7b7fb3b529c963f","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.console.reference.commons;\n+\n+import java.io.Serializable;\n+import org.apache.wicket.MarkupContainer;\n+import org.apache.wicket.markup.IMarkupResourceStreamProvider;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.util.resource.IResourceStream;\n+import org.apache.wicket.util.resource.StringResourceStream;\n+\n+public class TestPage<T extends Serializable, S extends Panel> extends WebPage implements\n+        IMarkupResourceStreamProvider {\n+\n+    private static final long serialVersionUID = 483736530078975170L;\n+\n+    public static String FIELD = \"field\";\n+\n+    private final Form<T> form;\n+\n+    private final S fieldPanel;\n+\n+    private TestPage(S field, final Builder<T, S> builder) {\n+\n+        this.form = builder.form;\n+        this.fieldPanel = field;\n+        \n+        field.setOutputMarkupId(builder.outputMarkupId);\n+        add(form);\n+        form.add(field);\n+    }\n+\n+    public Form<T> getForm() {\n+        return form;\n+    }\n+\n+    public S getFieldPanel() {\n+        return fieldPanel;\n+    }\n+\n+    public static class Builder<T extends Serializable, S extends Panel> implements Serializable {\n+\n+        private static final long serialVersionUID = 4882978420728876617L;\n+\n+        private final Form<T> form;\n+\n+        private boolean outputMarkupId;\n+\n+        public Builder() {\n+            this.form = new Form<>(\"form\");\n+\n+        }\n+\n+        public Builder<T, S> setOutputMarkupId(final boolean outputMarkupId) {\n+            this.outputMarkupId = outputMarkupId;\n+            return this;\n+        }\n+\n+        public TestPage<T, S> build(final S field) {\n+            return new TestPage<>(field, this);\n+        }\n+    }\n+\n+    @Override\n+    public IResourceStream getMarkupResourceStream(final MarkupContainer container,\n+            final Class<?> containerClass) {\n+        return new StringResourceStream(\"<html><body>\"\n+                + \"<form wicket:id=\\\"form\\\"><span wicket:id=\\\"field\\\"></span></form></body></html>\");\n+    }\n+}"},{"sha":"56f7fd683f0c9a5fe377107fb0b3ce8cb5a077a7","filename":"fit/console-reference/src/test/java/org/apache/syncope/fit/console/reference/markup/html/form/AjaxPalettePanelITCase.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanelITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanelITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanelITCase.java?ref=eb0411c8498aef8051e5d874c7b7fb3b529c963f","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.console.reference.markup.html.form;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.fit.console.reference.AbstractITCase;\n+import org.apache.syncope.fit.console.reference.commons.TestPage;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.util.ListModel;\n+import org.apache.wicket.util.tester.FormTester;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class AjaxPalettePanelITCase extends AbstractITCase {\n+\n+    private static final IModel<List<String>> SELECTED = new ListModel<>(new ArrayList<>(Arrays.asList(\"A\", \"D\")));\n+\n+    private static final ListModel<String> ALL = new ListModel<>(new ArrayList<>(Arrays.asList(\"A\", \"B\", \"C\", \"D\")));\n+\n+    @Test\n+    public void isRendered() {\n+        TestPage<String, AjaxPalettePanel<String>> testPage =\n+                new TestPage.Builder<String, AjaxPalettePanel<String>>().build(\n+                        new AjaxPalettePanel.Builder<String>().setAllowOrder(true).build(\n+                        TestPage.FIELD, SELECTED, ALL));\n+        wicketTester.startPage(testPage);\n+\n+        FormTester formTester = wicketTester.newFormTester(testPage.getForm().getId());\n+        formTester.submit();\n+\n+        Collection<String> list = testPage.getFieldPanel().getModelCollection();\n+        assertEquals(2, list.size());\n+        Iterator<String> iterator = list.iterator();\n+        assertEquals(\"A\", iterator.next());\n+        assertEquals(\"D\", iterator.next());\n+    }\n+}"},{"sha":"db7ee8dd37ad9ff6a15ef10f3a389284e4b4980e","filename":"fit/console-reference/src/test/java/org/apache/syncope/fit/console/reference/markup/html/form/AjaxTextFieldITCase.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldITCase.java?ref=eb0411c8498aef8051e5d874c7b7fb3b529c963f","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.console.reference.markup.html.form;\n+\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.fit.console.reference.AbstractITCase;\n+import org.apache.wicket.util.string.Strings;\n+import org.apache.wicket.util.tester.FormTester;\n+import org.apache.wicket.validation.validator.StringValidator;\n+import org.junit.Test;\n+import org.apache.syncope.fit.console.reference.commons.TestPage;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class AjaxTextFieldITCase extends AbstractITCase {\n+\n+    private final IModel<String> textModel = Model.of((String) null);\n+\n+    @Test\n+    public void emptyInputConvertedToNull() {\n+        TestPage<String, AjaxTextFieldPanel> testPage =\n+                new TestPage.Builder<String, AjaxTextFieldPanel>().build(\n+                        new AjaxTextFieldPanel(TestPage.FIELD, TestPage.FIELD, textModel));\n+        wicketTester.startPage(testPage);\n+        FormTester formTester = wicketTester.newFormTester(testPage.getForm().getId());\n+        formTester.setValue(\"field:textField\", \"\");\n+        formTester.submit();\n+        assertEquals(null, testPage.getFieldPanel().getField().getDefaultModelObject());\n+    }\n+\n+    @Test\n+    public void valueAttribute() {\n+        TestPage<String, AjaxTextFieldPanel> testPage =\n+                new TestPage.Builder<String, AjaxTextFieldPanel>().build(\n+                        new AjaxTextFieldPanel(TestPage.FIELD, TestPage.FIELD, textModel));\n+        String text = \"sometext\";\n+        textModel.setObject(text);\n+        wicketTester.startPage(testPage);\n+        assertTrue(wicketTester.getLastResponseAsString().contains(Strings.escapeMarkup(text)));\n+    }\n+\n+    @Test\n+    public void nullIsNotValidated() {\n+        TestPage<String, AjaxTextFieldPanel> testPage =\n+                new TestPage.Builder<String, AjaxTextFieldPanel>().build(\n+                        new AjaxTextFieldPanel(TestPage.FIELD, TestPage.FIELD, textModel));\n+        testPage.getFieldPanel().getField().setRequired(false);\n+        testPage.getFieldPanel().getField().add(StringValidator.minimumLength(2));\n+        wicketTester.startPage(testPage);\n+        FormTester formTester = wicketTester.newFormTester(testPage.getForm().getId());\n+        formTester.setValue(\"field:textField\", \"\");\n+        formTester.submit();\n+        assertEquals(null, testPage.getFieldPanel().getDefaultModelObject());\n+        assertTrue(testPage.getFieldPanel().getField().isValid());\n+    }\n+\n+    @Test\n+    public void requiredAttribute() {\n+        TestPage<String, AjaxTextFieldPanel> testPage =\n+                new TestPage.Builder<String, AjaxTextFieldPanel>().build(\n+                        new AjaxTextFieldPanel(TestPage.FIELD, TestPage.FIELD, textModel));\n+        testPage.getFieldPanel().setOutputMarkupId(true);\n+        testPage.getFieldPanel().getField().setRequired(true);\n+        wicketTester.startPage(testPage);\n+        wicketTester.assertLabel(\"form:field:field-label\", \"field\");\n+        wicketTester.assertVisible(\"form:field:required\");\n+        wicketTester.assertVisible(\"form:field:externalAction\");\n+    }\n+}"},{"sha":"7a5c63dff1f3a87f47543875660fd7ed5cec073e","filename":"fit/console-reference/src/test/java/org/apache/syncope/fit/console/reference/pages/TypesITCase.java","status":"added","additions":152,"deletions":0,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2FTypesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2FTypesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2FTypesITCase.java?ref=eb0411c8498aef8051e5d874c7b7fb3b529c963f","patch":"@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.console.reference.pages;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import org.apache.syncope.client.console.pages.Types;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.AjaxFallbackDataTable;\n+import org.apache.syncope.fit.console.reference.AbstractITCase;\n+import org.apache.wicket.util.tester.FormTester;\n+import org.junit.Before;\n+\n+public class TypesITCase extends AbstractITCase {\n+\n+    protected static final String PLAIN_DATATABLE_PATH = \"content:tabbedPanel:panel:\"\n+            + \"collapsePanel:tabs:0:body:content:searchContainer:resultTable\";\n+\n+    protected static final String DATATABLE_PATH =\n+            \"content:tabbedPanel:panel:searchContainer:resultTable\";\n+\n+    @Before\n+    public void login() {\n+        doLogin(ADMIN, PASSWORD);\n+    }\n+\n+    protected void browsingToRelationshipType() {\n+\n+        wicketTester.clickLink(\"configurationLI:configurationUL:typesLI:types\");\n+        wicketTester.assertRenderedPage(Types.class);\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:tabs-container:tabs:0:link\");\n+        wicketTester.assertComponent(DATATABLE_PATH + \":tablePanel:groupForm:checkgroup:dataTable\",\n+                AjaxFallbackDataTable.class);\n+    }\n+\n+    protected void browsingToAnyTypes() {\n+\n+        wicketTester.clickLink(\"configurationLI:configurationUL:typesLI:types\");\n+        wicketTester.assertRenderedPage(Types.class);\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:tabs-container:tabs:1:link\");\n+        wicketTester.assertComponent(DATATABLE_PATH + \":tablePanel:groupForm:checkgroup:dataTable\",\n+                AjaxFallbackDataTable.class);\n+    }\n+\n+    protected void browsingToAnyTypeClasses() {\n+\n+        wicketTester.clickLink(\"configurationLI:configurationUL:typesLI:types\");\n+        wicketTester.assertRenderedPage(Types.class);\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:tabs-container:tabs:2:link\");\n+        wicketTester.assertComponent(DATATABLE_PATH + \":tablePanel:groupForm:checkgroup:dataTable\",\n+                AjaxFallbackDataTable.class);\n+    }\n+\n+    protected void browsingToPlainSchemas() {\n+\n+        wicketTester.clickLink(\"configurationLI:configurationUL:typesLI:types\");\n+        wicketTester.assertRenderedPage(Types.class);\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:tabs-container:tabs:3:link\");\n+        wicketTester.assertComponent(PLAIN_DATATABLE_PATH + \":tablePanel:groupForm:checkgroup:dataTable\",\n+                AjaxFallbackDataTable.class);\n+    }\n+\n+    protected void createPlainSchema(final String key) {\n+        browsingToPlainSchemas();\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:collapsePanel:tabs:0:body:content:container:content:add\");\n+\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:panel:collapsePanel:tabs:0:body:content:modal\", Modal.class);\n+\n+        final FormTester formTester = wicketTester.newFormTester(\"content:tabbedPanel:panel:\"\n+                + \"collapsePanel:tabs:0:body:content:modal:form\");\n+        formTester.setValue(\"content:details:form:key:textField\", key);\n+        formTester.setValue(\"content:details:form:type:dropDownChoiceField\", \"3\");\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:\"\n+                + \"collapsePanel:tabs:0:body:content:modal:dialog:footer:inputs:0:submit\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+\n+        wicketTester.cleanupFeedbackMessages();\n+    }\n+\n+    protected void createAnyTypeClassWithoutSchema(final String name) {\n+        browsingToAnyTypeClasses();\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:container:content:add\");\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:panel:modal\", Modal.class);\n+\n+        final FormTester formTester = wicketTester.newFormTester(\"content:tabbedPanel:panel:modal:form\");\n+        formTester.setValue(\"content:anyTypeClassDetailsPanel:form:key:textField\", name);\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:modal:dialog:footer:inputs:0:submit\");\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+\n+        wicketTester.clearFeedbackMessages();\n+    }\n+\n+    protected void createAnyType(final String name) {\n+        browsingToAnyTypes();\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:container:content:add\");\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:panel:modal\", Modal.class);\n+\n+        final FormTester formTester = wicketTester.newFormTester(\"content:tabbedPanel:panel:modal:form\");\n+        formTester.setValue(\"content:anyTypeDetailsPanel:container:form:key:textField\", name);\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:modal:dialog:footer:inputs:0:submit\");\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+\n+        wicketTester.clearFeedbackMessages();\n+    }\n+\n+    protected void createRelationshipType(final String name) {\n+        browsingToRelationshipType();\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:container:content:add\");\n+\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:panel:modal\", Modal.class);\n+\n+        final FormTester formTester = wicketTester.newFormTester(\"content:tabbedPanel:panel:modal:form\");\n+        formTester.setValue(\"content:relationshipTypeDetails:container:form:key:textField\", name);\n+        formTester.setValue(\n+                \"content:relationshipTypeDetails:container:form:description:textField\", \"test relationshipType\");\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:modal:dialog:footer:inputs:0:submit\");\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+\n+        wicketTester.clearFeedbackMessages();\n+        wicketTester.assertRenderedPage(Types.class);\n+    }\n+}"},{"sha":"3f6b3914696b512851792e6177b07e7935e328dc","filename":"fit/console-reference/src/test/java/org/apache/syncope/fit/console/reference/pages/types/AnyTypeClassesITCase.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2Ftypes%2FAnyTypeClassesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2Ftypes%2FAnyTypeClassesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2Ftypes%2FAnyTypeClassesITCase.java?ref=eb0411c8498aef8051e5d874c7b7fb3b529c963f","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.console.reference.pages.types;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import org.apache.syncope.client.console.pages.Types;\n+import org.apache.syncope.client.console.panels.AjaxDataTablePanel;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.AjaxFallbackDataTable;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.IndicatingOnConfirmAjaxLink;\n+import org.apache.syncope.fit.console.reference.pages.TypesITCase;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n+import org.apache.wicket.util.tester.FormTester;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class AnyTypeClassesITCase extends TypesITCase {\n+\n+    @Test\n+    public void read() {\n+        browsingToAnyTypeClasses();\n+        \n+        Component result = findComponentByProp(KEY, DATATABLE_PATH, \"csv\");\n+        wicketTester.assertLabel(\n+                result.getPageRelativePath() + \":cells:1:cell\", \"csv\");\n+\n+        wicketTester.assertComponent(\n+                result.getPageRelativePath() + \":cells:6:cell:panelEdit:editLink\", IndicatingAjaxLink.class);\n+\n+        wicketTester.clickLink(\n+                result.getPageRelativePath() + \":cells:6:cell:panelEdit:editLink\");\n+\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:panel:modal\", BaseModal.class);\n+    }\n+\n+    @Test\n+    public void create() {\n+        browsingToAnyTypeClasses();\n+        final String anyTypeClassTest = \"anyTypeClassTest\";\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:container:content:add\");\n+\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:panel:modal\", Modal.class);\n+\n+        final FormTester formTester = wicketTester.newFormTester(\"content:tabbedPanel:panel:modal:form\");\n+        formTester.setValue(\"content:anyTypeClassDetailsPanel:form:key:textField\", anyTypeClassTest);\n+        formTester.setValue(\n+                \"content:anyTypeClassDetailsPanel:form:container:derSchemas:paletteField:recorder\", \"mderiveddata\");\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:modal:dialog:footer:inputs:0:submit\");\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+\n+        wicketTester.clearFeedbackMessages();\n+        wicketTester.assertRenderedPage(Types.class);\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:tabs-container:tabs:2:link\");\n+        wicketTester.assertComponent(DATATABLE_PATH + \":tablePanel:groupForm:checkgroup:dataTable\",\n+                AjaxFallbackDataTable.class);\n+\n+        wicketTester.assertComponent(DATATABLE_PATH, AjaxDataTablePanel.class);\n+\n+        Component result = findComponentByProp(KEY, DATATABLE_PATH, anyTypeClassTest);\n+\n+        wicketTester.assertLabel(result.getPageRelativePath() + \":cells:4:cell\", \"[mderiveddata]\");\n+    }\n+\n+    @Test\n+    public void update() {\n+        final String plainSchema = \"anyPlainSchema\";\n+        createPlainSchema(plainSchema);\n+        browsingToAnyTypeClasses();\n+\n+        wicketTester.assertComponent(\n+                DATATABLE_PATH\n+                + \":tablePanel:groupForm:checkgroup:dataTable:\"\n+                + \"body:rows:1:cells:6:cell:panelEdit:editLink\", IndicatingAjaxLink.class);\n+\n+        wicketTester.clickLink(\n+                DATATABLE_PATH\n+                + \":tablePanel:groupForm:checkgroup:dataTable:body:rows:1:cells:6:cell:panelEdit:editLink\");\n+\n+        final FormTester formTester =\n+                wicketTester.newFormTester(\"content:tabbedPanel:panel:modal:form\");\n+        formTester.setValue(\n+                \"content:anyTypeClassDetailsPanel:form:container:plainSchemas:paletteField:recorder\", plainSchema);\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:modal:dialog:footer:inputs:0:submit\");\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+    }\n+\n+    @Test\n+    public void delete() {\n+        final String anyTypeClassName = \"zStringDelete\";\n+        createAnyTypeClassWithoutSchema(anyTypeClassName);\n+        browsingToAnyTypeClasses();\n+        wicketTester.assertComponent(DATATABLE_PATH, AjaxDataTablePanel.class);\n+        \n+        Component result = findComponentByProp(KEY, DATATABLE_PATH, anyTypeClassName);\n+\n+        assertNotNull(result);\n+        wicketTester.assertComponent(\n+                result.getPageRelativePath() + \":cells:6:cell:panelDelete:deleteLink\",\n+                IndicatingOnConfirmAjaxLink.class);\n+\n+        wicketTester.getRequest().addParameter(\"confirm\", \"true\");\n+        wicketTester.clickLink(\n+                wicketTester.getComponentFromLastRenderedPage(\n+                        result.getPageRelativePath() + \":cells:6:cell:panelDelete:deleteLink\"));\n+\n+        wicketTester.executeAjaxEvent(wicketTester.getComponentFromLastRenderedPage(\n+                result.getPageRelativePath() + \":cells:6:cell:panelDelete:deleteLink\"), \"click\");\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+\n+        wicketTester.cleanupFeedbackMessages();\n+        result = findComponentByProp(KEY, DATATABLE_PATH, anyTypeClassName);\n+\n+        assertNull(result);\n+    }\n+}"},{"sha":"cf77fd6d97e41c8398cd8a7ba97d45496225c234","filename":"fit/console-reference/src/test/java/org/apache/syncope/fit/console/reference/pages/types/AnyTypesITCase.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2Ftypes%2FAnyTypesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2Ftypes%2FAnyTypesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2Ftypes%2FAnyTypesITCase.java?ref=eb0411c8498aef8051e5d874c7b7fb3b529c963f","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.console.reference.pages.types;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import org.apache.syncope.client.console.pages.Types;\n+import org.apache.syncope.client.console.panels.AjaxDataTablePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.IndicatingOnConfirmAjaxLink;\n+import org.apache.syncope.fit.console.reference.pages.TypesITCase;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.util.tester.FormTester;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class AnyTypesITCase extends TypesITCase {\n+\n+    @Test\n+    public void read() {\n+        browsingToAnyTypes();\n+        wicketTester.assertComponent(\n+                DATATABLE_PATH\n+                + \":tablePanel:groupForm:\"\n+                + \"checkgroup:dataTable:body:rows:1:cells:1:cell\", Label.class);\n+\n+        Component result = findComponentByProp(KEY, DATATABLE_PATH, \"GROUP\");\n+\n+        wicketTester.assertComponent(\n+                result.getPageRelativePath() + \":cells:4:cell:panelEdit:editLink\", IndicatingAjaxLink.class);\n+\n+        wicketTester.clickLink(\n+                result.getPageRelativePath() + \":cells:4:cell:panelEdit:editLink\");\n+\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:panel:modal\", BaseModal.class);\n+    }\n+\n+    @Test\n+    public void create() {\n+        browsingToAnyTypes();\n+        final String anyTypeTest = \"anyTypeTest2\";\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:container:content:add\");\n+\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:panel:modal\", Modal.class);\n+\n+        final FormTester formTester = wicketTester.newFormTester(\"content:tabbedPanel:panel:modal:form\");\n+        formTester.setValue(\"content:anyTypeDetailsPanel:container:form:key:textField\", anyTypeTest);\n+        formTester.setValue(\n+                \"content:anyTypeDetailsPanel:container:form:classes:paletteField:recorder\", \"csv\");\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:modal:dialog:footer:inputs:0:submit\");\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+\n+        wicketTester.clearFeedbackMessages();\n+        wicketTester.assertRenderedPage(Types.class);\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:tabs-container:tabs:1:link\");\n+        wicketTester.assertComponent(DATATABLE_PATH, AjaxDataTablePanel.class);\n+\n+        Component result = findComponentByProp(KEY, DATATABLE_PATH, anyTypeTest);\n+\n+        wicketTester.assertLabel(result.getPageRelativePath() + \":cells:1:cell\", anyTypeTest);\n+        wicketTester.assertLabel(result.getPageRelativePath() + \":cells:3:cell\", \"[csv]\");\n+    }\n+\n+    @Test\n+    public void update() {\n+        final String name = \"anyTypeClassUpdate\";\n+        createAnyTypeClassWithoutSchema(name);\n+        browsingToAnyTypes();\n+\n+        wicketTester.assertComponent(\n+                DATATABLE_PATH\n+                + \":tablePanel:groupForm:checkgroup:dataTable:\"\n+                + \"body:rows:1:cells:4:cell:panelEdit:editLink\", IndicatingAjaxLink.class);\n+\n+        wicketTester.clickLink(\n+                DATATABLE_PATH\n+                + \":tablePanel:groupForm:checkgroup:dataTable:body:rows:1:cells:4:cell:panelEdit:editLink\");\n+\n+        final FormTester formTester =\n+                wicketTester.newFormTester(\"content:tabbedPanel:panel:modal:form\");\n+        formTester.setValue(\n+                \"content:anyTypeDetailsPanel:container:form:classes:paletteField:recorder\", name);\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:modal:dialog:footer:inputs:0:submit\");\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+    }\n+\n+    @Test\n+    public void delete() {\n+        final String name = \"anyTypeDelete\";\n+        createAnyType(name);\n+        browsingToAnyTypes();\n+        \n+        wicketTester.assertComponent(DATATABLE_PATH, AjaxDataTablePanel.class);\n+        Component result = findComponentByProp(KEY, DATATABLE_PATH, name);\n+\n+        assertNotNull(result);\n+        wicketTester.assertComponent(\n+                result.getPageRelativePath() + \":cells:4:cell:panelDelete:deleteLink\",\n+                IndicatingOnConfirmAjaxLink.class);\n+\n+        wicketTester.getRequest().addParameter(\"confirm\", \"true\");\n+        wicketTester.clickLink(\n+                wicketTester.getComponentFromLastRenderedPage(\n+                        result.getPageRelativePath() + \":cells:4:cell:panelDelete:deleteLink\"));\n+\n+        wicketTester.executeAjaxEvent(wicketTester.getComponentFromLastRenderedPage(\n+                result.getPageRelativePath() + \":cells:4:cell:panelDelete:deleteLink\"), \"onclick\");\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+\n+        wicketTester.cleanupFeedbackMessages();\n+        result = findComponentByProp(KEY, DATATABLE_PATH, name);\n+\n+        assertNull(result);\n+    }\n+}"},{"sha":"b7f63ad213e62cee1281d267051212d2186c4c55","filename":"fit/console-reference/src/test/java/org/apache/syncope/fit/console/reference/pages/types/RelationshipTypeITCase.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2Ftypes%2FRelationshipTypeITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2Ftypes%2FRelationshipTypeITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2Ftypes%2FRelationshipTypeITCase.java?ref=eb0411c8498aef8051e5d874c7b7fb3b529c963f","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.console.reference.pages.types;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.apache.syncope.client.console.panels.AjaxDataTablePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.IndicatingOnConfirmAjaxLink;\n+import org.apache.syncope.fit.console.reference.pages.TypesITCase;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.util.tester.FormTester;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class RelationshipTypeITCase extends TypesITCase {\n+\n+    @Test\n+    public void read() {\n+        browsingToRelationshipType();\n+\n+        Component result = findComponentByProp(KEY, DATATABLE_PATH, \"inclusion\");\n+\n+        wicketTester.assertComponent(\n+                result.getPageRelativePath() + \":cells:1:cell\", Label.class);\n+\n+        wicketTester.assertComponent(\n+                result.getPageRelativePath() + \":cells:3:cell:panelEdit:editLink\", IndicatingAjaxLink.class);\n+\n+        wicketTester.clickLink(\n+                result.getPageRelativePath() + \":cells:3:cell:panelEdit:editLink\");\n+\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:panel:modal\", BaseModal.class);\n+    }\n+\n+    @Test\n+    public void create() {\n+        final String name = \"relationshipTypeTest\";\n+        createRelationshipType(name);\n+        browsingToRelationshipType();\n+\n+        wicketTester.assertComponent(DATATABLE_PATH, AjaxDataTablePanel.class);\n+\n+        Component result = findComponentByProp(KEY, DATATABLE_PATH, name);\n+\n+        wicketTester.assertLabel(result.getPageRelativePath() + \":cells:1:cell\", name);\n+        wicketTester.assertLabel(result.getPageRelativePath() + \":cells:2:cell\", \"test relationshipType\");\n+    }\n+\n+    @Test\n+    public void update() {\n+        final String name = \"relationshipTypeUpdate\";\n+        createRelationshipType(name);\n+        browsingToRelationshipType();\n+\n+        wicketTester.assertComponent(\n+                DATATABLE_PATH\n+                + \":tablePanel:groupForm:checkgroup:dataTable:\"\n+                + \"body:rows:1:cells:3:cell:panelEdit:editLink\", IndicatingAjaxLink.class);\n+\n+        wicketTester.clickLink(\n+                DATATABLE_PATH\n+                + \":tablePanel:groupForm:checkgroup:dataTable:body:rows:1:cells:3:cell:panelEdit:editLink\");\n+\n+        final FormTester formTester =\n+                wicketTester.newFormTester(\"content:tabbedPanel:panel:modal:form\");\n+        formTester.setValue(\n+                \"content:relationshipTypeDetails:container:form:description:textField\", \"new description\");\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:modal:dialog:footer:inputs:0:submit\");\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+    }\n+\n+    @Test\n+    public void delete() {\n+        final String name = \"relationshipTypeDelete\";\n+        createRelationshipType(name);\n+        browsingToRelationshipType();\n+\n+        wicketTester.assertComponent(DATATABLE_PATH, AjaxDataTablePanel.class);\n+\n+        Component result = findComponentByProp(KEY, DATATABLE_PATH, name);\n+\n+        assertNotNull(result);\n+        wicketTester.assertComponent(\n+                result.getPageRelativePath() + \":cells:3:cell:panelDelete:deleteLink\",\n+                IndicatingOnConfirmAjaxLink.class);\n+\n+        wicketTester.getRequest().addParameter(\"confirm\", \"true\");\n+        wicketTester.clickLink(\n+                wicketTester.getComponentFromLastRenderedPage(\n+                        result.getPageRelativePath() + \":cells:3:cell:panelDelete:deleteLink\"));\n+\n+        wicketTester.executeAjaxEvent(wicketTester.getComponentFromLastRenderedPage(\n+                result.getPageRelativePath() + \":cells:3:cell:panelDelete:deleteLink\"), \"onclick\");\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+\n+        wicketTester.cleanupFeedbackMessages();\n+        result = findComponentByProp(KEY, DATATABLE_PATH, name);\n+\n+        assertNull(result);\n+    }\n+}"},{"sha":"fd041eb9c53623f51d96d0e0931ce69c1285387a","filename":"fit/console-reference/src/test/java/org/apache/syncope/fit/console/reference/pages/types/SchemasITCase.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2Ftypes%2FSchemasITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb0411c8498aef8051e5d874c7b7fb3b529c963f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2Ftypes%2FSchemasITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2Fpages%2Ftypes%2FSchemasITCase.java?ref=eb0411c8498aef8051e5d874c7b7fb3b529c963f","patch":"@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.console.reference.pages.types;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import org.apache.syncope.client.console.pages.Types;\n+import org.apache.syncope.client.console.panels.AjaxDataTablePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.IndicatingOnConfirmAjaxLink;\n+import org.apache.syncope.fit.console.reference.pages.TypesITCase;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.util.tester.FormTester;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertNull;\n+\n+public class SchemasITCase extends TypesITCase {\n+\n+    @Test\n+    public void readPlainSchema() {\n+        browsingToPlainSchemas();\n+        wicketTester.assertLabel(\n+                PLAIN_DATATABLE_PATH\n+                + \":tablePanel:groupForm:\"\n+                + \"checkgroup:dataTable:body:rows:1:cells:1:cell\", \"aLong\");\n+\n+        wicketTester.assertComponent(\n+                PLAIN_DATATABLE_PATH\n+                + \":tablePanel:groupForm:checkgroup:dataTable:\"\n+                + \"body:rows:1:cells:7:cell:panelEdit:editLink\", IndicatingAjaxLink.class);\n+\n+        wicketTester.clickLink(\n+                PLAIN_DATATABLE_PATH\n+                + \":tablePanel:groupForm:checkgroup:dataTable:\"\n+                + \"body:rows:1:cells:7:cell:panelEdit:editLink\");\n+\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:\"\n+                + \"panel:collapsePanel:tabs:0:body:content:modal:\"\n+                + \"form:content:kindForm:kind:dropDownChoiceField\", DropDownChoice.class);\n+    }\n+\n+    @Test\n+    public void createPlainSchema() {\n+        browsingToPlainSchemas();\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:collapsePanel:tabs:0:body:content:container:content:add\");\n+\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:panel:collapsePanel:tabs:0:body:content:modal\", Modal.class);\n+\n+        final FormTester formTester = wicketTester.newFormTester(\"content:tabbedPanel:panel:\"\n+                + \"collapsePanel:tabs:0:body:content:modal:form\");\n+        formTester.setValue(\"content:details:form:key:textField\", \"zBoolean\");\n+        formTester.setValue(\"content:details:form:type:dropDownChoiceField\", \"3\");\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:\"\n+                + \"collapsePanel:tabs:0:body:content:modal:dialog:footer:inputs:0:submit\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+\n+        wicketTester.cleanupFeedbackMessages();\n+        wicketTester.assertRenderedPage(Types.class);\n+    }\n+\n+    @Test\n+    public void updatePlainSchema() {\n+        browsingToPlainSchemas();\n+        \n+        Component result = findComponentByProp(KEY, PLAIN_DATATABLE_PATH, \"firstname\");\n+        \n+        wicketTester.assertLabel(\n+                result.getPageRelativePath() + \":cells:1:cell\", \"firstname\");\n+\n+        wicketTester.clickLink(\n+                result.getPageRelativePath() + \":cells:7:cell:panelEdit:editLink\");\n+\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:\"\n+                + \"panel:collapsePanel:tabs:0:body:content:modal:\"\n+                + \"form:content:kindForm:kind:dropDownChoiceField\", DropDownChoice.class);\n+\n+        final FormTester formTester =\n+                wicketTester.newFormTester(\"content:tabbedPanel:panel:collapsePanel:tabs:0:body:content:modal:form\");\n+        formTester.setValue(\"content:details:form:multivalue:checkboxField\", \"true\");\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:\"\n+                + \"collapsePanel:tabs:0:body:content:modal:dialog:footer:inputs:0:submit\", true);\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+    }\n+\n+    @Test\n+    public void deletePlainSchema() {\n+        browsingToPlainSchemas();\n+        //create new Plain Schema\n+        final String schemaName = \"zStringDelete\";\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:collapsePanel:tabs:0:body:content:container:content:add\");\n+\n+        wicketTester.assertComponent(\n+                \"content:tabbedPanel:panel:collapsePanel:tabs:0:body:content:modal\", Modal.class);\n+\n+        final FormTester formTester = wicketTester.newFormTester(\"content:tabbedPanel:panel:\"\n+                + \"collapsePanel:tabs:0:body:content:modal:form\");\n+        formTester.setValue(\"content:details:form:key:textField\", schemaName);\n+        formTester.setValue(\"content:details:form:type:dropDownChoiceField\", \"0\");\n+\n+        wicketTester.clickLink(\"content:tabbedPanel:panel:\"\n+                + \"collapsePanel:tabs:0:body:content:modal:dialog:footer:inputs:0:submit\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");;\n+\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        //delete plain schema\n+        wicketTester.clickLink(\n+                PLAIN_DATATABLE_PATH\n+                + \":tablePanel:groupForm:checkgroup:\"\n+                + \"dataTable:topToolbars:toolbars:1:span:navigator:last\");\n+\n+        wicketTester.assertComponent(PLAIN_DATATABLE_PATH, AjaxDataTablePanel.class);\n+\n+        Component result = findComponentByProp(KEY, PLAIN_DATATABLE_PATH, schemaName);\n+\n+        wicketTester.assertComponent(\n+                result.getPageRelativePath() + \":cells:7:cell:panelDelete:deleteLink\",\n+                IndicatingOnConfirmAjaxLink.class);\n+\n+        wicketTester.getRequest().addParameter(\"confirm\", \"true\");\n+        wicketTester.clickLink(\n+                wicketTester.getComponentFromLastRenderedPage(\n+                        result.getPageRelativePath() + \":cells:7:cell:panelDelete:deleteLink\"));\n+\n+        wicketTester.executeAjaxEvent(wicketTester.getComponentFromLastRenderedPage(\n+                result.getPageRelativePath() + \":cells:7:cell:panelDelete:deleteLink\"), \"onclick\");\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        assertNull(findComponentByProp(KEY, PLAIN_DATATABLE_PATH, schemaName));\n+    }\n+}"}]}