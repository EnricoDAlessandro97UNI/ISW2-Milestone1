{"sha":"c60066731b034948b0ea96fb50458cc90d41c2fd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM2MDA2NjczMWIwMzQ5NDhiMGVhOTZmYjUwNDU4Y2M5MGQ0MWMyZmQ=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-01-23T15:37:13Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-01-23T15:37:13Z"},"message":"Fixed #SYNCOPE-581","tree":{"sha":"e84db0e67e286211421b35ebbb34ad9298e8cb64","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e84db0e67e286211421b35ebbb34ad9298e8cb64"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c60066731b034948b0ea96fb50458cc90d41c2fd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c60066731b034948b0ea96fb50458cc90d41c2fd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c60066731b034948b0ea96fb50458cc90d41c2fd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c60066731b034948b0ea96fb50458cc90d41c2fd/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"e36a4a2aafafc38d782c404309d1e9dce7b429f8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e36a4a2aafafc38d782c404309d1e9dce7b429f8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e36a4a2aafafc38d782c404309d1e9dce7b429f8"}],"stats":{"total":363,"additions":324,"deletions":39},"files":[{"sha":"296614ffd4eac70cbd04090eeb4e045bdf22f5b2","filename":"cli/src/main/java/org/apache/syncope/cli/SyncopeAdm.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60066731b034948b0ea96fb50458cc90d41c2fd/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2FSyncopeAdm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60066731b034948b0ea96fb50458cc90d41c2fd/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2FSyncopeAdm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2FSyncopeAdm.java?ref=c60066731b034948b0ea96fb50458cc90d41c2fd","patch":"@@ -20,6 +20,7 @@\n \n import com.beust.jcommander.JCommander;\n import com.beust.jcommander.ParameterException;\n+import org.apache.syncope.cli.commands.ConfigurationCommand;\n import org.apache.syncope.cli.commands.LoggerCommand;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -30,11 +31,14 @@ public class SyncopeAdm {\n \n     private static final String helpMessage = \"Usage: Main [options]\\n\"\n             + \"  Options:\\n\"\n-            + \"    logger --help \\n\";\n+            + \"    logger --help \\n\"\n+            + \"    config --help \\n\";\n+\n+    private static final JCommander jcommander = new JCommander();\n \n     private static LoggerCommand loggerCommand;\n \n-    private static final JCommander jc = new JCommander();\n+    private static ConfigurationCommand configurationCommand;\n \n     public static void main(final String[] args) {\n         LOG.debug(\"Starting with args \\n\");\n@@ -49,7 +53,7 @@ public static void main(final String[] args) {\n             System.out.println(helpMessage);\n         } else {\n             try {\n-                jc.parse(args);\n+                jcommander.parse(args);\n             } catch (final ParameterException ioe) {\n                 System.out.println(helpMessage);\n                 LOG.error(\"Parameter exception\", ioe);\n@@ -62,17 +66,22 @@ public static void main(final String[] args) {\n     private static void instantiateCommands() {\n         LOG.debug(\"Init JCommander\");\n         loggerCommand = new LoggerCommand();\n-        jc.addCommand(loggerCommand);\n+        jcommander.addCommand(loggerCommand);\n         LOG.debug(\"Added LoggerCommand\");\n+        configurationCommand = new ConfigurationCommand();\n+        jcommander.addCommand(configurationCommand);\n+        LOG.debug(\"Added ConfigurationCommand\");\n     }\n \n     private static void executeCommand() {\n-        final String command = jc.getParsedCommand();\n+        final String command = jcommander.getParsedCommand();\n \n         LOG.debug(\"Called command {}\", command);\n \n         if (\"logger\".equalsIgnoreCase(command)) {\n             loggerCommand.execute();\n+        } else if (\"config\".equalsIgnoreCase(command)) {\n+            configurationCommand.execute();\n         }\n     }\n }"},{"sha":"5dd3d381d89f85c0deec5c968fe5b4f2ab0dcc05","filename":"cli/src/main/java/org/apache/syncope/cli/commands/AbstractCommand.java","status":"added","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60066731b034948b0ea96fb50458cc90d41c2fd/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FAbstractCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60066731b034948b0ea96fb50458cc90d41c2fd/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FAbstractCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FAbstractCommand.java?ref=c60066731b034948b0ea96fb50458cc90d41c2fd","patch":"@@ -0,0 +1,11 @@\n+package org.apache.syncope.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+\n+public abstract class AbstractCommand {\n+\n+    @Parameter(names = {\"-h\", \"--help\"})\n+    protected boolean help = false;\n+    \n+    public abstract void execute();\n+}"},{"sha":"f0f54eedffa835d4d44e343ae12b1ee500776206","filename":"cli/src/main/java/org/apache/syncope/cli/commands/ConfigurationCommand.java","status":"added","additions":225,"deletions":0,"changes":225,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60066731b034948b0ea96fb50458cc90d41c2fd/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60066731b034948b0ea96fb50458cc90d41c2fd/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FConfigurationCommand.java?ref=c60066731b034948b0ea96fb50458cc90d41c2fd","patch":"@@ -0,0 +1,225 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.cli.commands;\n+\n+import com.beust.jcommander.DynamicParameter;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.SequenceInputStream;\n+import java.io.StringReader;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.syncope.cli.SyncopeServices;\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.services.ConfigurationService;\n+import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.ConfTO;\n+import org.apache.syncope.common.wrap.MailTemplate;\n+import org.apache.syncope.common.wrap.Validator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+@Parameters(\n+        commandNames = \"config\",\n+        optionPrefixes = \"-\",\n+        separators = \"=\",\n+        commandDescription = \"Apache Syncope configuration service\")\n+public class ConfigurationCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ConfigurationCommand.class);\n+\n+    private static final Class SYNCOPE_CONFIGURATION_CLASS = ConfigurationService.class;\n+\n+    private static final String EXPORT_FILE_NAME = \"/content.xml\";\n+\n+    private final String helpMessage = \"Usage: config [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    -h, --help \\n\"\n+            + \"    -l, --list \\n\"\n+            + \"    -r, --read \\n\"\n+            + \"       Syntax: -r={CONF-NAME} \\n\"\n+            + \"    -u, --update \\n\"\n+            + \"       Syntax: {CONF-NAME}={CONF-VALUE} \\n\"\n+            + \"    -c, --create \\n\"\n+            + \"       Syntax: {CONF-NAME}={CONF-VALUE} \\n\"\n+            + \"    -d, --delete \\n\"\n+            + \"       Syntax: -d={CONF-NAME}\"\n+            + \"    -v, --validators \\n\"\n+            + \"    -mt, --mail-templates \\n\"\n+            + \"    -e, --export \\n\"\n+            + \"       Syntax: -e={WHERE-DIR} \\n\";\n+\n+    @Parameter(names = {\"-l\", \"--list\"})\n+    public boolean list = false;\n+\n+    @Parameter(names = {\"-r\", \"--read\"})\n+    public String confNameToRead;\n+\n+    @DynamicParameter(names = {\"-u\", \"--update\"})\n+    private final Map<String, String> updateConf = new HashMap<String, String>();\n+\n+    @DynamicParameter(names = {\"-c\", \"--create\"})\n+    private final Map<String, String> createConf = new HashMap<String, String>();\n+\n+    @Parameter(names = {\"-d\", \"--delete\"})\n+    public String confNameToDelete;\n+\n+    @Parameter(names = {\"-v\", \"--validators\"})\n+    public boolean validators = false;\n+\n+    @Parameter(names = {\"-mt\", \"--mail-templates\"})\n+    public boolean mailTemplates = false;\n+\n+    @Parameter(names = {\"-e\", \"--export\"})\n+    public String export;\n+\n+    @Override\n+    public void execute() {\n+        final ConfigurationService configurationService = ((ConfigurationService) SyncopeServices.\n+                get(SYNCOPE_CONFIGURATION_CLASS));\n+\n+        LOG.debug(\"Logger service successfully created\");\n+\n+        if (help) {\n+            LOG.debug(\"- configuration help command\");\n+            System.out.println(helpMessage);\n+        } else if (list) {\n+            LOG.debug(\"- configuration list command\");\n+            try {\n+                final ConfTO confTO = configurationService.list();\n+                for (final AttributeTO attrTO : confTO.getAttrMap().values()) {\n+                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n+                            + \" - readonly: \" + attrTO.isReadonly());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (StringUtils.isNotBlank(confNameToRead)) {\n+            LOG.debug(\"- configuration read {} command\", confNameToRead);\n+            try {\n+                final AttributeTO attrTO = configurationService.read(confNameToRead);\n+                System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n+                        + \" - readonly: \" + attrTO.isReadonly());\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (!updateConf.isEmpty()) {\n+            LOG.debug(\"- configuration update command with params {}\", updateConf);\n+            try {\n+                for (final Map.Entry<String, String> entrySet : updateConf.entrySet()) {\n+                    final AttributeTO attrTO = configurationService.read(entrySet.getKey());\n+                    attrTO.getValues().clear();\n+                    attrTO.getValues().add(entrySet.getValue());\n+                    configurationService.set(entrySet.getKey(), attrTO);\n+                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n+                            + \" - readonly: \" + attrTO.isReadonly());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (!createConf.isEmpty()) {\n+            LOG.debug(\"- configuration create command with params {}\", createConf);\n+            try {\n+                for (final Map.Entry<String, String> entrySet : createConf.entrySet()) {\n+                    final AttributeTO attrTO = new AttributeTO();\n+                    attrTO.setSchema(entrySet.getKey());\n+                    attrTO.getValues().add(entrySet.getValue());\n+                    configurationService.set(entrySet.getKey(), attrTO);\n+                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" created with value(s) \" + attrTO.getValues()\n+                            + \" - readonly: \" + attrTO.isReadonly());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (StringUtils.isNotBlank(confNameToDelete)) {\n+            try {\n+                LOG.debug(\"- configuration delete {} command\", confNameToDelete);\n+                configurationService.delete(confNameToDelete);\n+                System.out.println(\" - Conf \" + confNameToDelete + \" deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (validators) {\n+            LOG.debug(\"- configuration validators command\");\n+            try {\n+                for (final Validator validator : configurationService.getValidators()) {\n+                    System.out.println(\" - Conf validator class: \" + validator.getElement());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (mailTemplates) {\n+            LOG.debug(\"- configuration mailTemplates command\");\n+            try {\n+                System.out.println(\" - Conf mail template for:\");\n+                for (final MailTemplate mailTemplate : configurationService.getMailTemplates()) {\n+                    System.out.println(\"    *** \" + mailTemplate.getElement());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (StringUtils.isNotBlank(export)) {\n+            LOG.debug(\"- configuration export command, directory where xml will be export: {}\", export);\n+\n+            try {\n+                TransformerFactory.newInstance().newTransformer()\n+                        .transform(new DOMSource(DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(\n+                                                new InputSource(new StringReader(IOUtils.toString(\n+                                                                        (SequenceInputStream) configurationService.\n+                                                                        export().getEntity()))))),\n+                                new StreamResult(new File(export + EXPORT_FILE_NAME)));\n+                System.out.println(\" - \" + export + EXPORT_FILE_NAME + \" successfully created\");\n+            } catch (final IOException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final ParserConfigurationException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final SAXException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final TransformerConfigurationException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final TransformerException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final SyncopeClientException ex) {\n+                LOG.error(\"Error calling configuration service\", ex);\n+                System.out.println(\" - Error calling configuration service \" + ex.getMessage());\n+            }\n+        } else {\n+            System.out.println(helpMessage);\n+        }\n+    }\n+\n+}"},{"sha":"e4d3a1cbe3f0b9e5f1904ea27b067bac97233e76","filename":"cli/src/main/java/org/apache/syncope/cli/commands/LoggerCommand.java","status":"modified","additions":74,"deletions":34,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60066731b034948b0ea96fb50458cc90d41c2fd/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60066731b034948b0ea96fb50458cc90d41c2fd/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/cli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcli%2Fcommands%2FLoggerCommand.java?ref=c60066731b034948b0ea96fb50458cc90d41c2fd","patch":"@@ -26,6 +26,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.cli.SyncopeServices;\n import org.apache.syncope.cli.validators.DebugLevelValidator;\n+import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.common.services.LoggerService;\n import org.apache.syncope.common.to.LoggerTO;\n import org.apache.syncope.common.types.LoggerLevel;\n@@ -38,43 +39,48 @@\n         optionPrefixes = \"-\",\n         separators = \"=\",\n         commandDescription = \"Apache Syncope logger service\")\n-public class LoggerCommand {\n+public class LoggerCommand extends AbstractCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(LoggerCommand.class);\n \n-    private static final Class syncopeLoggerClass = LoggerService.class;\n+    private static final Class SYNCOPE_LOGGER_CLASS = LoggerService.class;\n \n     private final String helpMessage = \"Usage: logger [options]\\n\"\n             + \"  Options:\\n\"\n             + \"    -h, --help \\n\"\n             + \"    -l, --list \\n\"\n-            + \"    -ua, --update-all \\n\"\n-            + \"       Syntax: -ua={LOGGER-LEVEL} \\n\"\n+            + \"    -r, --read \\n\"\n+            + \"       Syntax: -r={LOG-NAME} \\n\"\n             + \"    -u, --update \\n\"\n             + \"       Syntax: {LOG-NAME}={LOG-LEVEL} \\n\"\n+            + \"    -ua, --update-all \\n\"\n+            + \"       Syntax: -ua={LOG-LEVEL} \\n\"\n+            + \"    -c, --create \\n\"\n+            + \"       Syntax: {LOG-NAME}={LOG-LEVEL} \\n\"\n             + \"    -d, --delete \\n\"\n-            + \"       Syntax: -d={LOGGER-NAME}\";\n-\n-    @Parameter(names = {\"-h\", \"--help\"})\n-    public boolean help = false;\n+            + \"       Syntax: -d={LOG-NAME}\";\n \n     @Parameter(names = {\"-l\", \"--list\"})\n     public boolean list = false;\n \n+    @Parameter(names = {\"-r\", \"--read\"})\n+    public String logNameToRead;\n+\n+    @DynamicParameter(names = {\"-u\", \"--update\"})\n+    private final Map<String, String> updateLogs = new HashMap<String, String>();\n+\n     @Parameter(names = {\"-ua\", \"--update-all\"}, validateWith = DebugLevelValidator.class)\n     public String logLevel;\n \n-    @Parameter(names = {\"-r\", \"--read\"})\n-    public String logNameToRead;\n+    @DynamicParameter(names = {\"-u\", \"--update\"})\n+    private final Map<String, String> createLogs = new HashMap<String, String>();\n \n     @Parameter(names = {\"-d\", \"--delete\"})\n     public String logNameToDelete;\n \n-    @DynamicParameter(names = {\"-u\", \"--update\"})\n-    private final Map<String, String> params = new HashMap<String, String>();\n-\n+    @Override\n     public void execute() {\n-        final LoggerService loggerService = ((LoggerService) SyncopeServices.get(syncopeLoggerClass));\n+        final LoggerService loggerService = ((LoggerService) SyncopeServices.get(SYNCOPE_LOGGER_CLASS));\n \n         LOG.debug(\"Logger service successfully created\");\n \n@@ -83,32 +89,66 @@ public void execute() {\n             System.out.println(helpMessage);\n         } else if (list) {\n             LOG.debug(\"- logger list command\");\n-            for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n-                System.out.println(\" - \" + loggerTO.getName() + \" -> \" + loggerTO.getLevel());\n+            try {\n+                for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n+                    System.out.println(\" - \" + loggerTO.getName() + \" -> \" + loggerTO.getLevel());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (StringUtils.isNotBlank(logNameToRead)) {\n+            LOG.debug(\"- logger read {} command\", logNameToRead);\n+            try {\n+                final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, logNameToRead);\n+                System.out.println(\" - Logger \" + loggerTO.getName() + \" with level -> \" + loggerTO.getLevel());\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (!updateLogs.isEmpty()) {\n+            LOG.debug(\"- logger update command with params {}\", updateLogs);\n+            try {\n+                for (final Map.Entry<String, String> entrySet : updateLogs.entrySet()) {\n+                    final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, entrySet.getKey());\n+                    loggerTO.setLevel(LoggerLevel.valueOf(entrySet.getValue()));\n+                    loggerService.update(LoggerType.LOG, loggerTO.getName(), loggerTO);\n+                    System.out.println(\" - Logger \" + loggerTO.getName() + \" new level -> \" + loggerTO.getLevel());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n             }\n         } else if (StringUtils.isNotBlank(logLevel)) {\n             LOG.debug(\"- logger update all command with level {}\", logLevel);\n-            for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n-                loggerTO.setLevel(LoggerLevel.valueOf(logLevel));\n-                loggerService.update(LoggerType.LOG, loggerTO.getName(), loggerTO);\n-                System.out.println(\" - Logger \" + loggerTO.getName() + \" new value -> \" + loggerTO.getLevel());\n+            try {\n+\n+                for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n+                    loggerTO.setLevel(LoggerLevel.valueOf(logLevel));\n+                    loggerService.update(LoggerType.LOG, loggerTO.getName(), loggerTO);\n+                    System.out.println(\" - Logger \" + loggerTO.getName() + \" new level -> \" + loggerTO.getLevel());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n             }\n-        } else if (!params.isEmpty()) {\n-            LOG.debug(\"- logger update command with params {}\", params);\n-            for (final Map.Entry<String, String> entrySet : params.entrySet()) {\n-                final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, entrySet.getKey());\n-                loggerTO.setLevel(LoggerLevel.valueOf(entrySet.getValue()));\n-                loggerService.update(LoggerType.LOG, loggerTO.getName(), loggerTO);\n-                System.out.println(\" - Logger \" + loggerTO.getName() + \" new value -> \" + loggerTO.getLevel());\n+        } else if (!createLogs.isEmpty()) {\n+            LOG.debug(\"- logger create command with params {}\", createLogs);\n+            try {\n+                for (final Map.Entry<String, String> entrySet : createLogs.entrySet()) {\n+                    final LoggerTO loggerTO = new LoggerTO();\n+                    loggerTO.setName(entrySet.getKey());\n+                    loggerTO.setLevel(LoggerLevel.valueOf(entrySet.getValue()));\n+                    loggerService.update(LoggerType.LOG, loggerTO.getName(), loggerTO);\n+                    System.out.println(\" - Logger \" + loggerTO.getName() + \" created with level -> \" + loggerTO.getLevel());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n             }\n-        } else if (StringUtils.isNotBlank(logNameToRead)) {\n-            LOG.debug(\"- logger read {} command\", logNameToRead);\n-            final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, logNameToRead);\n-            System.out.println(\" - Logger \" + loggerTO.getName() + \" with level -> \" + loggerTO.getLevel());\n         } else if (StringUtils.isNotBlank(logNameToDelete)) {\n-            LOG.debug(\"- logger delete {} command\", logNameToDelete);\n-            loggerService.delete(LoggerType.LOG, logNameToDelete);\n-            System.out.println(\" - Logger \" + logNameToDelete + \" deleted!\");\n+            try {\n+                LOG.debug(\"- logger delete {} command\", logNameToDelete);\n+                loggerService.delete(LoggerType.LOG, logNameToDelete);\n+                System.out.println(\" - Logger \" + logNameToDelete + \" deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n         } else {\n             System.out.println(helpMessage);\n         }"}]}